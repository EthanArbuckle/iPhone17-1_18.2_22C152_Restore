void sub_25BF43920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_25BF43AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF43C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF43CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF43D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF43E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF44068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF441E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF44A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42)
{
  _Unwind_Resume(a1);
}

void sub_25BF44E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF44FD0(_Unwind_Exception *a1)
{
  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_25BF45064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF450EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF451D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25BF452D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2654A8D50, MEMORY[0x263F8C060]);
}

void sub_25BF4547C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void scml::MultiwordGazetteer::MultiwordGazetteer(scml::MultiwordGazetteer *this, NSLocale *a2, NSString *a3)
{
  size_t v4 = a2;
  size_t v5 = a3;
  operator new();
}

void sub_25BF45548(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v3, 0x10A0C4017A2E280);

  _Unwind_Resume(a1);
}

void scml::MultiwordGazetteer::~MultiwordGazetteer(scml::MultiwordGazetteer *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<scml::MultiwordGazetteer::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<scml::MultiwordGazetteer::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

uint64_t scml::MultiwordGazetteer::hasGazetteerMatch(uint64_t *a1, void *a2, uint64_t a3, unint64_t a4)
{
  return scml::MultiwordGazetteer::Impl::hasGazetteerMatch(*a1, a2, a3, a4);
}

uint64_t scml::MultiwordGazetteer::Impl::hasGazetteerMatch(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  id v7 = a2;
  uint64_t v8 = [*(id *)(a1 + 72) labelForString:v7];

  if (v8)
  {
    unint64_t v9 = 0;
    if (a4 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = a4;
    }
    uint64_t v11 = a3 + 32 * a4 - 32;
    while (1)
    {
      ++v9;
      unint64_t v12 = *(void *)(a1 + 64);
      if (v9 >= v12)
      {
LABEL_14:
        unsigned int v19 = 0;
        goto LABEL_16;
      }
      v13 = *(void **)(a1 + 72);
      v14 = [NSString stringWithFormat:@"*** %@", v7];
      v15 = [v13 labelForString:v14];

      if (v15) {
        break;
      }
      if (v10 == v9) {
        goto LABEL_14;
      }
      uint64_t v16 = v11;
      if (*(char *)(v11 + 23) < 0) {
        uint64_t v16 = *(void *)v11;
      }
      uint64_t v17 = [NSString stringWithFormat:@"%s %@", v16, v7];

      v18 = [*(id *)(a1 + 72) labelForString:v17];
      v11 -= 32;

      id v7 = (id)v17;
      if (!v18)
      {
        unsigned int v19 = 0;
        id v7 = (id)v17;
        goto LABEL_16;
      }
    }
    unsigned int v19 = 1;
LABEL_16:
    if (v9 >= v12) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v19;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }

  return v20;
}

void sub_25BF45768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL scml::MultiwordGazetteer::hasGazetteerMatch(scml::MultiwordGazetteer::Impl **this, NSString *a2)
{
  return scml::MultiwordGazetteer::Impl::hasGazetteerMatch(*this, a2);
}

BOOL scml::MultiwordGazetteer::Impl::hasGazetteerMatch(scml::MultiwordGazetteer::Impl *this, NSString *a2)
{
  uint64_t v3 = a2;
  std::mutex::lock((std::mutex *)this);
  v16.length = CFStringGetLength(v3);
  v16.location = 0;
  CFStringTokenizerSetString(*((CFStringTokenizerRef *)this + 10), v3, v16);
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)v15);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  int v14 = 1;
  MEMORY[0x26117A4C0](v15, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  while (1)
  {
    CFStringTokenizerTokenType Token = CFStringTokenizerAdvanceToNextToken(*((CFStringTokenizerRef *)this + 10));
    if (!Token) {
      break;
    }
    CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*((void *)this + 10));
    v6 = (__CFString *)CFStringCreateWithSubstring(v4, v3, CurrentTokenRange);
    unint64_t v12 = v6;
    uint64_t v7 = language_modeling::v1::LinguisticContext::tokenSpan((language_modeling::v1::LinguisticContext *)v15);
    if (scml::MultiwordGazetteer::Impl::hasGazetteerMatch((uint64_t)this, v6, v7, v8))
    {
      if (v6) {
        CFRelease(v6);
      }
      break;
    }
    unint64_t v9 = v6;
    std::string::basic_string[abi:ne180100]<0>(&v11, (char *)[(__CFString *)v9 UTF8String]);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v11;
    }
    int v14 = 0;
    MEMORY[0x26117A4C0](v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v11.__r_.__value_.__l.__data_);
      if (v9) {
LABEL_15:
      }
        CFRelease(v9);
    }
    else if (v9)
    {
      goto LABEL_15;
    }
  }
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)v15);
  std::mutex::unlock((std::mutex *)this);

  return Token != 0;
}

void sub_25BF45950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(v17 - 56));
  std::mutex::unlock(v16);

  _Unwind_Resume(a1);
}

id scml::MultiwordGazetteer::replaceMatches(std::mutex **this, NSString *a2, NSString *a3)
{
  uint64_t v3 = scml::MultiwordGazetteer::Impl::replaceMatches(*this, a2, a3);

  return v3;
}

NSString *scml::MultiwordGazetteer::Impl::replaceMatches(std::mutex *this, NSString *a2, NSString *a3)
{
  size_t v5 = a2;
  v6 = a3;
  std::mutex::lock(this);
  scml::strGetWordRanges((scml *)v5, v16);
  scml::MultiwordGazetteer::Impl::longestNonOverlappingGazetteerMatches((uint64_t)this, v5, v16, &__p);
  unint64_t v7 = 126 - 2 * __clz((v15 - (unsigned char *)__p) >> 4);
  if (v15 == __p) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  std::__introsort<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*,false>((unint64_t *)__p, (unint64_t *)v15, (uint64_t)&v17, v8, 1);
  unint64_t v9 = (char *)__p;
  uint64_t v10 = v15;
  if (__p == v15)
  {
    std::string v11 = v5;
  }
  else
  {
    do
    {
      -[NSString stringByReplacingCharactersInRange:withString:](v5, "stringByReplacingCharactersInRange:withString:", *(void *)v9, *((void *)v9 + 1), v6);
      std::string v11 = (NSString *)objc_claimAutoreleasedReturnValue();

      v9 += 16;
      size_t v5 = v11;
    }
    while (v9 != v10);
  }
  unint64_t v12 = v11;
  if (__p)
  {
    v15 = (char *)__p;
    operator delete(__p);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  std::mutex::unlock(this);

  return v12;
}

void sub_25BF45B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  std::mutex::unlock(v15);

  _Unwind_Resume(a1);
}

id scml::MultiwordGazetteer::preprocess(void *a1)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v26 = a1;
  CFLocaleRef v1 = (const __CFLocale *)[objc_alloc(MEMORY[0x263EFF960]) initWithLocaleIdentifier:@"en_US"];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  v49.location = 0;
  v49.length = 0;
  CFLocaleRef v30 = v1;
  CFStringTokenizerRef v3 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v49, 0, v1);
  v44 = v3;
  id v25 = (id)[MEMORY[0x263EFFA78] mutableCopy];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  obuint64_t j = [v26 allKeys];
  uint64_t v23 = [obj countByEnumeratingWithState:&v40 objects:v46 count:16];
  if (v23)
  {
    uint64_t v24 = *(void *)v41;
    do
    {
      for (uint64_t i = 0; i != v23; ++i)
      {
        if (*(void *)v41 != v24) {
          objc_enumerationMutation(obj);
        }
        uint64_t v4 = *(void *)(*((void *)&v40 + 1) + 8 * i);
        v32 = (void *)[MEMORY[0x263EFFA68] mutableCopy];
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        uint64_t v27 = v4;
        id v29 = [v26 objectForKeyedSubscript:v4];
        uint64_t v5 = [v29 countByEnumeratingWithState:&v36 objects:v45 count:16];
        if (v5)
        {
          uint64_t v31 = *(void *)v37;
          do
          {
            uint64_t v33 = v5;
            for (uint64_t j = 0; j != v33; ++j)
            {
              if (*(void *)v37 != v31) {
                objc_enumerationMutation(v29);
              }
              uint64_t v7 = *(void *)(*((void *)&v36 + 1) + 8 * j);
              id v35 = 0;
              uint64_t v8 = +[SCMLNormalizer normalizeText:v7 locale:v30 lite:0 error:&v35];
              id v34 = v35;
              if (!v8)
              {
                exception = __cxa_allocate_exception(0x10uLL);
                scml::makeException("failed to normalize text", 0x18uLL, v34, (uint64_t)exception);
                __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              unint64_t v9 = v44;
              uint64_t v10 = v8;
              id v11 = v32;
              v50.length = CFStringGetLength(v10);
              v50.location = 0;
              CFStringTokenizerSetString(v9, v10, v50);
              unint64_t v12 = (void *)[MEMORY[0x263EFFA68] mutableCopy];
              while (CFStringTokenizerAdvanceToNextToken(v9))
              {
                CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v9);
                v13 = (__CFString *)CFStringCreateWithSubstring(v2, v10, CurrentTokenRange);
                [v12 addObject:v13];
              }
              uint64_t v14 = [v12 count];
              v15 = &stru_2709753D8;
              while ((int)v14 > 0)
              {
                --v14;
                if ([(__CFString *)v15 length])
                {
                  CFRange v16 = NSString;
                  char v17 = [v12 objectAtIndexedSubscript:v14];
                  uint64_t v18 = [v16 stringWithFormat:@"%@ %@", v17, v15];

                  v15 = (__CFString *)v18;
                }
                else
                {
                  [v12 objectAtIndexedSubscript:v14];
                  char v17 = v15;
                  v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
                }

                [v11 addObject:v15];
              }
              unsigned int v19 = [NSString stringWithFormat:@"*** %@", v15];
              [v11 addObject:v19];
            }
            uint64_t v5 = [v29 countByEnumeratingWithState:&v36 objects:v45 count:16];
          }
          while (v5);
        }

        [v25 setObject:v32 forKeyedSubscript:v27];
      }
      uint64_t v23 = [obj countByEnumeratingWithState:&v40 objects:v46 count:16];
    }
    while (v23);
    CFStringTokenizerRef v3 = v44;
  }

  if (v3) {
    CFRelease(v3);
  }

  return v25;
}

void sub_25BF45FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44)
{
  nlp::CFScopedPtr<__CFStringTokenizer *>::reset(&a44, 0);
  _Unwind_Resume(a1);
}

void scml::MultiwordGazetteer::writePreprocessed(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v14 = v4;
  uint64_t v5 = [NSURL fileURLWithPath:v4];
  uint64_t v6 = *MEMORY[0x263F13E78];
  id v13 = 0;
  char v7 = [MEMORY[0x263F14000] writeGazetteerForDictionary:v3 language:v6 toURL:v5 error:&v13];
  uint64_t v8 = (scml *)v13;
  if ((v7 & 1) == 0)
  {
    unint64_t v9 = v8;
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strFromNSError(v9, v11);
    scml::strCat<char const(&)[30],NSString * {__strong}&,char const(&)[3],std::string>("Failed to write gazetteer to ", (uint64_t)&v14, ": ", (uint64_t)v11, v12);
    MEMORY[0x26117A7E0](exception, v12);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
}

void sub_25BF46238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v26 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

uint64_t scml::strCat<char const(&)[30],NSString * {__strong}&,char const(&)[3],std::string>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  scml::scml_impl::strCat<char const(&)[30],NSString * {__strong}&,char const(&)[3],std::string>(&v11, a1, a2, a3, a4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a5);
  uint64_t v11 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v12[-1] + *(void *)(v11 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[0] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v14);
}

void sub_25BF46420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  CFLocaleRef v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void __clang_call_terminate(void *a1)
{
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void nlp::CFScopedPtr<__CFString const*>::reset(const void **a1, const void *a2)
{
  id v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void scml::MultiwordGazetteer::Impl::longestNonOverlappingGazetteerMatches(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void **a4@<X8>)
{
  id v34 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v7 = a3[1] - *a3;
  if (v7)
  {
    unint64_t v8 = v7 >> 4;
    do
    {
      unint64_t v9 = scml::MultiwordGazetteer::Impl::rangesStartForLongestGazetteerMatch(a1, v34, a3, v8);
      unint64_t v10 = v9;
      if (v9 < v8)
      {
        uint64_t v11 = *(void *)(*a3 + 16 * v9);
        uint64_t v12 = *a3 + 16 * v8;
        uint64_t v13 = *(void *)(v12 - 16);
        uint64_t v14 = *(void *)(v12 - 8);
        objc_msgSend(v34, "substringWithRange:", v13, v14);
        v15 = (scml *)objc_claimAutoreleasedReturnValue();
        BOOL v17 = scml::strEndsWith(v15, &cfstr_S_1.isa, v16);
        uint64_t v18 = v14 + v13;

        uint64_t v19 = v18 - 2;
        if (!v17) {
          uint64_t v19 = v18;
        }
        uint64_t v20 = v19 - v11;
        v22 = a4[1];
        unint64_t v21 = (unint64_t)a4[2];
        if ((unint64_t)v22 >= v21)
        {
          uint64_t v24 = ((char *)v22 - (unsigned char *)*a4) >> 4;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60) {
            std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = v21 - (void)*a4;
          if (v26 >> 3 > v25) {
            unint64_t v25 = v26 >> 3;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a4 + 2), v27);
          CFLocaleRef v30 = &v28[16 * v24];
          *(void *)CFLocaleRef v30 = v11;
          *((void *)v30 + 1) = v20;
          v32 = (char *)*a4;
          uint64_t v31 = (char *)a4[1];
          uint64_t v33 = v30;
          if (v31 != *a4)
          {
            do
            {
              *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
              v33 -= 16;
              v31 -= 16;
            }
            while (v31 != v32);
            uint64_t v31 = (char *)*a4;
          }
          uint64_t v23 = v30 + 16;
          *a4 = v33;
          a4[1] = v30 + 16;
          a4[2] = &v28[16 * v29];
          if (v31) {
            operator delete(v31);
          }
        }
        else
        {
          void *v22 = v11;
          v22[1] = v20;
          uint64_t v23 = v22 + 2;
        }
        a4[1] = v23;
        unint64_t v8 = v10 + 1;
      }
      --v8;
    }
    while (v8);
  }
}

void sub_25BF46718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }

  _Unwind_Resume(a1);
}

unint64_t scml::MultiwordGazetteer::Impl::rangesStartForLongestGazetteerMatch(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  id v21 = a2;
  unint64_t v6 = 0;
  uint64_t v7 = &stru_2709753D8;
  if (a4 && *(void *)(a1 + 64))
  {
    unint64_t v6 = 0;
    uint64_t v8 = 16 * a4;
    unint64_t v9 = &stru_2709753D8;
    unint64_t v10 = 2;
    while (1)
    {
      uint64_t v11 = objc_msgSend(v21, "substringWithRange:", *(void *)(*a3 + v8 - 16), *(void *)(*a3 + v8 - 8));
      if ([(__CFString *)v9 length])
      {
        uint64_t v13 = [NSString stringWithFormat:@"%@ %@", v11, v9];
      }
      else if (scml::strEndsWith((scml *)v11, &cfstr_S_1.isa, v12))
      {
        objc_msgSend(v11, "substringToIndex:", objc_msgSend(v11, "length") - 2);
        uint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        uint64_t v13 = v11;
      }
      uint64_t v7 = v13;

      uint64_t v14 = [*(id *)(a1 + 72) labelForString:v7];

      if (!v14) {
        break;
      }
      v15 = *(void **)(a1 + 72);
      CFRange v16 = [NSString stringWithFormat:@"*** %@", v7];
      BOOL v17 = [v15 labelForString:v16];

      if (v17) {
        unint64_t v6 = v10 - 1;
      }

      if (v10 <= a4)
      {
        v8 -= 16;
        unint64_t v9 = v7;
        if (v10++ <= *(void *)(a1 + 64)) {
          continue;
        }
      }
      goto LABEL_17;
    }
  }
LABEL_17:

  return a4 - v6;
}

void sub_25BF4691C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void std::vector<_NSRange>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v22 = *(a2 - 2);
          id v21 = (long long *)(a2 - 2);
          if (v22 > *v11)
          {
            long long v30 = *(_OWORD *)v11;
            *(_OWORD *)uint64_t v11 = *v21;
            *id v21 = v30;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((long long *)v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((long long *)v11, v11 + 2, v11 + 4, (_OWORD *)a2 - 1);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((long long *)v11, v11 + 2, v11 + 4, (__n128 *)v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*,_NSRange*>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    BOOL v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((long long *)v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((long long *)v11 + 1, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((long long *)v11 + 2, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((long long *)v17 - 1, v17, &v11[2 * v16 + 2]);
      long long v29 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)BOOL v17 = v29;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((long long *)&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(v11 - 2) <= *v11)
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_NSRange *,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &>(v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_NSRange *,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &>((long long *)v11, (long long *)a2);
    if ((v19 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((uint64_t)v11, (unint64_t *)v18);
    uint64_t v11 = (unint64_t *)(v18 + 1);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((uint64_t)(v18 + 1), a2))
    {
      a4 = -v13;
      a2 = (unint64_t *)v18;
      if (v20) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*,false>(a1, v18, a3, -v13, a5 & 1);
      uint64_t v11 = (unint64_t *)(v18 + 1);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>(v11, a2);
  }
  else if (v11 != a2)
  {
    uint64_t v23 = v11 + 2;
    while (v23 != a2)
    {
      uint64_t v24 = v23;
      unint64_t v25 = a1[2];
      if (v25 > *a1)
      {
        unint64_t v26 = a1[3];
        unint64_t v27 = v24;
        do
        {
          *(_OWORD *)unint64_t v27 = *((_OWORD *)v27 - 1);
          unint64_t v28 = *(v27 - 4);
          v27 -= 2;
        }
        while (v25 > v28);
        *unint64_t v27 = v25;
        v27[1] = v26;
      }
      uint64_t v23 = v24 + 2;
      a1 = v24;
    }
  }
}

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    CFAllocatorRef v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      id v4 = result;
      do
      {
        char v5 = v2;
        unint64_t v6 = v4[2];
        if (v6 > *v4)
        {
          unint64_t v7 = v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            unint64_t v9 = *(unint64_t *)((char *)result + v8 - 16);
            v8 -= 16;
            if (v6 <= v9)
            {
              unint64_t v10 = (unint64_t *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          unint64_t v10 = result;
LABEL_10:
          *unint64_t v10 = v6;
          v10[1] = v7;
        }
        CFAllocatorRef v2 = v5 + 2;
        v3 += 16;
        id v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>(long long *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 > *(void *)a1)
  {
    if (v4 > v3)
    {
      long long v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 <= *a2) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 > v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 <= *(void *)a1) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_NSRange *,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &>(unint64_t *a1, unint64_t *a2)
{
  long long v2 = *(_OWORD *)a1;
  unint64_t v3 = *a1;
  if (*a1 <= *(a2 - 2))
  {
    long long v6 = a1 + 2;
    do
    {
      unint64_t v4 = v6;
      if (v6 >= a2) {
        break;
      }
      v6 += 2;
    }
    while (v3 <= *v4);
  }
  else
  {
    unint64_t v4 = a1;
    do
    {
      unint64_t v5 = v4[2];
      v4 += 2;
    }
    while (v3 <= v5);
  }
  if (v4 < a2)
  {
    do
    {
      unint64_t v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 > v7);
  }
  while (v4 < a2)
  {
    long long v11 = *(_OWORD *)v4;
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v11;
    do
    {
      unint64_t v8 = v4[2];
      v4 += 2;
    }
    while (v3 <= v8);
    do
    {
      unint64_t v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 > v9);
  }
  if (v4 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v4 - 1);
  }
  *((_OWORD *)v4 - 1) = v2;
  return v4;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_NSRange *,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &>(long long *a1, long long *a2)
{
  uint64_t v2 = 0;
  long long v3 = *a1;
  unint64_t v4 = *(void *)a1;
  do
    unint64_t v5 = *(void *)&a1[++v2];
  while (v5 > v4);
  long long v6 = &a1[v2];
  unint64_t v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      unint64_t v9 = *((void *)a2-- - 2);
    }
    while (v9 <= v4);
  }
  else
  {
    do
      unint64_t v8 = *((void *)a2-- - 2);
    while (v8 <= v4);
  }
  if (v6 < a2)
  {
    unint64_t v10 = &a1[v2];
    long long v11 = a2;
    do
    {
      long long v12 = *v10;
      *unint64_t v10 = *v11;
      *long long v11 = v12;
      do
        unint64_t v13 = *((void *)v10++ + 2);
      while (v13 > v4);
      do
        unint64_t v14 = *((void *)v11-- - 2);
      while (v14 <= v4);
    }
    while (v10 < v11);
    unint64_t v7 = v10 - 1;
  }
  if (v7 != a1) {
    *a1 = *v7;
  }
  *unint64_t v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) > *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 > *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 <= v15)
        {
          unint64_t v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (unint64_t *)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>(long long *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>(a1, a2, a3);
  if (*(void *)a4 > *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 > *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 > *(void *)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>(long long *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u64[0] > a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] > *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 > *a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 > *(void *)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*,_NSRange*>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    long long v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*v14 > *a1)
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v30 = *(_OWORD *)a1;
        uint64_t v18 = a1;
        do
        {
          char v19 = &v18[2 * v17 + 2];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && *v19 > v19[2])
          {
            v19 += 2;
            uint64_t v20 = v21;
          }
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
          uint64_t v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)char v19 = v30;
        }
        else
        {
          *(_OWORD *)char v19 = *(_OWORD *)v6;
          *(_OWORD *)long long v6 = v30;
          uint64_t v22 = (char *)v19 - (char *)a1 + 16;
          if (v22 >= 17)
          {
            unint64_t v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            uint64_t v24 = &a1[2 * v23];
            unint64_t v25 = *v19;
            if (*v24 > *v19)
            {
              unint64_t v26 = v19[1];
              do
              {
                unint64_t v27 = v19;
                char v19 = v24;
                *(_OWORD *)unint64_t v27 = *(_OWORD *)v24;
                if (!v23) {
                  break;
                }
                unint64_t v23 = (v23 - 1) >> 1;
                uint64_t v24 = &a1[2 * v23];
              }
              while (*v24 > v25);
              *char v19 = v25;
              v19[1] = v26;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,scml::MultiwordGazetteer::Impl::replaceMatches(NSString *,NSString *)::{lambda(_NSRange const&,_NSRange const&)#1} &,_NSRange*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unint64_t v10 = *v8;
      }
      else
      {
        unint64_t v10 = *v8;
        unint64_t v11 = v8[2];
        if (*v8 >= v11) {
          unint64_t v10 = v8[2];
        }
        if (*v8 > v11)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v12 = *a4;
      if (v10 <= *a4)
      {
        unint64_t v13 = a4[1];
        do
        {
          uint64_t v14 = a4;
          a4 = v8;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v15 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t *)(result + 16 * v15);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unint64_t v16 = *v8;
            uint64_t v7 = v15;
          }
          else
          {
            unint64_t v16 = *v8;
            unint64_t v17 = v8[2];
            if (*v8 >= v17) {
              unint64_t v16 = v8[2];
            }
            if (*v8 <= v17) {
              uint64_t v7 = v15;
            }
            else {
              v8 += 2;
            }
          }
        }
        while (v16 <= v12);
        *a4 = v12;
        a4[1] = v13;
      }
    }
  }
  return result;
}

void nlp::CFScopedPtr<__CFStringTokenizer *>::reset(const void **a1, const void *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

scml::MultiwordGazetteer::Impl *scml::MultiwordGazetteer::Impl::Impl(scml::MultiwordGazetteer::Impl *this, NSLocale *a2, NSString *a3, uint64_t a4)
{
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  *(void *)this = 850045863;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = a4;
  *((void *)this + 10) = 0;
  uint64_t v9 = [NSURL fileURLWithPath:v8];
  id v18 = 0;
  uint64_t v10 = [objc_alloc(MEMORY[0x263F14000]) initWithContentsOfURL:v9 error:&v18];
  unint64_t v11 = (scml *)v18;
  unint64_t v12 = (void *)*((void *)this + 9);
  *((void *)this + 9) = v10;

  if (!*((void *)this + 9))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strFromNSError(v11, v17);
    MEMORY[0x26117A7E0](exception, v17);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  v19.location = 0;
  v19.length = 0;
  CFStringTokenizerRef v13 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v19, 0, (CFLocaleRef)v7);
  nlp::CFScopedPtr<__CFStringTokenizer *>::reset((const void **)this + 10, v13);
  if (!*((void *)this + 10))
  {
    unint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v16, "failed to init tokenizer");
    __cxa_throw(v16, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }

  return this;
}

void sub_25BF47850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v20);

  nlp::CFScopedPtr<__CFStringTokenizer *>::reset(v17, 0);
  std::mutex::~mutex((std::mutex *)v15);

  _Unwind_Resume(a1);
}

void std::default_delete<scml::MultiwordGazetteer::Impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    nlp::CFScopedPtr<__CFStringTokenizer *>::reset((const void **)(a2 + 80), 0);

    std::mutex::~mutex((std::mutex *)a2);
    JUMPOUT(0x26117ABD0);
  }
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  int64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_25BF47A9C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x26117AB30](v1);
  _Unwind_Resume(a1);
}

uint64_t scml::scml_impl::strCat<char const(&)[30],NSString * {__strong}&,char const(&)[3],std::string>(void *a1, char *__s, uint64_t a3, char *a4, uint64_t a5)
{
  size_t v9 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v9);
  std::ostream::operator<<();

  return scml::scml_impl::strCat<char const(&)[3],std::string>(a1, a4, a5);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x26117AB30](a1 + 112);
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x26117A9A0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x26117A9B0](v13);
  return a1;
}

void sub_25BF47D8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x26117A9B0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x25BF47D6CLL);
}

void sub_25BF47DE0(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      CFStringTokenizerRef v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_25BF47F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t scml::scml_impl::strCat<char const(&)[3],std::string>(void *a1, char *__s, uint64_t a3)
{
  size_t v6 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);
  int v7 = *(char *)(a3 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *(void *)a3;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v8, v9);

  return scml::scml_impl::strCat<>(a1);
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int64_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void sub_25BF48204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF482A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF48414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4851C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF488D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t scml::TextModerationTokenizerConfig::fromConfigFile@<X0>(void *__src@<X0>, size_t __len@<X1>, uint64_t a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_8:
  }
    memmove(p_dst, __src, __len);
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
  uint64_t v9 = std::string::append(&__dst, ".vocab.json", 0xBuLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v31 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if (v31 >= 0) {
    uint64_t v12 = HIBYTE(v31);
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  scml::Config::loadJson(v11, v12, (uint64_t)v33);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)a3 = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 40) = 1065353216;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(void *)(a3 + 96) = 0;
  *(_DWORD *)(a3 + 104) = 1065353216;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  LOWORD(__p[0]) = 0;
  *(unsigned char *)a3 = scml::Config::get<BOOL>((uint64_t)v33, "lexical_tokenization", 0x14uLL, __p);
  LOBYTE(__p[0]) = 0;
  char v32 = 0;
  CFStringTokenizerRef v13 = (const std::string *)scml::Config::get<std::string>((uint64_t)v33, "coder_type", 0xAuLL, (uint64_t)__p);
  std::string::operator=((std::string *)(a3 + 112), v13);
  if (v32 && SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  char v32 = 0;
  uint64_t v14 = (uint64_t *)scml::Config::get<std::vector<scml::Config>>((uint64_t)v33, "keep_cap_words", 0xEuLL, (uint64_t)__p);
  if (v32)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  }
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (*v14 != v16)
  {
    do
    {
      unint64_t v17 = (unsigned __int8 *)scml::Config::as<std::string>(v15);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3 + 72, v17, (uint64_t)v17);
      v15 += 64;
    }
    while (v15 != v16);
  }
  LOBYTE(__p[0]) = 0;
  char v32 = 0;
  char v18 = (uint64_t *)scml::Config::get<std::vector<scml::Config>>((uint64_t)v33, "contractions", 0xCuLL, (uint64_t)__p);
  if (v32)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  }
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  while (v19 != v20)
  {
    uint64_t v21 = (unsigned __int8 *)scml::Config::as<std::string>(v19);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3 + 8, v21, (uint64_t)v21);
    v19 += 64;
  }
  LOBYTE(__p[0]) = 0;
  char v32 = 0;
  uint64_t v22 = (uint64_t *)scml::Config::get<std::vector<scml::Config>>((uint64_t)v33, "word_processings", 0x10uLL, (uint64_t)__p);
  if (v32)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  }
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  while (v23 != v24)
  {
    uint64_t v25 = scml::Config::as<std::string>(v23);
    size_t v26 = *(void *)(v25 + 8);
    if (*(char *)(v25 + 23) >= 0)
    {
      size_t v27 = *(unsigned __int8 *)(v25 + 23);
    }
    else
    {
      uint64_t v25 = *(void *)v25;
      size_t v27 = v26;
    }
    scml::TextModerationTokenizer::lookupWordProcessing(v27, v25, __p);
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::push_back[abi:ne180100]((uint64_t *)(a3 + 48), (uint64_t)__p);
    std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::~__value_func[abi:ne180100](__p);
    v23 += 64;
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v33);
}

void sub_25BF48CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **p_p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a22)
  {
    p_p = &__p;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100](&p_p);
  }
  scml::TextModerationTokenizerConfig::~TextModerationTokenizerConfig(v24);
  scml::Config::~Config((scml::Config *)&a24);
  _Unwind_Resume(a1);
}

BOOL scml::Config::get<BOOL>(uint64_t a1, const void *a2, size_t a3, unsigned char *a4)
{
  v22[0] = (uint64_t)a2;
  v22[1] = a3;
  uint64_t v8 = scml::Config::as<std::unordered_map<std::string,scml::Config>>(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (void *)v8;
  if (a3 >= 0x17)
  {
    uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v11 = a3 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    size_t v20 = a3;
    int64_t v21 = v12 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = a3;
  p_dst = (void **)&__dst;
  if (a3) {
LABEL_8:
  }
    memmove(p_dst, a2, a3);
  *((unsigned char *)p_dst + a3) = 0;
  CFStringTokenizerRef v13 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v9, (unsigned __int8 *)&__dst);
  uint64_t v14 = v13;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst);
    if (v14) {
      return scml::Config::as<BOOL>((uint64_t)(v14 + 40));
    }
  }
  else if (v13)
  {
    return scml::Config::as<BOOL>((uint64_t)(v14 + 40));
  }
  if (!a4[1])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strCat<std::string_view const&,char const(&)[11]>(v22, " not found", &__dst);
    if (v21 >= 0) {
      unint64_t v17 = (void **)&__dst;
    }
    else {
      unint64_t v17 = __dst;
    }
    if (v21 >= 0) {
      uint64_t v18 = HIBYTE(v21);
    }
    else {
      uint64_t v18 = v20;
    }
    scml::Config::error(a1, (uint64_t)v17, v18, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return *a4 != 0;
}

void sub_25BF48F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t scml::Config::get<std::string>(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  v22[0] = (uint64_t)a2;
  v22[1] = a3;
  uint64_t v8 = scml::Config::as<std::unordered_map<std::string,scml::Config>>(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (void *)v8;
  if (a3 >= 0x17)
  {
    uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v11 = a3 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    size_t v20 = a3;
    int64_t v21 = v12 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = a3;
  p_dst = (void **)&__dst;
  if (a3) {
LABEL_8:
  }
    memmove(p_dst, a2, a3);
  *((unsigned char *)p_dst + a3) = 0;
  CFStringTokenizerRef v13 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v9, (unsigned __int8 *)&__dst);
  uint64_t v14 = v13;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst);
    if (v14) {
      return scml::Config::as<std::string>((uint64_t)(v14 + 40));
    }
  }
  else if (v13)
  {
    return scml::Config::as<std::string>((uint64_t)(v14 + 40));
  }
  if (!*(unsigned char *)(a4 + 24))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strCat<std::string_view const&,char const(&)[11]>(v22, " not found", &__dst);
    if (v21 >= 0) {
      unint64_t v17 = (void **)&__dst;
    }
    else {
      unint64_t v17 = __dst;
    }
    if (v21 >= 0) {
      uint64_t v18 = HIBYTE(v21);
    }
    else {
      uint64_t v18 = v20;
    }
    scml::Config::error(a1, (uint64_t)v17, v18, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a4;
}

void sub_25BF490DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t scml::Config::get<std::vector<scml::Config>>(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  v22[0] = (uint64_t)a2;
  v22[1] = a3;
  uint64_t v8 = scml::Config::as<std::unordered_map<std::string,scml::Config>>(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (void *)v8;
  if (a3 >= 0x17)
  {
    uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v11 = a3 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    size_t v20 = a3;
    int64_t v21 = v12 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = a3;
  p_dst = (void **)&__dst;
  if (a3) {
LABEL_8:
  }
    memmove(p_dst, a2, a3);
  *((unsigned char *)p_dst + a3) = 0;
  CFStringTokenizerRef v13 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v9, (unsigned __int8 *)&__dst);
  uint64_t v14 = v13;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst);
    if (v14) {
      return scml::Config::as<std::vector<scml::Config>>((uint64_t)(v14 + 40));
    }
  }
  else if (v13)
  {
    return scml::Config::as<std::vector<scml::Config>>((uint64_t)(v14 + 40));
  }
  if (!*(unsigned char *)(a4 + 24))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strCat<std::string_view const&,char const(&)[11]>(v22, " not found", &__dst);
    if (v21 >= 0) {
      unint64_t v17 = (void **)&__dst;
    }
    else {
      unint64_t v17 = __dst;
    }
    if (v21 >= 0) {
      uint64_t v18 = HIBYTE(v21);
    }
    else {
      uint64_t v18 = v20;
    }
    scml::Config::error(a1, (uint64_t)v17, v18, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a4;
}

void sub_25BF492AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t scml::Config::as<std::string>(uint64_t result)
{
  if (*(_DWORD *)(result + 40) != 3)
  {
    uint64_t v1 = result;
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error(v1, (uint64_t)"unexpected type", 15, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_25BF4936C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    int v16 = &v14[32 * v10];
    uint64_t v18 = &v14[32 * v13];
    std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
    unint64_t v17 = v16 + 32;
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__value_func[abi:ne180100](*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_25BF49470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t scml::TextModerationTokenizer::lookupWordProcessing@<X0>(size_t __n@<X1>, uint64_t result@<X0>, void *a3@<X8>)
{
  v8[0] = result;
  v8[1] = __n;
  switch(__n)
  {
    case 0x10uLL:
      BOOL v4 = *(void *)result == 0x6E6F5F74696C7073 && *(void *)(result + 8) == 0x73646F697265705FLL;
      unint64_t v5 = scml::TextModerationTokenizer::splitOnPeriods;
      if (!v4)
      {
        uint64_t result = memcmp((const void *)result, "add_space_suffix", __n);
        unint64_t v5 = scml::TextModerationTokenizer::addSpaceSuffix;
        if (result) {
          goto LABEL_11;
        }
      }
      goto LABEL_9;
    case 0x14uLL:
      uint64_t result = memcmp((const void *)result, "split_on_apostrophes", __n);
      unint64_t v5 = scml::TextModerationTokenizer::splitOnApostrophes;
      if (result) {
        goto LABEL_11;
      }
      goto LABEL_9;
    case 0x15uLL:
      uint64_t result = memcmp((const void *)result, "preserve_contractions", __n);
      unint64_t v5 = scml::TextModerationTokenizer::preserveContractions;
      if (!result) {
        goto LABEL_9;
      }
      goto LABEL_11;
    case 0x19uLL:
      uint64_t result = memcmp((const void *)result, "add_capitalization_prefix", __n);
      unint64_t v5 = scml::TextModerationTokenizer::addCapitalizationPrefix;
      if (result) {
        goto LABEL_11;
      }
LABEL_9:
      *a3 = &unk_270973408;
      a3[1] = v5;
      a3[2] = 0;
      a3[3] = a3;
      return result;
    default:
LABEL_11:
      exception = __cxa_allocate_exception(0x10uLL);
      scml::strCat<char const(&)[28],std::string_view &>("word_processing not found: ", v8, v7);
      MEMORY[0x26117A7E0](exception, v7);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
}

void sub_25BF4962C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void scml::TextModerationTokenizerConfig::~TextModerationTokenizerConfig(void **this)
{
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 9));
  uint64_t v2 = this + 6;
  std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 1));
}

void scml::Config::~Config(scml::Config *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this);
}

void scml::TextModerationTokenizer::TextModerationTokenizer(scml::TextModerationTokenizer *this)
{
  uint64_t v2 = &v9;
  scml::TextModerationLM::defaultPathPrefix(&v9);
  if ((v11 & 0x80u) == 0)
  {
    int v3 = v11;
  }
  else
  {
    LODWORD(v2) = v9;
    int v3 = v10;
  }
  scml::TextModerationLM::defaultPathPrefix(v6);
  if ((v7 & 0x80u) == 0) {
    BOOL v4 = v6;
  }
  else {
    BOOL v4 = (void **)v6[0];
  }
  if ((v7 & 0x80u) == 0) {
    size_t v5 = v7;
  }
  else {
    size_t v5 = (size_t)v6[1];
  }
  scml::TextModerationTokenizerConfig::fromConfigFile(v4, v5, (uint64_t)v8);
  scml::TextModerationTokenizer::TextModerationTokenizer(this, (int)v2, v3, (scml::TextModerationTokenizerConfig *)v8);
}

{
  uint64_t *v2;
  int v3;
  void **v4;
  size_t v5;
  void *v6[2];
  unsigned __int8 v7;
  unsigned char v8[112];
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  uint64_t v2 = &v9;
  scml::TextModerationLM::defaultPathPrefix(&v9);
  if ((v11 & 0x80u) == 0)
  {
    int v3 = v11;
  }
  else
  {
    LODWORD(v2) = v9;
    int v3 = v10;
  }
  scml::TextModerationLM::defaultPathPrefix(v6);
  if ((v7 & 0x80u) == 0) {
    BOOL v4 = v6;
  }
  else {
    BOOL v4 = (void **)v6[0];
  }
  if ((v7 & 0x80u) == 0) {
    size_t v5 = v7;
  }
  else {
    size_t v5 = (size_t)v6[1];
  }
  scml::TextModerationTokenizerConfig::fromConfigFile(v4, v5, (uint64_t)v8);
  scml::TextModerationTokenizer::TextModerationTokenizer(this, (int)v2, v3, (scml::TextModerationTokenizerConfig *)v8);
}

void sub_25BF49814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  scml::TextModerationTokenizerConfig::~TextModerationTokenizerConfig(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 - 41) < 0) {
    operator delete(*(void **)(v15 - 64));
  }
  _Unwind_Resume(a1);
}

void scml::TextModerationTokenizer::TextModerationTokenizer(scml::TextModerationTokenizerConfig *a1, int a2, int a3, scml::TextModerationTokenizerConfig *a4)
{
  *((void *)scml::TextModerationTokenizerConfig::TextModerationTokenizerConfig(a1, a4) + 17) = 0;
  operator new();
}

void sub_25BF49A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&__p);
  uint64_t v24 = *(void *)(v22 + 136);
  *(void *)(v22 + 136) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  scml::TextModerationTokenizerConfig::~TextModerationTokenizerConfig((void **)v22);
  _Unwind_Resume(a1);
}

void sub_25BF49C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  scml::TextModerationTokenizerConfig::~TextModerationTokenizerConfig(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 - 41) < 0) {
    operator delete(*(void **)(v15 - 64));
  }
  _Unwind_Resume(a1);
}

sentencepiece::util::Status *scml::anonymous namespace'::throwIfError(sentencepiece::util::Status *this, const sentencepiece::util::Status *a2)
{
  if (*(void *)this)
  {
    uint64_t v2 = this;
    exception = __cxa_allocate_exception(0x10uLL);
    sentencepiece::util::Status::ToString(v2, &v4);
    MEMORY[0x26117A7E0](exception, &v4);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return this;
}

void sub_25BF49CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

id scml::TextModerationTokenizer::splitOnPeriods(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v14 = a2;
  {
    scml::TextModerationTokenizer::splitOnPeriods(NSArray<NSString *> *)const::periodRegex = scml::regexMake((scml *)@"\\.", v13);
  }
  uint64_t v2 = objc_msgSend(MEMORY[0x263EFFA68], "mutableCopy", v14);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  obuint64_t j = v15;
  uint64_t v3 = [obj countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v22 != v4) {
          objc_enumerationMutation(obj);
        }
        unint64_t v6 = *(scml **)(*((void *)&v21 + 1) + 8 * i);
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        unsigned __int8 v7 = scml::strSplitByRegex(v6, (NSString *)scml::TextModerationTokenizer::splitOnPeriods(NSArray<NSString *> *)const::periodRegex, (NSRegularExpression *)1);
        uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
        if (v8)
        {
          uint64_t v9 = *(void *)v18;
          do
          {
            for (uint64_t j = 0; j != v8; ++j)
            {
              if (*(void *)v18 != v9) {
                objc_enumerationMutation(v7);
              }
              unsigned __int8 v11 = *(void **)(*((void *)&v17 + 1) + 8 * j);
              if ([v11 length]) {
                [v2 addObject:v11];
              }
            }
            uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
          }
          while (v8);
        }
      }
      uint64_t v3 = [obj countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v3);
  }

  return v2;
}

void sub_25BF49F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id scml::TextModerationTokenizer::splitOnApostrophes(uint64_t a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v20 = a2;
  {
    scml::TextModerationTokenizer::splitOnApostrophes(NSArray<NSString *> *)const::contractionRegex = scml::regexMake((scml *)@"^\\w+('\\w+|’\\w+)", v18);
  }
  {
    scml::TextModerationTokenizer::splitOnApostrophes(NSArray<NSString *> *)const::suffixRegex = scml::regexMake((scml *)@"('\\w+|’\\w+)", v19);
  }
  {
    scml::TextModerationTokenizer::splitOnApostrophes(NSArray<NSString *> *)const::apostrophes = (uint64_t)&unk_270979F78;
  }
  uint64_t v2 = objc_msgSend(MEMORY[0x263EFFA68], "mutableCopy", v20);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  obuint64_t j = v21;
  uint64_t v4 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v28 != v5) {
          objc_enumerationMutation(obj);
        }
        unsigned __int8 v7 = *(scml **)(*((void *)&v27 + 1) + 8 * i);
        if (scml::regexSearch((scml *)scml::TextModerationTokenizer::splitOnApostrophes(NSArray<NSString *> *)const::contractionRegex, (NSRegularExpression *)v7, v3))
        {
          long long v25 = 0u;
          long long v26 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          uint64_t v8 = scml::strSplitByRegex(v7, (NSString *)scml::TextModerationTokenizer::splitOnApostrophes(NSArray<NSString *> *)const::suffixRegex, (NSRegularExpression *)1);
          uint64_t v9 = [v8 countByEnumeratingWithState:&v23 objects:v31 count:16];
          if (v9)
          {
            uint64_t v10 = *(void *)v24;
            do
            {
              for (uint64_t j = 0; j != v9; ++j)
              {
                if (*(void *)v24 != v10) {
                  objc_enumerationMutation(v8);
                }
                uint64_t v12 = *(void **)(*((void *)&v23 + 1) + 8 * j);
                if ([v12 length]) {
                  [v2 addObject:v12];
                }
              }
              uint64_t v9 = [v8 countByEnumeratingWithState:&v23 objects:v31 count:16];
            }
            while (v9);
          }
          goto LABEL_24;
        }
        if ([(scml *)v7 isEqualToString:@"s"])
        {
          if ([v2 count])
          {
            unint64_t v13 = (void *)scml::TextModerationTokenizer::splitOnApostrophes(NSArray<NSString *> *)const::apostrophes;
            id v14 = objc_msgSend(v2, "objectAtIndexedSubscript:", objc_msgSend(v2, "count") - 1);
            LODWORD(v13) = [v13 containsObject:v14];

            if (v13)
            {
              uint64_t v15 = [v2 count] - 1;
              uint64_t v8 = [v2 objectAtIndexedSubscript:v15];
              int v16 = [v8 stringByAppendingString:v7];
              [v2 setObject:v16 atIndexedSubscript:v15];

LABEL_24:
              continue;
            }
          }
        }
        [v2 addObject:v7];
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
    }
    while (v4);
  }

  return v2;
}

void sub_25BF4A30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id scml::TextModerationTokenizer::preserveContractions(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v3 = a2;
  {
    scml::TextModerationTokenizer::preserveContractions(NSArray<NSString *> *)const::contractionRegex = scml::regexMake((scml *)@"^('\\w+|’\\w+)$", v16);
  }
  uint64_t v4 = objc_msgSend(MEMORY[0x263EFFA68], "mutableCopy", v3);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  obuint64_t j = v3;
  uint64_t v6 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(NSRegularExpression **)(*((void *)&v20 + 1) + 8 * i);
        if (scml::regexSearch((scml *)scml::TextModerationTokenizer::preserveContractions(NSArray<NSString *> *)const::contractionRegex, v9, v5)&& [v4 count])
        {
          uint64_t v10 = objc_msgSend(v4, "objectAtIndexedSubscript:", objc_msgSend(v4, "count") - 1);
          unsigned __int8 v11 = [v10 stringByAppendingString:v9];

          uint64_t v12 = [v11 stringByReplacingOccurrencesOfString:@"’" withString:@"'"];
          id v13 = [v12 lowercaseString];
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v13 UTF8String]);
          id v14 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>((void *)(a1 + 8), (unsigned __int8 *)__p);
          if (v19 < 0) {
            operator delete(__p[0]);
          }

          if (v14) {
            objc_msgSend(v4, "setObject:atIndexedSubscript:", v11, objc_msgSend(v4, "count") - 1);
          }
          else {
            [v4 addObject:v9];
          }
        }
        else
        {
          [v4 addObject:v9];
        }
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v6);
  }

  return v4;
}

void sub_25BF4A630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id scml::TextModerationTokenizer::addCapitalizationPrefix(scml::TextModerationTokenizer *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = (void *)[MEMORY[0x263EFFA68] mutableCopy];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if (scml::TextModerationTokenizer::isCapitalized(a1, (NSString *)v9))
        {
          uint64_t v10 = [v9 lowercaseString];
          unsigned __int8 v11 = [@"_U_CAP_" stringByAppendingString:v10];
          [v4 addObject:v11];
        }
        else
        {
          objc_msgSend(v4, "addObject:", v9, (void)v13);
        }
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }

  return v4;
}

void sub_25BF4A83C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id scml::TextModerationTokenizer::addSpaceSuffix(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v2 = a2;
  id v3 = (void *)[MEMORY[0x263EFFA68] mutableCopy];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v4 = v2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(v3, "addObject:", *(void *)(*((void *)&v9 + 1) + 8 * i), (void)v9);
        [v3 addObject:@" "];
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }

  return v3;
}

void sub_25BF4A9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t scml::strCat<char const(&)[28],std::string_view &>@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  scml::scml_impl::strCat<char const(&)[28],std::string_view &>(&v7, a1, a2);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, a3);
  uint64_t v7 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v8[-1] + *(void *)(v7 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v8[0] = MEMORY[0x263F8C318] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v10);
}

void sub_25BF4AB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t scml::TextModerationTokenizer::isCapitalized(scml::TextModerationTokenizer *this, NSString *a2)
{
  id v3 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[(NSString *)v3 UTF8String]);
  id v4 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>((void *)this + 9, (unsigned __int8 *)__p);
  uint64_t v5 = v4;
  if (v23 < 0)
  {
    operator delete(__p[0]);
    if (v5) {
      goto LABEL_5;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  uint64_t v7 = *((unsigned __int8 *)this + 135);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)this + 15);
  }
  if (v7 != 8) {
    goto LABEL_13;
  }
  long long v11 = (char *)*((void *)this + 14);
  uint64_t v10 = (char *)this + 112;
  char v9 = v11;
  long long v12 = v8 >= 0 ? v10 : v9;
  if (*(void *)v12 != 0x3256786966667553) {
    goto LABEL_13;
  }
  if ([(NSString *)v3 length] == 1)
  {
LABEL_5:
    uint64_t v6 = 0;
    goto LABEL_20;
  }
  if (scml::strEndsWith((scml *)v3, &cfstr_S_2.isa, v20))
  {
    if ([(NSString *)v3 length] != 4)
    {
      uint64_t v21 = [(NSString *)v3 substringToIndex:[(NSString *)v3 length] - 2];

      id v3 = (NSString *)v21;
      goto LABEL_13;
    }
    goto LABEL_5;
  }
LABEL_13:
  id v3 = v3;
  if ([(NSString *)v3 length] < 2)
  {
    long long v17 = [(NSString *)v3 uppercaseString];
  }
  else
  {
    long long v13 = [(NSString *)v3 substringToIndex:1];
    uint64_t v14 = [v13 uppercaseString];

    long long v15 = [(NSString *)v3 substringFromIndex:1];
    long long v16 = [v15 lowercaseString];

    long long v17 = [v14 stringByAppendingString:v16];
  }
  if ([v17 isEqualToString:v3])
  {
    uint64_t v18 = [(NSString *)v3 lowercaseString];
    uint64_t v6 = [v18 isEqualToString:v3] ^ 1;
  }
  else
  {
    uint64_t v6 = 0;
  }

LABEL_20:
  return v6;
}

void sub_25BF4AD3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void scml::TextModerationTokenizer::preprocess(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)uint64_t v25 = a4;
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v4 = scml::strToNSString(a2, a3);
  int v5 = *a1;
  uint64_t v6 = v4;
  long long v27 = v6;
  if (v5)
  {
    int v8 = objc_msgSend(MEMORY[0x263EFFA68], "mutableCopy", *(void *)v25);
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v10 = scml::strSplit(v27, v9);
    obuint64_t j = v10;
    uint64_t v11 = [v10 countByEnumeratingWithState:&v34 objects:v39 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v35;
      do
      {
        uint64_t v13 = 0;
        do
        {
          if (*(void *)v35 != v12) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = [*(id *)(*((void *)&v34 + 1) + 8 * v13) stringByReplacingOccurrencesOfString:@"." withString:@" . "];
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v16 = scml::strTokenizeWords(v14, v15);
          uint64_t v17 = [v16 countByEnumeratingWithState:&v30 objects:v38 count:16];
          if (v17)
          {
            uint64_t v18 = *(void *)v31;
            do
            {
              uint64_t v19 = 0;
              do
              {
                if (*(void *)v31 != v18) {
                  objc_enumerationMutation(v16);
                }
                [v8 addObject:*(void *)(*((void *)&v30 + 1) + 8 * v19++)];
              }
              while (v17 != v19);
              uint64_t v17 = [v16 countByEnumeratingWithState:&v30 objects:v38 count:16];
            }
            while (v17);
          }

          ++v13;
        }
        while (v13 != v11);
        uint64_t v10 = obj;
        uint64_t v11 = [obj countByEnumeratingWithState:&v34 objects:v39 count:16];
      }
      while (v11);
    }

    long long v20 = v27;
  }
  else
  {
    long long v20 = v6;
    int v8 = scml::strTokenizeWords(v6, v7);
  }

  uint64_t v22 = *((void *)a1 + 6);
  uint64_t v21 = *((void *)a1 + 7);
  if (v22 == v21)
  {
    char v23 = v8;
  }
  else
  {
    do
    {
      char v23 = std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::operator()(v22, (uint64_t)a1, v8);

      v22 += 32;
      int v8 = v23;
    }
    while (v22 != v21);
  }
  objc_msgSend(v23, "componentsJoinedByString:", &stru_2709753D8, *(void *)v25);
  id v24 = objc_claimAutoreleasedReturnValue();
  std::string::basic_string[abi:ne180100]<0>(v26, (char *)[v24 UTF8String]);
}

void sub_25BF4B044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v8 = a2;
  id v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  int v5 = (*(void (**)(uint64_t, uint64_t *, id *))(*(void *)v4 + 48))(v4, &v8, &v7);

  return v5;
}

void sub_25BF4B168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void scml::TextModerationTokenizer::textToIDs(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v5 = *(void *)(a1 + 136);
  scml::TextModerationTokenizer::preprocess((unsigned __int8 *)a1, a2, a3, (uint64_t)__p);
  if ((v10 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    unint64_t v7 = v10;
  }
  else {
    unint64_t v7 = (unint64_t)__p[1];
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, unint64_t, void *))(*(void *)v5 + 144))(&v11, v5, v6, v7, a4);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v11);
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_25BF4B22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

void std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = (scml::Config *)**a1;
  if (v2)
  {
    uint64_t v4 = (scml::Config *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v4 = (scml::Config *)((char *)v4 - 64);
        scml::Config::~Config(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    id v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

{
  uint64_t v3;

  id v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    uint64_t result = std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__value_func[abi:ne180100](result - 32, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__split_buffer<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  id v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    id v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      id v2 = v3;
    }
    while (v3);
  }
}

void std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::~__value_func[abi:ne180100](v4 - 4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_2709741E8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSU_1EJDnxdSD_SI_SS_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSU_1EJDnxdSD_SI_SS_EEEEEEDcSW_DpT0_(uint64_t a1, void **a2)
{
  uint64_t v2 = a2;
  std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSU_1EJDnxdSD_SI_SS_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::~__hash_table(a2);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,scml::Config>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,scml::Config>,0>(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v2);
  if (*(char *)(a1 + 23) < 0)
  {
    char v4 = *(void **)a1;
    operator delete(v4);
  }
}

scml::TextModerationTokenizerConfig *scml::TextModerationTokenizerConfig::TextModerationTokenizerConfig(scml::TextModerationTokenizerConfig *this, const scml::TextModerationTokenizerConfig *a2)
{
  *(unsigned char *)this = *(unsigned char *)a2;
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 8, (uint64_t)a2 + 8);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__init_with_size[abi:ne180100]<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>((void *)this + 6, *((void *)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 5);
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 72, (uint64_t)a2 + 72);
  char v4 = (std::string *)((char *)this + 112);
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 7);
    *((void *)this + 16) = *((void *)a2 + 16);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return this;
}

void sub_25BF4B840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v3);
  std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_25BF4B8D8(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *uint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    unsigned __int8 v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_25BF4BD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  int v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_25BF4BF2C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      uint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__init_with_size[abi:ne180100]<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_25BF4C47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__value_func[abi:ne180100](a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_25BF4C540(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::~__value_func[abi:ne180100]((void *)(v4 + v2));
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t scml::Config::as<std::unordered_map<std::string,scml::Config>>(uint64_t result)
{
  if (*(_DWORD *)(result + 40) != 5)
  {
    uint64_t v1 = result;
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error(v1, (uint64_t)"unexpected type", 15, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_25BF4C6F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t scml::strCat<std::string_view const&,char const(&)[11]>@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, *a1, a1[1]);
  scml::scml_impl::strCat<char const(&)[11]>(&v7, a2);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, a3);
  uint64_t v7 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v8[-1] + *(void *)(v7 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v8[0] = MEMORY[0x263F8C318] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v10);
}

void sub_25BF4C84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL scml::Config::as<BOOL>(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error(a1, (uint64_t)"not an integer", 14, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return *(void *)a1 != 0;
}

void sub_25BF4C8DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t scml::scml_impl::strCat<char const(&)[11]>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);

  return scml::scml_impl::strCat<>(a1);
}

uint64_t scml::Config::as<std::vector<scml::Config>>(uint64_t result)
{
  if (*(_DWORD *)(result + 40) != 4)
  {
    uint64_t v1 = result;
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error(v1, (uint64_t)"unexpected type", 15, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_25BF4CAB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const,std::allocator<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const>,NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::~__func()
{
}

__n128 std::__function::__func<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const,std::allocator<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const>,NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_270973408;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const,std::allocator<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const>,NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270973408;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const,std::allocator<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const>,NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(uint64_t (**)(void *, void))(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int8x8_t v5 = (void *)(*a2 + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *, void))(*v5 + v3);
  }
  return v3(v5, *a3);
}

uint64_t std::__function::__func<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const,std::allocator<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const>,NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const,std::allocator<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const>,NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t scml::scml_impl::strCat<char const(&)[28],std::string_view &>(void *a1, char *__s, uint64_t *a3)
{
  size_t v6 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, *a3, a3[1]);

  return scml::scml_impl::strCat<>(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x26117ABD0);
}

void sub_25BF4CE8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4D074(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4D1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4D278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4D31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4D6FC(_Unwind_Exception *a1)
{
  if (v5) {

  }
  _Block_object_dispose((const void *)(v7 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_25BF4D94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4DB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_25BF4DBE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4DD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_25BF4DE34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4DFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_25BF4E0B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4E224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_25BF4E308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4E4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_25BF4E660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4E854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_25BF4E90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4E9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4EB34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4EBF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF4F780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  if (v24) {

  }
  _Unwind_Resume(a1);
}

void sub_25BF4F970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SCMLImageAnalyzer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_25BF4FE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,std::runtime_error __p,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p.__vftable);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0) {
      goto LABEL_14;
    }
  }
  else if (!v41)
  {
LABEL_14:
    if (a2 == 1)
    {
      exception_ptr = __cxa_get_exception_ptr(a1);
      MEMORY[0x26117A7F0](&__p, exception_ptr);
      __cxa_begin_catch(a1);
      if (*(void *)(v39 + 56))
      {
        espresso_plan_destroy();
        *(void *)(v39 + 56) = 0;
      }
      if (*(void *)(v39 + 64))
      {
        espresso_context_destroy();
        *(void *)(v39 + 64) = 0;
      }
      v45 = +[SCMLLog imageAnalyzer];
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
        -[SCMLImageAnalyzer loadNetworkForURL:espressoEngine:storageType:deviceId:](&__p, v38, v45);
      }

      std::runtime_error::~runtime_error(&__p);
      __cxa_end_catch();
      JUMPOUT(0x25BF4FB7CLL);
    }

    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v40);
  goto LABEL_14;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v6 = strlen(__s);
  uint64_t v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v6 = strlen(a1);
  uint64_t v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void sub_25BF5032C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25BF503BC()
{
}

void sub_25BF503C4()
{
}

void sub_25BF503CC()
{
  JUMPOUT(0x25BF503ACLL);
}

void sub_25BF503D8()
{
}

void sub_25BF503E0()
{
}

uint64_t scml::strCat<char const(&)[38],std::string>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  scml::scml_impl::strCat<char const(&)[3],std::string>(&v7, a1, a2);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, a3);
  uint64_t v7 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v8[-1] + *(void *)(v7 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v8[0] = MEMORY[0x263F8C318] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v10);
}

void sub_25BF50530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_25BF50634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_25BF5079C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_25BF50FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_25BF512D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF5145C(_Unwind_Exception *a1)
{
  std::string::size_type v6 = v4;

  _Unwind_Resume(a1);
}

void sub_25BF515C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF51668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF51928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  _Block_object_dispose((const void *)(v34 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_25BF519A8()
{
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_25BF51C28(_Unwind_Exception *a1)
{
  std::string::size_type v6 = v4;

  _Unwind_Resume(a1);
}

void sub_25BF51DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF52108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31,char a32)
{
  _Block_object_dispose(&a26, 8);

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 112), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__79(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_25BF52468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::runtime_error a12)
{
  if (a2 == 1)
  {
    exception_ptr = __cxa_get_exception_ptr(exception_object);
    MEMORY[0x26117A7F0](&a12, exception_ptr);
    __cxa_begin_catch(exception_object);
    unint64_t v16 = +[SCMLLog imageAnalyzer];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      -[SCMLImageAnalyzer _computeOutputForPixelBuffer:error:](&a12);
    }

    if (v13)
    {
      void *v13 = [MEMORY[0x263F087E8] errorWithDomain:SCMLErrorDomain[0] code:6 userInfo:0];
    }
    v12[2] = 0u;
    void v12[3] = 0u;
    *uint64_t v12 = 0u;
    v12[1] = 0u;
    std::runtime_error::~runtime_error(&a12);
    __cxa_end_catch();
    JUMPOUT(0x25BF52374);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::tensorViewCHW@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(result + 112) != 1) {
  if (*(void *)(result + 104) != 1)
  }
  uint64_t v2 = *(void *)(result + 80);
  uint64_t v3 = *(unsigned int *)(result + 96) | (*(void *)(result + 88) << 32);
  *(void *)a2 = *(void *)result;
  *(void *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = v2;
  return result;
}

void sub_25BF5263C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(void *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25BF52718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF52AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25BF52CCC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  uint64_t v15 = v14;

  if (a2 == 1)
  {
    exception_ptr = __cxa_get_exception_ptr(a1);
    MEMORY[0x26117A7F0](&a9, exception_ptr);
    __cxa_begin_catch(a1);
    uint64_t v19 = +[SCMLLog imageAnalyzer];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      +[SCMLImageAnalyzer getOperatingPointDataForClassName:modelURL:error:](&a9);
    }

    if (v11)
    {
      *uint64_t v11 = [MEMORY[0x263F087E8] errorWithDomain:SCMLErrorDomain[0] code:8 userInfo:0];
    }
    std::runtime_error::~runtime_error(&a9);
    __cxa_end_catch();
    JUMPOUT(0x25BF52C94);
  }

  _Unwind_Resume(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_25BF531E4(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_25BF53300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF53398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF534A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)SCMLVideoFrame;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_25BF53954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);

    if ((v34 & 1) == 0) {
      goto LABEL_9;
    }
  }
  else
  {

    if (!v34)
    {
LABEL_9:
      if (a2 == 2)
      {
        uint64_t v37 = __cxa_begin_catch(a1);
        if (v30)
        {
          scml::error(0x12u, (uint64_t)v37);
          *uint64_t v30 = (id)objc_claimAutoreleasedReturnValue();
        }
        int v38 = [*(id *)(v33 + 3080) textAnalyzer];
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
          -[SCMLPeopleDetector initWithConfiguration:error:]((uint64_t)v37, v38);
        }

        __cxa_end_catch();
        JUMPOUT(0x25BF5384CLL);
      }
      scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)&a28);

      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v31);
  goto LABEL_9;
}

void sub_25BF53D78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void scml::SignpostInterval::createAsync(scml::SignpostInterval *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_25BF53E78(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_25BF540E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF54224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_25BF54A9C()
{
  JUMPOUT(0x25BF54AE0);
}

void sub_25BF54AA4()
{
  __cxa_end_catch();
  JUMPOUT(0x25BF54AB8);
}

void sub_25BF54ACC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

scml::SignpostInterval *scml::SignpostInterval::SignpostInterval(scml::SignpostInterval *this)
{
  uint64_t v2 = +[SCMLLog signpost];
  *(void *)this = v2;
  *((void *)this + 1) = os_signpost_id_make_with_pointer(v2, this);
  *((void *)this + 5) = 0;
  return this;
}

void *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void scml::SignpostInterval::~SignpostInterval(scml::SignpostInterval *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 2);
}

void std::__function::__func<scml::SignpostInterval::createAsync(void)::{lambda(void)#1},std::allocator<scml::SignpostInterval::createAsync(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<scml::SignpostInterval::createAsync(void)::{lambda(void)#1},std::allocator<scml::SignpostInterval::createAsync(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_270973B98;
  return result;
}

void std::__function::__func<scml::SignpostInterval::createAsync(void)::{lambda(void)#1},std::allocator<scml::SignpostInterval::createAsync(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270973B98;
}

void std::__function::__func<scml::SignpostInterval::createAsync(void)::{lambda(void)#1},std::allocator<scml::SignpostInterval::createAsync(void)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<scml::SignpostInterval::createAsync(void)::{lambda(void)#1} &>();
}

uint64_t std::__function::__func<scml::SignpostInterval::createAsync(void)::{lambda(void)#1},std::allocator<scml::SignpostInterval::createAsync(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::SignpostInterval::createAsync(void)::{lambda(void)#1},std::allocator<scml::SignpostInterval::createAsync(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<scml::SignpostInterval::createAsync(void)::{lambda(void)#1} &>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Async SignpostInterval deleted without using SCML_SIGNPOST_ASYNC_END");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_25BF54E1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id scml::anonymous namespace'::findAttributeSpans(void *a1, void *a2, NSString *a3, NSUInteger a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1;
  id v17 = a2;
  id v18 = (id)[MEMORY[0x263EFFA68] mutableCopy];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  obuint64_t j = v17;
  uint64_t v9 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v21 != v10) {
          objc_enumerationMutation(obj);
        }
        v8.location = a4;
        if (AttributeSpan != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v14 = v12;
          uint64_t v15 = objc_opt_new();
          objc_msgSend(v15, "setRange:", AttributeSpan, v14);
          [v18 addObject:v15];
        }
      }
      uint64_t v9 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v9);
  }

  return v18;
}

void sub_25BF54FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN4scml12_GLOBAL__N_117toPeopleDetectionEPNS_18MultiwordGazetteerEP8NSStringP34SCMLVisualGenerationHandlingResult_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = v4;
  id v7 = v5;
  uint64_t v8 = [v6 range];
  if (v8 == [v7 range])
  {
    [v6 range];
    uint64_t v10 = v9;
    [v7 range];
    if (v10 == v11)
    {
      uint64_t v12 = 0;
      goto LABEL_9;
    }
    [v6 range];
    unint64_t v16 = v15;
    [v7 range];
    BOOL v14 = v16 >= v17;
  }
  else
  {
    unint64_t v13 = [v6 range];
    BOOL v14 = v13 >= [v7 range];
  }
  if (v14) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = -1;
  }
LABEL_9:

  return v12;
}

void sub_25BF550F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void scml::anonymous namespace'::findCandidateWordRanges(scml::_anonymous_namespace_ *this@<X0>, NSString *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v26 = this;
  uint64_t v25 = a2;
  char v24 = [MEMORY[0x263F08AE8] escapedPatternForString:v25];
  id v6 = [NSString stringWithFormat:@"\\b%@\\b", v24];
  id v7 = [MEMORY[0x263F08AE8] regularExpressionWithPattern:v6 options:65 error:0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = objc_msgSend(v7, "rangeOfFirstMatchInString:options:range:", v26, 0, v8, -[scml::_anonymous_namespace_ length](v26, "length") - v8);
      uint64_t v11 = v9;
      if (v9 == 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      uint64_t v12 = v10;
      BOOL v14 = a3[1];
      unint64_t v13 = (unint64_t)a3[2];
      if ((unint64_t)v14 >= v13)
      {
        unint64_t v16 = *a3;
        uint64_t v17 = ((char *)v14 - (char *)*a3) >> 4;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60) {
          std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v13 - (void)v16;
        if (v19 >> 3 > v18) {
          unint64_t v18 = v19 >> 3;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          long long v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a3 + 2), v20);
          unint64_t v16 = *a3;
          BOOL v14 = a3[1];
        }
        else
        {
          long long v21 = 0;
        }
        long long v22 = (uint64_t *)&v21[16 * v17];
        uint64_t *v22 = v11;
        v22[1] = v12;
        long long v23 = v22;
        if (v14 != v16)
        {
          do
          {
            *((_OWORD *)v23 - 1) = *((_OWORD *)v14 - 1);
            v23 -= 2;
            v14 -= 2;
          }
          while (v14 != v16);
          unint64_t v16 = *a3;
        }
        unint64_t v15 = v22 + 2;
        *a3 = v23;
        a3[1] = v22 + 2;
        a3[2] = (uint64_t *)&v21[16 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        uint64_t *v14 = v9;
        v14[1] = v10;
        unint64_t v15 = v14 + 2;
      }
      a3[1] = v15;
      unint64_t v8 = v11 + v12;
    }
    while (v8 < [(scml::_anonymous_namespace_ *)v26 length]);
  }
}

void sub_25BF55330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t scml::anonymous namespace'::findAttributeSpan(scml::_anonymous_namespace_ *this, NSString *a2, NSString *a3, _NSRange a4)
{
  NSUInteger location = a4.location;
  id v7 = this;
  unint64_t v8 = a2;
  if (v20 == v21)
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v20) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v9 = (char *)a3 + location;
  unint64_t v10 = -1;
  uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v12 = v20;
  do
  {
    unint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    v12 += 2;
    unint64_t v15 = v14 + v13;
    unint64_t v16 = (char *)a3 - v13;
    if ((unint64_t)a3 < v13) {
      unint64_t v16 = 0;
    }
    BOOL v17 = v15 >= (unint64_t)v9;
    unint64_t v18 = (char *)(v15 - (void)v9);
    if (!v17) {
      unint64_t v18 = 0;
    }
    if (v16 > v18) {
      unint64_t v18 = v16;
    }
    if ((unint64_t)v18 < v10)
    {
      unint64_t v10 = (unint64_t)v18;
      uint64_t v11 = v13;
    }
  }
  while (v12 != v21);
  if (v20)
  {
LABEL_13:
    long long v21 = v20;
    operator delete(v20);
  }
LABEL_14:

  return v11;
}

void sub_25BF55470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

scml::MultiwordGazetteer *std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100](scml::MultiwordGazetteer **a1, scml::MultiwordGazetteer *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    scml::MultiwordGazetteer::~MultiwordGazetteer(result);
    JUMPOUT(0x26117ABD0);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1NS_9allocatorIS2_EEFvvEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1NS_9allocatorIS2_EEFvvEE7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_270973CF8;
  return result;
}

void _ZNKSt3__110__function6__funcIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_270973CF8;
}

uint64_t _ZNKSt3__110__function6__funcIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1NS_9allocatorIS2_EEFvvEE11target_typeEv()
{
  return &_ZTIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1;
}

void *scml::scml_impl::escapeAndWriteStream(void *a1, char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  {
    operator new();
  }
  for (; a3; --a3)
  {
    char v14 = *a2;
    id v6 = std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::find<char>((void *)scml::scml_impl::escapeAndWriteStream(std::ostream &,std::string_view)::replacements, &v14);
    if (v6)
    {
      uint64_t v9 = v6[3];
      id v7 = v6 + 3;
      uint64_t v8 = (uint64_t)v9;
      int v10 = *((char *)v7 + 23);
      if (v10 >= 0) {
        uint64_t v11 = (uint64_t)v7;
      }
      else {
        uint64_t v11 = v8;
      }
      if (v10 >= 0) {
        uint64_t v12 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        uint64_t v12 = (uint64_t)v7[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v11, v12);
    }
    else
    {
      v15[0] = v14;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v15, 1);
    }
    ++a2;
  }
  return a1;
}

void sub_25BF55968(_Unwind_Exception *a1)
{
  uint64_t v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 127) < 0) {
      operator delete(*(void **)(v2 + v4 + 104));
    }
    v4 -= 32;
    if (v4 == -128)
    {
      MEMORY[0x26117ABD0](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t scml::strEscape@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v9[0] = a1;
  v9[1] = a2;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  scml::scml_impl::writeStream<std::string_view>(&v5, (uint64_t)v9, 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a3);
  uint64_t v5 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v6[-1] + *(void *)(v5 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v8);
}

void sub_25BF55B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *scml::scml_impl::writeStream<std::string_view>(void *a1, uint64_t a2, int a3)
{
  uint64_t v4 = a1;
  if (a3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"", 1);
    a1 = scml::scml_impl::escapeAndWriteStream(v4, *(char **)a2, *(void *)(a2 + 8));
    uint64_t v5 = "\"";
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v5 = *(const char **)a2;
    uint64_t v6 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, v6);
  return v4;
}

id scml::strEscape(scml *this, NSString *a2)
{
  scml::strFromNSString(this, v12);
  if ((v13 & 0x80u) == 0) {
    uint64_t v2 = v12;
  }
  else {
    uint64_t v2 = (void **)v12[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v3 = v13;
  }
  else {
    uint64_t v3 = (uint64_t)v12[1];
  }
  scml::strEscape((uint64_t)v2, v3, __p);
  unint64_t v4 = v15;
  uint64_t v5 = (void **)__p[0];
  uint64_t v6 = __p[1];
  id v7 = [NSString alloc];
  if ((v4 & 0x80u) == 0) {
    uint64_t v8 = (void *)v4;
  }
  else {
    uint64_t v8 = v6;
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = v5;
  }
  int v10 = (void *)[v7 initWithBytes:v9 length:v8 encoding:4];
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v13 < 0) {
    operator delete(v12[0]);
  }

  return v10;
}

void sub_25BF55C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id scml::strToNSString(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)[[NSString alloc] initWithBytes:a1 length:a2 encoding:4];

  return v2;
}

void scml::strFromNSString(scml *this@<X0>, void *a2@<X8>)
{
  unint64_t v4 = this;
  uint64_t v6 = v4;
  if (v4)
  {
    uint64_t v5 = v4;
    std::string::basic_string[abi:ne180100](a2, (void *)[(scml *)v5 UTF8String], [(scml *)v5 lengthOfBytesUsingEncoding:4]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "(nil)");
  }
}

void sub_25BF55D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t scml::strMul@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  for (; a3; --a3)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, a1, a2);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, a4);
  uint64_t v9 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v10[-1] + *(void *)(v9 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[0] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v12);
}

void sub_25BF55F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void scml::strFromNSError(scml *this@<X0>, void *a2@<X8>)
{
  unint64_t v4 = [(scml *)this localizedDescription];
  scml::strFromNSString(v4, a2);
}

void sub_25BF55F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL scml::strEndsWith(scml *this, NSString *a2, NSString *a3)
{
  unint64_t v4 = this;
  uint64_t v5 = a2;
  if ([(NSString *)v5 length])
  {
    uint64_t v7 = [(scml *)v4 rangeOfString:v5];
    BOOL v8 = v7 != 0x7FFFFFFFFFFFFFFFLL && v7 + v6 == [(scml *)v4 length];
  }
  else
  {
    BOOL v8 = 1;
  }

  return v8;
}

void sub_25BF56010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id scml::regexMake(scml *this, NSString *a2)
{
  uint64_t v2 = this;
  id v6 = 0;
  uint64_t v3 = [MEMORY[0x263F08AE8] regularExpressionWithPattern:v2 options:0 error:&v6];
  if (v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bad regex");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }

  return v3;
}

void sub_25BF560E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

BOOL scml::regexSearch(scml *this, NSRegularExpression *a2, NSString *a3)
{
  unint64_t v4 = this;
  uint64_t v5 = a2;
  BOOL v6 = -[scml rangeOfFirstMatchInString:options:range:](v4, "rangeOfFirstMatchInString:options:range:", v5, 0, 0, [(NSRegularExpression *)v5 length]) != 0x7FFFFFFFFFFFFFFFLL;

  return v6;
}

void sub_25BF56184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id scml::strSplitByRegex(scml *this, NSString *a2, NSRegularExpression *a3)
{
  char v3 = (char)a3;
  uint64_t v5 = this;
  BOOL v6 = a2;
  uint64_t v27 = 0;
  uint64_t v28 = &v27;
  uint64_t v29 = 0x3032000000;
  uint64_t v30 = __Block_byref_object_copy__1;
  uint64_t v31 = __Block_byref_object_dispose__1;
  id v32 = (id)[MEMORY[0x263EFFA68] mutableCopy];
  uint64_t v23 = 0;
  char v24 = &v23;
  uint64_t v25 = 0x2020000000;
  uint64_t v26 = 0;
  uint64_t v7 = [(scml *)v5 length];
  uint64_t v15 = MEMORY[0x263EF8330];
  uint64_t v16 = 3221225472;
  BOOL v17 = ___ZN4scml15strSplitByRegexEP8NSStringP19NSRegularExpressionb_block_invoke;
  unint64_t v18 = &unk_2654A90F8;
  unint64_t v20 = &v27;
  BOOL v8 = v5;
  uint64_t v19 = v8;
  long long v21 = &v23;
  char v22 = v3;
  -[NSString enumerateMatchesInString:options:range:usingBlock:](v6, "enumerateMatchesInString:options:range:usingBlock:", v8, 0, 0, v7, &v15);
  uint64_t v9 = (void *)v28[5];
  uint64_t v10 = v24[3];
  uint64_t v11 = [(scml *)v8 length];
  uint64_t v12 = -[scml substringWithRange:](v8, "substringWithRange:", v10, v11 - v24[3]);
  [v9 addObject:v12];

  id v13 = (id)v28[5];
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);

  return v13;
}

void sub_25BF5636C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void ___ZN4scml15strSplitByRegexEP8NSStringP19NSRegularExpressionb_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v13 = v3;
  uint64_t v5 = objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), objc_msgSend(v3, "range") - *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
  [v4 addObject:v5];

  if (*(unsigned char *)(a1 + 56))
  {
    BOOL v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    uint64_t v8 = [v13 range];
    uint64_t v10 = objc_msgSend(v6, "substringWithRange:", v8, v9);
    [v7 addObject:v10];
  }
  uint64_t v11 = [v13 range];
  [v13 range];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v12 + v11;
}

void sub_25BF564E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id scml::strSplit(scml *this, NSString *a2)
{
  uint64_t v2 = this;
  {
    scml::strSplit(NSString *)::regex = [MEMORY[0x263F08AE8] regularExpressionWithPattern:@"\\s+" options:0 error:0];
  }
  id v3 = scml::strSplitByRegex(v2, (NSString *)scml::strSplit(NSString *)::regex, 0);

  return v3;
}

void sub_25BF565C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id scml::strTokenizeWords(scml *this, NSString *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v30 = this;
  {
    scml::strTokenizeWords(NSString *)::regex = [MEMORY[0x263F08AE8] regularExpressionWithPattern:@"\\b" options:64 error:0];
  }
  uint64_t v2 = [MEMORY[0x263F08708] whitespaceAndNewlineCharacterSet];
  scml::strSplitByRegex(v30, (NSString *)scml::strTokenizeWords(NSString *)::regex, 0);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  {
    [MEMORY[0x263F08AE8] regularExpressionWithPattern:@"\\p{Letter}$" options:64 error:0];
  }
  {
    [MEMORY[0x263F08AE8] regularExpressionWithPattern:@"^\\p{Letter}" options:64 error:0];
  }
  unsigned __int8 v35 = 0;
  std::vector<BOOL>::vector(&__p, [v3 count], &v35);
  for (unint64_t i = 0; i < [v3 count]; ++i)
  {
    uint64_t v5 = [v3 objectAtIndexedSubscript:i];
    int v6 = [v5 isEqualToString:@":"];

    if (v6)
    {
      if (i)
      {
        uint64_t v8 = [v3 objectAtIndexedSubscript:i - 1];
        BOOL v10 = scml::regexSearch(v7, v8, v9);
      }
      else
      {
        BOOL v10 = 1;
      }
      if (i == [v3 count] - 1)
      {
        BOOL v11 = 1;
      }
      else
      {
        id v13 = [v3 objectAtIndexedSubscript:i + 1];
        BOOL v11 = scml::regexSearch(v12, v13, v14);
      }
      if (v10 && v11)
      {
        uint64_t v15 = __p;
        if (i) {
          *(void *)((char *)__p + (((i - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (i - 1);
        }
        v15[i >> 6] |= 1 << i;
        if (i >= [v3 count] - 1)
        {
          uint64_t v16 = __p;
        }
        else
        {
          uint64_t v16 = __p;
          *(void *)((char *)__p + (((i + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (i + 1);
        }
        v16[i >> 6] |= 1 << i;
      }
      else
      {
        *(void *)((char *)__p + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i);
      }
    }
  }
  BOOL v17 = (void *)[MEMORY[0x263EFFA68] mutableCopy];
  for (unint64_t j = 0; j < [v3 count]; ++j)
  {
    uint64_t v19 = [v3 objectAtIndexedSubscript:j];
    [v17 addObject:v19];

    if ((*(void *)((char *)__p + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j))
    {
      while (j < [v3 count] - 1
           && ((*(void *)((char *)__p + (((j + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (j + 1)) & 1) != 0)
      {
        unint64_t v20 = objc_msgSend(v17, "objectAtIndexedSubscript:", objc_msgSend(v17, "count") - 1);
        long long v21 = [v3 objectAtIndexedSubscript:j + 1];
        char v22 = [v20 stringByAppendingString:v21];
        objc_msgSend(v17, "setObject:atIndexedSubscript:", v22, objc_msgSend(v17, "count") - 1);

        ++j;
      }
    }
  }
  if (__p) {
    operator delete(__p);
  }

  uint64_t v23 = (void *)[MEMORY[0x263EFFA68] mutableCopy];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v24 = v17;
  uint64_t v25 = [v24 countByEnumeratingWithState:&v31 objects:v37 count:16];
  if (v25)
  {
    uint64_t v26 = *(void *)v32;
    do
    {
      for (uint64_t k = 0; k != v25; ++k)
      {
        if (*(void *)v32 != v26) {
          objc_enumerationMutation(v24);
        }
        uint64_t v28 = [*(id *)(*((void *)&v31 + 1) + 8 * k) stringByTrimmingCharactersInSet:v2];
        if ([v28 length]) {
          [v23 addObject:v28];
        }
      }
      uint64_t v25 = [v24 countByEnumeratingWithState:&v31 objects:v37 count:16];
    }
    while (v25);
  }

  return v23;
}

void sub_25BF56B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p)
{
  _Unwind_Resume(a1);
}

void scml::strGetWordRanges(scml *this@<X0>, void *a2@<X8>)
{
  unint64_t v4 = this;
  {
    scml::strGetWordRanges(NSString *)::regex = [MEMORY[0x263F08AE8] regularExpressionWithPattern:@"\\b" options:64 error:0];
  }
  {
    scml::strGetWordRanges(NSString *)::wordRegex = [MEMORY[0x263F08AE8] regularExpressionWithPattern:@"^(\\w|')+$" options:0 error:0];
  }
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x4812000000;
  BOOL v17 = __Block_byref_object_copy__9;
  unint64_t v18 = __Block_byref_object_dispose__10;
  uint64_t v19 = &unk_25C010B3D;
  long long v21 = 0;
  uint64_t v22 = 0;
  std::string __p = 0;
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2020000000;
  v13[3] = 0;
  uint64_t v5 = (void *)scml::strGetWordRanges(NSString *)::regex;
  uint64_t v6 = [(scml *)v4 length];
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = ___ZN4scml16strGetWordRangesEP8NSString_block_invoke;
  v9[3] = &unk_2654A9120;
  BOOL v11 = v13;
  uint64_t v7 = v4;
  BOOL v10 = v7;
  uint64_t v12 = &v14;
  objc_msgSend(v5, "enumerateMatchesInString:options:range:usingBlock:", v7, 0, 0, v6, v9);
  uint64_t v8 = v15;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<_NSRange>::__init_with_size[abi:ne180100]<_NSRange*,_NSRange*>(a2, (const void *)v8[6], v8[7], (v8[7] - v8[6]) >> 4);

  _Block_object_dispose(v13, 8);
  _Block_object_dispose(&v14, 8);
  if (__p)
  {
    long long v21 = __p;
    operator delete(__p);
  }
}

void sub_25BF56E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__9(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN4scml16strGetWordRangesEP8NSString_block_invoke(uint64_t a1, void *a2)
{
  id v24 = a2;
  uint64_t v3 = [v24 range] - *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  objc_msgSend(*(id *)(a1 + 32), "substringWithRange:");
  unint64_t v4 = (NSRegularExpression *)objc_claimAutoreleasedReturnValue();
  if (scml::regexSearch((scml *)scml::strGetWordRanges(NSString *)::wordRegex, v4, v5))
  {
    uint64_t v6 = *(void **)(*(void *)(a1 + 48) + 8);
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v8 = (void *)v6[7];
    unint64_t v9 = v6[8];
    if ((unint64_t)v8 >= v9)
    {
      uint64_t v11 = v6[6];
      uint64_t v12 = ((uint64_t)v8 - v11) >> 4;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60) {
        std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v9 - v11;
      if (v14 >> 3 > v13) {
        unint64_t v13 = v14 >> 3;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(v6 + 8), v15);
      BOOL v17 = &v16[16 * v12];
      uint64_t v19 = &v16[16 * v18];
      *(void *)BOOL v17 = *(void *)(v7 + 24);
      *((void *)v17 + 1) = v3;
      BOOL v10 = v17 + 16;
      long long v21 = (char *)v6[6];
      unint64_t v20 = (char *)v6[7];
      if (v20 != v21)
      {
        do
        {
          *((_OWORD *)v17 - 1) = *((_OWORD *)v20 - 1);
          v17 -= 16;
          v20 -= 16;
        }
        while (v20 != v21);
        unint64_t v20 = (char *)v6[6];
      }
      v6[6] = v17;
      v6[7] = v10;
      v6[8] = v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *uint64_t v8 = *(void *)(v7 + 24);
      v8[1] = v3;
      BOOL v10 = v8 + 2;
    }
    v6[7] = v10;
  }
  uint64_t v22 = [v24 range];
  [v24 range];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v23 + v22;
}

void sub_25BF570D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *std::string __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  uint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    void *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    __n128 result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void *std::vector<_NSRange>::__init_with_size[abi:ne180100]<_NSRange*,_NSRange*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = std::vector<_NSRange>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25BF574C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<_NSRange>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::unordered_map<char,std::string>::unordered_map(uint64_t a1, char *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::__emplace_unique_key_args<char,std::pair<char const,std::string> const&>(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_25BF57584(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::__emplace_unique_key_args<char,std::pair<char const,std::string> const&>(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    size_t v8 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (__n128 result = *v8; result; __n128 result = (uint64_t **)*result)
      {
        unint64_t v10 = (unint64_t)result[1];
        if (v10 == v5)
        {
          if (*((unsigned __int8 *)result + 16) == v5) {
            return result;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::__construct_node_hash<std::pair<char const,std::string> const&>(a1, *a2, a3, (uint64_t)v19);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  BOOL v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v19[0] = *v17;
    *BOOL v17 = v19[0];
  }
  else
  {
    *(void *)v19[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v19[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v19[0])
    {
      unint64_t v18 = *(void *)(*(void *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v19[0];
    }
  }
  __n128 result = (uint64_t **)v19[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_25BF577AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<char,std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::__construct_node_hash<std::pair<char const,std::string> const&>(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  size_t v8 = (std::string *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = a2;
  v8->__r_.__value_.__s.__data_[16] = *(unsigned char *)a3;
  unint64_t v9 = v8 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 24);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_25BF57868(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<char,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<char,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    unint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::find<char>(void *a1, char *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (__n128 result = *v6; result; __n128 result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

unint64_t SCML::extractLocalPeaks@<X0>(uint64_t *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v6 = *((_DWORD *)a1 + 2);
  int v5 = *((_DWORD *)a1 + 3);
  uint64_t v7 = *((unsigned int *)a1 + 4);
  int v32 = 0;
  unint64_t result = (unint64_t)std::vector<float>::vector(a3, (int)v7 * v6 * v5, &v32);
  if (a2 >= 1) {
    int v9 = a2 - 1;
  }
  else {
    int v9 = a2;
  }
  int v31 = v6;
  if (v6 >= 1)
  {
    int v10 = 0;
    int v11 = 0;
    uint64_t v12 = *(void *)result;
    int v13 = v9 >> 1;
    int v15 = *((_DWORD *)a1 + 3);
    int v14 = *((_DWORD *)a1 + 4);
    int v16 = v13 + 1;
    do
    {
      if (v5 >= 1)
      {
        unsigned int v17 = 0;
        LODWORD(result) = -v13;
        do
        {
          int v18 = v16 + v17;
          if ((int)(v16 + v17) >= v5) {
            int v18 = v5;
          }
          if ((int)v7 >= 1)
          {
            unint64_t v19 = 0;
            uint64_t v20 = *a1;
            int v21 = (v11 * v15 + v17) * v14;
            int v22 = -v13;
            do
            {
              float v23 = *(float *)(v20 + 4 * (v21 + (int)v19));
              if ((int)((v17 - v13) & ~((int)(v17 - v13) >> 31)) >= v18)
              {
LABEL_26:
                *(float *)(v12 + 4 * (v21 + (int)v19)) = v23;
              }
              else
              {
                int v24 = v16 + v19;
                if ((int)v7 < v16 + (int)v19) {
                  int v24 = v7;
                }
                uint64_t v25 = v24;
                unsigned int v26 = v14 * (v10 + (result & ~((int)result >> 31)));
                int v27 = (v17 - v13) & ~((int)(v17 - v13) >> 31);
                while ((int)((v19 - v13) & ~(((int)v19 - v13) >> 31)) >= (int)v25)
                {
LABEL_25:
                  ++v27;
                  v26 += v14;
                  if (v27 >= v18) {
                    goto LABEL_26;
                  }
                }
                unint64_t v28 = v22 & ~(v22 >> 31);
                while (1)
                {
                  float v29 = *(float *)(v20 + 4 * (int)(v26 + v28));
                  if (v23 <= v29)
                  {
                    BOOL v30 = v17 < v27;
                    if (v19 != v28) {
                      BOOL v30 = 0;
                    }
                    if (v19 < v28 || v23 < v29 || v30) {
                      break;
                    }
                  }
                  if ((uint64_t)++v28 >= v25) {
                    goto LABEL_25;
                  }
                }
              }
              ++v19;
              ++v22;
            }
            while (v19 != v7);
          }
          ++v17;
          unint64_t result = (result + 1);
        }
        while (v17 != v5);
      }
      ++v11;
      v10 += v15;
    }
    while (v11 != v31);
  }
  return result;
}

void SCML::topDetections(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  int v4 = a3;
  int v5 = a4;
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = *(_DWORD *)(a1 + 16);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (SHIDWORD(v6) < 1)
  {
    unint64_t v10 = 0;
    unint64_t v39 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    int v11 = 0;
    uint64_t v12 = a4 + 2;
    long long v43 = a4 + 2;
    do
    {
      if (v7 >= 1)
      {
        for (int i = 0; i != v7; ++i)
        {
          if ((int)v6 >= 1)
          {
            uint64_t v14 = 0;
            int v15 = *(_DWORD *)(a1 + 16);
            int v16 = i + v11 * v15;
            int v17 = *(_DWORD *)(a1 + 12) * v15;
            int v18 = -1;
            float v19 = 0.0;
            do
            {
              if (*(float *)(*(void *)a1 + 4 * v16) > v19)
              {
                int v18 = v14;
                float v19 = *(float *)(*(void *)a1 + 4 * v16);
              }
              ++v14;
              v16 += v17;
            }
            while (v6 != v14);
            if ((v18 & 0x80000000) == 0)
            {
              int v21 = *(_DWORD *)(a2 + 12);
              int v20 = *(_DWORD *)(a2 + 16);
              float v22 = *(float *)(*(void *)a2 + 4 * (i + v20 * v11));
              float v23 = *(float *)(*(void *)a2 + 4 * (i + (v21 + v11) * v20));
              int v24 = v11 + 2 * v21;
              double v25 = v23;
              double v26 = v22;
              double v27 = (float)(*(float *)(*(void *)a2 + 4 * (i + (v24 + v21) * v20)) - v23);
              double v28 = (float)(*(float *)(*(void *)a2 + 4 * (i + v24 * v20)) - v22);
              if (v10 >= *v12)
              {
                float v29 = (void *)*v5;
                unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - *v5) >> 3);
                unint64_t v31 = v30 + 1;
                if (v30 + 1 > 0x666666666666666) {
                  std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
                }
                if (0x999999999999999ALL * ((uint64_t)(*v12 - (void)v29) >> 3) > v31) {
                  unint64_t v31 = 0x999999999999999ALL * ((uint64_t)(*v12 - (void)v29) >> 3);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v12 - (void)v29) >> 3) >= 0x333333333333333) {
                  unint64_t v32 = 0x666666666666666;
                }
                else {
                  unint64_t v32 = v31;
                }
                if (v32)
                {
                  long long v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SCML::BoxInfo>>((uint64_t)v12, v32);
                  uint64_t v12 = v43;
                  float v29 = (void *)*a4;
                  unint64_t v10 = a4[1];
                }
                else
                {
                  long long v33 = 0;
                }
                long long v34 = &v33[40 * v30];
                *(float *)long long v34 = v19;
                *((_DWORD *)v34 + 1) = v18;
                *((double *)v34 + 1) = v25;
                *((double *)v34 + 2) = v26;
                *((double *)v34 + 3) = v27;
                *((double *)v34 + 4) = v28;
                if ((void *)v10 == v29)
                {
                  uint64_t v38 = &v33[40 * v30];
                  int v5 = a4;
                }
                else
                {
                  unsigned __int8 v35 = &v33[40 * v30];
                  int v5 = a4;
                  do
                  {
                    long long v36 = *(_OWORD *)(v10 - 40);
                    long long v37 = *(_OWORD *)(v10 - 24);
                    uint64_t v38 = v35 - 40;
                    *((void *)v35 - 1) = *(void *)(v10 - 8);
                    *(_OWORD *)(v35 - 24) = v37;
                    *(_OWORD *)(v35 - 40) = v36;
                    v10 -= 40;
                    v35 -= 40;
                  }
                  while ((void *)v10 != v29);
                }
                unint64_t v10 = (unint64_t)(v34 + 40);
                *int v5 = (unint64_t)v38;
                v5[1] = (unint64_t)(v34 + 40);
                v5[2] = (unint64_t)&v33[40 * v32];
                if (v29)
                {
                  operator delete(v29);
                  uint64_t v12 = v43;
                }
              }
              else
              {
                *(float *)unint64_t v10 = v19;
                *(_DWORD *)(v10 + 4) = v18;
                *(double *)(v10 + 8) = v25;
                *(double *)(v10 + 16) = v26;
                *(double *)(v10 + 24) = v27;
                *(double *)(v10 + 32) = v28;
                v10 += 40;
              }
              v5[1] = v10;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != HIDWORD(v6));
    unint64_t v39 = *v5;
    int v4 = a3;
  }
  unint64_t v40 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v39) >> 3));
  if (v10 == v39) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = v40;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5[1] - *v5) >> 3) > v4) {
    std::vector<SCML::BoxInfo>::resize((uint64_t)v5, v4);
  }
}

void sub_25BF57EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v13 = *(void **)a12;
  if (*(void *)a12)
  {
    *(void *)(a12 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<SCML::BoxInfo>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<SCML::BoxInfo>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 40 * a2;
  }
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    int v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_25BF57FB8(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SCML::BoxInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,SCML::anonymous namespace'::BoxDataDescendingScoreComparator &,SCML::BoxInfo *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a2 - 40;
    uint64_t v151 = a2 - 80;
    unint64_t v152 = a2;
    uint64_t v11 = a2 - 120;
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          uint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return;
              case 2:
                {
                  long long v59 = *(_OWORD *)a1;
                  long long v60 = *(_OWORD *)(a1 + 16);
                  uint64_t v158 = *(void *)(a1 + 32);
                  long long v156 = v59;
                  long long v157 = v60;
                  long long v61 = *(_OWORD *)v10;
                  long long v62 = *(_OWORD *)(v10 + 16);
                  *(void *)(a1 + 32) = *(void *)(v10 + 32);
                  *(_OWORD *)a1 = v61;
                  *(_OWORD *)(a1 + 16) = v62;
                  long long v63 = v156;
                  long long v64 = v157;
                  *(void *)(v10 + 32) = v158;
                  *(_OWORD *)uint64_t v10 = v63;
                  *(_OWORD *)(v10 + 16) = v64;
                }
                break;
              case 3:
                break;
              case 4:
                break;
              case 5:
                v65 = (long long *)(a1 + 40);
                v66 = (long long *)(a1 + 80);
                v67 = (long long *)(a1 + 120);
                {
                  long long v69 = *(_OWORD *)(a1 + 136);
                  long long v156 = *v67;
                  long long v68 = v156;
                  long long v157 = v69;
                  uint64_t v158 = *(void *)(a1 + 152);
                  uint64_t v70 = v158;
                  long long v72 = *(_OWORD *)v10;
                  long long v71 = *(_OWORD *)(v10 + 16);
                  *(void *)(a1 + 152) = *(void *)(v10 + 32);
                  long long *v67 = v72;
                  *(_OWORD *)(a1 + 136) = v71;
                  *(void *)(v10 + 32) = v70;
                  *(_OWORD *)uint64_t v10 = v68;
                  *(_OWORD *)(v10 + 16) = v69;
                  {
                    uint64_t v73 = *(void *)(a1 + 112);
                    long long v75 = *v66;
                    long long v74 = *(_OWORD *)(a1 + 96);
                    long long v76 = *(_OWORD *)(a1 + 136);
                    long long *v66 = *v67;
                    *(_OWORD *)(a1 + 96) = v76;
                    *(void *)(a1 + 112) = *(void *)(a1 + 152);
                    long long *v67 = v75;
                    *(_OWORD *)(a1 + 136) = v74;
                    *(void *)(a1 + 152) = v73;
                    {
                      uint64_t v77 = *(void *)(a1 + 72);
                      long long v79 = *v65;
                      long long v78 = *(_OWORD *)(a1 + 56);
                      long long v80 = *(_OWORD *)(a1 + 96);
                      long long *v65 = *v66;
                      *(_OWORD *)(a1 + 56) = v80;
                      *(void *)(a1 + 72) = *(void *)(a1 + 112);
                      long long *v66 = v79;
                      *(_OWORD *)(a1 + 96) = v78;
                      *(void *)(a1 + 112) = v77;
                      {
                        long long v81 = *(_OWORD *)a1;
                        long long v82 = *(_OWORD *)(a1 + 16);
                        uint64_t v158 = *(void *)(a1 + 32);
                        long long v156 = v81;
                        long long v157 = v82;
                        long long v83 = *(_OWORD *)(a1 + 56);
                        *(_OWORD *)a1 = *v65;
                        *(_OWORD *)(a1 + 16) = v83;
                        *(void *)(a1 + 32) = *(void *)(a1 + 72);
                        long long v84 = v157;
                        long long *v65 = v156;
                        *(_OWORD *)(a1 + 56) = v84;
                        *(void *)(a1 + 72) = v158;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 959)
          {
            uint64_t v85 = a1 + 40;
            BOOL v87 = a1 == a2 || v85 == a2;
            if (a4)
            {
              if (!v87)
              {
                uint64_t v88 = 0;
                uint64_t v89 = a1;
                do
                {
                  uint64_t v90 = v89;
                  uint64_t v89 = v85;
                  {
                    long long v91 = *(_OWORD *)v89;
                    long long v92 = *(_OWORD *)(v89 + 16);
                    uint64_t v158 = *(void *)(v89 + 32);
                    long long v156 = v91;
                    long long v157 = v92;
                    uint64_t v93 = v88;
                    while (1)
                    {
                      uint64_t v94 = a1 + v93;
                      long long v95 = *(_OWORD *)(a1 + v93 + 16);
                      *(_OWORD *)(v94 + 40) = *(_OWORD *)(a1 + v93);
                      *(_OWORD *)(v94 + 56) = v95;
                      *(void *)(v94 + 72) = *(void *)(a1 + v93 + 32);
                      if (!v93) {
                        break;
                      }
                      v93 -= 40;
                      {
                        uint64_t v96 = a1 + v93 + 40;
                        goto LABEL_82;
                      }
                    }
                    uint64_t v96 = a1;
LABEL_82:
                    long long v97 = v156;
                    long long v98 = v157;
                    *(void *)(v96 + 32) = v158;
                    *(_OWORD *)uint64_t v96 = v97;
                    *(_OWORD *)(v96 + 16) = v98;
                    a2 = v152;
                  }
                  uint64_t v85 = v89 + 40;
                  v88 += 40;
                }
                while (v89 + 40 != a2);
              }
            }
            else if (!v87)
            {
              uint64_t v142 = a1 - 40;
              do
              {
                uint64_t v143 = a1;
                a1 = v85;
                {
                  long long v144 = *(_OWORD *)a1;
                  long long v145 = *(_OWORD *)(a1 + 16);
                  uint64_t v158 = *(void *)(a1 + 32);
                  long long v156 = v144;
                  long long v157 = v145;
                  uint64_t v146 = v142;
                  do
                  {
                    long long v147 = *(_OWORD *)(v146 + 56);
                    *(_OWORD *)(v146 + 80) = *(_OWORD *)(v146 + 40);
                    *(_OWORD *)(v146 + 96) = v147;
                    *(void *)(v146 + 112) = *(void *)(v146 + 72);
                    v146 -= 40;
                  }
                  while (v148);
                  long long v149 = v156;
                  long long v150 = v157;
                  *(void *)(v146 + 112) = v158;
                  *(_OWORD *)(v146 + 80) = v149;
                  *(_OWORD *)(v146 + 96) = v150;
                }
                uint64_t v85 = a1 + 40;
                v142 += 40;
              }
              while (a1 + 40 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (a1 != a2)
            {
              int64_t v99 = (unint64_t)(v14 - 2) >> 1;
              int64_t v100 = v99;
              do
              {
                int64_t v101 = v100;
                if (v99 >= v100)
                {
                  uint64_t v102 = (2 * v100) | 1;
                  uint64_t v103 = a1 + 40 * v102;
                  if (2 * v100 + 2 < v14
                  {
                    v103 += 40;
                    uint64_t v102 = 2 * v101 + 2;
                  }
                  uint64_t v104 = a1 + 40 * v101;
                  {
                    long long v105 = *(_OWORD *)v104;
                    long long v106 = *(_OWORD *)(v104 + 16);
                    uint64_t v158 = *(void *)(v104 + 32);
                    long long v156 = v105;
                    long long v157 = v106;
                    do
                    {
                      uint64_t v107 = v103;
                      long long v108 = *(_OWORD *)v103;
                      long long v109 = *(_OWORD *)(v103 + 16);
                      *(void *)(v104 + 32) = *(void *)(v103 + 32);
                      *(_OWORD *)uint64_t v104 = v108;
                      *(_OWORD *)(v104 + 16) = v109;
                      if (v99 < v102) {
                        break;
                      }
                      uint64_t v110 = (2 * v102) | 1;
                      uint64_t v103 = a1 + 40 * v110;
                      uint64_t v111 = 2 * v102 + 2;
                      if (v111 < v14
                      {
                        v103 += 40;
                        uint64_t v110 = v111;
                      }
                      uint64_t v104 = v107;
                      uint64_t v102 = v110;
                    }
                    long long v112 = v156;
                    long long v113 = v157;
                    *(void *)(v107 + 32) = v158;
                    *(_OWORD *)uint64_t v107 = v112;
                    *(_OWORD *)(v107 + 16) = v113;
                  }
                }
                int64_t v100 = v101 - 1;
              }
              while (v101);
              int64_t v114 = v13 / 0x28uLL;
              unint64_t v115 = v152;
              do
              {
                uint64_t v116 = 0;
                long long v117 = *(_OWORD *)a1;
                long long v118 = *(_OWORD *)(a1 + 16);
                uint64_t v155 = *(void *)(a1 + 32);
                long long v153 = v117;
                long long v154 = v118;
                unint64_t v119 = a1;
                do
                {
                  uint64_t v120 = v119 + 40 * v116 + 40;
                  uint64_t v121 = (2 * v116) | 1;
                  uint64_t v122 = 2 * v116 + 2;
                  if (v122 < v114
                  {
                    v120 += 40;
                    uint64_t v121 = v122;
                  }
                  long long v123 = *(_OWORD *)v120;
                  long long v124 = *(_OWORD *)(v120 + 16);
                  *(void *)(v119 + 32) = *(void *)(v120 + 32);
                  *(_OWORD *)unint64_t v119 = v123;
                  *(_OWORD *)(v119 + 16) = v124;
                  unint64_t v119 = v120;
                  uint64_t v116 = v121;
                }
                while (v121 <= (uint64_t)((unint64_t)(v114 - 2) >> 1));
                v115 -= 40;
                if (v120 == v115)
                {
                  long long v139 = v153;
                  long long v140 = v154;
                  *(void *)(v120 + 32) = v155;
                  *(_OWORD *)uint64_t v120 = v139;
                  *(_OWORD *)(v120 + 16) = v140;
                }
                else
                {
                  long long v125 = *(_OWORD *)v115;
                  long long v126 = *(_OWORD *)(v115 + 16);
                  *(void *)(v120 + 32) = *(void *)(v115 + 32);
                  *(_OWORD *)uint64_t v120 = v125;
                  *(_OWORD *)(v120 + 16) = v126;
                  long long v127 = v153;
                  long long v128 = v154;
                  *(void *)(v115 + 32) = v155;
                  *(_OWORD *)unint64_t v115 = v127;
                  *(_OWORD *)(v115 + 16) = v128;
                  uint64_t v129 = v120 - a1 + 40;
                  if (v129 >= 41)
                  {
                    unint64_t v130 = (v129 / 0x28uLL - 2) >> 1;
                    uint64_t v131 = a1 + 40 * v130;
                    {
                      long long v132 = *(_OWORD *)v120;
                      long long v133 = *(_OWORD *)(v120 + 16);
                      uint64_t v158 = *(void *)(v120 + 32);
                      long long v156 = v132;
                      long long v157 = v133;
                      do
                      {
                        uint64_t v134 = v131;
                        long long v135 = *(_OWORD *)v131;
                        long long v136 = *(_OWORD *)(v131 + 16);
                        *(void *)(v120 + 32) = *(void *)(v131 + 32);
                        *(_OWORD *)uint64_t v120 = v135;
                        *(_OWORD *)(v120 + 16) = v136;
                        if (!v130) {
                          break;
                        }
                        unint64_t v130 = (v130 - 1) >> 1;
                        uint64_t v131 = a1 + 40 * v130;
                        uint64_t v120 = v134;
                      }
                      long long v137 = v156;
                      long long v138 = v157;
                      *(void *)(v134 + 32) = v158;
                      *(_OWORD *)uint64_t v134 = v137;
                      *(_OWORD *)(v134 + 16) = v138;
                    }
                  }
                }
              }
              while (v114-- > 2);
            }
            return;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = a1 + 40 * ((unint64_t)v14 >> 1);
          if ((unint64_t)v13 < 0x1401)
          {
          }
          else
          {
            uint64_t v17 = 5 * v15;
            long long v18 = *(_OWORD *)a1;
            long long v19 = *(_OWORD *)(a1 + 16);
            uint64_t v158 = *(void *)(a1 + 32);
            long long v156 = v18;
            long long v157 = v19;
            long long v20 = *(_OWORD *)v16;
            long long v21 = *(_OWORD *)(v16 + 16);
            *(void *)(a1 + 32) = *(void *)(v16 + 32);
            *(_OWORD *)a1 = v20;
            *(_OWORD *)(a1 + 16) = v21;
            long long v22 = v156;
            long long v23 = v157;
            *(void *)(v16 + 32) = v158;
            *(_OWORD *)uint64_t v16 = v22;
            *(_OWORD *)(v16 + 16) = v23;
          }
          a2 = v152;
          --a3;
            break;
          long long v43 = *(_OWORD *)a1;
          long long v44 = *(_OWORD *)(a1 + 16);
          uint64_t v155 = *(void *)(a1 + 32);
          long long v153 = v43;
          long long v154 = v44;
          {
            unint64_t v12 = a1;
            do
              v12 += 40;
          }
          else
          {
            unint64_t v45 = a1 + 40;
            do
            {
              unint64_t v12 = v45;
              if (v45 >= v152) {
                break;
              }
              unint64_t v45 = v12 + 40;
            }
            while (!v46);
          }
          unint64_t v47 = v152;
          if (v12 < v152)
          {
            unint64_t v47 = v152;
            do
              v47 -= 40;
          }
          while (v12 < v47)
          {
            long long v48 = *(_OWORD *)v12;
            long long v49 = *(_OWORD *)(v12 + 16);
            uint64_t v158 = *(void *)(v12 + 32);
            long long v156 = v48;
            long long v157 = v49;
            long long v50 = *(_OWORD *)v47;
            long long v51 = *(_OWORD *)(v47 + 16);
            *(void *)(v12 + 32) = *(void *)(v47 + 32);
            *(_OWORD *)unint64_t v12 = v50;
            *(_OWORD *)(v12 + 16) = v51;
            long long v52 = v156;
            long long v53 = v157;
            *(void *)(v47 + 32) = v158;
            *(_OWORD *)unint64_t v47 = v52;
            *(_OWORD *)(v47 + 16) = v53;
            do
              v12 += 40;
            do
              v47 -= 40;
          }
          v54 = (long long *)(v12 - 40);
          BOOL v4 = v12 - 40 >= a1;
          BOOL v5 = v12 - 40 == a1;
          if (v12 - 40 != a1)
          {
            long long v55 = *v54;
            long long v56 = *(_OWORD *)(v12 - 24);
            *(void *)(a1 + 32) = *(void *)(v12 - 8);
            *(_OWORD *)a1 = v55;
            *(_OWORD *)(a1 + 16) = v56;
          }
          a4 = 0;
          long long v57 = v153;
          long long v58 = v154;
          *(void *)(v12 - 8) = v155;
          long long *v54 = v57;
          *(_OWORD *)(v12 - 24) = v58;
        }
        uint64_t v24 = 0;
        long long v25 = *(_OWORD *)a1;
        long long v26 = *(_OWORD *)(a1 + 16);
        uint64_t v155 = *(void *)(a1 + 32);
        long long v153 = v25;
        long long v154 = v26;
        do
          v24 += 40;
        unint64_t v27 = a1 + v24;
        unint64_t v28 = v152;
        BOOL v5 = v24 == 40;
        a2 = v152;
        if (v5)
        {
          unint64_t v28 = v152;
          do
          {
            if (v27 >= v28) {
              break;
            }
            v28 -= 40;
          }
        }
        else
        {
          do
            v28 -= 40;
        }
        if (v27 >= v28)
        {
          uint64_t v37 = v27 - 40;
        }
        else
        {
          unint64_t v29 = v27;
          unint64_t v30 = v28;
          do
          {
            long long v31 = *(_OWORD *)v29;
            long long v32 = *(_OWORD *)(v29 + 16);
            uint64_t v158 = *(void *)(v29 + 32);
            long long v156 = v31;
            long long v157 = v32;
            long long v33 = *(_OWORD *)v30;
            long long v34 = *(_OWORD *)(v30 + 16);
            *(void *)(v29 + 32) = *(void *)(v30 + 32);
            *(_OWORD *)unint64_t v29 = v33;
            *(_OWORD *)(v29 + 16) = v34;
            long long v35 = v156;
            long long v36 = v157;
            *(void *)(v30 + 32) = v158;
            *(_OWORD *)unint64_t v30 = v35;
            *(_OWORD *)(v30 + 16) = v36;
            do
              v29 += 40;
            do
              v30 -= 40;
          }
          while (v29 < v30);
          uint64_t v37 = v29 - 40;
        }
        if (v37 != a1)
        {
          long long v38 = *(_OWORD *)v37;
          long long v39 = *(_OWORD *)(v37 + 16);
          *(void *)(a1 + 32) = *(void *)(v37 + 32);
          *(_OWORD *)a1 = v38;
          *(_OWORD *)(a1 + 16) = v39;
        }
        long long v40 = v153;
        long long v41 = v154;
        *(void *)(v37 + 32) = v155;
        *(_OWORD *)uint64_t v37 = v40;
        *(_OWORD *)(v37 + 16) = v41;
        if (v27 >= v28) {
          break;
        }
LABEL_32:
        a4 = 0;
        unint64_t v12 = v37 + 40;
      }
      unint64_t v12 = v37 + 40;
      {
        break;
      }
      if (!v42) {
        goto LABEL_32;
      }
    }
    a2 = v37;
    if (!v42) {
      continue;
    }
    break;
  }
}

BOOL SCML::anonymous namespace'::BoxDataDescendingScoreComparator::operator()(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 != *(float *)a2) {
    return *(float *)a1 > *(float *)a2;
  }
  int v3 = *(_DWORD *)(a1 + 4);
  int v4 = *(_DWORD *)(a2 + 4);
  if (v3 != v4) {
    return v3 < v4;
  }
  double v5 = *(double *)(a1 + 8);
  double v6 = *(double *)(a2 + 8);
  BOOL v7 = v5 < v6;
  if (v5 != v6) {
    return v7;
  }
  double v8 = *(double *)(a1 + 16);
  double v9 = *(double *)(a2 + 16);
  BOOL v7 = v8 < v9;
  if (v8 != v9) {
    return v7;
  }
  double v10 = *(double *)(a1 + 24);
  double v11 = *(double *)(a2 + 24);
  BOOL v7 = v10 < v11;
  if (v10 != v11) {
    return v7;
  }
  double v12 = *(double *)(a1 + 32);
  double v13 = *(double *)(a2 + 32);
  return v12 != v13 && v12 < v13;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SCML::anonymous namespace'::BoxDataDescendingScoreComparator &,SCML::BoxInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (v6)
  {
    if (result)
    {
      long long v8 = *(_OWORD *)a1;
      long long v9 = *(_OWORD *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a3 + 32);
      long long v12 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v12;
      *(void *)(a1 + 32) = v11;
    }
    else
    {
      long long v23 = *(_OWORD *)a1;
      long long v24 = *(_OWORD *)(a1 + 16);
      uint64_t v25 = *(void *)(a1 + 32);
      uint64_t v26 = *(void *)(a2 + 32);
      long long v27 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v27;
      *(void *)(a1 + 32) = v26;
      *(void *)(a2 + 32) = v25;
      *(_OWORD *)a2 = v23;
      *(_OWORD *)(a2 + 16) = v24;
      if (!result) {
        return result;
      }
      long long v8 = *(_OWORD *)a2;
      long long v9 = *(_OWORD *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 32);
      uint64_t v28 = *(void *)(a3 + 32);
      long long v29 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v29;
      *(void *)(a2 + 32) = v28;
    }
    *(void *)(a3 + 32) = v10;
    *(_OWORD *)a3 = v8;
    *(_OWORD *)(a3 + 16) = v9;
  }
  else if (result)
  {
    long long v13 = *(_OWORD *)a2;
    long long v14 = *(_OWORD *)(a2 + 16);
    uint64_t v15 = *(void *)(a2 + 32);
    uint64_t v16 = *(void *)(a3 + 32);
    long long v17 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v17;
    *(void *)(a2 + 32) = v16;
    *(void *)(a3 + 32) = v15;
    *(_OWORD *)a3 = v13;
    *(_OWORD *)(a3 + 16) = v14;
    if (result)
    {
      long long v18 = *(_OWORD *)a1;
      long long v19 = *(_OWORD *)(a1 + 16);
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = *(void *)(a2 + 32);
      long long v22 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v22;
      *(void *)(a1 + 32) = v21;
      *(void *)(a2 + 32) = v20;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)(a2 + 16) = v19;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SCML::anonymous namespace'::BoxDataDescendingScoreComparator &,SCML::BoxInfo *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = a2 - 40;
        return 1;
      long long v7 = *(_OWORD *)a1;
      long long v8 = *(_OWORD *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(v6 + 32);
      long long v11 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_OWORD *)(a1 + 16) = v11;
      *(void *)(a1 + 32) = v10;
      *(void *)(v6 + 32) = v9;
      BOOL result = 1;
      *(_OWORD *)uint64_t v6 = v7;
      *(_OWORD *)(v6 + 16) = v8;
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      long long v22 = (long long *)(a1 + 40);
      long long v23 = (long long *)(a1 + 80);
      long long v24 = (long long *)(a1 + 120);
      uint64_t v25 = a2 - 40;
        return 1;
      long long v26 = *v24;
      long long v27 = *(_OWORD *)(a1 + 136);
      uint64_t v28 = *(void *)(a1 + 152);
      uint64_t v29 = *(void *)(v25 + 32);
      long long v30 = *(_OWORD *)(v25 + 16);
      *long long v24 = *(_OWORD *)v25;
      *(_OWORD *)(a1 + 136) = v30;
      *(void *)(a1 + 152) = v29;
      *(void *)(v25 + 32) = v28;
      *(_OWORD *)uint64_t v25 = v26;
      *(_OWORD *)(v25 + 16) = v27;
        return 1;
      uint64_t v31 = *(void *)(a1 + 112);
      long long v33 = *v23;
      long long v32 = *(_OWORD *)(a1 + 96);
      long long v34 = *(_OWORD *)(a1 + 136);
      *long long v23 = *v24;
      *(_OWORD *)(a1 + 96) = v34;
      *(void *)(a1 + 112) = *(void *)(a1 + 152);
      *long long v24 = v33;
      *(_OWORD *)(a1 + 136) = v32;
      *(void *)(a1 + 152) = v31;
        return 1;
      uint64_t v35 = *(void *)(a1 + 72);
      long long v37 = *v22;
      long long v36 = *(_OWORD *)(a1 + 56);
      long long v38 = *(_OWORD *)(a1 + 96);
      long long *v22 = *v23;
      *(_OWORD *)(a1 + 56) = v38;
      *(void *)(a1 + 72) = *(void *)(a1 + 112);
      *long long v23 = v37;
      *(_OWORD *)(a1 + 96) = v36;
      *(void *)(a1 + 112) = v35;
        return 1;
      uint64_t v39 = *(void *)(a1 + 32);
      long long v41 = *(_OWORD *)a1;
      long long v40 = *(_OWORD *)(a1 + 16);
      long long v42 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v22;
      *(_OWORD *)(a1 + 16) = v42;
      *(void *)(a1 + 32) = *(void *)(a1 + 72);
      long long *v22 = v41;
      *(_OWORD *)(a1 + 56) = v40;
      BOOL result = 1;
      *(void *)(a1 + 72) = v39;
      return result;
    default:
      uint64_t v12 = a1 + 80;
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    {
      long long v16 = *(_OWORD *)(v13 + 16);
      long long v43 = *(_OWORD *)v13;
      long long v44 = v16;
      uint64_t v45 = *(void *)(v13 + 32);
      uint64_t v17 = v14;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(void *)(v18 + 152) = *(void *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      long long v21 = v44;
      *(_OWORD *)uint64_t v20 = v43;
      *(_OWORD *)(v20 + 16) = v21;
      *(void *)(v20 + 32) = v45;
      if (++v15 == 8) {
        return v13 + 40 == a2;
      }
    }
    uint64_t v12 = v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SCML::anonymous namespace'::BoxDataDescendingScoreComparator &,SCML::BoxInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  {
    long long v9 = *(_OWORD *)a3;
    long long v10 = *(_OWORD *)(a3 + 16);
    uint64_t v11 = *(void *)(a3 + 32);
    uint64_t v12 = *(void *)(a4 + 32);
    long long v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = v12;
    *(void *)(a4 + 32) = v11;
    *(_OWORD *)a4 = v9;
    *(_OWORD *)(a4 + 16) = v10;
    {
      __n128 v14 = *(__n128 *)a2;
      long long v15 = *(_OWORD *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 32);
      uint64_t v17 = *(void *)(a3 + 32);
      long long v18 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v18;
      *(void *)(a2 + 32) = v17;
      *(void *)(a3 + 32) = v16;
      *(__n128 *)a3 = v14;
      *(_OWORD *)(a3 + 16) = v15;
      {
        __n128 result = *(__n128 *)a1;
        long long v19 = *(_OWORD *)(a1 + 16);
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = *(void *)(a2 + 32);
        long long v22 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v22;
        *(void *)(a1 + 32) = v21;
        *(void *)(a2 + 32) = v20;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v19;
      }
    }
  }
  return result;
}

void std::vector<SCML::BoxInfo>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  double v5 = v6;
  long long v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SCML::BoxInfo>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    __n128 v14 = &v12[40 * v8];
    long long v15 = &v12[40 * v11];
    size_t v16 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    long long v19 = (char *)*a1;
    long long v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 40);
        long long v21 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v21;
        *(_OWORD *)(v14 - 40) = v20;
        v14 -= 40;
        v18 -= 40;
      }
      while (v18 != v19);
      long long v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void sub_25BF59364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v24 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void scml::ClipEmbeddingClassifier::Impl::Impl(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  *(void *)a1 = 850045863;
  uint64_t v4 = (const void *)(a1 + 112);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  scml::ClipEmbeddingClassifier::Impl::loadConfig(a1, a2, a3);
  if (*(char *)(a1 + 135) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 135);
  }
  else {
    size_t v5 = *(void *)(a1 + 120);
  }
  uint64_t v6 = &v26;
  std::string::basic_string[abi:ne180100]((uint64_t)&v26, v5 + 7);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v6 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*(char *)(a1 + 135) >= 0) {
      long long v7 = v4;
    }
    else {
      long long v7 = *(const void **)(a1 + 112);
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, ".bundle");
  std::string::basic_string[abi:ne180100]<0>(&v27, "main");
  LOBYTE(v28) = 0;
  char v29 = 0;
  if (*(char *)(a1 + 135) >= 0) {
    size_t v8 = *(unsigned __int8 *)(a1 + 135);
  }
  else {
    size_t v8 = *(void *)(a1 + 120);
  }
  unint64_t v9 = v13;
  std::string::basic_string[abi:ne180100]((uint64_t)v13, v8 + 4);
  if (v14 < 0) {
    unint64_t v9 = (void **)v13[0];
  }
  if (v8)
  {
    if (*(char *)(a1 + 135) >= 0) {
      unint64_t v10 = v4;
    }
    else {
      unint64_t v10 = *(const void **)(a1 + 112);
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, ".mil");
  std::string::basic_string[abi:ne180100]<0>(&v15, "main");
  LOBYTE(v16) = 0;
  char v17 = 0;
  long long v19 = 0;
  long long v20 = 0;
  std::string __p = 0;
  unint64_t v11 = operator new(0x10uLL);
  std::string __p = v11;
  *unint64_t v11 = xmmword_25BFF3D40;
  long long v19 = v11 + 1;
  long long v20 = v11 + 1;
  uint64_t v25 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  char v24 = 0;
  scml::loadModelWithFallback((scml *)&v26, (const ik::core::E5LoadPreCompiledConfig *)v13, v12);
}

void sub_25BF59B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (a2 == 1)
  {
    uint64_t v39 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x10uLL);
    a12 = (*(uint64_t (**)(void *))(*(void *)v39 + 16))(v39);
    scml::strCat<char const(&)[27],std::string_view &,char const(&)[3],char const*>("Failed to load model from ", &a15, ": ", (const char **)&a12, &a20);
    MEMORY[0x26117A7E0](exception, &a20);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (*(char *)(v31 + 263) < 0) {
    operator delete(*(void **)(v31 + 240));
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table(v34);
  std::unique_ptr<ik::E5Op>::reset[abi:ne180100](v33, 0);
  if (*(char *)(v31 + 183) < 0) {
    operator delete(*v36);
  }
  if (*(char *)(v31 + 159) < 0) {
    operator delete(*v32);
  }
  if (*(char *)(v31 + 135) < 0) {
    operator delete(*a11);
  }
  long long v41 = *(void **)(v31 + 88);
  if (v41)
  {
    *(void *)(v31 + 96) = v41;
    operator delete(v41);
  }
  a20 = (void *)(v31 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  std::mutex::~mutex((std::mutex *)v31);
  _Unwind_Resume(a1);
}

void sub_25BF59DFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v25)
  {
LABEL_6:
    __cxa_end_catch();
    JUMPOUT(0x25BF59E30);
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void sub_25BF59EB8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x25BF59EB0);
}

uint64_t scml::ClipEmbeddingClassifier::Impl::loadConfig(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  scml::Config::loadJson(a2, a3, (uint64_t)v48);
  LOBYTE(v38[0]) = 0;
  char v40 = 0;
  uint64_t v6 = scml::Config::get<std::string>((uint64_t)v48, "model_path", 0xAuLL, (uint64_t)v38);
  v47[0] = a2;
  v47[1] = a3;
  memset(&__p, 0, sizeof(__p));
  if (std::string::ends_with[abi:ne180100]((uint64_t *)v6, ".mil"))
  {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(v6 + 8);
    }
    std::string::basic_string(&v45, (const std::string *)v6, 0, v7 - 4, (std::allocator<char> *)v43);
  }
  else
  {
    if (!std::string::ends_with[abi:ne180100]((uint64_t *)v6, ".bundle"))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      scml::strCat<char const(&)[38],std::string>("Model path does not end with .mil or .bundle: ", v6, &v45);
      MEMORY[0x26117A7E0](exception, &v45);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v8 = *(unsigned __int8 *)(v6 + 23);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(v6 + 8);
    }
    std::string::basic_string(&v45, (const std::string *)v6, 0, v8 - 7, (std::allocator<char> *)v43);
  }
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  __p.__pn_ = v45;
  if (std::__fs::filesystem::path::__root_directory(&__p).__size_)
  {
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string pn = __p.__pn_;
    }
  }
  else
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v42, (uint64_t)v47);
    std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v42, (uint64_t)v43);
    std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)v43, (std::__fs::filesystem::path *)&v45);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&pn, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string pn = v45;
    }
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  unint64_t v9 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)unint64_t v9 = *(_OWORD *)&pn.__r_.__value_.__l.__data_;
  *(void *)(a1 + 128) = *((void *)&pn.__r_.__value_.__l + 2);
  *((unsigned char *)&pn.__r_.__value_.__s + 23) = 0;
  pn.__r_.__value_.__s.__data_[0] = 0;
  if (v40 && v39 < 0) {
    operator delete(v38[0]);
  }
  LOBYTE(v38[0]) = 0;
  char v40 = 0;
  unint64_t v10 = (const std::string *)scml::Config::get<std::string>((uint64_t)v48, "input_embedding_name", 0x14uLL, (uint64_t)v38);
  std::string::operator=((std::string *)(a1 + 136), v10);
  if (v40 && v39 < 0) {
    operator delete(v38[0]);
  }
  LOBYTE(v38[0]) = 0;
  char v40 = 0;
  unint64_t v11 = (const std::string *)scml::Config::get<std::string>((uint64_t)v48, "output_probabilities_name", 0x19uLL, (uint64_t)v38);
  std::string::operator=((std::string *)(a1 + 160), v11);
  if (v40 && v39 < 0) {
    operator delete(v38[0]);
  }
  LOBYTE(v38[0]) = 0;
  char v40 = 0;
  uint64_t v12 = (uint64_t *)scml::Config::get<std::vector<scml::Config>>((uint64_t)v48, "class_thresholds", 0x10uLL, (uint64_t)v38);
  if (v40)
  {
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (*v12 != v14)
  {
    long long v15 = (void **)(a1 + 88);
    do
    {
      LOBYTE(v38[0]) = 0;
      char v40 = 0;
      size_t v16 = (long long *)scml::Config::get<std::string>(v13, "class", 5uLL, (uint64_t)v38);
      unint64_t v17 = *(void *)(a1 + 72);
      if (v17 >= *(void *)(a1 + 80))
      {
        uint64_t v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 64), v16);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 64, v16);
        uint64_t v18 = v17 + 24;
      }
      *(void *)(a1 + 72) = v18;
      if (v40 && v39 < 0) {
        operator delete(v38[0]);
      }
      LOBYTE(v38[0]) = 0;
      BYTE4(v38[0]) = 0;
      float v19 = scml::Config::get<float>(v13, "threshold", 9uLL, v38);
      float v20 = v19;
      uint64_t v22 = *(float **)(a1 + 96);
      unint64_t v21 = *(void *)(a1 + 104);
      if ((unint64_t)v22 >= v21)
      {
        char v24 = (float *)*v15;
        uint64_t v25 = ((char *)v22 - (unsigned char *)*v15) >> 2;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62) {
          std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = v21 - (void)v24;
        if (v27 >> 1 > v26) {
          unint64_t v26 = v27 >> 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          char v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 104, v28);
          char v24 = *(float **)(a1 + 88);
          uint64_t v22 = *(float **)(a1 + 96);
        }
        else
        {
          char v29 = 0;
        }
        uint64_t v30 = (float *)&v29[4 * v25];
        *uint64_t v30 = v20;
        uint64_t v23 = v30 + 1;
        while (v22 != v24)
        {
          int v31 = *((_DWORD *)v22-- - 1);
          *((_DWORD *)v30-- - 1) = v31;
        }
        *(void *)(a1 + 88) = v30;
        *(void *)(a1 + 96) = v23;
        *(void *)(a1 + 104) = &v29[4 * v28];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        float *v22 = v19;
        uint64_t v23 = v22 + 1;
      }
      *(void *)(a1 + 96) = v23;
      v13 += 64;
    }
    while (v13 != v14);
  }
  LOBYTE(v38[0]) = 0;
  char v40 = 0;
  long long v32 = (const std::string *)scml::Config::get<std::string>((uint64_t)v48, "name", 4uLL, (uint64_t)v38);
  std::string::operator=((std::string *)(a1 + 240), v32);
  if (v40 && v39 < 0) {
    operator delete(v38[0]);
  }
  LOBYTE(v38[0]) = 0;
  char v40 = 0;
  long long v33 = (void *)scml::Config::get<std::string>((uint64_t)v48, "embedding_version", 0x11uLL, (uint64_t)v38);
  size_t v34 = v33[1];
  if (*((char *)v33 + 23) >= 0)
  {
    size_t v35 = *((unsigned __int8 *)v33 + 23);
  }
  else
  {
    long long v33 = (void *)*v33;
    size_t v35 = v34;
  }
  *(void *)(a1 + 264) = scml::ClipImageEncoder::embeddingVersion(v33, v35);
  if (v40 && v39 < 0) {
    operator delete(v38[0]);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v48);
}

void sub_25BF5A46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a15)
  {
    if (a14 < 0) {
      operator delete(a9);
    }
  }
  scml::Config::~Config((scml::Config *)&a46);
  _Unwind_Resume(a1);
}

void ik::core::E5LoadMILConfig::~E5LoadMILConfig(id *this)
{
  int v3 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  id v2 = this[10];
  if (v2)
  {
    this[11] = v2;
    operator delete(v2);
  }
  if (*((unsigned char *)this + 72) && *((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void ik::core::E5LoadPreCompiledConfig::~E5LoadPreCompiledConfig(void **this)
{
  if (*((unsigned char *)this + 72) && *((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void scml::TensorSpec::~TensorSpec(void **this)
{
  id v2 = this + 3;
  std::vector<std::variant<int,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t scml::strCat<char const(&)[27],std::string_view &,char const(&)[3],char const*>@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, const char **a4@<X3>, void *a5@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  scml::scml_impl::strCat<char const(&)[27],std::string_view &,char const(&)[3],char const*>(&v11, a1, a2, a3, a4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a5);
  uint64_t v11 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v12[-1] + *(void *)(v11 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[0] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v14);
}

void sub_25BF5A814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float scml::Config::get<float>(uint64_t a1, const void *a2, size_t a3, unsigned char *a4)
{
  v22[0] = (uint64_t)a2;
  v22[1] = a3;
  uint64_t v8 = scml::Config::as<std::unordered_map<std::string,scml::Config>>(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = (void *)v8;
  if (a3 >= 0x17)
  {
    uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v11 = a3 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    size_t v20 = a3;
    int64_t v21 = v12 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = a3;
  p_dst = (void **)&__dst;
  if (a3) {
LABEL_8:
  }
    memmove(p_dst, a2, a3);
  *((unsigned char *)p_dst + a3) = 0;
  char v13 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v9, (unsigned __int8 *)&__dst);
  uint64_t v14 = v13;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst);
    if (v14) {
      return scml::Config::as<float>((_DWORD *)v14 + 10);
    }
  }
  else if (v13)
  {
    return scml::Config::as<float>((_DWORD *)v14 + 10);
  }
  if (!a4[4])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strCat<std::string_view const&,char const(&)[11]>(v22, " not found", &__dst);
    if (v21 >= 0) {
      unint64_t v17 = (void **)&__dst;
    }
    else {
      unint64_t v17 = __dst;
    }
    if (v21 >= 0) {
      uint64_t v18 = HIBYTE(v21);
    }
    else {
      uint64_t v18 = v20;
    }
    scml::Config::error(a1, (uint64_t)v17, v18, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return *(float *)a4;
}

void sub_25BF5A9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void scml::ClipEmbeddingClassifier::Impl::writeInputTensors(uint64_t a1, void *a2)
{
  int v3 = (unint64_t *)(a1 + 232);
  if (*(void *)(a1 + 232) != (uint64_t)(a2[1] - *a2) >> 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    __p[0] = (void *)((uint64_t)(a2[1] - *a2) >> 2);
    scml::strCat<char const(&)[16],unsigned long,char const(&)[12],unsigned long &>("embedding size ", (uint64_t)__p, ", expected ", v11);
    MEMORY[0x26117A7E0](exception, v11);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  v11[0] = (long long *)(a1 + 136);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 192, (unsigned __int8 *)(a1 + 136), (uint64_t)&std::piecewise_construct, v11);
  uint64_t v5 = ik::Tensor::Data<float>((uint64_t)(v4 + 40));
  (*(void (**)(void **__return_ptr))(**((void **)v4 + 10) + 32))(__p);
  ik::ArrayView<float,-1>::ArrayView(v11, v5, (uint64_t)__p);
  v11[0] = (long long *)&unk_2709731D0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = 0;
  if (*v3)
  {
    unint64_t v6 = 0;
    do
    {
      int v7 = *(_DWORD *)(*a2 + 4 * v6);
      int v10 = 0;
      uint64_t v8 = v11[1];
      *((_DWORD *)v8 + ik::ArrayView<float,-1>::IndexOf<int,unsigned long>((uint64_t)v11, &v10, __p)) = v7;
      unint64_t v6 = (unint64_t)__p[0] + 1;
      __p[0] = (void *)v6;
    }
    while (v6 < *v3);
  }
  v11[0] = (long long *)&unk_270973330;
  if (v12)
  {
    char v13 = v12;
    operator delete(v12);
  }
}

void sub_25BF5ABD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t scml::strCat<char const(&)[16],unsigned long,char const(&)[12],unsigned long &>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  scml::scml_impl::strCat<char const(&)[16],unsigned long,char const(&)[12],unsigned long &>(&v9, a1, a2, a3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, a4);
  uint64_t v9 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v10[-1] + *(void *)(v9 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[0] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v12);
}

void sub_25BF5ADBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *ik::MutableArrayView<float,-1>::~MutableArrayView(void *a1)
{
  *a1 = &unk_270973330;
  id v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void scml::ClipEmbeddingClassifier::ClipEmbeddingClassifier()
{
}

void sub_25BF5AE80(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10B2C4099DE21BELL);
  _Unwind_Resume(a1);
}

void scml::ClipEmbeddingClassifier::~ClipEmbeddingClassifier(scml::ClipEmbeddingClassifier::Impl **this)
{
}

{
  std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0);
}

void scml::ClipEmbeddingClassifier::predict(std::mutex **a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *a1;
  std::mutex::lock(*a1);
  scml::ClipEmbeddingClassifier::Impl::writeInputTensors((uint64_t)*a1, a2);
  ik::core::E5OpImpl::Run(**(ik::core::E5OpImpl ***)&(*a1)[2].__m_.__opaque[48], (uint64_t)v35);
  int v7 = std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::find<std::string>(v35, (unsigned __int8 *)&(*a1)[2].__m_.__opaque[24]);
  uint64_t v8 = v7;
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v9 = ik::Tensor::Data<float>((uint64_t)(v7 + 40));
  (*(void (**)(void **__return_ptr))(**((void **)v8 + 10) + 32))(__p);
  ik::ArrayView<float,-1>::ArrayView(&v31, v9, (uint64_t)__p);
  int v31 = &unk_2709731D0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = 0;
  int v10 = *a1;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a3 + 8), (long long *)v10[1].__m_.__sig, *(long long **)v10[1].__m_.__opaque, 0xAAAAAAAAAAAAAAABLL * ((*(void *)v10[1].__m_.__opaque - v10[1].__m_.__sig) >> 3));
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*a1)[1].__m_.__opaque - (*a1)[1].__m_.__sig) >> 3);
  LOBYTE(v3std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = 1;
  std::vector<BOOL>::vector((void *)(a3 + 32), v11, (unsigned __int8 *)&v30);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*a1)[1].__m_.__opaque - (*a1)[1].__m_.__sig) >> 3);
  LODWORD(__p[0]) = -1082130432;
  std::vector<float>::vector((void *)(a3 + 56), v12, __p);
  LODWORD(__p[0]) = 0;
  if (*(void *)(*((void *)v8 + 7) + 8))
  {
    do
    {
      int v30 = 0;
      uint64_t v13 = v32;
      float v14 = *(float *)(v13 + 4 * ik::ArrayView<float,-1>::IndexOf<int,int>((uint64_t)&v31, &v30, (int *)__p));
      unint64_t v15 = SLODWORD(__p[0]);
      float v16 = *(float *)(*(void *)&(*a1)[1].__m_.__opaque[16] + 4 * SLODWORD(__p[0]));
      BOOL v17 = *(unsigned char *)a3 != 0;
      if (v14 >= v16) {
        BOOL v17 = 0;
      }
      *(unsigned char *)a3 = v17;
      uint64_t v18 = *(void *)(a3 + 32);
      uint64_t v19 = (v15 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v20 = *(void *)(v18 + v19);
      BOOL v21 = (v20 & (1 << v15)) != 0;
      uint64_t v22 = v20 & ~(1 << v15);
      uint64_t v23 = v20 | (1 << v15);
      if (v21 && v14 < v16) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = v22;
      }
      *(void *)(v18 + v19) = v24;
      uint64_t v25 = *(void *)(a3 + 56);
      int v30 = 0;
      uint64_t v26 = v32;
      uint64_t v27 = ik::ArrayView<float,-1>::IndexOf<int,int>((uint64_t)&v31, &v30, (int *)__p);
      float v28 = *(float *)(v25 + 4 * v15);
      if (v28 < *(float *)(v26 + 4 * v27)) {
        float v28 = *(float *)(v26 + 4 * v27);
      }
      unint64_t v29 = SLODWORD(__p[0]);
      *(float *)(*(void *)(a3 + 56) + 4 * SLODWORD(__p[0])) = v28;
      LODWORD(__p[0]) = ++v29;
    }
    while (*(void *)(*((void *)v8 + 7) + 8) > v29);
  }
  int v31 = &unk_270973330;
  if (v33)
  {
    size_t v34 = v33;
    operator delete(v33);
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)v35);
  std::mutex::unlock(v6);
}

void sub_25BF5B1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (*v24) {
    operator delete(*v24);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)&a17);
  std::mutex::unlock(v23);
  _Unwind_Resume(a1);
}

void scml::ClipEmbeddingClassifier::PredictResult::~PredictResult(scml::ClipEmbeddingClassifier::PredictResult *this)
{
  id v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 4);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

uint64_t scml::ClipEmbeddingClassifier::name(scml::ClipEmbeddingClassifier *this)
{
  return *(void *)this + 240;
}

uint64_t scml::ClipEmbeddingClassifier::embeddingVersion(scml::ClipEmbeddingClassifier *this)
{
  return *(void *)(*(void *)this + 264);
}

void scml::ClipEmbeddingClassifier::defaultASMConfigPath(void *a1@<X8>)
{
}

void scml::anonymous namespace'::configPathForModel(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v13 = [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  unint64_t v6 = [v13 resourceURL];
  int v7 = [v6 path];

  uint64_t v8 = scml::strToNSString(a1, a2);
  uint64_t v9 = [v8 stringByAppendingString:@".config.json"];
  int v10 = [v7 stringByAppendingPathComponent:@"Models"];
  unint64_t v11 = [v10 stringByAppendingPathComponent:v8];
  unint64_t v12 = [v11 stringByAppendingPathComponent:v9];
  scml::strFromNSString(v12, a3);
}

void sub_25BF5B420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25BF5B46C()
{
}

void sub_25BF5B474()
{
  JUMPOUT(0x25BF5B45CLL);
}

void sub_25BF5B480()
{
}

void scml::ClipEmbeddingClassifier::defaultStructuralIntegrityConfigPath(void *a1@<X8>)
{
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    unint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<int,std::string>>,std::variant<int,std::string> const*,std::variant<int,std::string> const*,std::variant<int,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_25BF5B580(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<int,std::string>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_25BF5B5D8(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<int,std::string>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_270974218[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_270974228 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJiSD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJiSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJiSD_EEERKSV_EEEDcSN_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_270974218[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void std::vector<std::variant<int,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v4 - 32);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<scml::TensorSpec>,scml::TensorSpec const*,scml::TensorSpec const*,scml::TensorSpec*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<scml::TensorSpec,scml::TensorSpec const&,scml::TensorSpec*>((std::string *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_25BF5B80C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 56;
    do
    {
      std::__destroy_at[abi:ne180100]<scml::TensorSpec,0>(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<scml::TensorSpec,scml::TensorSpec const&,scml::TensorSpec*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::variant<int,std::string>>::__init_with_size[abi:ne180100]<std::variant<int,std::string>*,std::variant<int,std::string>*>(this[1].__r_.__value_.__r.__words, *((void *)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 5);
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 12);
  return this;
}

void sub_25BF5B8A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::variant<int,std::string>>::__init_with_size[abi:ne180100]<std::variant<int,std::string>*,std::variant<int,std::string>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<int,std::string>>,std::variant<int,std::string>*,std::variant<int,std::string>*,std::variant<int,std::string>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_25BF5B928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::variant<int,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<int,std::string>>,std::variant<int,std::string>*,std::variant<int,std::string>*,std::variant<int,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_25BF5B9A8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<scml::TensorSpec,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::variant<int,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::vector<scml::TensorSpec>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<scml::TensorSpec,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C1F8], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ik::core::GenericTensorsFromE5Tensors(std::unordered_map<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>> const&)::{lambda(ik::Tensor const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ik::E5BufferTensor,ik::PixelBufferTensor> const&>(uint64_t **a1, uint64_t a2)
{
  long long v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v10 = (unsigned __int8 *)v3[1];
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v10, (uint64_t)&std::piecewise_construct, (long long **)&v10);
  char v6 = v5;
  *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 8);
  if (v5 + 40 != (unsigned __int8 *)a2) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v5 + 56, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 11);
  *((void *)v6 + 1std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = v8;
  *((void *)v6 + 11) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

{
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unsigned __int8 *v10;

  long long v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v10 = (unsigned __int8 *)v3[1];
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v10, (uint64_t)&std::piecewise_construct, (long long **)&v10);
  char v6 = v5;
  *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 8);
  if (v5 + 40 != (unsigned __int8 *)a2) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v5 + 56, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 11);
  *((void *)v6 + 1std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = v8;
  *((void *)v6 + 11) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ik::core::GenericTensorsFromE5Tensors(std::unordered_map<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>> const&)::{lambda(ik::Tensor const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ik::E5BufferTensor,ik::PixelBufferTensor> const&>(uint64_t **a1, uint64_t a2)
{
  long long v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v10 = (unsigned __int8 *)v3[1];
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v10, (uint64_t)&std::piecewise_construct, (long long **)&v10);
  char v6 = v5;
  *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 8);
  if (v5 + 40 != (unsigned __int8 *)a2) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v5 + 56, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 11);
  *((void *)v6 + 1std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = v8;
  *((void *)v6 + 11) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

{
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unsigned __int8 *v10;

  long long v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v10 = (unsigned __int8 *)v3[1];
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v10, (uint64_t)&std::piecewise_construct, (long long **)&v10);
  char v6 = v5;
  *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 8);
  if (v5 + 40 != (unsigned __int8 *)a2) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v5 + 56, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 11);
  *((void *)v6 + 1std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = v8;
  *((void *)v6 + 11) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    id v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  float v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  float v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void ik::core::E5OpImpl::CreateInputTensors(E5RT::ExecutionStreamOperation **this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (int i = *(unsigned __int8 **)(E5RT::ExecutionStreamOperation::GetInputPorts(*this) + 16); i; int i = *(unsigned __int8 **)i)
  {
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*((E5RT::IOPort **)i + 5));
    if (E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef))
    {
      ik::core::CreateBufferTensor(*((ik::core **)i + 5), v13);
      SurfaceWidth = (E5RT::OperandDescriptor *)(i + 16);
      uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, i + 16, (uint64_t)&std::piecewise_construct, (long long **)&SurfaceWidth);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__assign_alt[abi:ne180100]<0ul,ik::E5BufferTensor,ik::E5BufferTensor>((ik::Tensor *)(v5 + 40), (uint64_t)(v5 + 40), (ik::Tensor *)v13);
    }
    else
    {
      if (!E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unknown input port type.");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      E5RT::IOPort::GetPortDescriptor((uint64_t *)&SurfaceWidth, *((E5RT::IOPort **)i + 5));
      char v6 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor(SurfaceWidth);
      if (SurfaceHeight) {
        std::__shared_weak_count::__release_shared[abi:ne180100](SurfaceHeight);
      }
      SurfaceWidth = (E5RT::OperandDescriptor *)E5RT::SurfaceDescriptor::GetSurfaceWidth(v6);
      SurfaceHeight = (std::__shared_weak_count *)E5RT::SurfaceDescriptor::GetSurfaceHeight(v6);
      unsigned int SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(v6);
      unsigned int v8 = SurfaceFormat;
      if (SurfaceFormat >= 0x20 || ((0x80017FFF >> SurfaceFormat) & 1) == 0)
      {
        uint64_t v10 = __cxa_allocate_exception(0x10uLL);
        std::to_string(&v20, v8);
        __n128 v11 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unsupported SurfaceFormat: ", &v20, &v21);
        MEMORY[0x26117A7E0](v10, &v21, v11);
        __cxa_throw(v10, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      int v16 = *(_DWORD *)&aF024800largbab[4 * SurfaceFormat];
      char v17 = 1;
      char v18 = 0;
      char v19 = 0;
      ik::PixelBufferTensor::PixelBufferTensor((ik::PixelBufferTensor *)v13, (uint64_t)&SurfaceWidth);
      SurfaceWidth = (E5RT::OperandDescriptor *)(i + 16);
      uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, i + 16, (uint64_t)&std::piecewise_construct, (long long **)&SurfaceWidth);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__assign_alt[abi:ne180100]<1ul,ik::PixelBufferTensor,ik::PixelBufferTensor>((ik::Tensor *)(v9 + 40), (uint64_t)(v9 + 40), (ik::Tensor *)v13);
    }
    ik::Tensor::~Tensor((ik::Tensor *)v13);
  }
}

void sub_25BF5BF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::~__hash_table(v26);
  _Unwind_Resume(a1);
}

void ik::core::CreateBufferTensor(ik::core *this@<X0>, void *a2@<X8>)
{
  E5RT::IOPort::GetPortDescriptor((uint64_t *)&__p, this);
  uint64_t v4 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  E5RT::TensorDescriptor::GetTensorDataType(v13, v4);
  int ComponentSize = E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType *)v13);
  int ComponentDataType = E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v13);
  if (ComponentDataType == 4)
  {
    if (ComponentSize == 2)
    {
      unsigned int v7 = 3;
    }
    else
    {
      if (ComponentSize != 4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported component size for float.");
        goto LABEL_23;
      }
      unsigned int v7 = 4;
    }
  }
  else
  {
    if (ComponentDataType != 1)
    {
      if (ComponentDataType)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported e5rt component type.");
      }
      else
      {
        if (ComponentSize == 1)
        {
          unsigned int v7 = 0;
          goto LABEL_16;
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported component size for uint.");
      }
LABEL_23:
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if (ComponentSize == 2)
    {
      unsigned int v7 = 1;
    }
    else
    {
      if (ComponentSize != 4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported component size for int.");
        goto LABEL_23;
      }
      unsigned int v7 = 2;
    }
  }
LABEL_16:
  unsigned int v14 = v7;
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(v4);
  std::__fs::filesystem::path __p = 0;
  __n128 v11 = 0;
  uint64_t v12 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)TensorShape, *(void *)(TensorShape + 8), (uint64_t)(*(void *)(TensorShape + 8) - *(void *)TensorShape) >> 3);
  ik::E5BufferTensor::E5BufferTensor(a2, &v14, (int **)&__p);
  if (__p)
  {
    __n128 v11 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v13);
}

void sub_25BF5C1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  __cxa_free_exception(v12);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a12);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    __n128 result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25BF5C2BC(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *ik::E5BufferTensor::E5BufferTensor(void *a1, unsigned int *a2, int **a3)
{
  uint64_t v7 = 0;
  std::allocate_shared[abi:ne180100]<ik::core::E5BufferStorage,std::allocator<ik::core::E5BufferStorage>,decltype(nullptr),ik::DataType const&,ik::TensorShape const&,void>((uint64_t)&v7, a2, a3, &v8);
  long long v9 = v8;
  long long v8 = 0uLL;
  ik::Tensor::Tensor((uint64_t)a1, &v9, a2, (uint64_t)a3);
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  *a1 = &unk_270973188;
  return a1;
}

void sub_25BF5C384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ik::Tensor::Tensor(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4)
{
  *(void *)a1 = &unk_270973310;
  *(_DWORD *)(a1 + 8) = *a3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 16), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  uint64_t v6 = a2[1];
  *(void *)(a1 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = *a2;
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void ik::E5BufferTensor::~E5BufferTensor(ik::E5BufferTensor *this)
{
  ik::Tensor::~Tensor(this);

  JUMPOUT(0x26117ABD0);
}

void *std::allocate_shared[abi:ne180100]<ik::core::E5BufferStorage,std::allocator<ik::core::E5BufferStorage>,decltype(nullptr),ik::DataType const&,ik::TensorShape const&,void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, int **a3@<X3>, void *a4@<X8>)
{
  long long v8 = operator new(0x48uLL);
  __n128 result = std::__shared_ptr_emplace<ik::core::E5BufferStorage>::__shared_ptr_emplace[abi:ne180100]<decltype(nullptr),ik::DataType const&,ik::TensorShape const&,std::allocator<ik::core::E5BufferStorage>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_25BF5C4BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ik::core::E5BufferStorage>::__shared_ptr_emplace[abi:ne180100]<decltype(nullptr),ik::DataType const&,ik::TensorShape const&,std::allocator<ik::core::E5BufferStorage>,0>(void *a1, uint64_t a2, unsigned int *a3, int **a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270973F48;
  std::construct_at[abi:ne180100]<ik::core::E5BufferStorage,decltype(nullptr),ik::DataType const&,ik::TensorShape const&,ik::core::E5BufferStorage*>(a1 + 3, a2, a3, a4);
  return a1;
}

void sub_25BF5C518(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ik::core::E5BufferStorage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270973F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ik::core::E5BufferStorage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270973F48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x26117ABD0);
}

void std::__shared_ptr_emplace<ik::core::E5BufferStorage>::__on_zero_shared(uint64_t a1)
{
}

void *std::construct_at[abi:ne180100]<ik::core::E5BufferStorage,decltype(nullptr),ik::DataType const&,ik::TensorShape const&,ik::core::E5BufferStorage*>(void *a1, uint64_t a2, unsigned int *a3, int **a4)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  ik::core::E5BufferStorage::E5BufferStorage(a1, &v6, a3, a4);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return a1;
}

void sub_25BF5C5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *ik::core::E5BufferStorage::E5BufferStorage(void *a1, void *a2, unsigned int *a3, int **a4)
{
  *a1 = &unk_270973270;
  if (*a2)
  {
    uint64_t v7 = a2[1];
    a1[1] = *a2;
    a1[2] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (*a3 >= 5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unknown data type");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    long long v8 = *a4;
    long long v9 = a4[1];
    if (*a4 != v9)
    {
      int v10 = 1;
      do
      {
        int v11 = *v8;
        v8 += 2;
        v10 *= v11;
      }
      while (v8 != v9);
    }
    E5RT::BufferObject::AllocMemory();
    a1[1] = v23;
    if (v23) {
      operator new();
    }
    a1[2] = 0;
  }
  uint64_t v12 = (int)*a3;
  if (v12 >= 5)
  {
    std::string v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Unknown data type");
    __cxa_throw(v21, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v13 = qword_25BFF4198[v12];
  uint64_t v14 = (char *)a4[1] - (char *)*a4;
  unint64_t v15 = std::vector<unsigned long>::vector(a1 + 3, v14 >> 3);
  if (v14 >= 1)
  {
    uint64_t v16 = *v15;
    char v17 = *a4;
    uint64_t v18 = (v14 >> 3) - 1;
    do
    {
      *(void *)(v16 + 8 * v18) = v13;
      v13 *= *(void *)&v17[2 * v18];
      uint64_t v19 = v18-- + 1;
    }
    while (v19 > 1);
  }
  return a1;
}

void sub_25BF5C804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void ik::core::E5BufferStorage::~E5BufferStorage(ik::core::E5BufferStorage *this)
{
  ik::core::E5BufferStorage::~E5BufferStorage(this);

  JUMPOUT(0x26117ABD0);
}

{
  void *v2;
  std::__shared_weak_count *v3;

  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t ik::core::E5BufferStorage::Bind(int a1, void *lpsrc)
{
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    _ZN2ik14InferenceErrorCI1St13runtime_errorEPKc(exception, "This tensor type can only be used with E5RT.");
  }
  long long v3 = *(uint64_t (**)(void))(*(void *)v2 + 40);

  return v3();
}

void sub_25BF5C970(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ik::core::E5BufferStorage::Data(ik::core::E5BufferStorage *this)
{
  return MEMORY[0x270F27810](*((void *)this + 1));
}

void *ik::core::E5BufferStorage::Strides@<X0>(ik::core::E5BufferStorage *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *((const void **)this + 3), *((void *)this + 4), (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3);
}

void ik::TensorStorage::CopyData(ik::TensorStorage *this)
{
  (*(void (**)(ik::TensorStorage *))(*(void *)this + 24))(this);
  (*(void (**)(void **__return_ptr, ik::TensorStorage *))(*(void *)this + 32))(&__p, this);
  ik::StridedArray::StridedArray();
}

void sub_25BF5CA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<E5RT::BufferObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x26117ABD0);
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_25BF5CB80(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *_ZN2ik14InferenceErrorCI1St13runtime_errorEPKc(std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_2709731A8;
  return result;
}

void ik::InferenceError::~InferenceError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x26117ABD0);
}

void ik::StridedArray::StridedArray()
{
}

void sub_25BF5CCD4(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<unsigned char []>::shared_ptr[abi:ne180100]<unsigned char,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_25BF5CD54(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x26117ABD0](v1, 0x1000C4077774924);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x26117ABD0);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x26117ABA0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ik::Tensor::~Tensor(ik::Tensor *this)
{
  ik::Tensor::~Tensor(this);

  JUMPOUT(0x26117ABD0);
}

{
  std::__shared_weak_count *v2;
  void *v3;

  *(void *)this = &unk_270973310;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (int i = *v14; i; int i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  int i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_25BF5D138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  long long v8 = (char *)operator new(0x68uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)long long v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25BF5D1A8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  ik::Tensor::Tensor((ik::Tensor *)&this[1]);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_270973188;
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = 0;
  return this;
}

void sub_25BF5D238(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

ik::Tensor *ik::Tensor::Tensor(ik::Tensor *this)
{
  uint64_t v7 = 0;
  long long v8 = 0;
  int v6 = 4;
  std::__fs::filesystem::path __p = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, 0, 0, 0);
  ik::Tensor::Tensor((uint64_t)this, &v7, &v6, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v4 = __p;
    operator delete(__p);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return this;
}

{
  void *__p;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  uint64_t v7 = 0;
  long long v8 = 0;
  int v6 = 4;
  std::__fs::filesystem::path __p = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, 0, 0, 0);
  ik::Tensor::Tensor((uint64_t)this, &v7, &v6, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v4 = __p;
    operator delete(__p);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return this;
}

void sub_25BF5D2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,0>(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

unsigned int *std::__variant_detail::__dtor<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>,(std::__variant_detail::_Trait)1>::~__dtor(unsigned int *a1)
{
  uint64_t v2 = a1[14];
  if (v2 != -1) {
    off_270974248[v2]((int)&v4, (ik::Tensor *)a1);
  }
  a1[14] = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2ik14E5BufferTensorENS8_17PixelBufferTensorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, ik::Tensor *this)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2ik14E5BufferTensorENS8_17PixelBufferTensorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, ik::Tensor *this)
{
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__assign_alt[abi:ne180100]<0ul,ik::E5BufferTensor,ik::E5BufferTensor>(ik::Tensor *a1, uint64_t a2, ik::Tensor *a3)
{
  if (*((_DWORD *)a1 + 14))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__emplace[abi:ne180100]<0ul,ik::E5BufferTensor>(a1, a3);
  }
  else
  {
    *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
    if ((ik::Tensor *)a2 != a3) {
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)(a2 + 16), *((char **)a3 + 2), *((void *)a3 + 3), (uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 3);
    }
    uint64_t v6 = *((void *)a3 + 5);
    uint64_t v5 = *((void *)a3 + 6);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(a2 + 48);
    *(void *)(a2 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = v6;
    *(void *)(a2 + 48) = v5;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

ik::Tensor *std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__emplace[abi:ne180100]<0ul,ik::E5BufferTensor>(ik::Tensor *this, ik::Tensor *a2)
{
  uint64_t v4 = *((unsigned int *)this + 14);
  if (v4 != -1) {
    off_270974248[v4]((int)&v6, this);
  }
  *((_DWORD *)this + 14) = -1;
  uint64_t result = ik::Tensor::Tensor(this, a2);
  *(void *)this = &unk_270973188;
  *((_DWORD *)this + 14) = 0;
  return result;
}

ik::Tensor *ik::Tensor::Tensor(ik::Tensor *this, const ik::Tensor *a2)
{
  *(void *)this = &unk_270973310;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 2, *((const void **)a2 + 2), *((void *)a2 + 3), (uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3);
  uint64_t v4 = *((void *)a2 + 6);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)this + 6) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

ik::PixelBufferTensor *ik::PixelBufferTensor::PixelBufferTensor(ik::PixelBufferTensor *a1, uint64_t a2)
{
  if (!*(void *)a2 || !*(void *)(a2 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid dimensions requested for CVPixelBuffer creation.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (*(unsigned char *)(a2 + 20))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    char v6 = (const void *)*MEMORY[0x263F04130];
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    CFDictionarySetValue(theDict, v6, Mutable);
    ik::Dict::~Dict((const void **)&v14.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a2 + 32)) {
    ik::Dict::Set<unsigned long>(&theDict, (const void *)*MEMORY[0x263F04078], (const void *)(a2 + 24), kCFNumberSInt64Type);
  }
  CVReturn v7 = CVPixelBufferCreate(v4, *(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16), theDict, &pixelBufferOut);
  if (v7)
  {
    unint64_t v11 = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v13, v7);
    __n128 v12 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Failed to create CVPixelBuffer. Status = ", &v13, &v14);
    MEMORY[0x26117A7E0](v11, &v14, v12);
    __cxa_throw(v11, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  long long v8 = pixelBufferOut;
  ik::Dict::~Dict((const void **)&theDict);
  ik::PixelBufferTensor::PixelBufferTensor(a1, v8);
  CVPixelBufferRelease(*(CVPixelBufferRef *)(*((void *)a1 + 5) + 8));
  return a1;
}

void sub_25BF5D794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,const void *a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      ik::Dict::~Dict(&a21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2654A8D58, MEMORY[0x263F8C068]);
}

void sub_25BF5D884(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void ik::Dict::Set<unsigned long>(CFMutableDictionaryRef *a1, const void *a2, const void *a3, CFNumberType theType)
{
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], theType, a3);
  CFDictionarySetValue(*a1, a2, v6);

  CFRelease(v6);
}

void ik::Dict::~Dict(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

ik::PixelBufferTensor *ik::PixelBufferTensor::PixelBufferTensor(ik::PixelBufferTensor *this, __CVBuffer *a2)
{
  CVPixelBufferRef v16 = a2;
  std::allocate_shared[abi:ne180100]<ik::core::PixelBufferStorage,std::allocator<ik::core::PixelBufferStorage>,__CVBuffer *&,void>(&v16, &v12);
  uint64_t v14 = v12;
  unint64_t v15 = v13;
  uint64_t v12 = 0;
  std::string v13 = 0;
  int v11 = ik::core::DataTypeFromPixelBuffer(v16, v3);
  CFAllocatorRef v4 = v16;
  size_t Height = CVPixelBufferGetHeight(v16);
  size_t Width = CVPixelBufferGetWidth(v4);
  uint64_t v8 = ik::core::ChannelCountFromPixelBuffer(v4, v7);
  ik::TensorShape::TensorShape<unsigned long,unsigned long,unsigned long>(__p, Height, Width, v8);
  ik::Tensor::Tensor((uint64_t)this, &v14, &v11, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *(void *)this = &unk_270973210;
  return this;
}

void sub_25BF5DA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ik::core::DataTypeFromPixelBuffer(ik::core *this, __CVBuffer *a2)
{
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  uint64_t v3 = 0;
  if (PixelFormatType > 1278226533)
  {
    if (PixelFormatType > 1717855599)
    {
      if (PixelFormatType != 1717856627 && PixelFormatType != 1717855600)
      {
LABEL_16:
        unsigned int v6 = PixelFormatType;
        exception = __cxa_allocate_exception(0x10uLL);
        std::to_string(&v9, v6);
        __n128 v8 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unsupported CVPixelBuffer type: ", &v9, &v10);
        MEMORY[0x26117A7E0](exception, &v10, v8);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
    }
    else if (PixelFormatType != 1278226534)
    {
      int v4 = 1380401729;
      goto LABEL_10;
    }
    return 4;
  }
  if (PixelFormatType > 1111970368)
  {
    if (PixelFormatType == 1111970369) {
      return v3;
    }
    int v4 = 1278226488;
  }
  else
  {
    if (PixelFormatType == 32) {
      return v3;
    }
    int v4 = 1094862674;
  }
LABEL_10:
  if (PixelFormatType != v4) {
    goto LABEL_16;
  }
  return v3;
}

void sub_25BF5DBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void ik::PixelBufferTensor::~PixelBufferTensor(ik::PixelBufferTensor *this)
{
  ik::Tensor::~Tensor(this);

  JUMPOUT(0x26117ABD0);
}

void *std::allocate_shared[abi:ne180100]<ik::core::PixelBufferStorage,std::allocator<ik::core::PixelBufferStorage>,__CVBuffer *&,void>@<X0>(CVPixelBufferRef *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x28uLL);
  uint64_t result = std::__shared_ptr_emplace<ik::core::PixelBufferStorage>::__shared_ptr_emplace[abi:ne180100]<__CVBuffer *&,std::allocator<ik::core::PixelBufferStorage>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_25BF5DCC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ik::core::PixelBufferStorage>::__shared_ptr_emplace[abi:ne180100]<__CVBuffer *&,std::allocator<ik::core::PixelBufferStorage>,0>(void *a1, CVPixelBufferRef *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270973F80;
  ik::core::PixelBufferStorage::PixelBufferStorage((ik::core::PixelBufferStorage *)(a1 + 3), *a2);
  return a1;
}

void sub_25BF5DD28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ik::core::PixelBufferStorage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270973F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ik::core::PixelBufferStorage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270973F80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x26117ABD0);
}

void std::__shared_ptr_emplace<ik::core::PixelBufferStorage>::__on_zero_shared(uint64_t a1)
{
}

ik::core::PixelBufferStorage *ik::core::PixelBufferStorage::PixelBufferStorage(ik::core::PixelBufferStorage *this, CVPixelBufferRef texture)
{
  *(void *)this = &unk_2709732B0;
  *((void *)this + 1) = texture;
  if (!texture)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Null CVPixelBuffer encountered.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  CVPixelBufferRetain(texture);
  return this;
}

void sub_25BF5DE58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ik::core::PixelBufferStorage::~PixelBufferStorage(CVPixelBufferRef *this)
{
}

{
  uint64_t vars8;

  CVPixelBufferRelease(this[1]);

  JUMPOUT(0x26117ABD0);
}

uint64_t ik::core::PixelBufferStorage::Bind(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(a1 + 8));
}

void *ik::core::PixelBufferStorage::Data(CVPixelBufferRef *this)
{
  BaseAddress = CVPixelBufferGetBaseAddress(this[1]);
  if (!BaseAddress)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get CVPixelBuffer's data. Ensure the buffer was locked.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = BaseAddress;
  CVPixelBufferGetDataSize(this[1]);
  return v3;
}

void sub_25BF5DF94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *ik::core::PixelBufferStorage::Strides@<X0>(ik::core **this@<X0>, __CVBuffer *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = qword_25BFF4198[ik::core::DataTypeFromPixelBuffer(this[1], a2)];
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this[1]);
  uint64_t v8 = ik::core::ChannelCountFromPixelBuffer(this[1], v7);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = operator new(0x18uLL);
  a3[1] = result + 3;
  a3[2] = result + 3;
  void *result = BytesPerRow;
  result[1] = v8 * v5;
  result[2] = v5;
  *a3 = result;
  return result;
}

void ik::core::PixelBufferStorage::CopyData(CVPixelBufferRef *this)
{
  ik::core::CorePixelBufferScopeLock::CorePixelBufferScopeLock((ik::core::CorePixelBufferScopeLock *)v2, this[1], 1uLL);
  ik::TensorStorage::CopyData((ik::TensorStorage *)this);
}

void sub_25BF5E078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ik::core::CorePixelBufferScopeLock::~CorePixelBufferScopeLock((ik::core::CorePixelBufferScopeLock *)va);
  _Unwind_Resume(a1);
}

uint64_t ik::core::ChannelCountFromPixelBuffer(ik::core *this, __CVBuffer *a2)
{
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  uint64_t v3 = 4;
  if (PixelFormatType > 1278226533)
  {
    if (PixelFormatType > 1717855599)
    {
      if (PixelFormatType != 1717856627)
      {
        int v5 = 1717855600;
LABEL_14:
        if (PixelFormatType != v5) {
          goto LABEL_17;
        }
      }
    }
    else if (PixelFormatType != 1278226534)
    {
      int v4 = 1380401729;
      goto LABEL_8;
    }
    return 1;
  }
  if (PixelFormatType > 1111970368)
  {
    if (PixelFormatType == 1111970369) {
      return v3;
    }
    int v5 = 1278226488;
    goto LABEL_14;
  }
  if (PixelFormatType == 32) {
    return v3;
  }
  int v4 = 1094862674;
LABEL_8:
  if (PixelFormatType != v4)
  {
LABEL_17:
    unsigned int v7 = PixelFormatType;
    exception = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v10, v7);
    __n128 v9 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unsupported CVPixelBuffer type: ", &v10, &v11);
    MEMORY[0x26117A7E0](exception, &v11, v9);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return v3;
}

void sub_25BF5E1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

ik::core::CorePixelBufferScopeLock *ik::core::CorePixelBufferScopeLock::CorePixelBufferScopeLock(ik::core::CorePixelBufferScopeLock *this, CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  *(void *)this = &unk_2709732F0;
  *((void *)this + 1) = pixelBuffer;
  *((void *)this + 2) = lockFlags;
  if (CVPixelBufferLockBaseAddress(pixelBuffer, lockFlags))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to lock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return this;
}

void sub_25BF5E2C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ik::core::CorePixelBufferScopeLock::~CorePixelBufferScopeLock(ik::core::CorePixelBufferScopeLock *this)
{
  ik::core::CorePixelBufferScopeLock::~CorePixelBufferScopeLock(this);

  JUMPOUT(0x26117ABD0);
}

{
  std::runtime_error *exception;

  *(void *)this = &unk_2709732F0;
  if (CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 1), *((void *)this + 2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
}

void sub_25BF5E324(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10A1C40AFD1EA57);
  _Unwind_Resume(a1);
}

void sub_25BF5E3D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *ik::TensorShape::TensorShape<unsigned long,unsigned long,unsigned long>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v8 = (char **)(a1 + 2);
  __n128 v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), 1uLL);
  std::string v10 = (char *)*a1;
  std::string v11 = (char *)a1[1];
  std::string v13 = (char *)&v9[v12];
  *__n128 v9 = a2;
  uint64_t v14 = (char *)(v9 + 1);
  unint64_t v15 = v9;
  while (v11 != v10)
  {
    uint64_t v16 = *((void *)v11 - 1);
    v11 -= 8;
    *--unint64_t v15 = v16;
  }
  *a1 = v15;
  a1[1] = v14;
  a1[2] = v13;
  if (v10)
  {
    operator delete(v10);
    std::string v13 = *v8;
  }
  a1[1] = v14;
  if (v14 >= v13)
  {
    float v18 = (char *)*a1;
    uint64_t v19 = (uint64_t)&v14[-*a1] >> 3;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61) {
      goto LABEL_39;
    }
    uint64_t v21 = v13 - v18;
    if (v21 >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v8, v22);
      float v18 = (char *)*a1;
      uint64_t v14 = (char *)a1[1];
    }
    else
    {
      uint64_t v23 = 0;
    }
    unint64_t v24 = &v23[8 * v19];
    std::string v13 = &v23[8 * v22];
    *(void *)unint64_t v24 = a3;
    float v17 = v24 + 8;
    while (v14 != v18)
    {
      uint64_t v25 = *((void *)v14 - 1);
      v14 -= 8;
      *((void *)v24 - 1) = v25;
      v24 -= 8;
    }
    *a1 = v24;
    a1[1] = v17;
    a1[2] = v13;
    if (v18)
    {
      operator delete(v18);
      std::string v13 = *v8;
    }
  }
  else
  {
    v9[1] = a3;
    float v17 = (char *)(v9 + 2);
  }
  a1[1] = v17;
  if (v17 < v13)
  {
    *(void *)float v17 = a4;
    uint64_t v26 = v17 + 8;
    goto LABEL_38;
  }
  uint64_t v27 = (char *)*a1;
  uint64_t v28 = (uint64_t)&v17[-*a1] >> 3;
  unint64_t v29 = v28 + 1;
  if ((unint64_t)(v28 + 1) >> 61) {
LABEL_39:
  }
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  uint64_t v30 = v13 - v27;
  if (v30 >> 2 > v29) {
    unint64_t v29 = v30 >> 2;
  }
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v31 = v29;
  }
  if (v31)
  {
    uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v8, v31);
    uint64_t v27 = (char *)*a1;
    float v17 = (char *)a1[1];
  }
  else
  {
    uint64_t v32 = 0;
  }
  long long v33 = &v32[8 * v28];
  size_t v34 = &v32[8 * v31];
  *(void *)long long v33 = a4;
  uint64_t v26 = v33 + 8;
  while (v17 != v27)
  {
    uint64_t v35 = *((void *)v17 - 1);
    v17 -= 8;
    *((void *)v33 - 1) = v35;
    v33 -= 8;
  }
  *a1 = v33;
  a1[1] = v26;
  a1[2] = v34;
  if (v27) {
    operator delete(v27);
  }
LABEL_38:
  a1[1] = v26;
  return a1;
}

void sub_25BF5E5D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__assign_alt[abi:ne180100]<1ul,ik::PixelBufferTensor,ik::PixelBufferTensor>(ik::Tensor *a1, uint64_t a2, ik::Tensor *a3)
{
  if (*((_DWORD *)a1 + 14) == 1)
  {
    *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
    if ((ik::Tensor *)a2 != a3) {
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)(a2 + 16), *((char **)a3 + 2), *((void *)a3 + 3), (uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 3);
    }
    uint64_t v6 = *((void *)a3 + 5);
    uint64_t v5 = *((void *)a3 + 6);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v7 = *(std::__shared_weak_count **)(a2 + 48);
    *(void *)(a2 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = v6;
    *(void *)(a2 + 48) = v5;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__emplace[abi:ne180100]<1ul,ik::PixelBufferTensor>(a1, a3);
  }
}

ik::Tensor *std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__emplace[abi:ne180100]<1ul,ik::PixelBufferTensor>(ik::Tensor *this, ik::Tensor *a2)
{
  uint64_t v4 = *((unsigned int *)this + 14);
  if (v4 != -1) {
    off_270974248[v4]((int)&v6, this);
  }
  *((_DWORD *)this + 14) = -1;
  uint64_t result = ik::Tensor::Tensor(this, a2);
  *(void *)this = &unk_270973210;
  *((_DWORD *)this + 14) = 1;
  return result;
}

uint64_t ik::core::E5OpImpl::Bind<ik::Tensor>(E5RT::ExecutionStreamOperation **a1, void *a2, void *a3)
{
  uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(*a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v51, InputPorts);
  for (int i = v52; i; int i = *(unsigned __int8 **)i)
  {
    uint64_t v9 = *((void *)i + 5);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)i + 6);
    long long v43 = (E5RT::ExecutionStreamOperation *)&unk_270973230;
    uint64_t v44 = v9;
    std::string v45 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v10 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(a2, i + 16);
    if (!v10) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    (*(void (**)(void, E5RT::ExecutionStreamOperation **))(**((void **)v10 + 10) + 16))(*((void *)v10 + 10), &v43);
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
  }
  uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(*a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v49, OutputPorts);
  uint64_t v35 = a1;
  uint64_t v12 = (uint64_t)(a1 + 3);
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::clear((uint64_t)(a1 + 3));
  for (unint64_t j = v50; j; unint64_t j = *(unsigned __int8 **)j)
  {
    ik::Tensor::Tensor((ik::Tensor *)&v43);
    long long v43 = (E5RT::ExecutionStreamOperation *)&unk_270973188;
    if (std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(a3, j + 16))
    {
      unint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(a3, j + 16);
      uint64_t v16 = v15;
      if (!v15) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      LODWORD(v44) = *((_DWORD *)v15 + 12);
      if (&v43 != (E5RT::ExecutionStreamOperation **)(v15 + 40)) {
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v45, *((char **)v15 + 7), *((void *)v15 + 8), (uint64_t)(*((void *)v15 + 8) - *((void *)v15 + 7)) >> 3);
      }
      uint64_t v18 = *((void *)v16 + 10);
      float v17 = (std::__shared_weak_count *)*((void *)v16 + 11);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = v48;
      uint64_t v47 = v18;
      long long v48 = v17;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
    }
    else
    {
      ik::core::CreateBufferTensor(*((ik::core **)j + 5), &v37);
      LODWORD(v44) = v38;
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v45, v39, v40, (v40 - (uint64_t)v39) >> 3);
      uint64_t v21 = v41;
      unint64_t v20 = v42;
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v22 = v48;
      uint64_t v47 = v21;
      long long v48 = v20;
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      ik::Tensor::~Tensor((ik::Tensor *)&v37);
    }
    uint64_t v24 = *((void *)j + 5);
    uint64_t v23 = *((void *)j + 6);
    long long v37 = &unk_270973230;
    uint64_t v38 = v24;
    char v39 = (char *)v23;
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v47 + 16))(v47, &v37);
    long long v53 = (long long *)(j + 16);
    uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, j + 16, (uint64_t)&std::piecewise_construct, &v53);
    uint64_t v26 = v25;
    *((_DWORD *)v25 + 12) = v44;
    if (v25 + 40 != (unsigned __int8 *)&v43) {
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v25 + 56, (char *)v45, v46, (v46 - (uint64_t)v45) >> 3);
    }
    uint64_t v28 = v47;
    uint64_t v27 = v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v29 = (std::__shared_weak_count *)*((void *)v26 + 11);
    *((void *)v26 + 1std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = v28;
    *((void *)v26 + 11) = v27;
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v39);
    }
    ik::Tensor::~Tensor((ik::Tensor *)&v43);
  }
  E5RT::ExecutionStream::CreateExecutionStream((uint64_t *)&v43, v13);
  uint64_t v30 = v43;
  long long v43 = 0;
  unint64_t v31 = v35[2];
  v35[2] = v30;
  if (v31)
  {
    (*(void (**)(E5RT::ExecutionStreamOperation *))(*(void *)v31 + 8))(v31);
    uint64_t v32 = v43;
    long long v43 = 0;
    if (v32) {
      (*(void (**)(E5RT::ExecutionStreamOperation *))(*(void *)v32 + 8))(v32);
    }
  }
  long long v33 = (std::__shared_weak_count *)v35[1];
  long long v36 = v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v49);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v51);
}

void sub_25BF5EB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a26);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v26 - 144);
  _Unwind_Resume(a1);
}

void ik::core::E5CoreBinder::~E5CoreBinder(ik::core::E5CoreBinder *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x26117ABD0);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (int i = *(unsigned __int8 **)(a2 + 16); i; int i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_25BF5EC28(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unsigned int v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    std::string v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (int i = *v13; i; int i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  int i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_25BF5EEAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25BF5EF24(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void ik::core::E5CoreBinder::Bind()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "E5RT does not support vImage_Bufer backed tensors.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "E5RT does not support espresso_buffer_t backed tensors.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_25BF5F168(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ik::core::E5CoreBinder::Bind(ik::core::E5CoreBinder *this, CVPixelBufferRef pixelBuffer)
{
  CVPixelBufferGetIOSurface(pixelBuffer);
  E5RT::SurfaceObject::CreateSurfaceFromHandle<__IOSurface *>();
  if (v3) {
    operator new();
  }
  E5RT::IOPort::BindMemoryObject();
  return 0;
}

void sub_25BF5F254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_25BF5F2EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ik::core::E5CoreBinder::Bind(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v3 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::IOPort::BindMemoryObject();
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_25BF5F354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x26117ABD0);
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ik::E5BufferTensor>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,ik::E5BufferTensor>,0>(uint64_t a1)
{
  ik::Tensor::~Tensor((ik::Tensor *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_25BF5F78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,ik::E5BufferTensor>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25BF5F7FC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ik::E5BufferTensor>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  ik::Tensor::Tensor((ik::Tensor *)&this[1]);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_270973188;
  return this;
}

void sub_25BF5F888(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ik::E5BufferTensor>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

BOOL std::string::ends_with[abi:ne180100](uint64_t *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    char v6 = a1;
    a1 = (uint64_t *)*a1;
    uint64_t v5 = v6[1];
  }
  else
  {
    uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  v8[0] = a1;
  v8[1] = v5;
  return std::string_view::ends_with[abi:ne180100](v8, __s, v4);
}

std::__fs::filesystem::path *std::__fs::filesystem::operator/[abi:ne180100]@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&a3->__pn_, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  return std::__fs::filesystem::path::operator/=[abi:ne180100](a3, this);
}

void sub_25BF5F9B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::parent_path[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

BOOL std::string_view::ends_with[abi:ne180100](void *a1, void *__s2, size_t a3)
{
  size_t v3 = a1[1];
  return v3 >= a3
      && std::string_view::compare[abi:ne180100](a1, v3 - a3, 0xFFFFFFFFFFFFFFFFLL, __s2, a3) == 0;
}

uint64_t std::string_view::compare[abi:ne180100](void *a1, unint64_t a2, size_t a3, void *__s2, size_t a5)
{
  unint64_t v5 = a1[1];
  BOOL v6 = v5 >= a2;
  size_t v7 = v5 - a2;
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  unint64_t v9 = (const void *)(*a1 + a2);
  if (v7 >= a3) {
    size_t v10 = a3;
  }
  else {
    size_t v10 = v7;
  }
  if (a5 >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = a5;
  }
  LODWORD(result) = memcmp(v9, __s2, v11);
  if (v10 < a5) {
    unsigned int v13 = -1;
  }
  else {
    unsigned int v13 = 1;
  }
  if (v10 == a5) {
    unsigned int v13 = 0;
  }
  if (result) {
    return result;
  }
  else {
    return v13;
  }
}

std::__fs::filesystem::path *std::__fs::filesystem::path::operator/=[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_) {
      std::string::push_back(&a1->__pn_, 47);
    }
    int v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0) {
      unint64_t v5 = this;
    }
    else {
      unint64_t v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    }
    if (v4 >= 0) {
      std::string::size_type size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__pn_.__r_.__value_.__l.__size_;
    }
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append[abi:ne180100]<char const*,0>(a1, *(char **)a2, (char *)(*(void *)a2 + *(void *)(a2 + 8)));
  return a1;
}

void sub_25BF5FBF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  int v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    size_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    size_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    uint64_t v14 = this;
    if ((v6 & 0x80) != 0) {
      uint64_t v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      *uint64_t i = v16;
    }
    *uint64_t i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint8x8_t v12 = __p;
    }
    else {
      uint8x8_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_25BF5FD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(void *result, char *a2, char *a3, unint64_t a4)
{
  int v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *int v4 = result;
    int v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)int v4 = v10;
    int v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)int v4 = 0;
  return result;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_25BF5FE8C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    char v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    char v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_25BF5FFA4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t ik::Tensor::Data<float>(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40));
}

void sub_25BF602B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *ik::ArrayView<float,-1>::ArrayView(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_270973330;
  a1[1] = a2;
  a1[2] = 0;
  unint64_t v4 = (void **)(a1 + 2);
  a1[3] = 0;
  a1[4] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  unint64_t v5 = (void *)a1[3];
  unint64_t v6 = *v4;
  BOOL v7 = v5 == *v4;
  a1[5] = v5 - *v4;
  if (!v7)
  {
    do
    {
      if ((*v6 & 3) != 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Inconsistent stride encountered.");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      *v6++ >>= 2;
    }
    while (v6 != v5);
  }
  return a1;
}

void sub_25BF603A0(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void ik::MutableArrayView<float,-1>::~MutableArrayView(void *a1)
{
  *a1 = &unk_270973330;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x26117ABD0);
}

void *ik::ArrayView<float,-1>::~ArrayView(void *a1)
{
  *a1 = &unk_270973330;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void ik::ArrayView<float,-1>::~ArrayView(void *a1)
{
  *a1 = &unk_270973330;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x26117ABD0);
}

uint64_t ik::core::E5OpImpl::Run@<X0>(ik::core::E5OpImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (E5RT::ExecutionStream *)*((void *)this + 2);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Run invoked before binding tensors.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  E5RT::ExecutionStream::ExecuteStreamSync(v3);

  return std::unordered_map<std::string,ik::E5BufferTensor>::unordered_map(a2, (uint64_t)this + 24);
}

void sub_25BF6057C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,ik::E5BufferTensor>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ik::E5BufferTensor> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_25BF605F0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ik::E5BufferTensor> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  BOOL v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__construct_node_hash<std::pair<std::string const,ik::E5BufferTensor> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_25BF60874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__construct_node_hash<std::pair<std::string const,ik::E5BufferTensor> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,ik::E5BufferTensor>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25BF608EC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ik::E5BufferTensor>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  ik::Tensor::Tensor((ik::Tensor *)&this[1], (const ik::Tensor *)((char *)a2 + 24));
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_270973188;
  return this;
}

void sub_25BF6097C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_25BF60A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint8x8_t v11 = this;
  unint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
      unint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_25BF60B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_25BF60E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,ik::Tensor>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25BF60EE4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ik::Tensor>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  ik::Tensor::Tensor((ik::Tensor *)&this[1]);
  return this;
}

void sub_25BF60F54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_25BF60FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      long long v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

ik::core::E5OpImpl ***std::unique_ptr<ik::E5Op>::reset[abi:ne180100](ik::core::E5OpImpl ***result, ik::core::E5OpImpl **a2)
{
  uint64_t v2 = *result;
  std::string *result = a2;
  if (v2)
  {
    std::unique_ptr<ik::core::E5OpImpl>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x26117ABD0);
  }
  return result;
}

ik::core::E5OpImpl *std::unique_ptr<ik::core::E5OpImpl>::reset[abi:ne180100](ik::core::E5OpImpl **a1, ik::core::E5OpImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    ik::core::E5OpImpl::~E5OpImpl(result);
    JUMPOUT(0x26117ABD0);
  }
  return result;
}

void ik::core::E5OpImpl::~E5OpImpl(ik::core::E5OpImpl *this)
{
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)this + 24);
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

uint64_t scml::scml_impl::strCat<char const(&)[27],std::string_view &,char const(&)[3],char const*>(void *a1, char *__s, uint64_t *a3, char *a4, const char **a5)
{
  size_t v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, *a3, a3[1]);

  return scml::scml_impl::strCat<char const(&)[3],char const*>(a1, a4, a5);
}

uint64_t scml::scml_impl::strCat<char const(&)[3],char const*>(void *a1, char *__s, const char **a3)
{
  size_t v6 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);

  return scml::scml_impl::strCat<char const*>(a1, a3);
}

uint64_t scml::scml_impl::strCat<char const*>(void *a1, const char **a2)
{
  long long v3 = *a2;
  size_t v4 = strlen(*a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);

  return scml::scml_impl::strCat<>(a1);
}

float scml::Config::as<float>(_DWORD *a1)
{
  int v1 = a1[10];
  if (v1 == 1) {
    return (float)*(uint64_t *)a1;
  }
  if (v1 != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error((uint64_t)a1, (uint64_t)"not a float", 11, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return *(double *)a1;
}

void sub_25BF61420(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t scml::scml_impl::strCat<char const(&)[16],unsigned long,char const(&)[12],unsigned long &>(void *a1, char *__s, uint64_t a3, char *a4)
{
  size_t v7 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v7);
  std::ostream::operator<<();

  return scml::scml_impl::strCat<char const(&)[12],unsigned long &>(a1, a4);
}

uint64_t scml::scml_impl::strCat<char const(&)[12],unsigned long &>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
  std::ostream::operator<<();

  return scml::scml_impl::strCat<>(a1);
}

uint64_t ik::ArrayView<float,-1>::IndexOf<int,unsigned long>(uint64_t a1, int *a2, void *a3)
{
  if (*(void *)(a1 + 40) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid number of indices provided.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return **(void **)(a1 + 16) * *a2 + *a3 * *(void *)(*(void *)(a1 + 16) + 8);
}

void sub_25BF61594(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

scml::ClipEmbeddingClassifier::Impl *std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](scml::ClipEmbeddingClassifier::Impl **a1, scml::ClipEmbeddingClassifier::Impl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    scml::ClipEmbeddingClassifier::Impl::~Impl(result);
    JUMPOUT(0x26117ABD0);
  }
  return result;
}

void scml::ClipEmbeddingClassifier::Impl::~Impl(scml::ClipEmbeddingClassifier::Impl *this)
{
  if (*((char *)this + 263) < 0) {
    operator delete(*((void **)this + 30));
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)this + 192);
  std::unique_ptr<ik::E5Op>::reset[abi:ne180100]((ik::core::E5OpImpl ***)this + 23, 0);
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  long long v3 = (void **)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::mutex::~mutex((std::mutex *)this);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  size_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t ik::ArrayView<float,-1>::IndexOf<int,int>(uint64_t a1, int *a2, int *a3)
{
  if (*(void *)(a1 + 40) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid number of indices provided.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return **(void **)(a1 + 16) * *a2 + *(void *)(*(void *)(a1 + 16) + 8) * *a3;
}

void sub_25BF61818(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_25BF632E0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  std::__split_buffer<std::pair<unsigned long,std::string>>::~__split_buffer((uint64_t)&a59);
  if (*(char *)(v59 - 137) < 0) {
    operator delete(*(void **)(v59 - 160));
  }
  a43 = &a35;
  std::vector<std::pair<unsigned long,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)&STACK[0x2A0]);
  scml::Config::~Config((scml::Config *)&STACK[0x210]);
  if (a2 == 2)
  {
    long long v62 = __cxa_begin_catch(a1);
    if (a9)
    {
      scml::error(0x10u, (uint64_t)v62);
      *a9 = (id)objc_claimAutoreleasedReturnValue();
    }
    long long v63 = +[SCMLLog imageAnalyzer];
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
      -[SCMLImageSanitizer initWithConfiguration:error:]((uint64_t)v62, v63);
    }

    __cxa_end_catch();
    JUMPOUT(0x25BF63184);
  }
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)&STACK[0x270]);

  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::resolveBackends(int a1, uint64_t a2, uint64_t a3)
{
  if (a1 != 3)
  {
    int v5 = _os_feature_enabled_impl();
    unint64_t v6 = +[SCMLLog imageAnalyzer];
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
    if (v5)
    {
      if (v7) {
      a2 = 7;
      }
    }
    else
    {
      if (v7) {
      a2 = 3;
      }
    }

    if ((a3 & 0xFF00000000) != 0 && (a3 - 3) > 1 || !_os_feature_enabled_impl())
    {
      unint64_t v9 = +[SCMLLog imageAnalyzer];
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    }
      }
    else
    {
      unint64_t v8 = +[SCMLLog imageAnalyzer];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {

      }
      return a2 | 8;
    }
  }
  return a2;
}

id anonymous namespace'::significantEventRequest(_anonymous_namespace_ *this)
{
  id v1 = objc_alloc_init(MEMORY[0x263F1EDE8]);
  [v1 setRevision:2];

  return v1;
}

void sub_25BF63AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF63E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_25BF64344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_25BF64458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF6488C(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, char a9, uint64_t a10, char *__pa, std::__split_buffer<std::string> *a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a20);
  if (a16 < 0) {
    operator delete(__pa);
  }
  __pa = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)(v21 - 136));

  _Unwind_Resume(a1);
}

uint64_t scml::strJoin<std::vector<std::string>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    do
    {
      if (v10) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, a2, a3);
      }
      int v11 = *(char *)(v9 + 23);
      if (v11 >= 0) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = *(void *)v9;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(v9 + 23);
      }
      else {
        uint64_t v13 = *(void *)(v9 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, v12, v13);
      v9 += 24;
      --v10;
    }
    while (v9 != v8);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16, a4);
  uint64_t v15 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v16[-1] + *(void *)(v15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v16[0] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v18);
}

void sub_25BF64AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_25BF65580(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  __cxa_free_exception(v61);

  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)&a61);
  if (a2 == 1)
  {
    long long v68 = __cxa_begin_catch(a1);
    if (a13)
    {
      scml::error(0x11u, (uint64_t)v68);
      *a13 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x25BF65440);
  }
  JUMPOUT(0x25BF65914);
}

void sub_25BF65678(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a2 == 1)
  {
    uint64_t v26 = __cxa_begin_catch(a1);
    if (a13)
    {
      scml::error(0x11u, (uint64_t)v26);
      *a13 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x25BF65440);
  }

  _Unwind_Resume(a1);
}

void sub_25BF65690()
{
  JUMPOUT(0x25BF65774);
}

void sub_25BF6569C()
{
  JUMPOUT(0x25BF65770);
}

void sub_25BF656BC()
{
}

void sub_25BF656C8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_25BF656D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, scml::ClipEmbeddingClassifier *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

void sub_25BF65714()
{
}

void sub_25BF65720()
{
}

void sub_25BF65730()
{
  JUMPOUT(0x25BF65750);
}

void sub_25BF65830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (a66 < 0)
  {
    operator delete(__p);
    if ((v66 & 1) == 0)
    {
LABEL_6:
      __cxa_end_catch();
      JUMPOUT(0x25BF65764);
    }
  }
  else if (!v66)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v67);
  goto LABEL_6;
}

void sub_25BF65878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::~__hash_table((uint64_t)&a25);
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)&a51);
  JUMPOUT(0x25BF658BCLL);
}

void sub_25BF65884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,...)
{
  va_start(va, a42);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }

  std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::~__hash_table((uint64_t)&a17);
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)va);
  JUMPOUT(0x25BF658BCLL);
}

void sub_25BF65900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  JUMPOUT(0x25BF65924);
}

void sub_25BF659A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<unsigned long,std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::string>>,std::reverse_iterator<std::pair<unsigned long,std::string>*>,std::reverse_iterator<std::pair<unsigned long,std::string>*>,std::reverse_iterator<std::pair<unsigned long,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::string>>,std::reverse_iterator<std::pair<unsigned long,std::string>*>,std::reverse_iterator<std::pair<unsigned long,std::string>*>,std::reverse_iterator<std::pair<unsigned long,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      uint64_t v9 = *(void *)(a3 - 32);
      a3 -= 32;
      *(void *)(v8 - 32) = v9;
      v8 -= 32;
      long long v10 = *(_OWORD *)(a3 + 8);
      *(void *)(v8 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::string>>,std::reverse_iterator<std::pair<unsigned long,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::string>>,std::reverse_iterator<std::pair<unsigned long,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::string>>,std::reverse_iterator<std::pair<unsigned long,std::string>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::string>>,std::reverse_iterator<std::pair<unsigned long,std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<unsigned long,std::string>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<unsigned long,std::string>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::pair<unsigned long,std::string>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,std::string> const*,std::pair<unsigned long,std::string> const*>(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    std::vector<std::pair<unsigned long,std::string>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned long,std::string>>,std::pair<unsigned long,std::string> const*,std::pair<unsigned long,std::string> const*,std::pair<unsigned long,std::string>*>(v8, (uint64_t)a2, (uint64_t)a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    long long v15 = &a2[4 * v14];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned long,std::string> const*,std::pair<unsigned long,std::string> const*,std::pair<unsigned long,std::string>*,0>(a2, v15, v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned long,std::string>>,std::pair<unsigned long,std::string> const*,std::pair<unsigned long,std::string> const*,std::pair<unsigned long,std::string>*>(v8, (uint64_t)v15, (uint64_t)a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned long,std::string> const*,std::pair<unsigned long,std::string> const*,std::pair<unsigned long,std::string>*,0>(a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 1) < 0) {
        operator delete(*(void **)(v18 - 24));
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_25BF65DE8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_25BF65DF0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<unsigned long,std::string>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<unsigned long,std::string>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned long,std::string>>,std::pair<unsigned long,std::string> const*,std::pair<unsigned long,std::string> const*,std::pair<unsigned long,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v13 = a4;
  unint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *unint64_t v4 = *((void *)v6 - 1);
      uint64_t v8 = (std::string *)(v4 + 1);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        unint64_t v4 = v14;
      }
      else
      {
        long long v9 = *v6;
        v4[3] = *((void *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4 += 4;
      unint64_t v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::string>>,std::pair<unsigned long,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_25BF65EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::string>>,std::pair<unsigned long,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::string>>,std::pair<unsigned long,std::string>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::string>>,std::pair<unsigned long,std::string>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 32;
  }
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned long,std::string> const*,std::pair<unsigned long,std::string> const*,std::pair<unsigned long,std::string>*,0>(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = (const std::string *)(v4 + 1);
    uint64_t v7 = *v4;
    v4 += 4;
    uint64_t v8 = (std::string *)(a3 + 1);
    *a3 = v7;
    a3 += 4;
    std::string::operator=(v8, v6);
  }
  while (v4 != v5);
  return v5;
}

void std::vector<std::pair<unsigned long,std::string>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t std::__split_buffer<std::pair<unsigned long,std::unique_ptr<scml::ClipEmbeddingClassifier>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::unique_ptr<scml::ClipEmbeddingClassifier>::reset[abi:ne180100]((scml::ClipEmbeddingClassifier::Impl ***)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::pair<unsigned long,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<unsigned long,std::string>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t anonymous namespace'::getIvsThresholdValue(_anonymous_namespace_ *this, const scml::Config *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  char v22 = 1;
  uint64_t v3 = scml::Config::get<std::string>((uint64_t)this, "classification_mode", 0x13uLL, (uint64_t)&__p);
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)v3;
    v23.__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v4;
  }
  if (v22 && v21 < 0) {
    operator delete(__p);
  }
  char v5 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = v23.__r_.__value_.__l.__size_;
  }
  if (size <= 10)
  {
    if (!size)
    {
      LOBYTE(__p) = 0;
      char v20 = 0;
      uint64_t v13 = scml::Config::get<double>((uint64_t)this, "threshold", 9uLL, &__p);
      if ((*((unsigned char *)&v23.__r_.__value_.__s + 23) & 0x80) == 0) {
        return v13;
      }
      goto LABEL_45;
    }
    if (size != 8) {
      goto LABEL_49;
    }
    unint64_t v14 = (v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v23
        : (std::string *)v23.__r_.__value_.__r.__words[0];
    if (memcmp(v14, "balanced", 8uLL)) {
      goto LABEL_49;
    }
    uint64_t v13 = 2;
    if ((v5 & 0x80) == 0) {
      return v13;
    }
LABEL_45:
    operator delete(v23.__r_.__value_.__l.__data_);
    return v13;
  }
  if (size == 11)
  {
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v15 = &v23;
    }
    else {
      long long v15 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if (memcmp(v15, "high_recall", 0xBuLL)) {
      goto LABEL_49;
    }
    uint64_t v13 = 3;
    if ((v5 & 0x80) == 0) {
      return v13;
    }
    goto LABEL_45;
  }
  if (size == 14)
  {
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v23;
    }
    else {
      uint64_t v16 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if (memcmp(v16, "high_precision", 0xEuLL)) {
      goto LABEL_49;
    }
    uint64_t v13 = 1;
    if ((v5 & 0x80) == 0) {
      return v13;
    }
    goto LABEL_45;
  }
  if (size != 20) {
    goto LABEL_49;
  }
  uint64_t v7 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v23;
  }
  std::string::size_type v8 = v7->__r_.__value_.__r.__words[0];
  std::string::size_type v9 = v7->__r_.__value_.__l.__size_;
  int v10 = v7->__r_.__value_.__r.__words[2];
  BOOL v11 = v8 == 0x69685F7265707573 && v9 == 0x69636572705F6867;
  if (!v11 || v10 != 1852795251)
  {
LABEL_49:
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    MEMORY[0x26117A7E0](exception, &__p);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v13 = 0;
  if ((*((unsigned char *)&v23.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_45;
  }
  return v13;
}

void sub_25BF6634C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double scml::Config::get<double>(uint64_t a1, const void *a2, size_t a3, unsigned char *a4)
{
  v22[0] = (uint64_t)a2;
  v22[1] = a3;
  uint64_t v8 = scml::Config::as<std::unordered_map<std::string,scml::Config>>(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v9 = (void *)v8;
  if (a3 >= 0x17)
  {
    uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v11 = a3 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    size_t v20 = a3;
    int64_t v21 = v12 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = a3;
  p_dst = (void **)&__dst;
  if (a3) {
LABEL_8:
  }
    memmove(p_dst, a2, a3);
  *((unsigned char *)p_dst + a3) = 0;
  uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v9, (unsigned __int8 *)&__dst);
  unint64_t v14 = v13;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst);
    if (v14) {
      return scml::Config::as<double>((_DWORD *)v14 + 10);
    }
  }
  else if (v13)
  {
    return scml::Config::as<double>((_DWORD *)v14 + 10);
  }
  if (!a4[8])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strCat<std::string_view const&,char const(&)[11]>(v22, " not found", &__dst);
    if (v21 >= 0) {
      uint64_t v17 = (void **)&__dst;
    }
    else {
      uint64_t v17 = __dst;
    }
    if (v21 >= 0) {
      uint64_t v18 = HIBYTE(v21);
    }
    else {
      uint64_t v18 = v20;
    }
    scml::Config::error(a1, (uint64_t)v17, v18, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return *(double *)a4;
}

void sub_25BF66534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

double scml::Config::as<double>(_DWORD *a1)
{
  int v1 = a1[10];
  if (v1 == 1) {
    return (double)*(uint64_t *)a1;
  }
  if (v1 != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error((uint64_t)a1, (uint64_t)"not a float", 11, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return *(double *)a1;
}

void sub_25BF6660C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,SCMLImageSanitizerImageStyle>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,SCMLImageSanitizerImageStyle> const&>(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_25BF66684(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,SCMLImageSanitizerImageStyle> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>>>::__construct_node_hash<std::pair<std::string const,SCMLImageSanitizerImageStyle> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  char v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_25BF668F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>>>::__construct_node_hash<std::pair<std::string const,SCMLImageSanitizerImageStyle> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v8 + 1std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_25BF669A8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::__emplace_unique_key_args<MADUnifiedEmbeddingVersion,std::piecewise_construct_t const&,std::tuple<MADUnifiedEmbeddingVersion const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  char v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  void *v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    char v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_25BF66BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t scml::strCat<char const(&)[19],std::string const&,char const(&)[3],char const*>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, const char **a4@<X3>, void *a5@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  scml::scml_impl::strCat<char const(&)[19],std::string const&,char const(&)[3],char const*>(&v11, a1, a2, a3, a4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a5);
  uint64_t v11 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v12[-1] + *(void *)(v11 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[0] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v14);
}

void sub_25BF66DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t scml::scml_impl::strCat<char const(&)[19],std::string const&,char const(&)[3],char const*>(void *a1, char *__s, uint64_t a3, char *a4, const char **a5)
{
  size_t v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);
  int v11 = *(char *)(a3 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = *(void *)a3;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v12, v13);

  return scml::scml_impl::strCat<char const(&)[3],char const*>(a1, a4, a5);
}

void std::vector<std::pair<unsigned long,std::unique_ptr<scml::ClipEmbeddingClassifier>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (scml::ClipEmbeddingClassifier::Impl ***)**a1;
  if (v2)
  {
    unint64_t v4 = (scml::ClipEmbeddingClassifier::Impl ***)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 2;
        std::unique_ptr<scml::ClipEmbeddingClassifier>::reset[abi:ne180100](v4 - 1, 0);
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_25BF674D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 1std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_25BF67588(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

scml::ClipEmbeddingClassifier::Impl **std::unique_ptr<scml::ClipEmbeddingClassifier>::reset[abi:ne180100](scml::ClipEmbeddingClassifier::Impl ***a1, scml::ClipEmbeddingClassifier::Impl **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    scml::ClipEmbeddingClassifier::~ClipEmbeddingClassifier(result);
    JUMPOUT(0x26117ABD0);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>>>::find<MADUnifiedEmbeddingVersion>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

scml::ClipImageEncoder *std::unique_ptr<scml::ClipImageEncoder>::reset[abi:ne180100](scml::ClipImageEncoder **a1, scml::ClipImageEncoder *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    scml::ClipImageEncoder::~ClipImageEncoder(result);
    JUMPOUT(0x26117ABD0);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>>>::__emplace_unique_key_args<MADUnifiedEmbeddingVersion,std::pair<MADUnifiedEmbeddingVersion const,std::unique_ptr<scml::ClipImageEncoder>>>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint8x8_t v12 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  a3[1] = 0;
  *uint64_t i = 0;
  i[1] = v6;
  i[2] = v13;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v20);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v21 = *(void *)a1;
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v12;
  *uint8x8_t v12 = i;
  *(void *)(v21 + 8 * v3) = v12;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7) {
        v23 %= v7;
      }
    }
    else
    {
      v23 &= v7 - 1;
    }
    size_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_25BF67D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,void *>>>::operator()[abi:ne180100](uint64_t a1, scml::ClipImageEncoder **__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::unique_ptr<scml::ClipImageEncoder>::reset[abi:ne180100](__p + 3, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,anonymous namespace'::IVSThresholdInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,anonymous namespace'::IVSThresholdInfo>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
    operator delete(v2);
    }
  }
  return a1;
}

void std::allocator_traits<std::allocator<std::__hash_node<std::__hash_value_type<std::string,anonymous namespace'::IVSThresholdInfo>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,anonymous namespace'::IVSThresholdInfo>,void,void>(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

char *std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::__emplace_unique_key_args<MADUnifiedEmbeddingVersion,MADUnifiedEmbeddingVersion const&,std::vector<float>>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint8x8_t v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((void *)v12 + 2) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint8x8_t v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v14 = (void *)(a1 + 16);
  uint8x8_t v12 = (char *)operator new(0x30uLL);
  *(void *)uint8x8_t v12 = 0;
  *((void *)v12 + 1) = v8;
  *((void *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a4;
  *((void *)v12 + 5) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  size_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)uint8x8_t v12 = *v22;
LABEL_38:
    void *v22 = v12;
    goto LABEL_39;
  }
  *(void *)uint8x8_t v12 = *v14;
  void *v14 = v12;
  *(void *)(v21 + 8 * v4) = v14;
  if (*(void *)v12)
  {
    unint64_t v23 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    size_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_25BF6865C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>>>::__deallocate_node(a1, *(scml::ClipImageEncoder ***)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>>>::__deallocate_node(uint64_t a1, scml::ClipImageEncoder **a2)
{
  if (a2)
  {
    int8x8_t v2 = a2;
    do
    {
      unint64_t v3 = *v2;
      std::unique_ptr<scml::ClipImageEncoder>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      int8x8_t v2 = (scml::ClipImageEncoder **)v3;
    }
    while (v3);
  }
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

id scml::error(unsigned int a1, void *a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  id v3 = a2;
  unint64_t v4 = (void *)MEMORY[0x263F087E8];
  unint64_t v5 = SCMLErrorDomain[0];
  uint64_t v9 = *MEMORY[0x263F08320];
  v10[0] = v3;
  unint64_t v6 = [NSDictionary dictionaryWithObjects:v10 forKeys:&v9 count:1];
  unint64_t v7 = [v4 errorWithDomain:v5 code:a1 userInfo:v6];

  return v7;
}

void sub_25BF68C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id scml::error(unsigned int a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = scml::strToNSString(a2, a3);
  unint64_t v5 = scml::error(a1, v4);

  return v5;
}

void sub_25BF68CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id scml::error(unsigned int a1, uint64_t a2)
{
  id v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  size_t v4 = strlen(v3);

  return scml::error(a1, (uint64_t)v3, v4);
}

{
  void *v3;
  void *v4;
  uint64_t vars8;

  id v3 = [NSString stringWithFormat:@"%@", a2];
  size_t v4 = scml::error(a1, v3);

  return v4;
}

void sub_25BF68DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id scml::error(unsigned int a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (v7)
  {
    unint64_t v8 = NSString;
    uint64_t v9 = scml::strToNSString(a2, a3);
    uint8x8_t v10 = [v8 stringWithFormat:@"%@: %@", v9, v7];
    uint64_t v11 = scml::error(a1, v10);
  }
  else
  {
    uint64_t v11 = scml::error(a1, a2, a3);
  }

  return v11;
}

void sub_25BF68E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id scml::error(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v12[0] = a2;
  v12[1] = a3;
  uint64_t v9 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
  scml::strCat<std::string_view &,char const(&)[3],char const*>(v12, ": ", &v9, __p);
  if ((v11 & 0x80u) == 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v6 = v11;
  }
  else {
    uint64_t v6 = (uint64_t)__p[1];
  }
  id v7 = scml::error(a1, (uint64_t)v5, v6);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }

  return v7;
}

void sub_25BF68F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t scml::strCat<std::string_view &,char const(&)[3],char const*>@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, const char **a3@<X2>, void *a4@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, *a1, a1[1]);
  scml::scml_impl::strCat<char const(&)[3],char const*>(&v9, a2, a3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, a4);
  uint64_t v9 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v10[-1] + *(void *)(v9 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[0] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v12);
}

void sub_25BF690F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void scml::makeException(const void *a1@<X0>, size_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  v16[0] = (uint64_t)a1;
  v16[1] = a2;
  id v7 = a3;
  if (!v7)
  {
    if (a2 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (a2 >= 0x17)
    {
      uint64_t v10 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17) {
        uint64_t v10 = a2 | 7;
      }
      uint64_t v11 = v10 + 1;
      uint64_t v9 = (void **)operator new(v10 + 1);
      __dst[1] = (void *)a2;
      unint64_t v15 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v15) = a2;
      uint64_t v9 = __dst;
      if (!a2) {
        goto LABEL_12;
      }
    }
    memmove(v9, a1, a2);
LABEL_12:
    *((unsigned char *)v9 + a2) = 0;
    MEMORY[0x26117A7E0](a4, __dst);
    goto LABEL_13;
  }
  unint64_t v8 = [NSString stringWithFormat:@"%@", v7];
  scml::strFromNSString(v8, __dst);

  scml::strCat<std::string_view &,char const(&)[3],std::string &>(v16, ": ", (uint64_t)__dst, __p);
  MEMORY[0x26117A7E0](a4, __p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
LABEL_13:
  if (SHIBYTE(v15) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_25BF69250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t scml::strCat<std::string_view &,char const(&)[3],std::string &>@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, *a1, a1[1]);
  scml::scml_impl::strCat<char const(&)[3],std::string>(&v9, a2, a3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, a4);
  uint64_t v9 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v10[-1] + *(void *)(v9 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[0] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v12);
}

void sub_25BF693FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *scml::typeStr@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  switch(a1)
  {
    case 4:
      int8x8_t v2 = "FLOAT_32";
      return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, v2);
    case 2:
      int8x8_t v2 = "INT_32";
      return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, v2);
    case 0:
      int8x8_t v2 = "UINT_8";
      return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  return std::to_string(a2, a1);
}

void scml::TensorSpec::throwBadShape(uint64_t a1, uint64_t *a2)
{
  scml::strCat<char const(&)[8],std::string const&,char const(&)[8],std::vector<unsigned long> const&,char const(&)[22],std::vector<std::variant<int,std::string>> const&>("tensor ", a1, " shape ", a2, " does not match spec ", (uint64_t *)(a1 + 24), v3);
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x26117A7E0](exception, v3);
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_25BF694C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t scml::strCat<char const(&)[8],std::string const&,char const(&)[8],std::vector<unsigned long> const&,char const(&)[22],std::vector<std::variant<int,std::string>> const&>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, char *a5@<X4>, uint64_t *a6@<X5>, void *a7@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  scml::scml_impl::strCat<char const(&)[8],std::string const&,char const(&)[8],std::vector<unsigned long> const&,char const(&)[22],std::vector<std::variant<int,std::string>> const&>(&v15, a1, a2, a3, a4, a5, a6);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16, a7);
  uint64_t v15 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v16[-1] + *(void *)(v15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v16[0] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v18);
}

void sub_25BF6966C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void scml::TensorSpec::throwBadType(uint64_t a1, int a2)
{
  scml::typeStr(a2, &v5);
  scml::typeStr(*(_DWORD *)(a1 + 48), &__p);
  scml::strCat<char const(&)[8],std::string const&,char const(&)[7],std::string,char const(&)[22],std::string>("tensor ", a1, " type ", (uint64_t)&v5, " does not match spec ", (uint64_t)&__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x26117A7E0](exception, v6);
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_25BF69734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t scml::strCat<char const(&)[8],std::string const&,char const(&)[7],std::string,char const(&)[22],std::string>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  scml::scml_impl::strCat<char const(&)[8],std::string const&,char const(&)[7],std::string,char const(&)[22],std::string>(&v15, a1, a2, a3, a4, a5, a6);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16, a7);
  uint64_t v15 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v16[-1] + *(void *)(v15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v16[0] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v18);
}

void sub_25BF69904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void scml::TensorSpec::throwUnhandledPortType(scml::TensorSpec *this)
{
  scml::strCat<char const(&)[8],std::string const&,char const(&)[21]>("tensor ", (uint64_t)this, " unhandled port type", v2);
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x26117A7E0](exception, v2);
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_25BF69980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t scml::strCat<char const(&)[8],std::string const&,char const(&)[21]>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  scml::scml_impl::strCat<char const(&)[8],std::string const&,char const(&)[21]>(&v9, a1, a2, a3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, a4);
  uint64_t v9 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v10[-1] + *(void *)(v9 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[0] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v12);
}

void sub_25BF69AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void scml::TensorSpec::validate(uint64_t a1, E5RT::OperandDescriptor *this, uint64_t a3)
{
  uint64_t v18 = a3;
  size_t v4 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(this);
  if (!v4) {
    scml::TensorSpec::throwUnhandledPortType((scml::TensorSpec *)a1);
  }
  std::string v5 = v4;
  E5RT::TensorDescriptor::GetTensorDataType(v14, v4);
  int v7 = ik::core::AsDataType((ik::core *)v14, v6);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v14);
  if (*(_DWORD *)(a1 + 48) != v7) {
    scml::TensorSpec::throwBadType(a1, v7);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(v5);
  float v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v15, *(const void **)TensorShape, *(void *)(TensorShape + 8), (uint64_t)(*(void *)(TensorShape + 8) - *(void *)TensorShape) >> 3);
  uint64_t v9 = v16;
  if (((char *)v16 - v15) >> 3 != (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 5) {
    scml::TensorSpec::throwBadShape(a1, (uint64_t *)&v15);
  }
  if (v16 != (void *)v15)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v9 = v15;
    do
    {
      uint64_t v12 = v9[v11];
      v14[0] = a1;
      v14[1] = (uint64_t)&v15;
      v14[2] = v12;
      v14[3] = a1;
      v14[4] = (uint64_t)&v15;
      v14[5] = (uint64_t)&v18;
      v14[6] = v12;
      uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 24) + v10 + 24);
      if (v13 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      unint64_t v19 = v14;
      ((void (*)(uint64_t **))off_2709744D8[v13])(&v19);
      ++v11;
      uint64_t v9 = v15;
      v10 += 32;
    }
    while (v11 < ((char *)v16 - v15) >> 3);
  }
  if (v9)
  {
    float v16 = v9;
    operator delete(v9);
  }
}

void sub_25BF69C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ik::core::AsDataType(ik::core *this, const E5RT::TensorDataType *a2)
{
  int ComponentSize = E5RT::TensorDataType::GetComponentSize(this);
  int ComponentDataType = E5RT::TensorDataType::GetComponentDataType(this);
  if (ComponentDataType == 4)
  {
    if (ComponentSize == 2)
    {
      return 3;
    }
    else
    {
      if (ComponentSize != 4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported component size for float.");
        goto LABEL_18;
      }
      return 4;
    }
  }
  else
  {
    if (ComponentDataType != 1)
    {
      if (ComponentDataType)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported e5rt component type.");
      }
      else
      {
        if (ComponentSize == 1) {
          return 0;
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported component size for uint.");
      }
LABEL_18:
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if (ComponentSize == 2)
    {
      return 1;
    }
    else
    {
      if (ComponentSize != 4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported component size for int.");
        goto LABEL_18;
      }
      return 2;
    }
  }
}

void sub_25BF69DCC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void scml::TensorSpec::createTensor(E5RT::TensorDescriptor *this@<X1>, void *a2@<X0>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::string __p = 0;
  uint64_t v35 = 0;
  unint64_t v36 = 0;
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  unint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v31, *(const void **)TensorShape, *(void *)(TensorShape + 8), (uint64_t)(*(void *)(TensorShape + 8) - *(void *)TensorShape) >> 3);
  int v7 = v31;
  if (v32 != v31)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = v7[v8];
      uint64_t v27 = a2;
      uint64_t v28 = &v31;
      uint64_t v29 = a3;
      uint64_t v30 = v9;
      uint64_t v10 = *(unsigned int *)(a2[3] + 32 * v8 + 24);
      if (v10 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      long long v37 = &v27;
      uint64_t v11 = ((uint64_t (*)(void ***))off_2709744E8[v10])(&v37);
      uint64_t v12 = v11;
      uint64_t v13 = v35;
      if ((unint64_t)v35 >= v36)
      {
        uint64_t v15 = __p;
        uint64_t v16 = ((char *)v35 - (unsigned char *)__p) >> 3;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v36 - (void)__p;
        if ((uint64_t)(v36 - (void)__p) >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          size_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v36, v19);
          uint64_t v15 = __p;
          uint64_t v13 = v35;
        }
        else
        {
          size_t v20 = 0;
        }
        uint64_t v21 = (uint64_t *)&v20[8 * v16];
        *uint64_t v21 = v12;
        uint64_t v14 = v21 + 1;
        while (v13 != v15)
        {
          uint64_t v22 = *--v13;
          *--uint64_t v21 = v22;
        }
        std::string __p = v21;
        uint64_t v35 = v14;
        unint64_t v36 = (unint64_t)&v20[8 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *uint64_t v35 = v11;
        uint64_t v14 = v13 + 1;
      }
      uint64_t v35 = v14;
      ++v8;
      int v7 = v31;
    }
    while (v8 < (v32 - (unsigned char *)v31) >> 3);
  }
  E5RT::TensorDescriptor::GetTensorDataType((uint64_t *)&v27, this);
  int v24 = ik::core::AsDataType((ik::core *)&v27, v23);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v27);
  LODWORD(v37) = v24;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v27, __p, (uint64_t)v35, ((char *)v35 - (unsigned char *)__p) >> 3);
  ik::E5BufferTensor::E5BufferTensor(a4, (unsigned int *)&v37, (int **)&v27);
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
  if (__p)
  {
    uint64_t v35 = __p;
    operator delete(__p);
  }
}

void sub_25BF6A010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void scml::validateTensorNames(uint64_t a1, void ***a2)
{
  size_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v19 = &v20;
  for (uint64_t i = (void **)(a1 + 16);
        ;
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v19, i + 2, (uint64_t)(i + 2)))
  {
    uint64_t i = (void **)*i;
    if (!i) {
      break;
    }
  }
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = &v17;
  std::string v5 = *a2;
  size_t v4 = a2[1];
  if (v5 == v4)
  {
    uint64_t v6 = 0;
  }
  else
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v16, v5, (uint64_t)v5);
      v5 += 7;
    }
    while (v5 != v4);
    uint64_t v6 = v18;
  }
  if (v21 != v6) {
    goto LABEL_24;
  }
  int v7 = (uint64_t *)v19;
  if (v19 != &v20)
  {
    unint64_t v8 = (uint64_t *)v16;
    while ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v15, (unsigned __int8 *)v7 + 32, (unsigned __int8 *)v8 + 32) & 1) != 0)
    {
      uint64_t v9 = (uint64_t *)v7[1];
      uint64_t v10 = v7;
      if (v9)
      {
        do
        {
          int v7 = v9;
          uint64_t v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v7 = (uint64_t *)v10[2];
          BOOL v11 = *v7 == (void)v10;
          uint64_t v10 = v7;
        }
        while (!v11);
      }
      uint64_t v12 = (uint64_t *)v8[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (uint64_t *)v8[2];
          BOOL v11 = *v13 == (void)v8;
          unint64_t v8 = v13;
        }
        while (!v11);
      }
      unint64_t v8 = v13;
      if (v7 == (uint64_t *)&v20) {
        goto LABEL_23;
      }
    }
LABEL_24:
    scml::strCat<char const(&)[20],std::set<std::string> &,char const(&)[12],std::set<std::string> &>("tensor names found=", &v19, ", expected=", &v16, v15);
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x26117A7E0](exception, v15);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
LABEL_23:
  std::__tree<std::string>::destroy((uint64_t)&v16, v17);
  std::__tree<std::string>::destroy((uint64_t)&v19, v20);
}

void sub_25BF6A22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, char *a17, uint64_t a18, char a19, char *a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__tree<std::string>::destroy((uint64_t)&a16, a17);
  std::__tree<std::string>::destroy((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

uint64_t scml::strCat<char const(&)[20],std::set<std::string> &,char const(&)[12],std::set<std::string> &>@<X0>(char *a1@<X0>, void *a2@<X1>, char *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  scml::scml_impl::strCat<char const(&)[20],std::set<std::string> &,char const(&)[12],std::set<std::string> &>(&v11, a1, a2, a3, a4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a5);
  uint64_t v11 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v12[-1] + *(void *)(v11 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[0] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v14);
}

void sub_25BF6A3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void scml::setZero(scml *this, ik::Tensor *a2)
{
  int8x8_t v2 = (void *)(*(uint64_t (**)(void, ik::Tensor *))(**((void **)this + 5) + 24))(*((void *)this + 5), a2);

  bzero(v2, v3);
}

void scml::validateTensors(void *a1@<X0>, void ***a2@<X1>, uint64_t a3@<X8>)
{
  scml::validateTensorNames((uint64_t)a1, a2);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v6 = *a2;
  int v7 = a2[1];
  while (v6 != v7)
  {
    unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(a1, (unsigned __int8 *)v6);
    if (!v8) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*((E5RT::IOPort **)v8 + 5));
    scml::TensorSpec::validate((uint64_t)v6, PortDescriptorRef, a3);
    v6 += 7;
  }
}

void sub_25BF6A4D4(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t scml::validateInputs(E5RT::ExecutionStreamOperation *a1, void ***a2)
{
  uint64_t InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(a1);
  scml::validateTensors(InputPorts, a2, (uint64_t)v5);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v5);
}

uint64_t scml::validateOutputs(E5RT::ExecutionStreamOperation *a1, void ***a2)
{
  uint64_t OutputPorts = (void *)E5RT::ExecutionStreamOperation::GetOutputPorts(a1);
  scml::validateTensors(OutputPorts, a2, (uint64_t)v5);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v5);
}

void scml::loadModelWithFallback(scml *this, const ik::core::E5LoadPreCompiledConfig *a2, const ik::core::E5LoadMILConfig *a3)
{
  uint64_t v3 = *((unsigned __int8 *)this + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)this + 1);
  }
  if (v3)
  {
    uint64_t v5 = *((unsigned __int8 *)a2 + 23);
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *((void *)a2 + 1);
    }
    if (v5)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v12.__pn_, (char *)this);
      std::__fs::filesystem::__status(&v12, 0);
      if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__pn_.__r_.__value_.__l.__data_);
      }
      if (!v11[0] || v11[0] == 255)
      {
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v12.__pn_, (char *)a2);
        std::__fs::filesystem::__status(&v12, 0);
        if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12.__pn_.__r_.__value_.__l.__data_);
        }
        if (v11[0] && v11[0] != 255) {
          operator new();
        }
        uint64_t v8 = v13;
        uint64_t v9 = v14;
        exception = __cxa_allocate_exception(0x10uLL);
        if (v8 == v9)
        {
          scml::strCat<char const(&)[37],std::string const&,char const(&)[5],std::string const&>("Model load failed: no file found at ", (uint64_t)this, " or ", (uint64_t)a2, &v12);
          MEMORY[0x26117A7E0](exception, &v12);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        scml::strJoin<std::vector<std::string>>(&v13, (uint64_t)", fallback failed with: ", 24, v11);
        scml::strCat<char const(&)[38],std::string>("Model load failed: ", (uint64_t)v11, &v12);
        MEMORY[0x26117A7E0](exception, &v12);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      operator new();
    }
  }
  int v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v7, "loadModelWithFallback requires precompiled path and mil path");
  __cxa_throw(v7, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_25BF6A928(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x25BF6A9E8);
}

void sub_25BF6A98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    JUMPOUT(0x25BF6A99CLL);
  }
  JUMPOUT(0x25BF6A9A8);
}

void sub_25BF6A9B0()
{
}

void sub_25BF6A9C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x25BF6A9E8);
}

void sub_25BF6A9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void sub_25BF6AA00()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x25BF6A9F8);
}

void std::vector<std::string>::push_back[abi:ne180100](std::vector<std::string> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  uint64_t v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v13) {
      uint64_t v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14 + v10;
    __v.__first_ = v14;
    __v.__begin_ = v15;
    __v.__end_cap_.__value_ = &v14[v13];
    long long v16 = *a2;
    v15->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    __v.__end_ = v15 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
    std::__split_buffer<std::string>::pointer end = a1->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    std::__split_buffer<std::string>::pointer end = (std::string *)(v7 + 24);
    a1->__end_ = (std::vector<std::string>::pointer)(v7 + 24);
  }
  a1->__end_ = end;
}

void sub_25BF6AB38(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t scml::strCat<char const(&)[37],std::string const&,char const(&)[5],std::string const&>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  scml::scml_impl::strCat<char const(&)[7],std::string,char const(&)[22],std::string>(&v11, a1, a2, a3, a4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a5);
  uint64_t v11 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v12[-1] + *(void *)(v11 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[0] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v14);
}

void sub_25BF6ACAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<scml::Overloaded<scml::TensorSpec::validate(E5RT::OperandDescriptor const&,std::unordered_map<std::string,unsigned long> *)::$_0,scml::TensorSpec::validate(E5RT::OperandDescriptor const&,std::unordered_map<std::string,unsigned long> *)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,int,std::string> const&>(uint64_t **result, _DWORD *a2)
{
  uint64_t v2 = (*result)[2];
  if (v2 != -1 && v2 != *a2) {
    scml::TensorSpec::throwBadShape(**result, (uint64_t *)(*result)[1]);
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<scml::Overloaded<scml::TensorSpec::validate(E5RT::OperandDescriptor const&,std::unordered_map<std::string,unsigned long> *)::$_0,scml::TensorSpec::validate(E5RT::OperandDescriptor const&,std::unordered_map<std::string,unsigned long> *)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,int,std::string> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 24);
  uint64_t v4 = *(void *)(*a1 + 48);
  if (v4 == -1) {
    goto LABEL_16;
  }
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5 != 1) {
    goto LABEL_14;
  }
  unint64_t v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0) {
    unint64_t v7 = (const std::string::value_type *)a2;
  }
  if (*v7 != 63)
  {
LABEL_14:
    uint64_t v8 = **(void **)(v2 + 40);
    if (v6 < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      uint64_t v4 = *(void *)(v2 + 48);
    }
    else
    {
      std::string __p = *(std::string *)a2;
    }
    uint64_t v13 = v4;
    uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long>>(v8, (unsigned __int8 *)&__p, (uint64_t)&__p);
    char v11 = v10;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (!v11 && *((void *)v9 + 5) != *(void *)(v2 + 48)) {
LABEL_16:
    }
      scml::TensorSpec::throwBadShape(v3, *(uint64_t **)(v2 + 32));
  }
}

void sub_25BF6ADE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::pair<std::string const,unsigned long>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_25BF6B060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::pair<std::string const,unsigned long>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v8[4] = *(void *)(a3 + 16);
  }
  v8[5] = *(void *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_25BF6B114(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<scml::Overloaded<scml::TensorSpec::createTensor(E5RT::TensorDescriptor const&,std::unordered_map<std::string,unsigned long> const&)::$_0,scml::TensorSpec::createTensor(E5RT::TensorDescriptor const&,std::unordered_map<std::string,unsigned long> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,int,std::string> const&>(uint64_t a1, int *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<scml::Overloaded<scml::TensorSpec::createTensor(E5RT::TensorDescriptor const&,std::unordered_map<std::string,unsigned long> const&)::$_0,scml::TensorSpec::createTensor(E5RT::TensorDescriptor const&,std::unordered_map<std::string,unsigned long> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,int,std::string> const&>(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>((void *)(*a1)[2], a2);
  if (v4) {
    return *((void *)v4 + 5);
  }
  uint64_t result = v2[3];
  if (result == -1) {
    scml::TensorSpec::throwBadShape(v3, (uint64_t *)v2[1]);
  }
  return result;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  BOOL v4 = (int)v3 < 0;
  uint64_t v5 = *((void *)a2 + 1);
  if ((int)v3 < 0) {
    a2 = *(char **)a2;
  }
  uint64_t v3 = v3;
  if (v4) {
    uint64_t v3 = v5;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_25BF6B1D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t scml::scml_impl::strCat<char const(&)[8],std::string const&,char const(&)[8],std::vector<unsigned long> const&,char const(&)[22],std::vector<std::variant<int,std::string>> const&>(void *a1, char *__s, uint64_t a3, char *a4, uint64_t *a5, char *a6, uint64_t *a7)
{
  size_t v14 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v14);
  int v15 = *(char *)(a3 + 23);
  if (v15 >= 0) {
    uint64_t v16 = a3;
  }
  else {
    uint64_t v16 = *(void *)a3;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v17 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v16, v17);

  return scml::scml_impl::strCat<char const(&)[8],std::vector<unsigned long> const&,char const(&)[22],std::vector<std::variant<int,std::string>> const&>(a1, a4, a5, a6, a7);
}

void *scml::scml_impl::writeStream<std::string>(void *a1, const char *a2, int a3)
{
  uint64_t v3 = (char *)a2;
  BOOL v4 = a1;
  if (a3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"", 1);
    int v5 = v3[23];
    if (v5 >= 0) {
      int v6 = v3;
    }
    else {
      int v6 = *(char **)v3;
    }
    if (v5 >= 0) {
      uint64_t v7 = v3[23];
    }
    else {
      uint64_t v7 = *((void *)v3 + 1);
    }
    scml::scml_impl::escapeAndWriteStream(v4, v6, v7);
    a1 = v4;
    a2 = "\"";
    uint64_t v8 = 1;
  }
  else if (a2[23] >= 0)
  {
    uint64_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    uint64_t v8 = *((void *)v3 + 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)a2, v8);
  return v4;
}

uint64_t scml::scml_impl::strCat<char const(&)[8],std::vector<unsigned long> const&,char const(&)[22],std::vector<std::variant<int,std::string>> const&>(void *a1, char *__s, uint64_t *a3, char *a4, uint64_t *a5)
{
  size_t v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);
  scml::scml_impl::writeStream<std::vector<unsigned long>>(a1, a3);

  return scml::scml_impl::strCat<char const(&)[22],std::vector<std::variant<int,std::string>> const&>(a1, a4, a5);
}

void *scml::scml_impl::writeStream<std::vector<unsigned long>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  if (v3 != v4)
  {
    uint64_t v5 = 0;
    do
    {
      if (v5) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
      }
      v3 += 8;
      std::ostream::operator<<();
      --v5;
    }
    while (v3 != v4);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

uint64_t scml::scml_impl::strCat<char const(&)[22],std::vector<std::variant<int,std::string>> const&>(void *a1, char *__s, uint64_t *a3)
{
  size_t v6 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);
  scml::scml_impl::writeStream<std::vector<std::variant<int,std::string>>>(a1, a3);

  return scml::scml_impl::strCat<>(a1);
}

void *scml::scml_impl::writeStream<std::vector<std::variant<int,std::string>>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  if (v3 != v4)
  {
    uint64_t v5 = 0;
    do
    {
      if (v5) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
      }
      scml::scml_impl::writeStream<int,std::string>((uint64_t)a1, v3, 1);
      v3 += 32;
      --v5;
    }
    while (v3 != v4);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

uint64_t scml::scml_impl::writeStream<int,std::string>(uint64_t a1, uint64_t a2, char a3)
{
  char v7 = a3;
  v6[0] = a1;
  v6[1] = &v7;
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v8 = v6;
  ((void (*)(void **))off_2709744F8[v3])(&v8);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN4scml9scml_impl11writeStreamIJiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEERNS_13basic_ostreamIcSD_EESJ_RKNS_7variantIJDpT_EEEbEUlRKT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJiSG_EEEEEEDcSQ_DpT0_()
{
  return std::ostream::operator<<();
}

void *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN4scml9scml_impl11writeStreamIJiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEERNS_13basic_ostreamIcSD_EESJ_RKNS_7variantIJDpT_EEEbEUlRKT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJiSG_EEEEEEDcSQ_DpT0_(void ***a1, const char *a2)
{
  return scml::scml_impl::writeStream<std::string>(**a1, a2, *(unsigned __int8 *)(*a1)[1]);
}

uint64_t scml::scml_impl::strCat<char const(&)[8],std::string const&,char const(&)[7],std::string,char const(&)[22],std::string>(void *a1, char *__s, uint64_t a3, char *a4, uint64_t a5, char *a6, uint64_t a7)
{
  size_t v14 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v14);
  int v15 = *(char *)(a3 + 23);
  if (v15 >= 0) {
    uint64_t v16 = a3;
  }
  else {
    uint64_t v16 = *(void *)a3;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v17 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v16, v17);

  return scml::scml_impl::strCat<char const(&)[7],std::string,char const(&)[22],std::string>(a1, a4, a5, a6, a7);
}

uint64_t scml::scml_impl::strCat<char const(&)[7],std::string,char const(&)[22],std::string>(void *a1, char *__s, uint64_t a3, char *a4, uint64_t a5)
{
  size_t v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);
  int v11 = *(char *)(a3 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = *(void *)a3;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v12, v13);

  return scml::scml_impl::strCat<char const(&)[3],std::string>(a1, a4, a5);
}

uint64_t scml::scml_impl::strCat<char const(&)[8],std::string const&,char const(&)[21]>(void *a1, char *__s, uint64_t a3, char *a4)
{
  size_t v8 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v8);
  int v9 = *(char *)(a3 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *(void *)a3;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v10, v11);

  return scml::scml_impl::strCat<char const(&)[11]>(a1, a4);
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::string>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        char v7 = v4;
        uint64_t v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    char v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  size_t v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  char v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_25BF6B9AC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      size_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      size_t v3 = (uint64_t *)v2[2];
      int v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            int v9 = (uint64_t **)a2[2];
          }
          else
          {
            int v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              size_t v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *int v9 = v2;
            v2[2] = (uint64_t)v9;
            size_t v3 = v9[2];
            size_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), uint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            size_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          size_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        size_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t scml::scml_impl::strCat<char const(&)[20],std::set<std::string> &,char const(&)[12],std::set<std::string> &>(void *a1, char *__s, void *a3, char *a4, void *a5)
{
  size_t v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);
  scml::scml_impl::writeStream<std::set<std::string>>(a1, a3);

  return scml::scml_impl::strCat<char const(&)[12],std::set<std::string> &>(a1, a4, a5);
}

void *scml::scml_impl::writeStream<std::set<std::string>>(void *a1, void *a2)
{
  size_t v3 = (const char *)(a2 + 1);
  int v4 = (const char *)*a2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  if (v4 != v3)
  {
    uint64_t v5 = 0;
    do
    {
      if (v5) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
      }
      scml::scml_impl::writeStream<std::string>(a1, v4 + 32, 1);
      int v6 = (const char *)*((void *)v4 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          int v6 = *(const char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (const char *)*((void *)v4 + 2);
          BOOL v8 = *(void *)v7 == (void)v4;
          int v4 = v7;
        }
        while (!v8);
      }
      ++v5;
      int v4 = v7;
    }
    while (v7 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

uint64_t scml::scml_impl::strCat<char const(&)[12],std::set<std::string> &>(void *a1, char *__s, void *a3)
{
  size_t v6 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);
  scml::scml_impl::writeStream<std::set<std::string>>(a1, a3);

  return scml::scml_impl::strCat<>(a1);
}

void ik::E5Op::E5Op(ik::E5Op *this, const ik::core::E5LoadPreCompiledConfig *a2)
{
  if (*((unsigned char *)a2 + 72))
  {
    if (*((char *)a2 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
    }
    else {
      std::string v15 = *(std::string *)((unsigned char *)a2 + 2);
    }
  }
  else
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v11, (char *)a2);
    std::__fs::filesystem::path::stem[abi:ne180100]((const std::__fs::filesystem::path *)&v11, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v13 = __p;
    }
    size_t v3 = std::string::append(&v13, "_", 1uLL);
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    int v5 = *((char *)a2 + 47);
    if (v5 >= 0) {
      size_t v6 = (char *)a2 + 24;
    }
    else {
      size_t v6 = (const std::string::value_type *)*((void *)a2 + 3);
    }
    if (v5 >= 0) {
      std::string::size_type v7 = *((unsigned __int8 *)a2 + 47);
    }
    else {
      std::string::size_type v7 = *((void *)a2 + 4);
    }
    BOOL v8 = std::string::append(&v14, v6, v7);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v10) {
    operator new();
  }
  operator new();
}

void sub_25BF6C0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::stem[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__stem(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x26117ABD0);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ik::E5Op::E5Op(ik::E5Op *this, const ik::core::E5LoadMILConfig *a2)
{
  Compiler = (E5RT::E5CompilerOptions *)E5RT::E5Compiler::GetCompiler(this);
  E5RT::E5CompilerOptions::Create((uint64_t *)&v37, Compiler);
  if (*((void *)a2 + 10) != *((void *)a2 + 11)) {
    E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed();
  }
  if (*((unsigned char *)a2 + 128)) {
    E5RT::E5CompilerOptions::SetForceRecompilation(v37);
  }
  if (*((void *)a2 + 13) != *((void *)a2 + 14)) {
    E5RT::E5CompilerOptions::SetPreferredCpuBackends();
  }
  E5RT::E5Compiler::Compile();
  uint64_t ExportedFunctions = E5RT::ProgramLibrary::GetExportedFunctions(v36);
  std::basic_string_view<_CharT, _Traits>::size_type v5 = (void *)std::unordered_map<std::string,std::shared_ptr<E5RT::ProgramFunction>>::unordered_map((uint64_t)v34, ExportedFunctions);
  if (std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v5, (unsigned __int8 *)a2 + 24))
  {
    std::string::size_type v7 = *(void *)(v35 + 40);
    std::basic_string_view<_CharT, _Traits>::size_type v6 = *(std::__shared_weak_count **)(v35 + 48);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v29 = v6;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v29 = 0;
    }
    std::string::size_type v28 = v7;
    E5RT::PrecompiledComputeOpCreateOptions::Create();
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (*((unsigned char *)a2 + 72))
    {
      if (*((char *)a2 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v33, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
      }
      else {
        std::string v33 = *(std::string *)((unsigned char *)a2 + 2);
      }
    }
    else
    {
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v26, (char *)a2);
      std::__fs::filesystem::path::stem[abi:ne180100]((const std::__fs::filesystem::path *)&v26, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v31, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v31 = __p;
      }
      BOOL v8 = std::string::append(&v31, "_", 1uLL);
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      int v10 = *((char *)a2 + 47);
      if (v10 >= 0) {
        std::string v11 = (char *)a2 + 24;
      }
      else {
        std::string v11 = (const std::string::value_type *)*((void *)a2 + 3);
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *((unsigned __int8 *)a2 + 47);
      }
      else {
        std::string::size_type v12 = *((void *)a2 + 4);
      }
      std::string v13 = std::string::append(&v32, v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
    }
    v32.__r_.__value_.__r.__words[0] = v7;
    v32.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::PrecompiledComputeOpCreateOptions::Create();
    std::string::size_type v15 = v31.__r_.__value_.__r.__words[0];
    v31.__r_.__value_.__r.__words[0] = 0;
    if (v15) {
      (*(void (**)(std::string::size_type))(*(void *)v15 + 8))(v15);
    }
    if (v32.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
    }
    E5RT::PrecompiledComputeOpCreateOptions::SetOperationName();
    if (*((void *)a2 + 17))
    {
      E5RT::ComputeGPUDevice::GetComputeGPUDeviceForMTLDevice();
      E5RT::PrecompiledComputeOpCreateOptions::SetOverrideComputeGPUDevice();
    }
    E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    uint64_t v16 = v30;
    uint64_t v30 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v34);
    uint64_t v17 = v36;
    unint64_t v36 = 0;
    if (v17) {
      (*(void (**)(E5RT::ProgramLibrary *))(*(void *)v17 + 8))(v17);
    }
    BOOL v18 = v37;
    long long v37 = 0;
    if (v18) {
      (*(void (**)(E5RT::E5CompilerOptions *))(*(void *)v18 + 8))(v18);
    }
    if (v25) {
      operator new();
    }
    operator new();
  }
  exception = __cxa_allocate_exception(0x10uLL);
  std::operator+<char>();
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" not found in ", &v31, &v32);
  int v20 = *((char *)a2 + 23);
  if (v20 >= 0) {
    size_t v21 = (const std::string::value_type *)a2;
  }
  else {
    size_t v21 = *(const std::string::value_type **)a2;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    std::string::size_type v22 = *((void *)a2 + 1);
  }
  unint64_t v23 = std::string::append(&v32, v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x26117A7E0](exception, &v33);
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_25BF6C824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (*(char *)(v39 - 105) < 0) {
    operator delete(*(void **)(v39 - 128));
  }
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a30 < 0)
  {
    operator delete(a25);
    if ((v38 & 1) == 0)
    {
LABEL_10:
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v39 - 104);
      uint64_t v41 = *(void *)(v39 - 64);
      *(void *)(v39 - 64) = 0;
      if (v41) {
        (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
      }
      uint64_t v42 = *(void *)(v39 - 56);
      *(void *)(v39 - 56) = 0;
      if (v42) {
        (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v37);
  goto LABEL_10;
}

void sub_25BF6CA50()
{
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::ProgramFunction>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_25BF6CAB8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void scml::Deferred::~Deferred(scml::Deferred *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);

  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](this);
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void scml::ClipImageEncoder::ClipImageEncoder()
{
}

void sub_25BF6CC38(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x1080C402F06E0BBLL);
  _Unwind_Resume(a1);
}

void scml::ClipImageEncoder::~ClipImageEncoder(scml::ClipImageEncoder *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<scml::ClipImageEncoder::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<scml::ClipImageEncoder::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

id scml::ClipImageEncoder::getEmbeddingObservation(scml::ClipImageEncoder *this, CVPixelBufferRef pixelBuffer)
{
  uint64_t v2 = pixelBuffer;
  v35[2] = *MEMORY[0x263EF8340];
  std::string v33 = 0;
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t v5 = *(void *)(*(void *)this + 72);
  if (Width != v5)
  {
    size_t v8 = *(void *)(*(void *)this + 80);
LABEL_6:
    v35[0] = v5;
    v35[1] = v8;
    int v10 = scaleCVPixelBuffer(v2, v35);
    long long v9 = v10;
    std::string v33 = v10;
    if (!v10)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Failed to resize pixel buffer");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v7 = *(void *)this;
    uint64_t v2 = v10;
    goto LABEL_8;
  }
  size_t Height = CVPixelBufferGetHeight(v2);
  uint64_t v7 = *(void *)this;
  size_t v8 = *(void *)(*(void *)this + 80);
  if (Height != v8)
  {
    size_t v5 = *(void *)(v7 + 72);
    goto LABEL_6;
  }
  long long v9 = 0;
LABEL_8:
  std::mutex::lock((std::mutex *)v7);
  id v11 = *(id *)(*(void *)this + 64);
  id v32 = 0;
  id v27 = v11;
  std::string::size_type v12 = [v11 processImage:v2 withOptions:MEMORY[0x263EFFA78] error:&v32];
  id v13 = v32;
  std::string v26 = v13;
  if (!v12)
  {
    long long v24 = v13;
    size_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    scml::makeException("Embedding query failed", 0x16uLL, v24, (uint64_t)v21);
LABEL_24:
    __cxa_throw(v21, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v14 = v12;
  uint64_t v15 = [v14 countByEnumeratingWithState:&v28 objects:v34 count:16];
  if (!v15) {
    goto LABEL_17;
  }
  uint64_t v16 = *(void *)v29;
LABEL_11:
  uint64_t v17 = 0;
  while (1)
  {
    if (*(void *)v29 != v16) {
      objc_enumerationMutation(v14);
    }
    BOOL v18 = *(void **)(*((void *)&v28 + 1) + 8 * v17);
    unint64_t v19 = objc_msgSend(v18, "data", v26);
    BOOL v20 = [v19 length] == 0;

    if (!v20) {
      break;
    }
    if (v15 == ++v17)
    {
      uint64_t v15 = [v14 countByEnumeratingWithState:&v28 objects:v34 count:16];
      if (!v15)
      {
LABEL_17:

        size_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v21, "Embedding query failed: no embedding in result");
        goto LABEL_24;
      }
      goto LABEL_11;
    }
  }
  id v22 = v18;

  std::mutex::unlock((std::mutex *)v7);
  std::string v33 = 0;
  if (v9) {
    CVPixelBufferRelease(v9);
  }

  return v22;
}

void sub_25BF6CF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __CVBuffer *a20)
{
  __cxa_free_exception(v20);
  std::unique_ptr<__CVBuffer,scml::NonNullDeleter<&(CVPixelBufferRelease)>>::reset[abi:ne180100](&a20, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<__CVBuffer,scml::NonNullDeleter<&(CVPixelBufferRelease)>>::reset[abi:ne180100](__CVBuffer **a1, __CVBuffer *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3) {
    CVPixelBufferRelease(v3);
  }
}

void scml::ClipImageEncoder::getEmbedding(scml::ClipImageEncoder *this@<X0>, __CVBuffer *a2@<X1>, uint64_t a3@<X8>)
{
  scml::ClipImageEncoder::getEmbeddingObservation(this, a2);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  scml::ClipImageEncoder::toEmbeddingVec(v4, a3);
}

void sub_25BF6D0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void scml::ClipImageEncoder::toEmbeddingVec(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  id v47 = v3;
  std::vector<float>::reserve((void **)a2, [v3 count]);
  uint64_t v4 = [v47 type];
  if (v4 != 1)
  {
    if (v4 != 2)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      [v47 type];
      scml::strCat<char const(&)[32],MADUnifiedEmbeddingVersion &>("Unhandled VCPImageEmbeddingObservation type: ", v48);
      MEMORY[0x26117A7E0](exception, v48);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    size_t v5 = [v47 data];
    uint64_t v6 = [v5 length];
    uint64_t v7 = [v47 count];

    if (v6 == 4 * v7)
    {
      id v8 = [v47 data];
      uint64_t v9 = [v8 bytes];

      for (unint64_t i = 0; i < [v47 count]; ++i)
      {
        std::string::size_type v12 = *(_DWORD **)(a2 + 8);
        unint64_t v11 = *(void *)(a2 + 16);
        if ((unint64_t)v12 >= v11)
        {
          id v14 = *(_DWORD **)a2;
          uint64_t v15 = ((uint64_t)v12 - *(void *)a2) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v11 - (void)v14;
          if (v17 >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v18);
            id v14 = *(_DWORD **)a2;
            std::string::size_type v12 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            unint64_t v19 = 0;
          }
          BOOL v20 = &v19[4 * v15];
          *(_DWORD *)BOOL v20 = *(_DWORD *)(v9 + 4 * i);
          id v13 = v20 + 4;
          while (v12 != v14)
          {
            int v21 = *--v12;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          *(void *)a2 = v20;
          *(void *)(a2 + 8) = v13;
          *(void *)(a2 + 16) = &v19[4 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *std::string::size_type v12 = *(_DWORD *)(v9 + 4 * i);
          id v13 = v12 + 1;
        }
        *(void *)(a2 + 8) = v13;
      }
      goto LABEL_43;
    }
LABEL_49:
    uint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Unexpected embedding length");
    __cxa_throw(v46, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  id v22 = [v47 data];
  uint64_t v23 = [v22 length];
  uint64_t v24 = [v47 count];

  if (v23 != 2 * v24) {
    goto LABEL_49;
  }
  id v25 = [v47 data];
  uint64_t v26 = [v25 bytes];

  for (unint64_t j = 0; j < [v47 count]; ++j)
  {
    _H0 = *(_WORD *)(v26 + 2 * j);
    __asm { FCVT            S8, H0 }
    uint64_t v35 = *(_DWORD **)(a2 + 8);
    unint64_t v34 = *(void *)(a2 + 16);
    if ((unint64_t)v35 >= v34)
    {
      long long v37 = *(_DWORD **)a2;
      uint64_t v38 = ((uint64_t)v35 - *(void *)a2) >> 2;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62) {
        std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = v34 - (void)v37;
      if (v40 >> 1 > v39) {
        unint64_t v39 = v40 >> 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41)
      {
        uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v41);
        long long v37 = *(_DWORD **)a2;
        uint64_t v35 = *(_DWORD **)(a2 + 8);
      }
      else
      {
        uint64_t v42 = 0;
      }
      long long v43 = &v42[4 * v38];
      *(_DWORD *)long long v43 = _S8;
      unint64_t v36 = v43 + 4;
      while (v35 != v37)
      {
        int v44 = *--v35;
        *((_DWORD *)v43 - 1) = v44;
        v43 -= 4;
      }
      *(void *)a2 = v43;
      *(void *)(a2 + 8) = v36;
      *(void *)(a2 + 16) = &v42[4 * v41];
      if (v37) {
        operator delete(v37);
      }
    }
    else
    {
      *uint64_t v35 = _S8;
      unint64_t v36 = v35 + 1;
    }
    *(void *)(a2 + 8) = v36;
  }
LABEL_43:
}

void sub_25BF6D474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      int v21 = *(void **)v17;
      if (*(void *)v17)
      {
        *(void *)(v17 + 8) = v21;
        operator delete(v21);
      }

      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t scml::ClipImageEncoder::embeddingVersion(void *__s1, size_t __n)
{
  uint64_t v4 = 0;
  v8[0] = (uint64_t)__s1;
  v8[1] = __n;
  {
    v4 += 4;
    if (v4 == 12)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      scml::strCat<char const(&)[28],std::string_view &>("Unsupported embedding version: ", v8, v7);
      MEMORY[0x26117A7E0](exception, v7);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
}

void sub_25BF6D5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *scml::ClipImageEncoder::embeddingVersionString@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = 0;
  void v11[3] = result;
  {
    v3 += 4;
    if (v3 == 12)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      scml::strCat<char const(&)[32],MADUnifiedEmbeddingVersion &>("Unsupported embedding version: ", v11);
      MEMORY[0x26117A7E0](exception, v11);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  size_t v6 = v5[2];
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (const void *)v5[1];
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    int v10 = operator new(v8 + 1);
    a2[1] = v6;
    a2[2] = v9 | 0x8000000000000000;
    *a2 = v10;
    a2 = v10;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v6;
    if (!v6) {
      goto LABEL_13;
    }
  }
  uint64_t result = memmove(a2, v7, v6);
LABEL_13:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

void sub_25BF6D738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t scml::strCat<char const(&)[32],MADUnifiedEmbeddingVersion &>@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  scml::scml_impl::strCat<char const(&)[12],unsigned long &>(&v5, a1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a2);
  uint64_t v5 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v6[-1] + *(void *)(v5 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v6[0] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v8);
}

void sub_25BF6D8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t scml::ClipImageEncoder::imageWidth(uint64_t a1)
{
  uint64_t v1 = 0;
  v4[3] = a1;
  {
    v1 += 4;
    if (v1 == 12)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      scml::strCat<char const(&)[32],MADUnifiedEmbeddingVersion &>("Unsupported embedding version: ", v4);
      MEMORY[0x26117A7E0](exception, v4);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
}

void sub_25BF6D980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t scml::ClipImageEncoder::imageHeight(uint64_t a1)
{
  uint64_t v1 = 0;
  v4[3] = a1;
  {
    v1 += 4;
    if (v1 == 12)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      scml::strCat<char const(&)[32],MADUnifiedEmbeddingVersion &>("Unsupported embedding version: ", v4);
      MEMORY[0x26117A7E0](exception, v4);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
}

void sub_25BF6DA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    size_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    char v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    int v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    std::string::size_type v12 = v7;
    if (v11 != *a1)
    {
      std::string::size_type v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t scml::ClipImageEncoder::Impl::Impl(uint64_t a1, uint64_t a2)
{
  v21[1] = *MEMORY[0x263EF8340];
  *(void *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  if (!getVCPImageEmbeddingRequestClass())
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get class VCPImageEmbeddingRequest");
    goto LABEL_11;
  }
  id v4 = objc_alloc((Class)getVCPImageEmbeddingRequestClass());
  int64_t v5 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v4;

  if (!*(void *)(a1 + 64))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create VCPImageEmbeddingRequest");
LABEL_11:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  size_t v6 = (id *)getVCPRequestRevisionPropertyKeySymbolLoc(void)::ptr;
  uint64_t v19 = getVCPRequestRevisionPropertyKeySymbolLoc(void)::ptr;
  if (!getVCPRequestRevisionPropertyKeySymbolLoc(void)::ptr)
  {
    char v7 = (void *)MediaAnalysisLibrary();
    void v17[3] = (uint64_t)dlsym(v7, "VCPRequestRevisionPropertyKey");
    getVCPRequestRevisionPropertyKeySymbolLoc(void)::ptr = v17[3];
    size_t v6 = (id *)v17[3];
  }
  _Block_object_dispose(&v16, 8);
  if (!v6)
  {
    dlerror();
    abort_report_np();
    __break(1u);
  }
  id v8 = *v6;
  id v20 = v8;
  uint64_t v9 = [NSNumber numberWithUnsignedInteger:a2];
  v21[0] = v9;
  int v10 = [NSDictionary dictionaryWithObjects:v21 forKeys:&v20 count:1];

  uint64_t v11 = [*(id *)(a1 + 64) initWithOptions:v10];
  std::string::size_type v12 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v11;

  if (!*(void *)(a1 + 64))
  {
    int v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "Failed to init VCPImageEmbeddingRequest");
    __cxa_throw(v15, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)(a1 + 72) = (int)scml::ClipImageEncoder::imageWidth(a2);
  *(void *)(a1 + 8std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = (int)scml::ClipImageEncoder::imageHeight(a2);

  return a1;
}

void sub_25BF6DE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  __cxa_free_exception(v18);

  std::mutex::~mutex((std::mutex *)v16);
  _Unwind_Resume(a1);
}

id getVCPImageEmbeddingRequestClass(void)
{
  uint64_t v4 = 0;
  int64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)getVCPImageEmbeddingRequestClass(void)::softClass;
  uint64_t v7 = getVCPImageEmbeddingRequestClass(void)::softClass;
  if (!getVCPImageEmbeddingRequestClass(void)::softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = ___ZL32getVCPImageEmbeddingRequestClassv_block_invoke;
    void v3[3] = &unk_2654A91D0;
    v3[4] = &v4;
    ___ZL32getVCPImageEmbeddingRequestClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_25BF6DF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class ___ZL32getVCPImageEmbeddingRequestClassv_block_invoke(uint64_t a1)
{
  MediaAnalysisLibrary();
  Class result = objc_getClass("VCPImageEmbeddingRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVCPImageEmbeddingRequestClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    ___ZL32getVCPImageEmbeddingRequestClassv_block_invoke_cold_1();
    return (Class)MediaAnalysisLibrary();
  }
  return result;
}

uint64_t MediaAnalysisLibrary(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!MediaAnalysisLibraryCore(char **)::frameworkLibrary)
  {
    v3[1] = MEMORY[0x263EF8330];
    v3[2] = 3221225472;
    void v3[3] = ___ZL24MediaAnalysisLibraryCorePPc_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_2654A91F0;
    uint64_t v5 = 0;
    MediaAnalysisLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = MediaAnalysisLibraryCore(char **)::frameworkLibrary;
  id v1 = (void *)v3[0];
  if (!MediaAnalysisLibraryCore(char **)::frameworkLibrary)
  {
    id v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t ___ZL24MediaAnalysisLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaAnalysisLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void *___ZL41getVCPRequestRevisionPropertyKeySymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MediaAnalysisLibrary();
  uint64_t result = dlsym(v2, "VCPRequestRevisionPropertyKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getVCPRequestRevisionPropertyKeySymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void std::default_delete<scml::ClipImageEncoder::Impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    std::mutex::~mutex((std::mutex *)a2);
    JUMPOUT(0x26117ABD0);
  }
}

void sub_25BF6E268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF6E328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF6E400(_Unwind_Exception *a1, int a2)
{
  uint64_t v6 = v4;
  MEMORY[0x26117ABD0](v6, 0x20C4093837F09);
  if (a2 == 1)
  {
    id v8 = __cxa_begin_catch(a1);
    if (v3)
    {
      scml::error(0xEu, (uint64_t)v8);
      void *v3 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x25BF6E3E4);
  }

  _Unwind_Resume(a1);
}

void sub_25BF6E664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  scml::ClipEmbeddingClassifier::PredictResult::~PredictResult((scml::ClipEmbeddingClassifier::PredictResult *)&a16);
  if (a2 == 1)
  {
    int v21 = __cxa_begin_catch(a1);
    if (v17)
    {
      scml::error(0xFu, (uint64_t)v21);
      *uint64_t v17 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x25BF6E62CLL);
  }

  _Unwind_Resume(a1);
}

scml::TextModerationLM::Impl **std::unique_ptr<scml::TextModerationLM>::reset[abi:ne180100](scml::TextModerationLM::Impl ***a1, scml::TextModerationLM::Impl **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    scml::TextModerationLM::~TextModerationLM(result);
    JUMPOUT(0x26117ABD0);
  }
  return result;
}

void sub_25BF6E8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF6E978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF6EAC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF6EBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF6EDA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void sub_25BF6F044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF6F138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF6F19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    id v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      id v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      id v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      id v14 = 0;
    }
    int v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    uint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_25BF6F814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::checkedConvert<NSDictionary>(void *a1, void *a2)
{
  id v3 = a1;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_25BF6F964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::checkDictKeys(void *a1, void *a2, char a3, void *a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v7 = a1;
  id v8 = a2;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v9 = v7;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v26;
    while (2)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v26 != v11) {
          objc_enumerationMutation(v9);
        }
        if (([v8 containsObject:*(void *)(*((void *)&v25 + 1) + 8 * i)] & 1) == 0)
        {
          uint64_t v13 = 0;
          id v14 = v9;
          goto LABEL_12;
        }
      }
      uint64_t v10 = [v9 countByEnumeratingWithState:&v25 objects:v30 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }

  if (a3)
  {
    uint64_t v13 = 1;
  }
  else
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v14 = v8;
    uint64_t v16 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v22;
      while (2)
      {
        for (uint64_t j = 0; j != v16; ++j)
        {
          if (*(void *)v22 != v17) {
            objc_enumerationMutation(v14);
          }
          uint64_t v19 = objc_msgSend(v9, "objectForKeyedSubscript:", *(void *)(*((void *)&v21 + 1) + 8 * j), (void)v21);
          BOOL v20 = v19 == 0;

          if (v20)
          {
            uint64_t v13 = 0;
            goto LABEL_12;
          }
        }
        uint64_t v16 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
        uint64_t v13 = 1;
        if (v16) {
          continue;
        }
        break;
      }
    }
    else
    {
      uint64_t v13 = 1;
    }
LABEL_12:
  }
  return v13;
}

void sub_25BF6FB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::GetThresholdModeStrings(_anonymous_namespace_ *this)
{
  void v4[4] = *MEMORY[0x263EF8340];
  {
    v3[0] = &unk_270979FF0;
    v3[1] = &unk_27097A008;
    v4[0] = @"super_high_precision";
    v4[1] = @"high_precision";
    v3[2] = &unk_27097A020;
    void v3[3] = &unk_27097A038;
    v4[2] = @"balanced";
    v4[3] = @"high_recall";
    [NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:4];
  }

  return v1;
}

void sub_25BF6FCC4(_Unwind_Exception *a1)
{
}

void sub_25BF6FE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id anonymous namespace'::makeError(id result, void *a2)
{
  if (a2)
  {
    uint64_t result = [MEMORY[0x263F087E8] errorWithDomain:SCMLErrorDomain[0] code:result userInfo:0];
    *a2 = result;
  }
  return result;
}

void sub_25BF700F4(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_25BF703C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void scml::Config::fromJson(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  id v7 = a1;
  if (v7
    && ([MEMORY[0x263EFF9D0] null],
        id v8 = objc_claimAutoreleasedReturnValue(),
        int v9 = [v7 isEqual:v8],
        v8,
        !v9))
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v13 = v7;
      long long v54 = 0u;
      long long v55 = 0u;
      int v56 = 1065353216;
      int v14 = *(char *)(a2 + 23);
      if (v14 >= 0) {
        uint64_t v15 = a2;
      }
      else {
        uint64_t v15 = *(void *)a2;
      }
      if (v14 >= 0) {
        uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v16 = *(void *)(a2 + 8);
      }
      scml::Config::Config<std::unordered_map<std::string,scml::Config>>(a4, (uint64_t *)&v54, v15, v16, a3);
      std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::~__hash_table((uint64_t)&v54);
      if (*(_DWORD *)(a4 + 40) != 5) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      id v17 = v13;
      uint64_t v18 = [v17 countByEnumeratingWithState:&v50 objects:v58 count:16];
      if (v18)
      {
        uint64_t v19 = *(void *)v51;
        do
        {
          for (uint64_t i = 0; i != v18; ++i)
          {
            if (*(void *)v51 != v19) {
              objc_enumerationMutation(v17);
            }
            id v21 = *(id *)(*((void *)&v50 + 1) + 8 * i);
            std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v21 UTF8String]);
            long long v22 = [v17 objectForKeyedSubscript:v21];
            scml::Config::fromJson(&v54, v22, &__p, a4);
            std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__emplace_unique_key_args<std::string,std::string&,scml::Config>(a4, (unsigned __int8 *)&__p, (long long *)&__p, (uint64_t)&v54);
            if (*((void *)&v57 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
            }
            std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v54);

            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          uint64_t v18 = [v17 countByEnumeratingWithState:&v50 objects:v58 count:16];
        }
        while (v18);
      }
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v23 = v7;
        long long v54 = 0uLL;
        *(void *)&long long v55 = 0;
        int v24 = *(char *)(a2 + 23);
        if (v24 >= 0) {
          uint64_t v25 = a2;
        }
        else {
          uint64_t v25 = *(void *)a2;
        }
        if (v24 >= 0) {
          uint64_t v26 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v26 = *(void *)(a2 + 8);
        }
        scml::Config::Config<std::vector<scml::Config>>(a4, (uint64_t)&v54, v25, v26, a3);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
        std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (*(_DWORD *)(a4 + 40) != 4) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        for (unint64_t j = 0; j < [v23 count]; ++j)
        {
          std::to_string(&__p, j);
          long long v28 = [v23 objectAtIndexedSubscript:j];
          scml::Config::fromJson(&v54, v28, &__p, a4);
          unint64_t v29 = *(void *)(a4 + 8);
          if (v29 >= *(void *)(a4 + 16))
          {
            uint64_t v31 = std::vector<scml::Config>::__push_back_slow_path<scml::Config>((uint64_t *)a4, (uint64_t)&v54);
            id v32 = (std::__shared_weak_count *)*((void *)&v57 + 1);
            *(void *)(a4 + 8) = v31;
            if (v32) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v32);
            }
          }
          else
          {
            uint64_t v30 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::__move_constructor(v29, (uint64_t)&v54);
            *(_OWORD *)(v30 + 48) = v57;
            long long v57 = 0uLL;
            *(void *)(a4 + 8) = v30 + 64;
          }
          std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v54);

          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v33 = v7;
          *(void *)&long long v54 = [v33 UTF8String];
          int v34 = *(char *)(a2 + 23);
          if (v34 >= 0) {
            uint64_t v35 = a2;
          }
          else {
            uint64_t v35 = *(void *)a2;
          }
          if (v34 >= 0) {
            uint64_t v36 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            uint64_t v36 = *(void *)(a2 + 8);
          }
          scml::Config::Config<char const*>((void *)a4, (char **)&v54, v35, v36, a3);
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            __p.__r_.__value_.__r.__words[0] = 0;
            int v45 = *(char *)(a2 + 23);
            if (v45 >= 0) {
              uint64_t v46 = a2;
            }
            else {
              uint64_t v46 = *(void *)a2;
            }
            if (v45 >= 0) {
              uint64_t v47 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              uint64_t v47 = *(void *)(a2 + 8);
            }
            scml::Config::Config<decltype(nullptr)>((uint64_t)&v54, (uint64_t)&__p, v46, v47, a3);
            exception = __cxa_allocate_exception(0x10uLL);
            scml::Config::error((uint64_t)&v54, (uint64_t)"unsupported type", 16, (uint64_t)exception);
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          {
            operator new();
          }
          CFNumberRef v37 = (const __CFNumber *)v7;
          LODWORD(v54) = CFNumberGetType(v37);
          if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)scml::Config::fromJson(objc_object *,std::string const&,scml::Config*)::kFloatTypes, (int *)&v54))
          {
            [(__CFNumber *)v37 doubleValue];
            *(void *)&long long v54 = v38;
            int v39 = *(char *)(a2 + 23);
            if (v39 >= 0) {
              uint64_t v40 = a2;
            }
            else {
              uint64_t v40 = *(void *)a2;
            }
            if (v39 >= 0) {
              uint64_t v41 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              uint64_t v41 = *(void *)(a2 + 8);
            }
            scml::Config::Config<double>(a4, &v54, v40, v41, a3);
          }
          else
          {
            *(void *)&long long v54 = [(__CFNumber *)v37 longValue];
            int v42 = *(char *)(a2 + 23);
            if (v42 >= 0) {
              uint64_t v43 = a2;
            }
            else {
              uint64_t v43 = *(void *)a2;
            }
            if (v42 >= 0) {
              uint64_t v44 = *(unsigned __int8 *)(a2 + 23);
            }
            else {
              uint64_t v44 = *(void *)(a2 + 8);
            }
            scml::Config::Config<long>(a4, &v54, v43, v44, a3);
          }
        }
      }
    }
  }
  else
  {
    *(void *)&long long v54 = 0;
    int v10 = *(char *)(a2 + 23);
    if (v10 >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *(void *)a2;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    scml::Config::Config<decltype(nullptr)>(a4, (uint64_t)&v54, v11, v12, a3);
  }
}

void sub_25BF70A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  MEMORY[0x26117ABD0](v25, 0x10A0C408EF24B1CLL);

  _Unwind_Resume(a1);
}

void scml::Config::error(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v8[0] = a2;
  v8[1] = a3;
  scml::Config::PathInfo::path(*(scml::Config::PathInfo **)(a1 + 48), &v5);
  scml::strCat<std::string_view &,char const(&)[3],std::string &>(v8, ": ", (uint64_t)&v5, __p);
  MEMORY[0x26117A7E0](a4, __p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_25BF70C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void *scml::Config::PathInfo::PathInfo(void *__dst, void *__src, size_t __len, void *a4)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v9 = __len | 7;
    }
    size_t v10 = v9 + 1;
    id v8 = operator new(v9 + 1);
    __dst[1] = __len;
    __dst[2] = v10 | 0x8000000000000000;
    *long long __dst = v8;
    goto LABEL_8;
  }
  *((unsigned char *)__dst + 23) = __len;
  id v8 = __dst;
  if (__len) {
LABEL_8:
  }
    memmove(v8, __src, __len);
  *((unsigned char *)v8 + __len) = 0;
  uint64_t v11 = a4[1];
  __dst[3] = *a4;
  __dst[4] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  return __dst;
}

void scml::Config::PathInfo::path(scml::Config::PathInfo *this@<X0>, std::string *a2@<X8>)
{
  id v4 = (scml::Config::PathInfo *)*((void *)this + 3);
  if (v4)
  {
    scml::Config::PathInfo::path((uint64_t *)__p, v4);
    if (std::string::ends_with[abi:ne180100]((uint64_t *)__p, "/"))
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (const void **)this, (uint64_t)a2);
    }
    else
    {
      if ((v17 & 0x80u) == 0) {
        size_t v5 = v17;
      }
      else {
        size_t v5 = (size_t)__p[1];
      }
      uint64_t v6 = &v15;
      std::string::basic_string[abi:ne180100]((uint64_t)&v15, v5 + 1);
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
      }
      if (v5)
      {
        if ((v17 & 0x80u) == 0) {
          char v7 = __p;
        }
        else {
          char v7 = (void **)__p[0];
        }
        memmove(v6, v7, v5);
      }
      *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
      int v8 = *((char *)this + 23);
      if (v8 >= 0) {
        size_t v9 = (const std::string::value_type *)this;
      }
      else {
        size_t v9 = *(const std::string::value_type **)this;
      }
      if (v8 >= 0) {
        std::string::size_type v10 = *((unsigned __int8 *)this + 23);
      }
      else {
        std::string::size_type v10 = *((void *)this + 1);
      }
      uint64_t v11 = std::string::append(&v15, v9, v10);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
    }
    if ((char)v17 < 0) {
      operator delete(__p[0]);
    }
  }
  else if (*((char *)this + 23) < 0)
  {
    id v13 = *(const std::string::value_type **)this;
    std::string::size_type v14 = *((void *)this + 1);
    std::string::__init_copy_ctor_external(a2, v13, v14);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void sub_25BF70F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    int v8 = (char *)result;
  }
  else {
    int v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      size_t v9 = a1;
    }
    else {
      size_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  std::string::size_type v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void scml::Config::loadJson(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v15[0] = (uint64_t)a1;
  v15[1] = a2;
  size_t v6 = scml::strToNSString((uint64_t)a1, a2);
  id v14 = 0;
  char v7 = [MEMORY[0x263EFF8F8] dataWithContentsOfFile:v6 options:0 error:&v14];
  id v8 = v14;
  if (!v7)
  {
    scml::strCat<char const(&)[28],std::string_view &>("Failed to read json ", v15, v12);
    if ((v13 & 0x80u) == 0) {
      std::string::size_type v10 = v12;
    }
    else {
      std::string::size_type v10 = (void *)v12[0];
    }
    if ((v13 & 0x80u) == 0) {
      size_t v11 = v13;
    }
    else {
      size_t v11 = v12[1];
    }
  }
  id v9 = v7;
  scml::Config::fromJsonContent([v9 bytes], objc_msgSend(v9, "length"), a1, a2, a3);
}

void sub_25BF71110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void scml::anonymous namespace'::throwNSError(const void *a1, size_t a2, void *a3)
{
  v13[0] = (uint64_t)a1;
  v13[1] = a2;
  id v5 = a3;
  exception = __cxa_allocate_exception(0x10uLL);
  if (v5)
  {
    std::string::size_type v10 = [v5 localizedDescription];
    scml::strCat<std::string_view &,char const(&)[3],char const*>(v13, ": ", &v10, __dst);
    MEMORY[0x26117A7E0](exception, __dst);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 >= 0x17)
  {
    uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v8 = a2 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = operator new(v8 + 1);
    __dst[1] = a2;
    unint64_t v12 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v12) = a2;
    char v7 = __dst;
    if (!a2)
    {
LABEL_12:
      *((unsigned char *)v7 + a2) = 0;
      MEMORY[0x26117A7E0](exception, __dst);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  memmove(v7, a1, a2);
  goto LABEL_12;
}

void sub_25BF712A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);

    if ((v18 & 1) == 0)
    {
LABEL_6:

      _Unwind_Resume(a1);
    }
  }
  else
  {

    if (!v18) {
      goto LABEL_6;
    }
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void scml::Config::fromJsonContent(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, std::string::size_type a4@<X3>, uint64_t a5@<X8>)
{
  v22[0] = (uint64_t)a3;
  v22[1] = a4;
  uint64_t v8 = [MEMORY[0x263EFF8F8] dataWithBytes:a1 length:a2];
  id v21 = 0;
  uint64_t v9 = [MEMORY[0x263F08900] JSONObjectWithData:v8 options:0 error:&v21];
  id v10 = v21;
  if (!v9)
  {
    scml::strCat<char const(&)[28],std::string_view &>("Failed to read json ", v22, __p);
    if (v20 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if (v20 >= 0) {
      size_t v17 = HIBYTE(v20);
    }
    else {
      size_t v17 = (size_t)__p[1];
    }
  }
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 >= 0x17)
  {
    uint64_t v12 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v12 = a4 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = a4;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = a4;
  p_dst = &__dst;
  if (a4) {
LABEL_9:
  }
    memmove(p_dst, a3, a4);
  p_dst->__r_.__value_.__s.__data_[a4] = 0;
  id v14 = std::string::append(&__dst, ":/", 2uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t v20 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  scml::Config::fromJson(v9, (uint64_t)__p, 0, a5);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_25BF714CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL scml::Config::isNull(scml::Config *this)
{
  return *((_DWORD *)this + 10) == 0;
}

uint64_t scml::Config::isNull(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5 = scml::Config::as<std::unordered_map<std::string,scml::Config>>(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = (void *)v5;
  if (a3 >= 0x17)
  {
    uint64_t v8 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v8 = a3 | 7;
    }
    uint64_t v9 = v8 + 1;
    char v7 = (void **)operator new(v8 + 1);
    __dst[1] = (void *)a3;
    unint64_t v14 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v14) = a3;
  char v7 = __dst;
  if (a3) {
LABEL_8:
  }
    memmove(v7, a2, a3);
  *((unsigned char *)v7 + a3) = 0;
  id v10 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v6, (unsigned __int8 *)__dst);
  size_t v11 = v10;
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__dst[0]);
    if (v11) {
      return *((_DWORD *)v11 + 20) == 0;
    }
  }
  else if (v10)
  {
    return *((_DWORD *)v11 + 20) == 0;
  }
  return 1;
}

void sub_25BF71634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void scml::Config::path(scml::Config::PathInfo **this@<X0>, std::string *a2@<X8>)
{
}

uint64_t std::vector<scml::Config>::__push_back_slow_path<scml::Config>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v14[4] = a1 + 2;
  if (v9) {
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<scml::Config>>(v7, v9);
  }
  else {
    id v10 = 0;
  }
  uint64_t v11 = (uint64_t)&v10[64 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[64 * v9];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::__move_constructor(v11, a2);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  v14[2] = v11 + 64;
  std::vector<scml::Config>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<scml::Config>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_25BF71738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<scml::Config>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 40);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_270974508[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 40);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_270974538[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJDnxdSD_SI_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, void *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJDnxdSD_SI_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJDnxdSD_SI_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJDnxdSD_SI_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJDnxdSD_SI_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  __n128 result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJDnxdSD_SI_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__hash_table(a2, a3);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)__n128 result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  uint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::vector<scml::Config>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v5 == *a1)
  {
    uint64_t result = a2[1];
  }
  else
  {
    do
    {
      uint64_t result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::__move_constructor(v6 - 64, v5 - 64);
      *(_OWORD *)(v6 - 16) = *(_OWORD *)(v5 - 16);
      *(void *)(v5 - 16) = 0;
      *(void *)(v5 - 8) = 0;
      v5 -= 64;
      uint64_t v6 = result;
    }
    while (v5 != v4);
  }
  a2[1] = result;
  uint64_t v8 = *a1;
  *a1 = result;
  a2[1] = v8;
  uint64_t v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<scml::Config>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

uint64_t std::__split_buffer<scml::Config>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    scml::Config::~Config((scml::Config *)(i - 64));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t scml::Config::Config<decltype(nullptr)>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a3;
  v10[1] = a4;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = 0;
  if (a5)
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a5 + 56);
    uint64_t v8 = *(void *)(a5 + 48);
    uint64_t v9 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>((uint64_t)v10, &v8, (void *)(a1 + 48));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return a1;
}

void sub_25BF71AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v11);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>@<X0>(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<scml::Config::PathInfo>::__shared_ptr_emplace[abi:ne180100]<std::string_view &,std::shared_ptr<scml::Config::PathInfo>,std::allocator<scml::Config::PathInfo>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_25BF71B14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<scml::Config::PathInfo>::__shared_ptr_emplace[abi:ne180100]<std::string_view &,std::shared_ptr<scml::Config::PathInfo>,std::allocator<scml::Config::PathInfo>,0>(void *a1, uint64_t a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270973FB8;
  std::construct_at[abi:ne180100]<scml::Config::PathInfo,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,scml::Config::PathInfo*>(a1 + 3, a2, a3);
  return a1;
}

void sub_25BF71B70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<scml::Config::PathInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270973FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<scml::Config::PathInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270973FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x26117ABD0);
}

void std::__shared_ptr_emplace<scml::Config::PathInfo>::__on_zero_shared(uint64_t a1)
{
}

void *std::construct_at[abi:ne180100]<scml::Config::PathInfo,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,scml::Config::PathInfo*>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void **)a2;
  size_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  v8[0] = *a3;
  v8[1] = v6;
  *a3 = 0;
  a3[1] = 0;
  scml::Config::PathInfo::PathInfo(a1, v4, v5, v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

void sub_25BF71C5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t scml::Config::Config<std::unordered_map<std::string,scml::Config>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__hash_table(a1, a2);
  *(_DWORD *)(v7 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = 5;
  if (a5)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(a5 + 56);
    uint64_t v10 = *(void *)(a5 + 48);
    uint64_t v11 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>((uint64_t)v12, &v10, (void *)(v7 + 48));
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return a1;
}

void sub_25BF71CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v11);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__emplace_unique_key_args<std::string,std::string&,scml::Config>(uint64_t a1, unsigned __int8 *a2, long long *a3, uint64_t a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    long long v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__construct_node_hash<std::string&,scml::Config>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  int v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *int v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_25BF71F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__construct_node_hash<std::string&,scml::Config>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x68uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  uint64_t result = std::pair<std::string const,scml::Config>::pair[abi:ne180100]<std::string&,scml::Config,0>((std::string *)(v10 + 16), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_25BF72014(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,scml::Config>::pair[abi:ne180100]<std::string&,scml::Config,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&this[1], a3);
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 48);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,scml::Config>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t scml::Config::Config<std::vector<scml::Config>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a3;
  v10[1] = a4;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = 4;
  if (a5)
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a5 + 56);
    uint64_t v8 = *(void *)(a5 + 48);
    uint64_t v9 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>((uint64_t)v10, &v8, (void *)(a1 + 48));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return a1;
}

void sub_25BF7218C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v11);
  _Unwind_Resume(a1);
}

void *scml::Config::Config<char const*>(void *a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = a3;
  v12[1] = a4;
  uint64_t v7 = std::string::basic_string[abi:ne180100]<0>(a1, *a2);
  *((_DWORD *)v7 + 1std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = 3;
  if (a5)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(a5 + 56);
    uint64_t v10 = *(void *)(a5 + 48);
    uint64_t v11 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>((uint64_t)v12, &v10, v7 + 6);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return a1;
}

void sub_25BF72234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v11);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int>::unordered_set(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, a2, a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_25BF722B8(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  float v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    *float v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    float v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_25BF724D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t scml::Config::Config<double>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a3;
  v10[1] = a4;
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = 2;
  if (a5)
  {
    unint64_t v6 = *(std::__shared_weak_count **)(a5 + 56);
    uint64_t v8 = *(void *)(a5 + 48);
    uint64_t v9 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>((uint64_t)v10, &v8, (void *)(a1 + 48));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return a1;
}

void sub_25BF7266C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v11);
  _Unwind_Resume(a1);
}

uint64_t scml::Config::Config<long>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a3;
  v10[1] = a4;
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = 1;
  if (a5)
  {
    unint64_t v6 = *(std::__shared_weak_count **)(a5 + 56);
    uint64_t v8 = *(void *)(a5 + 48);
    uint64_t v9 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>((uint64_t)v10, &v8, (void *)(a1 + 48));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return a1;
}

void sub_25BF72710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v11);
  _Unwind_Resume(a1);
}

void sub_25BF7322C(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_25BF735F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_25BF73A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_25BF73C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_25BF73EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

CGImageRef createScaledCGImageFromCGImage(CGImage *a1, unint64_t *a2, CGInterpolationQuality a3)
{
  size_t v5 = *a2;
  size_t v6 = a2[1];
  size_t v7 = 4 * *a2;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  uint64_t v9 = CGBitmapContextCreate(0, v5, v6, 8uLL, v7, DeviceRGB, 0x4005u);
  CGContextSetInterpolationQuality(v9, a3);
  v12.size.width = (double)v5;
  v12.size.height = (double)v6;
  v12.origin.x = 0.0;
  v12.origin.y = 0.0;
  CGContextDrawImage(v9, v12, a1);
  CGImageRef Image = CGBitmapContextCreateImage(v9);
  CGContextRelease(v9);
  CGColorSpaceRelease(DeviceRGB);
  return Image;
}

__CVBuffer *scaleCVPixelBuffer(CVPixelBufferRef pixelBuffer, size_t *a2)
{
  int8x8_t v2 = pixelBuffer;
  v10[1] = *MEMORY[0x263EF8340];
  if (pixelBuffer
    && (CVPixelBufferGetPixelFormatType(pixelBuffer) != 1111970369
     || CVPixelBufferGetWidth(v2) != *a2
     || CVPixelBufferGetHeight(v2) != a2[1]))
  {
    VTPixelTransferSessionRef pixelTransferSessionOut = 0;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if (VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], &pixelTransferSessionOut))
    {
      return 0;
    }
    else
    {
      CVPixelBufferRef pixelBufferOut = 0;
      uint64_t v9 = *MEMORY[0x263F04130];
      v10[0] = MEMORY[0x263EFFA78];
      CFDictionaryRef v5 = [NSDictionary dictionaryWithObjects:v10 forKeys:&v9 count:1];
      if (CVPixelBufferCreate(v4, *a2, a2[1], 0x42475241u, v5, &pixelBufferOut)
        || VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v2, pixelBufferOut))
      {
        CVPixelBufferRelease(pixelBufferOut);
        CFRelease(pixelTransferSessionOut);
        int8x8_t v2 = 0;
      }
      else
      {
        CFRelease(pixelTransferSessionOut);
        int8x8_t v2 = pixelBufferOut;
      }
    }
  }
  return v2;
}

void sub_25BF74214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CVPixelBufferRef scaledPixelBuffer32BGRAFromCGImage(CGImage *a1, size_t a2, size_t a3, CGInterpolationQuality a4)
{
  v23[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = *MEMORY[0x263F040A0];
  v22[0] = *MEMORY[0x263F04130];
  v22[1] = v8;
  v23[0] = MEMORY[0x263EFFA78];
  v23[1] = MEMORY[0x263EFFA88];
  uint64_t v22[2] = *MEMORY[0x263F04090];
  v23[2] = MEMORY[0x263EFFA88];
  CFDictionaryRef v9 = [NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:3];
  CVPixelBufferRef pixelBuffer = 0;
  CVReturn v10 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a3, 0x42475241u, v9, &pixelBuffer);
  if (!pixelBuffer)
  {
    CGRect v12 = +[SCMLLog imageAnalyzer];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      scaledPixelBuffer32BGRAFromCGImage_cold_1(v10, v12);
    }
    goto LABEL_8;
  }
  CVReturn v11 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  if (v11)
  {
    CVPixelBufferRelease(pixelBuffer);
    CGRect v12 = +[SCMLLog imageAnalyzer];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      scaledPixelBuffer32BGRAFromCGImage_cold_3(v11, v12);
    }
LABEL_8:

    goto LABEL_9;
  }
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  uint64_t v18 = CGBitmapContextCreate(BaseAddress, a2, a3, 8uLL, BytesPerRow, DeviceRGB, 0x2006u);
  float v19 = v18;
  if (v18)
  {
    CGContextSetInterpolationQuality(v18, a4);
    v24.size.width = (double)a2;
    v24.size.height = (double)a3;
    v24.origin.x = 0.0;
    v24.origin.y = 0.0;
    CGContextDrawImage(v19, v24, a1);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    CGContextRelease(v19);
    CGColorSpaceRelease(DeviceRGB);
    CVPixelBufferRef v13 = pixelBuffer;
    goto LABEL_10;
  }
  unint64_t v20 = +[SCMLLog imageAnalyzer];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
    scaledPixelBuffer32BGRAFromCGImage_cold_2(v20);
  }

  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CGColorSpaceRelease(DeviceRGB);
  CVPixelBufferRelease(pixelBuffer);
LABEL_9:
  CVPixelBufferRef v13 = 0;
LABEL_10:

  return v13;
}

void sub_25BF744A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t pixelBufferFromCGImage(CGImage *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    size_t Width = CGImageGetWidth(a1);
    size_t Height = CGImageGetHeight(a1);
    if (v3) {
      uint64_t v6 = [v3 unsignedIntegerValue];
    }
    else {
      uint64_t v6 = 1111970369;
    }
    id v8 = objc_alloc(MEMORY[0x263F1EF38]);
    CFDictionaryRef v9 = (void *)[v8 initWithCGImage:a1 orientation:1 options:MEMORY[0x263EFFA78]];
    uint64_t v7 = [v9 bufferWithWidth:Width height:Height format:v6 options:MEMORY[0x263EFFA78] error:0];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_25BF74598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t interpolationForScaleMethod(void *a1, int *a2)
{
  id v3 = a1;
  if ([v3 isEqualToString:SCMLImageScaleMethodCGInterpolationNone[0]])
  {
    int v4 = 1;
  }
  else if ([v3 isEqualToString:SCMLImageScaleMethodCGInterpolationLow[0]])
  {
    int v4 = 2;
  }
  else if ([v3 isEqualToString:SCMLImageScaleMethodCGInterpolationMedium[0]])
  {
    int v4 = 4;
  }
  else
  {
    if (![v3 isEqualToString:SCMLImageScaleMethodCGInterpolationHigh[0]])
    {
      uint64_t v5 = 0;
      goto LABEL_10;
    }
    int v4 = 3;
  }
  *a2 = v4;
  uint64_t v5 = 1;
LABEL_10:

  return v5;
}

void sub_25BF74678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t saveCGImageToPng(CGImage *a1, void *a2)
{
  CFURLRef v3 = a2;
  int v4 = CGImageDestinationCreateWithURL(v3, @"public.png", 1uLL, 0);
  uint64_t v5 = v4;
  if (!v4)
  {
    uint64_t v7 = +[SCMLLog imageAnalyzer];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      saveCGImageToPng_cold_1((uint64_t)v3, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_10;
  }
  CGImageDestinationAddImage(v4, a1, 0);
  if (!CGImageDestinationFinalize(v5))
  {
    BOOL v14 = +[SCMLLog imageAnalyzer];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      saveCGImageToPng_cold_2((uint64_t)v3, v14, v15, v16, v17, v18, v19, v20);
    }

    CFRelease(v5);
LABEL_10:
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  CFRelease(v5);
  uint64_t v6 = 1;
LABEL_11:

  return v6;
}

void sub_25BF74780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t saveCVPixelBufferToPng(__CVBuffer *a1, void *a2)
{
  id v3 = a2;
  CGImageRef imageOut = 0;
  if (VTCreateCGImageFromCVPixelBuffer(a1, 0, &imageOut))
  {
    int v4 = +[SCMLLog imageAnalyzer];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      saveCVPixelBufferToPng_cold_1((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  else if (imageOut)
  {
    uint64_t v11 = saveCGImageToPng(imageOut, v3);
    CGImageRelease(imageOut);
    goto LABEL_8;
  }
  uint64_t v11 = 0;
LABEL_8:

  return v11;
}

void sub_25BF74840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF75BA8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, const void **a11, scml::MultiwordGazetteer **a12, scml::MultiwordGazetteer **a13, scml::MultiwordGazetteer **a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,const void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0) {
    operator delete(__p);
  }

  nlp::CFScopedPtr<__CFDictionary *>::reset(&a28, 0);
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)(v69 - 160));
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)(v69 - 240));

  std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100](v62, 0);
  std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100](a12, 0);
  std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100](v68, 0);
  std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100](a13, 0);
  std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100](v66, 0);
  std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100](a14, 0);
  std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100](v65, 0);
  nlp::CFScopedPtr<_LXLexicon const*>::reset(a11, 0);
  nlp::CFScopedPtr<__CFStringTokenizer *>::reset((const void **)v63, 0);

  MEMORY[0x26117ABD0](v63, 0x10E0C4060F4419DLL);
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)&a41);
  if (a2 == 2)
  {
    long long v71 = __cxa_begin_catch(a1);
    if (a15)
    {
      scml::error(0xEu, (uint64_t)v71);
      *a15 = (id)objc_claimAutoreleasedReturnValue();
    }
    long long v72 = +[SCMLLog textAnalyzer];
    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR)) {
      -[SCMLTextSanitizer initWithConfiguration:error:]((uint64_t)v71, v72);
    }

    __cxa_end_catch();
    JUMPOUT(0x25BF75940);
  }
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)&a51);

  _Unwind_Resume(a1);
}

void sub_25BF761FC()
{
}

void sub_25BF76210(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x25BF76160);
}

id scml::anonymous namespace'::RuleBasedTextSanitizer::toGazetteerPath(uint64_t a1, uint64_t a2)
{
  v11[2] = *MEMORY[0x263EF8340];
  int8x8_t v2 = NSString;
  id v3 = scml::strToNSString(a1, a2);
  int v4 = [v2 stringWithFormat:@"%@.gaze", v3];

  uint64_t v5 = [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  uint64_t v6 = NSString;
  uint64_t v7 = [v5 resourcePath];
  v11[0] = v7;
  v11[1] = v4;
  uint64_t v8 = [MEMORY[0x263EFF8C0] arrayWithObjects:v11 count:2];
  uint64_t v9 = [v6 pathWithComponents:v8];

  return v9;
}

void sub_25BF76340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF76410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25BF765CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t scml::anonymous namespace'::AsyncResponder::finish(scml::_anonymous_namespace_::AsyncResponder *this)
{
  uint64_t v2 = *((int *)this + 16) + 1;
  *((_DWORD *)this + 16) = v2;
  if (!*((unsigned char *)this + 32))
  {
    if (v2 == (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 5 || *((void *)this + 3)) {
      goto LABEL_6;
    }
    if (*((unsigned char *)this + 8)) {
      goto LABEL_2;
    }
    if (![*((id *)this + 2) safe])
    {
LABEL_6:
      (*(void (**)(void))(*(void *)this + 16))();
      *((unsigned char *)this + 32) = 1;
      uint64_t v6 = (void *)*((void *)this + 5);
      if (v6)
      {
        uint64_t v7 = (void *)*((void *)this + 6);
        uint64_t v8 = (void *)*((void *)this + 5);
        if (v7 != v6)
        {
          do
          while (v7 != v6);
          uint64_t v8 = (void *)*((void *)this + 5);
        }
        *((void *)this + 6) = v6;
        operator delete(v8);
      }

      JUMPOUT(0x26117ABD0);
    }
    LODWORD(v2) = *((_DWORD *)this + 16);
  }
LABEL_2:
  uint64_t v3 = *((void *)this + 5);
  uint64_t v9 = this;
  uint64_t v4 = *(void *)(v3 + 32 * (int)v2 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, scml::_anonymous_namespace_::AsyncResponder **))(*(void *)v4 + 48))(v4, &v9);
}

void sub_25BF76AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14)
{
  __cxa_free_exception(v14);
  if (a2 == 2)
  {
    uint64_t v18 = __cxa_begin_catch(a1);
    uint64_t v19 = *(void *)(a14 + 40);
    uint64_t v20 = scml::error(0xFu, (uint64_t)"Failed to query TextModerationLM", 32, (uint64_t)v18);
    unint64_t v21 = *(void **)(v19 + 24);
    *(void *)(v19 + 24) = v20;

    __cxa_end_catch();
    JUMPOUT(0x25BF76A50);
  }
  scml::Deferred::~Deferred((scml::Deferred *)(v15 - 128));

  _Unwind_Resume(a1);
}

void sub_25BF76EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_25BF772D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10, int a11, __int16 a12, char a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  unint64_t v29 = v26;

  if (a2 == 2)
  {
    id v32 = __cxa_begin_catch(a1);
    scml::strCat<char const(&)[38],std::string>("Failed ", v25 + 56, &__p);
    uint64_t v33 = *(void *)(v25 + 40);
    if ((a14 & 0x80u) == 0) {
      p_p = (void **)&__p;
    }
    else {
      p_p = __p;
    }
    if ((a14 & 0x80u) == 0) {
      uint64_t v35 = a14;
    }
    else {
      uint64_t v35 = a10;
    }
    uint64_t v36 = scml::error(0xFu, (uint64_t)p_p, v35, (uint64_t)v32);
    CFNumberRef v37 = *(void **)(v33 + 24);
    *(void *)(v33 + 24) = v36;

    if ((char)a14 < 0) {
      operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x25BF77254);
  }
  scml::Deferred::~Deferred((scml::Deferred *)&a23);

  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 56);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 72);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
}

void sub_25BF77974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, std::__split_buffer<std::string> *a18, uint64_t a19, void *__pa,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a29);
  if (a25 < 0) {
    operator delete(__pa);
  }
  __pa = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  _Unwind_Resume(a1);
}

void sub_25BF77C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF78984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, void *a11, void (**a12)(void, void, void), uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,char a57)
{
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)(v58 - 160));

  std::mutex::unlock(a10);
  if (a2 == 1)
  {
    long long v61 = __cxa_begin_catch(a1);
    long long v62 = scml::error(0xFu, (uint64_t)v61);
    ((void (**)(void, void, void *))a12)[2](a12, 0, v62);

    __cxa_end_catch();
    JUMPOUT(0x25BF788ECLL);
  }

  _Unwind_Resume(a1);
}

uint64_t scml::anonymous namespace'::AsyncResponder::addHandler(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[7];
  unint64_t v5 = a1[6];
  if (v5 < v4)
  {
    uint64_t v7 = v5 + 32;
    a1[6] = v5 + 32;
    goto LABEL_25;
  }
  uint64_t v8 = a1[5];
  uint64_t v9 = (uint64_t)(v5 - v8) >> 5;
  if ((unint64_t)(v9 + 1) >> 59) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = v4 - v8;
  uint64_t v11 = v10 >> 4;
  if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
    uint64_t v11 = v9 + 1;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v11;
  }
  long long v27 = a1 + 7;
  if (v12)
  {
    if (v12 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(32 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  CGRect v24 = v13;
  v25.i64[0] = (uint64_t)&v13[32 * v9];
  uint64_t v26 = &v13[32 * v12];
  uint64_t v14 = v25.i64[0];
  uint64_t v7 = v25.i64[0] + 32;
  v25.i64[1] = v25.i64[0] + 32;
  uint64_t v16 = (void *)a1[5];
  unint64_t v15 = a1[6];
  if ((void *)v15 != v16)
  {
    uint64_t v17 = (void *)(v15 - 8);
    while (1)
    {
      uint64_t v18 = v14 - 32;
      uint64_t v19 = (void *)*v17;
      if (*v17)
      {
        if (v17 - 3 == v19)
        {
          *(void *)(v14 - 8) = v18;
          (*(void (**)(void, uint64_t))(*(void *)*v17 + 24))(*v17, v18);
          goto LABEL_21;
        }
        *(void *)(v14 - 8) = v19;
        uint64_t v20 = v17;
      }
      else
      {
        uint64_t v20 = (void *)(v14 - 8);
      }
      *uint64_t v20 = 0;
LABEL_21:
      unint64_t v21 = v17 - 3;
      v17 -= 4;
      uint64_t v14 = v18;
      if (v21 == v16)
      {
        int64x2_t v22 = *(int64x2_t *)(a1 + 5);
        uint64_t v7 = v25.i64[1];
        uint64_t v14 = v18;
        goto LABEL_24;
      }
    }
  }
  int64x2_t v22 = vdupq_n_s64(v15);
LABEL_24:
  a1[5] = v14;
  a1[6] = v7;
  int64x2_t v25 = v22;
  size_t v23 = (char *)a1[7];
  a1[7] = v26;
  uint64_t v26 = v23;
  CGRect v24 = (char *)v22.i64[0];
LABEL_25:
  a1[6] = v7;
  return result;
}

void sub_25BF78E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _Unwind_Resume(a1);
}

void *std::function<void ()(scml::anonymous namespace'::AsyncResponder *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_25BF78F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF79108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v24 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_25BF79588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v25 = 576;
  while (1)
  {
    if (*(char *)(v23 + v25 - 9) < 0) {
      operator delete(*(void **)(v23 + v25 - 32));
    }
    v25 -= 32;
    if (!v25)
    {
      MEMORY[0x26117ABD0](v22, 0x10A0C408EF24B1CLL);
      if (a15 < 0) {
        operator delete(__p);
      }

      _Unwind_Resume(a1);
    }
  }
}

void ___ZN4scml12_GLOBAL__N_122RuleBasedTextSanitizer20updateWithOvsMatchesEPK10__CFStringjbP20SCMLTextSanitization_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  CFStringRef v5 = (const __CFString *)LXEntryCopyString();
  if (CFStringCompare(v5, *(CFStringRef *)(a1 + 56), 1uLL))
  {
    if (!v5) {
      return;
    }
LABEL_29:
    CFRelease(v5);
    return;
  }
  int MetaFlags = LXEntryGetMetaFlags();
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v9 = (MetaFlags & 0x1000000) == 0 && *(unsigned char *)(v7 + 24) != 0;
  *(unsigned char *)(v7 + 24) = v9;
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  BOOL v12 = (MetaFlags & 0x800000) == 0 && *(unsigned char *)(v10 + 24) != 0;
  *(unsigned char *)(v10 + 24) = v12;
  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
  BOOL v15 = (MetaFlags & 0x2000000) == 0 && *(unsigned char *)(v13 + 24) != 0;
  *(unsigned char *)(v13 + 24) = v15;
  if (*(unsigned char *)(a1 + 64)) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = !*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
  }
       || !*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)
       || *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == 0;
  *a3 = v16;
  if (v5) {
    goto LABEL_29;
  }
}

void sub_25BF79858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::allocator_traits<std::allocator<std::function<void ()(scml::anonymous namespace'::AsyncResponder *)>>>::construct[abi:ne180100]<std::function<void ()(scml::anonymous namespace'::AsyncResponder *)>,std::function<void ()(scml::anonymous namespace'::AsyncResponder *)> const&,void,void>(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 24);
  if (result)
  {
    if (result == a2)
    {
      *(void *)(a1 + 24) = a1;
      unint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 24) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 24) = result;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t std::__split_buffer<std::function<void ()(scml::anonymous namespace'::AsyncResponder *)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void nlp::CFScopedPtr<_LXLexicon const*>::reset(const void **a1, const void *a2)
{
  unint64_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t scml::strCat<char const(&)[37],char const*,char const(&)[3],std::string>@<X0>(char *a1@<X0>, const char **a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  scml::scml_impl::strCat<char const(&)[37],char const*,char const(&)[3],std::string>(&v11, a1, a2, a3, a4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a5);
  uint64_t v11 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v12[-1] + *(void *)(v11 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v12[0] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v14);
}

void sub_25BF79DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270973B40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270973B40;
  a2[1] = v2;
  return result;
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = **(id **)(a1 + 8);
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)CFStringRef v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_25BF41000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SCMLTextSanitizer.init.rules.tokenizer", "", v5, 2u);
  }
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2}>,void ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_2709739E0;
  return result;
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_2709739E0;
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2}>,void ()(void)>::target_type()
{
}

id scml::anonymous namespace'::RuleBasedTextSanitizer::loadGazetteer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = ;
  uint64_t v3 = [NSURL fileURLWithPath:v2];
  id v10 = 0;
  os_signpost_id_t v4 = (void *)[objc_alloc(MEMORY[0x263F14000]) initWithContentsOfURL:v3 error:&v10];
  CFStringRef v5 = (scml *)v10;
  if (!v4)
  {
    uint64_t v7 = v5;
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strFromNSError(v7, v9);
    MEMORY[0x26117A7E0](exception, v9);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }

  return v4;
}

void sub_25BF7A118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:

      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270973DA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270973DA8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = **(id **)(a1 + 8);
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)CFStringRef v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_25BF41000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SCMLTextSanitizer.init.rules.full_allow", "", v5, 2u);
  }
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270973E00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270973E00;
  a2[1] = v2;
  return result;
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = **(id **)(a1 + 8);
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)CFStringRef v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_25BF41000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SCMLTextSanitizer.init.rules.full_disallow", "", v5, 2u);
  }
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270973A38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270973A38;
  a2[1] = v2;
  return result;
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = **(id **)(a1 + 8);
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)CFStringRef v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_25BF41000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SCMLTextSanitizer.init.rules.visual_generation_blocklist", "", v5, 2u);
  }
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5}>,void ()(void)>::target_type()
{
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270973E58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270973E58;
  a2[1] = v2;
  return result;
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = **(id **)(a1 + 8);
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)CFStringRef v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_25BF41000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SCMLTextSanitizer.init.rules.ovs_overrides", "", v5, 2u);
  }
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270973A90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270973A90;
  a2[1] = v2;
  return result;
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = **(id **)(a1 + 8);
  uint64_t v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)CFStringRef v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_25BF41000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SCMLTextSanitizer.init.rules.lexicon", "", v5, 2u);
  }
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7}>,void ()(void)>::target_type()
{
}

uint64_t scml::scml_impl::strCat<char const(&)[37],char const*,char const(&)[3],std::string>(void *a1, char *__s, const char **a3, char *a4, uint64_t a5)
{
  size_t v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);

  return scml::scml_impl::strCat<char const*,char const(&)[3],std::string>(a1, a3, a4, a5);
}

uint64_t scml::scml_impl::strCat<char const*,char const(&)[3],std::string>(void *a1, const char **a2, char *a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  size_t v8 = strlen(*a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v7, v8);

  return scml::scml_impl::strCat<char const(&)[3],std::string>(a1, a3, a4);
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8}>,void ()(void)>::~__func()
{
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8}>,void ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_270973AE8;
  return result;
}

void std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270973AE8;
}

uint64_t std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8},std::allocator<scml::anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8}>,void ()(void)>::target_type()
{
}

void nlp::CFScopedPtr<__CFDictionary *>::reset(const void **a1, const void *a2)
{
  os_signpost_id_t v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

uint64_t *std::unique_ptr<scml::anonymous namespace'::RuleBasedTextSanitizer>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {

    std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100]((scml::MultiwordGazetteer **)(v2 + 64), 0);
    std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100]((scml::MultiwordGazetteer **)(v2 + 56), 0);
    std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100]((scml::MultiwordGazetteer **)(v2 + 48), 0);
    std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100]((scml::MultiwordGazetteer **)(v2 + 40), 0);
    std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100]((scml::MultiwordGazetteer **)(v2 + 32), 0);
    std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100]((scml::MultiwordGazetteer **)(v2 + 24), 0);
    std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100]((scml::MultiwordGazetteer **)(v2 + 16), 0);
    nlp::CFScopedPtr<_LXLexicon const*>::reset((const void **)(v2 + 8), 0);
    nlp::CFScopedPtr<__CFStringTokenizer *>::reset((const void **)v2, 0);
    JUMPOUT(0x26117ABD0);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4NS_9allocatorIS2_EEFvvEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4NS_9allocatorIS2_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270973C48;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270973C48;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4NS_9allocatorIS2_EEFvvEEclEv(uint64_t a1)
{
}

uint64_t _ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4NS_9allocatorIS2_EEFvvEE11target_typeEv()
{
  return &_ZTIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4;
}

void _ZNSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5NS_9allocatorIS2_EEFvvEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5NS_9allocatorIS2_EEFvvEE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_270973CA0;
  return result;
}

void _ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_270973CA0;
}

uint64_t _ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5NS_9allocatorIS2_EEFvvEE11target_typeEv()
{
  return &_ZTIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5;
}

void _ZNSt3__110__function6__funcIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__6NS_9allocatorIS2_EEFvvEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__6NS_9allocatorIS2_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_2709745B0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__6NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2709745B0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__6NS_9allocatorIS2_EEFvvEEclEv(uint64_t a1)
{
}

uint64_t _ZNKSt3__110__function6__funcIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__6NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__6))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__6NS_9allocatorIS2_EEFvvEE11target_typeEv()
{
  return &_ZTIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__6;
}

void _ZNSt3__110__function6__funcIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__7NS_9allocatorIS2_EEFvvEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__7NS_9allocatorIS2_EEFvvEE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_270974630;
  return result;
}

void _ZNKSt3__110__function6__funcIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__7NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_270974630;
}

uint64_t _ZNKSt3__110__function6__funcIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__7NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__7))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__7NS_9allocatorIS2_EEFvvEE11target_typeEv()
{
  return &_ZTIZZ72__SCMLTextSanitizer_doLLMBackend_withText_isChildPresent_withResponder__EUb0_E3__7;
}

void _ZNSt3__110__function6__funcIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8NS_9allocatorIS2_EEFvvEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8NS_9allocatorIS2_EEFvvEE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_270973D50;
  return result;
}

void _ZNKSt3__110__function6__funcIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_270973D50;
}

uint64_t _ZNKSt3__110__function6__funcIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8NS_9allocatorIS2_EEFvvEE11target_typeEv()
{
  return &_ZTIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8;
}

uint64_t std::unordered_map<std::string,SCMLAdapterViolationCategory>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SCMLImageSanitizerImageStyle>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,SCMLImageSanitizerImageStyle> const&>(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_25BF7B928(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_25BF7BE3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF7BEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  size_t v10 = v9;

  a9.super_class = (Class)SCMLVideoFrameProcessor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_25BF7BF48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF7BFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF7C088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25BF7C114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25BF7C19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25BF7C460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_25BF7C904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_25BF7CB60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void scml::TextModerationLM::Impl::Impl(char *__dst, void *__src, size_t __len)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v11 = __src;
  size_t v12 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    *((void *)__dst + 1) = __len;
    *((void *)__dst + 2) = v8 | 0x8000000000000000;
    *(void *)std::string __dst = v6;
  }
  else
  {
    __dst[23] = __len;
    uint64_t v6 = __dst;
    if (!__len)
    {
LABEL_9:
      v6[__len] = 0;
      *(_OWORD *)(__dst + 24) = 0u;
      *(_OWORD *)(__dst + 4std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(__dst + 56) = 0u;
      std::string::basic_string[abi:ne180100]<0>((void *)__dst + 9, "cls_pos_ids");
      std::string::basic_string[abi:ne180100]<0>((void *)__dst + 12, "cls_seg_ids");
      std::string::basic_string[abi:ne180100]<0>((void *)__dst + 15, "cls_token_ids");
      std::string::basic_string[abi:ne180100]<0>((void *)__dst + 18, "padding_mask");
      std::string::basic_string[abi:ne180100]<0>((void *)__dst + 21, "probs");
      *((_DWORD *)__dst + 48) = 1;
      *(_OWORD *)(__dst + 196) = 0u;
      *(_OWORD *)(__dst + 212) = 0u;
      *(_OWORD *)(__dst + 228) = 0u;
      *(void *)(__dst + 244) = 0x3F80000000000000;
      *((void *)__dst + 32) = 0;
      scml::strCat<std::string_view const&,char const(&)[11]>((uint64_t *)&v11, ".config.json", __p);
      if ((v14 & 0x80u) == 0) {
        BOOL v9 = __p;
      }
      else {
        BOOL v9 = (void **)__p[0];
      }
      if ((v14 & 0x80u) == 0) {
        uint64_t v10 = v14;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      scml::TextModerationLM::Impl::loadConfig((uint64_t)__dst, v9, v10);
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
      scml::TextModerationTokenizerConfig::fromConfigFile(v11, v12, (uint64_t)__p);
      operator new();
    }
  }
  memmove(v6, __src, __len);
  goto LABEL_9;
}

void sub_25BF7DA94(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_objecta, void **a12, uint64_t *a13, void **a14, void **a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  if (a2 == 1)
  {
    long long v53 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x10uLL);
    a41 = (void *)(*(uint64_t (**)(void *))(*(void *)v53 + 16))(v53);
    scml::strCat<char const(&)[27],std::string_view &,char const(&)[3],char const*>("Failed to load TextSanitizerLM from ", &a21, ": ", (const char **)&a41, &a49);
    MEMORY[0x26117A7E0](exception, &a49);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table(a17);
  std::unique_ptr<ik::E5Op>::reset[abi:ne180100](v52, 0);
  uint64_t v55 = *a13;
  *a13 = 0;
  if (v55) {
    std::default_delete<scml::TextModerationTokenizer>::operator()[abi:ne180100]((uint64_t)a13, v55);
  }
  if (*(char *)(v49 + 191) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v49 + 167) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(v49 + 143) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v49 + 119) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v49 + 95) < 0) {
    operator delete(*v50);
  }
  int v56 = *(void **)(v49 + 48);
  if (v56)
  {
    *(void *)(v49 + 56) = v56;
    operator delete(v56);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  if (*(char *)(v49 + 23) < 0) {
    operator delete(*(void **)v49);
  }
  _Unwind_Resume(a1);
}

void sub_25BF7DFD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0)
  {
    operator delete(__p);
    if ((v55 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v55)
  {
LABEL_6:
    __cxa_end_catch();
    JUMPOUT(0x25BF7E00CLL);
  }
  __cxa_free_exception(v54);
  goto LABEL_6;
}

void sub_25BF7E0C8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x25BF7E0D0);
  }
  __clang_call_terminate(a1);
}

uint64_t scml::TextModerationLM::Impl::loadConfig(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  scml::Config::loadJson(a2, a3, (uint64_t)v29);
  LOBYTE(__p[0]) = 0;
  BYTE4(__p[0]) = 0;
  *(_DWORD *)(a1 + 192) = scml::Config::get<int>((uint64_t)v29, "max_windows", 0xBuLL, __p);
  LOBYTE(__p[0]) = 0;
  BYTE4(__p[0]) = 0;
  *(_DWORD *)(a1 + 196) = scml::Config::get<int>((uint64_t)v29, "window_overlap", 0xEuLL, __p);
  LOBYTE(__p[0]) = 0;
  char v27 = 0;
  os_signpost_id_t v4 = (uint64_t *)scml::Config::get<std::vector<scml::Config>>((uint64_t)v29, "class_thresholds", 0x10uLL, (uint64_t)__p);
  if (v27)
  {
    long long v28 = __p;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100](&v28);
  }
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 != v6)
  {
    size_t v7 = (void **)(a1 + 48);
    do
    {
      LOBYTE(__p[0]) = 0;
      char v27 = 0;
      size_t v8 = (long long *)scml::Config::get<std::string>(v5, "class", 5uLL, (uint64_t)__p);
      unint64_t v9 = *(void *)(a1 + 32);
      if (v9 >= *(void *)(a1 + 40))
      {
        uint64_t v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 24), v8);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 24, v8);
        uint64_t v10 = v9 + 24;
      }
      *(void *)(a1 + 32) = v10;
      if (v27 && v26 < 0) {
        operator delete(__p[0]);
      }
      LOBYTE(__p[0]) = 0;
      BYTE4(__p[0]) = 0;
      float v11 = scml::Config::get<float>(v5, "threshold", 9uLL, __p);
      float v12 = v11;
      unsigned __int8 v14 = *(float **)(a1 + 56);
      unint64_t v13 = *(void *)(a1 + 64);
      if ((unint64_t)v14 >= v13)
      {
        BOOL v16 = (float *)*v7;
        uint64_t v17 = ((char *)v14 - (unsigned char *)*v7) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v13 - (void)v16;
        if (v19 >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 64, v20);
          BOOL v16 = *(float **)(a1 + 48);
          unsigned __int8 v14 = *(float **)(a1 + 56);
        }
        else
        {
          unint64_t v21 = 0;
        }
        uint64_t v22 = (float *)&v21[4 * v17];
        float *v22 = v12;
        uint64_t v15 = v22 + 1;
        while (v14 != v16)
        {
          int v23 = *((_DWORD *)v14-- - 1);
          *((_DWORD *)v22-- - 1) = v23;
        }
        *(void *)(a1 + 48) = v22;
        *(void *)(a1 + 56) = v15;
        *(void *)(a1 + 64) = &v21[4 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        float *v14 = v11;
        uint64_t v15 = v14 + 1;
      }
      *(void *)(a1 + 56) = v15;
      v5 += 64;
    }
    while (v5 != v6);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v29);
}

void sub_25BF7E368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void **p_p, char a17)
{
  if (a15)
  {
    p_p = &__p;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100](&p_p);
  }
  scml::Config::~Config((scml::Config *)&a17);
  _Unwind_Resume(a1);
}

uint64_t scml::Config::get<int>(uint64_t a1, const void *a2, size_t a3, unsigned char *a4)
{
  v22[0] = (uint64_t)a2;
  v22[1] = a3;
  uint64_t v8 = scml::Config::as<std::unordered_map<std::string,scml::Config>>(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = (void *)v8;
  if (a3 >= 0x17)
  {
    uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v11 = a3 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    size_t v20 = a3;
    int64_t v21 = v12 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = a3;
  p_dst = (void **)&__dst;
  if (a3) {
LABEL_8:
  }
    memmove(p_dst, a2, a3);
  *((unsigned char *)p_dst + a3) = 0;
  unint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v9, (unsigned __int8 *)&__dst);
  unsigned __int8 v14 = v13;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst);
    if (v14) {
      return scml::Config::as<int>((_DWORD *)v14 + 10);
    }
  }
  else if (v13)
  {
    return scml::Config::as<int>((_DWORD *)v14 + 10);
  }
  if (!a4[4])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strCat<std::string_view const&,char const(&)[11]>(v22, " not found", &__dst);
    if (v21 >= 0) {
      uint64_t v17 = (void **)&__dst;
    }
    else {
      uint64_t v17 = __dst;
    }
    if (v21 >= 0) {
      uint64_t v18 = HIBYTE(v21);
    }
    else {
      uint64_t v18 = v20;
    }
    scml::Config::error(a1, (uint64_t)v17, v18, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return *(unsigned int *)a4;
}

void sub_25BF7E550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void scml::TextModerationLM::Impl::writeNextInputTensors(uint64_t a1, std::vector<int> *a2, char a3)
{
  uint64_t v6 = a1 + 216;
  v29[0] = (long long *)(a1 + 120);
  size_t v7 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 216, (unsigned __int8 *)(a1 + 120), (uint64_t)&std::piecewise_construct, v29);
  v29[0] = (long long *)(a1 + 144);
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)(a1 + 144), (uint64_t)&std::piecewise_construct, v29);
  unint64_t v9 = (void *)(*(uint64_t (**)(void))(**((void **)v7 + 10) + 24))(*((void *)v7 + 10));
  bzero(v9, v10);
  uint64_t v11 = (void *)(*(uint64_t (**)(void))(**((void **)v8 + 10) + 24))(*((void *)v8 + 10));
  bzero(v11, v12);
  if ((unint64_t)(a2->__end_ - a2->__begin_) >= *(void *)(a1 + 256)) {
    unint64_t v13 = *(void *)(a1 + 256);
  }
  else {
    unint64_t v13 = a2->__end_ - a2->__begin_;
  }
  uint64_t v14 = ik::Tensor::Data<int>((uint64_t)(v7 + 40));
  (*(void (**)(void **__return_ptr))(**((void **)v7 + 10) + 32))(&__p);
  ik::ArrayView<int,-1>::ArrayView(v29, v14, (uint64_t)&__p);
  v29[0] = (long long *)&unk_2709731F0;
  if (__p)
  {
    char v26 = __p;
    operator delete(__p);
  }
  uint64_t v15 = ik::Tensor::Data<int>((uint64_t)(v8 + 40));
  (*(void (**)(void **__return_ptr))(**((void **)v8 + 10) + 32))(v32);
  ik::ArrayView<int,-1>::ArrayView(&__p, v15, (uint64_t)v32);
  std::string __p = &unk_2709731F0;
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  v32[0] = 0;
  if (v13)
  {
    for (unint64_t i = 0; i < v13; v32[0] = (void *)i)
    {
      std::vector<int>::pointer begin = a2->__begin_;
      if ((a3 & 1) == 0) {
        unint64_t i = i - v13 + a2->__end_ - begin;
      }
      int v18 = begin[i];
      if (!v18)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "unexpected padding token found");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      int v24 = 0;
      uint64_t v19 = v29[1];
      *((_DWORD *)v19 + ik::ArrayView<int,-1>::IndexOf<int,unsigned long>((uint64_t)v29, &v24, v32)) = v18;
      int v24 = 0;
      size_t v20 = v26;
      v20[ik::ArrayView<int,-1>::IndexOf<int,unsigned long>((uint64_t)&__p, &v24, v32)] = 1;
      unint64_t i = (unint64_t)v32[0] + 1;
    }
  }
  int64_t v21 = a2->__begin_;
  if ((a3 & 1) == 0 && (unint64_t v22 = a2->__end_ - v21 - v13) != 0) {
    std::vector<int>::resize(a2, v22 + *(int *)(a1 + 196));
  }
  else {
    a2->__end_ = v21;
  }
  std::string __p = &unk_270973350;
  if (v27)
  {
    long long v28 = v27;
    operator delete(v27);
  }
  v29[0] = (long long *)&unk_270973350;
  if (v30)
  {
    uint64_t v31 = v30;
    operator delete(v30);
  }
}

void sub_25BF7E8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void *ik::MutableArrayView<int,-1>::~MutableArrayView(void *a1)
{
  *a1 = &unk_270973350;
  std::vector<int>::size_type v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void scml::TextModerationLM::TextModerationLM(scml::TextModerationLM *this)
{
  scml::TextModerationLM::defaultPathPrefix(&__p);
  scml::TextModerationLM::TextModerationLM();
}

{
  void *__p;

  scml::TextModerationLM::defaultPathPrefix(&__p);
  scml::TextModerationLM::TextModerationLM();
}

void sub_25BF7EA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void scml::TextModerationLM::defaultPathPrefix(void *a1@<X8>)
{
  id v8 = [MEMORY[0x263F086E0] bundleForClass:objc_opt_class()];
  uint64_t v3 = [v8 resourceURL];
  os_signpost_id_t v4 = [v3 path];

  uint64_t v5 = [v4 stringByAppendingPathComponent:@"Models"];
  uint64_t v6 = [v5 stringByAppendingPathComponent:@"TextModel-unilm_v1.7.0_icnivq3txx_125000"];
  id v7 = [v6 stringByAppendingPathComponent:@"TextModel-unilm_v1.7.0_icnivq3txx_125000"];
  std::string::basic_string[abi:ne180100]<0>(a1, (char *)[v7 UTF8String]);
}

void sub_25BF7EB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void scml::TextModerationLM::TextModerationLM()
{
}

void sub_25BF7EC48(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10B2C40CF565F30);
  _Unwind_Resume(a1);
}

void sub_25BF7ECD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void scml::TextModerationLM::~TextModerationLM(scml::TextModerationLM::Impl **this)
{
}

{
  std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0);
}

void scml::TextModerationLM::predict(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  scml::TextModerationTokenizer::textToIDs(*(void *)(*a1 + 200), a2, a3, &v37);
  *(unsigned char *)a5 = 1;
  *(void *)(a5 + 8) = 0;
  uint64_t v7 = *a1;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a5 + 8), *(long long **)(v7 + 24), *(long long **)(v7 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 32) - *(void *)(v7 + 24)) >> 3));
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*a1 + 32) - *(void *)(*a1 + 24)) >> 3);
  LOBYTE(v36[0]) = 1;
  std::vector<BOOL>::vector((void *)(a5 + 32), v8, (unsigned __int8 *)v36);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*a1 + 32) - *(void *)(*a1 + 24)) >> 3);
  LODWORD(v32) = -1082130432;
  std::vector<float>::vector((void *)(a5 + 56), v9, &v32);
  uint64_t v10 = *a1;
  if (*(int *)(*a1 + 192) >= 1)
  {
    int v11 = 0;
    do
    {
      scml::TextModerationLM::Impl::writeNextInputTensors(v10, &v37, a4);
      ik::core::E5OpImpl::Run(**(ik::core::E5OpImpl ***)(*a1 + 208), (uint64_t)v36);
      size_t v12 = std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::find<std::string>(v36, (unsigned __int8 *)(*a1 + 168));
      unint64_t v13 = v12;
      if (!v12) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = ik::Tensor::Data<float>((uint64_t)(v12 + 40));
      (*(void (**)(void **__return_ptr))(**((void **)v13 + 10) + 32))(v38);
      ik::ArrayView<float,-1>::ArrayView(&v32, v14, (uint64_t)v38);
      id v32 = &unk_2709731D0;
      if (v38[0])
      {
        v38[1] = v38[0];
        operator delete(v38[0]);
      }
      LODWORD(v38[0]) = 0;
      if (**((void **)v13 + 7))
      {
        do
        {
          uint64_t v15 = v33;
          uint64_t v16 = ik::ArrayView<float,-1>::IndexOf<int>((uint64_t)&v32, (int *)v38);
          unint64_t v17 = SLODWORD(v38[0]);
          BOOL v18 = *(float *)(v15 + 4 * v16) < *(float *)(*(void *)(*a1 + 48) + 4 * SLODWORD(v38[0]));
          if (*(unsigned char *)a5) {
            BOOL v19 = *(float *)(v15 + 4 * v16) < *(float *)(*(void *)(*a1 + 48) + 4 * SLODWORD(v38[0]));
          }
          else {
            BOOL v19 = 0;
          }
          *(unsigned char *)a5 = v19;
          uint64_t v20 = *(void *)(a5 + 32);
          uint64_t v21 = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
          uint64_t v22 = *(void *)(v20 + v21);
          if ((v22 & (1 << v17)) != 0 && v18) {
            uint64_t v23 = v22 | (1 << v17);
          }
          else {
            uint64_t v23 = v22 & ~(1 << v17);
          }
          *(void *)(v20 + v21) = v23;
          uint64_t v24 = *(void *)(a5 + 56);
          uint64_t v25 = v33;
          uint64_t v26 = ik::ArrayView<float,-1>::IndexOf<int>((uint64_t)&v32, (int *)v38);
          float v27 = *(float *)(v24 + 4 * v17);
          if (v27 < *(float *)(v25 + 4 * v26)) {
            float v27 = *(float *)(v25 + 4 * v26);
          }
          unint64_t v28 = SLODWORD(v38[0]);
          *(float *)(*(void *)(a5 + 56) + 4 * SLODWORD(v38[0])) = v27;
          LODWORD(v38[0]) = ++v28;
        }
        while (**((void **)v13 + 7) > v28);
      }
      std::vector<int>::pointer begin = v37.__begin_;
      std::vector<int>::pointer end = v37.__end_;
      id v32 = &unk_270973330;
      if (__p)
      {
        uint64_t v35 = __p;
        operator delete(__p);
      }
      std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)v36);
      if (begin == end) {
        break;
      }
      ++v11;
      uint64_t v10 = *a1;
    }
    while (v11 < *(_DWORD *)(*a1 + 192));
  }
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
}

void sub_25BF7F040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (*v22) {
    operator delete(*v22);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t scml::TextModerationLM::isKnownSupportedDevice(scml::TextModerationLM *this)
{
  return MGGetBoolAnswer();
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  os_signpost_id_t v4 = this;
  int v11 = this;
  size_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        os_signpost_id_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      size_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_25BF7F1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ik::Tensor::Data<int>(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40));
}

void sub_25BF7F384(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *ik::ArrayView<int,-1>::ArrayView(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_270973350;
  a1[1] = a2;
  a1[2] = 0;
  os_signpost_id_t v4 = (void **)(a1 + 2);
  a1[3] = 0;
  a1[4] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  uint64_t v5 = (void *)a1[3];
  uint64_t v6 = *v4;
  BOOL v7 = v5 == *v4;
  a1[5] = v5 - *v4;
  if (!v7)
  {
    do
    {
      if ((*v6 & 3) != 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Inconsistent stride encountered.");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      *v6++ >>= 2;
    }
    while (v6 != v5);
  }
  return a1;
}

void sub_25BF7F470(_Unwind_Exception *exception_object)
{
  os_signpost_id_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void ik::MutableArrayView<int,-1>::~MutableArrayView(void *a1)
{
  *a1 = &unk_270973350;
  std::vector<int>::size_type v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x26117ABD0);
}

void *ik::ArrayView<int,-1>::~ArrayView(void *a1)
{
  *a1 = &unk_270973350;
  std::vector<int>::size_type v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void ik::ArrayView<int,-1>::~ArrayView(void *a1)
{
  *a1 = &unk_270973350;
  std::vector<int>::size_type v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x26117ABD0);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  std::vector<int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      std::vector<int>::pointer end = this->__end_;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    uint64_t v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    unint64_t v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::default_delete<scml::TextModerationTokenizer>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 136);
    *(void *)(a2 + 136) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    if (*(char *)(a2 + 135) < 0) {
      operator delete(*(void **)(a2 + 112));
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 72);
    os_signpost_id_t v4 = (void **)(a2 + 48);
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 8);
    MEMORY[0x26117ABD0](a2, 0x10B2C40C127E62CLL);
  }
}

uint64_t scml::Config::as<int>(_DWORD *a1)
{
  if (a1[10] != 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error((uint64_t)a1, (uint64_t)"not an integer", 14, (uint64_t)exception);
    goto LABEL_6;
  }
  if (*(void *)a1 != (int)*(void *)a1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error((uint64_t)a1, (uint64_t)"integer overflow", 16, (uint64_t)exception);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return *(void *)a1;
}

void sub_25BF7F83C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ik::ArrayView<int,-1>::IndexOf<int,unsigned long>(uint64_t a1, int *a2, void *a3)
{
  if (*(void *)(a1 + 40) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid number of indices provided.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return **(void **)(a1 + 16) * *a2 + *a3 * *(void *)(*(void *)(a1 + 16) + 8);
}

void sub_25BF7F8CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

scml::TextModerationLM::Impl *std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](scml::TextModerationLM::Impl **a1, scml::TextModerationLM::Impl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    scml::TextModerationLM::Impl::~Impl(result);
    JUMPOUT(0x26117ABD0);
  }
  return result;
}

void scml::TextModerationLM::Impl::~Impl(scml::TextModerationLM::Impl *this)
{
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)this + 216);
  std::unique_ptr<ik::E5Op>::reset[abi:ne180100]((ik::core::E5OpImpl ***)this + 26, 0);
  uint64_t v2 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v2) {
    std::default_delete<scml::TextModerationTokenizer>::operator()[abi:ne180100]((uint64_t)this + 200, v2);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  os_signpost_id_t v4 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t ik::ArrayView<float,-1>::IndexOf<int>(uint64_t a1, int *a2)
{
  if (*(void *)(a1 + 40) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid number of indices provided.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return **(void **)(a1 + 16) * *a2;
}

void sub_25BF7FA74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_25BF7FA88()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5842D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25BFF5C80;
  *(void *)(inited + 32) = sub_25BFF0380();
  *(void *)(inited + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v1;
  uint64_t v2 = sub_25BFF0910();
  uint64_t v3 = MEMORY[0x263F8D310];
  *(void *)(inited + 72) = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = v4;
  *(void *)(inited + 8std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = sub_25BFF0380();
  *(void *)(inited + 88) = v5;
  uint64_t v6 = sub_25BFF0910();
  *(void *)(inited + 12std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v3;
  *(void *)(inited + 96) = v6;
  *(void *)(inited + 104) = v7;
  return sub_25BF7FB90(inited);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_25BF7FB90(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5842D8);
  uint64_t v2 = sub_25BFF0800();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_25BF7FD3C(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_25BF7FCC4(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_25BF7FDA4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_25BF7FCBC()
{
  return sub_25BFF0910();
}

unint64_t sub_25BF7FCC4(uint64_t a1, uint64_t a2)
{
  sub_25BFF09C0();
  sub_25BFF0330();
  uint64_t v4 = sub_25BFF0A00();

  return sub_25BF7FDB4(a1, a2, v4);
}

uint64_t sub_25BF7FD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5842E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_25BF7FDA4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_25BF7FDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_25BFF0920() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_25BFF0920() & 1) == 0);
    }
  }
  return v6;
}

id sub_25BF7FE98()
{
  id v0 = objc_allocWithZone(MEMORY[0x263F08AE8]);
  id result = sub_25BF8088C(25180, 0xE200000000000000, 0);
  qword_26A584B20 = (uint64_t)result;
  return result;
}

unint64_t sub_25BF7FF14(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0) {
    goto LABEL_39;
  }
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  unint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    unint64_t v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    uint64_t v3 = sub_25BFF07D0();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v19 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1) {
      __break(1u);
    }
    unint64_t v4 = v19 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3) {
      return v2;
    }
    unint64_t v5 = 0;
    while (1)
    {
      unint64_t v7 = v5 + 1;
      unint64_t v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1)) {
        break;
      }
      if (v5 != v1)
      {
        unint64_t v8 = v20;
        if ((v20 & 0xC000000000000001) != 0)
        {
          uint64_t v11 = MEMORY[0x261179DC0](v5, v20);
          id v12 = (id)MEMORY[0x261179DC0](v3 - (v5 + 1), v20);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v9) {
            goto LABEL_34;
          }
          id v10 = *(id *)(v20 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0) {
            goto LABEL_35;
          }
          if (v1 >= v9) {
            goto LABEL_37;
          }
          uint64_t v11 = (uint64_t)v10;
          id v12 = *(id *)(v20 + 32 + 8 * v1);
        }
        id v13 = v12;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v20 & 0x8000000000000000) != 0
          || (v20 & 0x4000000000000000) != 0)
        {
          sub_25BF80968(v20);
          unint64_t v8 = v14;
          unint64_t v20 = v14;
        }
        uint64_t v15 = (v8 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(void *)(v15 + 32) = v13;
        sub_25BFF04E0();
        unint64_t v16 = v20;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v20 & 0x8000000000000000) != 0
          || (v20 & 0x4000000000000000) != 0)
        {
          sub_25BF80968(v20);
          unint64_t v16 = v17;
          unint64_t v20 = v17;
        }
        if ((v1 & 0x8000000000000000) != 0) {
          goto LABEL_36;
        }
        if (v1 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_38;
        }
        uint64_t v6 = (v16 & 0xFFFFFFFFFFFFFF8) + 8 * v1;

        *(void *)(v6 + 32) = v11;
        sub_25BFF04E0();
      }
      unint64_t v5 = v7;
      if (v4 == v7) {
        return v20;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t v2 = (uint64_t)sub_25BF80CFC(v1);
    unint64_t v20 = v2;
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
  }
}

uint64_t static TextSplitter.firstWordBoundary(text:after:maxDistance:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7 = sub_25BFF0600();
  if (v8) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9 >> 14 < a5 >> 14) {
    goto LABEL_18;
  }
  sub_25BFF0630();
  MEMORY[0x261179A80]();
  if (qword_26A584B18 != -1) {
    goto LABEL_19;
  }
  while (1)
  {
    id v10 = (void *)qword_26A584B20;
    uint64_t v11 = (void *)sub_25BFF0370();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_25BFF0620();
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v10, sel_matchesInString_options_range_, v11, 0, 0, v12);

    sub_25BF80CBC();
    unint64_t v14 = sub_25BFF04C0();

    if (v14 >> 62) {
      break;
    }
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      goto LABEL_21;
    }
LABEL_8:
    uint64_t v16 = 4;
    while (1)
    {
      id v17 = (v14 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x261179DC0](v16 - 4, v14)
          : *(id *)(v14 + 8 * v16);
      int v18 = v17;
      uint64_t v19 = v16 - 3;
      if (__OFADD__(v16 - 4, 1)) {
        break;
      }
      uint64_t v20 = (uint64_t)objc_msgSend(v17, sel_range);
      if (v20 >= 1 && v20 < sub_25BFF0410())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        objc_msgSend(v18, sel_range);
        uint64_t v21 = sub_25BFF0610();
        swift_bridgeObjectRelease();

        return v21;
      }

      ++v16;
      if (v19 == v15) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_25BFF07D0();
  swift_bridgeObjectRelease();
  if (v15) {
    goto LABEL_8;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t static TextSplitter.lastWordBoundary(text:before:maxDistance:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  return sub_25BF80DF4(a1, a2, a3, a4, a5, a6);
}

uint64_t static TextSplitter.splitInHalf(_:overlap:maxWordBoundarySearch:)@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_25BFF0620();
  swift_bridgeObjectRelease();
  if (__OFADD__(v14, a5)) {
    goto LABEL_20;
  }
  uint64_t v15 = sub_25BFF0610();
  BOOL v16 = __OFADD__(a6, 1);
  uint64_t v17 = a6 + 1;
  if (v16) {
    goto LABEL_21;
  }
  unint64_t v18 = v15;
  uint64_t v19 = sub_25BFF0600();
  if (v20) {
    unint64_t v21 = a2;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21 >> 14 < v18 >> 14) {
    goto LABEL_22;
  }
  uint64_t v47 = a7;
  uint64_t v48 = v17;
  uint64_t v49 = a5;
  unint64_t v46 = v18;
  uint64_t v53 = a4;
  sub_25BFF0630();
  MEMORY[0x261179A80]();
  if (qword_26A584B18 != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v50 = (unint64_t)a1;
    unint64_t v51 = a2;
    uint64_t v52 = a3;
    uint64_t v22 = (void *)qword_26A584B20;
    uint64_t v23 = (void *)sub_25BFF0370();
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_25BFF0620();
    swift_bridgeObjectRelease();
    id v25 = objc_msgSend(v22, sel_matchesInString_options_range_, v23, 0, 0, v24);

    sub_25BF80CBC();
    a2 = sub_25BFF04C0();

    if (a2 >> 62) {
      break;
    }
    uint64_t v26 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v26) {
      goto LABEL_25;
    }
LABEL_10:
    uint64_t v27 = 4;
    a1 = &unk_2654A9000;
    while (1)
    {
      id v28 = (a2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x261179DC0](v27 - 4, a2) : *(id *)(a2 + 8 * v27);
      unint64_t v29 = v28;
      a3 = v27 - 3;
      if (__OFADD__(v27 - 4, 1)) {
        break;
      }
      uint64_t v30 = (uint64_t)objc_msgSend(v28, sel_range);
      if (v30 >= 1 && v30 < sub_25BFF0410())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        objc_msgSend(v29, sel_range);
        unint64_t v31 = sub_25BFF0610();
        swift_bridgeObjectRelease();

        goto LABEL_26;
      }

      ++v27;
      if (a3 == v26) {
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_25BFF07D0();
  swift_bridgeObjectRelease();
  if (v26) {
    goto LABEL_10;
  }
LABEL_25:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v31 = v46;
LABEL_26:
  swift_bridgeObjectRetain();
  uint64_t v32 = sub_25BFF0620();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v32, v49))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v34 = sub_25BFF0610();
  uint64_t result = sub_25BF80DF4(v50, v51, v52, v53, v34, v48);
  if ((v35 & 1) == 0) {
    unint64_t v34 = result;
  }
  if (v31 >> 14 < v50 >> 14) {
    goto LABEL_33;
  }
  uint64_t result = sub_25BFF0630();
  if (v51 >> 14 >= v34 >> 14)
  {
    uint64_t v39 = result;
    uint64_t v40 = v36;
    uint64_t v41 = v37;
    uint64_t v42 = v38;
    uint64_t result = sub_25BFF0630();
    uint64_t *v47 = v39;
    v47[1] = v40;
    void v47[2] = v41;
    v47[3] = v42;
    v47[4] = result;
    v47[5] = v43;
    v47[6] = v44;
    v47[7] = v45;
    return result;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t TextSplitter.deinit()
{
  return v0;
}

uint64_t TextSplitter.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t sub_25BF8087C()
{
  return swift_allocObject();
}

id sub_25BF8088C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[1] = *(id *)MEMORY[0x263EF8340];
  unint64_t v5 = (void *)sub_25BFF0370();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v6 = objc_msgSend(v3, sel_initWithPattern_options_error_, v5, a3, v10);

  if (v6)
  {
    id v7 = v10[0];
  }
  else
  {
    id v8 = v10[0];
    sub_25BFEFDB0();

    swift_willThrow();
  }
  return v6;
}

void sub_25BF80968(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_25BFF07D0();
    swift_bridgeObjectRelease();
  }

  JUMPOUT(0x261179DD0);
}

uint64_t sub_25BF809E4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_25BFF07D0();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_25BFF07D0();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_25BF810F4();
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_26A5842F8);
            id v10 = sub_25BF80B84(v13, i, a3);
            id v12 = *v11;
            ((void (*)(void (**)(id *), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_25BF80CBC();
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void (*sub_25BF80B84(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_25BF80C34(v6, a2, a3);
  return sub_25BF80BEC;
}

void sub_25BF80BEC(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_25BF80C34(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x261179DC0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_25BF80CB4;
  }
  __break(1u);
  return result;
}

void sub_25BF80CB4(id *a1)
{
}

unint64_t sub_25BF80CBC()
{
  unint64_t result = qword_26A5842E8;
  if (!qword_26A5842E8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26A5842E8);
  }
  return result;
}

void *sub_25BF80CFC(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A5842F0);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = _swift_stdlib_malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      void v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_25BF809E4((uint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_25BFF07D0();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  return v3;
}

uint64_t sub_25BF80DF4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (__OFSUB__(0, a6)) {
    goto LABEL_18;
  }
  unint64_t v8 = sub_25BFF0600();
  if (v9) {
    unint64_t v8 = a1;
  }
  if (a5 >> 14 < v8 >> 14) {
    goto LABEL_19;
  }
  sub_25BFF0630();
  MEMORY[0x261179A80]();
  if (qword_26A584B18 != -1) {
    goto LABEL_20;
  }
  while (1)
  {
    id v10 = (void *)qword_26A584B20;
    uint64_t v11 = (void *)sub_25BFF0370();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_25BFF0620();
    swift_bridgeObjectRelease();
    id v13 = objc_msgSend(v10, sel_matchesInString_options_range_, v11, 0, 0, v12);

    sub_25BF80CBC();
    unint64_t v14 = sub_25BFF04C0();

    unint64_t v15 = sub_25BF7FF14(v14);
    unint64_t v16 = v15;
    if (v15 >> 62) {
      break;
    }
    uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v17) {
      goto LABEL_22;
    }
LABEL_8:
    uint64_t v18 = 4;
    while (1)
    {
      id v19 = (v16 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x261179DC0](v18 - 4, v16)
          : *(id *)(v16 + 8 * v18);
      char v20 = v19;
      uint64_t v21 = v18 - 3;
      if (__OFADD__(v18 - 4, 1)) {
        break;
      }
      uint64_t v22 = (uint64_t)objc_msgSend(v19, sel_range);
      if (v22 >= 1 && v22 < sub_25BFF0410())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        objc_msgSend(v20, sel_range);
        uint64_t v23 = sub_25BFF0610();
        swift_bridgeObjectRelease();

        return v23;
      }

      ++v18;
      if (v21 == v17) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    swift_once();
  }
  uint64_t v17 = sub_25BFF07D0();
  if (v17) {
    goto LABEL_8;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for TextSplitter()
{
  return self;
}

uint64_t method lookup function for TextSplitter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TextSplitter);
}

unint64_t sub_25BF810F4()
{
  unint64_t result = qword_26A584300;
  if (!qword_26A584300)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A5842F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584300);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_25BF81198()
{
  uint64_t v0 = sub_25BF87598((uint64_t)&unk_270971468);
  uint64_t result = swift_arrayDestroy();
  qword_26A584B38 = v0;
  return result;
}

uint64_t SCMLSafetyGuardrailResult.safe.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_safe);
}

uint64_t SCMLSafetyGuardrailResult.labels.getter()
{
  return swift_bridgeObjectRetain();
}

id SCMLSafetyGuardrailResult.__allocating_init(result:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return SCMLSafetyGuardrailResult.init(result:)(a1, a2);
}

id SCMLSafetyGuardrailResult.init(result:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_25BFEFD50();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v48 = a1;
  *((void *)&v48 + 1) = a2;
  sub_25BF8178C();
  char v9 = v2;
  uint64_t v10 = sub_25BFF06A0();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_25BFF05F0();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    if (v12 == 1701208435 && v14 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      char v16 = 1;
    }
    else
    {
      char v16 = sub_25BFF0920();
      swift_bridgeObjectRelease();
    }
    v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_safe] = v16 & 1;
    goto LABEL_32;
  }
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_safe] = 0;
LABEL_32:
    uint64_t v38 = MEMORY[0x263F8EE78];
LABEL_33:
    *(void *)&v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_labels] = v38;

    uint64_t v42 = (objc_class *)type metadata accessor for SCMLSafetyGuardrailResult();
    v46.receiver = v9;
    v46.super_class = v42;
    return objc_msgSendSuper2(&v46, sel_init);
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_25BFF05F0();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (v17 == 1701208435 && v19 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  char v21 = sub_25BFF0920();
  id result = (id)swift_bridgeObjectRelease();
  if (v21)
  {
LABEL_30:
    v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_safe] = 1;
    goto LABEL_31;
  }
  if (qword_26A584B30 != -1) {
    id result = (id)swift_once();
  }
  uint64_t v45 = v5;
  if (*(void *)(v10 + 16) < 2uLL)
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v23 = qword_26A584B38;
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_25BFF05F0();
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  LOBYTE(v23) = sub_25BF817E0(v24, v26, v23);
  id result = (id)swift_bridgeObjectRelease();
  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_safe] = v23 & 1;
  if (v23)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  if (*(void *)(v10 + 16) >= 2uLL)
  {
    long long v44 = *(_OWORD *)(v10 + 64);
    uint64_t v27 = *(void *)(v10 + 80);
    uint64_t v28 = *(void *)(v10 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    long long v48 = v44;
    uint64_t v49 = v27;
    uint64_t v50 = v28;
    *(void *)&long long v44 = sub_25BF81918();
    uint64_t v29 = sub_25BFF06A0();
    swift_bridgeObjectRelease();
    int64_t v30 = *(void *)(v29 + 16);
    if (v30)
    {
      uint64_t v47 = MEMORY[0x263F8EE78];
      sub_25BF86D74(0, v30, 0);
      unint64_t v31 = (void (**)(char *, uint64_t))(v6 + 8);
      v43[1] = v29;
      uint64_t v32 = (uint64_t *)(v29 + 56);
      do
      {
        uint64_t v33 = *(v32 - 1);
        uint64_t v34 = *v32;
        long long v48 = *(_OWORD *)(v32 - 3);
        uint64_t v49 = v33;
        uint64_t v50 = v34;
        swift_bridgeObjectRetain();
        sub_25BFEFD30();
        uint64_t v35 = sub_25BFF0660();
        uint64_t v37 = v36;
        (*v31)(v8, v45);
        swift_bridgeObjectRelease();
        uint64_t v38 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_25BF86D74(0, *(void *)(v38 + 16) + 1, 1);
          uint64_t v38 = v47;
        }
        unint64_t v40 = *(void *)(v38 + 16);
        unint64_t v39 = *(void *)(v38 + 24);
        if (v40 >= v39 >> 1)
        {
          sub_25BF86D74(v39 > 1, v40 + 1, 1);
          uint64_t v38 = v47;
        }
        *(void *)(v38 + 16) = v40 + 1;
        uint64_t v41 = v38 + 16 * v40;
        *(void *)(v41 + 32) = v35;
        *(void *)(v41 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v37;
        v32 += 4;
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
    goto LABEL_31;
  }
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_25BF8178C()
{
  unint64_t result = qword_26A584318;
  if (!qword_26A584318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584318);
  }
  return result;
}

uint64_t sub_25BF817E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_25BFF09C0();
    sub_25BFF0330();
    uint64_t v6 = sub_25BFF0A00();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_25BFF0920() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          char v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_25BFF0920() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

unint64_t sub_25BF81918()
{
  unint64_t result = qword_26A584320;
  if (!qword_26A584320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584320);
  }
  return result;
}

void SCMLSafetyGuardrailResult.init()()
{
}

id SCMLSafetyGuardrailResult.__deallocating_deinit(uint64_t a1)
{
  return sub_25BF85F38(a1, type metadata accessor for SCMLSafetyGuardrailResult);
}

uint64_t static SCMLSafetyGuardrail.maxNumberOfTokensForShortPrompt.getter()
{
  return 200;
}

uint64_t static SCMLSafetyGuardrail.maxOutputTokens.getter()
{
  return 30;
}

uint64_t SCMLSafetyGuardrail.bundleID.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_bundleID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SCMLSafetyGuardrail.__allocating_init(backend:onBehalfOf:modelManagerServicesUseCaseID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  return SCMLSafetyGuardrail.init(backend:onBehalfOf:modelManagerServicesUseCaseID:)(a1, a2, a3, a4);
}

uint64_t SCMLSafetyGuardrail.init(backend:onBehalfOf:modelManagerServicesUseCaseID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v77 = a4;
  uint64_t v73 = a3;
  uint64_t v71 = a2;
  sub_25BFEFEB0();
  ((void (*)(void))MEMORY[0x270FA5388])();
  uint64_t v70 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_25BFEFF70();
  uint64_t v8 = *(void *)(v75 - 8);
  uint64_t v9 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  long long v72 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  BOOL v12 = (char *)&v65 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584328);
  MEMORY[0x270FA5388](v13 - 8);
  unint64_t v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_25BFEFED0();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v80 = v16;
  uint64_t v81 = v17;
  MEMORY[0x270FA5388](v16);
  long long v76 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_25BFF0300();
  uint64_t v78 = *(void *)(v19 - 8);
  uint64_t v79 = v19;
  MEMORY[0x270FA5388](v19);
  char v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v4[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_chunkOverlap] = 30;
  uint64_t v22 = &v4[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_logger];
  uint64_t v23 = v4;
  uint64_t v24 = a1;
  uint64_t v25 = v23;
  long long v82 = v22;
  sub_25BFF01D0();
  if (v24 == 16)
  {
    uint64_t v69 = 16;
    sub_25BFF02F0();
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(&v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_systemPrompt], v21, v79);
    sub_25BFEFE10();
    __swift_project_boxed_opaque_existential_1(v84, v84[3]);
    uint64_t v29 = sub_25BFEFE40();
    int64_t v30 = (uint64_t *)&v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_bundleID];
    *int64_t v30 = v29;
    v30[1] = v31;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v84);
  }
  else
  {
    if (v24 != 4)
    {
      swift_bridgeObjectRelease();
      sub_25BF86DB8();
      swift_allocError();
      *(void *)uint64_t v35 = v24;
      *(unsigned char *)(v35 + 8) = 0;
      swift_willThrow();
LABEL_19:
      uint64_t v60 = sub_25BFF01E0();
      (*(void (**)(char *, uint64_t))(*(void *)(v60 - 8) + 8))(v82, v60);

      type metadata accessor for SCMLSafetyGuardrail();
      swift_deallocPartialClassInstance();
      return (uint64_t)v12;
    }
    uint64_t v69 = 4;
    sub_25BFF02F0();
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(&v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_systemPrompt], v21, v79);
    uint64_t v26 = static SCMLAsset.safetyID.getter();
    uint64_t v27 = (uint64_t *)&v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_bundleID];
    *uint64_t v27 = v26;
    v27[1] = v28;
  }
  long long v74 = (uint64_t *)&v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_bundleID];
  swift_bridgeObjectRetain();
  sub_25BFEFEC0();
  uint64_t v33 = v80;
  uint64_t v32 = v81;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v15, 1, v80) == 1)
  {
    swift_bridgeObjectRelease();
    sub_25BF8830C((uint64_t)v15, &qword_26A584328);
    sub_25BF86DB8();
    swift_allocError();
    *(void *)uint64_t v34 = 0;
    *(unsigned char *)(v34 + 8) = 1;
    swift_willThrow();
LABEL_18:
    (*(void (**)(char *, uint64_t))(v78 + 8))(&v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_systemPrompt], v79);
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v76, v15, v33);
  uint64_t v36 = v25;
  uint64_t v37 = sub_25BFF01C0();
  os_log_type_t v38 = sub_25BFF0570();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v67 = v5;
  uint64_t v66 = v8;
  long long v68 = v12;
  v65 = v36;
  if (v39)
  {
    unint64_t v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    v84[0] = v41;
    *(_DWORD *)unint64_t v40 = 136315138;
    uint64_t v42 = *v74;
    unint64_t v43 = v74[1];
    swift_bridgeObjectRetain();
    uint64_t v85 = sub_25BF866A0(v42, v43, v84);
    BOOL v12 = v68;
    uint64_t v36 = v65;
    sub_25BFF0640();

    uint64_t v33 = v80;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25BF41000, v37, v38, "Begin prewarm safety guardrail: %s", v40, 0xCu);
    swift_arrayDestroy();
    uint64_t v44 = v41;
    uint64_t v8 = v66;
    MEMORY[0x26117B7A0](v44, -1, -1);
    MEMORY[0x26117B7A0](v40, -1, -1);
  }
  else
  {
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584338);
  uint64_t v45 = v81;
  unint64_t v46 = (*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_25BFF5CF0;
  (*(void (**)(unint64_t, char *, uint64_t))(v45 + 16))(v47 + v46, v76, v33);
  sub_25BFEFEA0();
  sub_25BFEFF60();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v72, v12, v75);
  sub_25BFEFE90();
  swift_allocObject();
  uint64_t v48 = sub_25BFEFE70();
  uint64_t v49 = OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_tokenGen;
  *(void *)&v36[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_tokenGen] = v48;
  swift_retain();
  sub_25BFEFE80();
  swift_release();
  BOOL v12 = v36;
  uint64_t v50 = sub_25BFF01C0();
  os_log_type_t v51 = sub_25BFF0570();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    v84[0] = v53;
    uint64_t v77 = v49;
    *(_DWORD *)uint64_t v52 = 136315138;
    uint64_t v54 = *v74;
    unint64_t v55 = v74[1];
    swift_bridgeObjectRetain();
    uint64_t v85 = sub_25BF866A0(v54, v55, v84);
    sub_25BFF0640();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25BF41000, v50, v51, "End prewarm safety guardrail: %s", v52, 0xCu);
    swift_arrayDestroy();
    uint64_t v56 = v53;
    uint64_t v8 = v66;
    MEMORY[0x26117B7A0](v56, -1, -1);
    MEMORY[0x26117B7A0](v52, -1, -1);
  }
  else
  {
  }
  uint64_t v57 = v67;
  if (v69 == 16)
  {
    uint64_t v58 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_21;
  }
  swift_retain();
  uint64_t v59 = sub_25BFEFE50();
  if (v57)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v68, v75);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v76, v80);
    swift_release();
    goto LABEL_18;
  }
  uint64_t v61 = v59;
  uint64_t result = swift_release();
  uint64_t v58 = v61 - 200;
  if (!__OFSUB__(v61, 200))
  {
LABEL_21:
    uint64_t v63 = v81;
    *(void *)&v12[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_maxChunkSize] = v58;

    long long v64 = (objc_class *)type metadata accessor for SCMLSafetyGuardrail();
    v83.receiver = v12;
    v83.super_class = v64;
    BOOL v12 = (char *)objc_msgSendSuper2(&v83, sel_init);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v68, v75);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v76, v80);
    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_25BF825E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_25BF8269C;
  return sub_25BF82790(a1, v3, a2, a3);
}

uint64_t sub_25BF8269C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_25BF82790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[37] = a3;
  v4[38] = a4;
  v4[35] = a1;
  v4[36] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843D8);
  v4[39] = swift_task_alloc();
  v4[40] = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843E0);
  v4[41] = swift_task_alloc();
  uint64_t v5 = sub_25BFF0000();
  v4[42] = v5;
  v4[43] = *(void *)(v5 - 8);
  v4[44] = swift_task_alloc();
  uint64_t v6 = sub_25BFF0010();
  v4[45] = v6;
  v4[46] = *(void *)(v6 - 8);
  v4[47] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843E8);
  v4[48] = swift_task_alloc();
  uint64_t v7 = sub_25BFF0150();
  v4[49] = v7;
  v4[50] = *(void *)(v7 - 8);
  v4[51] = swift_task_alloc();
  v4[52] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843F0);
  v4[53] = swift_task_alloc();
  v4[54] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843F8);
  v4[55] = v8;
  v4[56] = *(void *)(v8 - 8);
  v4[57] = swift_task_alloc();
  uint64_t v9 = sub_25BFF0210();
  v4[58] = v9;
  v4[59] = *(void *)(v9 - 8);
  v4[60] = swift_task_alloc();
  v4[61] = swift_task_alloc();
  v4[62] = swift_task_alloc();
  v4[63] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25BF82AD4, 0, 0);
}

uint64_t sub_25BF82AD4()
{
  uint64_t v1 = *(void *)(v0 + 496);
  uint64_t v2 = *(void *)(v0 + 472);
  uint64_t v21 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 448);
  uint64_t v4 = *(void *)(v0 + 456);
  uint64_t v5 = *(void *)(v0 + 432);
  uint64_t v6 = *(void *)(v0 + 440);
  uint64_t v7 = *(void *)(v0 + 424);
  uint64_t v22 = *(void *)(v0 + 384);
  uint64_t v8 = *(void *)(v0 + 304);
  long long v20 = *(_OWORD *)(v0 + 288);
  uint64_t v9 = swift_task_alloc();
  *(_OWORD *)(v9 + 16) = v20;
  *(void *)(v9 + 32) = v8;
  sub_25BFF0220();
  swift_task_dealloc();
  uint64_t v10 = sub_25BFEFEF0();
  *(void *)(v0 + 512) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  BOOL v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  *(void *)(v0 + 52std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v12;
  *(void *)(v0 + 528) = (v11 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v12(v5, 1, 1, v10);
  sub_25BF883E4(v5, v7, &qword_26A5843F0);
  sub_25BFEFF30();
  sub_25BFEFF20();
  sub_25BFEFF00();
  sub_25BFEFF10();
  sub_25BF8830C(v5, &qword_26A5843F0);
  *(_DWORD *)(v0 + 608) = *MEMORY[0x263F413E0];
  uint64_t v13 = *(void (**)(uint64_t))(v3 + 104);
  *(void *)(v0 + 536) = v13;
  *(void *)(v0 + 544) = (v3 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v13(v4);
  *(void *)(v0 + 552) = sub_25BF882C4(&qword_26A584400, MEMORY[0x263F61FA8]);
  sub_25BFF02A0();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 56std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v14;
  *(void *)(v0 + 568) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v14(v4, v6);
  unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 576) = v15;
  *(void *)(v0 + 584) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v15(v1, v21);
  uint64_t v16 = sub_25BFF0140();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v22, 1, 1, v16);
  sub_25BFF0130();
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 592) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_25BF82E30;
  uint64_t v18 = *(void *)(v0 + 312);
  return MEMORY[0x270F2FCA0](v18, 0xD00000000000001CLL, 0x800000025C003880);
}

uint64_t sub_25BF82E30()
{
  *(void *)(*(void *)v1 + 60std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25BF837A0;
  }
  else {
    uint64_t v2 = sub_25BF82F44;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25BF82F44()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584408);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_25BF8830C(v1, &qword_26A5843D8);
  }
  else
  {
    uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v0 + 576);
    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
    uint64_t v50 = *(void (**)(uint64_t, void, uint64_t))(v0 + 536);
    unsigned int v49 = *(_DWORD *)(v0 + 608);
    unint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 520);
    uint64_t v45 = *(void *)(v0 + 512);
    uint64_t v56 = *(void *)(v0 + 496);
    uint64_t v57 = *(void *)(v0 + 504);
    uint64_t v58 = *(void *)(v0 + 464);
    uint64_t v59 = *(void *)(v0 + 472);
    uint64_t v47 = *(void *)(v0 + 456);
    uint64_t v48 = *(void *)(v0 + 440);
    uint64_t v43 = *(void *)(v0 + 432);
    uint64_t v44 = *(void *)(v0 + 424);
    uint64_t v37 = *(void *)(v0 + 408);
    uint64_t v38 = *(void *)(v0 + 400);
    uint64_t v39 = *(void *)(v0 + 392);
    uint64_t v40 = *(void *)(v0 + 416);
    uint64_t v61 = *(void *)(v0 + 376);
    uint64_t v55 = *(void *)(v0 + 368);
    uint64_t v3 = *(void *)(v0 + 320);
    uint64_t v4 = *(void *)(v0 + 328);
    uint64_t v35 = v1 + *(int *)(v2 + 48);
    uint64_t v34 = v4 + *(int *)(v3 + 48);
    uint64_t v5 = *(void *)(v0 + 360);
    uint64_t v36 = *(void *)(v0 + 352);
    uint64_t v7 = *(void *)(v0 + 336);
    uint64_t v6 = *(void *)(v0 + 344);
    uint64_t v41 = *(void *)(v0 + 296);
    uint64_t v42 = *(void *)(v0 + 304);
    uint64_t v51 = *(void *)(v0 + 288);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32);
    v8(v4, v1, v5);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v9(v34, v35, v7);
    uint64_t v10 = v4 + *(int *)(v3 + 48);
    v8(v61, v4, v5);
    v9(v36, v10, v7);
    sub_25BFEFFF0();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v39);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v40, v37, v39);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A584410);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25BFF5CF0;
    *(void *)(inited + 32) = 1954047348;
    *(void *)(inited + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0xE400000000000000;
    uint64_t v12 = MEMORY[0x263F62188];
    *(void *)(inited + 72) = MEMORY[0x263F8D310];
    *(void *)(inited + 8std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v12;
    *(void *)(inited + 48) = v41;
    *(void *)(inited + 56) = v42;
    swift_bridgeObjectRetain();
    sub_25BF83D50(inited, &qword_26A584430, &qword_26A584438, (uint64_t (*)(uint64_t *, unint64_t))sub_25BF883CC);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A5842D0);
    uint64_t v13 = swift_initStackObject();
    *(_OWORD *)(v13 + 16) = xmmword_25BFF5CF0;
    *(void *)(v13 + 32) = 0xD000000000000080;
    *(void *)(v13 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0x800000025C0038A0;
    v46(v43, 1, 1, v45);
    sub_25BF883E4(v43, v44, &qword_26A5843F0);
    sub_25BFEFF30();
    sub_25BFEFF20();
    sub_25BFEFF00();
    sub_25BFEFF10();
    sub_25BF8830C(v43, &qword_26A5843F0);
    v50(v47, v49, v48);
    *(void *)(v13 + 72) = sub_25BFEFF40();
    __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v13 + 48));
    sub_25BFEFFB0();
    v52(v47, v48);
    sub_25BF7FB90(v13);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A584418);
    uint64_t v14 = swift_initStackObject();
    *(_OWORD *)(v14 + 16) = xmmword_25BFF5CF0;
    *(void *)(v14 + 32) = 0xD000000000000011;
    *(void *)(v14 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0x800000025C003930;
    uint64_t v15 = v51 + OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_systemPrompt;
    uint64_t v16 = sub_25BFF0300();
    uint64_t v17 = MEMORY[0x263F62180];
    *(void *)(v14 + 72) = v16;
    *(void *)(v14 + 8std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v17;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v14 + 48));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(boxed_opaque_existential_0Tm, v15, v16);
    sub_25BF83D50(v14, &qword_26A584420, &qword_26A584428, (uint64_t (*)(uint64_t *, unint64_t))sub_25BF883CC);
    sub_25BFEFFE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v36, v7);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v61, v5);
    v60(v57, v58);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 32))(v57, v56, v58);
  }
  uint64_t v19 = *(void *)(v0 + 600);
  sub_25BFF0290();
  sub_25BFF0280();
  if (v19)
  {
    long long v20 = *(void (**)(uint64_t, uint64_t))(v0 + 576);
    uint64_t v21 = *(void *)(v0 + 504);
    uint64_t v22 = *(void *)(v0 + 464);
    uint64_t v23 = *(void *)(v0 + 416);
    uint64_t v24 = *(void *)(v0 + 392);
    uint64_t v25 = *(void *)(v0 + 400);
    v20(*(void *)(v0 + 480), v22);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
    v20(v21, v22);
  }
  else
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 576);
    uint64_t v28 = *(void *)(v0 + 504);
    uint64_t v29 = *(void *)(v0 + 488);
    uint64_t v30 = *(void *)(v0 + 464);
    uint64_t v31 = *(void *)(v0 + 400);
    uint64_t v53 = *(void *)(v0 + 392);
    uint64_t v54 = *(void *)(v0 + 416);
    uint64_t v32 = *(void *)(v0 + 288);
    v27(*(void *)(v0 + 480), v30);
    *(void *)(v0 + 272) = *(void *)(v32 + OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_tokenGen);
    sub_25BFEFE90();
    sub_25BFF02B0();
    v27(v29, v30);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v54, v53);
    v27(v28, v30);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t sub_25BF837A0()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[72];
  uint64_t v2 = v0[63];
  uint64_t v3 = v0[58];
  (*(void (**)(void, void))(v0[50] + 8))(v0[52], v0[49]);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_25BF838F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v23 = a1;
  uint64_t v28 = a3;
  uint64_t v3 = sub_25BFF02D0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25BFF0210();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v22 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v22 - v11;
  sub_25BFF0300();
  sub_25BFF0240();
  uint64_t v13 = v25;
  uint64_t v26 = v23;
  uint64_t v27 = v24;
  sub_25BFF02E0();
  uint64_t v25 = v13;
  uint64_t v14 = v22;
  sub_25BFF0240();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584440);
  uint64_t v15 = *(void *)(v8 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_25BFF5C80;
  unint64_t v18 = v17 + v16;
  uint64_t v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 16);
  v19(v18, v12, v7);
  v19(v18 + v15, v14, v7);
  MEMORY[0x2611798E0](v17);
  swift_bridgeObjectRelease();
  long long v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v14, v7);
  return ((uint64_t (*)(char *, uint64_t))v20)(v12, v7);
}

uint64_t sub_25BF83BB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25BFF0270();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v13[3] = MEMORY[0x263F8D310];
  void v13[4] = MEMORY[0x263F62188];
  v13[0] = a1;
  v13[1] = a2;
  swift_bridgeObjectRetain();
  uint64_t v8 = MEMORY[0x263F620B0];
  sub_25BFF0260();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584448);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_25BFF5CF0;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v10 + v9, v7, v4);
  MEMORY[0x261179900](v10, v4, v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_25BF83D50(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, unint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = sub_25BFF0800();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_25BF883E4(v11, (uint64_t)&v20, a3);
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    unint64_t result = sub_25BF7FCC4(v20, v21);
    if (v15) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v16 = (uint64_t *)(v8[6] + 16 * result);
    *unint64_t v16 = v12;
    v16[1] = v13;
    unint64_t result = a4(&v22, v8[7] + 40 * result);
    uint64_t v17 = v8[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    void v8[2] = v19;
    v11 += 56;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_25BF83E94(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_25BFEFF80();
  void v3[5] = v4;
  void v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25BF83F58, 0, 0);
}

uint64_t sub_25BF83F58()
{
  unint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  unint64_t v3 = v0[2];
  uint64_t v4 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v4 = v0[2];
  }
  uint64_t v5 = 7;
  if (((v1 >> 60) & ((v3 & 0x800000000000000) == 0)) != 0) {
    uint64_t v5 = 11;
  }
  int64_t v6 = sub_25BF87160(0xFuLL, v5 | (v4 << 16), v3, v1);
  int64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_maxChunkSize);
  v0[8] = v7;
  if (v7 >= v6)
  {
    uint64_t v11 = v0[2];
    uint64_t v10 = v0[3];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843D0);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_25BFF5CF0;
    *(void *)(v12 + 32) = v11;
    *(void *)(v12 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v10;
    swift_bridgeObjectRetain();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(uint64_t))v0[1];
    return v13(v12);
  }
  else
  {
    v0[9] = *(void *)(v0[4] + OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_tokenGen);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_25BFEFF90();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[10] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_25BF8410C;
    uint64_t v9 = v0[7];
    return MEMORY[0x270F7EBE0](v9);
  }
}

uint64_t sub_25BF8410C(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[11] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[7];
  uint64_t v6 = v4[6];
  uint64_t v7 = v4[5];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_release();
    uint64_t v8 = sub_25BF84868;
  }
  else
  {
    v4[12] = a1;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    swift_release();
    uint64_t v8 = sub_25BF842B8;
  }
  return MEMORY[0x270FA2498](v8, 0, 0);
}

uint64_t sub_25BF842B8()
{
  uint64_t v26 = v0;
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  if (*(void *)(v0 + 64) >= *(void *)(v0 + 96))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843D0);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_25BFF5CF0;
    *(void *)(v20 + 32) = v1;
    *(void *)(v20 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v2;
    swift_bridgeObjectRetain();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v21(v20);
  }
  else
  {
    type metadata accessor for TextSplitter();
    swift_bridgeObjectRetain();
    unint64_t v3 = (void *)sub_25BFF0490();
    unint64_t v5 = v4;
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    static TextSplitter.splitInHalf(_:overlap:maxWordBoundarySearch:)(v3, v5, v7, v9, 30, 30, v22);
    uint64_t v11 = v22[0];
    uint64_t v10 = v22[1];
    uint64_t v12 = v22[2];
    uint64_t v13 = v22[3];
    *(_OWORD *)(v0 + 104) = v23;
    uint64_t v14 = v25;
    *(void *)(v0 + 12std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v24;
    *(void *)(v0 + 128) = v14;
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x261179A80](v11, v10, v12, v13);
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 136) = v17;
    BOOL v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v18;
    void *v18 = v0;
    v18[1] = sub_25BF844D8;
    return sub_25BF83E94(v15, v17);
  }
}

uint64_t sub_25BF844D8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 152) = a1;
  *(void *)(v3 + 16std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v4 = sub_25BF848CC;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v4 = sub_25BF845F4;
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t sub_25BF845F4()
{
  uint64_t v1 = MEMORY[0x261179A80](v0[13], v0[14], v0[15], v0[16]);
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  v0[21] = v3;
  unint64_t v4 = (void *)swift_task_alloc();
  v0[22] = v4;
  *unint64_t v4 = v0;
  v4[1] = sub_25BF846B8;
  return sub_25BF83E94(v1, v3);
}

uint64_t sub_25BF846B8(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = sub_25BF84940;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v4 + 192) = a1;
    unint64_t v5 = sub_25BF847E8;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_25BF847E8()
{
  uint64_t v3 = v0[19];
  sub_25BF87008(v0[24]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  return v1(v3);
}

uint64_t sub_25BF84868()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25BF848CC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25BF84940()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25BF849B8(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584360);
  v3[19] = v4;
  v3[20] = *(void *)(v4 - 8);
  v3[21] = swift_task_alloc();
  uint64_t v5 = sub_25BFEFD50();
  v3[22] = v5;
  v3[23] = *(void *)(v5 - 8);
  v3[24] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25BF84ADC, 0, 0);
}

uint64_t sub_25BF84ADC()
{
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[17];
  v0[2] = v0[16];
  v0[3] = v4;
  sub_25BFEFD30();
  sub_25BF8178C();
  uint64_t v5 = sub_25BFF0660();
  uint64_t v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[4] = v5;
  v0[5] = v7;
  v0[6] = 0xD000000000000020;
  v0[7] = 0x800000025C003520;
  v0[8] = 0;
  v0[9] = 0xE000000000000000;
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_25BFF0670();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[10] = v8;
  v0[11] = v10;
  v0[12] = 0xD00000000000003ELL;
  v0[13] = 0x800000025C003550;
  v0[14] = 0;
  v0[15] = 0xE000000000000000;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_25BFF0670();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[25] = v13;
  swift_arrayDestroy();
  uint64_t v14 = (void *)swift_task_alloc();
  v0[26] = v14;
  void *v14 = v0;
  v14[1] = sub_25BF84D20;
  return sub_25BF83E94(v11, v13);
}

uint64_t sub_25BF84D20(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 216) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return MEMORY[0x270FA2498](sub_25BF84E94, 0, 0);
  }
}

uint64_t sub_25BF84E94()
{
  uint64_t v22 = v0;
  uint64_t v1 = (void *)v0[27];
  uint64_t v2 = v1[2];
  v0[28] = v2;
  if (v2)
  {
    uint64_t v3 = (void *)v0[18];
    v0[29] = OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_logger;
    uint64_t v4 = ((*MEMORY[0x263F8EED0] & *v3) + 160) & 0xFFFFFFFFFFFFLL | 0x1687000000000000;
    v0[30] = *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0xA0);
    v0[31] = v4;
    v0[32] = 0;
    uint64_t v5 = v1[4];
    unint64_t v6 = v1[5];
    v0[33] = v6;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v7 = sub_25BFF01C0();
    os_log_type_t v8 = sub_25BFF0550();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[27];
    if (v9)
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v21 = v12;
      *(_DWORD *)uint64_t v11 = 134218499;
      *(void *)(v11 + 4) = 1;
      *(_WORD *)(v11 + 12) = 2048;
      uint64_t v13 = *(void *)(v10 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v11 + 14) = v13;
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 22) = 2085;
      swift_bridgeObjectRetain();
      *(void *)(v11 + 24) = sub_25BF866A0(v5, v6, &v21);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25BF41000, v7, v8, "Safety guardrail chunk %ld of %ld: %{sensitive}s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x26117B7A0](v12, -1, -1);
      MEMORY[0x26117B7A0](v11, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease_n();
    }
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))(v0[30] + *(int *)v0[30]);
    BOOL v18 = (void *)swift_task_alloc();
    v0[34] = v18;
    void *v18 = v0;
    v18[1] = sub_25BF851B0;
    uint64_t v19 = v0[21];
    return v20(v19, v5, v6);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v14 = objc_allocWithZone((Class)type metadata accessor for SCMLSafetyGuardrailResult());
    id v15 = SCMLSafetyGuardrailResult.init(result:)(1701208435, 0xE400000000000000);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(id))v0[1];
    return v16(v15);
  }
}

uint64_t sub_25BF851B0()
{
  uint64_t v2 = (void *)*v1;
  v2[35] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_25BF854C0, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[36] = v3;
    uint64_t v4 = sub_25BF882C4(&qword_26A584370, MEMORY[0x263F7F7D8]);
    void *v3 = v2;
    v3[1] = sub_25BF8536C;
    uint64_t v5 = v2[19];
    return MEMORY[0x270F2EEA0](v5, v4);
  }
}

uint64_t sub_25BF8536C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[37] = a1;
  v4[38] = a2;
  v4[39] = v2;
  swift_task_dealloc();
  (*(void (**)(void, void))(v4[20] + 8))(v4[21], v4[19]);
  if (v2)
  {
    uint64_t v5 = sub_25BF85548;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_25BF855D0;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_25BF854C0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25BF85548()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25BF855D0()
{
  uint64_t v37 = v0;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v1 = sub_25BFF01C0();
  os_log_type_t v2 = sub_25BFF0550();
  BOOL v3 = os_log_type_enabled(v1, v2);
  unint64_t v4 = v0[38];
  if (v3)
  {
    uint64_t v5 = v0[37];
    uint64_t v6 = v0[27];
    uint64_t v7 = v0[32] + 1;
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v36 = v9;
    *(_DWORD *)uint64_t v8 = 134218499;
    *(void *)(v8 + 4) = v7;
    *(_WORD *)(v8 + 12) = 2048;
    uint64_t v10 = *(void *)(v6 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v8 + 14) = v10;
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 22) = 2085;
    swift_bridgeObjectRetain();
    *(void *)(v8 + 24) = sub_25BF866A0(v5, v4, &v36);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25BF41000, v1, v2, "Safety guardrail result %ld of %ld: %{sensitive}s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x26117B7A0](v9, -1, -1);
    MEMORY[0x26117B7A0](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    swift_bridgeObjectRelease_n();
  }
  uint64_t v12 = v0[37];
  uint64_t v11 = v0[38];
  uint64_t v13 = (objc_class *)type metadata accessor for SCMLSafetyGuardrailResult();
  id v14 = objc_allocWithZone(v13);
  id v15 = SCMLSafetyGuardrailResult.init(result:)(v12, v11);
  id v16 = v15;
  if ((*((unsigned char *)v15 + OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_safe) & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  uint64_t v17 = v0[32];
  uint64_t v18 = v0[28];

  if (v17 + 1 == v18)
  {
    swift_bridgeObjectRelease_n();
    id v19 = objc_allocWithZone(v13);
    id v16 = SCMLSafetyGuardrailResult.init(result:)(1701208435, 0xE400000000000000);
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(id))v0[1];
    return v20(v16);
  }
  uint64_t v22 = v0[32];
  v0[32] = v22 + 1;
  uint64_t v23 = v0[27] + 16 * (v22 + 1);
  uint64_t v24 = *(void *)(v23 + 32);
  unint64_t v25 = *(void *)(v23 + 40);
  v0[33] = v25;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v26 = sub_25BFF01C0();
  os_log_type_t v27 = sub_25BFF0550();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = v22 + 2;
    uint64_t v29 = v0[27];
    uint64_t v30 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v36 = v31;
    *(_DWORD *)uint64_t v30 = 134218499;
    *(void *)(v30 + 4) = v28;
    *(_WORD *)(v30 + 12) = 2048;
    uint64_t v32 = *(void *)(v29 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v30 + 14) = v32;
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2085;
    swift_bridgeObjectRetain();
    *(void *)(v30 + 24) = sub_25BF866A0(v24, v25, &v36);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25BF41000, v26, v27, "Safety guardrail chunk %ld of %ld: %{sensitive}s", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x26117B7A0](v31, -1, -1);
    MEMORY[0x26117B7A0](v30, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    swift_bridgeObjectRelease_n();
  }
  uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))(v0[30] + *(int *)v0[30]);
  uint64_t v33 = (void *)swift_task_alloc();
  v0[34] = v33;
  *uint64_t v33 = v0;
  v33[1] = sub_25BF851B0;
  uint64_t v34 = v0[21];
  return v35(v34, v24, v25);
}

uint64_t sub_25BF85BF8(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  void v3[3] = _Block_copy(aBlock);
  uint64_t v5 = sub_25BFF0380();
  uint64_t v7 = v6;
  void v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_25BF85CCC;
  return sub_25BF849B8(v5, v7);
}

uint64_t sub_25BF85CCC(void *a1)
{
  BOOL v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (***)(void, void, void))(v5 + 24);
  if (v3)
  {
    uint64_t v9 = (void *)sub_25BFEFDA0();

    ((void (**)(void, void, void *))v8)[2](v8, 0, v9);
    _Block_release(v8);
  }
  else
  {
    ((void (**)(void, void *, void))v8)[2](v8, a1, 0);
    _Block_release(v8);
  }
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

id SCMLSafetyGuardrail.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void SCMLSafetyGuardrail.init()()
{
}

id SCMLSafetyGuardrail.__deallocating_deinit()
{
  return sub_25BF85F38(0, type metadata accessor for SCMLSafetyGuardrail);
}

id sub_25BF85F38(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

BOOL sub_25BF86048(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_25BF8605C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_25BF8606C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_25BF86078(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  objc_super v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *objc_super v4 = v3;
  v4[1] = sub_25BF88524;
  return v6();
}

uint64_t sub_25BF86144(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_25BF88524;
  return v7();
}

uint64_t sub_25BF86210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25BFF0540();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_25BFF0530();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_25BF8830C(a1, &qword_26A584388);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_25BFF0520();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_25BF863BC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_25BF86498;
  return v6(a1);
}

uint64_t sub_25BF86498()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void *sub_25BF86590(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843D0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      id v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_25BF881B0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_25BF866A0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_25BF86774(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_25BF884C4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_25BF884C4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t sub_25BF86774(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_25BFF0650();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_25BF86930(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_25BFF0750();
  if (!v8)
  {
    sub_25BFF07B0();
    __break(1u);
LABEL_17:
    uint64_t result = sub_25BFF0810();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_25BF86930(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_25BF869C8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_25BF86C24(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_25BF86C24(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_25BF869C8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_25BF86B40(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_25BFF0700();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_25BFF07B0();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_25BFF0440();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_25BFF0810();
    __break(1u);
LABEL_14:
    uint64_t result = sub_25BFF07B0();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_25BF86B40(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584450);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_25BF86BA8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_25BFF0470();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x261179B00](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_25BF86C24(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A584450);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25BFF0810();
  __break(1u);
  return result;
}

uint64_t sub_25BF86D74(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25BF86E9C(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t type metadata accessor for SCMLSafetyGuardrailResult()
{
  return self;
}

unint64_t sub_25BF86DB8()
{
  unint64_t result = qword_26A584330;
  if (!qword_26A584330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584330);
  }
  return result;
}

uint64_t type metadata accessor for SCMLSafetyGuardrail()
{
  uint64_t result = qword_26A584BE0;
  if (!qword_26A584BE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_25BF86E9C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843D0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  unint64_t v13 = v10 + 32;
  id v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_25BFF0810();
  __break(1u);
  return result;
}

uint64_t sub_25BF87008(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  char v3 = sub_25BF86590(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25BFF0810();
  __break(1u);
  return result;
}

unint64_t sub_25BF87160(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = sub_25BF87488(a1, a3, a4);
  unint64_t result = sub_25BF87488(a2, a3, a4);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_25BFF03E0();
        unint64_t v7 = result;
      }
      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = sub_25BFF0750();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }
        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14) {
        return v11;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        unint64_t result = sub_25BFF03F0();
        unint64_t v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((unsigned char *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0;
            do
              int v21 = *((unsigned char *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }
          else
          {
            uint64_t v19 = 1;
          }
        }
        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0) {
            unint64_t result = sub_25BFF0750();
          }
          uint64_t v17 = 0;
          do
            int v18 = *(unsigned char *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }
        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14) {
        return v11;
      }
    }
    goto LABEL_36;
  }
  return 0;
}

unint64_t sub_25BF87374(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      uint64_t v13[2] = v3;
      void v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v10 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          unint64_t v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            int v7 = *(unsigned char *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = sub_25BFF0750();
        unint64_t v5 = v12;
        if (v12 != v9) {
          goto LABEL_9;
        }
      }
      return v5 << 16;
    }
    uint64_t v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v8)
    {
      return MEMORY[0x270F9E998]();
    }
  }
  return result;
}

unint64_t sub_25BF87488(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    unint64_t result = sub_25BF87528(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_25BF87374(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_25BF87528(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    unint64_t result = sub_25BF86BA8(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 < result >> 16) {
    __break(1u);
  }
  return result;
}

uint64_t sub_25BF87598(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A584458);
    uint64_t v3 = sub_25BFF06D0();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      unint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      sub_25BFF09C0();
      swift_bridgeObjectRetain();
      sub_25BFF0330();
      uint64_t result = sub_25BFF0A00();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        id v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (uint64_t result = sub_25BFF0920(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            uint64_t result = sub_25BFF0920();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      int v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *int v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t _s26SensitiveContentAnalysisML19SCMLSafetyGuardrailC15trimEmojiPrefix4textS2S_tFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25BFEFD50();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  sub_25BFEFD30();
  sub_25BF8178C();
  uint64_t v8 = sub_25BFF0660();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v20 = v8;
  uint64_t v21 = v10;
  unint64_t v18 = 0xD000000000000020;
  unint64_t v19 = 0x800000025C003520;
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_25BFF0670();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = v11;
  uint64_t v21 = v13;
  unint64_t v18 = 0xD00000000000003ELL;
  unint64_t v19 = 0x800000025C003550;
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_25BFF0670();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  return v14;
}

uint64_t method lookup function for SCMLSafetyGuardrailResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SCMLSafetyGuardrailResult);
}

uint64_t dispatch thunk of SCMLSafetyGuardrailResult.__allocating_init(result:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SCMLSafetyGuardrailError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SCMLSafetyGuardrailError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_25BF879F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_25BF87A14(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SCMLSafetyGuardrailError()
{
  return &type metadata for SCMLSafetyGuardrailError;
}

uint64_t sub_25BF87A44()
{
  return type metadata accessor for SCMLSafetyGuardrail();
}

uint64_t sub_25BF87A4C()
{
  uint64_t result = sub_25BFF0300();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_25BFF01E0();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t method lookup function for SCMLSafetyGuardrail(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SCMLSafetyGuardrail);
}

uint64_t dispatch thunk of SCMLSafetyGuardrail.__allocating_init(backend:onBehalfOf:modelManagerServicesUseCaseID:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of SCMLSafetyGuardrail.predict(text:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)((*MEMORY[0x263F8EED0] & *v2) + 0xC0);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_25BF87C9C;
  return v9(a1, a2);
}

uint64_t sub_25BF87C9C(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

void type metadata accessor for SCMLTextSanitizerBackends()
{
  if (!qword_26A584380)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_26A584380);
    }
  }
}

uint64_t sub_25BF87DF0()
{
  _Block_release(*(const void **)(v0 + 24));

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25BF87E38()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_25BF8269C;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_26A584390 + dword_26A584390);
  return v6(v2, v3, v4);
}

uint64_t sub_25BF87EF0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_25BF88524;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_26A5843A0 + dword_26A5843A0);
  return v6(v2, v3, v4);
}

uint64_t objectdestroy_25Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25BF87FF4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_25BF88524;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_26A5843B0 + dword_26A5843B0);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_25BF880C0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25BF880F8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_25BF8269C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_26A5843C0 + dword_26A5843C0);
  return v6(a1, v4);
}

uint64_t sub_25BF881B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25BFF0810();
  __break(1u);
  return result;
}

uint64_t sub_25BF882A4@<X0>(uint64_t a1@<X8>)
{
  return sub_25BF838F0(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_25BF882C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25BF8830C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0Tm(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_25BF883CC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_25BF883E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25BF88448()
{
  return sub_25BF83BB0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_25BF884C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

BOOL sub_25BF88528(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_25BF88540()
{
  return sub_25BFF0A00();
}

uint64_t sub_25BF88588()
{
  return sub_25BFF09D0();
}

uint64_t sub_25BF885B4()
{
  return sub_25BFF0A00();
}

unint64_t sub_25BF885FC()
{
  unint64_t result = qword_26A584460;
  if (!qword_26A584460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584460);
  }
  return result;
}

const char *sub_25BF88650()
{
  return "SensitiveContentAnalysisML";
}

const char *sub_25BF88664()
{
  if (*v0) {
    return "ADMPeopleGrounding300M";
  }
  else {
    return "SafetyAdapter300M";
  }
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  scml::TextModerationLM::Impl *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SCMLFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SCMLFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    scml::TextModerationLM::Impl *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25BF887FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          scml::TextModerationLM::Impl *result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_25BF88824(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_25BF8882C(unsigned char *result, char a2)
{
  scml::TextModerationLM::Impl *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SCMLFeatureFlags()
{
  return &type metadata for SCMLFeatureFlags;
}

uint64_t static SCMLNormalizer.normalizeText(_:locale:lite:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (a4) {
    return sub_25BF89CF0(a1, a2, a3);
  }
  else {
    return sub_25BF8A22C(a1, a2, a3);
  }
}

uint64_t static SCMLNormalizer.trimmedText(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25BFEFD50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  int v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)v17 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v17 - v12;
  v17[0] = a1;
  v17[1] = a2;
  sub_25BFEFD30();
  sub_25BFEFD20();
  sub_25BFEFD40();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  v14(v11, v4);
  sub_25BF8178C();
  uint64_t v15 = sub_25BFF0660();
  v14(v13, v4);
  return v15;
}

id sub_25BF88D10()
{
  id v0 = objc_allocWithZone(MEMORY[0x263F08AE8]);
  id result = sub_25BF8088C(0xD000000000000019, 0x800000025C003E40, 0);
  qword_26A584E78 = (uint64_t)result;
  return result;
}

uint64_t sub_25BF88D9C()
{
  unint64_t v1 = sub_25BF8984C(MEMORY[0x263F8EE78]);
  uint64_t result = sub_25BF89980(&v1, 0x1000000000000012, 0x800000025C003E90, 0x222227272D2DLL, 0xE600000000000000);
  qword_26A584E88 = v1;
  return result;
}

uint64_t sub_25BF88E04()
{
  unint64_t v1 = sub_25BF8984C(MEMORY[0x263F8EE78]);
  sub_25BF89980(&v1, 43975, 0xA200000000000000, 113, 0xE100000000000000);
  uint64_t result = sub_25BF89980(&v1, 0x1000000000000027, 0x800000025C003E10, 0x6F6D696865646361, 0xED00007876757472);
  qword_26A584E98 = v1;
  return result;
}

uint64_t sub_25BF88E94()
{
  unint64_t v1 = sub_25BF8984C(MEMORY[0x263F8EE78]);
  sub_25BF89980(&v1, 0x1000000000000047, 0x800000025C003BE0, 0xD00000000000001CLL, 0x800000025C003C30);
  sub_25BF89980(&v1, 0x1000000000000086, 0x800000025C003C50, 0xD000000000000024, 0x800000025C003CE0);
  sub_25BF89980(&v1, 0x1000000000000068, 0x800000025C003D10, 0xD00000000000001ALL, 0x800000025C003D80);
  sub_25BF89980(&v1, 0x1000000000000068, 0x800000025C003DA0, 0xD00000000000001ALL, 0x800000025C003D80);
  uint64_t result = sub_25BF89980(&v1, 0x91E1AB91E1AD91E1, 0xAC000000AF91E1B2, 1684173168, 0xE400000000000000);
  qword_26A584EA8 = v1;
  return result;
}

id SCMLNormalizer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id SCMLNormalizer.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SCMLNormalizer();
  return objc_msgSendSuper2(&v2, sel_init);
}

id SCMLNormalizer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SCMLNormalizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_25BF890BC(uint64_t a1, uint64_t a2)
{
  sub_25BFF09C0();
  sub_25BFF0330();
  uint64_t v4 = sub_25BFF0A00();

  return sub_25BF7FDB4(a1, a2, v4);
}

uint64_t sub_25BF89134(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584468);
  char v39 = a2;
  uint64_t result = sub_25BFF07F0();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v38 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v21 = v20 | (v8 << 6);
      }
      else
      {
        int64_t v22 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v8;
        if (!v23)
        {
          int64_t v8 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v8];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              if ((v39 & 1) == 0)
              {
                uint64_t result = swift_release();
                int v3 = v2;
                goto LABEL_40;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v38 = -1 << v36;
              }
              int v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v8 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v8];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v24;
          }
        }
LABEL_30:
        unint64_t v11 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      uint64_t v29 = 16 * v21;
      uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + v29);
      uint64_t v32 = *v30;
      uint64_t v31 = v30[1];
      uint64_t v33 = (uint64_t *)(*(void *)(v5 + 56) + v29);
      uint64_t v34 = *v33;
      uint64_t v35 = v33[1];
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_25BFF09C0();
      sub_25BFF0330();
      uint64_t result = sub_25BFF0A00();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v15 == v26;
          if (v15 == v26) {
            unint64_t v15 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v15);
        }
        while (v28 == -1);
        unint64_t v16 = __clz(__rbit64(~v28)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 16 * v16;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + v17);
      void *v18 = v32;
      v18[1] = v31;
      unint64_t v19 = (void *)(*(void *)(v7 + 56) + v17);
      *unint64_t v19 = v34;
      v19[1] = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

void *sub_25BF89438()
{
  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584468);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25BFF07E0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_25BF895F4(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_25BF89614(a1, a2, a3, *v3);
  uint64_t *v3 = result;
  return result;
}

char *sub_25BF89614(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A584470);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void *sub_25BF89718(void *result, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  char v5 = result;
  uint64_t v6 = HIBYTE(a5) & 0xF;
  uint64_t v12 = a4;
  unint64_t v13 = a5;
  if ((a5 & 0x2000000000000000) == 0) {
    uint64_t v6 = a4 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v14 = v6;
  if (!a2)
  {
    uint64_t v7 = 0;
LABEL_14:
    *char v5 = a4;
    v5[1] = a5;
    v5[2] = 0;
    v5[3] = v6;
    return (void *)v7;
  }
  uint64_t v7 = a3;
  if (!a3) {
    goto LABEL_14;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = a2;
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = sub_25BFF0430();
      if (!v11) {
        break;
      }
      ++v9;
      *uint64_t v8 = v10;
      v8[1] = v11;
      v8 += 2;
      if (v7 == v9)
      {
        a4 = v12;
        a5 = v13;
        goto LABEL_13;
      }
    }
    a4 = v12;
    a5 = v13;
    uint64_t v7 = v9;
LABEL_13:
    uint64_t v6 = v14;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

void *sub_25BF897D4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584470);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 4);
  return v4;
}

unint64_t sub_25BF8984C(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584468);
  uint64_t v3 = (void *)sub_25BFF0800();
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v6 = a1[7];
  unint64_t result = sub_25BF890BC(v4, v5);
  if (v9)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v10 = a1 + 11;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v4;
    v11[1] = v5;
    uint64_t v12 = (void *)(v3[7] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v6;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      break;
    }
    v3[2] = v15;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v16 = v10 + 4;
    uint64_t v4 = *(v10 - 3);
    uint64_t v17 = *(v10 - 2);
    uint64_t v7 = *(v10 - 1);
    uint64_t v18 = *v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_25BF890BC(v4, v17);
    uint64_t v10 = v16;
    uint64_t v6 = v18;
    uint64_t v5 = v17;
    if (v19) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_25BF89980(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_25BFF0410();
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = sub_25BF897D4(v10, 0);
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_25BF89718(&v50, v12 + 4, v11, a2, a3);
    swift_bridgeObjectRelease();
    if (v13 != (void *)v11) {
      goto LABEL_35;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_25BFF0410();
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = sub_25BF897D4(v14, 0);
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_25BF89718(&v50, v16 + 4, v15, a4, a5);
    swift_bridgeObjectRelease();
    if (v17 != (void *)v15) {
      goto LABEL_36;
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = v12[2];
    if (!v18) {
      goto LABEL_28;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    uint64_t v18 = v12[2];
    if (!v18)
    {
LABEL_28:
      swift_release();
      return swift_release();
    }
  }
  uint64_t v19 = v16[2];
  if (!v19) {
    goto LABEL_28;
  }
  uint64_t v21 = v12[4];
  uint64_t v20 = v12[5];
  swift_bridgeObjectRetain();
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v45 = v19 - 1;
  uint64_t v46 = v18 - 1;
  uint64_t v48 = v12;
  unsigned int v49 = a1;
  uint64_t v47 = v16;
  while (1)
  {
    uint64_t v24 = v16[v23 + 4];
    uint64_t v25 = v16[v23 + 5];
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v50 = (void *)*a1;
    int64_t v27 = v50;
    *a1 = 0x8000000000000000;
    unint64_t v29 = sub_25BF890BC(v21, v20);
    uint64_t v30 = v27[2];
    BOOL v31 = (v28 & 1) == 0;
    uint64_t v32 = v30 + v31;
    if (__OFADD__(v30, v31)) {
      break;
    }
    char v33 = v28;
    if (v27[3] >= v32)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v36 = v50;
        if (v28) {
          goto LABEL_19;
        }
      }
      else
      {
        sub_25BF89438();
        uint64_t v36 = v50;
        if (v33) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      sub_25BF89134(v32, isUniquelyReferenced_nonNull_native);
      unint64_t v34 = sub_25BF890BC(v21, v20);
      if ((v33 & 1) != (v35 & 1)) {
        goto LABEL_37;
      }
      unint64_t v29 = v34;
      uint64_t v36 = v50;
      if (v33)
      {
LABEL_19:
        int64_t v37 = (void *)(v36[7] + 16 * v29);
        swift_bridgeObjectRelease();
        *int64_t v37 = v24;
        v37[1] = v25;
        goto LABEL_23;
      }
    }
    v36[(v29 >> 6) + 8] |= 1 << v29;
    uint64_t v38 = (uint64_t *)(v36[6] + 16 * v29);
    *uint64_t v38 = v21;
    v38[1] = v20;
    char v39 = (void *)(v36[7] + 16 * v29);
    *char v39 = v24;
    v39[1] = v25;
    uint64_t v40 = v36[2];
    BOOL v41 = __OFADD__(v40, 1);
    uint64_t v42 = v40 + 1;
    if (v41) {
      goto LABEL_34;
    }
    v36[2] = v42;
    swift_bridgeObjectRetain();
LABEL_23:
    a1 = v49;
    void *v49 = v36;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = v47;
    if (v46 == v22) {
      goto LABEL_28;
    }
    if (v22 + 1 >= v48[2]) {
      goto LABEL_33;
    }
    if (v45 == v22) {
      goto LABEL_28;
    }
    uint64_t v21 = v48[v23 + 6];
    uint64_t v20 = v48[v23 + 7];
    unint64_t v43 = v47[2];
    swift_bridgeObjectRetain();
    ++v22;
    v23 += 2;
    if (v22 >= v43)
    {
      __break(1u);
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  uint64_t result = sub_25BFF0940();
  __break(1u);
  return result;
}

uint64_t sub_25BF89CF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584478);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  unint64_t v9 = sub_25BF8178C();
  uint64_t v10 = sub_25BFF0680();
  unint64_t v12 = v11;
  uint64_t v13 = sub_25BFF0410();
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = sub_25BF897D4(v13, 0);
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_25BF89718(&v63, v15 + 4, v14, v10, v12);
    uint64_t result = swift_bridgeObjectRelease();
    if (v16 != (void *)v14)
    {
      __break(1u);
      goto LABEL_36;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = (void *)MEMORY[0x263F8EE78];
  }
  int64_t v18 = v15[2];
  if (v18)
  {
    uint64_t v59 = (void *)v9;
    unint64_t v60 = a3;
    uint64_t v61 = v8;
    uint64_t v62 = MEMORY[0x263F8EE78];
    sub_25BF895F4(0, v18, 0);
    uint64_t v19 = v62;
    v58[1] = v15;
    uint64_t v20 = v15 + 5;
    do
    {
      uint64_t v21 = *(v20 - 1);
      uint64_t v22 = *v20;
      uint64_t v23 = qword_26A584E90;
      swift_bridgeObjectRetain();
      if (v23 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v24 = qword_26A584E98;
      if (*(void *)(qword_26A584E98 + 16))
      {
        unint64_t v25 = sub_25BF890BC(v21, v22);
        uint64_t v26 = v22;
        if (v27)
        {
          char v28 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v25);
          uint64_t v21 = *v28;
          uint64_t v26 = v28[1];
        }
      }
      else
      {
        uint64_t v26 = v22;
      }
      swift_bridgeObjectRetain();
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v62 = v19;
      unint64_t v30 = *(void *)(v19 + 16);
      unint64_t v29 = *(void *)(v19 + 24);
      if (v30 >= v29 >> 1)
      {
        sub_25BF895F4((char *)(v29 > 1), v30 + 1, 1);
        uint64_t v19 = v62;
      }
      v20 += 2;
      *(void *)(v19 + 16) = v30 + 1;
      unint64_t v31 = v19 + 16 * v30;
      *(void *)(v31 + 32) = v21;
      *(void *)(v31 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v26;
      --v18;
    }
    while (v18);
    swift_release();
    a3 = v60;
    uint64_t v8 = v61;
  }
  else
  {
    swift_release();
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  uint64_t v63 = v19;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584480);
  unint64_t v33 = sub_25BF8A6E0();
  uint64_t v63 = sub_25BFF0480();
  uint64_t v64 = v34;
  uint64_t v35 = sub_25BFEFDE0();
  uint64_t v36 = *(void *)(v35 - 8);
  (*(void (**)(char *, unint64_t, uint64_t))(v36 + 16))(v8, a3, v35);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v8, 0, 1, v35);
  uint64_t v37 = sub_25BFF0690();
  unint64_t v39 = v38;
  sub_25BF8A73C((uint64_t)v8);
  swift_bridgeObjectRelease();
  uint64_t v40 = sub_25BFF0410();
  if (!v40)
  {
    swift_bridgeObjectRelease();
    uint64_t v42 = (void *)MEMORY[0x263F8EE78];
    int64_t v44 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v44)
    {
LABEL_21:
      unint64_t v60 = v33;
      uint64_t v61 = (char *)v32;
      uint64_t v62 = MEMORY[0x263F8EE78];
      sub_25BF895F4(0, v44, 0);
      uint64_t v45 = v62;
      uint64_t v59 = v42;
      uint64_t v46 = v42 + 5;
      do
      {
        uint64_t v47 = *(v46 - 1);
        uint64_t v48 = *v46;
        uint64_t v49 = qword_26A584EA0;
        swift_bridgeObjectRetain();
        if (v49 != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v50 = qword_26A584EA8;
        if (*(void *)(qword_26A584EA8 + 16))
        {
          unint64_t v51 = sub_25BF890BC(v47, v48);
          uint64_t v52 = v48;
          if (v53)
          {
            uint64_t v54 = (uint64_t *)(*(void *)(v50 + 56) + 16 * v51);
            uint64_t v47 = *v54;
            uint64_t v52 = v54[1];
          }
        }
        else
        {
          uint64_t v52 = v48;
        }
        swift_bridgeObjectRetain();
        swift_endAccess();
        swift_bridgeObjectRelease();
        uint64_t v62 = v45;
        unint64_t v56 = *(void *)(v45 + 16);
        unint64_t v55 = *(void *)(v45 + 24);
        if (v56 >= v55 >> 1)
        {
          sub_25BF895F4((char *)(v55 > 1), v56 + 1, 1);
          uint64_t v45 = v62;
        }
        v46 += 2;
        *(void *)(v45 + 16) = v56 + 1;
        unint64_t v57 = v45 + 16 * v56;
        *(void *)(v57 + 32) = v47;
        *(void *)(v57 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v52;
        --v44;
      }
      while (v44);
      swift_release();
      goto LABEL_34;
    }
LABEL_33:
    swift_release();
    uint64_t v45 = MEMORY[0x263F8EE78];
LABEL_34:
    uint64_t v63 = v45;
    return sub_25BFF0480();
  }
  uint64_t v41 = v40;
  uint64_t v42 = sub_25BF897D4(v40, 0);
  swift_bridgeObjectRetain();
  unint64_t v43 = sub_25BF89718(&v63, v42 + 4, v41, v37, v39);
  uint64_t result = swift_bridgeObjectRelease();
  if (v43 == (void *)v41)
  {
    swift_bridgeObjectRelease();
    int64_t v44 = v42[2];
    if (v44) {
      goto LABEL_21;
    }
    goto LABEL_33;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_25BF8A22C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_25BFEFD50();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)v51 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v51 - v14;
  uint64_t v16 = sub_25BF89CF0(a1, a2, a3);
  unint64_t v18 = v17;
  uint64_t v19 = sub_25BFF0410();
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = sub_25BF897D4(v19, 0);
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_25BF89718(v58, v21 + 4, v20, v16, v18);
    uint64_t result = swift_bridgeObjectRelease();
    if (v22 != (void *)v20)
    {
      __break(1u);
      return result;
    }
    swift_bridgeObjectRelease();
    uint64_t v24 = v21;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v55 = v13;
  unint64_t v56 = v10;
  int64_t v25 = v24[2];
  if (v25)
  {
    uint64_t v52 = v15;
    uint64_t v53 = v7;
    uint64_t v54 = v6;
    uint64_t v57 = MEMORY[0x263F8EE78];
    sub_25BF895F4(0, v25, 0);
    uint64_t v26 = v57;
    v51[1] = v24;
    char v27 = v24 + 5;
    do
    {
      uint64_t v29 = *(v27 - 1);
      uint64_t v28 = *v27;
      uint64_t v30 = qword_26A584E80;
      swift_bridgeObjectRetain();
      if (v30 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v31 = qword_26A584E88;
      if (*(void *)(qword_26A584E88 + 16))
      {
        unint64_t v32 = sub_25BF890BC(v29, v28);
        uint64_t v33 = v28;
        if (v34)
        {
          uint64_t v35 = (uint64_t *)(*(void *)(v31 + 56) + 16 * v32);
          uint64_t v29 = *v35;
          uint64_t v33 = v35[1];
        }
      }
      else
      {
        uint64_t v33 = v28;
      }
      swift_bridgeObjectRetain();
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v57 = v26;
      unint64_t v37 = *(void *)(v26 + 16);
      unint64_t v36 = *(void *)(v26 + 24);
      if (v37 >= v36 >> 1)
      {
        sub_25BF895F4((char *)(v36 > 1), v37 + 1, 1);
        uint64_t v26 = v57;
      }
      v27 += 2;
      *(void *)(v26 + 16) = v37 + 1;
      uint64_t v38 = v26 + 16 * v37;
      *(void *)(v38 + 32) = v29;
      *(void *)(v38 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v33;
      --v25;
    }
    while (v25);
    swift_release();
    uint64_t v7 = v53;
    uint64_t v6 = v54;
    uint64_t v15 = v52;
  }
  else
  {
    swift_release();
    uint64_t v26 = MEMORY[0x263F8EE78];
  }
  v58[0] = v26;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584480);
  sub_25BF8A6E0();
  sub_25BFF0480();
  if (qword_26A584E70 != -1) {
    swift_once();
  }
  unint64_t v39 = (void *)qword_26A584E78;
  uint64_t v40 = (void *)sub_25BFF0370();
  uint64_t v41 = sub_25BFF0460();
  swift_bridgeObjectRelease();
  uint64_t v42 = (void *)sub_25BFF0370();
  id v43 = objc_msgSend(v39, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v40, 0, 0, v41, v42);

  uint64_t v44 = sub_25BFF0380();
  uint64_t v46 = v45;

  v58[0] = v44;
  v58[1] = v46;
  uint64_t v47 = v55;
  sub_25BFEFD30();
  uint64_t v48 = v56;
  sub_25BFEFD20();
  sub_25BFEFD40();
  uint64_t v49 = *(void (**)(char *, uint64_t))(v7 + 8);
  v49(v48, v6);
  v49(v47, v6);
  sub_25BF8178C();
  sub_25BFF0660();
  v49(v15, v6);
  swift_bridgeObjectRelease();
  uint64_t v50 = sub_25BFF03C0();
  swift_bridgeObjectRelease();
  return v50;
}

uint64_t type metadata accessor for SCMLNormalizer()
{
  return self;
}

unint64_t sub_25BF8A6E0()
{
  unint64_t result = qword_26A584488;
  if (!qword_26A584488)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A584480);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584488);
  }
  return result;
}

uint64_t sub_25BF8A73C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584478);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t TextModerationLMRequest.hash(into:)()
{
  sub_25BFF09D0();

  return sub_25BFF0330();
}

uint64_t static TextModerationLMRequest.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_25BFF0920();
  }
}

uint64_t static TextModerationLMClassifyTextRequest.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_25BFF0920();
  }
}

uint64_t sub_25BF8A850()
{
  return 1;
}

uint64_t sub_25BF8A864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_25BF91DDC(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_25BF8A894()
{
  return 0;
}

void sub_25BF8A8A0(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_25BF8A8AC(uint64_t a1)
{
  unint64_t v2 = sub_25BF8B68C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25BF8A8E8(uint64_t a1)
{
  unint64_t v2 = sub_25BF8B68C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25BF8A928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_25BF91E4C(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_25BF8A958(uint64_t a1)
{
  unint64_t v2 = sub_25BF8B638();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25BF8A994(uint64_t a1)
{
  unint64_t v2 = sub_25BF8B638();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TextModerationLMRequest.encode(to:)(void *a1)
{
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584490);
  uint64_t v3 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584498);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v1;
  uint64_t v14 = v1[1];
  uint64_t v15 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25BF8B638();
  sub_25BFF0A20();
  sub_25BF8B68C();
  sub_25BFF08A0();
  uint64_t v17 = v15;
  uint64_t v18 = v14;
  sub_25BF8B6E0();
  uint64_t v11 = v16;
  sub_25BFF08E0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t TextModerationLMRequest.hashValue.getter()
{
  return sub_25BFF0A00();
}

uint64_t TextModerationLMRequest.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5844A8);
  uint64_t v23 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5844B0);
  uint64_t v7 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25BF8B638();
  sub_25BFF0A10();
  if (v2) {
    goto LABEL_5;
  }
  uint64_t v20 = a1;
  uint64_t v21 = v7;
  uint64_t v10 = v26;
  if (*(void *)(sub_25BFF0890() + 16) != 1)
  {
    uint64_t v12 = sub_25BFF0740();
    swift_allocError();
    uint64_t v13 = v10;
    uint64_t v15 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A5844B8);
    void *v15 = &type metadata for TextModerationLMRequest;
    sub_25BFF0840();
    sub_25BFF0730();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v15, *MEMORY[0x263F8DCB0], v12);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v13);
    a1 = v20;
LABEL_5:
    uint64_t v19 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1Tm(v19);
  }
  sub_25BF8B68C();
  sub_25BFF0830();
  uint64_t v11 = v21;
  sub_25BF8B734();
  sub_25BFF0880();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v4);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  uint64_t v17 = v25;
  uint64_t v18 = v22;
  void *v22 = v24;
  v18[1] = v17;
  uint64_t v19 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1Tm(v19);
}

uint64_t sub_25BF8AFC4()
{
  return sub_25BFF0A00();
}

uint64_t sub_25BF8B024()
{
  sub_25BFF09D0();

  return sub_25BFF0330();
}

uint64_t sub_25BF8B078()
{
  return sub_25BFF0A00();
}

uint64_t sub_25BF8B0D4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return TextModerationLMRequest.init(from:)(a1, a2);
}

uint64_t sub_25BF8B0EC(void *a1)
{
  return TextModerationLMRequest.encode(to:)(a1);
}

uint64_t sub_25BF8B104(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_25BFF0920();
  }
}

SensitiveContentAnalysisML::TextModerationLMClassifyTextRequest __swiftcall TextModerationLMClassifyTextRequest.init(text:)(SensitiveContentAnalysisML::TextModerationLMClassifyTextRequest text)
{
  SensitiveContentAnalysisML::TextModerationLMClassifyTextRequest *v1 = text;
  return text;
}

uint64_t TextModerationLMClassifyTextRequest.text.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextModerationLMClassifyTextRequest.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*TextModerationLMClassifyTextRequest.text.modify())(sentencepiece::util::Status *__hidden this)
{
  return sentencepiece::util::Status::IgnoreError;
}

uint64_t TextModerationLMClassifyTextRequest.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_25BFF0330();

  return swift_bridgeObjectRelease();
}

uint64_t sub_25BF8B21C()
{
  return sub_25BFF09D0();
}

uint64_t sub_25BF8B248@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_25BF91D54(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_25BF8B278(uint64_t a1)
{
  unint64_t v2 = sub_25BF8B788();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25BF8B2B4(uint64_t a1)
{
  unint64_t v2 = sub_25BF8B788();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TextModerationLMClassifyTextRequest.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5844C8);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25BF8B788();
  sub_25BFF0A20();
  sub_25BFF08B0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t TextModerationLMClassifyTextRequest.hashValue.getter()
{
  return sub_25BFF0A00();
}

uint64_t TextModerationLMClassifyTextRequest.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5844D0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25BF8B788();
  sub_25BFF0A10();
  if (!v2)
  {
    uint64_t v9 = sub_25BFF0850();
    uint64_t v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_25BF8B5E4()
{
  return sub_25BFF0A00();
}

uint64_t sub_25BF8B630()
{
  return sub_25BFF0330();
}

unint64_t sub_25BF8B638()
{
  unint64_t result = qword_26A584F00;
  if (!qword_26A584F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584F00);
  }
  return result;
}

unint64_t sub_25BF8B68C()
{
  unint64_t result = qword_26A584F08;
  if (!qword_26A584F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584F08);
  }
  return result;
}

unint64_t sub_25BF8B6E0()
{
  unint64_t result = qword_26A5844A0;
  if (!qword_26A5844A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5844A0);
  }
  return result;
}

unint64_t sub_25BF8B734()
{
  unint64_t result = qword_26A5844C0;
  if (!qword_26A5844C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5844C0);
  }
  return result;
}

unint64_t sub_25BF8B788()
{
  unint64_t result = qword_26A584F10;
  if (!qword_26A584F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584F10);
  }
  return result;
}

uint64_t sub_25BF8B7DC()
{
  return sub_25BFF0A00();
}

uint64_t sub_25BF8B824@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return TextModerationLMClassifyTextRequest.init(from:)(a1, a2);
}

uint64_t sub_25BF8B83C(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5844C8);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25BF8B788();
  sub_25BFF0A20();
  sub_25BFF08B0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t TextModerationLMResponse.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  sub_25BFF09D0();
  sub_25BFF09E0();

  return sub_25BF902C8(a1, v3);
}

BOOL static TextModerationLMResponse.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && (sub_25BF8C444(*((void *)a1 + 1), *((void *)a2 + 1)) & 1) != 0;
}

uint64_t static TextModerationLMClassifyTextResponse.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2) {
    return sub_25BF8C444(*((void *)a1 + 1), *((void *)a2 + 1));
  }
  else {
    return 0;
  }
}

uint64_t sub_25BF8BA38(uint64_t a1)
{
  unint64_t v2 = sub_25BF903B8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25BF8BA74(uint64_t a1)
{
  unint64_t v2 = sub_25BF903B8();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25BF8BAB0()
{
  return sub_25BFF0A00();
}

uint64_t sub_25BF8BAF4()
{
  return sub_25BFF0A00();
}

uint64_t sub_25BF8BB34(uint64_t a1)
{
  unint64_t v2 = sub_25BF90364();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25BF8BB70(uint64_t a1)
{
  unint64_t v2 = sub_25BF90364();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TextModerationLMResponse.encode(to:)(void *a1)
{
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5844D8);
  uint64_t v3 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5844E0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v14 = *v1;
  uint64_t v13 = *((void *)v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25BF90364();
  sub_25BFF0A20();
  sub_25BF903B8();
  sub_25BFF08A0();
  char v16 = v14;
  uint64_t v17 = v13;
  sub_25BF9040C();
  uint64_t v10 = v15;
  sub_25BFF08E0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t TextModerationLMResponse.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_25BFF09C0();
  sub_25BFF09D0();
  sub_25BFF09E0();
  sub_25BF902C8((uint64_t)v3, v1);
  return sub_25BFF0A00();
}

uint64_t TextModerationLMResponse.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5844F0);
  uint64_t v23 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5844F8);
  uint64_t v7 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25BF90364();
  sub_25BFF0A10();
  if (v2) {
    goto LABEL_5;
  }
  uint64_t v20 = a1;
  uint64_t v21 = v7;
  uint64_t v10 = v26;
  if (*(void *)(sub_25BFF0890() + 16) != 1)
  {
    uint64_t v12 = sub_25BFF0740();
    swift_allocError();
    uint64_t v13 = v10;
    uint64_t v15 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A5844B8);
    void *v15 = &type metadata for TextModerationLMResponse;
    sub_25BFF0840();
    sub_25BFF0730();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v15, *MEMORY[0x263F8DCB0], v12);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v13);
    a1 = v20;
LABEL_5:
    uint64_t v19 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1Tm(v19);
  }
  sub_25BF903B8();
  sub_25BFF0830();
  uint64_t v11 = v21;
  sub_25BF90460();
  sub_25BFF0880();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v4);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  uint64_t v17 = v25;
  uint64_t v18 = v22;
  unsigned char *v22 = v24;
  *((void *)v18 + 1) = v17;
  uint64_t v19 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1Tm(v19);
}

uint64_t sub_25BF8C1BC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_25BFF09C0();
  sub_25BFF09D0();
  sub_25BFF09E0();
  sub_25BF902C8((uint64_t)v3, v1);
  return sub_25BFF0A00();
}

uint64_t sub_25BF8C228(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  sub_25BFF09D0();
  sub_25BFF09E0();

  return sub_25BF902C8(a1, v3);
}

uint64_t sub_25BF8C284()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_25BFF09C0();
  sub_25BFF09D0();
  sub_25BFF09E0();
  sub_25BF902C8((uint64_t)v3, v1);
  return sub_25BFF0A00();
}

uint64_t sub_25BF8C2EC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return TextModerationLMResponse.init(from:)(a1, a2);
}

uint64_t sub_25BF8C304(void *a1)
{
  return TextModerationLMResponse.encode(to:)(a1);
}

BOOL sub_25BF8C31C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && (sub_25BF8C444(*((void *)a1 + 1), *((void *)a2 + 1)) & 1) != 0;
}

uint64_t TextModerationLMClassifyTextResponse.safe.getter()
{
  return *v0;
}

uint64_t TextModerationLMClassifyTextResponse.safe.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*TextModerationLMClassifyTextResponse.safe.modify())(sentencepiece::util::Status *__hidden this)
{
  return sentencepiece::util::Status::IgnoreError;
}

uint64_t TextModerationLMClassifyTextResponse.predictions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TextModerationLMClassifyTextResponse.predictions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*TextModerationLMClassifyTextResponse.predictions.modify())(sentencepiece::util::Status *__hidden this)
{
  return sentencepiece::util::Status::IgnoreError;
}

uint64_t TextModerationLMClassifyTextResponse.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  sub_25BFF09E0();
  swift_bridgeObjectRetain();
  sub_25BF902C8(a1, v3);

  return swift_bridgeObjectRelease();
}

uint64_t sub_25BF8C444(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v5 = 0;
    do
    {
      int v7 = *(unsigned __int8 *)(a1 + v5 + 48);
      float v8 = *(float *)(a1 + v5 + 52);
      int v9 = *(unsigned __int8 *)(a2 + v5 + 48);
      float v10 = *(float *)(a2 + v5 + 52);
      if (*(void *)(a1 + v5 + 32) == *(void *)(a2 + v5 + 32)
        && *(void *)(a1 + v5 + 40) == *(void *)(a2 + v5 + 40))
      {
        if (v7 != v9 || v8 != v10) {
          return 0;
        }
      }
      else
      {
        char v12 = sub_25BFF0920();
        uint64_t result = 0;
        if ((v12 & 1) == 0) {
          return result;
        }
        if (v7 != v9 || v8 != v10) {
          return result;
        }
      }
      v5 += 24;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_25BF8C51C(char a1)
{
  if (a1) {
    return 0x6974636964657270;
  }
  else {
    return 1701208435;
  }
}

uint64_t sub_25BF8C554()
{
  return sub_25BF8C51C(*v0);
}

uint64_t sub_25BF8C55C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25BF91EE4(a1, a2);
  *a3 = result;
  return result;
}

void sub_25BF8C584(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_25BF8C590(uint64_t a1)
{
  unint64_t v2 = sub_25BF904B4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25BF8C5CC(uint64_t a1)
{
  unint64_t v2 = sub_25BF904B4();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TextModerationLMClassifyTextResponse.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584508);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[0] = *(void *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25BF904B4();
  sub_25BFF0A20();
  char v11 = 0;
  sub_25BFF08C0();
  if (!v2)
  {
    v9[1] = v9[0];
    char v10 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A584510);
    sub_25BF9055C(&qword_26A584518, (void (*)(void))sub_25BF90508);
    sub_25BFF08E0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t TextModerationLMClassifyTextResponse.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_25BFF09C0();
  sub_25BFF09E0();
  sub_25BF902C8((uint64_t)v3, v1);
  return sub_25BFF0A00();
}

uint64_t TextModerationLMClassifyTextResponse.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584528);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  float v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25BF904B4();
  sub_25BFF0A10();
  if (!v2)
  {
    char v14 = 0;
    char v9 = sub_25BFF0860();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A584510);
    char v13 = 1;
    sub_25BF9055C(&qword_26A584530, (void (*)(void))sub_25BF905CC);
    sub_25BFF0880();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v10 = v12[1];
    *(unsigned char *)a2 = v9 & 1;
    *(void *)(a2 + 8) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_25BF8CA28()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_25BFF09C0();
  sub_25BFF09E0();
  sub_25BF902C8((uint64_t)v3, v1);
  return sub_25BFF0A00();
}

uint64_t sub_25BF8CA88()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_25BFF09E0();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t result = sub_25BFF09D0();
  if (v2)
  {
    uint64_t v4 = v1 + 52;
    do
    {
      v4 += 24;
      swift_bridgeObjectRetain();
      sub_25BFF0330();
      sub_25BFF09E0();
      sub_25BFF09F0();
      uint64_t result = swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_25BF8CB30()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_25BFF09C0();
  sub_25BFF09E0();
  sub_25BF902C8((uint64_t)v3, v1);
  return sub_25BFF0A00();
}

uint64_t sub_25BF8CB8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TextModerationLMClassifyTextResponse.init(from:)(a1, a2);
}

uint64_t sub_25BF8CBA4(void *a1)
{
  return TextModerationLMClassifyTextResponse.encode(to:)(a1);
}

uint64_t sub_25BF8CBBC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2) {
    return sub_25BF8C444(*((void *)a1 + 1), *((void *)a2 + 1));
  }
  else {
    return 0;
  }
}

uint64_t TextModerationLMClassifyTextPrediction.nameP1.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextModerationLMClassifyTextPrediction.nameP1.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*TextModerationLMClassifyTextPrediction.nameP1.modify())(sentencepiece::util::Status *__hidden this)
{
  return sentencepiece::util::Status::IgnoreError;
}

uint64_t TextModerationLMClassifyTextPrediction.safe.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t TextModerationLMClassifyTextPrediction.safe.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*TextModerationLMClassifyTextPrediction.safe.modify())(sentencepiece::util::Status *__hidden this)
{
  return sentencepiece::util::Status::IgnoreError;
}

float TextModerationLMClassifyTextPrediction.probability.getter()
{
  return *(float *)(v0 + 20);
}

void TextModerationLMClassifyTextPrediction.probability.setter(float a1)
{
  *(float *)(v1 + 2std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = a1;
}

uint64_t (*TextModerationLMClassifyTextPrediction.probability.modify())(sentencepiece::util::Status *__hidden this)
{
  return sentencepiece::util::Status::IgnoreError;
}

uint64_t TextModerationLMClassifyTextPrediction.hash(into:)()
{
  return sub_25BFF09F0();
}

uint64_t sub_25BF8CD40(char a1)
{
  return *(void *)&aNamep1_2[8 * a1];
}

BOOL sub_25BF8CD60(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_25BF8CD74()
{
  return sub_25BF8CD40(*v0);
}

uint64_t sub_25BF8CD7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25BF91FD0(a1, a2);
  *a3 = result;
  return result;
}

void sub_25BF8CDA4(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_25BF8CDB0(uint64_t a1)
{
  unint64_t v2 = sub_25BF907FC();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25BF8CDEC(uint64_t a1)
{
  unint64_t v2 = sub_25BF907FC();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t TextModerationLMClassifyTextPrediction.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584540);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v9[3] = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25BF907FC();
  sub_25BFF0A20();
  char v13 = 0;
  uint64_t v7 = v10;
  sub_25BFF08B0();
  if (!v7)
  {
    char v12 = 1;
    sub_25BFF08C0();
    char v11 = 2;
    sub_25BFF08D0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t TextModerationLMClassifyTextPrediction.hashValue.getter()
{
  return sub_25BFF0A00();
}

uint64_t TextModerationLMClassifyTextPrediction.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584548);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  float v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25BF907FC();
  sub_25BFF0A10();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  char v20 = 0;
  uint64_t v9 = sub_25BFF0850();
  uint64_t v11 = v10;
  char v19 = 1;
  swift_bridgeObjectRetain();
  int v17 = sub_25BFF0860();
  char v18 = 2;
  sub_25BFF0870();
  int v14 = v13;
  char v15 = v17 & 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v15;
  *(_DWORD *)(a2 + 2std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v14;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_25BF8D298()
{
  return sub_25BFF09F0();
}

uint64_t sub_25BF8D2E8()
{
  return sub_25BFF0A00();
}

uint64_t sub_25BF8D364@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TextModerationLMClassifyTextPrediction.init(from:)(a1, a2);
}

uint64_t sub_25BF8D37C(void *a1)
{
  return TextModerationLMClassifyTextPrediction.encode(to:)(a1);
}

uint64_t sub_25BF8D398()
{
  uint64_t v0 = sub_25BF87598((uint64_t)&unk_270971538);
  uint64_t result = swift_arrayDestroy();
  qword_26A584EB8 = v0;
  return result;
}

uint64_t static TextModerationLMInferenceProvider.inferenceAssetIdentifiers.getter()
{
  if (qword_26A584EB0 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_25BF8D440()
{
  uint64_t v0 = sub_25BFF01E0();
  __swift_allocate_value_buffer(v0, qword_26A584EC8);
  __swift_project_value_buffer(v0, (uint64_t)qword_26A584EC8);
  return sub_25BFF01D0();
}

uint64_t sub_25BF8D4B8()
{
  uint64_t v0 = sub_25BFF01E0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_25BFF01B0();
  __swift_allocate_value_buffer(v4, qword_26A584EE8);
  __swift_project_value_buffer(v4, (uint64_t)qword_26A584EE8);
  if (qword_26A584EC0 != -1) {
    swift_once();
  }
  uint64_t v5 = __swift_project_value_buffer(v0, (uint64_t)qword_26A584EC8);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return sub_25BFF0190();
}

uint64_t TextModerationLMInferenceProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  TextModerationLMInferenceProvider.init()();
  return v0;
}

uint64_t TextModerationLMInferenceProvider.init()()
{
  v8[0] = sub_25BFF0590();
  uint64_t v1 = *(void *)(v8[0] - 8);
  MEMORY[0x270FA5388](v8[0]);
  uint64_t v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_25BFF0580();
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = sub_25BFF0200();
  MEMORY[0x270FA5388](v5 - 8);
  *(void *)(v0 + 16) = 0;
  sub_25BFF01D0();
  uint64_t v6 = OBJC_IVAR____TtC26SensitiveContentAnalysisML33TextModerationLMInferenceProvider_dispatchQueue;
  sub_25BF921F0(0, &qword_26A584550);
  sub_25BFF01F0();
  v8[1] = MEMORY[0x263F8EE78];
  sub_25BF908AC(&qword_26A584558, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584560);
  sub_25BF90850();
  sub_25BFF06C0();
  (*(void (**)(char *, void, void))(v1 + 104))(v3, *MEMORY[0x263F8F130], v8[0]);
  *(void *)(v0 + v6) = sub_25BFF05B0();
  return v0;
}

uint64_t TextModerationLMInferenceProvider.loadIn(inferenceAssetIdentifier:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = sub_25BFF0050();
  void v3[5] = v4;
  void v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25BF8D988, 0, 0);
}

uint64_t sub_25BF8D988()
{
  if (qword_26A584EB0 != -1) {
    swift_once();
  }
  if (sub_25BF817E0(v0[2], v0[3], qword_26A584EB8))
  {
    uint64_t v2 = v0[3];
    uint64_t v1 = v0[4];
    uint64_t v3 = v0[2];
    uint64_t v4 = (void *)swift_task_alloc();
    v4[2] = v1;
    v4[3] = v3;
    void v4[4] = v2;
    sub_25BFF05A0();
    swift_task_dealloc();
  }
  else
  {
    uint64_t v7 = v0[6];
    uint64_t v6 = v0[7];
    uint64_t v12 = v0[5];
    sub_25BFF06F0();
    swift_bridgeObjectRelease();
    sub_25BFF0420();
    uint64_t v8 = sub_25BFF0060();
    sub_25BF908AC(&qword_26A584578, MEMORY[0x263F562C0]);
    swift_allocError();
    uint64_t v10 = v9;
    sub_25BFF0420();
    sub_25BF90620(MEMORY[0x263F8EE78]);
    sub_25BFF0040();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v6, v12);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, *MEMORY[0x263F56288], v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v12);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_25BF8DC68(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_25BFF0180();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_25BFF01B0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t result = MEMORY[0x270FA5388](v10);
  int v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v26 = a2;
    unint64_t v27 = a3;
    uint64_t v28 = v7;
    uint64_t v29 = v6;
    if (qword_26A584EE0 != -1) {
      swift_once();
    }
    uint64_t v15 = __swift_project_value_buffer(v10, (uint64_t)qword_26A584EE8);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v15, v10);
    sub_25BFF01A0();
    sub_25BFF0160();
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = v11;
    int v17 = v16;
    *(_WORD *)uint64_t v16 = 0;
    char v18 = sub_25BFF01A0();
    os_signpost_type_t v19 = sub_25BFF05D0();
    os_signpost_id_t v20 = sub_25BFF0170();
    _os_signpost_emit_with_name_impl(&dword_25BF41000, v18, v19, v20, "TextModerationLMInferenceProvider.loadIn", "", v17, 2u);
    uint64_t v21 = v30;
    sub_25BF8DF40(a1, v26, v27);
    if (v21)
    {
    }
    else
    {
      os_signpost_type_t v22 = sub_25BFF05C0();
      os_signpost_id_t v23 = sub_25BFF0170();
      _os_signpost_emit_with_name_impl(&dword_25BF41000, v18, v22, v23, "TextModerationLMInferenceProvider.loadIn", "", v17, 2u);

      MEMORY[0x26117B7A0](v17, -1, -1);
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v14, v10);
  }
  return result;
}

void sub_25BF8DF40(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v7 = sub_25BFF0050();
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v42 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = sub_25BFF01C0();
  os_log_type_t v10 = sub_25BFF0570();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v45 = v3;
  uint64_t v41 = a2;
  if (v11)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = a2;
    uint64_t v14 = swift_slowAlloc();
    v48[0] = v14;
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_25BF866A0(v13, a3, v48);
    sub_25BFF0640();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25BF41000, v9, v10, "loading %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x26117B7A0](v14, -1, -1);
    MEMORY[0x26117B7A0](v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v48[0] = 0;
  id v15 = objc_msgSend(objc_allocWithZone((Class)SCMLTextModerationLM), sel_initWithError_, v48);
  id v16 = (id)v48[0];
  id v49 = (id)v48[0];
  int v17 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  id v18 = v16;

  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain_n();
    os_signpost_type_t v19 = sub_25BFF01C0();
    os_log_type_t v20 = sub_25BFF0570();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v48[0] = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_25BF866A0(v41, a3, v48);
      sub_25BFF0640();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25BF41000, v19, v20, "loaded %s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x26117B7A0](v22, -1, -1);
      MEMORY[0x26117B7A0](v21, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    os_signpost_id_t v23 = sub_25BFF01C0();
    os_log_type_t v24 = sub_25BFF0560();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412290;
      swift_beginAccess();
      id v16 = v49;
      if (v49)
      {
        uint64_t v46 = (uint64_t)v49;
        id v27 = v49;
      }
      else
      {
        uint64_t v46 = 0;
      }
      sub_25BFF0640();
      *uint64_t v26 = v16;
      _os_log_impl(&dword_25BF41000, v23, v24, "loadIn failed: %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A5845F0);
      swift_arrayDestroy();
      MEMORY[0x26117B7A0](v26, -1, -1);
      MEMORY[0x26117B7A0](v25, -1, -1);
    }

    if (v16)
    {
      uint64_t v28 = sub_25BFF0060();
      sub_25BF908AC(&qword_26A584578, MEMORY[0x263F562C0]);
      swift_allocError();
      uint64_t v30 = v29;
      swift_getErrorValue();
      id v31 = v16;
      sub_25BFF0970();
      uint64_t v46 = 0xD000000000000021;
      unint64_t v47 = 0x800000025C004170;
      sub_25BFF0420();
      swift_bridgeObjectRelease();
      sub_25BF90620(MEMORY[0x263F8EE78]);
      unint64_t v32 = v42;
      sub_25BFF0040();
      uint64_t v34 = v43;
      uint64_t v33 = v44;
      (*(void (**)(uint64_t, char *, uint64_t))(v43 + 16))(v30, v32, v44);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104))(v30, *MEMORY[0x263F56248], v28);

      (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
    }
    else
    {
      uint64_t v35 = sub_25BFF0060();
      sub_25BF908AC(&qword_26A584578, MEMORY[0x263F562C0]);
      swift_allocError();
      uint64_t v37 = v36;
      sub_25BF90620(MEMORY[0x263F8EE78]);
      uint64_t v38 = v42;
      sub_25BFF0040();
      uint64_t v40 = v43;
      uint64_t v39 = v44;
      (*(void (**)(uint64_t, char *, uint64_t))(v43 + 16))(v37, v38, v44);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *MEMORY[0x263F56248], v35);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
    }
    swift_willThrow();
  }
}

uint64_t TextModerationLMInferenceProvider.loadOut(inferenceAssetIdentifier:)(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = sub_25BFF0050();
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25BF8E758, 0, 0);
}

uint64_t sub_25BF8E758()
{
  if (qword_26A584EB0 != -1) {
    swift_once();
  }
  if (sub_25BF817E0(v0[8], v0[9], qword_26A584EB8))
  {
    uint64_t v1 = v0[9];
    uint64_t v2 = v0[10];
    uint64_t v3 = v0[8];
    uint64_t v4 = *(NSObject **)(v2
                      + OBJC_IVAR____TtC26SensitiveContentAnalysisML33TextModerationLMInferenceProvider_dispatchQueue);
    uint64_t v5 = (void *)swift_allocObject();
    v5[2] = v2;
    v5[3] = v3;
    v5[4] = v1;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_25BF90954;
    *(void *)(v6 + 24) = v5;
    v0[6] = sub_25BF90AE4;
    v0[7] = v6;
    v0[2] = MEMORY[0x263EF8330];
    v0[3] = 1107296256;
    v0[4] = sub_25BF8EB0C;
    v0[5] = &block_descriptor;
    uint64_t v7 = _Block_copy(v0 + 2);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v4, v7);
    _Block_release(v7);
    LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v4)
    {
      __break(1u);
      return result;
    }
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v11 = v0[12];
    uint64_t v10 = v0[13];
    uint64_t v15 = v0[11];
    sub_25BFF06F0();
    swift_bridgeObjectRelease();
    sub_25BFF0420();
    uint64_t v12 = sub_25BFF0060();
    sub_25BF908AC(&qword_26A584578, MEMORY[0x263F562C0]);
    swift_allocError();
    uint64_t v14 = v13;
    sub_25BFF0420();
    sub_25BF90620(MEMORY[0x263F8EE78]);
    sub_25BFF0040();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v14, v10, v15);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, *MEMORY[0x263F56288], v12);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v15);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
  }
  return v9();
}

uint64_t sub_25BF8EB0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void TextModerationLMInferenceProvider.requestStream(clientData:configuration:)()
{
}

uint64_t TextModerationLMInferenceProvider.requestOneShot(clientData:configuration:)(uint64_t a1, uint64_t a2)
{
  void v3[5] = a2;
  void v3[6] = v2;
  void v3[4] = a1;
  return MEMORY[0x270FA2498](sub_25BF8EBB4, 0, 0);
}

uint64_t sub_25BF8EBB4()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = (void *)swift_task_alloc();
  v4[2] = v1;
  v4[3] = v3;
  void v4[4] = v2;
  sub_25BFF05A0();
  swift_task_dealloc();
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v7(v5, v6);
}

uint64_t sub_25BF8ECD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v26 = a3;
  os_log_type_t v24 = a4;
  uint64_t v25 = a2;
  uint64_t v30 = sub_25BFF0180();
  uint64_t v28 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25BFF01B0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26A584EE0 != -1) {
    swift_once();
  }
  uint64_t v11 = __swift_project_value_buffer(v7, (uint64_t)qword_26A584EE8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  sub_25BFF01A0();
  sub_25BFF0160();
  uint64_t v12 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v12 = 0;
  uint64_t v13 = sub_25BFF01A0();
  os_signpost_type_t v14 = sub_25BFF05D0();
  os_signpost_id_t v15 = sub_25BFF0170();
  _os_signpost_emit_with_name_impl(&dword_25BF41000, v13, v14, v15, "TextModerationLMInferenceProvider.requestOneShot", "", v12, 2u);
  uint64_t v16 = v27;
  sub_25BF8EF98(a1, v29);
  if (v16)
  {
  }
  else
  {
    os_signpost_type_t v17 = sub_25BFF05C0();
    os_signpost_id_t v18 = sub_25BFF0170();
    _os_signpost_emit_with_name_impl(&dword_25BF41000, v13, v17, v18, "TextModerationLMInferenceProvider.requestOneShot", "", v12, 2u);

    uint64_t v19 = v29[0];
    uint64_t v20 = v29[1];
    MEMORY[0x26117B7A0](v12, -1, -1);
    uint64_t v21 = v24;
    *os_log_type_t v24 = v19;
    v21[1] = v20;
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_25BF8EF98(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v4 = sub_25BFF0050();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  uint64_t v42 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_25BFF01C0();
  os_log_type_t v9 = sub_25BFF0570();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_25BF41000, v8, v9, "handling requestOneShot", v10, 2u);
    MEMORY[0x26117B7A0](v10, -1, -1);
  }

  if (*(void *)(a1 + 16))
  {
    sub_25BFEFCE0();
    swift_allocObject();
    sub_25BFEFCD0();
    sub_25BF92148();
    sub_25BFEFCC0();
    if (v2)
    {
      swift_release();
      id v18 = v2;
      id v19 = v2;
      uint64_t v20 = sub_25BFF01C0();
      os_log_type_t v21 = sub_25BFF0560();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 138412290;
        id v24 = v2;
        uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
        unint64_t v45 = v25;
        sub_25BFF0640();
        *uint64_t v23 = v25;

        _os_log_impl(&dword_25BF41000, v20, v21, "requestOneShot failed: %@", v22, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A5845F0);
        swift_arrayDestroy();
        MEMORY[0x26117B7A0](v23, -1, -1);
        MEMORY[0x26117B7A0](v22, -1, -1);
      }
      else
      {
      }
      uint64_t v26 = v41;
      uint64_t v27 = sub_25BFF0060();
      sub_25BF908AC(&qword_26A584578, MEMORY[0x263F562C0]);
      swift_allocError();
      uint64_t v29 = v28;
      swift_getErrorValue();
      id v30 = v2;
      id v31 = v2;
      sub_25BFF0970();
      unint64_t v45 = 0xD000000000000024;
      unint64_t v46 = 0x800000025C0040D0;
      sub_25BFF0420();
      swift_bridgeObjectRelease();
      sub_25BF90620(MEMORY[0x263F8EE78]);
      sub_25BFF0040();
      uint64_t v32 = v42;
      (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v29, v7, v26);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x263F56280], v27);

      (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v26);
      swift_willThrow();
    }
    else
    {
      swift_release();
      unint64_t v43 = v45;
      unint64_t v44 = v46;
      sub_25BF8F65C((unsigned __int8 *)&v45);
      swift_bridgeObjectRelease();
      char v16 = v45;
      unint64_t v17 = v46;
      sub_25BFEFD10();
      swift_allocObject();
      sub_25BFEFD00();
      LOBYTE(v45) = v16;
      unint64_t v46 = v17;
      sub_25BF9219C();
      uint64_t v33 = sub_25BFEFCF0();
      uint64_t v35 = v34;
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v36 = sub_25BFF01C0();
      os_log_type_t v37 = sub_25BFF0570();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl(&dword_25BF41000, v36, v37, "handled requestOneShot", v38, 2u);
        MEMORY[0x26117B7A0](v38, -1, -1);
      }

      uint64_t v39 = v40;
      *uint64_t v40 = v33;
      v39[1] = v35;
    }
  }
  else
  {
    uint64_t v11 = sub_25BFF0060();
    sub_25BF908AC(&qword_26A584578, MEMORY[0x263F562C0]);
    swift_allocError();
    uint64_t v13 = v12;
    sub_25BF90620(MEMORY[0x263F8EE78]);
    sub_25BFF0040();
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v13, v7, v41);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v11 - 8) + 104))(v13, *MEMORY[0x263F562B8], v11);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v14);
    swift_willThrow();
  }
}

void sub_25BF8F65C(unsigned __int8 *a1@<X8>)
{
  v43[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = sub_25BFF0050();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)(v1 + 16);
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = (void *)sub_25BFF0370();
    v43[0] = 0;
    id v11 = objc_msgSend(v9, sel_predict_error_, v10, v43);

    if (v11)
    {
      id v12 = v43[0];
      id v13 = objc_msgSend(v11, sel_predictions);
      sub_25BF921F0(0, (unint64_t *)&qword_26A584600);
      unint64_t v14 = sub_25BFF04C0();

      if (v14 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = sub_25BFF07D0();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v39 = a1;
      uint64_t v40 = v2;
      id v37 = v11;
      id v38 = v9;
      if (v15)
      {
        if (v15 < 1) {
          __break(1u);
        }
        uint64_t v16 = 0;
        unint64_t v41 = v14 & 0xC000000000000001;
        unint64_t v17 = (void *)MEMORY[0x263F8EE78];
        unint64_t v42 = v14;
        do
        {
          if (v41) {
            id v18 = (id)MEMORY[0x261179DC0](v16, v14);
          }
          else {
            id v18 = *(id *)(v14 + 8 * v16 + 32);
          }
          id v19 = v18;
          id v20 = objc_msgSend(v18, sel_nameP1, v37, v38);
          uint64_t v21 = sub_25BFF0380();
          uint64_t v23 = v22;

          unsigned __int8 v24 = objc_msgSend(v19, sel_safe);
          objc_msgSend(v19, sel_probability);
          int v26 = v25;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v17 = sub_25BF901A0(0, v17[2] + 1, 1, v17);
          }
          unint64_t v28 = v17[2];
          unint64_t v27 = v17[3];
          if (v28 >= v27 >> 1) {
            unint64_t v17 = sub_25BF901A0((void *)(v27 > 1), v28 + 1, 1, v17);
          }
          ++v16;
          void v17[2] = v28 + 1;
          uint64_t v29 = &v17[3 * v28];
          v29[4] = v21;
          v29[5] = v23;
          *((unsigned char *)v29 + 48) = v24;
          *((_DWORD *)v29 + 13) = v26;

          unint64_t v14 = v42;
        }
        while (v15 != v16);
      }
      else
      {
        unint64_t v17 = (void *)MEMORY[0x263F8EE78];
      }
      swift_bridgeObjectRelease();
      id v34 = v37;
      unsigned __int8 v35 = objc_msgSend(v37, sel_safe);

      uint64_t v36 = v39;
      *uint64_t v39 = v35;
      *((void *)v36 + 1) = v17;
    }
    else
    {
      id v33 = v43[0];
      sub_25BFEFDB0();

      swift_willThrow();
    }
  }
  else
  {
    uint64_t v30 = sub_25BFF0060();
    sub_25BF908AC(&qword_26A584578, MEMORY[0x263F562C0]);
    swift_allocError();
    uint64_t v32 = v31;
    sub_25BF90620(MEMORY[0x263F8EE78]);
    sub_25BFF0040();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v32, v7, v4);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, *MEMORY[0x263F562B8], v30);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_willThrow();
  }
}

uint64_t TextModerationLMInferenceProvider.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML33TextModerationLMInferenceProvider_logger;
  uint64_t v2 = sub_25BFF01E0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t TextModerationLMInferenceProvider.__deallocating_deinit()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML33TextModerationLMInferenceProvider_logger;
  uint64_t v2 = sub_25BFF01E0();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  objc_release(*(id *)((char *)v0
                     + OBJC_IVAR____TtC26SensitiveContentAnalysisML33TextModerationLMInferenceProvider_dispatchQueue));
  uint64_t v3 = *((unsigned int *)*v0 + 12);
  uint64_t v4 = *((unsigned __int16 *)*v0 + 26);

  return MEMORY[0x270FA0228](v0, v3, v4);
}

uint64_t sub_25BF8FC2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = swift_allocObject();
  uint64_t result = TextModerationLMInferenceProvider.init()();
  *a1 = v2;
  return result;
}

uint64_t sub_25BF8FC68(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_25BF88524;
  return TextModerationLMInferenceProvider.loadIn(inferenceAssetIdentifier:)(a1, a2);
}

uint64_t sub_25BF8FD10(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_25BF88524;
  return TextModerationLMInferenceProvider.loadOut(inferenceAssetIdentifier:)(a1, a2);
}

uint64_t sub_25BF8FDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *id v11 = v5;
  v11[1] = sub_25BF88524;
  return MEMORY[0x270F4C2C0](a1, a2, a3, a4, a5);
}

void sub_25BF8FE80()
{
}

uint64_t sub_25BF8FEE0(uint64_t a1, uint64_t a2)
{
  void v3[4] = a1;
  void v3[5] = a2;
  void v3[6] = *v2;
  return MEMORY[0x270FA2498](sub_25BF8FF08, 0, 0);
}

uint64_t sub_25BF8FF08()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = (void *)swift_task_alloc();
  v4[2] = v1;
  v4[3] = v3;
  void v4[4] = v2;
  sub_25BFF05A0();
  swift_task_dealloc();
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v7(v5, v6);
}

uint64_t sub_25BF90024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *id v11 = v5;
  v11[1] = sub_25BF88524;
  return MEMORY[0x270F4C2B8](a1, a2, a3, a4, a5);
}

uint64_t sub_25BF900F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_25BF8269C;
  return MEMORY[0x270F4C2A8](a1, a2, a3);
}

void *sub_25BF901A0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A584608);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      id v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      id v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      id v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25BF9222C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_25BF902C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_25BFF09D0();
  if (v3)
  {
    uint64_t v5 = a2 + 52;
    do
    {
      v5 += 24;
      swift_bridgeObjectRetain();
      sub_25BFF0330();
      sub_25BFF09E0();
      sub_25BFF09F0();
      uint64_t result = swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
  }
  return result;
}

unint64_t sub_25BF90364()
{
  unint64_t result = qword_26A584F18;
  if (!qword_26A584F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584F18);
  }
  return result;
}

unint64_t sub_25BF903B8()
{
  unint64_t result = qword_26A584F20;
  if (!qword_26A584F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584F20);
  }
  return result;
}

unint64_t sub_25BF9040C()
{
  unint64_t result = qword_26A5844E8;
  if (!qword_26A5844E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5844E8);
  }
  return result;
}

unint64_t sub_25BF90460()
{
  unint64_t result = qword_26A584500;
  if (!qword_26A584500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584500);
  }
  return result;
}

unint64_t sub_25BF904B4()
{
  unint64_t result = qword_26A584F28;
  if (!qword_26A584F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584F28);
  }
  return result;
}

unint64_t sub_25BF90508()
{
  unint64_t result = qword_26A584520;
  if (!qword_26A584520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584520);
  }
  return result;
}

uint64_t sub_25BF9055C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A584510);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25BF905CC()
{
  unint64_t result = qword_26A584538;
  if (!qword_26A584538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584538);
  }
  return result;
}

unint64_t sub_25BF90620(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584610);
  uint64_t v2 = (void *)sub_25BFF0800();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_25BF7FCC4(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    size_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *size_t v11 = v5;
    v11[1] = v6;
    id v12 = (void *)(v2[7] + 16 * result);
    *id v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_25BF90744()
{
  return 12383;
}

uint64_t sub_25BF90750()
{
  return 0x7966697373616C63;
}

BOOL _s26SensitiveContentAnalysisML024TextModerationLMClassifyE10PredictionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  float v3 = *(float *)(a1 + 20);
  int v4 = *(unsigned __int8 *)(a2 + 16);
  float v5 = *(float *)(a2 + 20);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    if (v2 != v4) {
      return 0;
    }
    return v3 == v5;
  }
  char v7 = sub_25BFF0920();
  BOOL result = 0;
  if ((v7 & 1) != 0 && ((v2 ^ v4) & 1) == 0) {
    return v3 == v5;
  }
  return result;
}

unint64_t sub_25BF907FC()
{
  unint64_t result = qword_26A584F30;
  if (!qword_26A584F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584F30);
  }
  return result;
}

unint64_t sub_25BF90850()
{
  unint64_t result = qword_26A584568;
  if (!qword_26A584568)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A584560);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584568);
  }
  return result;
}

uint64_t sub_25BF908AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25BF908F4()
{
  return sub_25BF8DC68(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_25BF90914()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

void sub_25BF90954()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  unint64_t v3 = v0[4];
  swift_bridgeObjectRetain_n();
  int v4 = sub_25BFF01C0();
  os_log_type_t v5 = sub_25BFF0570();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v9 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    sub_25BF866A0(v1, v3, &v9);
    sub_25BFF0640();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25BF41000, v4, v5, "unloading %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x26117B7A0](v7, -1, -1);
    MEMORY[0x26117B7A0](v6, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v8 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;
}

uint64_t sub_25BF90AD4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25BF90AE4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_25BF90B24@<X0>(uint64_t *a1@<X8>)
{
  return sub_25BF8ECD0(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_25BF90B48()
{
  unint64_t result = qword_26A584590;
  if (!qword_26A584590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584590);
  }
  return result;
}

unint64_t sub_25BF90BA0()
{
  unint64_t result = qword_26A584598;
  if (!qword_26A584598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584598);
  }
  return result;
}

unint64_t sub_25BF90BF8()
{
  unint64_t result = qword_26A5845A0;
  if (!qword_26A5845A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5845A0);
  }
  return result;
}

unint64_t sub_25BF90C50()
{
  unint64_t result = qword_26A5845A8;
  if (!qword_26A5845A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5845A8);
  }
  return result;
}

unint64_t sub_25BF90CA8()
{
  unint64_t result = qword_26A5845B0[0];
  if (!qword_26A5845B0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A5845B0);
  }
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_25BF90D14()
{
  return 0;
}

ValueMetadata *type metadata accessor for TextModerationLMRequest()
{
  return &type metadata for TextModerationLMRequest;
}

void *initializeBufferWithCopyOfBuffer for TextModerationLMClassifyTextRequest(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PromptRewriter.Error(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for TextModerationLMClassifyTextRequest(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TextModerationLMClassifyTextRequest()
{
  return &type metadata for TextModerationLMClassifyTextRequest;
}

ValueMetadata *type metadata accessor for TextModerationLMResponse()
{
  return &type metadata for TextModerationLMResponse;
}

uint64_t initializeBufferWithCopyOfBuffer for TextModerationLMClassifyTextResponse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s26SensitiveContentAnalysisML36TextModerationLMClassifyTextResponseVwca_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TextModerationLMClassifyTextResponse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s26SensitiveContentAnalysisML35TextModerationLMClassifyTextRequestVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_25BF90EF8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextModerationLMClassifyTextResponse()
{
  return &type metadata for TextModerationLMClassifyTextResponse;
}

uint64_t destroy for TextModerationLMClassifyTextPrediction()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s26SensitiveContentAnalysisML38TextModerationLMClassifyTextPredictionVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 2std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextModerationLMClassifyTextPrediction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 2std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(a2 + 20);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TextModerationLMClassifyTextPrediction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 2std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextModerationLMClassifyTextPrediction(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextModerationLMClassifyTextPrediction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextModerationLMClassifyTextPrediction()
{
  return &type metadata for TextModerationLMClassifyTextPrediction;
}

uint64_t sub_25BF910E4()
{
  return type metadata accessor for TextModerationLMInferenceProvider();
}

uint64_t type metadata accessor for TextModerationLMInferenceProvider()
{
  uint64_t result = qword_26A5859D0;
  if (!qword_26A5859D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25BF91138()
{
  uint64_t result = sub_25BFF01E0();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for TextModerationLMInferenceProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TextModerationLMInferenceProvider);
}

uint64_t dispatch thunk of TextModerationLMInferenceProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t getEnumTagSinglePayload for TextModerationLMClassifyTextPrediction.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TextModerationLMClassifyTextPrediction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25BF91368);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *sub_25BF91390(unsigned char *result, char a2)
{
  char *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TextModerationLMClassifyTextPrediction.CodingKeys()
{
  return &type metadata for TextModerationLMClassifyTextPrediction.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for TextModerationLMClassifyTextResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25BF91474);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextModerationLMClassifyTextResponse.CodingKeys()
{
  return &type metadata for TextModerationLMClassifyTextResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for TextModerationLMResponse.CodingKeys()
{
  return &type metadata for TextModerationLMResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for TextModerationLMResponse.ClassifyTextCodingKeys()
{
  return &type metadata for TextModerationLMResponse.ClassifyTextCodingKeys;
}

ValueMetadata *type metadata accessor for TextModerationLMClassifyTextRequest.CodingKeys()
{
  return &type metadata for TextModerationLMClassifyTextRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for TextModerationLMRequest.CodingKeys()
{
  return &type metadata for TextModerationLMRequest.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PromptRewriter.Error.LoadFailedCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s26SensitiveContentAnalysisML24TextModerationLMResponseO10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        char *result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      char *result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25BF915E4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextModerationLMRequest.ClassifyTextCodingKeys()
{
  return &type metadata for TextModerationLMRequest.ClassifyTextCodingKeys;
}

unint64_t sub_25BF91620()
{
  unint64_t result = qword_26A585AE0[0];
  if (!qword_26A585AE0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A585AE0);
  }
  return result;
}

unint64_t sub_25BF91678()
{
  unint64_t result = qword_26A585CF0[0];
  if (!qword_26A585CF0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A585CF0);
  }
  return result;
}

unint64_t sub_25BF916D0()
{
  unint64_t result = qword_26A585F00[0];
  if (!qword_26A585F00[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A585F00);
  }
  return result;
}

unint64_t sub_25BF91728()
{
  unint64_t result = qword_26A586110[0];
  if (!qword_26A586110[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A586110);
  }
  return result;
}

unint64_t sub_25BF91780()
{
  unint64_t result = qword_26A586320[0];
  if (!qword_26A586320[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A586320);
  }
  return result;
}

unint64_t sub_25BF917D8()
{
  unint64_t result = qword_26A586530[0];
  if (!qword_26A586530[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A586530);
  }
  return result;
}

unint64_t sub_25BF91830()
{
  unint64_t result = qword_26A586740[0];
  if (!qword_26A586740[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A586740);
  }
  return result;
}

unint64_t sub_25BF91888()
{
  unint64_t result = qword_26A586850;
  if (!qword_26A586850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A586850);
  }
  return result;
}

unint64_t sub_25BF918E0()
{
  unint64_t result = qword_26A586858[0];
  if (!qword_26A586858[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A586858);
  }
  return result;
}

unint64_t sub_25BF91938()
{
  unint64_t result = qword_26A5868E0;
  if (!qword_26A5868E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5868E0);
  }
  return result;
}

unint64_t sub_25BF91990()
{
  unint64_t result = qword_26A5868E8[0];
  if (!qword_26A5868E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A5868E8);
  }
  return result;
}

unint64_t sub_25BF919E8()
{
  unint64_t result = qword_26A586970;
  if (!qword_26A586970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A586970);
  }
  return result;
}

unint64_t sub_25BF91A40()
{
  unint64_t result = qword_26A586978;
  if (!qword_26A586978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A586978);
  }
  return result;
}

unint64_t sub_25BF91A98()
{
  unint64_t result = qword_26A586A00;
  if (!qword_26A586A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A586A00);
  }
  return result;
}

unint64_t sub_25BF91AF0()
{
  unint64_t result = qword_26A586A08[0];
  if (!qword_26A586A08[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A586A08);
  }
  return result;
}

unint64_t sub_25BF91B48()
{
  unint64_t result = qword_26A586A90;
  if (!qword_26A586A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A586A90);
  }
  return result;
}

unint64_t sub_25BF91BA0()
{
  unint64_t result = qword_26A586A98[0];
  if (!qword_26A586A98[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A586A98);
  }
  return result;
}

unint64_t sub_25BF91BF8()
{
  unint64_t result = qword_26A586B20;
  if (!qword_26A586B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A586B20);
  }
  return result;
}

unint64_t sub_25BF91C50()
{
  unint64_t result = qword_26A586B28[0];
  if (!qword_26A586B28[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A586B28);
  }
  return result;
}

unint64_t sub_25BF91CA8()
{
  unint64_t result = qword_26A586BB0;
  if (!qword_26A586BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A586BB0);
  }
  return result;
}

unint64_t sub_25BF91D00()
{
  unint64_t result = qword_26A586BB8[0];
  if (!qword_26A586BB8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A586BB8);
  }
  return result;
}

uint64_t sub_25BF91D54(uint64_t a1, uint64_t a2)
{
  if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_25BFF0920();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_25BF91DCC()
{
  return 1954047348;
}

uint64_t sub_25BF91DDC(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_25BFF0920();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_25BF91E4C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7966697373616C63 && a2 == 0xEC00000074786554)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_25BFF0920();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_25BF91EE4(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 1701208435 && a2 == 0xE400000000000000;
  if (v3 || (sub_25BFF0920() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6974636964657270 && a2 == 0xEB00000000736E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_25BFF0920();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25BF91FD0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x3150656D616ELL && a2 == 0xE600000000000000;
  if (v3 || (sub_25BFF0920() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701208435 && a2 == 0xE400000000000000 || (sub_25BFF0920() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C696261626F7270 && a2 == 0xEB00000000797469)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_25BFF0920();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_25BF92148()
{
  unint64_t result = qword_26A5845E8;
  if (!qword_26A5845E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5845E8);
  }
  return result;
}

unint64_t sub_25BF9219C()
{
  unint64_t result = qword_26A5845F8;
  if (!qword_26A5845F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5845F8);
  }
  return result;
}

uint64_t sub_25BF921F0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_25BF9222C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_25BFF0810();
  __break(1u);
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_25BF92390@<X0>(uint64_t *a1@<X8>)
{
  return sub_25BF90B24(a1);
}

uint64_t static SCMLAsset.safetyID.getter()
{
  return sub_25BF92474(0, MEMORY[0x263F55FC0], MEMORY[0x263F55FA8]);
}

unint64_t sub_25BF923F0()
{
  unint64_t result = qword_26A584618;
  if (!qword_26A584618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584618);
  }
  return result;
}

uint64_t static SCMLAsset.admPeopleGroundingID.getter()
{
  return sub_25BF92474(1, MEMORY[0x263F55FB8], MEMORY[0x263F55FB0]);
}

uint64_t sub_25BF92474(char a1, void (*a2)(void *__return_ptr, uint64_t), void (*a3)(void *__return_ptr, uint64_t))
{
  size_t v11 = &type metadata for SCMLFeatureFlags;
  unint64_t v12 = sub_25BF923F0();
  LOBYTE(v10[0]) = a1;
  char v6 = sub_25BFEFDF0();
  uint64_t v7 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
  if (v6) {
    a2(v10, v7);
  }
  else {
    a3(v10, v7);
  }
  __swift_project_boxed_opaque_existential_1(v10, (uint64_t)v11);
  uint64_t v8 = sub_25BFEFE40();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
  return v8;
}

ValueMetadata *type metadata accessor for SCMLAsset()
{
  return &type metadata for SCMLAsset;
}

id SCMLTextModerationLMFromMM.__allocating_init(onBehalfOf:modelManagerServicesUseCaseID:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return SCMLTextModerationLMFromMM.init(onBehalfOf:modelManagerServicesUseCaseID:)(a1);
}

id SCMLTextModerationLMFromMM.init(onBehalfOf:modelManagerServicesUseCaseID:)(uint64_t a1)
{
  uint64_t v3 = v2;
  unint64_t v5 = &v1[OBJC_IVAR____TtC26SensitiveContentAnalysisML26SCMLTextModerationLMFromMM_logger];
  char v6 = v1;
  sub_25BFF01D0();
  sub_25BFEFE30();
  __swift_project_boxed_opaque_existential_1(v27, v27[3]);
  uint64_t v7 = sub_25BFEFE40();
  unint64_t v9 = v8;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
  if (a1 < 0)
  {
    id v10 = objc_msgSend(self, sel_processInfo);
    objc_msgSend(v10, sel_processIdentifier);

    uint64_t v3 = v2;
  }
  swift_bridgeObjectRetain_n();
  size_t v11 = sub_25BFF01C0();
  os_log_type_t v12 = sub_25BFF0570();
  if (os_log_type_enabled(v11, v12))
  {
    unsigned __int8 v24 = v5;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = v7;
    uint64_t v14 = swift_slowAlloc();
    v27[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_25BF866A0(v25, v9, v27);
    sub_25BFF0640();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25BF41000, v11, v12, "Begin prewarm TextModerationLM: %s", v13, 0xCu);
    swift_arrayDestroy();
    uint64_t v15 = v14;
    uint64_t v7 = v25;
    MEMORY[0x26117B7A0](v15, -1, -1);
    uint64_t v16 = v13;
    unint64_t v5 = v24;
    MEMORY[0x26117B7A0](v16, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_25BFF0100();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843D0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_25BFF5CF0;
  *(void *)(v17 + 32) = v7;
  *(void *)(v17 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v9;
  swift_bridgeObjectRetain();
  *(void *)&v6[OBJC_IVAR____TtC26SensitiveContentAnalysisML26SCMLTextModerationLMFromMM_session] = sub_25BFF00F0();
  swift_retain();
  sub_25BFF00E0();
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v18 = sub_25BFF01E0();
    (*(void (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v5, v18);

    type metadata accessor for SCMLTextModerationLMFromMM();
    return (id)swift_deallocPartialClassInstance();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRetain();
    id v20 = sub_25BFF01C0();
    os_log_type_t v21 = sub_25BFF0570();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v27[0] = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_25BF866A0(v7, v9, v27);
      sub_25BFF0640();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25BF41000, v20, v21, "End prewarm TextModerationLM: %s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x26117B7A0](v23, -1, -1);
      MEMORY[0x26117B7A0](v22, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v26.receiver = v6;
    v26.super_class = (Class)type metadata accessor for SCMLTextModerationLMFromMM();
    return objc_msgSendSuper2(&v26, sel_init);
  }
}

uint64_t type metadata accessor for SCMLTextModerationLMFromMM()
{
  uint64_t result = qword_26A586C48;
  if (!qword_26A586C48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25BF92B98(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  void v3[6] = a1;
  uint64_t v4 = sub_25BFF00D0();
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25BF92C5C, 0, 0);
}

uint64_t sub_25BF92C5C()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  type metadata accessor for SCMLSafetyGuardrail();
  v3._countAndFlagsBits = static SCMLSafetyGuardrail.trimEmojiPrefix(text:)(v1, v2);
  TextModerationLMClassifyTextRequest.init(text:)(v3);
  sub_25BFEFD10();
  swift_allocObject();
  sub_25BFEFD00();
  v0[2] = v13;
  v0[3] = v14;
  sub_25BF93664();
  uint64_t v4 = sub_25BFEFCF0();
  v0[12] = v4;
  v0[13] = v5;
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  swift_release();
  swift_bridgeObjectRelease();
  swift_retain();
  sub_25BF936B8(v6, v7);
  sub_25BFF00C0();
  v0[14] = OBJC_IVAR____TtC26SensitiveContentAnalysisML26SCMLTextModerationLMFromMM_logger;
  unint64_t v8 = sub_25BFF01C0();
  os_log_type_t v9 = sub_25BFF0550();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v10 = 0;
    _os_log_impl(&dword_25BF41000, v8, v9, "Begin MM execute", v10, 2u);
    MEMORY[0x26117B7A0](v10, -1, -1);
  }

  size_t v11 = (void *)swift_task_alloc();
  v0[15] = v11;
  *size_t v11 = v0;
  v11[1] = sub_25BF92EC4;
  return MEMORY[0x270F4C3B0]();
}

uint64_t sub_25BF92EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[16] = a1;
  v4[17] = a2;
  v4[18] = v2;
  swift_task_dealloc();
  if (v2) {
    unint64_t v5 = sub_25BF93234;
  }
  else {
    unint64_t v5 = sub_25BF92FDC;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_25BF92FDC()
{
  uint64_t v19 = v0;
  uint64_t v1 = sub_25BFF01C0();
  os_log_type_t v2 = sub_25BFF0550();
  if (os_log_type_enabled(v1, v2))
  {
    Swift::String v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v3 = 0;
    _os_log_impl(&dword_25BF41000, v1, v2, "End MM execute", v3, 2u);
    MEMORY[0x26117B7A0](v3, -1, -1);
  }
  uint64_t v4 = *(void *)(v0 + 144);

  sub_25BFEFCE0();
  swift_allocObject();
  sub_25BFEFCD0();
  sub_25BF93768();
  sub_25BFEFCC0();
  uint64_t v6 = *(void *)(v0 + 128);
  unint64_t v5 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 96);
  unint64_t v7 = *(void *)(v0 + 104);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 72);
  if (v4)
  {
    (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
    sub_25BF93710(v8, v7);
    swift_release();
    sub_25BF93710(v6, v5);
    swift_task_dealloc();
    os_log_type_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  else
  {
    swift_release();
    uint64_t v14 = *(void *)(v0 + 40);
    v17[0] = *(unsigned char *)(v0 + 32);
    uint64_t v18 = v14;
    swift_bridgeObjectRetain();
    id v15 = sub_25BF937BC(v17);
    sub_25BF93710(v6, v5);
    swift_bridgeObjectRelease();
    sub_25BF93710(v8, v7);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(id))(v0 + 8);
    return v16(v15);
  }
}

uint64_t sub_25BF93234()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  sub_25BF93710(v0[12], v0[13]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_25BF93444(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  void v3[3] = _Block_copy(aBlock);
  uint64_t v5 = sub_25BFF0380();
  uint64_t v7 = v6;
  void v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_25BF85CCC;
  return sub_25BF92B98(v5, v7);
}

id SCMLTextModerationLMFromMM.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void SCMLTextModerationLMFromMM.init()()
{
}

id SCMLTextModerationLMFromMM.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SCMLTextModerationLMFromMM();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_25BF93664()
{
  unint64_t result = qword_26A584630;
  if (!qword_26A584630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584630);
  }
  return result;
}

uint64_t sub_25BF936B8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_25BF93710(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t sub_25BF93768()
{
  unint64_t result = qword_26A584638;
  if (!qword_26A584638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584638);
  }
  return result;
}

id sub_25BF937BC(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (int *)(v2 + 52);
    do
    {
      uint64_t v5 = *((unsigned __int8 *)v4 - 4);
      int v6 = *v4;
      id v7 = objc_allocWithZone((Class)SCMLTextModerationLMPrediction);
      swift_bridgeObjectRetain();
      uint64_t v8 = (void *)sub_25BFF0370();
      LODWORD(v9) = v6;
      objc_msgSend(v7, sel_initWithNameP1_safe_probability_, v8, v5, v9);
      swift_bridgeObjectRelease();

      MEMORY[0x261179B50]();
      if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_25BFF04F0();
      }
      sub_25BFF0510();
      sub_25BFF04E0();
      v4 += 6;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  id v10 = objc_msgSend(objc_allocWithZone((Class)SCMLTextModerationLMResult), sel_init);
  objc_msgSend(v10, sel_setSafe_, v1);
  sub_25BF93C70();
  uint64_t v11 = (void *)sub_25BFF04B0();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setPredictions_, v11);

  return v10;
}

uint64_t sub_25BF93968()
{
  return type metadata accessor for SCMLTextModerationLMFromMM();
}

uint64_t sub_25BF93970()
{
  uint64_t result = sub_25BFF01E0();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SCMLTextModerationLMFromMM(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SCMLTextModerationLMFromMM);
}

uint64_t dispatch thunk of SCMLTextModerationLMFromMM.__allocating_init(onBehalfOf:modelManagerServicesUseCaseID:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SCMLTextModerationLMFromMM.predict(text:)(uint64_t a1, uint64_t a2)
{
  int v6 = *(int **)((*MEMORY[0x263F8EED0] & *v2) + 0x90);
  double v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = sub_25BF87C9C;
  return v9(a1, a2);
}

uint64_t sub_25BF93B6C()
{
  _Block_release(*(const void **)(v0 + 24));

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25BF93BB4()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_25BF8269C;
  int v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_26A584648 + dword_26A584648);
  return v6(v2, v3, v4);
}

unint64_t sub_25BF93C70()
{
  unint64_t result = qword_26A584600;
  if (!qword_26A584600)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26A584600);
  }
  return result;
}

unint64_t sub_25BF93CB0(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0xD00000000000001ELL;
  }
  sub_25BFF06F0();
  swift_bridgeObjectRelease();
  sub_25BFF0420();
  return 0xD00000000000001DLL;
}

uint64_t sub_25BF93D4C(char a1)
{
  if (a1) {
    return 0x6961466573726170;
  }
  else {
    return 0x6C69614664616F6CLL;
  }
}

uint64_t sub_25BF93D90()
{
  return sub_25BF93D4C(*v0);
}

uint64_t sub_25BF93D98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25BF99630(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25BF93DC0(uint64_t a1)
{
  unint64_t v2 = sub_25BF94284();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25BF93DFC(uint64_t a1)
{
  unint64_t v2 = sub_25BF94284();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25BF93E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_25BF99734(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_25BF93E6C(uint64_t a1)
{
  unint64_t v2 = sub_25BF9432C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25BF93EA8(uint64_t a1)
{
  unint64_t v2 = sub_25BF9432C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25BF93EE4()
{
  return 0;
}

uint64_t sub_25BF93EF0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_25BF93F20(uint64_t a1)
{
  unint64_t v2 = sub_25BF942D8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25BF93F5C(uint64_t a1)
{
  unint64_t v2 = sub_25BF942D8();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25BF93F98(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a3;
  uint64_t v20 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584668);
  uint64_t v18 = *(void *)(v4 - 8);
  uint64_t v19 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v17 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584670);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  double v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584678);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25BF94284();
  uint64_t v14 = v21;
  sub_25BFF0A20();
  if (v14)
  {
    char v22 = 0;
    sub_25BF9432C();
    sub_25BFF08A0();
    sub_25BFF08B0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    char v23 = 1;
    sub_25BF942D8();
    uint64_t v16 = v17;
    sub_25BFF08A0();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

unint64_t sub_25BF94284()
{
  unint64_t result = qword_26A586C70;
  if (!qword_26A586C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A586C70);
  }
  return result;
}

unint64_t sub_25BF942D8()
{
  unint64_t result = qword_26A586C78;
  if (!qword_26A586C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A586C78);
  }
  return result;
}

unint64_t sub_25BF9432C()
{
  unint64_t result = qword_26A586C80;
  if (!qword_26A586C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A586C80);
  }
  return result;
}

uint64_t sub_25BF94380(uint64_t a1)
{
  unint64_t v2 = sub_25BF99D60();

  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t sub_25BF943BC(uint64_t a1)
{
  unint64_t v2 = sub_25BF99D60();

  return MEMORY[0x270EF2668](a1, v2);
}

uint64_t sub_25BF943F8(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (!v3) {
    return v4 == 0;
  }
  if (!v4) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  else {
    return sub_25BFF0920();
  }
}

uint64_t sub_25BF94444@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_25BF997D4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_25BF94470(void *a1)
{
  return sub_25BF93F98(a1, *v1, v1[1]);
}

unint64_t sub_25BF9448C()
{
  return sub_25BF93CB0(*v0, v0[1]);
}

uint64_t sub_25BF94494()
{
  sub_25BF9AA30();

  return sub_25BF7FCBC();
}

uint64_t sub_25BF944E0()
{
  return 1000;
}

unint64_t sub_25BF944E8()
{
  sub_25BF9AA30();

  return sub_25BF7FA88();
}

uint64_t PromptRewriter.__allocating_init(modelManagerServicesUseCaseID:onBehalfOf:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v7 = a4 & 1;
  uint64_t v8 = swift_allocObject();
  PromptRewriter.init(modelManagerServicesUseCaseID:onBehalfOf:)(a1, a2, a3, v7);
  return v8;
}

uint64_t PromptRewriter.init(modelManagerServicesUseCaseID:onBehalfOf:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  LODWORD(v52) = a4;
  uint64_t v51 = a3;
  uint64_t v56 = a2;
  uint64_t v49 = a1;
  uint64_t v55 = sub_25BFEFF70();
  uint64_t v53 = *(void *)(v55 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v55);
  uint64_t v54 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v50 = (char *)v44 - v8;
  uint64_t v9 = sub_25BFEFEB0();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v48 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584328);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_25BFEFED0();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v4 + OBJC_IVAR____TtC26SensitiveContentAnalysisML14PromptRewriter_logger;
  sub_25BFF01D0();
  sub_25BFEFE20();
  __swift_project_boxed_opaque_existential_1(v57, v57[3]);
  uint64_t v19 = sub_25BFEFE40();
  unint64_t v21 = v20;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v57);
  swift_bridgeObjectRetain();
  sub_25BFEFEC0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    swift_bridgeObjectRelease();
    sub_25BF8830C((uint64_t)v13, &qword_26A584328);
    sub_25BF99C5C();
    swift_allocError();
    uint64_t *v22 = v19;
    v22[1] = v21;
    swift_willThrow();
    uint64_t v23 = sub_25BFF01E0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v18, v23);
    type metadata accessor for PromptRewriter();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v45 = v19;
    v44[3] = v52 & 1;
    unsigned __int8 v24 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    uint64_t v52 = v17;
    v24(v17, v13, v14);
    swift_bridgeObjectRetain_n();
    uint64_t v25 = sub_25BFF01C0();
    os_log_type_t v26 = sub_25BFF0570();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v46 = v14;
    uint64_t v47 = v5;
    if (v27)
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      v57[0] = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v58 = sub_25BF866A0(v45, v21, v57);
      sub_25BFF0640();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25BF41000, v25, v26, "Begin prewarm prompt rewrite model: %s", v28, 0xCu);
      swift_arrayDestroy();
      uint64_t v30 = v29;
      uint64_t v31 = v46;
      MEMORY[0x26117B7A0](v30, -1, -1);
      uint64_t v32 = v28;
      uint64_t v5 = v47;
      MEMORY[0x26117B7A0](v32, -1, -1);
    }
    else
    {
      uint64_t v31 = v14;
      swift_bridgeObjectRelease_n();
    }

    uint64_t v33 = v53;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A584338);
    unint64_t v34 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_25BFF5CF0;
    (*(void (**)(unint64_t, char *, uint64_t))(v15 + 16))(v35 + v34, v52, v31);
    sub_25BFEFEA0();
    uint64_t v36 = v54;
    sub_25BFEFF50();
    uint64_t v37 = v55;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v50, v36, v55);
    sub_25BFEFE90();
    swift_allocObject();
    *(void *)(v5 + OBJC_IVAR____TtC26SensitiveContentAnalysisML14PromptRewriter_tokenGenerator) = sub_25BFEFE70();
    swift_retain();
    sub_25BFEFE80();
    swift_release();
    swift_bridgeObjectRetain();
    id v38 = sub_25BFF01C0();
    os_log_type_t v39 = sub_25BFF0570();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      v57[0] = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v58 = sub_25BF866A0(v45, v21, v57);
      sub_25BFF0640();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25BF41000, v38, v39, "End prewarm prompt rewrite model: %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x26117B7A0](v41, -1, -1);
      unint64_t v42 = v40;
      uint64_t v5 = v47;
      MEMORY[0x26117B7A0](v42, -1, -1);

      (*(void (**)(char *, uint64_t))(v33 + 8))(v54, v55);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v52, v46);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v37);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v52, v31);
    }
  }
  return v5;
}

uint64_t sub_25BF94D44(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v7 + 32) = 0;
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v6 + 112)
                                                                                              + **(int **)(*(void *)v6 + 112));
  uint64_t v12 = a4 & 1;
  uint64_t v13 = a6 & 1;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  void *v14 = v7;
  v14[1] = sub_25BF94E94;
  return v16(v7 + 32, a1, a2, a3, v12, a5, v13);
}

uint64_t sub_25BF94E94(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 24) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](sub_25BF9AB88, 0, 0);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

SensitiveContentAnalysisML::PromptRewriter::PromptStyle_optional __swiftcall PromptRewriter.PromptStyle.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_25BFF0820();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  char *v2 = v5;
  return result;
}

uint64_t PromptRewriter.PromptStyle.rawValue.getter()
{
  if (*v0) {
    return 0x616C506567616D69;
  }
  else {
    return 0x696A6F6D6E6567;
  }
}

uint64_t sub_25BF9507C(char *a1, char *a2)
{
  return sub_25BF95088(*a1, *a2);
}

uint64_t sub_25BF95088(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x616C506567616D69;
  }
  else {
    uint64_t v3 = 0x696A6F6D6E6567;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xEF646E756F726779;
  }
  if (a2) {
    uint64_t v5 = 0x616C506567616D69;
  }
  else {
    uint64_t v5 = 0x696A6F6D6E6567;
  }
  if (a2) {
    unint64_t v6 = 0xEF646E756F726779;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25BFF0920();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_25BF95138()
{
  return sub_25BF95140();
}

uint64_t sub_25BF95140()
{
  return sub_25BFF0A00();
}

uint64_t sub_25BF951D0()
{
  return sub_25BF951D8();
}

uint64_t sub_25BF951D8()
{
  sub_25BFF0330();

  return swift_bridgeObjectRelease();
}

uint64_t sub_25BF95250()
{
  return sub_25BF95258();
}

uint64_t sub_25BF95258()
{
  return sub_25BFF0A00();
}

SensitiveContentAnalysisML::PromptRewriter::PromptStyle_optional sub_25BF952E4(Swift::String *a1)
{
  return PromptRewriter.PromptStyle.init(rawValue:)(*a1);
}

uint64_t sub_25BF952F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PromptRewriter.PromptStyle.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_25BF95318(unsigned char *a1)
{
  *(unsigned char *)(v2 + 32) = *a1;
  uint64_t v4 = *(void *)(*(void *)v1 + 120) + **(int **)(*(void *)v1 + 120);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v3;
  void *v3 = v2;
  v3[1] = sub_25BF9547C;
  __asm { BRAA            X9, X16 }
}

uint64_t sub_25BF9547C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 24) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](sub_25BF955B8, 0, 0);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_25BF955B8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_25BF955D0(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  *(unsigned char *)(v9 + 123) = v11;
  *(void *)(v9 + 72) = a8;
  *(void *)(v9 + 8std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v8;
  *(unsigned char *)(v9 + 122) = a7;
  *(unsigned char *)(v9 + 121) = a5;
  *(void *)(v9 + 56) = a4;
  *(void *)(v9 + 64) = a6;
  *(void *)(v9 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = a2;
  *(void *)(v9 + 48) = a3;
  *(unsigned char *)(v9 + 124) = *a1;
  return MEMORY[0x270FA2498](sub_25BF95614, 0, 0);
}

uint64_t sub_25BF95614()
{
  uint64_t v18 = v0;
  *(void *)(v0 + 88) = OBJC_IVAR____TtC26SensitiveContentAnalysisML14PromptRewriter_logger;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = sub_25BFF01C0();
  os_log_type_t v2 = sub_25BFF0570();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = *(unsigned __int8 *)(v0 + 124);
    unint64_t v4 = *(void *)(v0 + 48);
    uint64_t v16 = *(void *)(v0 + 40);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v17 = v6;
    *(_DWORD *)uint64_t v5 = 136315395;
    if (v3) {
      uint64_t v7 = 0x616C506567616D69;
    }
    else {
      uint64_t v7 = 0x696A6F6D6E6567;
    }
    if (v3) {
      unint64_t v8 = 0xEF646E756F726779;
    }
    else {
      unint64_t v8 = 0xE700000000000000;
    }
    *(void *)(v0 + 24) = sub_25BF866A0(v7, v8, &v17);
    sub_25BFF0640();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2085;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 32) = sub_25BF866A0(v16, v4, &v17);
    sub_25BFF0640();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25BF41000, v1, v2, "Begin prompt rewrite promptStyle=%s: %{sensitive}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x26117B7A0](v6, -1, -1);
    MEMORY[0x26117B7A0](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  char v9 = *(unsigned char *)(v0 + 122);
  if (*(unsigned char *)(v0 + 123)) {
    double v10 = 1.0;
  }
  else {
    double v10 = *(double *)(v0 + 72);
  }
  *(unsigned char *)(v0 + 12std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = *(unsigned char *)(v0 + 124);
  char v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v11;
  *char v11 = v0;
  v11[1] = sub_25BF958B4;
  uint64_t v12 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 40);
  uint64_t v14 = *(void *)(v0 + 48);
  return sub_25BF9602C((unsigned char *)(v0 + 120), v13, v14, v12, v9 & 1, v10);
}

uint64_t sub_25BF958B4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v1;
  swift_task_dealloc();
  if (v1) {
    unint64_t v4 = sub_25BF95C74;
  }
  else {
    unint64_t v4 = sub_25BF959C8;
  }
  return MEMORY[0x270FA2498](v4, 0, 0);
}

uint64_t sub_25BF959C8()
{
  uint64_t v18 = v1;
  if ((*(unsigned char *)(v1 + 121) & 1) != 0 || (uint64_t v2 = *(void *)(v1 + 56), *(void *)(*(void *)(v1 + 104) + 16) <= v2))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v7 = sub_25BFF01C0();
    os_log_type_t v8 = sub_25BFF0570();
    if (os_log_type_enabled(v7, v8))
    {
      char v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v17 = v10;
      *(_DWORD *)char v9 = 136642819;
      uint64_t v11 = swift_bridgeObjectRetain();
      uint64_t v12 = MEMORY[0x261179B80](v11, MEMORY[0x263F8D310]);
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      *(void *)(v1 + 16) = sub_25BF866A0(v12, v14, &v17);
      sub_25BFF0640();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25BF41000, v7, v8, "End prompt rewrite: %{sensitive}s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x26117B7A0](v10, -1, -1);
      MEMORY[0x26117B7A0](v9, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v6 = *(void *)(v1 + 104);
    goto LABEL_13;
  }
  if (v2 < 0)
  {
    __break(1u);
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_25BF994BC(v0, v0 + 32, 0, (2 * v2) | 1);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  sub_25BFF0930();
  swift_unknownObjectRetain_n();
  uint64_t v3 = swift_dynamicCastClass();
  uint64_t v4 = v2;
  if (!v3)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v1 + 56);
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  uint64_t v5 = *(void *)(v3 + 16);
  swift_release();
  uint64_t v0 = *(void *)(v1 + 104);
  if (v5 != v4) {
    goto LABEL_17;
  }
  uint64_t v6 = swift_dynamicCastClass();
  swift_bridgeObjectRelease();
  if (!v6)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
LABEL_13:
  uint64_t v15 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return v15(v6);
}

uint64_t sub_25BF95C74()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static PromptRewriter.parseRawResponse(_:)()
{
  v16[4] = *(id *)MEMORY[0x263EF8340];
  uint64_t v0 = sub_25BFF03B0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v16[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25BFF03A0();
  uint64_t v4 = sub_25BFF0390();
  unint64_t v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 != 15)
  {
    uint64_t v7 = self;
    os_log_type_t v8 = (void *)sub_25BFEFDC0();
    v16[0] = 0;
    id v9 = objc_msgSend(v7, sel_JSONObjectWithData_options_error_, v8, 0, v16);

    if (v9)
    {
      id v10 = v16[0];
      sub_25BFF06B0();
      sub_25BF99CFC(v4, v6);
      swift_unknownObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A5846A8);
      if (swift_dynamicCast()) {
        return v15;
      }
    }
    else
    {
      id v12 = v16[0];
      unint64_t v13 = (void *)sub_25BFEFDB0();

      swift_willThrow();
      sub_25BF99CFC(v4, v6);
    }
  }
  sub_25BF99C5C();
  swift_allocError();
  void *v14 = 0;
  v14[1] = 0;
  return swift_willThrow();
}

unint64_t sub_25BF95ED0()
{
  unint64_t result = sub_25BF95EF8((uint64_t)&unk_2709748C8);
  qword_26A586C68 = result;
  return result;
}

unint64_t sub_25BF95EF8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584748);
  uint64_t v2 = (void *)sub_25BFF0800();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 4);
    uint64_t v6 = *((void *)v4 - 3);
    uint64_t v8 = *((void *)v4 - 2);
    uint64_t v7 = *((void *)v4 - 1);
    char v9 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_25BF7FCC4(v5, v6);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v12 = (uint64_t *)(v2[6] + 16 * result);
    *id v12 = v5;
    v12[1] = v6;
    uint64_t v13 = v2[7] + 24 * result;
    *(void *)uint64_t v13 = v8;
    *(void *)(v13 + 8) = v7;
    *(unsigned char *)(v13 + 16) = v9;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4 += 40;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_25BF9602C(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, double a6)
{
  *(void *)(v7 + 104) = v6;
  *(double *)(v7 + 96) = a6;
  *(unsigned char *)(v7 + 304) = a5;
  *(void *)(v7 + 8std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = a3;
  *(void *)(v7 + 88) = a4;
  *(void *)(v7 + 72) = a2;
  uint64_t v9 = sub_25BFF03B0();
  *(void *)(v7 + 112) = v9;
  *(void *)(v7 + 12std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = *(void *)(v9 - 8);
  *(void *)(v7 + 128) = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584360);
  *(void *)(v7 + 136) = v10;
  *(void *)(v7 + 144) = *(void *)(v10 - 8);
  *(void *)(v7 + 152) = swift_task_alloc();
  *(void *)(v7 + 16std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584730);
  *(void *)(v7 + 168) = swift_task_alloc();
  uint64_t v11 = sub_25BFF0120();
  *(void *)(v7 + 176) = v11;
  *(void *)(v7 + 184) = *(void *)(v11 - 8);
  *(void *)(v7 + 192) = swift_task_alloc();
  *(unsigned char *)(v7 + 305) = *a1;
  return MEMORY[0x270FA2498](sub_25BF96238, 0, 0);
}

uint64_t sub_25BF96238()
{
  sub_25BFEFE00();
  if (qword_26A586C60 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 104);
  char v2 = *(unsigned char *)(v0 + 304);
  swift_bridgeObjectRetain();
  sub_25BFF0110();
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, __n128))(*(void *)(*(void *)v1 + 160)
                                                                                            + **(int **)(*(void *)v1 + 160));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 20std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v3;
  void *v3 = v0;
  v3[1] = sub_25BF96438;
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 160);
  v6.n128_u64[0] = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 72);
  return v11(v5, v4, v9, v7, v8, v2 & 1, v6);
}

uint64_t sub_25BF96438()
{
  char v2 = (void *)*v1;
  v2[26] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_25BF96808, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[27] = v3;
    uint64_t v4 = sub_25BF9AAB0(&qword_26A584370, MEMORY[0x263F7F7D8]);
    void *v3 = v2;
    v3[1] = sub_25BF96638;
    uint64_t v5 = v2[17];
    return MEMORY[0x270F2EEA0](v5, v4);
  }
}

uint64_t sub_25BF96638(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)v3;
  uint64_t v6 = *(void *)(*(void *)v3 + 144);
  v5[28] = a2;
  v5[29] = v2;
  swift_task_dealloc();
  uint64_t v7 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  v5[30] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v8 = v5[20];
  uint64_t v9 = v5[17];
  if (v2)
  {
    (*v7)(v8, v9);
    uint64_t v10 = sub_25BF96C84;
  }
  else
  {
    v5[31] = a1;
    uint64_t v11 = *v7;
    v5[32] = *v7;
    v11(v8, v9);
    uint64_t v10 = sub_25BF968F4;
  }
  return MEMORY[0x270FA2498](v10, 0, 0);
}

uint64_t sub_25BF96808()
{
  (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_25BF968F4()
{
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 112);
  sub_25BFF03A0();
  uint64_t v4 = sub_25BFF0390();
  unint64_t v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v6 >> 60 != 15)
  {
    uint64_t v7 = self;
    uint64_t v8 = (void *)sub_25BFEFDC0();
    *(void *)(v0 + 56) = 0;
    id v9 = objc_msgSend(v7, sel_JSONObjectWithData_options_error_, v8, 0, v0 + 56);

    uint64_t v10 = *(void **)(v0 + 56);
    if (v9)
    {
      id v11 = v10;
      sub_25BFF06B0();
      sub_25BF99CFC(v4, v6);
      swift_unknownObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A5846A8);
      if (swift_dynamicCast())
      {
        uint64_t v12 = *(void *)(v0 + 64);
        (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v13 = *(uint64_t (**)(uint64_t))(v0 + 8);
        return v13(v12);
      }
    }
    else
    {
      id v15 = v10;
      uint64_t v16 = (void *)sub_25BFEFDB0();

      swift_willThrow();
      sub_25BF99CFC(v4, v6);
    }
  }
  uint64_t v17 = *(void *)(v0 + 104);
  char v18 = *(unsigned char *)(v0 + 304);
  sub_25BF99C5C();
  *(void *)(v0 + 264) = swift_allocError();
  *uint64_t v19 = 0;
  v19[1] = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  BOOL v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, __n128))(*(void *)(*(void *)v17 + 136)
                                                                                            + **(int **)(*(void *)v17 + 136));
  unint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v20;
  *unint64_t v20 = v0;
  v20[1] = sub_25BF96D70;
  uint64_t v21 = *(void *)(v0 + 192);
  uint64_t v22 = *(void *)(v0 + 152);
  v23.n128_u64[0] = *(void *)(v0 + 96);
  uint64_t v24 = *(void *)(v0 + 80);
  uint64_t v25 = *(void *)(v0 + 88);
  uint64_t v26 = *(void *)(v0 + 72);
  return v27(v22, v21, v26, v24, v25, v18 & 1, v23);
}

uint64_t sub_25BF96C84()
{
  (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_25BF96D70()
{
  uint64_t v2 = (void *)*v1;
  v2[35] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_25BF97144, 0, 0);
  }
  else
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A5846A8);
    uint64_t v4 = (void *)swift_task_alloc();
    v2[36] = v4;
    uint64_t v5 = sub_25BF9AAB0(&qword_26A584738, MEMORY[0x263F7F7D8]);
    unint64_t v6 = sub_25BF9AAF8();
    *uint64_t v4 = v2;
    v4[1] = sub_25BF96FA8;
    uint64_t v7 = v2[17];
    return MEMORY[0x270F2EEB8](v2 + 6, v3, v3, v7, v3, v5, v6);
  }
}

uint64_t sub_25BF96FA8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2 + 256))(*(void *)(v2 + 152), *(void *)(v2 + 136));
  if (v0) {
    uint64_t v3 = sub_25BF97334;
  }
  else {
    uint64_t v3 = sub_25BF97238;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_25BF97144()
{
  (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25BF97238()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 48);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

uint64_t sub_25BF97334()
{
  (*(void (**)(void, void))(*(void *)(v0 + 184) + 8))(*(void *)(v0 + 192), *(void *)(v0 + 176));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25BF97428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7)
{
  char v15 = a6 & 1;
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  *uint64_t v16 = v8;
  v16[1] = sub_25BF8269C;
  return sub_25BF9750C(a1, a2, a3, a4, a5, v15, v7, a7);
}

uint64_t sub_25BF9750C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, double a8)
{
  *(unsigned char *)(v8 + 652) = a6;
  *(void *)(v8 + 32std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = a5;
  *(void *)(v8 + 328) = a7;
  *(double *)(v8 + 312) = a8;
  *(void *)(v8 + 296) = a3;
  *(void *)(v8 + 304) = a4;
  *(void *)(v8 + 28std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = a1;
  *(void *)(v8 + 288) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843D8);
  *(void *)(v8 + 336) = swift_task_alloc();
  *(void *)(v8 + 344) = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843E0);
  *(void *)(v8 + 352) = swift_task_alloc();
  uint64_t v9 = sub_25BFF0000();
  *(void *)(v8 + 36std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v9;
  *(void *)(v8 + 368) = *(void *)(v9 - 8);
  *(void *)(v8 + 376) = swift_task_alloc();
  uint64_t v10 = sub_25BFF0010();
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = *(void *)(v10 - 8);
  *(void *)(v8 + 40std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843E8);
  *(void *)(v8 + 408) = swift_task_alloc();
  uint64_t v11 = sub_25BFF0150();
  *(void *)(v8 + 416) = v11;
  *(void *)(v8 + 424) = *(void *)(v11 - 8);
  *(void *)(v8 + 432) = swift_task_alloc();
  *(void *)(v8 + 44std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843F0);
  *(void *)(v8 + 448) = swift_task_alloc();
  *(void *)(v8 + 456) = swift_task_alloc();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843F8);
  *(void *)(v8 + 464) = v12;
  *(void *)(v8 + 472) = *(void *)(v12 - 8);
  *(void *)(v8 + 48std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = swift_task_alloc();
  uint64_t v13 = sub_25BFF0210();
  *(void *)(v8 + 488) = v13;
  *(void *)(v8 + 496) = *(void *)(v13 - 8);
  *(void *)(v8 + 504) = swift_task_alloc();
  *(void *)(v8 + 512) = swift_task_alloc();
  *(void *)(v8 + 52std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = swift_task_alloc();
  *(void *)(v8 + 528) = swift_task_alloc();
  *(void *)(v8 + 536) = swift_task_alloc();
  *(void *)(v8 + 544) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25BF97874, 0, 0);
}

uint64_t sub_25BF97874()
{
  uint64_t v1 = *(void *)(v0 + 528);
  uint64_t v24 = *(void *)(v0 + 536);
  uint64_t v25 = *(void *)(v0 + 496);
  uint64_t v2 = *(void *)(v0 + 480);
  uint64_t v20 = *(void *)(v0 + 488);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v22 = *(void *)(v0 + 464);
  uint64_t v4 = *(void *)(v0 + 456);
  uint64_t v21 = *(void *)(v0 + 448);
  uint64_t v23 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 288);
  uint64_t v7 = *(void *)(v0 + 296);
  *(void *)(swift_task_alloc() + 16) = v6;
  sub_25BFF0220();
  swift_task_dealloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584410);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25BFF5CF0;
  *(void *)(inited + 32) = 0x746E6F4372657375;
  *(void *)(inited + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0xEB00000000746E65;
  uint64_t v9 = MEMORY[0x263F62188];
  *(void *)(inited + 72) = MEMORY[0x263F8D310];
  *(void *)(inited + 8std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v9;
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = v5;
  swift_bridgeObjectRetain();
  sub_25BF83D50(inited, &qword_26A584430, &qword_26A584438, (uint64_t (*)(uint64_t *, unint64_t))sub_25BF883CC);
  *(void *)(v0 + 552) = sub_25BF9AAB0(&qword_26A584400, MEMORY[0x263F61FA8]);
  sub_25BFF02C0();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  *(void *)(v0 + 56std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v10;
  *(void *)(v0 + 568) = (v25 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v1, v20);
  sub_25BFEFEE0();
  uint64_t v11 = sub_25BFEFEF0();
  *(void *)(v0 + 576) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56);
  *(void *)(v0 + 584) = v13;
  *(void *)(v0 + 592) = (v12 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v13(v4, 0, 1, v11);
  sub_25BF883E4(v4, v21, &qword_26A5843F0);
  sub_25BFEFF30();
  sub_25BFEFF20();
  sub_25BFEFF00();
  sub_25BFEFF10();
  sub_25BF8830C(v4, &qword_26A5843F0);
  *(_DWORD *)(v0 + 648) = *MEMORY[0x263F413E0];
  uint64_t v14 = *(void (**)(uint64_t))(v3 + 104);
  *(void *)(v0 + 60std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v14;
  *(void *)(v0 + 608) = (v3 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v14(v2);
  sub_25BFF02A0();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 616) = v15;
  *(void *)(v0 + 624) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v15(v2, v22);
  v10(v24, v20);
  uint64_t v16 = sub_25BFF0140();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v23, 1, 1, v16);
  sub_25BFF0130();
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 632) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_25BF97CEC;
  uint64_t v18 = *(void *)(v0 + 336);
  return MEMORY[0x270F2FCA0](v18, 0xD00000000000001CLL, 0x800000025C004670);
}

uint64_t sub_25BF97CEC()
{
  *(void *)(*(void *)v1 + 64std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25BF986A4;
  }
  else {
    uint64_t v2 = sub_25BF97E00;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25BF97E00()
{
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584408);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_25BF8830C(v1, &qword_26A5843D8);
  }
  else
  {
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v0 + 616);
    uint64_t v47 = *(void (**)(uint64_t, void, uint64_t))(v0 + 600);
    unsigned int v46 = *(_DWORD *)(v0 + 648);
    unint64_t v43 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 584);
    uint64_t v42 = *(void *)(v0 + 576);
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
    uint64_t v52 = *(void *)(v0 + 520);
    uint64_t v53 = *(void *)(v0 + 544);
    uint64_t v54 = *(void *)(v0 + 488);
    uint64_t v55 = *(void *)(v0 + 496);
    uint64_t v44 = *(void *)(v0 + 480);
    uint64_t v45 = *(void *)(v0 + 464);
    uint64_t v41 = *(void *)(v0 + 448);
    uint64_t v39 = *(void *)(v0 + 440);
    uint64_t v40 = *(void *)(v0 + 456);
    uint64_t v36 = *(void *)(v0 + 432);
    uint64_t v37 = *(void *)(v0 + 424);
    uint64_t v38 = *(void *)(v0 + 416);
    uint64_t v57 = *(void *)(v0 + 400);
    uint64_t v51 = *(void *)(v0 + 392);
    uint64_t v3 = *(void *)(v0 + 344);
    uint64_t v4 = *(void *)(v0 + 352);
    uint64_t v34 = v1 + *(int *)(v2 + 48);
    uint64_t v33 = v4 + *(int *)(v3 + 48);
    uint64_t v5 = *(void *)(v0 + 384);
    uint64_t v35 = *(void *)(v0 + 376);
    uint64_t v6 = *(void *)(v0 + 360);
    uint64_t v7 = *(void *)(v0 + 368);
    uint64_t v50 = *(void *)(v0 + 288);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32);
    v8(v4, v1, v5);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
    v9(v33, v34, v6);
    uint64_t v10 = v4 + *(int *)(v3 + 48);
    v8(v57, v4, v5);
    uint64_t v11 = v6;
    v9(v35, v10, v6);
    sub_25BFEFFF0();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v39, v36, v38);
    sub_25BF83D50(MEMORY[0x263F8EE78], &qword_26A584430, &qword_26A584438, (uint64_t (*)(uint64_t *, unint64_t))sub_25BF883CC);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A5842D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25BFF5CF0;
    *(void *)(inited + 32) = 0xD000000000000090;
    *(void *)(inited + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0x800000025C0045D0;
    sub_25BFEFEE0();
    v43(v40, 0, 1, v42);
    sub_25BF883E4(v40, v41, &qword_26A5843F0);
    sub_25BFEFF30();
    sub_25BFEFF20();
    sub_25BFEFF00();
    sub_25BFEFF10();
    sub_25BF8830C(v40, &qword_26A5843F0);
    v47(v44, v46, v45);
    *(void *)(inited + 72) = sub_25BFEFF40();
    __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(inited + 48));
    sub_25BFEFFB0();
    v48(v44, v45);
    sub_25BF7FB90(inited);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A584418);
    uint64_t v13 = swift_initStackObject();
    *(_OWORD *)(v13 + 16) = xmmword_25BFF5CF0;
    strcpy((char *)(v13 + 32), "promptTemplate");
    *(unsigned char *)(v13 + 47) = -18;
    uint64_t v14 = sub_25BFF0120();
    *(void *)(v13 + 72) = v14;
    *(void *)(v13 + 8std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = sub_25BF9AAB0(&qword_26A584728, MEMORY[0x263F41548]);
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v13 + 48));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(boxed_opaque_existential_0Tm, v50, v14);
    sub_25BF83D50(v13, &qword_26A584420, &qword_26A584428, (uint64_t (*)(uint64_t *, unint64_t))sub_25BF883CC);
    sub_25BFEFFE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v35, v11);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v57, v5);
    v56(v53, v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v53, v52, v54);
  }
  uint64_t v16 = *(void *)(v0 + 640);
  sub_25BFF0290();
  sub_25BFF0280();
  if (v16)
  {
    (*(void (**)(void, void))(v0 + 560))(*(void *)(v0 + 504), *(void *)(v0 + 488));
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
    uint64_t v22 = *(void *)(v0 + 544);
    uint64_t v23 = *(void *)(v0 + 488);
    (*(void (**)(void, void))(*(void *)(v0 + 424) + 8))(*(void *)(v0 + 440), *(void *)(v0 + 416));
    v21(v22, v23);
  }
  else
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
    uint64_t v26 = *(void *)(v0 + 544);
    uint64_t v27 = *(void *)(v0 + 512);
    uint64_t v28 = *(void *)(v0 + 488);
    uint64_t v49 = *(void *)(v0 + 440);
    uint64_t v29 = *(void *)(v0 + 424);
    uint64_t v30 = *(void *)(v0 + 416);
    uint64_t v31 = *(void *)(v0 + 328);
    ((void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v25)(*(void *)(v0 + 504), v28, v17, v18, v19, v20);
    *(void *)(v0 + 272) = *(void *)(v31 + OBJC_IVAR____TtC26SensitiveContentAnalysisML14PromptRewriter_tokenGenerator);
    sub_25BFEFE90();
    sub_25BFF02B0();
    v25(v27, v28);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v49, v30);
    v25(v26, v28);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_25BF986A4()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[70];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[61];
  (*(void (**)(void, void))(v0[53] + 8))(v0[55], v0[52]);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_25BF98820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, double a7)
{
  char v15 = a6 & 1;
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  *uint64_t v16 = v8;
  v16[1] = sub_25BF88524;
  return sub_25BF98904(a1, a2, a3, a4, a5, v15, v7, a7);
}

uint64_t sub_25BF98904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, double a8)
{
  *(unsigned char *)(v8 + 652) = a6;
  *(void *)(v8 + 32std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = a5;
  *(void *)(v8 + 328) = a7;
  *(double *)(v8 + 312) = a8;
  *(void *)(v8 + 296) = a3;
  *(void *)(v8 + 304) = a4;
  *(void *)(v8 + 28std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = a1;
  *(void *)(v8 + 288) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843D8);
  *(void *)(v8 + 336) = swift_task_alloc();
  *(void *)(v8 + 344) = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843E0);
  *(void *)(v8 + 352) = swift_task_alloc();
  uint64_t v9 = sub_25BFF0000();
  *(void *)(v8 + 36std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v9;
  *(void *)(v8 + 368) = *(void *)(v9 - 8);
  *(void *)(v8 + 376) = swift_task_alloc();
  uint64_t v10 = sub_25BFF0010();
  *(void *)(v8 + 384) = v10;
  *(void *)(v8 + 392) = *(void *)(v10 - 8);
  *(void *)(v8 + 40std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843E8);
  *(void *)(v8 + 408) = swift_task_alloc();
  uint64_t v11 = sub_25BFF0150();
  *(void *)(v8 + 416) = v11;
  *(void *)(v8 + 424) = *(void *)(v11 - 8);
  *(void *)(v8 + 432) = swift_task_alloc();
  *(void *)(v8 + 44std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843F0);
  *(void *)(v8 + 448) = swift_task_alloc();
  *(void *)(v8 + 456) = swift_task_alloc();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843F8);
  *(void *)(v8 + 464) = v12;
  *(void *)(v8 + 472) = *(void *)(v12 - 8);
  *(void *)(v8 + 48std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = swift_task_alloc();
  uint64_t v13 = sub_25BFF0210();
  *(void *)(v8 + 488) = v13;
  *(void *)(v8 + 496) = *(void *)(v13 - 8);
  *(void *)(v8 + 504) = swift_task_alloc();
  *(void *)(v8 + 512) = swift_task_alloc();
  *(void *)(v8 + 52std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = swift_task_alloc();
  *(void *)(v8 + 528) = swift_task_alloc();
  *(void *)(v8 + 536) = swift_task_alloc();
  *(void *)(v8 + 544) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25BF98C6C, 0, 0);
}

uint64_t sub_25BF98C6C()
{
  uint64_t v1 = *(void *)(v0 + 528);
  uint64_t v24 = *(void *)(v0 + 536);
  uint64_t v25 = *(void *)(v0 + 496);
  uint64_t v2 = *(void *)(v0 + 480);
  uint64_t v20 = *(void *)(v0 + 488);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v22 = *(void *)(v0 + 464);
  uint64_t v4 = *(void *)(v0 + 456);
  uint64_t v21 = *(void *)(v0 + 448);
  uint64_t v23 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 288);
  uint64_t v7 = *(void *)(v0 + 296);
  *(void *)(swift_task_alloc() + 16) = v6;
  sub_25BFF0220();
  swift_task_dealloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584410);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25BFF5CF0;
  *(void *)(inited + 32) = 0x746E6F4372657375;
  *(void *)(inited + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0xEB00000000746E65;
  uint64_t v9 = MEMORY[0x263F62188];
  *(void *)(inited + 72) = MEMORY[0x263F8D310];
  *(void *)(inited + 8std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v9;
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = v5;
  swift_bridgeObjectRetain();
  sub_25BF83D50(inited, &qword_26A584430, &qword_26A584438, (uint64_t (*)(uint64_t *, unint64_t))sub_25BF883CC);
  *(void *)(v0 + 552) = sub_25BF9AAB0(&qword_26A584400, MEMORY[0x263F61FA8]);
  sub_25BFF02C0();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  *(void *)(v0 + 56std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v10;
  *(void *)(v0 + 568) = (v25 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v1, v20);
  sub_25BFEFEE0();
  uint64_t v11 = sub_25BFEFEF0();
  *(void *)(v0 + 576) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56);
  *(void *)(v0 + 584) = v13;
  *(void *)(v0 + 592) = (v12 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v13(v4, 0, 1, v11);
  sub_25BF883E4(v4, v21, &qword_26A5843F0);
  sub_25BFEFF30();
  sub_25BFEFF20();
  sub_25BFEFF00();
  sub_25BFEFF10();
  sub_25BF8830C(v4, &qword_26A5843F0);
  *(_DWORD *)(v0 + 648) = *MEMORY[0x263F413E0];
  uint64_t v14 = *(void (**)(uint64_t))(v3 + 104);
  *(void *)(v0 + 60std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v14;
  *(void *)(v0 + 608) = (v3 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v14(v2);
  sub_25BFF02A0();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 616) = v15;
  *(void *)(v0 + 624) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v15(v2, v22);
  v10(v24, v20);
  uint64_t v16 = sub_25BFF0140();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v23, 1, 1, v16);
  sub_25BFF0130();
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 632) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_25BF990E4;
  uint64_t v18 = *(void *)(v0 + 336);
  return MEMORY[0x270F2FCA0](v18, 0xD00000000000001CLL, 0x800000025C0045B0);
}

uint64_t sub_25BF990E4()
{
  *(void *)(*(void *)v1 + 64std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25BF9AB7C;
  }
  else {
    uint64_t v2 = sub_25BF9AB80;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25BF991F8()
{
  uint64_t v0 = sub_25BFF0210();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25BFF0120();
  sub_25BF9AAB0(&qword_26A584728, MEMORY[0x263F41548]);
  sub_25BFF0240();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584440);
  unint64_t v4 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_25BFF5CF0;
  (*(void (**)(unint64_t, char *, uint64_t))(v1 + 16))(v5 + v4, v3, v0);
  MEMORY[0x2611798E0](v5);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t PromptRewriter.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML14PromptRewriter_logger;
  uint64_t v2 = sub_25BFF01E0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t PromptRewriter.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML14PromptRewriter_logger;
  uint64_t v2 = sub_25BFF01E0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v3, v4);
}

uint64_t sub_25BF994BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v8 = 2 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (void *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843D0);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      void v9[2] = v5;
      void v9[3] = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = sub_25BFF0810();
  __break(1u);
  return result;
}

uint64_t sub_25BF99630(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6C69614664616F6CLL && a2 == 0xEA00000000006465;
  if (v3 || (sub_25BFF0920() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6961466573726170 && a2 == 0xEB0000000064656CLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_25BFF0920();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25BF99734(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x4449656C646E7562 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_25BFF0920();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_25BF997BC()
{
  return 0x4449656C646E7562;
}

uint64_t sub_25BF997D4(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584750);
  uint64_t v23 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  MEMORY[0x270FA5388](v2);
  char v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584758);
  uint64_t v25 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584760);
  uint64_t v26 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25BF94284();
  uint64_t v12 = (uint64_t)v27;
  sub_25BFF0A10();
  if (v12) {
    goto LABEL_9;
  }
  uint64_t v27 = a1;
  uint64_t v11 = (uint64_t)v10;
  uint64_t v13 = sub_25BFF0890();
  if (*(void *)(v13 + 16) != 1)
  {
    uint64_t v14 = sub_25BFF0740();
    swift_allocError();
    uint64_t v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A5844B8);
    *uint64_t v16 = &type metadata for PromptRewriter.Error;
    sub_25BFF0840();
    sub_25BFF0730();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, *MEMORY[0x263F8DCB0], v14);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v11, v8);
    a1 = v27;
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return v11;
  }
  if (*(unsigned char *)(v13 + 32))
  {
    char v29 = 1;
    sub_25BF942D8();
    sub_25BFF0830();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v24);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v8);
    uint64_t v11 = 0;
  }
  else
  {
    char v28 = 0;
    sub_25BF9432C();
    uint64_t v17 = v7;
    sub_25BFF0830();
    uint64_t v19 = v11;
    uint64_t v11 = sub_25BFF0850();
    uint64_t v20 = v17;
    uint64_t v21 = v26;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v5);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v8);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
  return v11;
}

unint64_t sub_25BF99C5C()
{
  unint64_t result = qword_26A584680[0];
  if (!qword_26A584680[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A584680);
  }
  return result;
}

uint64_t type metadata accessor for PromptRewriter()
{
  uint64_t result = qword_26A587220;
  if (!qword_26A587220) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25BF99CFC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_25BF93710(a1, a2);
  }
  return a1;
}

unint64_t sub_25BF99D10(void *a1)
{
  a1[1] = sub_25BF99D60();
  a1[2] = sub_25BF99DB4();
  a1[3] = sub_25BF99E08();
  a1[4] = sub_25BF99E5C();
  a1[5] = sub_25BF99EB0();
  unint64_t result = sub_25BF99F04();
  a1[6] = result;
  return result;
}

unint64_t sub_25BF99D60()
{
  unint64_t result = qword_26A5846D0;
  if (!qword_26A5846D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5846D0);
  }
  return result;
}

unint64_t sub_25BF99DB4()
{
  unint64_t result = qword_26A5846D8;
  if (!qword_26A5846D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5846D8);
  }
  return result;
}

unint64_t sub_25BF99E08()
{
  unint64_t result = qword_26A5846E0;
  if (!qword_26A5846E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5846E0);
  }
  return result;
}

unint64_t sub_25BF99E5C()
{
  unint64_t result = qword_26A5846E8;
  if (!qword_26A5846E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5846E8);
  }
  return result;
}

unint64_t sub_25BF99EB0()
{
  unint64_t result = qword_26A5846F0;
  if (!qword_26A5846F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5846F0);
  }
  return result;
}

unint64_t sub_25BF99F04()
{
  unint64_t result = qword_26A5846F8;
  if (!qword_26A5846F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5846F8);
  }
  return result;
}

unint64_t sub_25BF99F60()
{
  unint64_t result = qword_26A584700;
  if (!qword_26A584700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584700);
  }
  return result;
}

uint64_t sub_25BF99FB4()
{
  return type metadata accessor for PromptRewriter();
}

uint64_t sub_25BF99FBC()
{
  uint64_t result = sub_25BFF01E0();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for PromptRewriter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PromptRewriter);
}

uint64_t dispatch thunk of PromptRewriter.__allocating_init(modelManagerServicesUseCaseID:onBehalfOf:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v4 + 96))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of PromptRewriter.rewrite(text:maxNumberOfResults:randomSeed:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v6 + 104)
                                                                                     + **(int **)(*(void *)v6 + 104));
  uint64_t v12 = a4 & 1;
  uint64_t v13 = a6 & 1;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v14;
  void *v14 = v7;
  v14[1] = sub_25BF9AB90;
  return v16(a1, a2, a3, v12, a5, v13);
}

uint64_t dispatch thunk of PromptRewriter.rewrite(promptStyle:text:maxNumberOfResults:randomSeed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v7 + 112)
                                                                                              + **(int **)(*(void *)v7 + 112));
  uint64_t v14 = a5 & 1;
  uint64_t v15 = a7 & 1;
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  *uint64_t v16 = v8;
  v16[1] = sub_25BF9AB90;
  return v18(a1, a2, a3, a4, v14, a6, v15);
}

uint64_t dispatch thunk of PromptRewriter.rewriteInternal(promptStyle:text:maxNumberOfResults:randomSeed:temperature:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v8 + 120) + **(int **)(*(void *)v8 + 120));
  uint64_t v15 = a5 & 1;
  uint64_t v16 = a7 & 1;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v9 + 16) = v17;
  *uint64_t v17 = v9;
  v17[1] = sub_25BF87C9C;
  return v19(a1, a2, a3, a4, v15, a6, v16, a8);
}

uint64_t getEnumTagSinglePayload for PromptRewriter.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PromptRewriter.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t sub_25BF9A528(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_25BF9A540(void *result, int a2)
{
  if (a2 < 0)
  {
    char *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptRewriter.Error()
{
  return &type metadata for PromptRewriter.Error;
}

ValueMetadata *type metadata accessor for PromptRewriter.PromptStyle()
{
  return &type metadata for PromptRewriter.PromptStyle;
}

unsigned char *_s26SensitiveContentAnalysisML14PromptRewriterC11PromptStyleOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25BF9A654);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptRewriter.Error.CodingKeys()
{
  return &type metadata for PromptRewriter.Error.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PromptRewriter.Error.LoadFailedCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        char *result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      char *result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25BF9A728);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptRewriter.Error.LoadFailedCodingKeys()
{
  return &type metadata for PromptRewriter.Error.LoadFailedCodingKeys;
}

ValueMetadata *type metadata accessor for PromptRewriter.Error.ParseFailedCodingKeys()
{
  return &type metadata for PromptRewriter.Error.ParseFailedCodingKeys;
}

unint64_t sub_25BF9A774()
{
  unint64_t result = qword_26A587430[0];
  if (!qword_26A587430[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A587430);
  }
  return result;
}

unint64_t sub_25BF9A7CC()
{
  unint64_t result = qword_26A587640[0];
  if (!qword_26A587640[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A587640);
  }
  return result;
}

unint64_t sub_25BF9A824()
{
  unint64_t result = qword_26A587750;
  if (!qword_26A587750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A587750);
  }
  return result;
}

unint64_t sub_25BF9A87C()
{
  unint64_t result = qword_26A587758[0];
  if (!qword_26A587758[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A587758);
  }
  return result;
}

unint64_t sub_25BF9A8D4()
{
  unint64_t result = qword_26A5877E0;
  if (!qword_26A5877E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A5877E0);
  }
  return result;
}

unint64_t sub_25BF9A92C()
{
  unint64_t result = qword_26A5877E8[0];
  if (!qword_26A5877E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26A5877E8);
  }
  return result;
}

unint64_t sub_25BF9A984()
{
  unint64_t result = qword_26A587870;
  if (!qword_26A587870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A587870);
  }
  return result;
}

unint64_t sub_25BF9A9DC()
{
  unint64_t result = qword_26A587878;
  if (!qword_26A587878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A587878);
  }
  return result;
}

unint64_t sub_25BF9AA30()
{
  unint64_t result = qword_26A584720;
  if (!qword_26A584720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584720);
  }
  return result;
}

uint64_t sub_25BF9AA84()
{
  return sub_25BF991F8();
}

uint64_t sub_25BF9AAB0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25BF9AAF8()
{
  unint64_t result = qword_26A584740;
  if (!qword_26A584740)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26A5846A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584740);
  }
  return result;
}

uint64_t sub_25BF9AB64()
{
  return sub_25BF9AA84();
}

uint64_t sub_25BF9AC10()
{
  unint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_term);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_25BF9ACD4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_term);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_25BF9AD34@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x60))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_25BF9AD90(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & **a2) + 0x68);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*sub_25BF9AE08())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25BF9AEAC()
{
  unint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_gender);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_25BF9AF40(int a1)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_gender);
  uint64_t result = swift_beginAccess();
  _DWORD *v3 = a1;
  return result;
}

uint64_t sub_25BF9AF8C@<X0>(void **a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t sub_25BF9AFE8(unsigned int *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a2) + 0x80))(*a1);
}

uint64_t (*sub_25BF9B040())()
{
  return j_j__swift_endAccess;
}

id SCMLPeopleDetectionAttribute.__allocating_init(term:gender:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = (char *)objc_allocWithZone(v3);
  uint64_t v8 = &v7[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_term];
  *(void *)uint64_t v8 = a1;
  *((void *)v8 + 1) = a2;
  *(_DWORD *)&v7[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_gender] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

id SCMLPeopleDetectionAttribute.init(term:gender:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_term];
  *(void *)uint64_t v4 = a1;
  *((void *)v4 + 1) = a2;
  *(_DWORD *)&v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_gender] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for SCMLPeopleDetectionAttribute();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for SCMLPeopleDetectionAttribute()
{
  return self;
}

BOOL sub_25BF9B180(uint64_t a1)
{
  sub_25BF883E4(a1, (uint64_t)v14, &qword_26A584778);
  if (!v15)
  {
    sub_25BF8830C((uint64_t)v14, &qword_26A584778);
    return 0;
  }
  type metadata accessor for SCMLPeopleDetectionAttribute();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  uint64_t v3 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x60))();
  uint64_t v5 = v4;
  if (v3 == (*(uint64_t (**)(void))((*v2 & *v13) + 0x60))() && v5 == v6)
  {
    uint64_t v9 = swift_bridgeObjectRelease_n();
  }
  else
  {
    char v8 = sub_25BFF0920();
    swift_bridgeObjectRelease();
    uint64_t v9 = swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {

      return 0;
    }
  }
  int v11 = (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x78))(v9);
  int v12 = (*(uint64_t (**)(void))((*v2 & *v13) + 0x78))();

  return v11 == v12;
}

void SCMLPeopleDetectionAttribute.init()()
{
}

id SCMLPeopleDetectionAttribute.__deallocating_deinit(uint64_t a1)
{
  return sub_25BFA26A4(a1, type metadata accessor for SCMLPeopleDetectionAttribute);
}

BOOL sub_25BF9B3F4(void **a1, void **a2)
{
  return _s26SensitiveContentAnalysisML28SCMLPeopleDetectionAttributeC1loiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t sub_25BF9B454()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_specific);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_25BF9B4E8(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_specific);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t sub_25BF9B534@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x98))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_25BF9B594(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a2) + 0xA0))(*a1);
}

uint64_t (*sub_25BF9B5EC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25BF9B690()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_isGroup);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_25BF9B724(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_isGroup);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t sub_25BF9B770@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0xB0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_25BF9B7D0(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a2) + 0xB8))(*a1);
}

uint64_t (*sub_25BF9B828())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25BF9B8CC()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasAge);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_25BF9B960(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasAge);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t sub_25BF9B9AC@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0xC8))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_25BF9BA0C(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a2) + 0xD0))(*a1);
}

uint64_t (*sub_25BF9BA64())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25BF9BB08()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasGender);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_25BF9BB9C(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasGender);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t sub_25BF9BBE8@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0xE0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_25BF9BC48(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a2) + 0xE8))(*a1);
}

uint64_t (*sub_25BF9BCA0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25BF9BD44()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasEthnicity);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_25BF9BDD8(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasEthnicity);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t sub_25BF9BE24@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0xF8))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_25BF9BE84(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a2) + 0x100))(*a1);
}

uint64_t (*sub_25BF9BEE4())()
{
  return j__swift_endAccess;
}

uint64_t sub_25BF9BF50()
{
  return sub_25BF9C37C();
}

uint64_t sub_25BF9BF68(uint64_t a1)
{
  return sub_25BF9C458(a1, &OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_age);
}

uint64_t sub_25BF9BF74@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x110))();
  *a2 = result;
  return result;
}

uint64_t sub_25BF9BFD8(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & **a2) + 0x118);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t (*sub_25BF9C044())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25BF9C12C()
{
  return sub_25BF9C37C();
}

uint64_t sub_25BF9C1A8(uint64_t a1)
{
  return sub_25BF9C458(a1, &OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_gender);
}

uint64_t sub_25BF9C1B4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x128))();
  *a2 = result;
  return result;
}

uint64_t sub_25BF9C218(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & **a2) + 0x130);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t (*sub_25BF9C284())()
{
  return j_j__swift_endAccess;
}

id sub_25BF9C2EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (void *)(a1 + *a3);
  swift_beginAccess();
  if (*v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (void *)sub_25BFF04B0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t sub_25BF9C370()
{
  return sub_25BF9C37C();
}

uint64_t sub_25BF9C37C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_25BF9C3D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3) {
    uint64_t v6 = sub_25BFF04C0();
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *uint64_t v7 = v6;
  return swift_bridgeObjectRelease();
}

uint64_t sub_25BF9C44C(uint64_t a1)
{
  return sub_25BF9C458(a1, &OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_ethnicity);
}

uint64_t sub_25BF9C458(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_25BF9C4A8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x140))();
  *a2 = result;
  return result;
}

uint64_t sub_25BF9C50C(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & **a2) + 0x148);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t (*sub_25BF9C578())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25BF9C61C()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasImplicitCategoryRequiringPersonalization);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_25BF9C6B0(char a1)
{
  uint64_t v3 = (unsigned char *)(v1
               + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasImplicitCategoryRequiringPersonalization);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t sub_25BF9C6FC@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x158))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_25BF9C764(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a2) + 0x160))(*a1);
}

uint64_t (*sub_25BF9C7C4())()
{
  return j_j__swift_endAccess;
}

char *SCMLPersonAttributes.__allocating_init(specific:isGroup:hasAge:hasGender:hasEthnicity:age:gender:ethnicity:hasImplicitCategoryRequiringPersonalization:)(char a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  id v18 = objc_allocWithZone(v9);
  return SCMLPersonAttributes.init(specific:isGroup:hasAge:hasGender:hasEthnicity:age:gender:ethnicity:hasImplicitCategoryRequiringPersonalization:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

char *SCMLPersonAttributes.init(specific:isGroup:hasAge:hasGender:hasEthnicity:age:gender:ethnicity:hasImplicitCategoryRequiringPersonalization:)(char a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_specific] = 0;
  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_isGroup] = 0;
  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasAge] = 0;
  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasGender] = 0;
  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasEthnicity] = 0;
  *(void *)&v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_age] = 0;
  *(void *)&v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_gender] = 0;
  *(void *)&v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_ethnicity] = 0;
  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasImplicitCategoryRequiringPersonalization] = 0;
  v29.receiver = v9;
  v29.super_class = (Class)type metadata accessor for SCMLPersonAttributes();
  uint64_t v14 = (char *)objc_msgSendSuper2(&v29, sel_init);
  uint64_t v15 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_specific];
  swift_beginAccess();
  char *v15 = a1;
  uint64_t v16 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_isGroup];
  swift_beginAccess();
  *uint64_t v16 = a2;
  uint64_t v17 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasAge];
  swift_beginAccess();
  *uint64_t v17 = a3;
  id v18 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasGender];
  swift_beginAccess();
  char *v18 = a4;
  uint64_t v19 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasEthnicity];
  swift_beginAccess();
  *uint64_t v19 = a5;
  uint64_t v20 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_age];
  swift_beginAccess();
  *(void *)uint64_t v20 = a6;
  swift_bridgeObjectRelease();
  uint64_t v21 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_gender];
  swift_beginAccess();
  *(void *)uint64_t v21 = a7;
  swift_bridgeObjectRelease();
  uint64_t v22 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_ethnicity];
  swift_beginAccess();
  *(void *)uint64_t v22 = a8;
  swift_bridgeObjectRelease();
  uint64_t v23 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasImplicitCategoryRequiringPersonalization];
  swift_beginAccess();
  *uint64_t v23 = a9;
  return v14;
}

id sub_25BF9CB10(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = sub_25BFF07D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_25BFF07D0();
    swift_bridgeObjectRelease();
    if (v5 == v29) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v5) {
    goto LABEL_38;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0) {
    uint64_t v6 = v3;
  }
  if (!v4) {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v8 = v9;
  }
  if (v6 == v8)
  {
LABEL_38:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v30 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v3 + 32); ; id result = (id)MEMORY[0x261179DC0](0, v3))
  {
    int v11 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v12 = (id)MEMORY[0x261179DC0](0, a2);
LABEL_22:
    uint64_t v13 = v12;
    type metadata accessor for SCMLPeopleDetectionAttribute();
    char v14 = sub_25BFF05E0();

    if ((v14 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v15 = v5 - 1;
    if (v5 == 1) {
      return (id)(v5 & 1);
    }
    if (((a2 | v3) & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      unint64_t v17 = v5 - 2;
      while (v15 != v16)
      {
        unint64_t v5 = v16 + 1;
        if (v30) {
          id v18 = (id)MEMORY[0x261179DC0](v16 + 1, v3);
        }
        else {
          id v18 = *(id *)(v3 + 40 + 8 * v16);
        }
        uint64_t v19 = v18;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v20 = (id)MEMORY[0x261179DC0](v16 + 1, a2);
        }
        else
        {
          if (v5 >= *(void *)(v7 + 16)) {
            goto LABEL_54;
          }
          id v20 = *(id *)(a2 + 40 + 8 * v16);
        }
        uint64_t v21 = v20;
        unint64_t v5 = sub_25BFF05E0();

        if ((v5 & 1) != 0 && v17 != v16++) {
          continue;
        }
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v23 = *(void *)(v7 + 16);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      unint64_t v24 = v23 - 1;
      uint64_t v25 = (void **)(v3 + 40);
      uint64_t v7 = a2 + 40;
      while (v15)
      {
        if (!v24) {
          goto LABEL_53;
        }
        uint64_t v27 = *v25++;
        uint64_t v26 = v27;
        char v28 = *(void **)v7;
        v7 += 8;
        a2 = v26;
        uint64_t v3 = v28;
        unint64_t v5 = sub_25BFF05E0();

        if (v5)
        {
          --v24;
          if (--v15) {
            continue;
          }
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v7 + 16))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_25BF9CDE8(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = sub_25BFF0920(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a1 + 7;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (sub_25BFF0920() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_25BF9CEB0(uint64_t a1)
{
  sub_25BF883E4(a1, (uint64_t)v25, &qword_26A584778);
  if (!v26)
  {
    sub_25BF8830C((uint64_t)v25, &qword_26A584778);
    goto LABEL_14;
  }
  type metadata accessor for SCMLPersonAttributes();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:
    char v22 = 0;
    return v22 & 1;
  }
  uint64_t v2 = (void *)MEMORY[0x263F8EED0];
  int v3 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x98))();
  if ((v3 ^ (*(unsigned int (**)(void))((*v2 & *v24) + 0x98))())) {
    goto LABEL_13;
  }
  int v4 = (*(uint64_t (**)(void))((*v2 & *v1) + 0xB0))();
  if ((v4 ^ (*(unsigned int (**)(void))((*v2 & *v24) + 0xB0))())) {
    goto LABEL_13;
  }
  int v5 = (*(uint64_t (**)(void))((*v2 & *v1) + 0xC8))();
  if ((v5 ^ (*(unsigned int (**)(void))((*v2 & *v24) + 0xC8))())) {
    goto LABEL_13;
  }
  int v6 = (*(uint64_t (**)(void))((*v2 & *v1) + 0xE0))();
  if ((v6 ^ (*(unsigned int (**)(void))((*v2 & *v24) + 0xE0))())) {
    goto LABEL_13;
  }
  int v7 = (*(uint64_t (**)(void))((*v2 & *v1) + 0xF8))();
  if ((v7 ^ (*(unsigned int (**)(void))((*v2 & *v24) + 0xF8))())) {
    goto LABEL_13;
  }
  uint64_t v8 = (void *)(*(uint64_t (**)(void))((*v2 & *v1) + 0x110))();
  uint64_t v9 = (void *)(*(uint64_t (**)(void))((*v2 & *v24) + 0x110))();
  BOOL v10 = sub_25BFA6108(v8, v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_13;
  }
  unint64_t v12 = (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x128))(v11);
  unint64_t v13 = (*(uint64_t (**)(void))((*v2 & *v24) + 0x128))();
  BOOL v14 = sub_25BFA61D8(v12, v13);
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_bridgeObjectRelease();
  if (!v14
    || (uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x140))(v15),
        unint64_t v17 = (void *)(*(uint64_t (**)(void))((*v2 & *v24) + 0x140))(),
        BOOL v18 = sub_25BFA6108(v16, v17),
        swift_bridgeObjectRelease(),
        uint64_t v19 = swift_bridgeObjectRelease(),
        !v18))
  {
LABEL_13:

    goto LABEL_14;
  }
  char v20 = (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x158))(v19);
  char v21 = (*(uint64_t (**)(void))((*v2 & *v24) + 0x158))();

  char v22 = v20 ^ v21 ^ 1;
  return v22 & 1;
}

uint64_t sub_25BF9D414(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  if (a3)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    sub_25BFF06B0();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    id v7 = a1;
  }
  char v8 = a4(v10);

  sub_25BF8830C((uint64_t)v10, &qword_26A584778);
  return v8 & 1;
}

void SCMLPersonAttributes.__allocating_init(_:)(uint64_t a1)
{
  int v3 = (char *)(*(uint64_t (**)(void, void, void, void, void, void, void, void, _BYTE))(v1 + 368))(0, 0, 0, 0, 0, 0, 0, 0, 0);
  uint64_t v69 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  v65 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasImplicitCategoryRequiringPersonalization];
  uint64_t v67 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasEthnicity];
  uint64_t v66 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_ethnicity];
  id v7 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasGender];
  char v8 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_gender];
  uint64_t v9 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasAge];
  BOOL v10 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_age];
  uint64_t v11 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_isGroup];
  unint64_t v12 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_specific];
  uint64_t v64 = v3;
  swift_beginAccess();
  swift_beginAccess();
  long long v68 = v9;
  unint64_t v13 = v10;
  BOOL v14 = v11;
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v62 = v7;
  uint64_t v15 = v12;
  swift_beginAccess();
  uint64_t v63 = v8;
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  int64_t v70 = (unint64_t)(v4 + 63) >> 6;
  int64_t v71 = 0;
  while (v6)
  {
    unint64_t v17 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v18 = v17 | (v71 << 6);
LABEL_7:
    uint64_t v19 = *(void *)(a1 + 56);
    char v20 = (void *)(*(void *)(a1 + 48) + 16 * v18);
    uint64_t v21 = v20[1];
    *(void *)&long long v73 = *v20;
    *((void *)&v73 + 1) = v21;
    sub_25BF884C4(v19 + 32 * v18, (uint64_t)v74);
    swift_bridgeObjectRetain();
LABEL_26:
    sub_25BFA635C((uint64_t)&v73, (uint64_t)&v75);
    uint64_t v25 = v76;
    if (!v76)
    {

      swift_release();
      return;
    }
    uint64_t v26 = v75;
    sub_25BF7FDA4(&v77, &v73);
    if (v26 == 0x6369666963657073 && v25 == 0xE800000000000000 || (sub_25BFF0920() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      char v16 = sub_25BFA63C4((uint64_t)&v73);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
      swift_bridgeObjectRelease();
      char *v15 = v16 & 1;
    }
    else if (v26 == 0x70756F72675F7369 && v25 == 0xE800000000000000 || (sub_25BFF0920() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      char v27 = sub_25BFA63C4((uint64_t)&v73);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
      swift_bridgeObjectRelease();
      char *v14 = v27 & 1;
    }
    else if (v26 == 6645601 && v25 == 0xE300000000000000 || (sub_25BFF0920() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      char v28 = sub_25BFA63C4((uint64_t)&v73);
      uint64_t v30 = v29;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
      *long long v68 = v28 & 1;
      *(void *)unint64_t v13 = v30;
      swift_bridgeObjectRelease();
    }
    else if (v26 == 0x7265646E6567 && v25 == 0xE600000000000000 {
           || ((char v31 = sub_25BFF0920(), v26 == 0x656C616D6566) ? (v32 = v25 == 0xE600000000000000) : (v32 = 0),
    }
               !v32 ? (char v33 = 0) : (char v33 = 1),
               (v31 & 1) != 0
            || (v33 & 1) != 0
            || (sub_25BFF0920() & 1) != 0
            || v26 == 1701601645 && v25 == 0xE400000000000000
            || (sub_25BFF0920() & 1) != 0
            || v26 == 0x616E69625F6E6F6ELL && v25 == 0xEA00000000007972
            || (sub_25BFF0920() & 1) != 0))
    {
      uint64_t v34 = v63;
      *uint64_t v62 = (*v62 | sub_25BFA63C4((uint64_t)&v73)) & 1;
      if (v35)
      {
        if (!*(void *)v63)
        {
          *(void *)uint64_t v63 = MEMORY[0x263F8EE78];
          uint64_t v36 = v35;
          swift_bridgeObjectRelease();
          uint64_t v35 = v36;
        }
        uint64_t v59 = v15;
        unint64_t v60 = v14;
        uint64_t v61 = v35;
        if (v26 == 1701601645 && v25 == 0xE400000000000000)
        {
          int v37 = 1;
        }
        else if (sub_25BFF0920())
        {
          int v37 = 1;
          uint64_t v35 = v61;
        }
        else if (v26 == 0x656C616D6566 && v25 == 0xE600000000000000 || (sub_25BFF0920() & 1) != 0)
        {
          int v37 = 2;
          uint64_t v35 = v61;
        }
        else
        {
          uint64_t v35 = v61;
          if (v26 == 0x616E69625F6E6F6ELL && v25 == 0xEA00000000007972
            || (v38 = sub_25BFF0920(), uint64_t v35 = v61, v37 = 0, (v38 & 1) != 0))
          {
            int v37 = 3;
          }
        }
        uint64_t v39 = *(void *)(v35 + 16);
        if (v39)
        {
          uint64_t v58 = v13;
          uint64_t v78 = MEMORY[0x263F8EE78];
          uint64_t v40 = v35;
          sub_25BFF0780();
          uint64_t v41 = (objc_class *)type metadata accessor for SCMLPeopleDetectionAttribute();
          uint64_t v42 = (uint64_t *)(v40 + 40);
          do
          {
            uint64_t v44 = *(v42 - 1);
            uint64_t v43 = *v42;
            uint64_t v45 = (char *)objc_allocWithZone(v41);
            unsigned int v46 = &v45[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_term];
            *(void *)unsigned int v46 = v44;
            *((void *)v46 + 1) = v43;
            *(_DWORD *)&v45[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_gender] = v37;
            v72.receiver = v45;
            v72.super_class = v41;
            swift_bridgeObjectRetain();
            objc_msgSendSuper2(&v72, sel_init);
            sub_25BFF0760();
            sub_25BFF0790();
            sub_25BFF07A0();
            sub_25BFF0770();
            v42 += 2;
            --v39;
          }
          while (v39);
          uint64_t v34 = v63;
          unint64_t v13 = v58;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        BOOL v14 = v60;
        if (!*(void *)v34) {
          goto LABEL_102;
        }
        unint64_t v47 = swift_bridgeObjectRetain();
        sub_25BFA4BC0(v47);
        swift_endAccess();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
        uint64_t v15 = v59;
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
        swift_bridgeObjectRelease();
      }
    }
    else if (v26 == 0x746963696E687465 && v25 == 0xE900000000000079 || (sub_25BFF0920() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      char v48 = sub_25BFA63C4((uint64_t)&v73);
      uint64_t v49 = v13;
      uint64_t v51 = v50;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
      char *v67 = v48 & 1;
      *(void *)uint64_t v66 = v51;
      unint64_t v13 = v49;
      swift_bridgeObjectRelease();
    }
    else if (v26 == 0xD000000000000011 && v25 == 0x800000025C004700)
    {
      swift_bridgeObjectRelease();
LABEL_86:
      if (sub_25BFA63C4((uint64_t)&v73))
      {
        uint64_t v54 = v15;
        if (!v53) {
          goto LABEL_95;
        }
        if (!v53[2]) {
          goto LABEL_103;
        }
        uint64_t v56 = v53[4];
        uint64_t v55 = v53[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v55)
        {
          if (v56 == 0x6E6F69746361 && v55 == 0xE600000000000000) {
            char v57 = 1;
          }
          else {
            char v57 = sub_25BFF0920();
          }
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_95:
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
          char v57 = 0;
        }
        uint64_t v15 = v54;
        char *v65 = v57 & 1;
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
        swift_bridgeObjectRelease();
        char *v65 = 0;
      }
    }
    else
    {
      char v52 = sub_25BFF0920();
      swift_bridgeObjectRelease();
      if (v52) {
        goto LABEL_86;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
    }
  }
  int64_t v22 = v71 + 1;
  if (__OFADD__(v71, 1))
  {
    __break(1u);
    goto LABEL_101;
  }
  if (v22 >= v70)
  {
LABEL_25:
    unint64_t v6 = 0;
    memset(v74, 0, sizeof(v74));
    long long v73 = 0u;
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v69 + 8 * v22);
  if (v23)
  {
LABEL_11:
    unint64_t v6 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v71 = v22;
    goto LABEL_7;
  }
  int64_t v24 = v71 + 2;
  ++v71;
  if (v22 + 1 >= v70) {
    goto LABEL_25;
  }
  unint64_t v23 = *(void *)(v69 + 8 * v24);
  if (v23) {
    goto LABEL_14;
  }
  int64_t v71 = v22 + 1;
  if (v22 + 2 >= v70) {
    goto LABEL_25;
  }
  unint64_t v23 = *(void *)(v69 + 8 * (v22 + 2));
  if (v23)
  {
    v22 += 2;
    goto LABEL_11;
  }
  int64_t v24 = v22 + 3;
  int64_t v71 = v22 + 2;
  if (v22 + 3 >= v70) {
    goto LABEL_25;
  }
  unint64_t v23 = *(void *)(v69 + 8 * v24);
  if (v23)
  {
LABEL_14:
    int64_t v22 = v24;
    goto LABEL_11;
  }
  while (1)
  {
    int64_t v22 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v22 >= v70)
    {
      int64_t v71 = v70 - 1;
      goto LABEL_25;
    }
    unint64_t v23 = *(void *)(v69 + 8 * v22);
    ++v24;
    if (v23) {
      goto LABEL_11;
    }
  }
LABEL_101:
  __break(1u);
LABEL_102:

  __break(1u);
LABEL_103:
  __break(1u);
}

id SCMLPersonAttributes.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void SCMLPersonAttributes.init()()
{
}

id SCMLPersonAttributes.__deallocating_deinit(uint64_t a1)
{
  return sub_25BFA26A4(a1, type metadata accessor for SCMLPersonAttributes);
}

double sub_25BF9E0B0()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843D0);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 3;
  *(_OWORD *)(v0 + 16) = xmmword_25BFF7220;
  *(void *)(v0 + 32) = 0x747369747261;
  *(void *)(v0 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0xE600000000000000;
  *(void *)(v0 + 48) = 0x7265687265707573;
  *(void *)(v0 + 56) = 0xE90000000000006FLL;
  *(void *)(v0 + 64) = 0x657269706D6176;
  *(void *)(v0 + 72) = 0xE700000000000000;
  qword_26A587908 = v0;
  return result;
}

uint64_t sub_25BF9E138()
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5847E0);
  uint64_t v0 = *(void *)(v11 - 8);
  uint64_t result = MEMORY[0x270FA5388](v11);
  int v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26A587900 != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v4 = qword_26A587908;
  int64_t v5 = *(void *)(qword_26A587908 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_25BFA4D8C(0, v5, 0);
    uint64_t v6 = v14;
    uint64_t v10 = v4;
    uint64_t v7 = v4 + 40;
    do
    {
      uint64_t v12 = 25180;
      unint64_t v13 = 0xE200000000000000;
      swift_bridgeObjectRetain();
      sub_25BFF0420();
      swift_bridgeObjectRetain();
      sub_25BFF0420();
      swift_bridgeObjectRelease();
      sub_25BFEFFD0();
      swift_bridgeObjectRelease();
      uint64_t v14 = v6;
      unint64_t v9 = *(void *)(v6 + 16);
      unint64_t v8 = *(void *)(v6 + 24);
      if (v9 >= v8 >> 1)
      {
        sub_25BFA4D8C(v8 > 1, v9 + 1, 1);
        uint64_t v6 = v14;
      }
      v7 += 16;
      *(void *)(v6 + 16) = v9 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v0 + 32))(v6+ ((*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80))+ *(void *)(v0 + 72) * v9, v3, v11);
      --v5;
    }
    while (v5);
    uint64_t result = swift_bridgeObjectRelease();
  }
  qword_26A587918 = v6;
  return result;
}

double sub_25BF9E384()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843D0);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_25BFF5C80;
  *(void *)(v0 + 32) = 0x6B6E696863;
  *(void *)(v0 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0xE500000000000000;
  *(void *)(v0 + 48) = 1701273965;
  *(void *)(v0 + 56) = 0xE400000000000000;
  qword_26A587928 = v0;
  return result;
}

uint64_t sub_25BF9E3E8()
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5847E0);
  uint64_t v0 = *(void *)(v11 - 8);
  uint64_t result = MEMORY[0x270FA5388](v11);
  int v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26A587920 != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v4 = qword_26A587928;
  int64_t v5 = *(void *)(qword_26A587928 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_25BFA4D8C(0, v5, 0);
    uint64_t v6 = v14;
    uint64_t v10 = v4;
    uint64_t v7 = v4 + 40;
    do
    {
      uint64_t v12 = 25180;
      unint64_t v13 = 0xE200000000000000;
      swift_bridgeObjectRetain();
      sub_25BFF0420();
      swift_bridgeObjectRetain();
      sub_25BFF0420();
      swift_bridgeObjectRelease();
      sub_25BFEFFD0();
      swift_bridgeObjectRelease();
      uint64_t v14 = v6;
      unint64_t v9 = *(void *)(v6 + 16);
      unint64_t v8 = *(void *)(v6 + 24);
      if (v9 >= v8 >> 1)
      {
        sub_25BFA4D8C(v8 > 1, v9 + 1, 1);
        uint64_t v6 = v14;
      }
      v7 += 16;
      *(void *)(v6 + 16) = v9 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v0 + 32))(v6+ ((*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80))+ *(void *)(v0 + 72) * v9, v3, v11);
      --v5;
    }
    while (v5);
    uint64_t result = swift_bridgeObjectRelease();
  }
  qword_26A587938 = v6;
  return result;
}

unint64_t sub_25BF9E634(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584880);
  uint64_t v2 = (void *)sub_25BFF0800();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_25BF7FCC4(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_25BF9E750(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584878);
  uint64_t v2 = (void *)sub_25BFF0800();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_25BF7FCC4(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_25BF9E8F4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_25BF9E9BC(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML34SCMLVisualGenerationHandlingResult_people);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_25BF9EA10@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & **a1) + 0x58))();
  *a2 = result;
  return result;
}

uint64_t sub_25BF9EA6C(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & **a2) + 0x60);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t (*sub_25BF9EAD0())()
{
  return j_j__swift_endAccess;
}

uint64_t SCMLVisualGenerationHandlingResult.__allocating_init(result:text:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  return SCMLVisualGenerationHandlingResult.init(result:text:)(a1, a2, a3, a4);
}

uint64_t SCMLVisualGenerationHandlingResult.init(result:text:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v6 = v5;
  uint64_t v130 = a4;
  long long v126 = a3;
  uint64_t v146 = *MEMORY[0x263EF8340];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5847D8);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  long long v117 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  BOOL v12 = (char *)&v104 - v11;
  MEMORY[0x270FA5388](v10);
  long long v125 = (long long *)((char *)&v104 - v13);
  uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5847E0);
  uint64_t v128 = *(void *)(v136 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v136);
  long long v133 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  long long v135 = (char *)&v104 - v16;
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5847E8);
  MEMORY[0x270FA5388](v124);
  long long v123 = (uint64_t *)((char *)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = sub_25BFF03B0();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v22 = (unint64_t *)&v4[OBJC_IVAR____TtC26SensitiveContentAnalysisML34SCMLVisualGenerationHandlingResult_people];
  long long v127 = v4;
  unint64_t v23 = sub_25BF9E634(MEMORY[0x263F8EE78]);
  uint64_t v120 = (uint64_t *)v22;
  unint64_t *v22 = v23;
  sub_25BFF03A0();
  int64_t v24 = (unsigned int (*)(void, void, void))sub_25BFF0390();
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  if (v26 >> 60 == 15) {
LABEL_111:
  }
    __break(1u);
  char v27 = self;
  char v28 = (void *)sub_25BFEFDC0();
  *(void *)&long long v143 = 0;
  id v29 = objc_msgSend(v27, sel_JSONObjectWithData_options_error_, v28, 0, &v143);

  if (!v29)
  {
    id v67 = (id)v143;
    swift_bridgeObjectRelease();
    long long v68 = (void *)sub_25BFEFDB0();

    swift_willThrow();
    BOOL v12 = v127;

LABEL_52:
    uint64_t v69 = (objc_class *)type metadata accessor for SCMLVisualGenerationHandlingResult();
    v138.receiver = v12;
    v138.super_class = v69;
    uint64_t v70 = (uint64_t)objc_msgSendSuper2(&v138, sel_init);
    sub_25BF99CFC((uint64_t)v24, v26);
    return v70;
  }
  id v30 = (id)v143;
  sub_25BFF06B0();
  swift_unknownObjectRelease();
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5847F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    BOOL v12 = v127;

    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  uint64_t v106 = v31;
  uint64_t v134 = v140;
  if (qword_26A587900 != -1) {
    goto LABEL_109;
  }
  while (1)
  {
    uint64_t v32 = qword_26A587908;
    uint64_t v33 = qword_26A587910;
    swift_bridgeObjectRetain();
    if (v33 != -1) {
      swift_once();
    }
    uint64_t v108 = *(void *)(v32 + 16);
    unint64_t v115 = v26;
    unint64_t v119 = v24;
    if (!v108)
    {
      long long v135 = (char *)v6;
      goto LABEL_55;
    }
    int64_t v116 = *(void *)(qword_26A587918 + 16);
    uint64_t v114 = v32 + 32;
    uint64_t v113 = v128 + 16;
    uint64_t v112 = v128 + 32;
    uint64_t v131 = &v141;
    long long v132 = &v144;
    uint64_t v110 = (void (**)(char *, uint64_t))(v128 + 8);
    uint64_t v34 = swift_bridgeObjectRetain();
    unint64_t v35 = 0;
    long long v104 = xmmword_25BFF5CF0;
    uint64_t v109 = v32;
    uint64_t v111 = v34;
LABEL_11:
    if (v35 >= *(void *)(v32 + 16)) {
      goto LABEL_106;
    }
    if (v35 == v116) {
      goto LABEL_54;
    }
    if (v35 >= *(void *)(v34 + 16)) {
      goto LABEL_107;
    }
    uint64_t v36 = (uint64_t)v24;
    unint64_t v37 = v26;
    char v38 = (uint64_t *)(v114 + 16 * v35);
    uint64_t v39 = *v38;
    uint64_t v40 = v38[1];
    uint64_t v41 = v128;
    unint64_t v42 = v34 + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
    uint64_t v43 = *(void *)(v128 + 72);
    uint64_t v121 = v35;
    unint64_t v44 = v42 + v43 * v35;
    uint64_t v45 = v123;
    unsigned int v46 = (char *)v123 + *(int *)(v124 + 48);
    uint64_t v107 = v39;
    *long long v123 = v39;
    v45[1] = v40;
    uint64_t v47 = v136;
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v46, v44, v136);
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v135, v46, v47);
    uint64_t v122 = v40;
    swift_bridgeObjectRetain();
    uint64_t v48 = (uint64_t)v125;
    sub_25BFEFFC0();
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_25BF99CFC(v36, v37);
      (*v110)(v135, v136);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v102 = v127;
      goto LABEL_101;
    }
    uint64_t v49 = v48;
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5847F8);
    int64_t v24 = *(unsigned int (**)(void, void, void))(*(void *)(v50 - 8) + 48);
    if (v24(v48, 1, v50) == 1)
    {
      unint64_t v26 = v37;
      swift_bridgeObjectRelease();
      sub_25BF8830C(v49, &qword_26A5847D8);
      (*v110)(v135, v136);
      goto LABEL_10;
    }
    sub_25BF8830C(v48, &qword_26A5847D8);
    uint64_t v51 = *(void *)(v134 + 64);
    uint64_t v118 = v134 + 64;
    uint64_t v52 = 1 << *(unsigned char *)(v134 + 32);
    if (v52 < 64) {
      uint64_t v53 = ~(-1 << v52);
    }
    else {
      uint64_t v53 = -1;
    }
    unint64_t v26 = v53 & v51;
    uint64_t v129 = (void (**)(char *, uint64_t))((unint64_t)(v52 + 63) >> 6);
    long long v105 = (char *)v129 - 1;
    swift_bridgeObjectRetain();
    uint64_t v54 = 0;
    if (v26) {
      goto LABEL_20;
    }
LABEL_22:
    uint64_t v60 = v54 + 1;
    if (!__OFADD__(v54, 1)) {
      break;
    }
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    swift_once();
  }
  if (v60 >= (uint64_t)v129) {
    goto LABEL_30;
  }
  unint64_t v61 = *(void *)(v118 + 8 * v60);
  if (v61) {
    goto LABEL_25;
  }
  v54 += 2;
  if (v60 + 1 >= (uint64_t)v129)
  {
    uint64_t v54 = v60;
    goto LABEL_30;
  }
  unint64_t v61 = *(void *)(v118 + 8 * v54);
  if (v61)
  {
    ++v60;
LABEL_25:
    unint64_t v26 = (v61 - 1) & v61;
    unint64_t v56 = __clz(__rbit64(v61)) + (v60 << 6);
    uint64_t v54 = v60;
    goto LABEL_21;
  }
  if (v60 + 2 >= (uint64_t)v129) {
    goto LABEL_30;
  }
  unint64_t v61 = *(void *)(v118 + 8 * (v60 + 2));
  if (v61)
  {
    v60 += 2;
    goto LABEL_25;
  }
  uint64_t v62 = v60 + 3;
  if (v60 + 3 >= (uint64_t)v129)
  {
    uint64_t v54 = v60 + 2;
    goto LABEL_30;
  }
  unint64_t v61 = *(void *)(v118 + 8 * v62);
  if (v61)
  {
    v60 += 3;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v60 = v62 + 1;
    if (__OFADD__(v62, 1))
    {
      __break(1u);
      goto LABEL_111;
    }
    if (v60 >= (uint64_t)v129) {
      break;
    }
    unint64_t v61 = *(void *)(v118 + 8 * v60);
    ++v62;
    if (v61) {
      goto LABEL_25;
    }
  }
  uint64_t v54 = (uint64_t)v105;
LABEL_30:
  unint64_t v26 = 0;
  long long v141 = 0u;
  long long v142 = 0u;
  long long v140 = 0u;
  while (2)
  {
    sub_25BFA635C((uint64_t)&v140, (uint64_t)&v143);
    if (*((void *)&v143 + 1))
    {
      sub_25BFEFFC0();
      swift_bridgeObjectRelease();
      if (v24(v12, 1, v50) == 1)
      {
        sub_25BF8830C((uint64_t)v12, &qword_26A5847D8);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v132);
        if (!v26) {
          goto LABEL_22;
        }
LABEL_20:
        unint64_t v55 = __clz(__rbit64(v26));
        v26 &= v26 - 1;
        unint64_t v56 = v55 | (v54 << 6);
LABEL_21:
        uint64_t v57 = *(void *)(v134 + 56);
        uint64_t v58 = (void *)(*(void *)(v134 + 48) + 16 * v56);
        uint64_t v59 = v58[1];
        *(void *)&long long v140 = *v58;
        *((void *)&v140 + 1) = v59;
        sub_25BF884C4(v57 + 32 * v56, (uint64_t)v131);
        swift_bridgeObjectRetain();
        continue;
      }
      swift_bridgeObjectRelease();
      sub_25BF8830C((uint64_t)v12, &qword_26A5847D8);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v132);
    }
    else
    {
      uint64_t v63 = v134;
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A584800);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v104;
      *(void *)(inited + 32) = 0x6369666963657073;
      *(void *)(inited + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0xE800000000000000;
      *(unsigned char *)(inited + 48) = 0;
      unint64_t v65 = sub_25BF9E750(inited);
      uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584808);
      *(void *)&long long v143 = v65;
      sub_25BF7FDA4(&v143, &v140);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v139 = v63;
      sub_25BFA5774(&v140, v107, v122, isUniquelyReferenced_nonNull_native);
      uint64_t v134 = v139;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    break;
  }
  (*v110)(v135, v136);
  unint64_t v26 = v115;
LABEL_10:
  uint64_t v34 = v111;
  unint64_t v35 = v121 + 1;
  int64_t v24 = v119;
  uint64_t v32 = v109;
  if (v121 + 1 != v108) {
    goto LABEL_11;
  }
LABEL_54:
  long long v135 = (char *)v6;
  swift_bridgeObjectRelease();
LABEL_55:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v71 = 0;
  uint64_t v72 = 1 << *(unsigned char *)(v134 + 32);
  uint64_t v73 = -1;
  if (v72 < 64) {
    uint64_t v73 = ~(-1 << v72);
  }
  unint64_t v74 = v73 & *(void *)(v134 + 64);
  int64_t v75 = (unint64_t)(v72 + 63) >> 6;
  long long v125 = &v141;
  long long v126 = &v144;
  uint64_t v130 = v128 + 16;
  uint64_t v129 = (void (**)(char *, uint64_t))(v128 + 8);
  uint64_t v114 = v75 - 1;
  int64_t v116 = v75 - 5;
  uint64_t v124 = v134 + 64;
  uint64_t v118 = v134 + 104;
  uint64_t v121 = MEMORY[0x263F8EE58] + 8;
  uint64_t v6 = (uint64_t)v117;
  uint64_t v76 = v133;
  BOOL v12 = v127;
  uint64_t v122 = v75;
  while (2)
  {
    if (v74)
    {
      long long v132 = (char *)((v74 - 1) & v74);
      unint64_t v77 = __clz(__rbit64(v74)) | (v71 << 6);
      goto LABEL_62;
    }
    int64_t v81 = v71 + 1;
    if (__OFADD__(v71, 1)) {
      goto LABEL_108;
    }
    if (v81 >= v75)
    {
LABEL_71:
      long long v132 = 0;
      long long v141 = 0u;
      long long v142 = 0u;
      long long v140 = 0u;
      goto LABEL_72;
    }
    unint64_t v82 = *(void *)(v124 + 8 * v81);
    if (!v82)
    {
      if (v71 + 2 >= v75)
      {
        ++v71;
      }
      else
      {
        unint64_t v82 = *(void *)(v124 + 8 * (v71 + 2));
        if (v82)
        {
          int64_t v81 = v71 + 2;
          goto LABEL_66;
        }
        if (v71 + 3 >= v75)
        {
          v71 += 2;
        }
        else
        {
          unint64_t v82 = *(void *)(v124 + 8 * (v71 + 3));
          if (v82)
          {
            int64_t v81 = v71 + 3;
            goto LABEL_66;
          }
          int64_t v81 = v71 + 4;
          if (v71 + 4 >= v75)
          {
            v71 += 3;
          }
          else
          {
            unint64_t v82 = *(void *)(v124 + 8 * v81);
            if (v82) {
              goto LABEL_66;
            }
            while (v116 != v71)
            {
              unint64_t v82 = *(void *)(v118 + 8 * v71++);
              if (v82)
              {
                int64_t v81 = v71 + 4;
                goto LABEL_66;
              }
            }
            uint64_t v71 = v114;
          }
        }
      }
      goto LABEL_71;
    }
LABEL_66:
    long long v132 = (char *)((v82 - 1) & v82);
    unint64_t v77 = __clz(__rbit64(v82)) + (v81 << 6);
    uint64_t v71 = v81;
LABEL_62:
    uint64_t v78 = *(void *)(v134 + 56);
    uint64_t v79 = (void *)(*(void *)(v134 + 48) + 16 * v77);
    uint64_t v80 = v79[1];
    *(void *)&long long v140 = *v79;
    *((void *)&v140 + 1) = v80;
    sub_25BF884C4(v78 + 32 * v77, (uint64_t)v125);
    swift_bridgeObjectRetain();
LABEL_72:
    sub_25BFA635C((uint64_t)&v140, (uint64_t)&v143);
    uint64_t v83 = *((void *)&v143 + 1);
    if (!*((void *)&v143 + 1))
    {
      swift_release();

      goto LABEL_52;
    }
    uint64_t v131 = (long long *)v71;
    uint64_t v84 = v143;
    sub_25BF7FDA4(v126, &v140);
    if (!v84 && v83 == 0xE000000000000000 || (sub_25BFF0920() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v140);
      swift_bridgeObjectRelease();
      goto LABEL_59;
    }
    if (qword_26A587930 != -1) {
      swift_once();
    }
    uint64_t v85 = *(void *)(qword_26A587938 + 16);
    if (!v85)
    {
LABEL_84:
      int64_t v75 = v122;
      sub_25BF884C4((uint64_t)&v140, (uint64_t)&v139);
      if (swift_dynamicCast())
      {
        uint64_t v95 = v137;
        type metadata accessor for SCMLPersonAttributes();
        SCMLPersonAttributes.__allocating_init(_:)(v95);
        uint64_t v96 = v12;
        uint64_t v98 = v97;
        int64_t v99 = v120;
        swift_beginAccess();
        char v100 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v137 = *v99;
        *int64_t v99 = 0x8000000000000000;
        uint64_t v101 = v98;
        BOOL v12 = v96;
        sub_25BFA5604(v101, v84, v83, v100);
        *int64_t v99 = v137;
        uint64_t v76 = v133;
        uint64_t v6 = (uint64_t)v117;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v140);
LABEL_59:
      uint64_t v71 = (uint64_t)v131;
      unint64_t v74 = (unint64_t)v132;
      continue;
    }
    break;
  }
  unint64_t v86 = qword_26A587938
      + ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80));
  uint64_t v87 = *(void *)(v128 + 72);
  uint64_t v88 = *(void (**)(char *, unint64_t, uint64_t))(v128 + 16);
  long long v123 = (uint64_t *)qword_26A587938;
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v89 = v76;
    uint64_t v90 = v76;
    uint64_t v91 = v136;
    v88(v89, v86, v136);
    long long v92 = v135;
    sub_25BFEFFC0();
    long long v135 = v92;
    if (v92) {
      break;
    }
    (*v129)(v90, v91);
    uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5847F8);
    int v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 48))(v6, 1, v93);
    sub_25BF8830C(v6, &qword_26A5847D8);
    if (v94 != 1)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v140);
      swift_bridgeObjectRelease();
      BOOL v12 = v127;
      unint64_t v26 = v115;
      int64_t v24 = v119;
      uint64_t v76 = v133;
      int64_t v75 = v122;
      goto LABEL_59;
    }
    v86 += v87;
    --v85;
    uint64_t v76 = v133;
    if (!v85)
    {
      swift_bridgeObjectRelease();
      BOOL v12 = v127;
      unint64_t v26 = v115;
      int64_t v24 = v119;
      goto LABEL_84;
    }
  }
  (*v129)(v90, v91);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25BF99CFC((uint64_t)v119, v115);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v140);
  swift_release();
  uint64_t v102 = v127;
LABEL_101:
  uint64_t v70 = *v120;

  swift_bridgeObjectRelease();
  type metadata accessor for SCMLVisualGenerationHandlingResult();
  swift_deallocPartialClassInstance();
  return v70;
}

void SCMLVisualGenerationHandlingResult.init()()
{
}

id SCMLVisualGenerationHandlingResult.__deallocating_deinit(uint64_t a1)
{
  return sub_25BFA26A4(a1, type metadata accessor for SCMLVisualGenerationHandlingResult);
}

uint64_t static SCMLVisualGenerationHandling.allowImplicitDetections.getter()
{
  return 0;
}

id SCMLVisualGenerationHandling.__allocating_init(onBehalfOf:modelManagerServicesUseCaseID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return SCMLVisualGenerationHandling.init(onBehalfOf:modelManagerServicesUseCaseID:)(a1, a2, a3);
}

id SCMLVisualGenerationHandling.init(onBehalfOf:modelManagerServicesUseCaseID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v56 = a2;
  uint64_t v53 = a1;
  uint64_t v5 = sub_25BFEFEB0();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v52 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_25BFEFF70();
  uint64_t v7 = *(void *)(v59 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v59);
  unint64_t v55 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v58 = (char *)v48 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584328);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_25BFEFED0();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLVisualGenerationHandling_logger];
  uint64_t v19 = v3;
  uint64_t v20 = v18;
  uint64_t v21 = v19;
  uint64_t v22 = v14;
  sub_25BFF01D0();
  uint64_t v23 = static SCMLAsset.admPeopleGroundingID.getter();
  unint64_t v25 = v24;
  swift_bridgeObjectRetain();
  uint64_t v54 = v23;
  sub_25BFEFEC0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v22) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_25BF8830C((uint64_t)v13, &qword_26A584328);
    sub_25BFA6604();
    id v26 = v20;
    swift_allocError();
    swift_willThrow();
    uint64_t v27 = sub_25BFF01E0();
    (*(void (**)(char *, uint64_t))(*(void *)(v27 - 8) + 8))(v20, v27);

    type metadata accessor for SCMLVisualGenerationHandling();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v48[1] = a3;
    uint64_t v50 = v21;
    uint64_t v51 = v7;
    char v28 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    uint64_t v57 = v22;
    v28(v17, v13, v22);
    swift_bridgeObjectRetain_n();
    v48[2] = v20;
    id v29 = sub_25BFF01C0();
    os_log_type_t v30 = sub_25BFF0570();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v49 = v17;
    if (v31)
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v62 = v33;
      *(_DWORD *)uint64_t v32 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v60 = sub_25BF866A0(v54, v25, &v62);
      sub_25BFF0640();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25BF41000, v29, v30, "Begin prewarm VG handling: %s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x26117B7A0](v33, -1, -1);
      uint64_t v34 = v49;
      MEMORY[0x26117B7A0](v32, -1, -1);
    }
    else
    {
      uint64_t v34 = v17;

      swift_bridgeObjectRelease_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A584338);
    unint64_t v35 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_25BFF5CF0;
    (*(void (**)(unint64_t, char *, uint64_t))(v15 + 16))(v36 + v35, v34, v57);
    sub_25BFEFEA0();
    unint64_t v37 = v58;
    sub_25BFEFF60();
    uint64_t v38 = v51;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v55, v37, v59);
    sub_25BFEFE90();
    swift_allocObject();
    uint64_t v39 = sub_25BFEFE70();
    uint64_t v40 = v50;
    *(void *)&v50[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLVisualGenerationHandling_tokenGen] = v39;
    swift_retain();
    sub_25BFEFE80();
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_25BFF01C0();
    os_log_type_t v42 = sub_25BFF0570();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v62 = v44;
      *(_DWORD *)uint64_t v43 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v60 = sub_25BF866A0(v54, v25, &v62);
      uint64_t v38 = v51;
      sub_25BFF0640();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25BF41000, v41, v42, "End prewarm VG handling: %s", v43, 0xCu);
      swift_arrayDestroy();
      uint64_t v45 = v44;
      uint64_t v40 = v50;
      MEMORY[0x26117B7A0](v45, -1, -1);
      MEMORY[0x26117B7A0](v43, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unsigned int v46 = (objc_class *)type metadata accessor for SCMLVisualGenerationHandling();
    v61.receiver = v40;
    v61.super_class = v46;
    id v26 = objc_msgSendSuper2(&v61, sel_init);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v58, v59);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v49, v57);
  }
  return v26;
}

uint64_t sub_25BFA074C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_25BF8269C;
  return sub_25BFA0800(a1, a2, a3, v3);
}

uint64_t sub_25BFA0800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[27] = a3;
  v4[28] = a4;
  v4[25] = a1;
  v4[26] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843D8);
  v4[29] = swift_task_alloc();
  v4[30] = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843E0);
  v4[31] = swift_task_alloc();
  uint64_t v5 = sub_25BFF0000();
  v4[32] = v5;
  v4[33] = *(void *)(v5 - 8);
  v4[34] = swift_task_alloc();
  uint64_t v6 = sub_25BFF0010();
  v4[35] = v6;
  v4[36] = *(void *)(v6 - 8);
  v4[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843E8);
  v4[38] = swift_task_alloc();
  uint64_t v7 = sub_25BFF0150();
  v4[39] = v7;
  v4[40] = *(void *)(v7 - 8);
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  uint64_t v8 = sub_25BFF0210();
  v4[43] = v8;
  v4[44] = *(void *)(v8 - 8);
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  v4[47] = swift_task_alloc();
  v4[48] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25BFA0AA4, 0, 0);
}

uint64_t sub_25BFA0AA4()
{
  uint64_t v1 = v0[38];
  uint64_t v3 = v0[26];
  uint64_t v2 = v0[27];
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  sub_25BFF0220();
  swift_task_dealloc();
  uint64_t v5 = sub_25BFF0140();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 1, 1, v5);
  sub_25BFF0130();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[49] = v6;
  void *v6 = v0;
  v6[1] = sub_25BFA0C14;
  uint64_t v7 = v0[29];
  return MEMORY[0x270F2FCA0](v7, 0xD00000000000001CLL, 0x800000025C004B30);
}

uint64_t sub_25BFA0C14()
{
  *(void *)(*(void *)v1 + 40std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25BFA13AC;
  }
  else {
    uint64_t v2 = sub_25BFA0D28;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25BFA0D28()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584408);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_25BF8830C(v1, &qword_26A5843D8);
  }
  else
  {
    uint64_t v43 = v0[47];
    uint64_t v44 = v0[48];
    uint64_t v46 = v0[44];
    uint64_t v47 = v0[43];
    uint64_t v34 = v0[41];
    uint64_t v35 = v0[40];
    uint64_t v36 = v0[39];
    uint64_t v37 = v0[42];
    uint64_t v48 = v0[37];
    uint64_t v45 = v0[36];
    uint64_t v3 = v0[35];
    uint64_t v4 = v0[33];
    uint64_t v42 = v4;
    uint64_t v32 = v0[32];
    uint64_t v33 = v0[34];
    uint64_t v6 = v0[30];
    uint64_t v5 = v0[31];
    uint64_t v38 = v0[26];
    uint64_t v39 = v0[27];
    uint64_t v7 = v1 + *(int *)(v2 + 48);
    uint64_t v8 = v5 + *(int *)(v6 + 48);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32);
    v9(v5, v1, v3);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    v10(v8, v7, v32);
    uint64_t v11 = v5 + *(int *)(v6 + 48);
    v9(v48, v5, v3);
    v10(v33, v11, v32);
    sub_25BFEFFF0();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v37, v34, v36);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A584410);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25BFF5CF0;
    *(void *)(inited + 32) = 1954047348;
    *(void *)(inited + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0xE400000000000000;
    uint64_t v13 = MEMORY[0x263F62188];
    *(void *)(inited + 72) = MEMORY[0x263F8D310];
    *(void *)(inited + 8std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v13;
    *(void *)(inited + 48) = v38;
    *(void *)(inited + 56) = v39;
    swift_bridgeObjectRetain();
    sub_25BF83D50(inited, &qword_26A584430, &qword_26A584438, (uint64_t (*)(uint64_t *, unint64_t))sub_25BF883CC);
    sub_25BF7FB90(MEMORY[0x263F8EE78]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A584418);
    uint64_t v14 = swift_initStackObject();
    *(_OWORD *)(v14 + 16) = xmmword_25BFF5CF0;
    *(void *)(v14 + 32) = 0xD000000000000019;
    *(void *)(v14 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0x800000025C004B50;
    uint64_t v15 = sub_25BFF0300();
    uint64_t v16 = MEMORY[0x263F62180];
    *(void *)(v14 + 72) = v15;
    *(void *)(v14 + 8std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v16;
    __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v14 + 48));
    sub_25BFF02F0();
    sub_25BF83D50(v14, &qword_26A584420, &qword_26A584428, (uint64_t (*)(uint64_t *, unint64_t))sub_25BF883CC);
    sub_25BFEFFE0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v33, v32);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v48, v3);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v47);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v44, v43, v47);
  }
  uint64_t v17 = v0[50];
  sub_25BFA7354(&qword_26A584400, 255, MEMORY[0x263F61FA8]);
  sub_25BFF0290();
  sub_25BFF0280();
  if (v17)
  {
    uint64_t v18 = v0[48];
    uint64_t v20 = v0[42];
    uint64_t v19 = v0[43];
    uint64_t v21 = v0[39];
    uint64_t v22 = v0[40];
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v0[44] + 8);
    v23(v0[45], v19);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    v23(v18, v19);
  }
  else
  {
    uint64_t v25 = v0[48];
    uint64_t v26 = v0[46];
    uint64_t v27 = v0[43];
    uint64_t v28 = v0[40];
    uint64_t v40 = v0[39];
    uint64_t v41 = v0[42];
    uint64_t v29 = v0[28];
    os_log_type_t v30 = *(void (**)(void))(v0[44] + 8);
    v30();
    v0[24] = *(void *)(v29 + OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLVisualGenerationHandling_tokenGen);
    sub_25BFEFE90();
    sub_25BFF02B0();
    ((void (*)(uint64_t, uint64_t))v30)(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v41, v40);
    ((void (*)(uint64_t, uint64_t))v30)(v25, v27);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v24 = (uint64_t (*)(void))v0[1];
  return v24();
}

uint64_t sub_25BFA13AC()
{
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[43];
  uint64_t v3 = v0[44];
  (*(void (**)(void, void))(v0[40] + 8))(v0[42], v0[39]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_25BFA14D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v36 = a3;
  uint64_t v3 = sub_25BFF02D0();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v31 = v3;
  uint64_t v32 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25BFF0300();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_25BFF0210();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v28 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v28 - v16;
  sub_25BFF02F0();
  sub_25BFF0240();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v34 = v29;
  uint64_t v35 = v30;
  uint64_t v18 = v33;
  sub_25BFF02E0();
  uint64_t v33 = v18;
  uint64_t v19 = v28;
  uint64_t v20 = v31;
  sub_25BFF0240();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584440);
  uint64_t v21 = *(void *)(v12 + 72);
  unint64_t v22 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_25BFF5C80;
  unint64_t v24 = v23 + v22;
  uint64_t v25 = *(void (**)(unint64_t, char *, uint64_t))(v13 + 16);
  v25(v24, v17, v11);
  v25(v24 + v21, v19, v11);
  MEMORY[0x2611798E0](v23);
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v19, v11);
  return ((uint64_t (*)(char *, uint64_t))v26)(v17, v11);
}

uint64_t sub_25BFA1820(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25BFF0270();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v13[3] = MEMORY[0x263F8D310];
  void v13[4] = MEMORY[0x263F62188];
  v13[0] = a1;
  v13[1] = a2;
  swift_bridgeObjectRetain();
  uint64_t v8 = MEMORY[0x263F620B0];
  sub_25BFF0260();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584448);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_25BFF5CF0;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v10 + v9, v7, v4);
  MEMORY[0x261179900](v10, v4, v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_25BFA19C0(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  void v3[6] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A584360);
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v5 = sub_25BFEFD50();
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_25BFA1AE4, 0, 0);
}

uint64_t sub_25BFA1AE4()
{
  uint64_t v17 = v0;
  *(void *)(v0 + 16) = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  *(void *)(v0 + 24) = *(void *)(v0 + 56);
  sub_25BFEFD30();
  sub_25BF8178C();
  sub_25BFF0660();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = sub_25BFF03C0();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  uint64_t v7 = OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLVisualGenerationHandling_logger;
  *(void *)(v0 + 12std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v6;
  *(void *)(v0 + 128) = v7;
  swift_bridgeObjectRetain_n();
  uint64_t v8 = sub_25BFF01C0();
  os_log_type_t v9 = sub_25BFF0550();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v16 = v11;
    *(_DWORD *)uint64_t v10 = 136642819;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = sub_25BF866A0(v4, v6, &v16);
    sub_25BFF0640();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25BF41000, v8, v9, "VG handling final text: %{sensitive}s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x26117B7A0](v11, -1, -1);
    MEMORY[0x26117B7A0](v10, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))(*(void *)((*MEMORY[0x263F8EED0] & **(void **)(v0 + 64))
                                                                               + 0x80)
                                                                   + **(int **)((*MEMORY[0x263F8EED0] & **(void **)(v0 + 64))
                                                                              + 0x80));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_25BFA1DC8;
  uint64_t v13 = *(void *)(v0 + 88);
  return v15(v13, v4, v6);
}

uint64_t sub_25BFA1DC8()
{
  uint64_t v2 = (void *)*v1;
  v2[18] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_25BFA20DC, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[19] = v3;
    uint64_t v4 = sub_25BFA7354(&qword_26A584370, 255, MEMORY[0x263F7F7D8]);
    void *v3 = v2;
    v3[1] = sub_25BFA1F88;
    uint64_t v5 = v2[9];
    return MEMORY[0x270F2EEA0](v5, v4);
  }
}

uint64_t sub_25BFA1F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[20] = a1;
  v4[21] = a2;
  v4[22] = v2;
  swift_task_dealloc();
  (*(void (**)(void, void))(v4[10] + 8))(v4[11], v4[9]);
  if (v2)
  {
    uint64_t v5 = sub_25BFA2154;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_25BFA21CC;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_25BFA20DC()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25BFA2154()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_25BFA21CC()
{
  uint64_t v17 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = sub_25BFF01C0();
  os_log_type_t v2 = sub_25BFF0550();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = v0[20];
    unint64_t v3 = v0[21];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v16 = v6;
    *(_DWORD *)uint64_t v5 = 136642819;
    swift_bridgeObjectRetain();
    v0[4] = sub_25BF866A0(v4, v3, &v16);
    sub_25BFF0640();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25BF41000, v1, v2, "VG handling result: %{sensitive}s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x26117B7A0](v6, -1, -1);
    MEMORY[0x26117B7A0](v5, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v7 = v0[21];
  uint64_t v8 = v0[22];
  uint64_t v9 = v0[20];
  uint64_t v11 = (char *)v0[6];
  uint64_t v10 = v0[7];
  objc_allocWithZone((Class)type metadata accessor for SCMLVisualGenerationHandlingResult());
  swift_bridgeObjectRetain();
  uint64_t v12 = SCMLVisualGenerationHandlingResult.init(result:text:)(v9, v7, v11, v10);
  swift_task_dealloc();
  uint64_t v13 = swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(uint64_t))v0[1];
  if (!v8) {
    uint64_t v13 = v12;
  }
  return v14(v13);
}

uint64_t sub_25BFA2554(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  void v3[3] = _Block_copy(aBlock);
  uint64_t v5 = sub_25BFF0380();
  uint64_t v7 = v6;
  void v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_25BF85CCC;
  return sub_25BFA19C0(v5, v7);
}

void SCMLVisualGenerationHandling.init()()
{
}

id SCMLVisualGenerationHandling.__deallocating_deinit()
{
  return sub_25BFA26A4(0, type metadata accessor for SCMLVisualGenerationHandling);
}

id sub_25BFA26A4(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

_DWORD *sub_25BFA275C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_25BFA276C(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_25BFA2778(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    sub_25BFA5ED0();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_25BFA2958(v6);
  return sub_25BFF0770();
}

uint64_t sub_25BFA27F4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_25BFA5EE4(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_25BFA35A8(v5);
  *a1 = v2;
  return result;
}

void *sub_25BFA2860(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A5842F0);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = _swift_stdlib_malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      void v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_25BFA5CD0((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_25BFF07D0();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  return v3;
}

void sub_25BFA2958(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1[1];
  uint64_t v5 = sub_25BFF0900();
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_172;
    }
    if (v4) {
      sub_25BFA3C94(0, v4, 1, a1);
    }
    return;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_180;
  }
  uint64_t v152 = v5;
  long long v149 = a1;
  if (v4 < 2)
  {
    uint64_t v9 = (char *)MEMORY[0x263F8EE78];
    uint64_t v171 = MEMORY[0x263F8EE78];
    std::string __dst = (void **)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_138:
      if (v12 >= 2)
      {
        uint64_t v143 = *v149;
        do
        {
          unint64_t v144 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_167;
          }
          if (!v143) {
            goto LABEL_179;
          }
          uint64_t v145 = *(void *)&v9[16 * v144 + 32];
          uint64_t v146 = *(void *)&v9[16 * v12 + 24];
          sub_25BFA401C((void **)(v143 + 8 * v145), (void **)(v143 + 8 * *(void *)&v9[16 * v12 + 16]), (void **)(v143 + 8 * v146), __dst);
          if (v2) {
            break;
          }
          if (v146 < v145) {
            goto LABEL_168;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v9 = sub_25BFA4BAC((uint64_t)v9);
          }
          if (v144 >= *((void *)v9 + 2)) {
            goto LABEL_169;
          }
          long long v147 = &v9[16 * v144 + 32];
          *(void *)long long v147 = v145;
          *((void *)v147 + 1) = v146;
          unint64_t v148 = *((void *)v9 + 2);
          if (v12 > v148) {
            goto LABEL_170;
          }
          memmove(&v9[16 * v12 + 16], &v9[16 * v12 + 32], 16 * (v148 - v12));
          *((void *)v9 + 2) = v148 - 1;
          unint64_t v12 = v148 - 1;
        }
        while (v148 > 2);
      }
LABEL_149:
      swift_bridgeObjectRelease();
      *(void *)((v171 & 0xFFFFFFFFFFFFFF8) + 0x1std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0;
      sub_25BFF04E0();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    type metadata accessor for SCMLPeopleDetectionAttribute();
    uint64_t v8 = sub_25BFF0500();
    *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x1std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v7;
    std::string __dst = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v171 = v8;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v150 = *a1 - 8;
  uint64_t v151 = *a1 + 16;
  uint64_t v9 = (char *)MEMORY[0x263F8EE78];
  uint64_t v154 = v4;
  uint64_t v162 = *a1;
  while (2)
  {
    uint64_t v13 = v10;
    uint64_t v14 = v10 + 1;
    uint64_t v155 = v9;
    uint64_t v156 = v10;
    if (v10 + 1 >= v4) {
      goto LABEL_59;
    }
    uint64_t v159 = v2;
    uint64_t v15 = *(void **)(v11 + 8 * v14);
    uint64_t v16 = *(void **)(v11 + 8 * v10);
    uint64_t v17 = (void *)MEMORY[0x263F8EED0];
    uint64_t v18 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v15) + 0x60);
    uint64_t v19 = v15;
    uint64_t v20 = v16;
    v167 = v18;
    uint64_t v21 = v18();
    uint64_t v23 = v22;
    unint64_t v24 = *(uint64_t (**)(void))((*v17 & *v20) + 0x60);
    if (v21 == v24() && v23 == v25)
    {
      uint64_t v28 = swift_bridgeObjectRelease_n();
    }
    else
    {
      char v27 = sub_25BFF0920();
      swift_bridgeObjectRelease();
      uint64_t v28 = swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
        uint64_t v29 = ((uint64_t (*)(uint64_t))v167)(v28);
        uint64_t v31 = v30;
        if (v29 == v24() && v31 == v32) {
          int v163 = 0;
        }
        else {
          int v163 = sub_25BFF0920();
        }
        uint64_t v2 = v159;
        uint64_t v4 = v154;
        uint64_t v13 = v156;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_30;
      }
    }
    uint64_t v34 = (void *)MEMORY[0x263F8EED0];
    unsigned int v35 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v19) + 0x78))(v28);
    unsigned int v36 = (*(uint64_t (**)(void))((*v34 & *v20) + 0x78))();

    int v163 = v35 < v36;
    uint64_t v2 = v159;
    uint64_t v4 = v154;
    uint64_t v13 = v156;
LABEL_30:
    uint64_t v14 = v13 + 2;
    uint64_t v9 = v155;
    uint64_t v11 = v162;
    if (v13 + 2 >= v4) {
      goto LABEL_51;
    }
    uint64_t v37 = (id *)(v151 + 8 * v13);
    while (1)
    {
      uint64_t v168 = v14;
      uint64_t v160 = v2;
      uint64_t v38 = *(v37 - 1);
      uint64_t v39 = (void *)MEMORY[0x263F8EED0];
      uint64_t v40 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)*v37) + 0x60);
      uint64_t v41 = *v37;
      uint64_t v42 = v38;
      v165 = v40;
      uint64_t v43 = v40();
      uint64_t v45 = v44;
      uint64_t v46 = *(uint64_t (**)(void))((*v39 & *v42) + 0x60);
      if (v43 == v46() && v45 == v47)
      {
        uint64_t v50 = swift_bridgeObjectRelease_n();
LABEL_43:
        uint64_t v57 = (void *)MEMORY[0x263F8EED0];
        unsigned int v58 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v41) + 0x78))(v50);
        unsigned int v59 = (*(uint64_t (**)(void))((*v57 & *v42) + 0x78))();

        int v56 = v58 < v59;
        uint64_t v2 = v160;
        uint64_t v4 = v154;
        goto LABEL_46;
      }
      char v49 = sub_25BFF0920();
      swift_bridgeObjectRelease();
      uint64_t v50 = swift_bridgeObjectRelease();
      if (v49) {
        goto LABEL_43;
      }
      uint64_t v51 = ((uint64_t (*)(uint64_t))v165)(v50);
      uint64_t v53 = v52;
      BOOL v55 = v51 == v46() && v53 == v54;
      int v56 = v55 ? 0 : sub_25BFF0920();
      uint64_t v2 = v160;
      uint64_t v4 = v154;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_46:
      uint64_t v9 = v155;
      uint64_t v11 = v162;
      if ((v163 ^ v56)) {
        break;
      }
      uint64_t v14 = v168 + 1;
      ++v37;
      if (v4 == v168 + 1)
      {
        uint64_t v14 = v4;
        goto LABEL_50;
      }
    }
    uint64_t v14 = v168;
LABEL_50:
    uint64_t v13 = v156;
LABEL_51:
    if (v163)
    {
      if (v14 < v13) {
        goto LABEL_173;
      }
      if (v13 < v14)
      {
        uint64_t v60 = (uint64_t *)(v150 + 8 * v14);
        uint64_t v61 = v14;
        uint64_t v62 = v13;
        uint64_t v63 = (uint64_t *)(v11 + 8 * v13);
        do
        {
          if (v62 != --v61)
          {
            if (!v11) {
              goto LABEL_178;
            }
            uint64_t v64 = *v63;
            *uint64_t v63 = *v60;
            *uint64_t v60 = v64;
          }
          ++v62;
          --v60;
          ++v63;
        }
        while (v62 < v61);
      }
    }
LABEL_59:
    if (v14 >= v4) {
      goto LABEL_90;
    }
    if (__OFSUB__(v14, v13)) {
      goto LABEL_171;
    }
    if (v14 - v13 >= v152) {
      goto LABEL_90;
    }
    if (__OFADD__(v13, v152)) {
      goto LABEL_174;
    }
    if (v13 + v152 >= v4) {
      uint64_t v65 = v4;
    }
    else {
      uint64_t v65 = v13 + v152;
    }
    if (v65 >= v13)
    {
      if (v14 == v65) {
        goto LABEL_90;
      }
      uint64_t v161 = v2;
      uint64_t v66 = v150 + 8 * v14;
      uint64_t v153 = v65;
      while (2)
      {
        long long v68 = *(void **)(v11 + 8 * v14);
        uint64_t v69 = v13;
        uint64_t v157 = v66;
        uint64_t v70 = v66;
        uint64_t v169 = v14;
        while (2)
        {
          uint64_t v71 = *(void **)v70;
          uint64_t v72 = (void *)MEMORY[0x263F8EED0];
          uint64_t v73 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v68) + 0x60);
          unint64_t v74 = v68;
          int64_t v75 = v71;
          v166 = v73;
          uint64_t v76 = v73();
          uint64_t v78 = v77;
          v164 = *(uint64_t (**)(void))((*v72 & *v75) + 0x60);
          if (v76 == v164() && v78 == v79)
          {
            uint64_t v82 = swift_bridgeObjectRelease_n();
LABEL_85:
            uint64_t v89 = (void *)MEMORY[0x263F8EED0];
            unsigned int v90 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v74) + 0x78))(v82);
            unsigned int v91 = (*(uint64_t (**)(void))((*v89 & *v75) + 0x78))();

            if (v90 >= v91) {
              goto LABEL_70;
            }
LABEL_86:
            uint64_t v11 = v162;
            uint64_t v67 = v169;
            if (!v162) {
              goto LABEL_176;
            }
            long long v92 = *(void **)v70;
            long long v68 = *(void **)(v70 + 8);
            *(void *)uint64_t v70 = v68;
            *(void *)(v70 + 8) = v92;
            v70 -= 8;
            if (v169 == ++v69) {
              goto LABEL_71;
            }
            continue;
          }
          break;
        }
        char v81 = sub_25BFF0920();
        swift_bridgeObjectRelease();
        uint64_t v82 = swift_bridgeObjectRelease();
        if (v81) {
          goto LABEL_85;
        }
        uint64_t v83 = ((uint64_t (*)(uint64_t))v166)(v82);
        uint64_t v85 = v84;
        if (v83 != v164() || v85 != v86)
        {
          char v88 = sub_25BFF0920();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v88 & 1) == 0) {
            goto LABEL_70;
          }
          goto LABEL_86;
        }

        swift_bridgeObjectRelease_n();
LABEL_70:
        uint64_t v11 = v162;
        uint64_t v67 = v169;
LABEL_71:
        uint64_t v14 = v67 + 1;
        uint64_t v13 = v156;
        uint64_t v66 = v157 + 8;
        if (v14 != v153) {
          continue;
        }
        break;
      }
      uint64_t v14 = v153;
      uint64_t v2 = v161;
      uint64_t v9 = v155;
LABEL_90:
      if (v14 < v13) {
        goto LABEL_166;
      }
      uint64_t v170 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = sub_25BFA4938(0, *((void *)v9 + 2) + 1, 1, v9);
      }
      unint64_t v94 = *((void *)v9 + 2);
      unint64_t v93 = *((void *)v9 + 3);
      unint64_t v12 = v94 + 1;
      uint64_t v11 = v162;
      if (v94 >= v93 >> 1)
      {
        long long v142 = sub_25BFA4938((char *)(v93 > 1), v94 + 1, 1, v9);
        uint64_t v11 = v162;
        uint64_t v9 = v142;
      }
      *((void *)v9 + 2) = v12;
      uint64_t v95 = v9 + 32;
      uint64_t v96 = &v9[16 * v94 + 32];
      *(void *)uint64_t v96 = v156;
      *((void *)v96 + 1) = v170;
      if (v94)
      {
        while (2)
        {
          unint64_t v97 = v12 - 1;
          if (v12 >= 4)
          {
            uint64_t v102 = &v95[16 * v12];
            uint64_t v103 = *((void *)v102 - 8);
            uint64_t v104 = *((void *)v102 - 7);
            BOOL v108 = __OFSUB__(v104, v103);
            uint64_t v105 = v104 - v103;
            if (v108) {
              goto LABEL_155;
            }
            uint64_t v107 = *((void *)v102 - 6);
            uint64_t v106 = *((void *)v102 - 5);
            BOOL v108 = __OFSUB__(v106, v107);
            uint64_t v100 = v106 - v107;
            char v101 = v108;
            if (v108) {
              goto LABEL_156;
            }
            unint64_t v109 = v12 - 2;
            uint64_t v110 = &v95[16 * v12 - 32];
            uint64_t v112 = *(void *)v110;
            uint64_t v111 = *((void *)v110 + 1);
            BOOL v108 = __OFSUB__(v111, v112);
            uint64_t v113 = v111 - v112;
            if (v108) {
              goto LABEL_158;
            }
            BOOL v108 = __OFADD__(v100, v113);
            uint64_t v114 = v100 + v113;
            if (v108) {
              goto LABEL_161;
            }
            if (v114 >= v105)
            {
              long long v132 = &v95[16 * v97];
              uint64_t v134 = *(void *)v132;
              uint64_t v133 = *((void *)v132 + 1);
              BOOL v108 = __OFSUB__(v133, v134);
              uint64_t v135 = v133 - v134;
              if (v108) {
                goto LABEL_165;
              }
              BOOL v125 = v100 < v135;
            }
            else
            {
LABEL_109:
              if (v101) {
                goto LABEL_157;
              }
              unint64_t v109 = v12 - 2;
              unint64_t v115 = &v95[16 * v12 - 32];
              uint64_t v117 = *(void *)v115;
              uint64_t v116 = *((void *)v115 + 1);
              BOOL v118 = __OFSUB__(v116, v117);
              uint64_t v119 = v116 - v117;
              char v120 = v118;
              if (v118) {
                goto LABEL_160;
              }
              uint64_t v121 = &v95[16 * v97];
              uint64_t v123 = *(void *)v121;
              uint64_t v122 = *((void *)v121 + 1);
              BOOL v108 = __OFSUB__(v122, v123);
              uint64_t v124 = v122 - v123;
              if (v108) {
                goto LABEL_163;
              }
              if (__OFADD__(v119, v124)) {
                goto LABEL_164;
              }
              if (v119 + v124 < v100) {
                goto LABEL_121;
              }
              BOOL v125 = v100 < v124;
            }
            if (v125) {
              unint64_t v97 = v109;
            }
          }
          else
          {
            if (v12 == 3)
            {
              uint64_t v99 = *((void *)v9 + 4);
              uint64_t v98 = *((void *)v9 + 5);
              BOOL v108 = __OFSUB__(v98, v99);
              uint64_t v100 = v98 - v99;
              char v101 = v108;
              goto LABEL_109;
            }
            uint64_t v126 = *((void *)v9 + 4);
            uint64_t v127 = *((void *)v9 + 5);
            BOOL v108 = __OFSUB__(v127, v126);
            uint64_t v119 = v127 - v126;
            char v120 = v108;
LABEL_121:
            if (v120) {
              goto LABEL_159;
            }
            uint64_t v128 = &v95[16 * v97];
            uint64_t v130 = *(void *)v128;
            uint64_t v129 = *((void *)v128 + 1);
            BOOL v108 = __OFSUB__(v129, v130);
            uint64_t v131 = v129 - v130;
            if (v108) {
              goto LABEL_162;
            }
            if (v131 < v119) {
              goto LABEL_14;
            }
          }
          unint64_t v136 = v97 - 1;
          if (v97 - 1 >= v12)
          {
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
            goto LABEL_175;
          }
          if (!v11) {
            goto LABEL_177;
          }
          uint64_t v137 = &v95[16 * v136];
          uint64_t v138 = *(void *)v137;
          uint64_t v139 = &v95[16 * v97];
          uint64_t v140 = *((void *)v139 + 1);
          sub_25BFA401C((void **)(v11 + 8 * *(void *)v137), (void **)(v11 + 8 * *(void *)v139), (void **)(v11 + 8 * v140), __dst);
          if (v2) {
            goto LABEL_149;
          }
          if (v140 < v138) {
            goto LABEL_152;
          }
          if (v97 > *((void *)v9 + 2)) {
            goto LABEL_153;
          }
          *(void *)uint64_t v137 = v138;
          *(void *)&v95[16 * v136 + 8] = v140;
          unint64_t v141 = *((void *)v9 + 2);
          if (v97 >= v141) {
            goto LABEL_154;
          }
          unint64_t v12 = v141 - 1;
          memmove(&v95[16 * v97], v139 + 16, 16 * (v141 - 1 - v97));
          *((void *)v9 + 2) = v141 - 1;
          uint64_t v11 = v162;
          if (v141 <= 2) {
            goto LABEL_14;
          }
          continue;
        }
      }
      unint64_t v12 = 1;
LABEL_14:
      uint64_t v4 = v154;
      uint64_t v10 = v170;
      if (v170 >= v154) {
        goto LABEL_138;
      }
      continue;
    }
    break;
  }
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  sub_25BFF07B0();
  __break(1u);
}

uint64_t sub_25BFA35A8(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_25BFF0900();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_25BFA3F4C(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  uint64_t v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    std::string __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_118:
      unint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          unint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_25BFA469C((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v97 = sub_25BFA4BAC((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          unint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_25BFF0500();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = v7;
    std::string __dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v106 = v3;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = sub_25BFF0920();
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ sub_25BFF0920()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      uint64_t v22 = v20 + 1;
      uint64_t v9 = v20;
      uint64_t v20 = v22;
    }
    while (v22 < v3);
    uint64_t v20 = v22;
LABEL_36:
    uint64_t v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        uint64_t v27 = v20;
        uint64_t v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      uint64_t v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_25BFA4938(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = sub_25BFA4938((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    uint64_t v43 = &v11[16 * v41 + 32];
    *(void *)uint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      uint64_t v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          char v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        long long v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        int64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        char v88 = v42;
        unint64_t v89 = v44;
        unsigned int v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_25BFA469C((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        uint64_t v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    uint64_t v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    uint64_t v32 = v3;
  }
  else {
    uint64_t v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        uint64_t v37 = v13;
        uint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_25BFF0920() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      uint64_t v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  uint64_t result = sub_25BFF07B0();
  __break(1u);
  return result;
}

void sub_25BFA3C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v33 = *a4;
    uint64_t v4 = *a4 + 8 * a3 - 8;
LABEL_6:
    uint64_t v6 = *(void **)(v33 + 8 * a3);
    uint64_t v7 = a1;
    uint64_t v32 = v4;
    uint64_t v34 = a3;
    while (1)
    {
      uint64_t v8 = *(void **)v4;
      uint64_t v9 = (void *)MEMORY[0x263F8EED0];
      uint64_t v10 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v6) + 0x60);
      uint64_t v11 = v6;
      unint64_t v12 = v8;
      uint64_t v36 = v10;
      uint64_t v13 = v10();
      uint64_t v15 = v14;
      uint64_t v35 = *(uint64_t (**)(void))((*v9 & *v12) + 0x60);
      if (v13 == v35() && v15 == v16) {
        break;
      }
      char v18 = sub_25BFF0920();
      swift_bridgeObjectRelease();
      uint64_t v19 = swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_19;
      }
      uint64_t v20 = ((uint64_t (*)(uint64_t))v36)(v19);
      uint64_t v22 = v21;
      if (v20 == v35() && v22 == v23)
      {

        swift_bridgeObjectRelease_n();
        uint64_t v5 = v34;
LABEL_5:
        a3 = v5 + 1;
        uint64_t v4 = v32 + 8;
        if (a3 == a2) {
          return;
        }
        goto LABEL_6;
      }
      char v25 = sub_25BFF0920();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = v34;
      if ((v25 & 1) == 0) {
        goto LABEL_5;
      }
LABEL_20:
      if (!v33)
      {
        __break(1u);
        return;
      }
      uint64_t v29 = *(void **)v4;
      uint64_t v6 = *(void **)(v4 + 8);
      *(void *)uint64_t v4 = v6;
      *(void *)(v4 + 8) = v29;
      v4 -= 8;
      if (v5 == ++v7) {
        goto LABEL_5;
      }
    }
    uint64_t v19 = swift_bridgeObjectRelease_n();
LABEL_19:
    uint64_t v26 = (void *)MEMORY[0x263F8EED0];
    unsigned int v27 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v11) + 0x78))(v19);
    unsigned int v28 = (*(uint64_t (**)(void))((*v26 & *v12) + 0x78))();

    uint64_t v5 = v34;
    if (v27 >= v28) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
}

uint64_t sub_25BFA3F4C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    uint64_t result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (uint64_t result = sub_25BFF0920(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      uint64_t result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_25BFA401C(void **__src, void **a2, void **a3, void **__dst)
{
  uint64_t v4 = __dst;
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = (char *)a3 - (char *)a2;
  uint64_t v12 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0) {
    uint64_t v12 = (char *)a3 - (char *)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v80 = __src;
  uint64_t v79 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7) {
      goto LABEL_70;
    }
    if (__dst != a2 || &a2[v13] <= __dst) {
      memmove(__dst, a2, 8 * v13);
    }
    uint64_t v38 = &v4[v13];
    uint64_t v78 = v38;
    uint64_t v80 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_69:
      sub_25BFA4A34((void **)&v80, (const void **)&v79, &v78);
      return 1;
    }
    BOOL v39 = v6;
    BOOL v72 = v7;
    uint64_t v73 = v4;
    while (1)
    {
      int64_t v75 = v5;
      uint64_t v77 = v6;
      uint64_t v71 = v38;
      unint64_t v40 = *(v38 - 1);
      unint64_t v41 = *(v39 - 1);
      long long v68 = v39 - 1;
      uint64_t v70 = v38 - 1;
      uint64_t v42 = (void *)MEMORY[0x263F8EED0];
      uint64_t v43 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v40) + 0x60);
      unint64_t v44 = v40;
      uint64_t v45 = v41;
      char v67 = v43;
      uint64_t v46 = v43();
      uint64_t v48 = v47;
      char v49 = *(uint64_t (**)(void))((*v42 & *v45) + 0x60);
      if (v46 == v49() && v48 == v50) {
        break;
      }
      char v52 = sub_25BFF0920();
      swift_bridgeObjectRelease();
      uint64_t v53 = swift_bridgeObjectRelease();
      if (v52) {
        goto LABEL_56;
      }
      uint64_t v54 = ((uint64_t (*)(uint64_t))v67)(v53);
      uint64_t v56 = v55;
      if (v54 == v49() && v56 == v57)
      {

        swift_bridgeObjectRelease_n();
        uint64_t v61 = v73;
        uint64_t v60 = v75;
        uint64_t v5 = v75 - 1;
        uint64_t v38 = v71;
        unint64_t v62 = (unint64_t)v72;
LABEL_63:
        uint64_t v78 = v70;
        if (v60 < v38 || v5 >= v38 || v60 != v38) {
          *uint64_t v5 = *v70;
        }
        BOOL v39 = v77;
        uint64_t v38 = v70;
        if ((unint64_t)v77 <= v62) {
          goto LABEL_69;
        }
        goto LABEL_68;
      }
      char v59 = sub_25BFF0920();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v61 = v73;
      uint64_t v60 = v75;
      uint64_t v5 = v75 - 1;
      uint64_t v38 = v71;
      unint64_t v62 = (unint64_t)v72;
      if ((v59 & 1) == 0) {
        goto LABEL_63;
      }
LABEL_57:
      BOOL v39 = v68;
      if (v60 != v77 || v5 >= v77) {
        *uint64_t v5 = *v68;
      }
      uint64_t v80 = v68;
      if ((unint64_t)v68 <= v62) {
        goto LABEL_69;
      }
LABEL_68:
      uint64_t v6 = v39;
      if (v38 <= v61) {
        goto LABEL_69;
      }
    }
    uint64_t v53 = swift_bridgeObjectRelease_n();
LABEL_56:
    uint64_t v63 = (void *)MEMORY[0x263F8EED0];
    unsigned int v64 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v44) + 0x78))(v53);
    unsigned int v65 = (*(uint64_t (**)(void))((*v63 & *v45) + 0x78))();

    uint64_t v61 = v73;
    uint64_t v60 = v75;
    uint64_t v5 = v75 - 1;
    uint64_t v38 = v71;
    unint64_t v62 = (unint64_t)v72;
    if (v64 >= v65) {
      goto LABEL_63;
    }
    goto LABEL_57;
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v69 = &v4[v10];
    uint64_t v78 = v69;
    if (v6 < v5 && v8 >= 8)
    {
      uint64_t v74 = v5;
      while (1)
      {
        uint64_t v76 = v6;
        uint64_t v14 = *v4;
        uint64_t v15 = (void *)MEMORY[0x263F8EED0];
        uint64_t v16 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)*v6) + 0x60);
        uint64_t v17 = *v6;
        char v18 = v14;
        uint64_t v19 = v16();
        uint64_t v21 = v20;
        uint64_t v22 = *(uint64_t (**)(void))((*v15 & *v18) + 0x60);
        if (v19 == v22() && v21 == v23)
        {
          uint64_t v26 = swift_bridgeObjectRelease_n();
        }
        else
        {
          char v25 = sub_25BFF0920();
          swift_bridgeObjectRelease();
          uint64_t v26 = swift_bridgeObjectRelease();
          if ((v25 & 1) == 0)
          {
            uint64_t v27 = ((uint64_t (*)(uint64_t))v16)(v26);
            uint64_t v29 = v28;
            if (v27 == v22() && v29 == v30)
            {

              swift_bridgeObjectRelease_n();
            }
            else
            {
              char v32 = sub_25BFF0920();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v32) {
                goto LABEL_26;
              }
            }
            goto LABEL_31;
          }
        }
        uint64_t v33 = (void *)MEMORY[0x263F8EED0];
        unsigned int v34 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x263F8EED0] & *v17) + 0x78))(v26);
        unsigned int v35 = (*(uint64_t (**)(void))((*v33 & *v18) + 0x78))();

        if (v34 < v35)
        {
LABEL_26:
          uint64_t v36 = v74;
          uint64_t v37 = v76 + 1;
          if (v7 < v76 || v7 >= v37 || v7 != v76) {
            *uint64_t v7 = *v76;
          }
          goto LABEL_34;
        }
LABEL_31:
        uint64_t v36 = v74;
        if (v7 != v4) {
          *uint64_t v7 = *v4;
        }
        uint64_t v79 = ++v4;
        uint64_t v37 = v76;
LABEL_34:
        ++v7;
        if (v4 < v69)
        {
          uint64_t v6 = v37;
          if (v37 < v36) {
            continue;
          }
        }
        uint64_t v80 = v7;
        goto LABEL_69;
      }
    }
    goto LABEL_69;
  }
LABEL_70:
  uint64_t result = sub_25BFF0810();
  __break(1u);
  return result;
}

uint64_t sub_25BFA469C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      char v25 = v17;
      uint64_t v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        char v18 = (char *)(a3 - 16);
        uint64_t v19 = v6;
        while (1)
        {
          uint64_t v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (sub_25BFF0920() & 1) == 0)
          {
            char v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)char v18 = *((_OWORD *)v17 - 1);
            }
            uint64_t v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)char v18 = *(_OWORD *)v19;
            }
            uint64_t v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    char v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (sub_25BFF0920() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      uint64_t v27 = v7;
    }
LABEL_50:
    sub_25BFA4AF0((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = sub_25BFF0810();
  __break(1u);
  return result;
}

char *sub_25BFA4938(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A5848A8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_25BFA4A34(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)sub_25BFF0810();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_25BFA4AF0(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)sub_25BFF0810();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_25BFA4BAC(uint64_t a1)
{
  return sub_25BFA4938(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_25BFA4BC0(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_25BFF07D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_25BFF07D0();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x261179DD0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_25BFA5CD0(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_25BFF07D0();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x1std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v14;
  }
  swift_bridgeObjectRelease();

  return sub_25BFF04E0();
}

uint64_t sub_25BFA4D8C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_25BFA4DAC(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_25BFA4DAC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    BOOL v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584888);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A5847E0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  BOOL v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  uint64_t v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A5847E0) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  char v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = sub_25BFF0810();
  __break(1u);
  return result;
}

uint64_t sub_25BFA4FF4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584880);
  char v38 = a2;
  uint64_t v6 = sub_25BFF07F0();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unsigned int v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    sub_25BFF09C0();
    sub_25BFF0330();
    uint64_t result = sub_25BFF0A00();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    char v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_25BFA5304(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5842D8);
  uint64_t v6 = sub_25BFF07F0();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_25BF7FDA4(v24, v35);
      }
      else
      {
        sub_25BF884C4((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_25BFF09C0();
      sub_25BFF0330();
      uint64_t result = sub_25BFF0A00();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      void *v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_25BF7FDA4(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

void sub_25BFA5604(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_25BF7FCC4(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_25BFA5934();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_25BFA4FF4(v15, a4 & 1);
  unint64_t v20 = sub_25BF7FCC4(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    sub_25BFF0940();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  int64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;

  swift_bridgeObjectRetain();
}

_OWORD *sub_25BFA5774(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_25BF7FCC4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_25BFA5AE8();
      goto LABEL_7;
    }
    sub_25BFA5304(v15, a4 & 1);
    unint64_t v21 = sub_25BF7FCC4(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_25BFF0940();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
    return sub_25BF7FDA4(a1, v19);
  }
LABEL_13:
  sub_25BFA58C8(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_25BFA58C8(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_25BF7FDA4(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

id sub_25BFA5934()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A584880);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25BFF07E0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_25BFA5AE8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A5842D8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_25BFF07E0();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_25BF884C4(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_25BF7FDA4(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_25BFA5CD0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_25BFF07D0();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_25BFF07D0();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_25BFA73C8();
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_26A584890);
          unint64_t v12 = sub_25BF80B84(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SCMLPeopleDetectionAttribute();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_25BFF0810();
  __break(1u);
  return result;
}

void sub_25BFA5ED0()
{
}

uint64_t sub_25BFA5EE4(uint64_t a1)
{
  return sub_25BF86E9C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

BOOL _s26SensitiveContentAnalysisML28SCMLPeopleDetectionAttributeC1loiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *a1) + 0x60);
  uint64_t v6 = v5();
  uint64_t v8 = v7;
  uint64_t v9 = *(uint64_t (**)(void))((*v4 & *a2) + 0x60);
  if (v6 == v9() && v8 == v10)
  {
    uint64_t v13 = swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }
  char v12 = sub_25BFF0920();
  swift_bridgeObjectRelease();
  uint64_t v13 = swift_bridgeObjectRelease();
  if (v12)
  {
LABEL_12:
    unsigned int v21 = (*(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x78))(v13);
    return v21 < (*(unsigned int (**)(void))((*v4 & *a2) + 0x78))();
  }
  uint64_t v14 = ((uint64_t (*)(uint64_t))v5)(v13);
  uint64_t v16 = v15;
  if (v14 == v9() && v16 == v17)
  {
    swift_bridgeObjectRelease_n();
    return 0;
  }
  else
  {
    char v19 = sub_25BFF0920();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19 & 1;
  }
}

uint64_t type metadata accessor for SCMLPersonAttributes()
{
  return self;
}

BOOL sub_25BFA6108(void *a1, void *a2)
{
  if (!a1) {
    return a2 == 0;
  }
  if (!a2 || a1[2] != a2[2]) {
    return 0;
  }
  uint64_t v6 = a1;
  swift_bridgeObjectRetain();
  sub_25BFA27F4((uint64_t *)&v6);
  uint64_t v3 = v6;
  uint64_t v6 = a2;
  swift_bridgeObjectRetain();
  sub_25BFA27F4((uint64_t *)&v6);
  uint64_t v4 = sub_25BF9CDE8(v3, v6);
  swift_release();
  swift_release();
  return v4 & 1;
}

BOOL sub_25BFA61D8(unint64_t a1, unint64_t a2)
{
  if (!a1) {
    return a2 == 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_25BFF07D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_25BFF07D0();
    swift_bridgeObjectRelease();
    if (v6 == v11) {
      goto LABEL_7;
    }
    return 0;
  }
  if (v6 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return 0;
  }
LABEL_7:
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v4 = (uint64_t)sub_25BFA2860(a1);
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = v4;
  sub_25BFA2778(&v12);
  unint64_t v8 = v12;
  swift_bridgeObjectRetain();
  if (a2 >> 62)
  {
    uint64_t v7 = (uint64_t)sub_25BFA2860(a2);
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = v7;
  sub_25BFA2778(&v12);
  unsigned __int8 v9 = sub_25BF9CB10(v8, v12);
  swift_release();
  swift_release();
  return v9 & 1;
}

uint64_t sub_25BFA635C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A5847C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25BFA63C4(uint64_t a1)
{
  sub_25BF884C4(a1, (uint64_t)v13);
  if (swift_dynamicCast()) {
    return v11;
  }
  sub_25BF884C4(a1, (uint64_t)v13);
  if (swift_dynamicCast())
  {
    uint64_t v3 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0) {
      uint64_t v3 = v11 & 0xFFFFFFFFFFFFLL;
    }
    if (v3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A5843D0);
      uint64_t v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_25BFF5CF0;
      *(void *)(v4 + 32) = v11;
      *(void *)(v4 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v12;
      return 1;
    }
  }
  else
  {
    sub_25BF884C4(a1, (uint64_t)v13);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A5848A0);
    uint64_t result = swift_dynamicCast();
    if (!result) {
      return result;
    }
    uint64_t v5 = *(void *)(v11 + 16);
    if (v5)
    {
      uint64_t v6 = v11 + 32;
      uint64_t v7 = (void *)MEMORY[0x263F8EE78];
      do
      {
        sub_25BF884C4(v6, (uint64_t)v13);
        if (swift_dynamicCast())
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v7 = sub_25BF86590(0, v7[2] + 1, 1, v7);
          }
          unint64_t v10 = v7[2];
          unint64_t v9 = v7[3];
          if (v10 >= v9 >> 1) {
            uint64_t v7 = sub_25BF86590((void *)(v9 > 1), v10 + 1, 1, v7);
          }
          v7[2] = v10 + 1;
          unint64_t v8 = &v7[2 * v10];
          v8[4] = v11;
          v8[5] = v12;
        }
        v6 += 32;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for SCMLVisualGenerationHandlingResult()
{
  return self;
}

unint64_t sub_25BFA6604()
{
  unint64_t result = qword_26A584810;
  if (!qword_26A584810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584810);
  }
  return result;
}

uint64_t type metadata accessor for SCMLVisualGenerationHandling()
{
  uint64_t result = qword_26A587B50;
  if (!qword_26A587B50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25BFA66A4(uint64_t a1, uint64_t a2)
{
  return sub_25BFA7354(&qword_26A584838, a2, (void (*)(uint64_t))type metadata accessor for SCMLPeopleDetectionAttribute);
}

unint64_t sub_25BFA66F0()
{
  unint64_t result = qword_26A584840;
  if (!qword_26A584840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584840);
  }
  return result;
}

uint64_t method lookup function for SCMLPeopleDetectionAttribute(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SCMLPeopleDetectionAttribute);
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.term.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.term.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.term.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.gender.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.gender.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.gender.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.__allocating_init(term:gender:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t method lookup function for SCMLPersonAttributes(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SCMLPersonAttributes);
}

uint64_t dispatch thunk of SCMLPersonAttributes.specific.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.specific.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.specific.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.isGroup.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.isGroup.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.isGroup.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasAge.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasAge.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasAge.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasGender.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasGender.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasGender.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasEthnicity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasEthnicity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasEthnicity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.age.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.age.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.age.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.gender.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.gender.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.gender.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.ethnicity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.ethnicity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.ethnicity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasImplicitCategoryRequiringPersonalization.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasImplicitCategoryRequiringPersonalization.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasImplicitCategoryRequiringPersonalization.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.__allocating_init(specific:isGroup:hasAge:hasGender:hasEthnicity:age:gender:ethnicity:hasImplicitCategoryRequiringPersonalization:)()
{
  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t method lookup function for SCMLVisualGenerationHandlingResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SCMLVisualGenerationHandlingResult);
}

uint64_t dispatch thunk of SCMLVisualGenerationHandlingResult.people.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of SCMLVisualGenerationHandlingResult.people.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SCMLVisualGenerationHandlingResult.people.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SCMLVisualGenerationHandlingResult.__allocating_init(result:text:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unsigned char *storeEnumTagSinglePayload for SCMLVisualGenerationHandlingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25BFA7040);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SCMLVisualGenerationHandlingError()
{
  return &type metadata for SCMLVisualGenerationHandlingError;
}

uint64_t sub_25BFA7078()
{
  return type metadata accessor for SCMLVisualGenerationHandling();
}

uint64_t method lookup function for SCMLVisualGenerationHandling(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SCMLVisualGenerationHandling);
}

uint64_t dispatch thunk of SCMLVisualGenerationHandling.__allocating_init(onBehalfOf:modelManagerServicesUseCaseID:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SCMLVisualGenerationHandling.predict(text:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)((*MEMORY[0x263F8EED0] & *v2) + 0x98);
  unint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_25BF87C9C;
  return v9(a1, a2);
}

void type metadata accessor for SCMLPeopleDetectionGender()
{
  if (!qword_26A584850)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_26A584850);
    }
  }
}

uint64_t sub_25BFA7234()
{
  _Block_release(*(const void **)(v0 + 24));

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25BFA727C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  unsigned int v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_25BF8269C;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_26A584858 + dword_26A584858);
  return v6(v2, v3, v4);
}

uint64_t sub_25BFA7338@<X0>(uint64_t a1@<X8>)
{
  return sub_25BFA14D8(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_25BFA7354(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25BFA739C()
{
  return sub_25BFA1820(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_25BFA73C8()
{
  unint64_t result = qword_26A584898;
  if (!qword_26A584898)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A584890);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A584898);
  }
  return result;
}

void *Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270973370;
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x26117ABA0](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sentencepiece::ModelInterface::ModelInterface(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  *(void *)a1 = &unk_270972520;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &unk_270973370;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (uint64_t *)(a1 + 96);
  *(void *)(a1 + 56) = &unk_270973370;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sentencepiece::util::Status::Status((void *)(a1 + 96));
  sentencepiece::ModelInterface::InitFromMMappedFile(a1, a3, a4, (sentencepiece::util::Status *)&v9);
  sentencepiece::util::Status::operator=(v7, &v9);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v9);
  return a1;
}

void sub_25BFA7588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  sentencepiece::util::Status::~Status(v5);
  Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(v4);
  Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(v3);
  uint64_t v7 = *v2;
  void *v2 = 0;
  if (v7) {
    std::default_delete<sentencepiece::normalizer::PrefixMatcher>::operator()[abi:ne180100]((uint64_t)v2, v7);
  }
  _Unwind_Resume(a1);
}

void *sentencepiece::ModelInterface::InitFromMMappedFile@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  uint64_t v8 = a2;
  unint64_t v9 = a3;
  unint64_t result = sentencepiece::mmap_util::DecodePrefix<int>(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*(void *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    unint64_t result = sentencepiece::mmap_util::RemovePrefix(&v8, 4uLL, a4);
    if (!*(void *)a4)
    {
      sentencepiece::util::Status::~Status(a4);
      unint64_t result = sentencepiece::mmap_util::DecodePrefix<int>(v8, v9, (_DWORD *)(a1 + 92), a4);
      if (!*(void *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        unint64_t result = sentencepiece::mmap_util::RemovePrefix(&v8, 4uLL, a4);
        if (!*(void *)a4)
        {
          sentencepiece::util::Status::~Status(a4);
          int v7 = 0;
          unint64_t result = sentencepiece::mmap_util::DecodePrefix<unsigned int>(v8, v9, &v7, a4);
          if (!*(void *)a4)
          {
            sentencepiece::util::Status::~Status(a4);
            unint64_t result = sentencepiece::mmap_util::RemovePrefix(&v8, 4uLL, a4);
            if (!*(void *)a4)
            {
              sentencepiece::util::Status::~Status(a4);
              absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::string_view>();
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_25BFA7C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

void *sentencepiece::mmap_util::DecodePrefix<int>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    uint64_t v6 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v8[1] = MEMORY[0x263F8C318] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x26117AB30](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_25BFA7E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sentencepiece::mmap_util::DecodePrefix<unsigned int>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    uint64_t v6 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v8[1] = MEMORY[0x263F8C318] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x26117AB30](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_25BFA8060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::string_view>()
{
}

void sub_25BFA80CC(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0) {
    unsigned int v4 = __p;
  }
  else {
    unsigned int v4 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    unint64_t v5 = v7;
  }
  else {
    unint64_t v5 = (unint64_t)__p[1];
  }
  sentencepiece::util::Status::Status(a2, v3, v4, v5);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_25BFA8164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::util::StatusBuilder::~StatusBuilder(sentencepiece::util::StatusBuilder *this)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *((void *)this + 1) = *MEMORY[0x263F8C2C8];
  *(void *)((char *)this + *(void *)(v3 - 24) + 8) = *(void *)(v2 + 24);
  *((void *)this + 2) = MEMORY[0x263F8C318] + 16;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x26117AB30]((char *)this + 120);
}

void *sentencepiece::ModelInterface::model_proto(sentencepiece::ModelInterface *this)
{
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (!v1
  {
    char v7 = 1;
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    unsigned int v4 = (void *)std::ostream::operator<<();
    unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") [", 3);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"] ", 2);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v7);
    return 0;
  }
  return result;
}

void sub_25BFA836C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sentencepiece::ModelInterface::~ModelInterface(sentencepiece::ModelInterface *this)
{
  *(void *)this = &unk_270972520;
  sentencepiece::util::Status::~Status((sentencepiece::ModelInterface *)((char *)this + 96));
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 7) = &unk_270973370;
  uint64_t v2 = *((void *)this + 10);
  if (v2)
  {
    MEMORY[0x26117ABA0](v2, 0x1000C8052888210);
    *((void *)this + 1std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0;
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = &unk_270973370;
  uint64_t v3 = *((void *)this + 6);
  if (v3)
  {
    MEMORY[0x26117ABA0](v3, 0x1000C8052888210);
    *((void *)this + 6) = 0;
  }
  unsigned int v4 = (uint64_t *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    std::default_delete<sentencepiece::normalizer::PrefixMatcher>::operator()[abi:ne180100]((uint64_t)this + 16, v4);
  }
}

const char *sentencepiece::ModelInterface::unk_piece(sentencepiece::ModelInterface *this)
{
  (*(void (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  }
  else {
    return "<unk>";
  }
}

const char *sentencepiece::ModelInterface::bos_piece(sentencepiece::ModelInterface *this)
{
  (*(void (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  }
  else {
    return "<s>";
  }
}

const char *sentencepiece::ModelInterface::eos_piece(sentencepiece::ModelInterface *this)
{
  (*(void (**)(void))(**((void **)this + 1) + 48))(*((void *)this + 1));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**((void **)this + 1) + 48))(*((void *)this + 1));
  }
  else {
    return "</s>";
  }
}

const char *sentencepiece::ModelInterface::pad_piece(sentencepiece::ModelInterface *this)
{
  (*(void (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
  }
  else {
    return "<pad>";
  }
}

uint64_t sentencepiece::ModelInterface::PieceToId(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  unsigned int v7 = 0;
  Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(a1 + 56, a2, (int *)&v7, a3, 0);
  uint64_t result = v7;
  if (v7 == -1)
  {
    Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(a1 + 24, a2, (int *)&v7, a3, 0);
    uint64_t result = v7;
    if (v7 == -1) {
      return *(unsigned int *)(a1 + 88);
    }
  }
  return result;
}

uint64_t Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(uint64_t result, unsigned char *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 16);
  unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      int v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7) {
        break;
      }
      if (!--a4) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v8 = *a2;
    if (*a2)
    {
      char v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8) {
          break;
        }
        int v10 = *v9++;
        int v8 = v10;
        if (!v10) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        int v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  int v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sentencepiece::ModelInterface::LookupPredictive@<X0>(sentencepiece::logging *a1@<X0>, uint64_t a2@<X8>)
{
  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    char v10 = 0;
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    unsigned int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v10);
  }
  return sentencepiece::util::Status::Status(a2, 12, "Not implemented.", 16);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v10;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    char v10 = 0;
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    unsigned int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v10);
  }
  return sentencepiece::util::Status::Status(a2, 12, "Not implemented.", 16);
}

void sub_25BFA8884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_25BFA8970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sentencepiece::ModelInterface::InitializePieces(sentencepiece::ModelInterface *this)
{
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = &v51;
  uint64_t v47 = &v48;
  uint64_t v48 = 0;
  *((_DWORD *)this + 22) = -1;
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v45 = (uint64_t *)v46;
  LOBYTE(v53) = 0;
  std::vector<BOOL>::vector(&__p, 0x100uLL, (unsigned __int8 *)&v53);
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*((_DWORD *)this + 22) == -1)
    {
      sentencepiece::util::Status::Status(&v53, 13, "unk is not defined.", 19);
      sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v53);
    }
    else
    {
      uint64_t v25 = *(unsigned char **)(v3 + 80);
      if (!v25) {
        uint64_t v25 = &sentencepiece::_TrainerSpec_default_instance_;
      }
      if (!v25[248]
        || (*(void *)&long long v53 = __p,
            DWORD2(v53) = 0,
            std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>((uint64_t)&v53, v44, (uint64_t)&v41),
            v41.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v44 >> 6))
        && LODWORD(v41.__r_.__value_.__r.__words[1]) == (v44 & 0x3F))
      {
        if (!v52
          || (sentencepiece::BuildTrie((uint64_t)this + 24, &v50, (uint64_t)&v53),
              sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v53),
              sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v53),
              (*(void (**)(long long *__return_ptr, sentencepiece::ModelInterface *))(*(void *)this + 16))(&v53, this), uint64_t v26 = v53, sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v53), !v26))
        {
          if (!v49
            || (sentencepiece::BuildTrie((uint64_t)this + 56, &v47, (uint64_t)&v53),
                sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v53),
                sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v53),
                (*(void (**)(long long *__return_ptr, sentencepiece::ModelInterface *))(*(void *)this + 16))(&v53, this), uint64_t v27 = v53, sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v53), !v27))
          {
            absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::set<std::string_view> &>();
          }
        }
        goto LABEL_69;
      }
      sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v53);
    }
LABEL_68:
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v53);
    goto LABEL_69;
  }
  int v4 = 0;
  while (1)
  {
    uint64_t v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(v3 + 56, v4);
    uint64_t v6 = v5;
    unint64_t v7 = *(void *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(void *)(v7 + 8))
      {
LABEL_50:
        sentencepiece::util::Status::Status(&v53, 13, "piece must not be empty.", 24);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v53);
        goto LABEL_68;
      }
    }
    else if (!*(unsigned char *)(v7 + 23))
    {
      goto LABEL_50;
    }
    unsigned int v9 = *(_DWORD *)(v5 + 60);
    BOOL v10 = v9 > 5;
    int v11 = (1 << v9) & 0x32;
    BOOL v12 = v10 || v11 == 0;
    uint64_t v13 = (uint64_t **)(v12 ? &v47 : &v50);
    if ((v8 & 0x80) != 0)
    {
      unint64_t v14 = *(void *)v7;
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else
    {
      unint64_t v14 = v7;
    }
    *(void *)&long long v53 = v14;
    *((void *)&v53 + 1) = v8;
    LODWORD(v54) = v4;
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(v13, (uint64_t)&v53, (uint64_t)&v53);
    if ((v15 & 1) == 0) {
      break;
    }
    int v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      unint64_t v17 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        unint64_t v19 = *(void *)v17;
        uint64_t v18 = *(void *)(v17 + 8);
      }
      else
      {
        uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
        unint64_t v19 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(void *)&long long v53 = v19;
      *((void *)&v53 + 1) = v18;
      std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view>(&v45, (uint64_t)&v53, &v53);
      int v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      uint64_t v20 = *(unsigned char **)(v3 + 80);
      if (!v20) {
        uint64_t v20 = &sentencepiece::_TrainerSpec_default_instance_;
      }
      if (!v20[248])
      {
        std::operator+<char>();
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        int64_t v54 = v35->__r_.__value_.__r.__words[2];
        long long v53 = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0) {
          uint64_t v37 = (const char *)&v53;
        }
        else {
          uint64_t v37 = (const char *)v53;
        }
LABEL_78:
        size_t v40 = strlen(v37);
        sentencepiece::util::Status::Status(&v42, 13, v37, v40);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v42);
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
        if (SHIBYTE(v54) < 0) {
          operator delete((void *)v53);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v34 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      unint64_t v21 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        unint64_t v23 = *(void **)v21;
        size_t v22 = *(void *)(v21 + 8);
      }
      else
      {
        size_t v22 = *(unsigned __int8 *)(v21 + 23);
        unint64_t v23 = (void *)(*(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      unsigned int v24 = sentencepiece::PieceToByte(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        char v38 = std::string::append(&v41, " is invalid.");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        int64_t v54 = v38->__r_.__value_.__r.__words[2];
        long long v53 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0) {
          uint64_t v37 = (const char *)&v53;
        }
        else {
          uint64_t v37 = (const char *)v53;
        }
        goto LABEL_78;
      }
      *(void *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*((_DWORD *)this + 22) & 0x80000000) == 0)
      {
        sentencepiece::util::Status::Status(&v53, 13, "unk is already defined.", 23);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v53);
        goto LABEL_68;
      }
      *((_DWORD *)this + 22) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64)) {
      goto LABEL_38;
    }
  }
  unint64_t v28 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v28 + 23) >= 0) {
    size_t v29 = *(unsigned __int8 *)(v28 + 23);
  }
  else {
    size_t v29 = *(void *)(v28 + 8);
  }
  BOOL v30 = &v53;
  std::string::basic_string[abi:ne180100]((uint64_t)&v53, v29 + 20);
  if (v54 < 0) {
    BOOL v30 = (long long *)v53;
  }
  if (v29)
  {
    if (*(char *)(v28 + 23) >= 0) {
      uint64_t v31 = (const void *)v28;
    }
    else {
      uint64_t v31 = *(const void **)v28;
    }
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, " is already defined.");
  if (v54 >= 0) {
    uint64_t v32 = (const char *)&v53;
  }
  else {
    uint64_t v32 = (const char *)v53;
  }
  size_t v33 = strlen(v32);
  sentencepiece::util::Status::Status(&v41, 13, v32, v33);
  sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v41);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v41);
  if (SHIBYTE(v54) < 0)
  {
    uint64_t v34 = (void *)v53;
LABEL_82:
    operator delete(v34);
  }
LABEL_69:
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v45, v46[0]);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v47, v48);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v50, v51);
}

void sub_25BFA8FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,char a22,void *a23,uint64_t a24,char a25,void *a26)
{
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a15);
  if (*(char *)(v26 - 89) < 0) {
    operator delete(*(void **)(v26 - 112));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a19, a20);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a22, a23);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::PieceToByte(void *__src, size_t __len)
{
  {
    sentencepiece::PieceToByte(std::string_view)::$_0::operator()();
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v4 = (void *)sentencepiece::PieceToByte(std::string_view)::kMap;
  if (__len >= 0x17)
  {
    size_t v6 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v6 = __len | 7;
    }
    size_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = (void *)__len;
    unint64_t v12 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_9;
  }
  HIBYTE(v12) = __len;
  uint64_t v5 = __dst;
  if (__len) {
LABEL_9:
  }
    memmove(v5, __src, __len);
  *((unsigned char *)v5 + __len) = 0;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v4, (unsigned __int8 *)__dst);
  unsigned int v9 = v8;
  if (SHIBYTE(v12) < 0)
  {
    operator delete(__dst[0]);
    if (v9) {
      return v9[40];
    }
  }
  else if (v8)
  {
    return v9[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_25BFA9224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sentencepiece::BuildTrie@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[2])
  {
    uint64_t v34 = 0;
    unsigned int v35 = 0;
    long long v36 = 0;
    std::string __p = 0;
    uint64_t v32 = 0;
    size_t v33 = 0;
    int v4 = a2 + 1;
    uint64_t v3 = (void *)*a2;
    while (1)
    {
      uint64_t v5 = v3[4];
      size_t v6 = v35;
      if (v35 >= v36)
      {
        uint64_t v8 = (v35 - (unsigned char *)v34) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v9 = (v36 - (unsigned char *)v34) >> 2;
        if (v9 <= v8 + 1) {
          unint64_t v9 = v8 + 1;
        }
        if ((unint64_t)(v36 - (unsigned char *)v34) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v36, v10);
        }
        else {
          int v11 = 0;
        }
        unint64_t v12 = &v11[8 * v8];
        *(void *)unint64_t v12 = v5;
        size_t v7 = v12 + 8;
        unint64_t v14 = (char *)v34;
        uint64_t v13 = v35;
        if (v35 != v34)
        {
          do
          {
            uint64_t v15 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          uint64_t v13 = (char *)v34;
        }
        uint64_t v34 = v12;
        unsigned int v35 = v7;
        long long v36 = &v11[8 * v10];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)unsigned int v35 = v5;
        size_t v7 = v6 + 8;
      }
      unsigned int v35 = v7;
      int v16 = v32;
      if (v32 >= v33)
      {
        uint64_t v18 = __p;
        uint64_t v19 = (v32 - __p) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v33 - __p;
        if ((v33 - __p) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v33, v22);
          uint64_t v18 = __p;
          int v16 = v32;
        }
        else
        {
          unint64_t v23 = 0;
        }
        unsigned int v24 = &v23[4 * v19];
        *(_DWORD *)unsigned int v24 = *((_DWORD *)v3 + 12);
        unint64_t v17 = v24 + 4;
        while (v16 != v18)
        {
          int v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        std::string __p = v24;
        size_t v33 = &v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v32 = *((_DWORD *)v3 + 12);
        unint64_t v17 = v32 + 4;
      }
      uint64_t v32 = v17;
      uint64_t v26 = (void *)v3[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v3[2];
          BOOL v28 = *v27 == (void)v3;
          uint64_t v3 = v27;
        }
        while (!v28);
      }
      uint64_t v3 = v27;
      if (v27 == v4) {
        Darts::DoubleArrayImpl<void,void,int,void>::build(a1, (v35 - (unsigned char *)v34) >> 3, (unint64_t)v34, 0, (unint64_t)__p, 0);
      }
    }
  }

  return sentencepiece::util::Status::Status(a3, 13, "no pieces are loaded.", 21);
}

void sub_25BFA96E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::set<std::string_view> &>()
{
}

void sub_25BFA978C(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::MemoryMappableString(sentencepiece::ModelInterface *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v4 = &v32;
  }
  else {
    int v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  LODWORD(v4->__r_.__value_.__l.__data_) = *((_DWORD *)this + 22);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v32;
  }
  else {
    uint64_t v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v7 = &v32;
  }
  else {
    size_t v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  LODWORD(v7->__r_.__value_.__l.__data_) = *((_DWORD *)this + 23);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v32;
  }
  else {
    uint64_t v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  sentencepiece::normalizer::PrefixMatcher::MemoryMappableString(*((sentencepiece::normalizer::PrefixMatcher **)this + 2), &v32);
  int v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  int v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0) {
    int v12 = v10;
  }
  else {
    int v12 = v11;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = &__p;
  }
  else {
    unint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v16 = &v32;
  }
  else {
    int v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sentencepiece::mmap_util::Padding(a2);
  uint64_t v19 = *((void *)this + 4);
  uint64_t v18 = (const std::string::value_type *)*((void *)this + 5);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  std::string::size_type v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &__p;
  }
  else {
    uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v22 = &__p;
  }
  else {
    unint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v18, v20);
  sentencepiece::mmap_util::Padding(a2);
  uint64_t v26 = (char *)this + 64;
  uint64_t v24 = *((void *)this + 8);
  int v25 = (const std::string::value_type *)*((void *)v26 + 1);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  std::string::size_type v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v28 = &__p;
  }
  else {
    BOOL v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v29 = &__p;
  }
  else {
    size_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_25BFA9A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SplitIntoWords(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  size_t v6 = __s1;
  uint64_t v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1) {
      return;
    }
    size_t v40 = 0;
    int v41 = 0;
    uint64_t v42 = a5 + 2;
    uint64_t v43 = __s1;
    while (1)
    {
      int v44 = asc_25C005013[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44) {
        int v44 = v8 - v43;
      }
      uint64_t v45 = v44;
      if (v44 == 3)
      {
        int v46 = memcmp(v43, "▁", 3uLL);
        int v47 = v46 == 0;
        if (v43 == v6) {
          goto LABEL_62;
        }
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          int v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            uint64_t v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60) {
              std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v49 = *v42 - (void)*a5;
            uint64_t v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1)) {
              uint64_t v50 = v48 + 1;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v50;
            }
            uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a5 + 2), v51);
            int64_t v54 = (unsigned __int8 **)&v52[16 * v48];
            char *v54 = v43;
            v54[1] = 0;
            uint64_t v56 = (char *)*a5;
            uint64_t v55 = (char *)a5[1];
            uint64_t v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              uint64_t v55 = (char *)*a5;
            }
            size_t v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *size_t v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if (v41)
        {
          int v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        int v47 = 0;
        goto LABEL_62;
      }
      int v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      int v41 = v47;
      if (v43 >= v8) {
        return;
      }
    }
  }
  if (a2 >= 1)
  {
    std::string::size_type v9 = a5 + 2;
    int v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a5 + 2), 1uLL);
    int v12 = (unsigned __int8 **)&v10[2 * v11];
    *int v10 = v6;
    v10[1] = 0;
    uint64_t v13 = (unsigned __int8 **)(v10 + 2);
    std::string::size_type v15 = (char *)*a5;
    unint64_t v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      unint64_t v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14) {
      operator delete(v14);
    }
    BOOL v16 = 0;
    a5[1] = v13;
    do
    {
      int v17 = asc_25C005013[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17) {
        int v17 = v8 - v6;
      }
      uint64_t v18 = v17;
      if (v17 == 3)
      {
        BOOL v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19) {
          goto LABEL_18;
        }
      }
      else
      {
        BOOL v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          uint64_t v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60) {
            std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v21 = *v9 - (void)*a5;
          uint64_t v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1)) {
            uint64_t v22 = v20 + 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a5 + 2), v23);
          uint64_t v26 = (unsigned __int8 **)&v24[16 * v20];
          *uint64_t v26 = v6;
          v26[1] = 0;
          BOOL v28 = (char *)*a5;
          std::string::size_type v27 = (char *)a5[1];
          size_t v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            std::string::size_type v27 = (char *)*a5;
          }
          uint64_t v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          char *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        BOOL v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      BOOL v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          uint64_t v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60) {
            std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v31 = *v9 - (void)*a5;
          uint64_t v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1)) {
            uint64_t v32 = v30 + 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a5 + 2), v33);
          long long v36 = (unsigned __int8 **)&v34[16 * v30];
          *long long v36 = v6;
          v36[1] = 0;
          char v38 = (char *)*a5;
          uint64_t v37 = (char *)a5[1];
          long long v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            uint64_t v37 = (char *)*a5;
          }
          uint64_t v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          char *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_25BFA9F38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::ByteToPiece@<X0>(sentencepiece *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = this;
  return absl::StrFormat<unsigned char>("<0x%02X>", &v3, a2);
}

uint64_t absl::StrFormat<unsigned char>@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = snprintf(0, 0, __format, *a2);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (char *)a3;
  }
  else {
    uint64_t v8 = *(char **)a3;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_25BFAA030(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::PieceToByte(std::string_view)::$_0::operator()()
{
}

void sub_25BFAA118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Darts::DoubleArrayImpl<void,void,int,void>::build(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  v12[0] = a2;
  v12[1] = a3;
  void v12[2] = a4;
  uint64_t v12[3] = a5;
  int v6 = a6;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  int v11 = 0;
  Darts::Details::DoubleArrayBuilder::build<int>(&v6, v12);
}

void sub_25BFAA248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sentencepiece::ModelInterface::status@<X0>(sentencepiece::ModelInterface *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::ModelInterface *)((char *)this + 96));
}

uint64_t sentencepiece::ModelInterface::prefix_matcher(sentencepiece::ModelInterface *this)
{
  return *((void *)this + 2);
}

void sentencepiece::ModelInterface::NBestEncode(sentencepiece::logging *a1@<X0>, void *a2@<X8>)
{
  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    char v9 = 0;
    unsigned __int8 v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_25BFAA33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sentencepiece::ModelInterface::SampleEncode(sentencepiece::logging *a1@<X0>, void *a2@<X8>)
{
  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    char v9 = 0;
    unsigned __int8 v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_25BFAA418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sentencepiece::ModelInterface::SampleEncodeAndScore(sentencepiece::logging *a1@<X0>, void *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    LOBYTE(__p) = 0;
    unsigned __int8 v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__p);
  }
  std::string __p = 0;
  int v11 = 0;
  int v13 = 0;
  uint64_t v12 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  char v9 = (char *)operator new(0x20uLL);
  *a2 = v9;
  a2[1] = v9;
  a2[2] = v9 + 32;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v14, (uint64_t)v9);
  if (__p)
  {
    int v11 = __p;
    operator delete(__p);
  }
}

void sub_25BFAA578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v15 = v14;
  *(void *)(v13 + 8) = v15;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sentencepiece::ModelInterface::CalculateEntropy(sentencepiece::logging *a1)
{
  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    char v8 = 0;
    uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"(", 1);
    uint64_t v2 = (void *)std::ostream::operator<<();
    unsigned __int8 v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") ", 2);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"LOG(", 4);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"ERROR", 5);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v8);
  }
  return 0.0;
}

void sub_25BFAA67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sentencepiece::ModelInterface::IsSampleEncodeAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsNBestEncodeAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsSampleEncodeAndScoreAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsCalculateEntropyAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IdToPiece(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 88))();
}

uint64_t sentencepiece::ModelInterface::GetPieceSize(sentencepiece::ModelInterface *this)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sentencepiece::ModelInterface::GetScore(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 96))();
}

uint64_t sentencepiece::ModelInterface::IsUnknown(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 112))();
}

uint64_t sentencepiece::ModelInterface::IsControl(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 120))();
}

uint64_t sentencepiece::ModelInterface::IsUnused(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 128))();
}

uint64_t sentencepiece::ModelInterface::IsUserDefined(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 136))();
}

uint64_t sentencepiece::ModelInterface::IsByte(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 144))();
}

uint64_t sentencepiece::ModelInterface::ByteFallbackEnabled(sentencepiece::ModelInterface *this)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

BOOL sentencepiece::ModelInterface::VerifyOutputsEquivalent(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

void sentencepiece::error::Die::~Die(sentencepiece::error::Die *this)
{
  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x263F8C0F8] + *(void *)(*MEMORY[0x263F8C0F8] - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  unsigned __int8 v3 = (sentencepiece::error *)std::ostream::flush();
  if (*(unsigned char *)this) {
    sentencepiece::error::Abort(v3);
  }
}

void sub_25BFAA924(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    std::locale v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_25BFAAA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  char v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  int v17 = (void *)(a1 + 16);
  unint64_t i = operator new(0x30uLL);
  *(void *)unint64_t i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((unsigned char *)i + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  std::string::size_type v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)unint64_t i = *v27;
LABEL_38:
    *std::string::size_type v27 = i;
    goto LABEL_39;
  }
  *(void *)unint64_t i = *v17;
  *int v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    std::string::size_type v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_25BFAAC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)v4, *(long long **)v6, *(long long **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_25BFAAD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_25BFAADD8(_Unwind_Exception *exception_object)
{
  unsigned __int8 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      uint64_t v5 = *(void **)(v3 - 32);
      v3 -= 32;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 24) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 32);
      v4 -= 32;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 24) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270973370;
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x26117ABA0](v2, 0x1000C8052888210);
    a1[3] = 0;
  }

  JUMPOUT(0x26117ABD0);
}

void std::default_delete<sentencepiece::normalizer::PrefixMatcher>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    JUMPOUT(0x26117ABD0);
  }
}

void std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    uint64_t v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    std::__tree<std::string>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        long long v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::string_view>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        uint64_t v4 = (void *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string_view>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    long long v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<std::string_view>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(const void **)a2;
  size_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(const void **)a3;
  size_t v6 = *(void *)(a3 + 8);
  if (v6 >= v4) {
    size_t v7 = v4;
  }
  else {
    size_t v7 = *(void *)(a3 + 8);
  }
  int v8 = memcmp(v3, v5, v7);
  if (v4 < v6) {
    unsigned int v9 = -1;
  }
  else {
    unsigned int v9 = 1;
  }
  if (v4 == v6) {
    unsigned int v9 = 0;
  }
  if (v8) {
    unsigned int v9 = v8;
  }
  return v9 >> 31;
}

uint64_t *std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view>(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  size_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    size_t v7 = (uint64_t **)v5;
    size_t v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::string>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  size_t v4 = *(void **)result;
  if (!v3) {
    goto LABEL_9;
  }
  unint64_t v5 = (64 - v3);
  if (v5 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = (64 - v3);
  }
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    unint64_t v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(void *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(void *)uint64_t result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (unint64_t v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(void *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(void *)uint64_t result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F) {
          goto LABEL_12;
        }
      }
      unint64_t v8 = ~*v4;
    }
    unint64_t v7 = __rbit64(v8);
    goto LABEL_22;
  }
  uint64_t v9 = v3 + a2 - 63;
  if (v9 < 0) {
    uint64_t v9 = v3 + a2;
  }
  uint64_t v10 = v9 >> 6;
  unint64_t v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0) {
    unint64_t v11 = v10;
  }
  *(void *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void Darts::Details::DoubleArrayBuilder::build<int>(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  if (a2[3])
  {
    uint64_t v3 = 0;
    memset(v2, 0, sizeof(v2));
    Darts::Details::DoubleArrayBuilder::build_dawg<int>(a1, a2, (Darts::Details::DawgBuilder *)v2);
  }

  Darts::Details::DoubleArrayBuilder::build_from_keyset<int>((uint64_t)a1, a2);
}

void sub_25BFAB450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *Darts::Details::AutoPool<unsigned char>::~AutoPool(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x26117ABA0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<unsigned char>::clear(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned char>::resize((uint64_t)a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x26117ABA0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t Darts::Details::AutoPool<unsigned char>::resize(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 > a2)
  {
    *(void *)(result + 8) = a2;
    unint64_t v2 = a2;
  }
  if (*(void *)(result + 16) < a2) {
    Darts::Details::AutoPool<unsigned char>::resize_buf(result, a2);
  }
  if (v2 < a2) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

void Darts::Details::AutoPool<unsigned char>::resize_buf(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void Darts::Details::Exception::~Exception(std::exception *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x26117ABD0);
}

const char *Darts::Details::Exception::what(Darts::Details::Exception *this)
{
  if (*((void *)this + 1)) {
    return (const char *)*((void *)this + 1);
  }
  else {
    return "";
  }
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::~AutoPool(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x26117ABA0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x26117ABA0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    unint64_t v4 = a2;
  }
  if (a1[2] < a2) {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf((uint64_t)a1, a2);
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

void Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void Darts::Details::DoubleArrayBuilder::build_dawg<int>(void (**a1)(unint64_t, uint64_t), unint64_t *a2, Darts::Details::DawgBuilder *this)
{
  Darts::Details::DawgBuilder::init(this);
  if (*a2)
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = a2[2];
      unint64_t v8 = *(const char **)(a2[1] + 8 * v6);
      if (v7)
      {
        unint64_t v9 = *(void *)(v7 + 8 * v6);
      }
      else
      {
        while (v8[v7++])
          ;
        unint64_t v9 = v7 - 1;
      }
      unint64_t v11 = a2[3];
      if (v11) {
        int v12 = *(_DWORD *)(v11 + 4 * v6);
      }
      else {
        int v12 = v6;
      }
      Darts::Details::DawgBuilder::insert(this, v8, v9, v12);
      ++v6;
      if (*a1) {
        (*a1)(v6, *a2 + 1);
      }
    }
    while (v6 < *a2);
  }
  Darts::Details::DawgBuilder::flush((uint64_t)this, 0);
  unint64_t v13 = *(int **)this;
  char v14 = *(unsigned char *)(*(void *)this + 8);
  int v15 = **(_DWORD **)this;
  if (v14) {
    int v16 = (2 * *((unsigned __int8 *)v13 + 9)) | (4 * v15);
  }
  else {
    int v16 = 2 * v15;
  }
  **((_DWORD **)this + 3) = v16 | *((unsigned __int8 *)v13 + 10);
  **((unsigned char **)this + 6) = v14;
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)this);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 15);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 21);

  Darts::Details::BitVector::build((Darts::Details::DawgBuilder *)((char *)this + 72));
}

void Darts::Details::DoubleArrayBuilder::build_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2)
{
  unint64_t v2 = *((void *)a2 + 4);
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    v3 *= 2;
  }
  while (v4 < v2);
  if (*((void *)this + 3) < v4) {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf((uint64_t)this + 8, v4);
  }
  operator new[]();
}

void Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    v3 *= 2;
  }
  while (v4 < v2);
  if (*(void *)(a1 + 24) < v4) {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf(a1 + 8, v4);
  }
  operator new[]();
}

uint64_t *Darts::Details::AutoStack<unsigned int>::~AutoStack(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned int>::clear(a1);

  return Darts::Details::AutoPool<unsigned int>::~AutoPool(a1);
}

uint64_t Darts::Details::AutoPool<unsigned int>::clear(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned int>::resize((uint64_t)a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x26117ABA0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t Darts::Details::AutoPool<unsigned int>::resize(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 > a2)
  {
    *(void *)(result + 8) = a2;
    unint64_t v2 = a2;
  }
  if (*(void *)(result + 16) < a2) {
    Darts::Details::AutoPool<unsigned int>::resize_buf(result, a2);
  }
  if (v2 < a2) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

void Darts::Details::AutoPool<unsigned int>::resize_buf(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

uint64_t *Darts::Details::AutoPool<unsigned int>::~AutoPool(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x26117ABA0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

void Darts::Details::BitVector::~BitVector(Darts::Details::BitVector *this)
{
  Darts::Details::BitVector::clear(this);
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    MEMORY[0x26117ABA0](v2, 0x1000C8052888210);
    *((void *)this + 3) = 0;
  }

  Darts::Details::AutoPool<unsigned int>::~AutoPool((uint64_t *)this);
}

uint64_t Darts::Details::BitVector::clear(Darts::Details::BitVector *this)
{
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this);
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    uint64_t result = MEMORY[0x26117ABA0](result, 0x1000C8052888210);
    *((void *)this + 3) = 0;
  }
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgUnit>::~AutoPool(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x26117ABA0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x26117ABA0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    unint64_t v4 = a2;
  }
  if (a1[2] < a2) {
    Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf((uint64_t)a1, a2);
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

void Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::~AutoPool(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x26117ABA0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgNode>::clear(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DawgNode>::resize(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x26117ABA0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void *Darts::Details::AutoPool<Darts::Details::DawgNode>::resize(void *result, unint64_t a2)
{
  unint64_t v2 = result[1];
  if (v2 > a2)
  {
    result[1] = a2;
    unint64_t v2 = a2;
  }
  if (result[2] < a2) {
    Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf((uint64_t)result, a2);
  }
  for (; v2 < a2; unint64_t v2 = result[1])
  {
    result[1] = v2 + 1;
    uint64_t v3 = *result + 12 * v2;
    *(_DWORD *)(v3 + 7) = 0;
    *(void *)uint64_t v3 = 0;
  }
  return result;
}

void Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void *Darts::Details::DawgBuilder::init(Darts::Details::DawgBuilder *this)
{
  int v7 = 0;
  Darts::Details::AutoPool<unsigned int>::resize((uint64_t *)this + 15, 0x400uLL, &v7);
  uint64_t v2 = *((void *)this + 22);
  if (v2)
  {
    uint64_t v3 = *(void *)this + 12 * *(unsigned int *)(*((void *)this + 21) + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(void *)uint64_t v3 = 0;
    --*((void *)this + 22);
  }
  else
  {
    Darts::Details::AutoPool<Darts::Details::DawgNode>::append(this);
  }
  Darts::Details::BitVector::append((void *)this + 9);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::append((void *)this + 3);
  uint64_t v4 = *((void *)this + 7);
  if (v4 == *((void *)this + 8)) {
    Darts::Details::AutoPool<unsigned char>::resize_buf((uint64_t)this + 48, v4 + 1);
  }
  *((void *)this + 7) = v4 + 1;
  *((void *)this + 24) = 1;
  *(unsigned char *)(*(void *)this + 8) = -1;
  int v6 = 0;
  return Darts::Details::AutoPool<unsigned int>::append((void *)this + 18, &v6);
}

void *Darts::Details::DawgBuilder::insert(void *this, const char *a2, unint64_t a3, int a4)
{
  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    unint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    unint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    void *exception = &unk_270973390;
    exception[1] = v23;
  }
  int v5 = a4;
  int v7 = this;
  unint64_t v8 = 0;
  unsigned int v9 = 0;
  uint64_t v10 = *this;
  while (1)
  {
    unsigned int v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11) {
      goto LABEL_12;
    }
    unsigned int v12 = a2[v8];
    if (v8 < a3 && !a2[v8])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      unint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    unsigned int v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      unint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13) {
      break;
    }
    ++v8;
    unsigned int v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3) {
      return this;
    }
  }
  *(unsigned char *)(v10 + 12 * v11 + 1std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 1;
  this = (void *)Darts::Details::DawgBuilder::flush((uint64_t)this, v11);
LABEL_12:
  if (v8 <= a3)
  {
    int v24 = v5;
    do
    {
      if (v8 >= a3) {
        char v14 = 0;
      }
      else {
        char v14 = a2[v8];
      }
      unsigned int v25 = 0;
      uint64_t v15 = v7[22];
      if (v15)
      {
        unsigned int v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        uint64_t v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(void *)uint64_t v17 = 0;
        --v7[22];
      }
      else
      {
        unsigned int v16 = *((_DWORD *)v7 + 2);
        Darts::Details::AutoPool<Darts::Details::DawgNode>::append(v7);
      }
      unsigned int v25 = v16;
      uint64_t v18 = *v7;
      long long v19 = (int *)(*v7 + 12 * v9);
      int v20 = *v19;
      if (!*v19) {
        *(unsigned char *)(v18 + 12 * v16 + 9) = 1;
      }
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      unsigned int v21 = v25;
      *(unsigned char *)(v18 + 12 * v25 + 8) = v14;
      *long long v19 = v21;
      this = Darts::Details::AutoPool<unsigned int>::append(v7 + 18, &v25);
      unsigned int v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    int v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return this;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = result[1];
  if (v3 > a2)
  {
    result[1] = a2;
    unint64_t v3 = a2;
  }
  if (result[2] < a2) {
    Darts::Details::AutoPool<unsigned int>::resize_buf((uint64_t)result, a2);
  }
  if (v3 < a2)
  {
    uint64_t v4 = *result;
    do
      *(_DWORD *)(v4 + 4 * v3++) = *a3;
    while (a2 != v3);
    result[1] = a2;
  }
  return result;
}

void *Darts::Details::AutoPool<Darts::Details::DawgNode>::append(void *result)
{
  uint64_t v1 = result[1];
  if (v1 == result[2]) {
    Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf((uint64_t)result, v1 + 1);
  }
  result[1] = v1 + 1;
  uint64_t v2 = *result + 12 * v1;
  *(_DWORD *)(v2 + 7) = 0;
  *(void *)uint64_t v2 = 0;
  return result;
}

void *Darts::Details::BitVector::append(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[5];
  if ((v2 & 0x1F) == 0)
  {
    int v3 = 0;
    this = Darts::Details::AutoPool<unsigned int>::append(this, &v3);
    uint64_t v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return this;
}

void *Darts::Details::AutoPool<Darts::Details::DawgUnit>::append(void *result)
{
  uint64_t v1 = result[1];
  if (v1 == result[2]) {
    Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf((uint64_t)result, v1 + 1);
  }
  result[1] = v1 + 1;
  *(_DWORD *)(*result + 4 * v1) = 0;
  return result;
}

void *Darts::Details::AutoPool<unsigned int>::append(void *result, _DWORD *a2)
{
  uint64_t v2 = result[1];
  if (v2 == result[2]) {
    Darts::Details::AutoPool<unsigned int>::resize_buf((uint64_t)result, v2 + 1);
  }
  result[1] = v2 + 1;
  *(_DWORD *)(*result + 4 * v2) = *a2;
  return result;
}

uint64_t Darts::Details::DawgBuilder::flush(uint64_t this, int a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *(void *)(this + 152) - 1;
  unsigned int v4 = *(_DWORD *)(*(void *)(this + 144) + 4 * v3);
  if (v4 != a2)
  {
    uint64_t v35 = (uint64_t *)(this + 120);
    int v5 = (void *)(this + 24);
    int v6 = (void *)(this + 72);
    while (1)
    {
      *(void *)(v2 + 152) = v3;
      unint64_t v7 = *(void *)(v2 + 128);
      if (*(void *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        unint64_t v8 = 2 * v7;
        Darts::Details::AutoPool<unsigned int>::clear(v35);
        int v38 = 0;
        Darts::Details::AutoPool<unsigned int>::resize(v35, v8, &v38);
        unint64_t v9 = *(void *)(v2 + 32);
        if (v9 >= 2)
        {
          uint64_t v10 = *(void *)(v2 + 48);
          for (uint64_t i = 1; i != v9; ++i)
          {
            if (!*(unsigned char *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              unsigned int v12 = 0;
              if (i)
              {
                unsigned int v13 = i;
                do
                {
                  int v14 = *(_DWORD *)(*v5 + 4 * v13);
                  unsigned int v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  unsigned int v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  BOOL v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              uint64_t v18 = *(void *)(v2 + 120);
              do
              {
                unint64_t v19 = (unint64_t)v12 % *(void *)(v2 + 128);
                unsigned int v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      int v20 = 0;
      if (v4)
      {
        unsigned int v21 = v4;
        do
        {
          ++v20;
          unsigned int v21 = *(_DWORD *)(*(void *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      unsigned int v37 = 0;
      this = Darts::Details::DawgBuilder::find_node((Darts::Details::DawgBuilder *)v2, v4, &v37);
      if (this)
      {
        unsigned int v22 = this;
        *(_DWORD *)(*v6 + 4 * (this >> 5)) |= 1 << this;
        if (v4) {
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      if (!v20) {
        break;
      }
      do
      {
        Darts::Details::BitVector::append((void *)(v2 + 72));
        this = (uint64_t)Darts::Details::AutoPool<Darts::Details::DawgUnit>::append((void *)(v2 + 24));
        uint64_t v25 = *(void *)(v2 + 56);
        if (v25 == *(void *)(v2 + 64)) {
          Darts::Details::AutoPool<unsigned char>::resize_buf(v2 + 48, v25 + 1);
        }
        *(void *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      unsigned int v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4) {
        goto LABEL_32;
      }
LABEL_37:
      unsigned int v22 = v26 + 1;
      *(_DWORD *)(*(void *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(void *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          unsigned int v23 = *(_DWORD *)(*(void *)v2 + 12 * v4 + 4);
          unsigned int v39 = v4;
          this = (uint64_t)Darts::Details::AutoPool<unsigned int>::append((void *)(v2 + 168), &v39);
          unsigned int v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      uint64_t v24 = *(void *)(v2 + 144);
      uint64_t v3 = *(void *)(v2 + 152) - 1;
      *(_DWORD *)(*(void *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      unsigned int v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2) {
        goto LABEL_2;
      }
    }
    unsigned int v26 = 0;
    if (!v4) {
      goto LABEL_37;
    }
LABEL_32:
    uint64_t v27 = *(void *)v2;
    unsigned int v28 = v4;
    do
    {
      uint64_t v29 = v28;
      uint64_t v30 = (int *)(v27 + 12 * v28);
      int v31 = *((unsigned __int8 *)v30 + 8);
      int v32 = *v30;
      if (v31) {
        int v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      }
      else {
        int v33 = 2 * v32;
      }
      uint64_t v34 = 3 * v29;
      *(_DWORD *)(*(void *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(unsigned char *)(*(void *)(v2 + 48) + v26--) = v31;
      uint64_t v27 = *(void *)v2;
      unsigned int v28 = *(_DWORD *)(*(void *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(void *)(v2 + 152) = v3;
  return this;
}

uint64_t Darts::Details::DawgBuilder::find_node(Darts::Details::DawgBuilder *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    uint64_t v5 = *(void *)this;
    uint64_t v6 = a2;
    do
    {
      unint64_t v7 = (int *)(v5 + 12 * v6);
      int v8 = *((unsigned __int8 *)v7 + 8);
      int v9 = *v7;
      if (v8) {
        int v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      }
      else {
        int v10 = 2 * v9;
      }
      uint64_t v11 = v5 + 12 * v6;
      unsigned int v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      unsigned int v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      unint64_t v4 = v4 ^ HIWORD(v13) ^ v13;
      uint64_t v6 = *(unsigned int *)(v11 + 4);
    }
    while (v6);
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v15 = *((void *)this + 15);
  unint64_t v14 = *((void *)this + 16);
  unint64_t v16 = v4 % v14;
  *a3 = v4 % v14;
  uint64_t v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if (v17)
  {
    uint64_t v18 = *(void *)this;
    unint64_t v19 = (unsigned int *)(*(void *)this + 12 * a2 + 4);
    uint64_t v20 = *((void *)this + 3);
    do
    {
      uint64_t v21 = *v19;
      unsigned int v22 = v17;
      if (v21)
      {
        unsigned int v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!v21) {
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3) {
            return v17;
          }
          uint64_t v23 = v3;
          while (1)
          {
            uint64_t v24 = (int *)(v18 + 12 * v23);
            int v25 = *((unsigned __int8 *)v24 + 8);
            int v26 = *v24;
            int v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(*((void *)this + 6) + v22))
            {
              break;
            }
            uint64_t v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!v23) {
              return v17;
            }
          }
        }
      }
      unint64_t v16 = (v16 + 1) % v14;
      *a3 = v16;
      uint64_t v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while (v17);
  }
  return v17;
}

void Darts::Details::BitVector::build(Darts::Details::BitVector *this)
{
}

unsigned int *Darts::Details::DoubleArrayBuilderUnit::set_offset(unsigned int *this, unsigned int a2)
{
  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = &unk_270973390;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
  }
  int v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000) {
    int v2 = a2 << 10;
  }
  *this = *this & 0x800001FF | v2;
  return this;
}

unsigned int *Darts::Details::DoubleArrayBuilder::build_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2, unsigned int a3, unsigned int a4)
{
  int v8 = (const Darts::Details::DawgBuilder *)((char *)a2 + 72);
  unint64_t v9 = *(unsigned int *)(*((void *)a2 + 3) + 4 * a3);
  unint64_t v10 = v9 >> 2;
  unint64_t v11 = v9 >> 7;
  int v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(*((void *)a2 + 9) + 4 * (v9 >> 7))) != 0
    && (int v13 = *(_DWORD *)(*((void *)this + 8)
                        + 4
                        * (Darts::Details::BitVector::rank((const Darts::Details::DawgBuilder *)((char *)a2 + 72), v10)- 1))) != 0&& ((unsigned int v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(unsigned char *)(*((void *)a2 + 6) + v10))
    {
      uint64_t v16 = *((void *)this + 1);
      uint64_t v17 = a4;
    }
    else
    {
      uint64_t v17 = a4;
      uint64_t v16 = *((void *)this + 1);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    uint64_t result = (unsigned int *)Darts::Details::DoubleArrayBuilder::arrange_from_dawg(this, a2, a3, a4);
    int v19 = (int)result;
    if ((*(_DWORD *)(*((void *)a2 + 9) + 4 * v11) & v12) != 0)
    {
      uint64_t result = (unsigned int *)Darts::Details::BitVector::rank(v8, v10);
      *(_DWORD *)(*((void *)this + 8) + 4 * (result - 1)) = v19;
    }
    do
    {
      if (*(unsigned char *)(*((void *)a2 + 6) + v10)) {
        uint64_t result = (unsigned int *)Darts::Details::DoubleArrayBuilder::build_from_dawg(this, a2, v10, v19 ^ *(unsigned __int8 *)(*((void *)a2 + 6) + v10));
      }
      if (v10 == -1) {
        break;
      }
      int v20 = *(_DWORD *)(*((void *)a2 + 3) + 4 * v10);
      LODWORD(v1std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void Darts::Details::DoubleArrayBuilder::expand_units(Darts::Details::DoubleArrayBuilder *this)
{
  int v2 = (void *)((char *)this + 8);
  unint64_t v3 = *((void *)this + 2);
  uint64_t v4 = (v3 + 256);
  unsigned int v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize((void *)this + 1, (v3 + 256));
  }
  else
  {
    int v6 = 0;
    unint64_t v7 = v5 << 8;
    uint64_t v8 = *((void *)this + 4);
    while (1)
    {
      char v9 = v7 + v6;
      if (!*(unsigned char *)(v8 + 12 * ((v7 + v6) & 0xFFF) + 9)) {
        break;
      }
      if (++v6 == 256)
      {
        char v9 = 0;
        break;
      }
    }
    uint64_t v10 = 0;
    uint64_t v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(unsigned char *)(v8 + v11 + v10 + 8))
      {
        if (*((void *)this + 2) <= v7)
        {
          Darts::Details::DoubleArrayBuilder::expand_units(this);
          uint64_t v8 = *((void *)this + 4);
        }
        int v12 = (int *)(v8 + v11 + v10);
        uint64_t v13 = v12[1];
        if (v7 == *((_DWORD *)this + 18))
        {
          *((_DWORD *)this + 18) = v13;
          if (v7 == v13) {
            *((_DWORD *)this + 18) = *((void *)this + 2);
          }
        }
        int v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((unsigned char *)v12 + 8) = 1;
        *(unsigned char *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while (v10 != 3072);
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(v2, (v3 + 256));
    uint64_t v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      uint64_t v16 = *((void *)this + 4);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  uint64_t v17 = *((void *)this + 4);
  if ((int)v3 + 1 < v4)
  {
    for (int i = 0; i != 255; ++i)
    {
      int v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  uint64_t v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v2std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = v3 + 255;
  int v21 = *((_DWORD *)this + 18);
  uint64_t v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v2std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(v17 + v22);
  LOWORD(v2std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * ((v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t Darts::Details::DoubleArrayBuilder::arrange_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = (void *)((char *)this + 40);
  Darts::Details::AutoPool<unsigned char>::resize((uint64_t)this + 40, 0);
  unsigned int v9 = *(_DWORD *)(*((void *)a2 + 3) + 4 * a3);
  if (v9 >= 4)
  {
    unsigned int v10 = v9 >> 2;
    do
    {
      char v35 = *(unsigned char *)(*((void *)a2 + 6) + v10);
      Darts::Details::AutoPool<unsigned char>::append(v8, &v35);
      int v11 = *(_DWORD *)(*((void *)a2 + 3) + 4 * v10);
      BOOL v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  unint64_t v14 = *((unsigned int *)this + 18);
  unint64_t v15 = *((void *)this + 2);
  if (v15 <= v14)
  {
LABEL_20:
    uint64_t v19 = a4 | v15;
  }
  else
  {
    uint64_t v17 = *((void *)this + 4);
    uint64_t v16 = (unsigned __int8 *)*((void *)this + 5);
    int v18 = *((_DWORD *)this + 18);
    while (1)
    {
      uint64_t v19 = v18 ^ *v16;
      int v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(unsigned char *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        unint64_t v21 = *((void *)this + 6);
        if (v21 < 2) {
          goto LABEL_21;
        }
        if (!*(unsigned char *)(v17 + 12 * (v20 ^ v16[1]) + 8)) {
          break;
        }
      }
LABEL_19:
      int v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == v14) {
        goto LABEL_20;
      }
    }
    uint64_t v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21) {
          break;
        }
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(*((void *)this + 1) + 4 * a4), v19 ^ a4);
  if (*((void *)this + 6))
  {
    unint64_t v24 = 0;
    unsigned int v25 = *(_DWORD *)(*((void *)a2 + 3) + 4 * a3) >> 2;
    do
    {
      unint64_t v26 = v19 ^ *(unsigned __int8 *)(*((void *)this + 5) + v24);
      if (*((void *)this + 2) <= v26) {
        Darts::Details::DoubleArrayBuilder::expand_units(this);
      }
      if (*((_DWORD *)this + 18) == v26)
      {
        unsigned int v27 = v26 & 0xFFF;
        uint64_t v28 = *((void *)this + 4);
        int v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *((_DWORD *)this + 18) = v29;
        if (v29 == v26)
        {
          *((_DWORD *)this + 18) = *((void *)this + 2);
          int v29 = v26;
        }
      }
      else
      {
        uint64_t v28 = *((void *)this + 4);
        unsigned int v27 = v26 & 0xFFF;
        int v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      uint64_t v30 = (int *)(v28 + 12 * v27);
      int v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((unsigned char *)v30 + 8) = 1;
      uint64_t v32 = *((void *)this + 1);
      if (*(unsigned char *)(*((void *)a2 + 6) + v25))
      {
        *(unsigned char *)(v32 + 4 * v26) = *(unsigned char *)(*v8 + v24);
        unsigned int v33 = *(_DWORD *)(*((void *)a2 + 3) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        unsigned int v33 = *(_DWORD *)(*((void *)a2 + 3) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      unsigned int v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *((void *)this + 6));
  }
  else
  {
    uint64_t v28 = *((void *)this + 4);
  }
  *(unsigned char *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t Darts::Details::BitVector::rank(Darts::Details::BitVector *this, unint64_t a2)
{
  uint64_t v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  int v3 = *(_DWORD *)(*((void *)this + 3) + v2);
  LODWORD(v2) = *(_DWORD *)(*(void *)this + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

void *Darts::Details::AutoPool<unsigned char>::append(void *result, unsigned char *a2)
{
  uint64_t v2 = result[1];
  if (v2 == result[2]) {
    Darts::Details::AutoPool<unsigned char>::resize_buf((uint64_t)result, v2 + 1);
  }
  result[1] = v2 + 1;
  *(unsigned char *)(*result + v2) = *a2;
  return result;
}

void Darts::Details::DawgBuilder::~DawgBuilder(Darts::Details::DawgBuilder *this)
{
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)this);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear((uint64_t *)this + 3);
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 6);
  Darts::Details::BitVector::clear((Darts::Details::DawgBuilder *)((char *)this + 72));
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 15);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 21);
  *((void *)this + 24) = 0;
  Darts::Details::AutoStack<unsigned int>::~AutoStack((uint64_t *)this + 21);
  Darts::Details::AutoStack<unsigned int>::~AutoStack((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::~AutoPool((uint64_t *)this + 15);
  Darts::Details::BitVector::~BitVector((Darts::Details::DawgBuilder *)((char *)this + 72));
  Darts::Details::AutoPool<unsigned char>::~AutoPool((uint64_t *)this + 6);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::~AutoPool((uint64_t *)this + 3);

  Darts::Details::AutoPool<Darts::Details::DawgNode>::~AutoPool((uint64_t *)this);
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  while (1)
  {
    uint64_t result = Darts::Details::DoubleArrayBuilder::arrange_from_keyset<int>(a1, a2, a3, a4, a5, a6);
    int v12 = result;
    if (a3 < a4)
    {
      uint64_t v13 = a2[2];
      while (v13 && *(void *)(v13 + 8 * a3) <= a5 || !*(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3) {
          return result;
        }
      }
    }
    if (a3 == a4) {
      break;
    }
    uint64_t v14 = a2[2];
    if (v14 && *(void *)(v14 + 8 * a3) <= a5) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * a3) + a5);
    }
    unint64_t v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(void *)(v14 + 8 * v16) <= a5) {
          int v17 = 0;
        }
        else {
          int v17 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v16) + a5);
        }
        if (v17 != v15)
        {
          Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          uint64_t v14 = a2[2];
          if (v14 && *(void *)(v14 + 8 * v16) <= a5) {
            unsigned int v15 = 0;
          }
          else {
            unsigned int v15 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v16) + a5);
          }
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::arrange_from_keyset<int>(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  int v12 = (uint64_t *)(a1 + 40);
  Darts::Details::AutoPool<unsigned char>::resize(a1 + 40, 0);
  int v13 = -1;
  if (a3 < a4)
  {
    do
    {
      unsigned __int8 v41 = 0;
      uint64_t v14 = a2[2];
      if (v14)
      {
        if (*(void *)(v14 + 8 * a3) > a5)
        {
          unsigned __int8 v41 = *(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            size_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        unsigned __int8 v41 = *(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5);
        if (v41) {
          goto LABEL_17;
        }
      }
      uint64_t v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0) {
          goto LABEL_51;
        }
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        size_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        void *exception = &unk_270973390;
        exception[1] = v40;
      }
      if (v13 == -1)
      {
        if (v15) {
          int v13 = *(_DWORD *)(v15 + 4 * a3);
        }
        else {
          int v13 = a3;
        }
      }
      if (*(void *)a1) {
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
      }
LABEL_17:
      uint64_t v16 = *(void *)(a1 + 48);
      if (!v16) {
        goto LABEL_21;
      }
      unsigned int v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          size_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        Darts::Details::AutoPool<unsigned char>::append(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  unint64_t v18 = *(unsigned int *)(a1 + 72);
  unint64_t v19 = *(void *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    uint64_t v23 = a6 | v19;
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 32);
    int v20 = *(unsigned __int8 **)(a1 + 40);
    int v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      uint64_t v23 = v22 ^ *v20;
      int v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(unsigned char *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        unint64_t v25 = *(void *)(a1 + 48);
        if (v25 < 2) {
          goto LABEL_36;
        }
        if (!*(unsigned char *)(v21 + 12 * (v24 ^ v20[1]) + 8)) {
          break;
        }
      }
LABEL_34:
      int v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == v18) {
        goto LABEL_35;
      }
    }
    uint64_t v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25) {
          break;
        }
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(*(void *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(void *)(a1 + 48))
  {
    unint64_t v28 = 0;
    unsigned int v29 = v13 | 0x80000000;
    uint64_t v30 = *v12;
    do
    {
      unint64_t v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(void *)(a1 + 16) <= v31) {
        Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
      }
      if (*(_DWORD *)(a1 + 72) == v31)
      {
        unsigned int v32 = v31 & 0xFFF;
        uint64_t v33 = *(void *)(a1 + 32);
        int v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == v31)
        {
          *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          int v34 = v31;
        }
      }
      else
      {
        uint64_t v33 = *(void *)(a1 + 32);
        unsigned int v32 = v31 & 0xFFF;
        int v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      char v35 = (int *)(v33 + 12 * v32);
      int v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((unsigned char *)v35 + 8) = 1;
      uint64_t v30 = *(void *)(a1 + 40);
      uint64_t v37 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v30 + v28))
      {
        *(unsigned char *)(v37 + 4 * v31) = *(unsigned char *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(void *)(a1 + 48));
  }
  else
  {
    uint64_t v33 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

void Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder(Darts::Details::DoubleArrayBuilder *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 8);
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear((uint64_t *)this + 1);
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    MEMORY[0x26117ABA0](v3, 0x1000C80CBA68D63);
    *((void *)this + 4) = 0;
  }
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 5);
  uint64_t v4 = *((void *)this + 8);
  if (v4)
  {
    MEMORY[0x26117ABA0](v4, 0x1000C8052888210);
    *((void *)this + 8) = 0;
  }
  *((_DWORD *)this + 18) = 0;
  Darts::Details::AutoPool<unsigned char>::~AutoPool((uint64_t *)this + 5);
  uint64_t v5 = *((void *)this + 4);
  if (v5)
  {
    MEMORY[0x26117ABA0](v5, 0x1000C80CBA68D63);
    *((void *)this + 4) = 0;
  }
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::~AutoPool(v2);
}

void *std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<_NSRange>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_25BFAE104(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

sentencepiece::normalizer::Normalizer *sentencepiece::normalizer::Normalizer::Normalizer(sentencepiece::normalizer::Normalizer *this, const sentencepiece::NormalizerSpec *a2, const sentencepiece::TrainerSpec *a3)
{
  *(void *)this = &unk_2709723D8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = (char *)a2 + 16;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = *((unsigned char *)a3 + 245);
  sentencepiece::util::Status::Status((void *)this + 7);
  unint64_t v5 = *((void *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    unint64_t v5 = *(void *)v5;
    unint64_t v6 = *(void *)((*((void *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    unint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sentencepiece::normalizer::Normalizer::Init((uint64_t)this, (unsigned int *)v5, v6);
  return this;
}

void sub_25BFAE1B8(_Unwind_Exception *a1)
{
  sentencepiece::util::Status::~Status(v1);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sentencepiece::normalizer::Normalizer::Init(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  if (a3)
  {
    v6[0] = 0;
    v6[1] = 0;
    long long v5 = 0uLL;
    sentencepiece::normalizer::Normalizer::DecodePrecompiledCharsMap(a2, a3, v6, &v5, &v4);
    sentencepiece::util::Status::operator=((uint64_t *)(a1 + 56), &v4);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v4);
    if (!*(void *)(a1 + 56)) {
      operator new();
    }
  }
}

void sub_25BFAE364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  _Unwind_Resume(a1);
}

sentencepiece::normalizer::Normalizer *sentencepiece::normalizer::Normalizer::Normalizer(sentencepiece::normalizer::Normalizer *this, const sentencepiece::NormalizerSpec *a2)
{
  *(void *)this = &unk_2709723D8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = (char *)a2 + 16;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 0;
  sentencepiece::util::Status::Status((void *)this + 7);
  unint64_t v4 = *((void *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    unint64_t v4 = *(void *)v4;
    unint64_t v5 = *(void *)((*((void *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    unint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sentencepiece::normalizer::Normalizer::Init((uint64_t)this, (unsigned int *)v4, v5);
  return this;
}

void sub_25BFAE414(_Unwind_Exception *a1)
{
  sentencepiece::util::Status::~Status(v1);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::Normalizer::Normalizer(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  *(void *)a1 = &unk_2709723D8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  unint64_t v7 = (uint64_t *)(a1 + 56);
  sentencepiece::util::Status::Status((void *)(a1 + 56));
  int v11 = 0;
  sentencepiece::mmap_util::DecodePrefix<unsigned int>(a3, a4, &v11, &v10);
  sentencepiece::util::Status::operator=(v7, &v10);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 24))(&v10, a1);
  uint64_t v8 = v10;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  if (!v8)
  {
    *(unsigned char *)(a1 + 48) = v11 != 0;
    sentencepiece::normalizer::Normalizer::Init(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_25BFAE56C(_Unwind_Exception *a1)
{
  sentencepiece::util::Status::~Status(v1);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sentencepiece::normalizer::Normalizer::~Normalizer(sentencepiece::normalizer::Normalizer *this)
{
  *(void *)this = &unk_2709723D8;
  sentencepiece::util::Status::~Status((sentencepiece::normalizer::Normalizer *)((char *)this + 56));
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t vars8;

  sentencepiece::normalizer::Normalizer::~Normalizer(this);

  JUMPOUT(0x26117ABD0);
}

void *sentencepiece::normalizer::Normalizer::DecodePrecompiledCharsMap@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  if (a2 < 5 || (unint64_t v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    uint64_t v10 = "Blob for normalization rule is broken.";
    uint64_t v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      uint64_t v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (void)v8;
      a4[1] = a2 - (void)v7 - 4;
      return sentencepiece::util::Status::Status(a5);
    }
    uint64_t v10 = "Trie data size exceeds the input blob size.";
    uint64_t v11 = 43;
  }
  return (void *)sentencepiece::util::Status::Status(a5, 13, v10, v11);
}

void *sentencepiece::normalizer::Normalizer::Normalize@<X0>(uint64_t a1@<X0>, sentencepiece::string_util *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  unint64_t v6 = a3;
  uint64_t v86 = (void **)a5;
  uint64_t v87 = (std::string *)a4;
  *(void *)(a5 + 8) = *(void *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(unsigned char **)a4 = 0;
    *(void *)(a4 + 8) = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_10:
    return sentencepiece::util::Status::Status(a6);
  }
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 23) = 0;
  if (!a3) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (*(void *)a6) {
    return result;
  }
  sentencepiece::util::Status::~Status(a6);
  int v85 = 0;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)))
  {
    do
    {
      sentencepiece::normalizer::Normalizer::NormalizePrefix(a2, a1, v6, v11, (uint64_t)&v76);
      if (v77 != 1 || *v76 != 32) {
        goto LABEL_13;
      }
      a2 = (sentencepiece::string_util *)((char *)a2 + (int)v78);
      v85 += v78;
      v6 -= (int)v78;
    }
    while (v6);
    int v12 = a6;
    return sentencepiece::util::Status::Status(v12);
  }
LABEL_13:
  uint64_t v73 = a6;
  std::string::reserve(v87, 3 * v6);
  std::vector<unsigned long>::reserve(v86, 3 * v6);
  unint64_t v83 = "▁";
  std::string::size_type v84 = 3;
  v82[0] = a1;
  v82[1] = &v85;
  v82[2] = &v87;
  v82[3] = &v86;
  v82[4] = &v83;
  if (!*(unsigned char *)(a1 + 48)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)))
  {
    sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()((uint64_t)v82);
  }
  int v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  do
  {
    sentencepiece::normalizer::Normalizer::NormalizePrefix(a2, a1, v6, v13, (uint64_t)&v76);
    uint64_t v15 = v76;
    uint64_t v16 = v77;
    if (v14)
    {
      if (!v77) {
        goto LABEL_66;
      }
      while (*v15 == 32)
      {
        ++v15;
        if (!--v16) {
          goto LABEL_66;
        }
      }
    }
    else if (!v77)
    {
      int v14 = 0;
      goto LABEL_66;
    }
    uint64_t v74 = a2;
    unint64_t v75 = v6;
    uint64_t v17 = 0;
    do
    {
      int v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
      int v19 = v15[v17];
      if (v18 && v19 == 32)
      {
        std::string::append(v87, v83, v84);
        if (v84)
        {
          for (std::string::size_type i = 0; i < v84; ++i)
          {
            uint64_t v21 = v86;
            uint64_t v22 = v85;
            uint64_t v23 = (char *)v86[1];
            int v24 = (char *)v86[2];
            if (v23 >= v24)
            {
              uint64_t v26 = (char *)*v86;
              uint64_t v27 = (v23 - (unsigned char *)*v86) >> 3;
              unint64_t v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 61) {
                goto LABEL_116;
              }
              uint64_t v29 = v24 - v26;
              if (v29 >> 2 > v28) {
                unint64_t v28 = v29 >> 2;
              }
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v28;
              }
              if (v30)
              {
                unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v30);
                uint64_t v26 = (char *)*v21;
                uint64_t v23 = (char *)v21[1];
              }
              else
              {
                unint64_t v31 = 0;
              }
              unsigned int v32 = &v31[8 * v27];
              *(void *)unsigned int v32 = v22;
              unint64_t v25 = v32 + 8;
              while (v23 != v26)
              {
                uint64_t v33 = *((void *)v23 - 1);
                v23 -= 8;
                *((void *)v32 - 1) = v33;
                v32 -= 8;
              }
              *uint64_t v21 = v32;
              v21[1] = v25;
              void v21[2] = &v31[8 * v30];
              if (v26) {
                operator delete(v26);
              }
            }
            else
            {
              *(void *)uint64_t v23 = v85;
              unint64_t v25 = v23 + 8;
            }
            v21[1] = v25;
          }
        }
      }
      else
      {
        std::string::push_back(v87, v19);
        int v34 = v86;
        uint64_t v35 = v85;
        int v36 = (char *)v86[1];
        uint64_t v37 = (char *)v86[2];
        if (v36 >= v37)
        {
          unsigned int v39 = (char *)*v86;
          uint64_t v40 = (v36 - (unsigned char *)*v86) >> 3;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61) {
LABEL_116:
          }
            std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
          uint64_t v42 = v37 - v39;
          if (v42 >> 2 > v41) {
            unint64_t v41 = v42 >> 2;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          if (v43)
          {
            int v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v43);
            unsigned int v39 = (char *)*v34;
            int v36 = (char *)v34[1];
          }
          else
          {
            int v44 = 0;
          }
          uint64_t v45 = &v44[8 * v40];
          *(void *)uint64_t v45 = v35;
          int v38 = v45 + 8;
          while (v36 != v39)
          {
            uint64_t v46 = *((void *)v36 - 1);
            v36 -= 8;
            *((void *)v45 - 1) = v46;
            v45 -= 8;
          }
          *int v34 = v45;
          v34[1] = v38;
          v34[2] = &v44[8 * v43];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)int v36 = v85;
          int v38 = v36 + 8;
        }
        v34[1] = v38;
      }
      ++v17;
    }
    while (v17 != v16);
    int v14 = v15[v16 - 1] == 32;
    a2 = v74;
    unint64_t v6 = v75;
LABEL_66:
    v85 += v78;
    a2 = (sentencepiece::string_util *)((char *)a2 + (int)v78);
    v6 -= (int)v78;
    v14 &= (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)))
  {
    int v47 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
    if (v47) {
      size_t v48 = v84;
    }
    else {
      size_t v48 = 1;
    }
    if (v47) {
      uint64_t v49 = v83;
    }
    else {
      uint64_t v49 = " ";
    }
    while (1)
    {
      uint64_t v50 = v87;
      LODWORD(v51) = HIBYTE(v87->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v52 = (std::string *)v87->__r_.__value_.__r.__words[0];
        std::string::size_type size = v87->__r_.__value_.__l.__size_;
        if (!v48) {
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v52 = v87;
        std::string::size_type size = HIBYTE(v87->__r_.__value_.__r.__words[2]);
        if (!v48) {
          goto LABEL_81;
        }
      }
      BOOL v54 = size >= v48;
      std::string::size_type v55 = size - v48;
      if (!v54 || memcmp((char *)v52 + v55, v49, v48)) {
        break;
      }
LABEL_81:
      if ((v51 & 0x80) != 0) {
        std::string::size_type v51 = v50->__r_.__value_.__l.__size_;
      }
      if (v51 - v48 < 0)
      {
        LODWORD(v76) = 13;
        char v67 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(length) >= (0)", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v76, (uint64_t)v73);
        goto LABEL_112;
      }
      int v85 = *((void *)*v86 + (v51 - v48));
      std::string::resize(v50, (v51 - v48), 0);
      std::vector<unsigned long>::resize((uint64_t)v86, (v51 - v48));
    }
  }
  if (*(unsigned char *)(a1 + 48)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)))
  {
    sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()((uint64_t)v82);
  }
  uint64_t v56 = v86;
  uint64_t v57 = v85;
  uint64_t v58 = (char *)v86[1];
  char v59 = (char *)v86[2];
  if (v58 >= v59)
  {
    uint64_t v61 = (char *)*v86;
    uint64_t v62 = (v58 - (unsigned char *)*v86) >> 3;
    unint64_t v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v64 = v59 - v61;
    if (v64 >> 2 > v63) {
      unint64_t v63 = v64 >> 2;
    }
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v65 = v63;
    }
    if (v65)
    {
      uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v65);
      uint64_t v61 = (char *)*v56;
      uint64_t v58 = (char *)v56[1];
    }
    else
    {
      uint64_t v66 = 0;
    }
    long long v68 = &v66[8 * v62];
    uint64_t v69 = &v66[8 * v65];
    *(void *)long long v68 = v57;
    uint64_t v60 = v68 + 8;
    while (v58 != v61)
    {
      uint64_t v70 = *((void *)v58 - 1);
      v58 -= 8;
      *((void *)v68 - 1) = v70;
      v68 -= 8;
    }
    *uint64_t v56 = v68;
    v56[1] = v60;
    v56[2] = v69;
    if (v61) {
      operator delete(v61);
    }
  }
  else
  {
    *(void *)uint64_t v58 = v85;
    uint64_t v60 = v58 + 8;
  }
  v56[1] = v60;
  if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type v71 = v87->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v71 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
  }
  if (((unsigned char *)v86[1] - (unsigned char *)*v86) >> 3 == v71 + 1)
  {
    int v12 = v73;
    return sentencepiece::util::Status::Status(v12);
  }
  LODWORD(v76) = 13;
  BOOL v72 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v77);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"] ", 2);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v76, (uint64_t)v73);
LABEL_112:
  uint64_t v77 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&v77 + *(void *)(v77 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  uint64_t v78 = MEMORY[0x263F8C318] + 16;
  if (v80 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x26117AB30](&v81);
}

void sub_25BFAEFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::Normalizer::NormalizePrefix@<X0>(sentencepiece::string_util *this@<X1>, uint64_t result@<X0>, unint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  v28[63] = *MEMORY[0x263EF8340];
  if (a3)
  {
    unint64_t v7 = (char *)this;
    uint64_t v8 = result;
    uint64_t v9 = *(void *)(result + 40);
    if (v9
      && (v27[0] = 0, uint64_t result = sentencepiece::normalizer::PrefixMatcher::PrefixMatch(v9, this, a3, (BOOL *)v27), v27[0]))
    {
      unint64_t v10 = (int)result;
      if (a3 < (int)result) {
        unint64_t v10 = a3;
      }
      *(void *)a5 = v7;
      *(void *)(a5 + 8) = v10;
      *(_DWORD *)(a5 + 16) = result;
    }
    else
    {
      uint64_t v11 = *(void *)(v8 + 8);
      if (!v11) {
        goto LABEL_24;
      }
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      int v14 = *(_DWORD **)(v11 + 16);
      uint64_t v15 = (*v14 >> 10 << ((*v14 >> 6) & 8));
      do
      {
        uint64_t v16 = v7[v12];
        uint64_t v17 = v15 ^ v16;
        unsigned int v18 = v14[v17];
        if ((v18 & 0x800000FF) != v16) {
          break;
        }
        uint64_t v15 = v17 ^ (v18 >> 10 << ((v18 >> 6) & 8));
        if ((v18 & 0x100) != 0)
        {
          if (v13 <= 0x1F)
          {
            int v19 = &v27[16 * v13];
            *(_DWORD *)int v19 = v14[v15] & 0x7FFFFFFF;
            *((void *)v19 + 1) = v12 + 1;
          }
          ++v13;
        }
        ++v12;
      }
      while (a3 != v12);
      if (!v13) {
        goto LABEL_24;
      }
      unint64_t v20 = 0;
      int v21 = 0;
      uint64_t v22 = v28;
      uint64_t v23 = v28;
      do
      {
        unint64_t v25 = *v23;
        v23 += 2;
        unint64_t v24 = v25;
        if (!v20 || v24 > v20)
        {
          int v21 = *((_DWORD *)v22 - 2);
          unint64_t v20 = v24;
        }
        uint64_t v22 = v23;
        --v13;
      }
      while (v13);
      if (v20)
      {
        unint64_t v7 = (char *)(*(void *)(v8 + 16) + v21);
        uint64_t result = strlen(v7);
      }
      else
      {
LABEL_24:
        *(void *)uint64_t v27 = 0;
        BOOL v26 = sentencepiece::string_util::DecodeUTF8((sentencepiece::string_util *)v7, &v7[a3], v27, a4) != 65533
           || *(void *)v27 == 3;
        if (v26) {
          LODWORD(v2std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = *(_DWORD *)v27;
        }
        else {
          LODWORD(v2std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 1;
        }
        if (v26) {
          uint64_t result = *(int *)v27;
        }
        else {
          uint64_t result = 3;
        }
        if (!v26) {
          unint64_t v7 = (char *)&sentencepiece::normalizer::Normalizer::NormalizePrefix(std::string_view)const::kReplacementChar;
        }
      }
      *(void *)a5 = v7;
      *(void *)(a5 + 8) = result;
      *(_DWORD *)(a5 + 16) = v20;
    }
  }
  else
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 0;
  }
  return result;
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 32) + 32))(*(void *)(*(void *)a1 + 32));
  uint64_t v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8));
    if (*(void *)(*(void *)(a1 + 32) + 8))
    {
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = **(void **)(a1 + 24);
        uint64_t v6 = **(int **)(a1 + 8);
        unint64_t v7 = *(void **)(v5 + 8);
        unint64_t v8 = *(void *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          unint64_t v10 = *(void **)v5;
          uint64_t v11 = ((uint64_t)v7 - *(void *)v5) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            goto LABEL_40;
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5 + 16, v14);
            unint64_t v10 = *(void **)v5;
            unint64_t v7 = *(void **)(v5 + 8);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = &v15[8 * v11];
          *(void *)uint64_t v16 = v6;
          uint64_t v9 = v16 + 8;
          while (v7 != v10)
          {
            uint64_t v17 = *--v7;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(void *)uint64_t v5 = v16;
          *(void *)(v5 + 8) = v9;
          *(void *)(v5 + 16) = &v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *unint64_t v7 = v6;
          uint64_t v9 = v7 + 1;
        }
        *(void *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(void *)(*(void *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    uint64_t v18 = **(void **)(a1 + 24);
    uint64_t v19 = **(int **)(a1 + 8);
    unint64_t v20 = *(void **)(v18 + 8);
    unint64_t v21 = *(void *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      uint64_t v23 = *(void **)v18;
      uint64_t v24 = ((uint64_t)v20 - *(void *)v18) >> 3;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61) {
LABEL_40:
      }
        std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
      uint64_t v26 = v21 - (void)v23;
      if (v26 >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18 + 16, v27);
        uint64_t v23 = *(void **)v18;
        unint64_t v20 = *(void **)(v18 + 8);
      }
      else
      {
        unint64_t v28 = 0;
      }
      uint64_t v29 = &v28[8 * v24];
      unint64_t v30 = &v28[8 * v27];
      *(void *)uint64_t v29 = v19;
      uint64_t v22 = v29 + 8;
      while (v20 != v23)
      {
        uint64_t v31 = *--v20;
        *((void *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(void *)uint64_t v18 = v29;
      *(void *)(v18 + 8) = v22;
      *(void *)(v18 + 16) = v30;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *unint64_t v20 = v19;
      uint64_t v22 = v20 + 1;
    }
    *(void *)(v18 + 8) = v22;
  }
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void sentencepiece::normalizer::Normalizer::Normalize(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::string __p = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v2);
  sentencepiece::util::Status::IgnoreError((sentencepiece::util::Status *)&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
  if (__p)
  {
    unint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_25BFAF580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  if (*(char *)(v11 + 23) < 0) {
    operator delete(*(void **)v11);
  }
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::PrefixMatcher::PrefixMatch(uint64_t a1, unsigned char *a2, uint64_t a3, BOOL *a4)
{
  v23[127] = *MEMORY[0x263EF8340];
  if (!*(void *)a1)
  {
    if (a4) {
      *a4 = 0;
    }
    goto LABEL_33;
  }
  unint64_t v4 = *(_DWORD **)(*(void *)a1 + 16);
  uint64_t v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2[v6];
      uint64_t v9 = v5 ^ v8;
      unsigned int v10 = v4[v9];
      if ((v10 & 0x800000FF) != v8) {
        break;
      }
      uint64_t v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          uint64_t v11 = &v22[16 * v7];
          *(_DWORD *)uint64_t v11 = v4[v5] & 0x7FFFFFFF;
          *((void *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    unsigned int v12 = *a2;
    if (*a2)
    {
      unint64_t v7 = 0;
      uint64_t v13 = 1;
      do
      {
        uint64_t v14 = v5 ^ v12;
        unsigned int v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12) {
          break;
        }
        uint64_t v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            uint64_t v16 = &v22[16 * v7];
            *(_DWORD *)uint64_t v16 = v4[v5] & 0x7FFFFFFF;
            *((void *)v16 + 1) = v13;
          }
          ++v7;
        }
        unsigned int v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4) {
    *a4 = (int)v7 > 0;
  }
  if (!v7)
  {
LABEL_33:
    int v21 = asc_25C005013[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3) {
      return a3;
    }
    else {
      return v21;
    }
  }
  if ((int)v7 < 1) {
    return 0;
  }
  LODWORD(result) = 0;
  unint64_t v7 = v7;
  uint64_t v18 = (int *)v23;
  do
  {
    int v20 = *v18;
    v18 += 4;
    unsigned int v19 = v20;
    if ((int)result <= v20) {
      uint64_t result = v19;
    }
    else {
      uint64_t result = result;
    }
    --v7;
  }
  while (v7);
  return result;
}

void sentencepiece::normalizer::Normalizer::MemoryMappableString(sentencepiece::normalizer::Normalizer *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((unsigned __int8 *)this + 48);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = (_DWORD *)a2;
  }
  else {
    uint64_t v5 = *(_DWORD **)a2;
  }
  *uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    unint64_t v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    std::string::size_type v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v10 = &v13;
    }
    else {
      unsigned int v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v13;
    }
    else {
      uint64_t v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *((const std::string::value_type **)this + 2), *((void *)this + 3));
  }
}

void sub_25BFAF884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(void *result, void *a2)
{
  void *result = 0;
  unint64_t v3 = a2[2];
  if (v3)
  {
    std::string __p = 0;
    int v21 = 0;
    uint64_t v22 = 0;
    std::vector<char const*>::reserve(&__p, v3);
    uint64_t v6 = (void *)*a2;
    int v4 = a2 + 1;
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      unint64_t v7 = v21;
      do
      {
        uint64_t v8 = v5[4];
        if (v7 >= v22)
        {
          uint64_t v9 = (v7 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v9 + 1) >> 61) {
            std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v10 = (v22 - (unsigned char *)__p) >> 2;
          if (v10 <= v9 + 1) {
            unint64_t v10 = v9 + 1;
          }
          if ((unint64_t)(v22 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            unsigned int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v22, v11);
          }
          else {
            unsigned int v12 = 0;
          }
          std::string v13 = &v12[8 * v9];
          *(void *)std::string v13 = v8;
          unint64_t v7 = v13 + 8;
          uint64_t v15 = (char *)__p;
          uint64_t v14 = v21;
          if (v21 != __p)
          {
            do
            {
              uint64_t v16 = *((void *)v14 - 1);
              v14 -= 8;
              *((void *)v13 - 1) = v16;
              v13 -= 8;
            }
            while (v14 != v15);
            uint64_t v14 = (char *)__p;
          }
          std::string __p = v13;
          int v21 = v7;
          uint64_t v22 = &v12[8 * v11];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)unint64_t v7 = v8;
          v7 += 8;
        }
        int v21 = v7;
        uint64_t v17 = (void *)v5[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (void *)v5[2];
            BOOL v19 = *v18 == (void)v5;
            uint64_t v5 = v18;
          }
          while (!v19);
        }
        uint64_t v5 = v18;
      }
      while (v18 != v4);
    }
    operator new();
  }
  return result;
}

void sub_25BFAFB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v16 = *v14;
  uint64_t *v14 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<char const*>::reserve(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unsigned int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(void *result, uint64_t a2, uint64_t a3)
{
  void *result = 0;
  if (a3) {
    operator new();
  }
  return result;
}

void sub_25BFAFD30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sentencepiece::normalizer::PrefixMatcher::MemoryMappableString@<X0>(sentencepiece::normalizer::PrefixMatcher *this@<X0>, void *a2@<X8>)
{
  if (*(void *)this) {
    return std::string::basic_string[abi:ne180100](a2, *(void **)(*(void *)this + 16), 4 * *(void *)(*(void *)this + 8));
  }
  else {
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t sentencepiece::normalizer::Normalizer::SetPrefixMatcher(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = a2;
  return result;
}

uint64_t sentencepiece::normalizer::Normalizer::status@<X0>(sentencepiece::normalizer::Normalizer *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::normalizer::Normalizer *)((char *)this + 56));
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      uint64_t v8 = *a1;
      unint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sentencepiece::ModelFactory::Create(sentencepiece::ModelFactory *this@<X0>, void *a2@<X8>)
{
  if (*((void *)this + 10)) {
    uint64_t v4 = (_DWORD *)*((void *)this + 10);
  }
  else {
    uint64_t v4 = &sentencepiece::_TrainerSpec_default_instance_;
  }
  switch(v4[68])
  {
    case 1:
      absl::make_unique<sentencepiece::unigram::Model,sentencepiece::ModelProto const&>();
    case 2:
      absl::make_unique<sentencepiece::bpe::Model,sentencepiece::ModelProto const&>();
    case 3:
      absl::make_unique<sentencepiece::word::Model,sentencepiece::ModelProto const&>();
    case 4:
      absl::make_unique<sentencepiece::character::Model,sentencepiece::ModelProto const&>();
    default:
      if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 2)
      {
        LOBYTE(v11) = 0;
        int64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"model_factory.cc", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
        uint64_t v6 = (void *)std::ostream::operator<<();
        unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") ", 2);
        uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"LOG(", 4);
        uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ERROR", 5);
        unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v11);
      }
      *a2 = 0;
      return;
  }
}

void sub_25BFB0014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)va);
  _Unwind_Resume(a1);
}

void absl::make_unique<sentencepiece::unigram::Model,sentencepiece::ModelProto const&>()
{
}

void sub_25BFB008C(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

void absl::make_unique<sentencepiece::bpe::Model,sentencepiece::ModelProto const&>()
{
}

void sub_25BFB0104(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void absl::make_unique<sentencepiece::word::Model,sentencepiece::ModelProto const&>()
{
}

void sub_25BFB017C(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void absl::make_unique<sentencepiece::character::Model,sentencepiece::ModelProto const&>()
{
}

void sub_25BFB01F4(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelFactory::Create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v13[1] = a2;
  uint64_t v13[2] = a3;
  uint64_t v6 = (sentencepiece::logging *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if (v6 == 1) {
    absl::make_unique<sentencepiece::bpe::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>();
  }
  if (!v6) {
    absl::make_unique<sentencepiece::unigram::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>();
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(v6) <= 2)
  {
    LOBYTE(v13[0]) = 0;
    unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"model_factory.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    uint64_t v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LOG(", 4);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ERROR", 5);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
    std::ostream::operator<<();
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)v13);
  }
  *a4 = 0;
}

void sub_25BFB0384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)va);
  _Unwind_Resume(a1);
}

void absl::make_unique<sentencepiece::unigram::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>()
{
}

void sub_25BFB03F8(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

void absl::make_unique<sentencepiece::bpe::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>()
{
}

void sub_25BFB0478(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sentencepiece::ImmutableSentencePieceText::~ImmutableSentencePieceText(sentencepiece::ImmutableSentencePieceText *this)
{
  *(void *)this = &unk_270972C28;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_270972C28;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x26117ABD0);
}

uint64_t sentencepiece::ImmutableSentencePieceText::mutable_proto(sentencepiece::ImmutableSentencePieceText *this)
{
  uint64_t result = *((void *)this + 2);
  if (!result)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
    *((_OWORD *)this + 1) = v3;
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      if (*((void *)&v5 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    uint64_t result = *((void *)this + 2);
    *((void *)this + 1) = result;
  }
  return result;
}

void sentencepiece::ImmutableNBestSentencePieceText::~ImmutableNBestSentencePieceText(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  *(void *)this = &unk_270972C88;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_270972C88;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x26117ABD0);
}

uint64_t sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  uint64_t result = *((void *)this + 1);
  if (!result)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
    *(_OWORD *)((char *)this + 8) = v3;
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      if (*((void *)&v5 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    return *((void *)this + 1);
  }
  return result;
}

void *sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString@<X0>(sentencepiece::ImmutableNBestSentencePieceText *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (google::protobuf::MessageLite *)*((void *)this + 1);
  if (v2) {
    return (void *)google::protobuf::MessageLite::SerializeAsString(v2, (uint64_t)a2);
  }
  else {
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

double sentencepiece::SentencePieceProcessor::SentencePieceProcessor(sentencepiece::SentencePieceProcessor *this)
{
  *(void *)this = &unk_270972928;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void sentencepiece::SentencePieceProcessor::~SentencePieceProcessor(void **this)
{
  *this = &unk_270972928;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  uint64_t v2 = this[11];
  this[11] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
  long long v3 = this[8];
  if (v3)
  {
    this[9] = v3;
    operator delete(v3);
  }
  uint64_t v4 = this[5];
  if (v4)
  {
    this[6] = v4;
    operator delete(v4);
  }
  long long v5 = this[4];
  this[4] = 0;
  if (v5) {
    (*(void (**)(void *))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = this[3];
  this[3] = 0;
  if (v6) {
    (*(void (**)(void *))(*(void *)v6 + 8))(v6);
  }
  unint64_t v7 = this[2];
  this[2] = 0;
  if (v7) {
    (*(void (**)(void *))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = this[1];
  this[1] = 0;
  if (v8) {
    (*(void (**)(void *))(*(void *)v8 + 8))(v8);
  }
}

{
  uint64_t vars8;

  sentencepiece::SentencePieceProcessor::~SentencePieceProcessor(this);

  JUMPOUT(0x26117ABD0);
}

uint64_t sentencepiece::IsMMappableFile()
{
  v3[19] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v1);
  if ((v2[*(void *)(v1[0] - 24) + 16] & 5) == 0) {
    std::istream::read();
  }
  v1[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x26117A930](v2);
  std::istream::~istream();
  MEMORY[0x26117AB30](v3);
  return 0;
}

void sub_25BFB0A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  long long v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x26117A920](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_25BFB0BE8(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x26117AB30](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x26117A930](a1 + 2);
  std::istream::~istream();
  MEMORY[0x26117AB30](a1 + 53);
  return a1;
}

uint64_t sentencepiece::SentencePieceProcessor::Load(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sentencepiece::IsMMappableFile()) {
    absl::make_unique<sentencepiece::ModelProto>();
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64);

  return v6(a1, a2, a3);
}

void sub_25BFB0E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, sentencepiece::ModelProto *a9, sentencepiece::ModelProto *a10)
{
}

void absl::make_unique<sentencepiece::ModelProto>()
{
}

void sub_25BFB0EAC(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::io::LoadModelProto@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (a1) {
    sentencepiece::filesystem::NewReadableFile();
  }

  return sentencepiece::util::Status::Status(a2, 5, "model file path should not be empty.", 36);
}

void sub_25BFB1254(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  uint64_t v3 = *(void *)(v1 - 56);
  *(void *)(v1 - 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::LoadOrDie(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 16))(&v10);
  if (v10)
  {
    char v9 = 1;
    uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"(", 1);
    uint64_t v2 = (void *)std::ostream::operator<<();
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") [", 3);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_status.ok()", 12);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"] ", 2);
    sentencepiece::util::Status::ToString((sentencepiece::util::Status *)&v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
}

void sub_25BFB13DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)(v15 - 25));
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)(v15 - 24));
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Load(sentencepiece::SentencePieceProcessor *this, const sentencepiece::ModelProto *a2)
{
}

void sub_25BFB14E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, sentencepiece::ModelProto *a9, sentencepiece::ModelProto *a10)
{
}

void sentencepiece::SentencePieceProcessor::LoadFromSerializedProto()
{
}

void sub_25BFB1768(_Unwind_Exception *a1)
{
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100]((sentencepiece::ModelProto **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Load(sentencepiece::logging *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(unsigned char **)(*a2 + 88);
  if (!v5) {
    uint64_t v5 = &sentencepiece::_NormalizerSpec_default_instance_;
  }
  if (v5[80])
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 0)
    {
      LOBYTE(__v.__first_) = 0;
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
      uint64_t v7 = (void *)std::ostream::operator<<();
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
      char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"INFO", 4);
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__v);
    }
    uint64_t v4 = *a2;
    *(_DWORD *)(v4 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    uint64_t v12 = *(void *)(v4 + 80);
    if (!v12)
    {
      uint64_t v13 = *(void *)(v4 + 8);
      uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFELL);
      if (v13) {
        uint64_t v14 = (void *)*v14;
      }
      uint64_t v12 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>((uint64_t)v14);
      *(void *)(v4 + 8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v12;
      uint64_t v4 = *a2;
    }
    *(_DWORD *)(v12 + 40) |= 0x4000u;
    *(unsigned char *)(v12 + 245) = 1;
    *(_DWORD *)(v4 + 48) |= 2u;
    uint64_t v15 = *(void *)(v4 + 88);
    if (!v15)
    {
      uint64_t v16 = *(void *)(v4 + 8);
      uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
      if (v16) {
        uint64_t v17 = (void *)*v17;
      }
      uint64_t v15 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v17);
      *(void *)(v4 + 88) = v15;
      uint64_t v4 = *a2;
    }
    *(_DWORD *)(v15 + 48) |= 0x10u;
    *(unsigned char *)(v15 + 81) = 1;
  }
  *a2 = 0;
  if (v4) {
    uint64_t v18 = v4 + 16;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *((void *)a1 + 4);
  *((void *)a1 + 4) = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    uint64_t v18 = *((void *)a1 + 4);
  }
  sentencepiece::ModelFactory::Create((sentencepiece::ModelFactory *)(v18 - 16), &__v);
  std::__split_buffer<std::string>::pointer first = __v.__first_;
  __v.__first_ = 0;
  uint64_t v21 = *((void *)a1 + 1);
  *((void *)a1 + 1) = first;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    std::__split_buffer<std::string>::pointer v22 = __v.__first_;
    __v.__first_ = 0;
    if (v22) {
      (*(void (**)(std::__split_buffer<std::string>::pointer))(v22->__r_.__value_.__r.__words[0] + 8))(v22);
    }
  }
  absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&,sentencepiece::TrainerSpec const&>();
}

void sub_25BFB213C(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *a8, uint64_t a9, int __pa, __int16 __p_4, char __p_6, char __p_7, uint64_t a14, uint64_t a15, void *a16, char a17, uint64_t a18, uint64_t a19, std::__split_buffer<std::string> *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
}

void absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&,sentencepiece::TrainerSpec const&>()
{
}

void sub_25BFB2254(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&>()
{
}

void sub_25BFB22CC(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void absl::StrCat<char [2],std::string,char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  size_t v12 = strlen(a3);
  absl::StrCat<std::string,char [2],std::string>(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_25BFB23C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::SetEncodeExtraOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
}

void sentencepiece::SentencePieceProcessor::ParseExtraOptions(sentencepiece::ModelInterface **a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  v46[19] = *MEMORY[0x263EF8340];
  a4[1] = *a4;
  if (a3)
  {
    (*((void (**)(sentencepiece::ModelInterface **))*a1 + 11))(a1);
    if (!*(void *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      {
        long long v42 = xmmword_2654A9530;
        *(_OWORD *)std::string __p = unk_2654A9540;
        long long v44 = xmmword_2654A9550;
        uint64_t v45 = 3;
        long long v38 = xmmword_2654A94F0;
        long long v39 = unk_2654A9500;
        long long v40 = xmmword_2654A9510;
        long long v41 = *(_OWORD *)&off_2654A9520;
        std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::map[abi:ne180100]((uint64_t)&sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, (uint64_t)&v38, 5);
        __cxa_atexit((void (*)(void *))std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::~map[abi:ne180100], &sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, &dword_25BF41000);
      }
      absl::internal::Splitter::Splitter((char **)&v36, a2, a3, ":", 1, 0);
      uint64_t v10 = (uint64_t *)v36;
      uint64_t v11 = v37;
      if (v36 == v37)
      {
LABEL_29:
        if (v10)
        {
          uint64_t v37 = v10;
          operator delete(v10);
        }
        sentencepiece::util::Status::Status(a5);
      }
      else
      {
        while (1)
        {
          size_t v12 = std::__tree<std::string_view>::find<std::string_view>((uint64_t)&sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, (uint64_t)v10);
          uint64_t v13 = v12;
          if (v12 == (void *)&unk_26A587BF8) {
            break;
          }
          uint64_t v15 = a4[1];
          unint64_t v14 = (unint64_t)a4[2];
          if ((unint64_t)v15 >= v14)
          {
            uint64_t v17 = *a4;
            uint64_t v18 = (v15 - *a4) >> 2;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v20 = v14 - (void)v17;
            if (v20 >> 1 > v19) {
              unint64_t v19 = v20 >> 1;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              std::__split_buffer<std::string>::pointer v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v21);
              uint64_t v17 = *a4;
              uint64_t v15 = a4[1];
            }
            else
            {
              std::__split_buffer<std::string>::pointer v22 = 0;
            }
            uint64_t v23 = &v22[4 * v18];
            *(_DWORD *)uint64_t v23 = *((_DWORD *)v13 + 12);
            uint64_t v16 = v23 + 4;
            while (v15 != v17)
            {
              int v24 = *((_DWORD *)v15 - 1);
              v15 -= 4;
              *((_DWORD *)v23 - 1) = v24;
              v23 -= 4;
            }
            *a4 = v23;
            a4[1] = v16;
            a4[2] = &v22[4 * v21];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v15 = *((_DWORD *)v12 + 12);
            uint64_t v16 = v15 + 4;
          }
          a4[1] = v16;
          int v25 = *((_DWORD *)v13 + 12);
          if (v25 == 1)
          {
            uint64_t v26 = sentencepiece::ModelInterface::bos_piece(a1[1]);
            size_t v27 = strlen(v26);
            uint64_t v28 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v26, v27);
            if ((*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v28))
            {
              LODWORD(v38) = 13;
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v38 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"] ", 2);
              unsigned int v32 = sentencepiece::ModelInterface::bos_piece(a1[1]);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)v32, v33);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v38, (uint64_t)a5);
              goto LABEL_40;
            }
            int v25 = *((_DWORD *)v13 + 12);
          }
          if (v25 == 2)
          {
            uint64_t v29 = sentencepiece::ModelInterface::eos_piece(a1[1]);
            size_t v30 = strlen(v29);
            uint64_t v31 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v29, v30);
            if ((*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v31))
            {
              LODWORD(v38) = 13;
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v38 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"] ", 2);
              int v34 = sentencepiece::ModelInterface::eos_piece(a1[1]);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)v34, v35);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v38, (uint64_t)a5);
LABEL_40:
              *((void *)&v38 + 1) = *MEMORY[0x263F8C2C8];
              *(void *)((char *)&v38 + *(void *)(*((void *)&v38 + 1) - 24) + 8) = *(void *)(MEMORY[0x263F8C2C8] + 24);
              *(void *)&long long v39 = MEMORY[0x263F8C318] + 16;
              if (SBYTE7(v44) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_42;
            }
          }
          v10 += 2;
          if (v10 == v11)
          {
            uint64_t v10 = (uint64_t *)v36;
            goto LABEL_29;
          }
        }
        LODWORD(v38) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v38 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"option \"", 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, *v10, v10[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v38 + 1, (uint64_t)"\" is not available.", 19);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v38, (uint64_t)a5);
        *((void *)&v38 + 1) = *MEMORY[0x263F8C2C8];
        *(void *)((char *)&v38 + *(void *)(*((void *)&v38 + 1) - 24) + 8) = *(void *)(MEMORY[0x263F8C2C8]
                                                                                              + 24);
        *(void *)&long long v39 = MEMORY[0x263F8C318] + 16;
        if (SBYTE7(v44) < 0) {
          operator delete(__p[0]);
        }
LABEL_42:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x26117AB30](v46);
        if (v36)
        {
          uint64_t v37 = (uint64_t *)v36;
          operator delete(v36);
        }
      }
    }
  }
  else
  {
    sentencepiece::util::Status::Status(a5);
  }
}

void sub_25BFB2C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void sentencepiece::SentencePieceProcessor::SetDecodeExtraOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
}

void *sentencepiece::SentencePieceProcessor::status@<X0>(sentencepiece::SentencePieceProcessor *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    if (*((void *)this + 2))
    {
      double result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      if (!*(void *)a2)
      {
        sentencepiece::util::Status::~Status(a2);
        double result = (void *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
        if (!*(void *)a2)
        {
          sentencepiece::util::Status::~Status(a2);
          return sentencepiece::util::Status::Status(v6);
        }
      }
      return result;
    }
    unsigned int v9 = 13;
    uint64_t v8 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"normalizer_", 11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a2);
  }
  else
  {
    unsigned int v9 = 13;
    uint64_t v7 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"model_", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Model is not initialized.", 25);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a2);
  }
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x26117AB30](&v12);
}

void sub_25BFB2FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sentencepiece::SentencePieceProcessor::SetVocabulary(void *a1@<X0>, _OWORD **a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  if (*(void *)a3) {
    return;
  }
  sentencepiece::util::Status::~Status(a3);
  uint64_t v6 = (const void *)a1[4];
  if (!v6
  {
    unsigned int v23 = 13;
    uint64_t v20 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v23, (uint64_t)a3);
LABEL_27:
    v24[0] = *(void **)MEMORY[0x263F8C2C8];
    *(void **)((char *)v24 + *(v24[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
    v24[1] = (void *)(MEMORY[0x263F8C318] + 16);
    if (v25 < 0) {
      operator delete(v24[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x26117AB30](&v26);
    return;
  }
  uint64_t v8 = v7;
  unsigned int v9 = &sentencepiece::_TrainerSpec_default_instance_;
  if (v7[10]) {
    unsigned int v9 = (_DWORD *)v7[10];
  }
  if ((v9[68] - 1) >= 2)
  {
    unsigned int v23 = 13;
    unint64_t v21 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v23, (uint64_t)a3);
    goto LABEL_27;
  }
  std::set<std::string_view>::set[abi:ne180100]<std::__wrap_iter<std::string_view const*>>((uint64_t)&v23, *a2, a2[1]);
  if (*((int *)v8 + 16) >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)(v8 + 7), v10);
      uint64_t v12 = v11;
      if ((*(_DWORD *)(v11 + 60) - 2) >= 3)
      {
        unint64_t v13 = *(void *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v13 + 23) < 0)
        {
          unint64_t v15 = *(void *)v13;
          uint64_t v14 = *(void *)(v13 + 8);
        }
        else
        {
          uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
          unint64_t v15 = *(void *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v22[0] = v15;
        v22[1] = v14;
        if (v24 == std::__tree<std::string_view>::find<std::string_view>((uint64_t)&v23, (uint64_t)v22)
          && ((unint64_t v16 = *(void *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v16 + 23) < 0)
            ? (unsigned __int8 *)(v18 = *(unsigned __int8 **)v16, uint64_t v17 = *(void *)(v16 + 8))
            : (uint64_t v17 = *(unsigned __int8 *)(v16 + 23),
               uint64_t v18 = (unsigned __int8 *)(*(void *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v17 != asc_25C005013[(unint64_t)*v18 >> 4]))
        {
          if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)5)) {
LABEL_32:
          }
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          int v19 = 5;
        }
        else
        {
          if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)1)) {
            goto LABEL_32;
          }
          int v19 = 1;
        }
        *(_DWORD *)(v12 + 40) |= 4u;
        *(_DWORD *)(v12 + 6std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v19;
      }
      ++v10;
    }
    while (v10 < *((_DWORD *)v8 + 16));
  }
  sentencepiece::util::Status::Status(a3);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v23, v24[0]);
}

void sub_25BFB3474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void *sentencepiece::SentencePieceProcessor::ResetVocabulary@<X0>(sentencepiece::SentencePieceProcessor *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  double result = (void *)(*(uint64_t (**)(sentencepiece::SentencePieceProcessor *))(*(void *)this + 88))(this);
  if (!*(void *)a2)
  {
    sentencepiece::util::Status::~Status(a2);
    uint64_t v5 = (const void *)*((void *)this + 4);
    if (v5
    {
      uint64_t v7 = *((void *)v6 + 9);
      if (v7) {
        uint64_t v8 = (uint64_t *)(v7 + 8);
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v6[16];
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        do
        {
          uint64_t v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)1)) {
              sentencepiece::SentencePieceProcessor::ResetVocabulary();
            }
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 6std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sentencepiece::util::Status::Status(a2);
    }
    else
    {
      unsigned int v13 = 13;
      uint64_t v12 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v13, (uint64_t)a2);
      v14[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v14[1] = MEMORY[0x263F8C318] + 16;
      if (v15 < 0) {
        operator delete((void *)v14[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (void *)MEMORY[0x26117AB30](&v16);
    }
  }
  return result;
}

void sub_25BFB377C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sentencepiece::SentencePieceProcessor::LoadVocabulary()
{
}

void sub_25BFB3D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  std::string __p = (void *)(v10 - 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v10 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v10 - 105) < 0) {
    operator delete(*(void **)(v10 - 128));
  }
  uint64_t v12 = *(void *)(v10 - 104);
  *(void *)(v10 - 104) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  _Unwind_Resume(a1);
}

BOOL absl::SimpleAtoi<int>(const char *a1, uint64_t a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  size_t v5 = strlen(a1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a1, v5);
  if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0)
  {
    BOOL v7 = 0;
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x26117A970](v11, a3);
    BOOL v7 = (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) == 0;
  }
  v11[0] = *MEMORY[0x263F8C2B8];
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x263F8C318] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x26117AB30](&v14);
  return v7;
}

void sub_25BFB4044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sentencepiece::anonymous namespace'::ToPieceArray@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  double result = std::vector<std::string_view>::vector(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (void *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        uint64_t v9 = (void *)*v8;
        uint64_t v4 = v8[1];
      }
      else
      {
        uint64_t v4 = v4;
        uint64_t v9 = v8;
      }
      uint64_t v10 = (void *)(*result + v6);
      *uint64_t v10 = v9;
      v10[1] = v4;
      ++v7;
      uint64_t v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

void sentencepiece::SentencePieceProcessor::Encode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*(void *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      std::vector<std::string>::__clear[abi:ne180100](a4);
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v15, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 232))(a1, a2, a3, &v15);
      if (!*(void *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        if (v18) {
          uint64_t v10 = v18 + 8;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v17)
        {
          unint64_t v11 = a4[1];
          uint64_t v12 = 8 * v17;
          do
          {
            char v13 = (long long *)(*(void *)(*(void *)v10 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v11 >= a4[2])
            {
              unint64_t v11 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a4, v13);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v13);
              v11 += 24;
            }
            a4[1] = v11;
            v10 += 8;
            v12 -= 8;
          }
          while (v12);
        }
        sentencepiece::util::Status::Status(a5);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v15);
    }
    else
    {
      unsigned int v15 = 13;
      uint64_t v14 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v16[1] = MEMORY[0x263F8C318] + 16;
      if (v20 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x26117AB30](&v21);
    }
  }
}

void sub_25BFB43D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sentencepiece::SentencePieceProcessor::Encode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*(void *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      a4[1] = *a4;
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v25, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 232))(a1, a2, a3, &v25);
      if (!*(void *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        if (v28) {
          uint64_t v10 = v28 + 8;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v27)
        {
          unint64_t v11 = a4 + 2;
          uint64_t v12 = a4[1];
          uint64_t v13 = v10 + 8 * v27;
          do
          {
            int v14 = *(_DWORD *)(*(void *)v10 + 64);
            if ((unint64_t)v12 >= *v11)
            {
              uint64_t v16 = *a4;
              uint64_t v17 = (v12 - *a4) >> 2;
              unint64_t v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 62) {
                std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v19 = *v11 - (void)v16;
              if (v19 >> 1 > v18) {
                unint64_t v18 = v19 >> 1;
              }
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v20 = v18;
              }
              if (v20)
              {
                uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v20);
                uint64_t v16 = *a4;
                uint64_t v12 = a4[1];
              }
              else
              {
                uint64_t v21 = 0;
              }
              std::__split_buffer<std::string>::pointer v22 = &v21[4 * v17];
              *(_DWORD *)std::__split_buffer<std::string>::pointer v22 = v14;
              unsigned int v15 = v22 + 4;
              while (v12 != v16)
              {
                int v23 = *((_DWORD *)v12 - 1);
                v12 -= 4;
                *((_DWORD *)v22 - 1) = v23;
                v22 -= 4;
              }
              *a4 = v22;
              a4[1] = v15;
              a4[2] = &v21[4 * v20];
              if (v16) {
                operator delete(v16);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v12 = v14;
              unsigned int v15 = v12 + 4;
            }
            a4[1] = v15;
            v10 += 8;
            uint64_t v12 = v15;
          }
          while (v10 != v13);
        }
        sentencepiece::util::Status::Status(a5);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v25);
    }
    else
    {
      unsigned int v25 = 13;
      int v24 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v25, (uint64_t)a5);
      v26[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v26 + *(void *)(v26[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v26[1] = MEMORY[0x263F8C318] + 16;
      if (v30 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x26117AB30](&v31);
    }
  }
}

void sub_25BFB4770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

{
  void *__p[3];

  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_25BFB4828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*(void *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(unsigned char **)a3 = 0;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 23) = 0;
      }
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v9, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 272))(a1, a2, &v9);
      if (!*(void *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v10[8] & 0xFFFFFFFFFFFFFFFELL));
        sentencepiece::util::Status::Status(a4);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v9);
    }
    else
    {
      unsigned int v9 = 13;
      uint64_t v8 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"detokenized", 11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
      v10[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v10[1] = MEMORY[0x263F8C318] + 16;
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x26117AB30](&v12);
    }
  }
}

{
  void *v8;
  unsigned int v9;
  void v10[11];
  char v11;
  uint64_t v12;

  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*(void *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(unsigned char **)a3 = 0;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 23) = 0;
      }
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v9, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 280))(a1, a2, &v9);
      if (!*(void *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v10[8] & 0xFFFFFFFFFFFFFFFELL));
        sentencepiece::util::Status::Status(a4);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v9);
    }
    else
    {
      unsigned int v9 = 13;
      uint64_t v8 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"detokenized", 11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
      v10[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v10[1] = MEMORY[0x263F8C318] + 16;
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x26117AB30](&v12);
    }
  }
}

void sub_25BFB4AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_25BFB4DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sentencepiece::SentencePieceProcessor::NBestEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*(void *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      uint64_t v12 = *a5;
      uint64_t v13 = (void **)a5[1];
      while (v13 != (void **)v12)
      {
        v13 -= 3;
        char v30 = v13;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
      }
      a5[1] = v12;
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(void *)a1 + 240))(a1, a2, a3, a4, &v30);
      if (!*(void *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v33) {
          int v14 = (uint64_t *)(v33 + 8);
        }
        else {
          int v14 = 0;
        }
        if (v32)
        {
          unsigned int v15 = &v14[v32];
          do
          {
            uint64_t v16 = *v14;
            int v27 = 0;
            uint64_t v28 = 0;
            unint64_t v29 = 0;
            uint64_t v17 = *(void *)(v16 + 64);
            if (v17) {
              uint64_t v18 = v17 + 8;
            }
            else {
              uint64_t v18 = 0;
            }
            uint64_t v19 = *(int *)(v16 + 56);
            if (v19)
            {
              unint64_t v20 = 0;
              uint64_t v21 = 8 * v19;
              do
              {
                unint64_t v22 = *(void *)(*(void *)v18 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if ((unint64_t)v20 >= v29)
                {
                  unint64_t v20 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v27, (long long *)v22);
                }
                else
                {
                  if (*(char *)(v22 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v22, *(void *)(v22 + 8));
                  }
                  else
                  {
                    long long v23 = *(_OWORD *)v22;
                    v20->__r_.__value_.__r.__words[2] = *(void *)(v22 + 16);
                    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v23;
                  }
                  ++v20;
                }
                uint64_t v28 = v20;
                v18 += 8;
                v21 -= 8;
              }
              while (v21);
            }
            unint64_t v24 = a5[1];
            if (v24 >= a5[2])
            {
              uint64_t v25 = std::vector<std::vector<std::string>>::__emplace_back_slow_path<std::vector<std::string>&>(a5, &v27);
            }
            else
            {
              std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&>((uint64_t)a5, &v27);
              uint64_t v25 = v24 + 24;
            }
            a5[1] = v25;
            uint64_t v37 = &v27;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
            ++v14;
          }
          while (v14 != v15);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v30);
    }
    else
    {
      LODWORD(v3std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 13;
      uint64_t v26 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v30, (uint64_t)a6);
      v31[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v31[1] = MEMORY[0x263F8C318] + 16;
      if (v35 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x26117AB30](&v36);
    }
  }
}

{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  void *__p;
  char *v34;
  char *v35;
  unsigned int v36;
  void v37[2];
  int v38;
  uint64_t v39;
  void *v40;
  char v41;
  uint64_t v42;

  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*(void *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      std::vector<std::vector<int>>::__clear[abi:ne180100](a5);
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 240))(a1, a2, a3, a4, &v36);
      if (!*(void *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v39) {
          uint64_t v12 = (uint64_t *)(v39 + 8);
        }
        else {
          uint64_t v12 = 0;
        }
        if (v38)
        {
          int v32 = &v12[v38];
          do
          {
            uint64_t v13 = *v12;
            std::string __p = 0;
            int v34 = 0;
            char v35 = 0;
            int v14 = *(void *)(v13 + 64);
            if (v14) {
              unsigned int v15 = v14 + 8;
            }
            else {
              unsigned int v15 = 0;
            }
            uint64_t v16 = *(int *)(v13 + 56);
            if (v16)
            {
              uint64_t v17 = 0;
              uint64_t v18 = v15 + 8 * v16;
              do
              {
                uint64_t v19 = *(_DWORD *)(*(void *)v15 + 64);
                if (v17 >= v35)
                {
                  uint64_t v21 = (char *)__p;
                  unint64_t v22 = (v17 - (unsigned char *)__p) >> 2;
                  long long v23 = v22 + 1;
                  if ((unint64_t)(v22 + 1) >> 62) {
                    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v24 = v35 - (unsigned char *)__p;
                  if ((v35 - (unsigned char *)__p) >> 1 > v23) {
                    long long v23 = v24 >> 1;
                  }
                  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                    uint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    uint64_t v25 = v23;
                  }
                  if (v25)
                  {
                    uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v35, v25);
                    uint64_t v21 = (char *)__p;
                    uint64_t v17 = v34;
                  }
                  else
                  {
                    uint64_t v26 = 0;
                  }
                  int v27 = &v26[4 * v22];
                  *(_DWORD *)int v27 = v19;
                  unint64_t v20 = v27 + 4;
                  while (v17 != v21)
                  {
                    uint64_t v28 = *((_DWORD *)v17 - 1);
                    v17 -= 4;
                    *((_DWORD *)v27 - 1) = v28;
                    v27 -= 4;
                  }
                  std::string __p = v27;
                  int v34 = v20;
                  char v35 = &v26[4 * v25];
                  if (v21) {
                    operator delete(v21);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v17 = v19;
                  unint64_t v20 = v17 + 4;
                }
                int v34 = v20;
                v15 += 8;
                uint64_t v17 = v20;
              }
              while (v15 != v18);
            }
            unint64_t v29 = a5[1];
            if (v29 >= a5[2])
            {
              char v30 = std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(a5, (uint64_t)&__p);
            }
            else
            {
              std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>((uint64_t)a5, (uint64_t)&__p);
              char v30 = v29 + 24;
            }
            a5[1] = v30;
            if (__p)
            {
              int v34 = (char *)__p;
              operator delete(__p);
            }
            ++v12;
          }
          while (v12 != v32);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36);
    }
    else
    {
      uint64_t v36 = 13;
      uint64_t v31 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v36, (uint64_t)a6);
      v37[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v37 + *(void *)(v37[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v37[1] = MEMORY[0x263F8C318] + 16;
      if (v41 < 0) {
        operator delete(v40);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x26117AB30](&v42);
    }
  }
}

void sub_25BFB5170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_25BFB55B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
}

void sentencepiece::SentencePieceProcessor::SampleEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*(void *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      std::vector<std::string>::__clear[abi:ne180100](a5);
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v19, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 248))(a1, a2, a3, a4, &v19, a7);
      if (!*(void *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v22) {
          uint64_t v14 = v22 + 8;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v21)
        {
          unint64_t v15 = a5[1];
          uint64_t v16 = 8 * v21;
          do
          {
            uint64_t v17 = (long long *)(*(void *)(*(void *)v14 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v15 >= a5[2])
            {
              unint64_t v15 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a5, v17);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a5, v17);
              v15 += 24;
            }
            a5[1] = v15;
            v14 += 8;
            v16 -= 8;
          }
          while (v16);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v19);
    }
    else
    {
      unsigned int v19 = 13;
      uint64_t v18 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v19, (uint64_t)a6);
      v20[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v20[1] = MEMORY[0x263F8C318] + 16;
      if (v24 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x26117AB30](&v25);
    }
  }
}

void sub_25BFB58F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sentencepiece::SentencePieceProcessor::SampleEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*(void *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      a5[1] = *a5;
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v29, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 248))(a1, a2, a3, a4, &v29, a7);
      if (!*(void *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v32) {
          uint64_t v14 = v32 + 8;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v31)
        {
          unint64_t v15 = a5 + 2;
          uint64_t v16 = a5[1];
          uint64_t v17 = v14 + 8 * v31;
          do
          {
            int v18 = *(_DWORD *)(*(void *)v14 + 64);
            if ((unint64_t)v16 >= *v15)
            {
              unint64_t v20 = *a5;
              uint64_t v21 = (v16 - *a5) >> 2;
              unint64_t v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62) {
                std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v23 = *v15 - (void)v20;
              if (v23 >> 1 > v22) {
                unint64_t v22 = v23 >> 1;
              }
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v22;
              }
              if (v24)
              {
                uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a5 + 2), v24);
                unint64_t v20 = *a5;
                uint64_t v16 = a5[1];
              }
              else
              {
                uint64_t v25 = 0;
              }
              uint64_t v26 = &v25[4 * v21];
              *(_DWORD *)uint64_t v26 = v18;
              unsigned int v19 = v26 + 4;
              while (v16 != v20)
              {
                int v27 = *((_DWORD *)v16 - 1);
                v16 -= 4;
                *((_DWORD *)v26 - 1) = v27;
                v26 -= 4;
              }
              *a5 = v26;
              a5[1] = v19;
              a5[2] = &v25[4 * v24];
              if (v20) {
                operator delete(v20);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v16 = v18;
              unsigned int v19 = v16 + 4;
            }
            a5[1] = v19;
            v14 += 8;
            uint64_t v16 = v19;
          }
          while (v14 != v17);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v29);
    }
    else
    {
      unsigned int v29 = 13;
      uint64_t v28 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v29, (uint64_t)a6);
      v30[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v30 + *(void *)(v30[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v30[1] = MEMORY[0x263F8C318] + 16;
      if (v34 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x26117AB30](&v35);
    }
  }
}

void sub_25BFB5CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScore(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, sentencepiece::util::Status *a8@<X8>, float a9@<S0>)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*(void *)a8)
  {
    sentencepiece::util::Status::~Status(a8);
    if (a7)
    {
      uint64_t v18 = *a7;
      unsigned int v19 = (void **)a7[1];
      while (v19 != (void **)v18)
      {
        v19 -= 4;
        uint64_t v36 = v19;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
      }
      a7[1] = v18;
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(void *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v36, a9);
      if (!*(void *)a8)
      {
        sentencepiece::util::Status::~Status(a8);
        unint64_t v20 = (std::string *)*a7;
        uint64_t v21 = (std::string *)a7[1];
        while (v21 != v20)
        {
          uint64_t v21 = (std::string *)((char *)v21 - 32);
          v35.__begin_ = v21;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
        }
        a7[1] = (uint64_t)v20;
        std::vector<std::pair<std::vector<std::string>,float>>::reserve(a7, v38);
        if (v39) {
          uint64_t v23 = (uint64_t *)(v39 + 8);
        }
        else {
          uint64_t v23 = 0;
        }
        if (v38)
        {
          unint64_t v24 = &v23[v38];
          do
          {
            uint64_t v25 = *v23;
            memset(&v35, 0, sizeof(v35));
            std::vector<std::string>::reserve(&v35, *(int *)(v25 + 56));
            uint64_t v26 = *(void *)(v25 + 64);
            if (v26) {
              uint64_t v27 = v26 + 8;
            }
            else {
              uint64_t v27 = 0;
            }
            uint64_t v28 = *(int *)(v25 + 56);
            if (v28)
            {
              std::vector<int>::pointer end = v35.__end_;
              uint64_t v30 = 8 * v28;
              do
              {
                unint64_t v31 = *(void *)(*(void *)v27 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (end >= v35.__end_cap_.__value_)
                {
                  std::vector<int>::pointer end = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v35, (long long *)v31);
                }
                else
                {
                  if (*(char *)(v31 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v31, *(void *)(v31 + 8));
                  }
                  else
                  {
                    long long v32 = *(_OWORD *)v31;
                    end->__r_.__value_.__r.__words[2] = *(void *)(v31 + 16);
                    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v32;
                  }
                  ++end;
                }
                v35.__end_ = end;
                v27 += 8;
                v30 -= 8;
              }
              while (v30);
            }
            LODWORD(v43[0]) = *(_DWORD *)(v25 + 80);
            unint64_t v33 = a7[1];
            if (v33 >= a7[2])
            {
              uint64_t v34 = std::vector<std::pair<std::vector<std::string>,float>>::__emplace_back_slow_path<std::vector<std::string>&,float>(a7, (long long **)&v35, v43);
            }
            else
            {
              std::vector<std::pair<std::vector<std::string>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&,float>((uint64_t)a7, (long long **)&v35, (float *)v43);
              uint64_t v34 = v33 + 32;
            }
            a7[1] = v34;
            v43[0] = (void **)&v35;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v43);
            ++v23;
          }
          while (v23 != v24);
        }
        sentencepiece::util::Status::Status(a8);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36);
    }
    else
    {
      LODWORD(v36) = 13;
      unint64_t v22 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v36, (uint64_t)a8);
      v37[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v37 + *(void *)(v37[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v37[1] = MEMORY[0x263F8C318] + 16;
      if (v41 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x26117AB30](&v42);
    }
  }
}

{
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::vector<int>::pointer end;
  int v25;
  int *v26;
  std::vector<int>::pointer begin;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  int *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  sentencepiece::util::Status *v38;
  uint64_t *v39;
  int v40;
  std::vector<int> v41;
  unsigned int v42;
  void v43[2];
  int v44;
  uint64_t v45;
  void *__p;
  char v47;
  uint64_t v48;

  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*(void *)a8)
  {
    sentencepiece::util::Status::~Status(a8);
    if (a7)
    {
      std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](a7);
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v42, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v42, a9);
      if (!*(void *)a8)
      {
        int v38 = a8;
        sentencepiece::util::Status::~Status(a8);
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](a7);
        std::vector<std::pair<std::vector<int>,float>>::reserve(a7, v44);
        if (v45) {
          uint64_t v18 = (uint64_t *)(v45 + 8);
        }
        else {
          uint64_t v18 = 0;
        }
        if (v44)
        {
          uint64_t v39 = &v18[v44];
          do
          {
            unsigned int v19 = *v18;
            memset(&v41, 0, sizeof(v41));
            std::vector<int>::reserve(&v41, *(int *)(v19 + 56));
            unint64_t v20 = *(void *)(v19 + 64);
            if (v20) {
              uint64_t v21 = v20 + 8;
            }
            else {
              uint64_t v21 = 0;
            }
            unint64_t v22 = *(int *)(v19 + 56);
            if (v22)
            {
              uint64_t v23 = v21 + 8 * v22;
              std::vector<int>::pointer end = v41.__end_;
              do
              {
                uint64_t v25 = *(_DWORD *)(*(void *)v21 + 64);
                if (end >= v41.__end_cap_.__value_)
                {
                  std::vector<int>::pointer begin = v41.__begin_;
                  uint64_t v28 = end - v41.__begin_;
                  unsigned int v29 = v28 + 1;
                  if ((unint64_t)(v28 + 1) >> 62) {
                    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v30 = (char *)v41.__end_cap_.__value_ - (char *)v41.__begin_;
                  if (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 1 > v29) {
                    unsigned int v29 = v30 >> 1;
                  }
                  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v31 = v29;
                  }
                  if (v31)
                  {
                    long long v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v41.__end_cap_, v31);
                    std::vector<int>::pointer begin = v41.__begin_;
                    std::vector<int>::pointer end = v41.__end_;
                  }
                  else
                  {
                    long long v32 = 0;
                  }
                  unint64_t v33 = (int *)&v32[4 * v28];
                  *unint64_t v33 = v25;
                  uint64_t v26 = v33 + 1;
                  while (end != begin)
                  {
                    uint64_t v34 = *--end;
                    *--unint64_t v33 = v34;
                  }
                  v41.__begin_ = v33;
                  v41.__end_ = v26;
                  v41.__end_cap_.__value_ = (int *)&v32[4 * v31];
                  if (begin) {
                    operator delete(begin);
                  }
                }
                else
                {
                  *std::vector<int>::pointer end = v25;
                  uint64_t v26 = end + 1;
                }
                v41.__end_ = v26;
                v21 += 8;
                std::vector<int>::pointer end = v26;
              }
              while (v21 != v23);
            }
            long long v40 = *(_DWORD *)(v19 + 80);
            std::vector<std::string> v35 = a7[1];
            if (v35 >= a7[2])
            {
              uint64_t v36 = std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int>&,float>(a7, (uint64_t)&v41, &v40);
            }
            else
            {
              std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&,float>((uint64_t)a7, (uint64_t)&v41, (float *)&v40);
              uint64_t v36 = v35 + 32;
            }
            a7[1] = v36;
            if (v41.__begin_)
            {
              v41.__end_ = v41.__begin_;
              operator delete(v41.__begin_);
            }
            ++v18;
          }
          while (v18 != v39);
        }
        sentencepiece::util::Status::Status(v38);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v42);
    }
    else
    {
      uint64_t v42 = 13;
      uint64_t v37 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v42, (uint64_t)a8);
      v43[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v43 + *(void *)(v43[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v43[1] = MEMORY[0x263F8C318] + 16;
      if (v47 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x26117AB30](&v48);
    }
  }
}

void sub_25BFB6100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::vector<std::string>,float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  double result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 32 * v6;
    std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(v7);
  }
  return result;
}

void sub_25BFB61D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_25BFB6288(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_25BFB6700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_25BFB67CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    unint64_t v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unsigned int v9 = (int *)&v6[4 * v8];
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<int>::pointer end = this->__end_;
    uint64_t v12 = v7;
    if (end != this->__begin_)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *--end;
        *--uint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void *sentencepiece::SentencePieceProcessor::PopulateSentencePieceText@<X0>(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, unsigned __int8 ***a6@<X6>, uint64_t a7@<X7>, sentencepiece::util::Status *a8@<X8>)
{
  uint64_t v10 = *a6;
  uint64_t v110 = a6[1];
  if (*a6 != v110)
  {
    char v11 = a5;
    unint64_t v12 = 0;
    char v13 = 0;
    uint64_t v112 = (unsigned int *)(a7 + 48);
    while (1)
    {
      size_t v14 = (size_t)v10[1];
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        unint64_t v97 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"!w.empty()", 10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      unint64_t v15 = *v10;
      uint64_t v16 = *((unsigned int *)v10 + 4);
      int v111 = (*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v16);
      if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 67))(a1, v16))
      {
        uint64_t v17 = *(int **)(a7 + 64);
        if (v17)
        {
          uint64_t v18 = *(int *)(a7 + 56);
          int v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            uint64_t v20 = *(void *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            std::string::basic_string[abi:ne180100](__p, v15, v14);
            uint64_t v53 = *(void *)(v20 + 8);
            BOOL v54 = (google::protobuf::internal::ArenaImpl *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if (v53) {
              BOOL v54 = *(google::protobuf::internal::ArenaImpl **)v54;
            }
            google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 48), (long long *)__p, v54);
            if (SHIBYTE(v117) < 0) {
              operator delete(__p[0]);
            }
            int v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            uint64_t v56 = *(void *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            *uint64_t v17 = v19 + 1;
            uint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(void *)(a7 + 48));
            uint64_t v51 = *(void *)(a7 + 64);
            uint64_t v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(void *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          int v19 = *(_DWORD *)(a7 + 60);
        }
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v19 + 1);
        uint64_t v17 = *(int **)(a7 + 64);
        int v19 = *v17;
        goto LABEL_57;
      }
      uint64_t v21 = *v11;
      uint64_t v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        uint64_t v98 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        uint64_t v99 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v24 = *(void *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        uint64_t v100 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v25 = *(void *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        unint64_t v101 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        uint64_t v102 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24) {
        size_t v27 = v24;
      }
      else {
        size_t v27 = a3;
      }
      uint64_t v28 = &a2[v27];
      size_t v29 = a3 - v27;
      if (v29 < v26) {
        size_t v26 = v29;
      }
      __src = v28;
      size_t __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(sentencepiece::ModelInterface *))(*(void *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            unsigned int v31 = *v15++;
            uint64_t v30 = (sentencepiece *)v31;
            long long v32 = *(int **)(a7 + 64);
            if (!v32) {
              break;
            }
            uint64_t v33 = *(int *)(a7 + 56);
            int v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v34 + 1);
                long long v32 = *(int **)(a7 + 64);
                int v34 = *v32;
              }
              int *v32 = v34 + 1;
              uint64_t v35 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(void *)(a7 + 48));
              uint64_t v36 = *(void *)(a7 + 64);
              uint64_t v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(void *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            uint64_t v35 = *(void *)&v32[2 * v33 + 2];
LABEL_27:
            sentencepiece::ByteToPiece(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_dst = &__dst;
            }
            else {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __dst.__r_.__value_.__l.__size_;
            }
            int v40 = (*(uint64_t (**)(sentencepiece::ModelInterface *, std::string *, std::string::size_type))(*(void *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v41 = &__dst;
            }
            else {
              char v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v42 = __dst.__r_.__value_.__l.__size_;
            }
            *(_DWORD *)(v35 + 40) |= 1u;
            std::string::basic_string[abi:ne180100](__p, v41, v42);
            uint64_t v43 = *(void *)(v35 + 8);
            long long v44 = (google::protobuf::internal::ArenaImpl *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if (v43) {
              long long v44 = *(google::protobuf::internal::ArenaImpl **)v44;
            }
            google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v35 + 48), (long long *)__p, v44);
            if (SHIBYTE(v117) < 0) {
              operator delete(__p[0]);
            }
            int v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v45 | 6;
              std::string::basic_string[abi:ne180100](__p, __src, __len);
              uint64_t v46 = *(void *)(v35 + 8);
              int v47 = (google::protobuf::internal::ArenaImpl *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if (v46) {
                int v47 = *(google::protobuf::internal::ArenaImpl **)v47;
              }
              google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v35 + 56), (long long *)__p, v47);
              if (SHIBYTE(v117) < 0) {
                operator delete(__p[0]);
              }
              int v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              int v49 = v48 | 0x18;
              int v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              int v49 = v45 | 0x1C;
              int v50 = v24;
            }
            *(_DWORD *)(v35 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (!--v14)
            {
              unint64_t v12 = v23;
              char v11 = a5;
              goto LABEL_84;
            }
          }
          int v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if (v13)
        {
          uint64_t v57 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_141;
          }
          uint64_t v20 = v57;
          uint64_t v58 = *(void *)(v57 + 48);
          uint64_t v104 = (google::protobuf::internal::ArenaStringPtr *)(v57 + 48);
          if (v14 >= 0x17)
          {
            uint64_t v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17) {
              uint64_t v71 = v14 | 7;
            }
            uint64_t v103 = v71 + 1;
            char v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
            char v59 = &__dst;
          }
          unint64_t v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          int v73 = *(char *)(v72 + 23);
          if (v73 >= 0) {
            uint64_t v74 = (const std::string::value_type *)v72;
          }
          else {
            uint64_t v74 = *(const std::string::value_type **)v72;
          }
          if (v73 >= 0) {
            std::string::size_type v75 = *(unsigned __int8 *)(v72 + 23);
          }
          else {
            std::string::size_type v75 = *(void *)(v72 + 8);
          }
          uint64_t v76 = std::string::insert(&__dst, 0, v74, v75);
          long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          uint64_t v117 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          uint64_t v78 = *(void *)(v20 + 8);
          uint64_t v79 = (google::protobuf::internal::ArenaImpl *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          size_t v80 = __len;
          if (v78) {
            uint64_t v79 = *(google::protobuf::internal::ArenaImpl **)v79;
          }
          google::protobuf::internal::ArenaStringPtr::Set(v104, (long long *)__p, v79);
          if (SHIBYTE(v117) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (__len > 0x7FFFFFFFFFFFFFF7) {
LABEL_141:
          }
            std::string::__throw_length_error[abi:ne180100]();
          uint64_t v81 = *(void *)(v20 + 56);
          if (__len >= 0x17)
          {
            uint64_t v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17) {
              uint64_t v83 = __len | 7;
            }
            uint64_t v84 = v83 + 1;
            uint64_t v82 = (std::string *)operator new(v83 + 1);
            unint64_t v85 = v84 | 0x8000000000000000;
            size_t v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
            uint64_t v82 = &__dst;
            if (!__len) {
              goto LABEL_109;
            }
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          int v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0) {
            uint64_t v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          }
          else {
            uint64_t v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          }
          if (v86 >= 0) {
            std::string::size_type v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          }
          else {
            std::string::size_type v88 = *(void *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          unint64_t v89 = std::string::insert(&__dst, 0, v87, v88);
          long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          uint64_t v117 = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          uint64_t v91 = *(void *)(v20 + 8);
          uint64_t v92 = (google::protobuf::internal::ArenaImpl *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          char v11 = a5;
          if (v91) {
            uint64_t v92 = *(google::protobuf::internal::ArenaImpl **)v92;
          }
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 56), (long long *)__p, v92);
          if (SHIBYTE(v117) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          unint64_t v12 = v23;
          goto LABEL_83;
        }
      }
      uint64_t v60 = *(int **)(a7 + 64);
      if (!v60) {
        break;
      }
      uint64_t v61 = *(int *)(a7 + 56);
      int v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v62 + 1);
          uint64_t v60 = *(int **)(a7 + 64);
          int v62 = *v60;
        }
        *uint64_t v60 = v62 + 1;
        uint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(void *)(a7 + 48));
        uint64_t v63 = *(void *)(a7 + 64);
        uint64_t v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(void *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      uint64_t v20 = *(void *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      std::string::basic_string[abi:ne180100](__p, v15, v14);
      uint64_t v65 = *(void *)(v20 + 8);
      uint64_t v66 = (google::protobuf::internal::ArenaImpl *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if (v65) {
        uint64_t v66 = *(google::protobuf::internal::ArenaImpl **)v66;
      }
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 48), (long long *)__p, v66);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      int v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v67 | 6;
      std::string::basic_string[abi:ne180100](__p, __src, __len);
      uint64_t v68 = *(void *)(v20 + 8);
      uint64_t v69 = (google::protobuf::internal::ArenaImpl *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if (v68) {
        uint64_t v69 = *(google::protobuf::internal::ArenaImpl **)v69;
      }
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 56), (long long *)__p, v69);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      int v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v70 | 0x18;
      LODWORD(v56) = v25;
      unint64_t v12 = v23;
      char v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      size_t v23 = v12;
LABEL_84:
      v10 += 3;
      char v13 = v111;
      if (v10 == v110) {
        goto LABEL_123;
      }
    }
    int v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  size_t v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    uint64_t result = sentencepiece::SentencePieceProcessor::ApplyExtraOptions(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*(void *)a8)
    {
      sentencepiece::util::Status::~Status(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      std::string::basic_string[abi:ne180100](__p, a2, a3);
      uint64_t v94 = *(void *)(a7 + 8);
      uint64_t v95 = (google::protobuf::internal::ArenaImpl *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if (v94) {
        uint64_t v95 = *(google::protobuf::internal::ArenaImpl **)v95;
      }
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(a7 + 72), (long long *)__p, v95);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      return sentencepiece::util::Status::Status(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  unint64_t v96 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  __p[1] = *(void **)MEMORY[0x263F8C2C8];
  *(void **)((char *)&__p[1] + *((void *)__p[1] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
  uint64_t v117 = MEMORY[0x263F8C318] + 16;
  if (v119 < 0) {
    operator delete(v118);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x26117AB30](&v120);
}

void sub_25BFB7650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sentencepiece::SentencePieceProcessor::ApplyExtraOptions@<X0>(sentencepiece::ModelInterface **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(_DWORD **)a2;
  int64_t v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    unsigned int v9 = (unsigned int *)(a3 + 48);
    while (1)
    {
      switch(*v6)
      {
        case 0:
          uint64_t v10 = *(void *)(a3 + 64);
          if (v10) {
            unint64_t v11 = v10 + 8;
          }
          else {
            unint64_t v11 = 0;
          }
          uint64_t v12 = *(int *)(a3 + 56);
          char v13 = (sentencepiece::SentencePieceText_SentencePiece **)(v11 + 8 * v12 - 8);
          if (v12) {
            BOOL v14 = (unint64_t)v13 > v11;
          }
          else {
            BOOL v14 = 0;
          }
          if (v14)
          {
            unint64_t v15 = v11 + 8;
            do
            {
              uint64_t v16 = *v13--;
              sentencepiece::swap(*(uint64_t **)(v15 - 8), v16, (sentencepiece::SentencePieceText_SentencePiece *)a3);
              BOOL v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          uint64_t v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            int v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v20 + 1);
            uint64_t v18 = *(int **)(a3 + 64);
            int v20 = *v18;
            goto LABEL_35;
          }
          int v19 = *(_DWORD *)(a3 + 56);
          int v20 = *v18;
          if (v19 < *v18)
          {
            int v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60)) {
            goto LABEL_34;
          }
LABEL_35:
          int *v18 = v20 + 1;
          uint64_t v32 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(void *)(a3 + 48));
          uint64_t v33 = *(void *)(a3 + 64);
          uint64_t v34 = *(int *)(a3 + 56);
          int v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(void *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            unint64_t v35 = v21;
            do
            {
              uint64_t v36 = *(void *)(a3 + 64) + 8;
              uint64_t v37 = *(void *)(v36 + 8 * (v35 - 2));
              *(void *)(v36 + 8 * (v35 - 2)) = *(void *)(v36 + 8 * (v35 - 1));
              *(void *)(v36 + 8 * (v35 - 1)) = v37;
              BOOL v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            int v38 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (index) < (current_size_): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
          }
          uint64_t v39 = *(void *)(*(void *)(a3 + 64) + 8);
          int v40 = sentencepiece::ModelInterface::bos_piece(a1[1]);
          size_t v41 = strlen(v40);
          int v42 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          uint64_t v43 = (char *)sentencepiece::ModelInterface::bos_piece(a1[1]);
          sentencepiece::ModelInterface::bos_piece(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          std::string::basic_string[abi:ne180100](__p, v43, v44);
          uint64_t v45 = *(void *)(v39 + 8);
          uint64_t v46 = (google::protobuf::internal::ArenaImpl *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if (v45) {
            uint64_t v46 = *(google::protobuf::internal::ArenaImpl **)v46;
          }
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v39 + 48), (long long *)__p, v46);
          goto LABEL_50;
        case 2:
          uint64_t v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            int v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v24 + 1);
            uint64_t v22 = *(int **)(a3 + 64);
            int v24 = *v22;
            goto LABEL_46;
          }
          uint64_t v23 = *(int *)(a3 + 56);
          int v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            uint64_t v25 = *(void *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60)) {
            goto LABEL_45;
          }
LABEL_46:
          int *v22 = v24 + 1;
          uint64_t v25 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(void *)(a3 + 48));
          uint64_t v47 = *(void *)(a3 + 64);
          uint64_t v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(void *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          int v49 = sentencepiece::ModelInterface::eos_piece(a1[1]);
          size_t v50 = strlen(v49);
          int v51 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          uint64_t v52 = (char *)sentencepiece::ModelInterface::eos_piece(a1[1]);
          sentencepiece::ModelInterface::eos_piece(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          std::string::basic_string[abi:ne180100](__p, v52, v53);
          uint64_t v54 = *(void *)(v25 + 8);
          int v55 = (google::protobuf::internal::ArenaImpl *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if (v54) {
            int v55 = *(google::protobuf::internal::ArenaImpl **)v55;
          }
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v25 + 48), (long long *)__p, v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
LABEL_52:
          if (++v6 == v5) {
            return sentencepiece::util::Status::Status(a4);
          }
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            int v26 = 0;
            do
            {
              uint64_t v27 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)v9, v26);
              if ((*((unsigned int (**)(sentencepiece::ModelInterface **, void))*a1 + 66))(a1, *(unsigned int *)(v27 + 64)))
              {
                uint64_t v28 = (char *)sentencepiece::ModelInterface::unk_piece(a1[1]);
                sentencepiece::ModelInterface::unk_piece(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                std::string::basic_string[abi:ne180100](__p, v28, v29);
                uint64_t v30 = *(void *)(v27 + 8);
                unsigned int v31 = (google::protobuf::internal::ArenaImpl *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if (v30) {
                  unsigned int v31 = *(google::protobuf::internal::ArenaImpl **)v31;
                }
                google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v27 + 48), (long long *)__p, v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                }
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (void *)sentencepiece::util::Status::Status(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sentencepiece::util::Status::Status(a4);
}

void sub_25BFB7BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sentencepiece::SentencePieceProcessor::Encode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, sentencepiece::SentencePieceText *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  (*((void (**)(sentencepiece::ModelInterface **))*a1 + 11))(a1);
  if (!*(void *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      sentencepiece::SentencePieceText::Clear(a4);
      BOOL v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      BOOL v14 = 0;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*(void *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 40))(__p);
        if (v19 >= 0) {
          uint64_t v10 = HIBYTE(v19);
        }
        else {
          uint64_t v10 = v18;
        }
        sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v10, (uint64_t *)&v14, (unsigned __int8 ***)__p, (uint64_t)a4, a5);
        if (!*(void *)a5)
        {
          sentencepiece::util::Status::~Status(a5);
          sentencepiece::util::Status::Status(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        unint64_t v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0) {
        operator delete(v17);
      }
    }
    else
    {
      LODWORD(v17) = 13;
      uint64_t v12 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"spt", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"output proto is null", 20);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v17, (uint64_t)a5);
      uint64_t v18 = *MEMORY[0x263F8C2C8];
      *(uint64_t *)((char *)&v18 + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      uint64_t v19 = MEMORY[0x263F8C318] + 16;
      if (v21 < 0) {
        operator delete(v20);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x26117AB30](&v22);
    }
  }
}

void sub_25BFB7F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::NBestEncode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, sentencepiece::util::Status *a5@<X8>)
{
  (*((void (**)(sentencepiece::ModelInterface **))*a1 + 11))(a1);
  if (*(void *)a5) {
    return;
  }
  sentencepiece::util::Status::~Status(a5);
  if (a4)
  {
    sentencepiece::NBestSentencePieceText::Clear((sentencepiece::NBestSentencePieceText *)a4);
    int v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v23 = 0;
    int v24 = 0;
    uint64_t v25 = 0;
    (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*(void *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if ((*(uint64_t (**)(sentencepiece::ModelInterface *))(*(void *)a1[1] + 88))(a1[1]))
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 48))(&v21);
        uint64_t v10 = v21;
        uint64_t v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            uint64_t v12 = *(int **)(a4 + 32);
            if (!v12) {
              break;
            }
            uint64_t v13 = *(int *)(a4 + 24);
            int v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a4 + 16), v14 + 1);
                uint64_t v12 = *(int **)(a4 + 32);
                int v14 = *v12;
              }
              *uint64_t v12 = v14 + 1;
              uint64_t v15 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*(void *)(a4 + 16));
              uint64_t v16 = *(void *)(a4 + 32);
              uint64_t v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(void *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            uint64_t v15 = *(void *)&v12[2 * v13 + 2];
LABEL_14:
            int v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v18;
            if (v28 >= 0) {
              uint64_t v19 = HIBYTE(v28);
            }
            else {
              uint64_t v19 = v27;
            }
            sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v19, (uint64_t *)&v23, (unsigned __int8 ***)v10, v15, a5);
            if (*(void *)a5) {
              goto LABEL_29;
            }
            sentencepiece::util::Status::~Status(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sentencepiece::util::Status::Status(a5);
              goto LABEL_29;
            }
          }
          int v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"!nbests.empty()", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
        uint64_t v30 = *MEMORY[0x263F8C2C8];
        *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
        uint64_t v31 = MEMORY[0x263F8C318] + 16;
        if (v33 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x26117AB30](v34);
LABEL_29:
        size_t v29 = (void **)&v21;
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
        uint64_t v30 = *MEMORY[0x263F8C2C8];
        *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
        uint64_t v31 = MEMORY[0x263F8C318] + 16;
        if (v33 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x26117AB30](v34);
      }
    }
    if (v23)
    {
      int v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete(v26);
    }
  }
  else
  {
    LODWORD(v29) = 13;
    int v20 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"nbest_spt", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
    uint64_t v30 = *MEMORY[0x263F8C2C8];
    *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v31 = MEMORY[0x263F8C318] + 16;
    if (v33 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x26117AB30](v34);
  }
}

void sub_25BFB86F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, sentencepiece::SentencePieceText *a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  (*((void (**)(sentencepiece::ModelInterface **))*a1 + 11))(a1);
  if (*(void *)a6) {
    return;
  }
  sentencepiece::util::Status::~Status(a6);
  if (a5)
  {
    sentencepiece::SentencePieceText::Clear(a5);
    if (a4 < 513)
    {
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      std::string __p = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v36, &__p);
      if (*(void *)a6)
      {
LABEL_5:
        if (__p)
        {
          uint64_t v34 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v38) < 0) {
          operator delete(v36);
        }
        return;
      }
      sentencepiece::util::Status::~Status(a6);
      char v16 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(void *)a1[1] + 88))(a1[1]);
      if (a4 >= 0) {
        char v17 = v16;
      }
      else {
        char v17 = 0;
      }
      if (v17)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 48))(&v31);
          if (v31 == v32)
          {
            LODWORD(v39) = 13;
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"!nbests.empty()", 15);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"NBestEncode returns empty result.", 33);
            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
            sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v39);
            uint64_t v39 = &v31;
            std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
            goto LABEL_5;
          }
          LODWORD(v30[0]) = 0;
          uint64_t v19 = (sentencepiece::random *)std::vector<float>::vector(&v39, (v32 - v31) >> 5, v30);
          if (v32 != v31)
          {
            int v20 = (float *)v39;
            if ((unint64_t)((v32 - v31) >> 5) <= 1) {
              uint64_t v21 = 1;
            }
            else {
              uint64_t v21 = (v32 - v31) >> 5;
            }
            uint64_t v22 = (float *)(v31 + 24);
            do
            {
              float v23 = *v22;
              v22 += 8;
              *v20++ = expf(v23 * a7);
              --v21;
            }
            while (v21);
          }
          RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v19);
          std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>((uint64_t)v30, (float *)v39, v40[0]);
          uint64_t v25 = HIBYTE(v38);
          uint64_t v26 = v37;
          int v27 = std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)v30, RandomGenerator, (double **)v30);
          if ((v25 & 0x80u) == 0) {
            uint64_t v28 = v25;
          }
          else {
            uint64_t v28 = v26;
          }
          sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v28, (uint64_t *)&__p, (unsigned __int8 ***)(v31 + 32 * v27), (uint64_t)a5, a6);
          uint64_t v29 = *(void *)a6;
          if (!*(void *)a6) {
            sentencepiece::util::Status::~Status(a6);
          }
          if (v30[0])
          {
            v30[1] = v30[0];
            operator delete(v30[0]);
          }
          if (v39)
          {
            v40[0] = (float *)v39;
            operator delete(v39);
          }
          uint64_t v39 = &v31;
          std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
          if (v29) {
            goto LABEL_5;
          }
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 40))(&v39);
        if (v38 >= 0) {
          uint64_t v18 = HIBYTE(v38);
        }
        else {
          uint64_t v18 = v37;
        }
      }
      else
      {
        if (((*(uint64_t (**)(sentencepiece::ModelInterface *))(*(void *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v39) = 13;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
          sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v39);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(void *)a1[1] + 56))(&v39, a7);
        if (v38 >= 0) {
          uint64_t v18 = HIBYTE(v38);
        }
        else {
          uint64_t v18 = v37;
        }
      }
      sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v18, (uint64_t *)&__p, (unsigned __int8 ***)&v39, (uint64_t)a5, a6);
      if (*(void *)a6)
      {
        if (v39)
        {
          v40[0] = (float *)v39;
          operator delete(v39);
        }
        goto LABEL_5;
      }
      sentencepiece::util::Status::~Status(a6);
      if (v39)
      {
        v40[0] = (float *)v39;
        operator delete(v39);
      }
LABEL_51:
      sentencepiece::util::Status::Status(a6);
      goto LABEL_5;
    }
    LODWORD(v39) = 13;
    uint64_t v15 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(nbest_size) <= (512)", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
  }
  else
  {
    LODWORD(v39) = 13;
    int v14 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"spt", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
  }
  v40[0] = *(float **)MEMORY[0x263F8C2C8];
  *(float **)((char *)v40 + *((void *)v40[0] - 3)) = *(float **)(MEMORY[0x263F8C2C8] + 24);
  v40[1] = (float *)(MEMORY[0x263F8C318] + 16);
  if (v41 < 0) {
    operator delete(v40[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x26117AB30](&v42);
}

void sub_25BFB8F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScore(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, sentencepiece::util::Status *a5@<X8>, float a6@<S0>)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8)))
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    (*(void (**)(void, char *, size_t, void **, void **))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*(void *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(void **)(a1 + 8) + 64))(&v23, a6);
      uint64_t v12 = v23;
      uint64_t v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          int v14 = *(int **)(a4 + 32);
          if (!v14) {
            break;
          }
          uint64_t v15 = *(int *)(a4 + 24);
          int v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a4 + 16), v16 + 1);
              int v14 = *(int **)(a4 + 32);
              int v16 = *v14;
            }
            int *v14 = v16 + 1;
            uint64_t v17 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*(void *)(a4 + 16));
            uint64_t v18 = *(void *)(a4 + 32);
            uint64_t v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(void *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          uint64_t v17 = *(void *)&v14[2 * v15 + 2];
LABEL_11:
          int v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v20;
          if (v30 >= 0) {
            uint64_t v21 = HIBYTE(v30);
          }
          else {
            uint64_t v21 = v29;
          }
          sentencepiece::SentencePieceProcessor::PopulateSentencePieceText((sentencepiece::ModelInterface **)a1, a2, a3, v21, (uint64_t *)&v25, (unsigned __int8 ***)v12, v17, a5);
          if (*(void *)a5) {
            goto LABEL_23;
          }
          sentencepiece::util::Status::~Status(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sentencepiece::util::Status::Status(a5);
            goto LABEL_23;
          }
        }
        int v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"!results.empty()", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v31, (uint64_t)a5);
      uint64_t v32 = *MEMORY[0x263F8C2C8];
      *(uint64_t *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      uint64_t v33 = MEMORY[0x263F8C318] + 16;
      if (v35 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x26117AB30](v36);
LABEL_23:
      uint64_t v31 = (void **)&v23;
      std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v31);
    }
    if (v25)
    {
      uint64_t v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v28);
    }
  }
  else
  {
    LODWORD(v31) = 13;
    uint64_t v22 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v31, (uint64_t)a5);
    uint64_t v32 = *MEMORY[0x263F8C2C8];
    *(uint64_t *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v33 = MEMORY[0x263F8C318] + 16;
    if (v35 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x26117AB30](v36);
  }
}

void sub_25BFB95E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::CalculateEntropy(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, sentencepiece::util::Status *a5@<X8>, float a6@<S0>)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8)))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    std::string __p = 0;
    int v16 = 0;
    uint64_t v17 = 0;
    (*(void (**)(void, uint64_t, uint64_t, void **, void **))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*(void *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if (v20 >= 0) {
        uint64_t v12 = &v18;
      }
      else {
        uint64_t v12 = v18;
      }
      if (v20 >= 0) {
        uint64_t v13 = HIBYTE(v20);
      }
      else {
        uint64_t v13 = v19;
      }
      *a4 = (*(float (**)(void, void *, uint64_t, float))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), v12, v13, a6);
      sentencepiece::util::Status::Status(a5);
    }
    if (__p)
    {
      int v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v18);
    }
  }
  else
  {
    LODWORD(v18) = 13;
    int v14 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v18, (uint64_t)a5);
    uint64_t v19 = *MEMORY[0x263F8C2C8];
    *(uint64_t *)((char *)&v19 + *(void *)(v19 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v20 = MEMORY[0x263F8C318] + 16;
    if (v22 < 0) {
      operator delete(v21);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x26117AB30](&v23);
  }
}

void sub_25BFB9930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_25BFB9A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(sentencepiece::ModelInterface **a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v68 = a3;
  (*((void (**)(sentencepiece::ModelInterface **))*a1 + 11))(a1);
  if (*(void *)a4) {
    return;
  }
  sentencepiece::util::Status::~Status(a4);
  if (v4)
  {
    sentencepiece::SentencePieceText::Clear((sentencepiece::SentencePieceText *)v4);
    uint64_t v8 = a1[4];
    if (v8 && (*(unsigned int (**)(sentencepiece::ModelInterface *))(*(void *)v8 + 72))(v8)) {
      unsigned int v9 = (char *)(*(uint64_t (**)(sentencepiece::ModelInterface *))(*(void *)a1[4] + 24))(a1[4]);
    }
    else {
    uint64_t v10 = *a2;
    }
    uint64_t v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        uint64_t v12 = *v10;
        uint64_t v13 = v10[1];
        uint64_t v14 = v68;
        uint64_t v15 = *(int **)(v68 + 64);
        if (!v15) {
          break;
        }
        uint64_t v16 = *(int *)(v68 + 56);
        int v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v68 + 60))
          {
LABEL_14:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v68 + 48), v17 + 1);
            uint64_t v15 = *(int **)(v68 + 64);
            int v17 = *v15;
          }
          int *v15 = v17 + 1;
          uint64_t v18 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(void *)(v14 + 48));
          uint64_t v19 = *(void *)(v14 + 64);
          uint64_t v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(void *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v68 + 56) = v16 + 1;
        uint64_t v18 = *(void *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        uint64_t v21 = *(void *)(v18 + 8);
        char v22 = (google::protobuf::internal::ArenaImpl *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if (v21) {
          char v22 = *(google::protobuf::internal::ArenaImpl **)v22;
        }
        uint64_t v23 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)(v18 + 48), v22);
        MEMORY[0x26117A890](v23, v12, v13);
        int v24 = (*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t, uint64_t))*a1 + 63))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 2;
        if (v10 == v11)
        {
          uint64_t v4 = v68;
          goto LABEL_20;
        }
      }
      int v17 = *(_DWORD *)(v68 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sentencepiece::SentencePieceProcessor::ApplyExtraOptions(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*(void *)a4) {
      return;
    }
    sentencepiece::util::Status::~Status(a4);
    uint64_t v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    uint64_t v25 = *(void *)(v4 + 8);
    uint64_t v26 = (google::protobuf::internal::ArenaImpl *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if (v25) {
      uint64_t v26 = *(google::protobuf::internal::ArenaImpl **)v26;
    }
    v60[1] = &v61;
    uint64_t v61 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)(v4 + 72), v26);
    uint64_t v58 = 0;
    v59[0] = &v68;
    v59[1] = v60;
    v60[0] = &v68;
    __p[0] = 0;
    __p[1] = 0;
    int v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      BOOL v28 = 0;
      int v29 = 0;
      int v30 = 0;
      char v31 = 1;
      while (1)
      {
        uint64_t v32 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(v4 + 48, v30);
        if (!(*((unsigned int (**)(sentencepiece::ModelInterface **, void))*a1 + 69))(a1, *(unsigned int *)(v32 + 64)))break; {
        ++v30;
        }
LABEL_68:
        uint64_t v4 = v68;
        int v27 = *(_DWORD *)(v68 + 56);
        if (v30 >= v27) {
          goto LABEL_89;
        }
      }
      sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()((uint64_t)v59, v29, v30, a4);
      if (*(void *)a4) {
        goto LABEL_95;
      }
      sentencepiece::util::Status::~Status(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            unint64_t v33 = *(void *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              char v35 = *(unsigned __int8 **)v33;
              size_t v34 = *(void *)(v33 + 8);
            }
            else
            {
              size_t v34 = *(unsigned __int8 *)(v33 + 23);
              char v35 = (unsigned __int8 *)(*(void *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            uint64_t v36 = *(unsigned int *)(v32 + 64);
            if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 67))(a1, v36))
            {
              std::string::basic_string[abi:ne180100]<0>(&v62, "");
LABEL_58:
              BOOL v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0) {
                operator delete(__p[0]);
              }
              uint64_t v58 = v63;
              *(_OWORD *)std::string __p = v62;
              BOOL v28 = v64;
              if (v63 >= 0) {
                uint64_t v46 = __p;
              }
              else {
                uint64_t v46 = (void **)v62;
              }
              if (v63 >= 0) {
                size_t v47 = HIBYTE(v63);
              }
              else {
                size_t v47 = *((void *)&v62 + 1);
              }
              sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(v60, v30++, v46, v47);
              int v29 = v30;
              goto LABEL_68;
            }
            if (!(*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((int v40 = a1[4]) == 0
                 || (uint64_t v41 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(void *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(void *)v41 + 16))(v41) & 1) != 0)
                 || (uint64_t v42 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(void *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(void *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  BOOL v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  BOOL v43 = !v49;
                }
                else
                {
                  BOOL v43 = 0;
                }
                size_t v50 = a1[4];
                if (v50)
                {
                  uint64_t v51 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(void *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 24))(v51)) {
                    BOOL v43 = 0;
                  }
                }
              }
              else
              {
                BOOL v43 = 0;
              }
              uint64_t v52 = operator new(0x20uLL);
              int v70 = v52 + 4;
              uint64_t v71 = v52 + 4;
              v52[1] = 3;
              v52[2] = " ";
              v52[3] = 1;
              uint64_t v69 = v52;
              absl::StrReplaceAll(v35, v34, (uint64_t *)&v69, (uint64_t)&__dst);
              long long v62 = __dst;
              uint64_t v63 = v73;
              unint64_t v73 = 0;
              long long __dst = 0uLL;
              BOOL v64 = v43;
              if (v69)
              {
                int v70 = v69;
                operator delete(v69);
              }
              goto LABEL_59;
            }
            uint64_t v37 = (const void *)(*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 64))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              std::string::basic_string[abi:ne180100]<0>(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v34 >= 0x17)
            {
              uint64_t v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17) {
                uint64_t v44 = v34 | 7;
              }
              uint64_t v45 = v44 + 1;
              p_dst = (long long *)operator new(v44 + 1);
              *((void *)&__dst + 1) = v34;
              unint64_t v73 = v45 | 0x8000000000000000;
              *(void *)&long long __dst = p_dst;
            }
            else
            {
              HIBYTE(v73) = v34;
              p_dst = &__dst;
              if (!v34) {
                goto LABEL_57;
              }
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((unsigned char *)p_dst + v34) = 0;
            long long v62 = __dst;
            uint64_t v63 = v73;
            goto LABEL_58;
          }
        }
        else if (!*((unsigned char *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      char v31 = 0;
      goto LABEL_32;
    }
    int v29 = 0;
LABEL_89:
    sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()((uint64_t)v59, v29, v27, a4);
    if (!*(void *)a4)
    {
      sentencepiece::util::Status::~Status(a4);
      uint64_t v54 = a1[3];
      if (v54)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)v54 + 40))(&v62);
        int v55 = v61;
        if (*((char *)v61 + 23) < 0) {
          operator delete((void *)*v61);
        }
        long long v56 = v62;
        v55[2] = v63;
        *(_OWORD *)int v55 = v56;
      }
      sentencepiece::util::Status::Status(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    LODWORD(v62) = 13;
    size_t v53 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v62 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v62 + 1, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v62 + 1, (uint64_t)"spt", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v62 + 1, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v62, (uint64_t)a4);
    *((void *)&v62 + 1) = *MEMORY[0x263F8C2C8];
    *(void *)((char *)&v62 + *(void *)(*((void *)&v62 + 1) - 24) + 8) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v63 = MEMORY[0x263F8C318] + 16;
    if (v66 < 0) {
      operator delete(v65);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x26117AB30](&v67);
  }
}

void sub_25BFBA364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, sentencepiece::util::Status *a4@<X8>)
{
  if (a2 >= a3)
  {
    sentencepiece::util::Status::Status(a4);
  }
  else
  {
    memset(&v38, 0, sizeof(v38));
    int v8 = a2;
    do
    {
      uint64_t v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(**(void **)a1 + 48, v8);
      unint64_t v10 = *(void *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        uint64_t v12 = *(void **)v10;
        size_t v11 = *(void *)(v10 + 8);
      }
      else
      {
        size_t v11 = *(unsigned __int8 *)(v10 + 23);
        uint64_t v12 = (void *)(*(void *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      int v13 = sentencepiece::PieceToByte(v12, v11);
      if (v13 < 0)
      {
        unsigned int v34 = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(0) <= (byte)", 13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)a4);
        goto LABEL_52;
      }
      std::string::append(&v38, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    uint64_t v32 = a4;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v15 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
    else {
      int v15 = v38.__r_.__value_.__r.__words[1];
    }
    if (v15 >= 1)
    {
      int v16 = 0;
      while (1)
      {
        *(void *)unint64_t v33 = 0;
        std::string::size_type size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v38.__r_.__value_.__l.__size_;
        }
        if (size < v16) {
          std::__throw_out_of_range[abi:ne180100]("string_view::substr");
        }
        unint64_t v18 = v16;
        uint64_t v19 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v19 = &v38;
        }
        if (sentencepiece::string_util::DecodeUTF8((sentencepiece::string_util *)((char *)v19 + v18), (const char *)v19 + size, v33, v14) != 65533)break; {
        int v20 = v18 + a2;
        }
        if (*(void *)v33 != 1)
        {
          if (*(void *)v33 != 3)
          {
            unsigned int v34 = 13;
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(consumed) == (1)", 17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)v32);
            goto LABEL_52;
          }
          goto LABEL_23;
        }
        LODWORD(v23) = *(_DWORD *)v33;
LABEL_42:
        int v16 = v18 + v23;
        if (v16 >= v15) {
          goto LABEL_49;
        }
      }
      int v20 = v18 + a2;
LABEL_23:
      std::string::size_type v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v21 = v38.__r_.__value_.__l.__size_;
      }
      size_t v22 = v21 - v18;
      if (v21 < v18) {
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      }
      size_t v23 = *(void *)v33;
      int v24 = &v38;
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v24 = (std::string *)v38.__r_.__value_.__r.__words[0];
      }
      if (v22 >= *(void *)v33) {
        size_t v25 = *(void *)v33;
      }
      else {
        size_t v25 = v22;
      }
      if (*(void *)v33)
      {
        unint64_t v26 = 0;
        int v27 = (char *)v24 + v18;
        int v28 = v20;
        do
        {
          size_t v29 = v23 - 1;
          if (v26 == v29) {
            int v30 = v27;
          }
          else {
            int v30 = "";
          }
          if (v26 == v29) {
            size_t v31 = v25;
          }
          else {
            size_t v31 = 0;
          }
          sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(*(void ***)(a1 + 8), v28 + v26++, v30, v31);
          size_t v23 = *(void *)v33;
        }
        while (*(void *)v33 > v26);
      }
      goto LABEL_42;
    }
    int v16 = 0;
LABEL_49:
    if (v16 + a2 == a3)
    {
      sentencepiece::util::Status::Status(v32);
      goto LABEL_55;
    }
    unsigned int v34 = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)v32);
LABEL_52:
    v35[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v35 + *(void *)(v35[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v35[1] = MEMORY[0x263F8C318] + 16;
    if (v36 < 0) {
      operator delete((void *)v35[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x26117AB30](&v37);
LABEL_55:
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
}

void sub_25BFBA8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (*(char *)(v11 - 89) < 0) {
    operator delete(*(void **)(v11 - 112));
  }
  _Unwind_Resume(exception_object);
}

std::string *sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(void **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7;
  if (a4 >= 0x17)
  {
    uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v10 = a4 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = a4;
    unint64_t v20 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = a4;
  p_dst = &__dst;
  if (a4) {
LABEL_8:
  }
    memmove(p_dst, a3, a4);
  *((unsigned char *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  uint64_t v12 = *(void *)(v8 + 8);
  int v13 = (google::protobuf::internal::ArenaImpl *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if (v12) {
    int v13 = *(google::protobuf::internal::ArenaImpl **)v13;
  }
  google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v8 + 56), &__dst, v13);
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  else {
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  }
  int v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v17 = *(void *)(v14 + 8);
  }
  else {
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  }
  *(_DWORD *)(v8 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_25BFBAAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1@<X0>, signed int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  memset(&v19, 0, sizeof(v19));
  signed int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 496))(a1);
  std::vector<std::string>::reserve(&v19, a2[1] - *a2);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, std::vector<std::string> *, uint64_t))(*(void *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      signed int v11 = *v9;
      signed int v18 = v11;
      if (v11 < 0 || v11 >= v8) {
        break;
      }
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      std::vector<std::string>::pointer end = v19.__end_;
      if (v19.__end_ >= v19.__end_cap_.__value_)
      {
        uint64_t v14 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string_view>((uint64_t)&v19, (uint64_t)&__p);
      }
      else
      {
        std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>((int)&v19.__end_cap_, v19.__end_, (uint64_t)&__p);
        uint64_t v14 = end + 1;
      }
      v19.__end_ = v14;
      if (++v9 == v10) {
        goto LABEL_8;
      }
    }
    absl::StrCat<int>("Invalid id: ", 0xCuLL, (unsigned int *)&v18, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sentencepiece::util::Status::Status(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_25BFBACA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void absl::StrCat<int>(void *__src@<X0>, size_t __len@<X1>, unsigned int *a3@<X2>, std::string *a4@<X8>)
{
  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  absl::StrCat((absl *)*a3);
  if ((v10 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  signed int v8 = std::string::append(&__dst, (const std::string::value_type *)v6, v7);
  *a4 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_25BFBAD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::SentencePieceProcessor::GetPieceSize(sentencepiece::SentencePieceProcessor *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 88))(&v15);
  uint64_t v2 = v15;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v15);
  if (!v2) {
    return (*(uint64_t (**)(void))(**((void **)this + 1) + 128))(*((void *)this + 1));
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(v3) <= 2)
  {
    char v14 = 0;
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    int64_t v5 = (void *)std::ostream::operator<<();
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
    std::string::size_type v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"LOG(", 4);
    signed int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ERROR", 5);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(void *)this + 88))(&v15, this);
    unsigned __int8 v10 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v15);
    size_t v11 = strlen(v10);
    std::string::size_type v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v15);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v14);
  }
  return 0;
}

void sub_25BFBAF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sentencepiece::SentencePieceProcessor::PieceToId(void **a1, uint64_t a2, uint64_t a3)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v19);
  uint64_t v6 = v19;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
  if (!v6) {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(v7) <= 2)
  {
    char v18 = 0;
    signed int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    unsigned __int8 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
    size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"LOG(", 4);
    std::string::size_type v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"ERROR", 5);
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v19, a1);
    char v14 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v19);
    size_t v15 = strlen(v14);
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v18);
  }
  return 0;
}

void sub_25BFBB110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

const char *sentencepiece::SentencePieceProcessor::IdToPiece(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 88))(&v18);
  uint64_t v4 = v18;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
  if (!v4) {
    return (const char *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 1) + 120))(*((void *)this + 1), a2);
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    char v17 = 0;
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    std::string::size_type v7 = (void *)std::ostream::operator<<();
    signed int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    unsigned __int8 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(void *)this + 88))(&v18, this);
    std::string::size_type v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v18);
    size_t v13 = strlen(v12);
    char v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    size_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"", 0);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v17);
  }
  return "";
}

void sub_25BFBB2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

float sentencepiece::SentencePieceProcessor::GetScore(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 88))(&v18);
  uint64_t v4 = v18;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
  if (!v4) {
    return (*(float (**)(void, uint64_t))(**((void **)this + 1) + 136))(*((void *)this + 1), a2);
  }
  float v6 = 0.0;
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    char v17 = 0;
    std::string::size_type v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    signed int v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    unsigned __int8 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LOG(", 4);
    size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ERROR", 5);
    std::string::size_type v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(void *)this + 88))(&v18, this);
    size_t v13 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v18);
    size_t v14 = strlen(v13);
    size_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v17);
  }
  return v6;
}

void sub_25BFBB4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sentencepiece::SentencePieceProcessor::IsControl(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 88))(&v17);
  uint64_t v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4) {
    return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 1) + 152))(*((void *)this + 1), a2);
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    char v16 = 0;
    float v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    std::string::size_type v7 = (void *)std::ostream::operator<<();
    signed int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    unsigned __int8 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(void *)this + 88))(&v17, this);
    std::string::size_type v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    size_t v13 = strlen(v12);
    size_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_25BFBB670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sentencepiece::SentencePieceProcessor::IsUnknown(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 88))(&v17);
  uint64_t v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4) {
    return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 1) + 144))(*((void *)this + 1), a2);
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    char v16 = 0;
    float v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    std::string::size_type v7 = (void *)std::ostream::operator<<();
    signed int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    unsigned __int8 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(void *)this + 88))(&v17, this);
    std::string::size_type v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    size_t v13 = strlen(v12);
    size_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_25BFBB830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sentencepiece::SentencePieceProcessor::IsUnused(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 88))(&v17);
  uint64_t v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4) {
    return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 1) + 160))(*((void *)this + 1), a2);
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    char v16 = 0;
    float v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    std::string::size_type v7 = (void *)std::ostream::operator<<();
    signed int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    unsigned __int8 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(void *)this + 88))(&v17, this);
    std::string::size_type v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    size_t v13 = strlen(v12);
    size_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_25BFBB9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sentencepiece::SentencePieceProcessor::IsByte(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 88))(&v17);
  uint64_t v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4) {
    return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 1) + 176))(*((void *)this + 1), a2);
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    char v16 = 0;
    float v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    std::string::size_type v7 = (void *)std::ostream::operator<<();
    signed int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    unsigned __int8 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(void *)this + 88))(&v17, this);
    std::string::size_type v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    size_t v13 = strlen(v12);
    size_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_25BFBBBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sentencepiece::SentencePieceProcessor::unk_id(sentencepiece::ModelInterface **this)
{
  uint64_t v2 = sentencepiece::ModelInterface::unk_piece(this[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 66))(this, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sentencepiece::SentencePieceProcessor::bos_id(sentencepiece::ModelInterface **this)
{
  uint64_t v2 = sentencepiece::ModelInterface::bos_piece(this[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sentencepiece::SentencePieceProcessor::eos_id(sentencepiece::ModelInterface **this)
{
  uint64_t v2 = sentencepiece::ModelInterface::eos_piece(this[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sentencepiece::SentencePieceProcessor::pad_id(sentencepiece::ModelInterface **this)
{
  uint64_t v2 = sentencepiece::ModelInterface::pad_piece(this[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sentencepiece::SentencePieceProcessor::LookupPredictive@<X0>(void **a1@<X0>, uint64_t *a2@<X3>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[11])(a1);
  if (!*(void *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    if (a2)
    {
      std::vector<std::string>::__clear[abi:ne180100](a2);
      std::string::size_type v7 = *(uint64_t (**)(void))(*a1[1] + 200);
      return v7();
    }
    else
    {
      unsigned int v9 = 13;
      signed int v8 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a3);
      v10[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v10[1] = MEMORY[0x263F8C318] + 16;
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x26117AB30](&v12);
    }
  }
  return result;
}

void sub_25BFBC158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sentencepiece::SentencePieceProcessor::LookupPredictive@<X0>(void **a1@<X0>, void *a2@<X3>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[11])(a1);
  if (!*(void *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    if (a2)
    {
      a2[1] = *a2;
      std::string::size_type v7 = *(uint64_t (**)(void))(*a1[1] + 208);
      return v7();
    }
    else
    {
      unsigned int v9 = 13;
      signed int v8 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a3);
      v10[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v10[1] = MEMORY[0x263F8C318] + 16;
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x26117AB30](&v12);
    }
  }
  return result;
}

void sub_25BFBC3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sentencepiece::SentencePieceProcessor::AddsDummyPrefix(sentencepiece::SentencePieceProcessor *this)
{
  uint64_t result = *((void *)this + 4);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result) + 16);
    return v2();
  }
  return result;
}

uint64_t sentencepiece::SentencePieceProcessor::RemovesExtraWhitespaces(sentencepiece::SentencePieceProcessor *this)
{
  uint64_t result = *((void *)this + 4);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result) + 24);
    return v2();
  }
  return result;
}

uint64_t std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void *sentencepiece::SentencePieceProcessor::LoadFromMemoryMappedFile@<X0>(const char *a1@<X1>, unint64_t a2@<X2>, sentencepiece::util::Status *a3@<X8>)
{
  size_t v14 = a1;
  unint64_t v15 = a2;
  if (a2 <= 0x13)
  {
    LODWORD(v1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 13;
    std::string::size_type v7 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v10, (uint64_t)a3);
  }
  else if (*(_DWORD *)a1)
  {
    LODWORD(v1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 13;
    float v6 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"header->sentinel == 0", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v10, (uint64_t)a3);
  }
  else
  {
    uint64_t result = sentencepiece::mmap_util::RemovePrefix(&v14, 0x14uLL, a3);
    if (*(void *)a3) {
      return result;
    }
    sentencepiece::util::Status::~Status(a3);
    if (v15 >= *((unsigned int *)a1 + 1)) {
      operator new();
    }
    LODWORD(v1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 13;
    unsigned int v9 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v10, (uint64_t)a3);
  }
  v11[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v11[1] = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x26117AB30](&v13);
}

void sub_25BFBD080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<sentencepiece::normalizer::Normalizer,sentencepiece::MemoryMappedNormalizerSpec const&,std::string_view>()
{
}

void sub_25BFBD154(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::CopyAndLoadFromMemoryMappedFile(sentencepiece::SentencePieceProcessor *this, const char *a2)
{
  size_t v3 = (char *)this + 96;
  MEMORY[0x26117A890]((char *)this + 96, a2);
  if (*((char *)this + 119) < 0)
  {
    size_t v3 = (char *)*((void *)this + 12);
    uint64_t v4 = *((void *)this + 13);
  }
  else
  {
    uint64_t v4 = *((unsigned __int8 *)this + 119);
  }
  int64_t v5 = *(uint64_t (**)(sentencepiece::SentencePieceProcessor *, char *, uint64_t))(*(void *)this + 48);

  return v5(this, v3, v4);
}

void sentencepiece::SentencePieceProcessor::MMap()
{
}

void sub_25BFBD328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::Mmap<char>::open(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  sentencepiece::Mmap<char>::close(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      __p[0] = *(std::string *)a2;
    }
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      signed int v8 = __p;
    }
    else {
      signed int v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    int v9 = open((const char *)v8, 0, __p[0].__r_.__value_.__r.__words[0], __p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
    int v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_52;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
    char v11 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = (std::string::value_type *)a2;
    }
    else {
      uint64_t v13 = *(std::string::value_type **)a2;
    }
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a2 + 8);
    }
LABEL_66:
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
    __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x263F8C2C8];
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                              + *(void *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x263F8C2C8]
                                                                                                + 24);
    __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x263F8C318] + 16;
    if (v28 < 0) {
      operator delete(v27);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x26117AB30](v29);
    return;
  }
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)a2, (uint64_t)&v31);
  std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  std::__fs::filesystem::__status(&v31, 0);
  if (__p[0].__r_.__value_.__s.__data_[0] != 2) {
    goto LABEL_30;
  }
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(__p, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v31.__pn_;
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v14 = __p;
  }
  else {
    size_t v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  int v15 = open((const char *)v14, 0, __p[0].__r_.__value_.__r.__words[0], __p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
  int v16 = v15;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    std::string::size_type size = HIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]);
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v31;
    }
    else {
      uint64_t v18 = (std::__fs::filesystem::path *)v31.__pn_.__r_.__value_.__r.__words[0];
    }
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v31.__pn_.__r_.__value_.__l.__size_;
    }
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v18, (unsigned char *)v18 + size, 0x22u, 0x5Cu);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
    __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x263F8C2C8];
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                              + *(void *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x263F8C2C8]
                                                                                                + 24);
    __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x263F8C318] + 16;
    if (v28 < 0) {
      operator delete(v27);
    }
    goto LABEL_37;
  }
  if (v15 < 0) {
    goto LABEL_30;
  }
LABEL_27:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v30;
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__pn_.__r_.__value_.__l.__data_);
    }
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v32) < 0)
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      size_t v22 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = (std::string::value_type *)a2;
      }
      else {
        uint64_t v13 = *(std::string::value_type **)a2;
      }
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
    }
    else
    {
      st_std::string::size_type size = v32.st_size;
      *(void *)(a1 + 16) = v32.st_size;
      std::string::size_type v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(void *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sentencepiece::util::Status::Status(a4);
        return;
      }
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      size_t v23 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = (std::string::value_type *)a2;
      }
      else {
        uint64_t v13 = *(std::string::value_type **)a2;
      }
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0) {
    size_t v25 = (unsigned char *)a2;
  }
  else {
    size_t v25 = *(unsigned char **)a2;
  }
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(a2 + 8);
  }
  std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
  __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x263F8C2C8];
  *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                            + *(void *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x263F8C2C8]
                                                                                              + 24);
  __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x263F8C318] + 16;
  if (v28 < 0) {
    operator delete(v27);
  }
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x26117AB30](v29);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_25BFBDC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 217) < 0) {
    operator delete(*(void **)(v14 - 240));
  }
  if (*(char *)(v14 - 193) < 0) {
    operator delete(*(void **)(v14 - 216));
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::MMapAuthenticated()
{
}

void sub_25BFBDE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::EncodeAsPieces(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 136))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_25BFBDEB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::EncodeAsIds(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 144))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_25BFBDF30(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsPieces(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 176))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_25BFBDFB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsIds(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 184))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_25BFBE02C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsPieces(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 192))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_25BFBE0A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsIds(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 200))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_25BFBE124(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsPieces(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 208))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_25BFBE1A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::vector<std::string>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsIds(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 216))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_25BFBE220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePieces(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 152))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_25BFBE29C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_25BFBE31C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::DecodeIds(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 168))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_25BFBE39C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

float sentencepiece::SentencePieceProcessor::CalculateEntropy(uint64_t a1)
{
  float v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 224))(&v3);
  float v1 = v4;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v3);
  return v1;
}

void sentencepiece::SentencePieceProcessor::EncodeAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v10 = &unk_270972C28;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  char v11 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  uint64_t v8 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v10);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(&v9, a1, a2, a3, v8);
  google::protobuf::MessageLite::SerializeAsString(v11, a4);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v9);
  int v10 = &unk_270972C28;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_25BFBE4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v14 = &unk_270972C28;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v15 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  uint64_t v12 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v14);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 248))(&v13, a1, a2, a3, a4, v12, a6);
  google::protobuf::MessageLite::SerializeAsString(v15, a5);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v13);
  uint64_t v14 = &unk_270972C28;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_25BFBE610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsSerializedProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v12[1] = 0;
  uint64_t v13 = 0;
  v12[0] = &unk_270972C88;
  uint64_t v10 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto((sentencepiece::ImmutableNBestSentencePieceText *)v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(&v11, a1, a2, a3, a4, v10);
  sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString((sentencepiece::ImmutableNBestSentencePieceText *)v12, a5);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v11);
  v12[0] = &unk_270972C88;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_25BFBE714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsSerializedProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, float a8@<S0>)
{
  v18[1] = 0;
  uint64_t v19 = 0;
  v18[0] = &unk_270972C88;
  uint64_t v16 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto((sentencepiece::ImmutableNBestSentencePieceText *)v18);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v16, a8);
  sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString((sentencepiece::ImmutableNBestSentencePieceText *)v18, a7);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  v18[0] = &unk_270972C88;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_25BFBE848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePiecesAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_270972C28;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  uint64_t v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v8);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(void *)a1 + 264))(&v7, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v9, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
  uint64_t v8 = &unk_270972C28;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  google::protobuf::MessageLite *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  uint64_t v8 = &unk_270972C28;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  uint64_t v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v8);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(void *)a1 + 272))(&v7, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v9, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
  uint64_t v8 = &unk_270972C28;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_25BFBE944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void sub_25BFBEA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodeIdsAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_270972C28;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  uint64_t v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v8);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(void *)a1 + 280))(&v7, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v9, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
  uint64_t v8 = &unk_270972C28;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_25BFBEB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::EncodeAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::ImmutableSentencePieceText *a4@<X8>)
{
  *(void *)a4 = &unk_270972C28;
  uint64_t v8 = sentencepiece::SentencePieceText::default_instance(a1);
  *((void *)a4 + 2) = 0;
  *((void *)a4 + 3) = 0;
  *((void *)a4 + 1) = v8;
  uint64_t v9 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a4);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(&v10, a1, a2, a3, v9);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
}

void sub_25BFBEC20(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, sentencepiece::ImmutableSentencePieceText *a5@<X8>, float a6@<S0>)
{
  *(void *)a5 = &unk_270972C28;
  uint64_t v12 = sentencepiece::SentencePieceText::default_instance(a1);
  *((void *)a5 + 2) = 0;
  *((void *)a5 + 3) = 0;
  *((void *)a5 + 1) = v12;
  uint64_t v13 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a5);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 248))(&v14, a1, a2, a3, a4, v13, a6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v14);
}

void sub_25BFBED0C(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsImmutableProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, sentencepiece::ImmutableNBestSentencePieceText *a5@<X8>)
{
  *((void *)a5 + 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = &unk_270972C88;
  uint64_t v9 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(&v10, a1, a2, a3, a4, v9);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
}

void sub_25BFBEDE0(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsImmutableProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, sentencepiece::ImmutableNBestSentencePieceText *a7@<X8>, float a8@<S0>)
{
  *((void *)a7 + 1) = 0;
  *((void *)a7 + 2) = 0;
  *(void *)a7 = &unk_270972C88;
  uint64_t v15 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 256))(&v16, a1, a2, a3, a4, a5, a6, v15, a8);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v16);
}

void sub_25BFBEEE4(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::DecodePiecesAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, sentencepiece::ImmutableSentencePieceText *a3@<X8>)
{
  *(void *)a3 = &unk_270972C28;
  uint64_t v6 = sentencepiece::SentencePieceText::default_instance(a1);
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 1) = v6;
  uint64_t v7 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(void *)a1 + 264))(&v8, a1, a2, v7);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v8);
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(void *)a3 = &unk_270972C28;
  uint64_t v6 = sentencepiece::SentencePieceText::default_instance(a1);
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 1) = v6;
  uint64_t v7 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(void *)a1 + 272))(&v8, a1, a2, v7);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v8);
}

void sub_25BFBEFB0(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_25BFBF07C(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::DecodeIdsAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, sentencepiece::ImmutableSentencePieceText *a3@<X8>)
{
  *(void *)a3 = &unk_270972C28;
  uint64_t v6 = sentencepiece::SentencePieceText::default_instance(a1);
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 1) = v6;
  uint64_t v7 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(void *)a1 + 280))(&v8, a1, a2, v7);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v8);
}

void sub_25BFBF148(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    float v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    int64_t v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_25BFBF224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    float v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    int64_t v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_25BFBF304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    float v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    int64_t v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_25BFBF3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char **absl::internal::Splitter::Splitter(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  uint64_t v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v10 = 0;
  if (a5)
  {
    int v11 = a6;
    if (a3)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v14 = (unsigned __int8 *)(a2 + a3);
      uint64_t v15 = a1 + 2;
      while (2)
      {
        uint64_t v16 = &v10[a2];
        uint64_t v17 = &v10[a2];
LABEL_5:
        uint64_t v18 = a5;
        uint64_t v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14) {
              goto LABEL_5;
            }
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          unint64_t v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            std::string::size_type v21 = (unsigned __int8 *)(v20 - v10);
            BOOL v22 = v20 >= v10;
            if (!v11) {
              BOOL v22 = v20 > v10;
            }
            if (v22)
            {
              size_t v23 = (unsigned __int8 *)(a3 - (void)v10);
              if (v23 >= v21) {
                uint64_t v24 = v21;
              }
              else {
                uint64_t v24 = v23;
              }
              if ((unint64_t)v9 >= *v15)
              {
                uint64_t v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60) {
                  std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v26 = *v15 - (void)*a1;
                uint64_t v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1)) {
                  uint64_t v27 = v25 + 1;
                }
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v28 = v27;
                }
                if (v28) {
                  size_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)v15, v28);
                }
                else {
                  size_t v29 = 0;
                }
                std::string v30 = &v29[16 * v25];
                *(void *)std::string v30 = v16;
                *((void *)v30 + 1) = v24;
                stat v32 = *a1;
                std::__fs::filesystem::path v31 = a1[1];
                unint64_t v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  std::__fs::filesystem::path v31 = *a1;
                }
                uint64_t v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31) {
                  operator delete(v31);
                }
                int v11 = a6;
                uint64_t v15 = a1 + 2;
              }
              else
              {
                *uint64_t v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            uint64_t v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1)) {
              continue;
            }
          }
        }
        break;
      }
    }
  }
LABEL_37:
  BOOL v34 = a3 > (unint64_t)v10;
  unint64_t v35 = a3 - (void)v10;
  if (v34)
  {
    char v36 = &v10[a2];
    unint64_t v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      uint64_t v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60) {
        std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = v37 - (void)*a1;
      uint64_t v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1)) {
        uint64_t v41 = v39 + 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v41;
      }
      if (v42) {
        BOOL v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a1 + 2), v42);
      }
      else {
        BOOL v43 = 0;
      }
      uint64_t v44 = &v43[16 * v39];
      uint64_t v45 = &v43[16 * v42];
      *(void *)uint64_t v44 = v36;
      *((void *)v44 + 1) = v35;
      std::string v38 = v44 + 16;
      size_t v47 = *a1;
      uint64_t v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        uint64_t v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46) {
        operator delete(v46);
      }
    }
    else
    {
      *uint64_t v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      std::string v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_25BFBF6AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    std::vector<std::string>::pointer end = this->__end_;
    size_t v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_25BFBF760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::string_view>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<_NSRange>::__vallocate[abi:ne180100](a1, a2);
    float v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_25BFBF7D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void absl::StrReplaceAll(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    uint64_t v10 = *(char **)v6;
    int64_t v11 = *(void *)(v6 + 8);
    uint64_t v12 = *(const std::string::value_type **)(v6 + 16);
    std::string::size_type v13 = *(void *)(v6 + 24);
    uint64_t v18 = p_dst;
    std::string::size_type v19 = size;
    if (v11)
    {
      uint64_t v14 = std::string_view::find[abi:ne180100]((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v15 = v14;
        uint64_t v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          uint64_t v16 = v15 + v11;
          uint64_t v15 = std::string_view::find[abi:ne180100]((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      std::string::size_type size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_25BFBF954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string_view::find[abi:ne180100](uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4 = a1[1];
  if (v4 < a4) {
    return -1;
  }
  if (a3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (void *)(*a1 + a4);
    uint64_t v8 = (char *)(v6 + v4);
    uint64_t v9 = v6 + v4 - (void)v7;
    if (v9 >= a3)
    {
      int v13 = *a2;
      do
      {
        uint64_t v14 = v9 - a3;
        if (v14 == -1) {
          break;
        }
        uint64_t v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15) {
          break;
        }
        uint64_t v10 = v15;
        if (!memcmp(v15, a2, a3)) {
          goto LABEL_6;
        }
        uint64_t v7 = v10 + 1;
        uint64_t v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    uint64_t v10 = v8;
LABEL_6:
    if (v10 == v8) {
      return -1;
    }
    else {
      return (uint64_t)&v10[-v6];
    }
  }
  return a4;
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::pair<std::vector<std::string>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        uint64_t v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    size_t v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_25BFBFC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_25BFBFCEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270973ED8;
  sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)(a1 + 3), 0);
  return a1;
}

void sub_25BFBFD4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270973ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270973ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x26117ABD0);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::__on_zero_shared(uint64_t a1)
{
}

void *_ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x48uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_25BFBFE18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270973F10;
  sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)(a1 + 3), 0);
  return a1;
}

void sub_25BFBFE78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270973F10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270973F10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x26117ABD0);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::__on_zero_shared(uint64_t a1)
{
}

sentencepiece::ModelProto *std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](sentencepiece::ModelProto **a1, sentencepiece::ModelProto *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    JUMPOUT(0x26117ABD0);
  }
  return result;
}

void absl::StrCat<std::string,char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  int v10 = *((char *)a3 + 23);
  if (v10 >= 0) {
    int64_t v11 = a3;
  }
  else {
    int64_t v11 = *a3;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v12 = (size_t)a3[1];
  }
  absl::StrCat<char [2],std::string>(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_25BFC002C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void absl::StrCat<char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  size_t v8 = strlen(a3);
  absl::StrCat<std::string>(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int64_t v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_25BFC0120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void absl::StrCat<std::string>(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  int v6 = *((char *)a3 + 23);
  if (v6 >= 0) {
    char v7 = a3;
  }
  else {
    char v7 = *a3;
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v8 = (size_t)a3[1];
  }
  std::string::basic_string[abi:ne180100](__p, v7, v8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v10 = v13;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  int64_t v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_25BFC020C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::set<std::string_view>::set[abi:ne180100]<std::__wrap_iter<std::string_view const*>>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      std::__tree<std::string_view>::__emplace_hint_unique_key_args<std::string_view,std::string_view const&>((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_25BFC02AC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string_view>::__emplace_hint_unique_key_args<std::string_view,std::string_view const&>(uint64_t **a1, void *a2, uint64_t a3, _OWORD *a4)
{
  int v6 = std::__tree<std::string_view>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  char v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    char v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::string>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::string_view>::__find_equal<std::string_view>(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2
    && !std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if (!std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (void *)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        uint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))goto LABEL_28; {
      uint64_t v13 = *a4;
      }
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    size_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      size_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      size_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
}

void *std::__tree<std::string_view>::find<std::string_view>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  int v6 = (void *)(a1 + 8);
  do
  {
    int v7 = std::less<std::string_view>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    size_t v8 = v3 + 1;
    if (!v7)
    {
      size_t v8 = v3;
      int v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string_view>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4))) {
    return v2;
  }
  return v6;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  size_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 24;
  return a1;
}

void sub_25BFC0838(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x26117AB30](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x26117AB30](a1 + 128);
  return a1;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_25BFC0AA8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

std::string *std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&>(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  uint64_t result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_25BFC0B14(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__emplace_back_slow_path<std::vector<std::string>&>(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  ++v15;
  std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::string>>::~__split_buffer(v14);
  return v12;
}

void sub_25BFC0C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::string>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void *std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_25BFC0EB4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_25BFC0FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25BFC1034(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 4;
  }
}

void **std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::vector<std::string>,float>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 32);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

float std::vector<std::pair<std::vector<std::string>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&,float>(uint64_t a1, long long **a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_25BFC151C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::string>,float>>::__emplace_back_slow_path<std::vector<std::string>&,float>(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  std::string::size_type v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = (std::string *)&v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  BOOL v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  v13->__r_.__value_.__r.__words[0] = 0;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  LODWORD(v13[1].__r_.__value_.__l.__data_) = *a3;
  BOOL v17 = (std::string *)((char *)v17 + 32);
  std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(v16);
  return v14;
}

void sub_25BFC1620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::vector<int>,float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 32);
    *(void *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(void *)(v2 - 24) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&,float>(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)v5, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_25BFC18CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int>&,float>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  std::string::size_type v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  BOOL v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v13, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_25BFC19C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>(uint64_t a1, float *a2, float *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)a1, a2, a3, a3 - a2);
  std::discrete_distribution<int>::param_type::__init((double **)a1);
  return a1;
}

void sub_25BFC1A18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::discrete_distribution<int>::param_type::__init(double **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      std::vector<double>::shrink_to_fit((uint64_t)a1);
    }
    else
    {
      uint64_t v4 = v2 - v1;
      double v5 = 0.0;
      unint64_t v6 = *a1;
      do
      {
        double v7 = *v6++;
        double v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        double *v1 = *v1 / v5;
        ++v1;
      }
      std::vector<double>::vector(&v16, v4 - 1);
      long long v8 = *a1;
      uint64_t v9 = (uint64_t)(a1[1] - 1);
      uint64_t v10 = v16;
      if (*a1 != (double *)v9)
      {
        unint64_t v11 = v8 + 1;
        double v12 = *v8;
        *uint64_t v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          long long v13 = v10 + 1;
          do
          {
            double v14 = *v11++;
            double v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      uint64_t v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      uint64_t v16 = v8;
      *((void *)&v17 + 1) = v15;
      if (v8)
      {
        *(void *)&long long v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    double v7 = (double *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      float v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_25BFC1B9C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(char **)a1;
  double v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    unint64_t v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  double v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
  uint64_t v4 = *(char **)a1;
  float v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  unint64_t v11 = &v7[8 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *(void *)(v12 - 8) = v13;
    v12 -= 8;
  }
  while (v8 != v4);
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_25BFC1CDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(int a1, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, double **a3)
{
  double v5 = *a3;
  unint64_t v6 = a3[1];
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v7 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  if (v6 != v5)
  {
    unint64_t v9 = v6 - v5;
    do
    {
      unint64_t v10 = v9 >> 1;
      unint64_t v11 = &v5[v9 >> 1];
      double v13 = *v11;
      uint64_t v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13) {
        unint64_t v9 = v10;
      }
      else {
        double v5 = v12;
      }
    }
    while (v9);
    unint64_t v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t absl::StrCat(absl *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v2[1] = MEMORY[0x263F8C318] + 16;
  if (v3 < 0) {
    operator delete((void *)v2[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v4);
}

void sub_25BFC1F84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string_view>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
  if (v6) {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v7 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a1 + 16, v6);
  }
  else {
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v7 = 0;
  }
  __v.__first_ = v7;
  __v.__begin_ = v7 + v3;
  __v.__end_cap_.__value_ = &v7[v6];
  std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(a1 + 16, __v.__begin_, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v8 = *(void *)(a1 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v8;
}

void sub_25BFC2094(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(int a1, unsigned char *__dst, uint64_t a3)
{
  unint64_t v3 = __dst;
  size_t v4 = *(void *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  double v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    void *v3 = v8;
    unint64_t v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((unsigned char *)v3 + v4) = 0;
}

uint64_t *sentencepiece::swap(uint64_t *this, sentencepiece::SentencePieceText_SentencePiece *a2, sentencepiece::SentencePieceText_SentencePiece *a3)
{
  if (a2 != (sentencepiece::SentencePieceText_SentencePiece *)this)
  {
    uint64_t v3 = this[1];
    size_t v4 = (void *)(v3 & 0xFFFFFFFFFFFFFFFELL);
    if (v3) {
      size_t v4 = (void *)*v4;
    }
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if (v5) {
      uint64_t v6 = (void *)*v6;
    }
    if (v4 == v6) {
      return sentencepiece::SentencePieceText_SentencePiece::InternalSwap((sentencepiece::SentencePieceText_SentencePiece *)this, a2);
    }
    else {
      return (uint64_t *)google::protobuf::internal::GenericSwap((google::protobuf::internal *)this, a2, a3);
    }
  }
  return this;
}

uint64_t std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::map[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  size_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      std::__tree<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,sentencepiece::SentencePieceProcessor::ExtraOption> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_25BFC21F4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,sentencepiece::SentencePieceProcessor::ExtraOption> const&>(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = std::__tree<std::string_view>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    std::__tree<std::string>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void sentencepiece::Mmap<char>::~Mmap(void *a1)
{
  sentencepiece::Mmap<char>::~Mmap(a1);

  JUMPOUT(0x26117ABD0);
}

void *sentencepiece::Mmap<char>::~Mmap(void *a1)
{
  *a1 = &unk_270972E18;
  sentencepiece::Mmap<char>::close((uint64_t)a1);
  return a1;
}

void *sentencepiece::Mmap<char>::close(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  float result = *(void **)(a1 + 8);
  if (result) {
    float result = (void *)munmap(result, *(void *)(a1 + 16));
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

double std::__fs::filesystem::path::filename[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void *std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(void *a1, unsigned char *a2, unsigned char *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    int v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v15;
  }
  else {
    uint64_t v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  double v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_25BFC2510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  std::__fs::filesystem::path::__string_view v3 = *a2;
  size_t v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_25BFC2574(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::ResetVocabulary()
{
}

void sentencepiece::unigram::Lattice::~Lattice(sentencepiece::unigram::Lattice *this)
{
  *(void *)this = &unk_270973078;
  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList((void *)this + 12);
  std::__fs::filesystem::path::__string_view v3 = (void **)((char *)this + 72);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__fs::filesystem::path::__string_view v3 = (void **)((char *)this + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  sentencepiece::unigram::Lattice::~Lattice(this);

  JUMPOUT(0x26117ABD0);
}

uint64_t sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate(void *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[4];
  if (v4 >= v3)
  {
    unint64_t v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  uint64_t v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x30uLL);
    operator new[]();
  }
  uint64_t result = *(void *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sentencepiece::unigram::Lattice::Clear(sentencepiece::unigram::Lattice *this)
{
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 6);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 9);
  *((void *)this + 1) = "";
  *((void *)this + 2) = 0;
  *((void *)this + 4) = *((void *)this + 3);

  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Free((uint64_t)this + 96);
}

void sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Free(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  }
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(void *)(a1 + 8) + v4), 48 * *(void *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
}

void sentencepiece::unigram::Lattice::SetSentence(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  sentencepiece::unigram::Lattice::Clear((sentencepiece::unigram::Lattice *)a1);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  std::basic_string_view<_CharT, _Traits>::size_type v6 = (char **)(a1 + 24);
  std::vector<char const*>::reserve((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    uint64_t v7 = (void *)(a1 + 40);
    uint64_t v8 = *(void **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_25C005013[(unint64_t)*a2 >> 4]) {
        int v9 = asc_25C005013[(unint64_t)*a2 >> 4];
      }
      else {
        int v9 = a3;
      }
      if ((unint64_t)v8 >= *v7)
      {
        uint64_t v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          goto LABEL_76;
        }
        uint64_t v11 = *v7 - (void)*v6;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          double v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 40, v13);
        }
        else {
          double v14 = 0;
        }
        std::string v15 = &v14[8 * v10];
        *(void *)std::string v15 = a2;
        uint64_t v8 = v15 + 8;
        long long v17 = *(char **)(a1 + 24);
        uint64_t v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          uint64_t v16 = *v6;
        }
        *(void *)(a1 + 24) = v15;
        *(void *)(a1 + 32) = v8;
        *(void *)(a1 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = &v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *v8++ = a2;
      }
      *(void *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
  }
  unint64_t v19 = *(void *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    uint64_t v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61) {
LABEL_76:
    }
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    uint64_t v22 = v19 - (void)*v6;
    uint64_t v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
      uint64_t v23 = v21 + 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 40, v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = &v25[8 * v21];
    uint64_t v27 = &v25[8 * v24];
    *(void *)uint64_t v26 = a2;
    unint64_t v20 = v26 + 8;
    size_t v29 = *(char **)(a1 + 24);
    unint64_t v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        uint64_t v30 = *((void *)v28 - 1);
        v28 -= 8;
        *((void *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      unint64_t v28 = *v6;
    }
    *(void *)(a1 + 24) = v26;
    *(void *)(a1 + 32) = v20;
    *(void *)(a1 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *uint64_t v8 = a2;
    unint64_t v20 = v8 + 1;
  }
  *(void *)(a1 + 32) = v20;
  int v31 = (((unint64_t)v20 - *(void *)(a1 + 24)) >> 3) - 1;
  unsigned int v32 = v31 & ~(v31 >> 31);
  std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize((uint64_t *)(a1 + 48), v32 + 1);
  std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize((uint64_t *)(a1 + 72), v32 + 1);
  uint64_t v33 = 0;
  do
  {
    std::vector<char const*>::reserve((void **)(*(void *)(a1 + 48) + v33), 0x10uLL);
    std::vector<char const*>::reserve((void **)(*(void *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  BOOL v34 = (_DWORD *)sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((void *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  v34[4] = 0;
  unint64_t v35 = *(void ***)(a1 + 72);
  char v36 = v35[1];
  unint64_t v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    uint64_t v39 = ((char *)v36 - (unsigned char *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v40 = v37 - (void)*v35;
    uint64_t v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
      uint64_t v41 = v39 + 1;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42) {
      BOOL v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v35 + 2), v42);
    }
    else {
      BOOL v43 = 0;
    }
    uint64_t v44 = &v43[8 * v39];
    uint64_t v45 = &v43[8 * v42];
    *(void *)uint64_t v44 = v34;
    std::string v38 = v44 + 8;
    size_t v47 = (char *)*v35;
    uint64_t v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        uint64_t v48 = *((void *)v46 - 1);
        v46 -= 8;
        *((void *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      uint64_t v46 = (char *)*v35;
    }
    *unint64_t v35 = v44;
    v35[1] = v38;
    _OWORD v35[2] = v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    *char v36 = v34;
    std::string v38 = v36 + 1;
  }
  v35[1] = v38;
  BOOL v49 = (_DWORD *)sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((void *)(a1 + 96));
  size_t v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  uint64_t v51 = (void **)(*(void *)(a1 + 48) + 24 * v32);
  uint64_t v52 = v51 + 1;
  size_t v53 = v51[1];
  unint64_t v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    uint64_t v56 = ((char *)v53 - (unsigned char *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v57 = v54 - (void)*v51;
    uint64_t v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1)) {
      uint64_t v58 = v56 + 1;
    }
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v59 = v58;
    }
    if (v59) {
      uint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v51 + 2), v59);
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v61 = &v60[8 * v56];
    long long v62 = &v60[8 * v59];
    *(void *)uint64_t v61 = v50;
    int v55 = v61 + 8;
    uint64_t v63 = (char *)*v52;
    BOOL v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        uint64_t v65 = *((void *)v63 - 1);
        v63 -= 8;
        *((void *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      uint64_t v63 = (char *)*v51;
    }
    *uint64_t v51 = v61;
    *uint64_t v52 = v55;
    void v51[2] = v62;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    *size_t v53 = v49;
    int v55 = v53 + 1;
  }
  *uint64_t v52 = v55;
}

void std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        int v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sentencepiece::unigram::Lattice::Insert(sentencepiece::unigram::Lattice *this, int a2, int a3)
{
  uint64_t v6 = sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((void *)this + 12);
  uint64_t v7 = v6;
  int v8 = *((_DWORD *)this + 32) + *((_DWORD *)this + 34) * *((_DWORD *)this + 36) - 1;
  *(_DWORD *)(v6 + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  uint64_t v9 = *((void *)this + 3);
  uint64_t v10 = *(void *)(v9 + 8 * (a3 + a2));
  uint64_t v11 = *(void *)(v9 + 8 * a2);
  *(void *)uint64_t v6 = v11;
  *(void *)(v6 + 8) = (int)v10 - (int)v11;
  uint64_t v12 = (uint64_t **)(*((void *)this + 6) + 24 * a2);
  unint64_t v13 = (void **)(v12 + 1);
  double v14 = v12[1];
  uint64_t v16 = (char **)(v12 + 2);
  unint64_t v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    uint64_t v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = v15 - (void)*v12;
    uint64_t v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
      uint64_t v20 = v18 + 1;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v16, v21);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = (uint64_t *)&v22[8 * v18];
    unint64_t v24 = &v22[8 * v21];
    *uint64_t v23 = v7;
    long long v17 = v23 + 1;
    uint64_t v25 = (char *)*v13;
    uint64_t v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        uint64_t v27 = *((void *)v25 - 1);
        v25 -= 8;
        *--uint64_t v23 = v27;
      }
      while (v25 != v26);
      uint64_t v25 = (char *)*v12;
    }
    *uint64_t v12 = v23;
    void *v13 = v17;
    *uint64_t v16 = v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    uint64_t *v14 = v6;
    long long v17 = v14 + 1;
  }
  void *v13 = v17;
  unint64_t v28 = (void **)(*((void *)this + 9) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  size_t v29 = v28 + 1;
  uint64_t v30 = (uint64_t *)v28[1];
  unint64_t v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    uint64_t v33 = ((char *)v30 - (unsigned char *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v34 = v31 - (void)*v28;
    uint64_t v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
      uint64_t v35 = v33 + 1;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36) {
      unint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v28 + 2), v36);
    }
    else {
      unint64_t v37 = 0;
    }
    std::string v38 = (uint64_t *)&v37[8 * v33];
    uint64_t v39 = &v37[8 * v36];
    *std::string v38 = v7;
    unsigned int v32 = v38 + 1;
    uint64_t v40 = (char *)*v29;
    uint64_t v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        uint64_t v42 = *((void *)v40 - 1);
        v40 -= 8;
        *--std::string v38 = v42;
      }
      while (v40 != v41);
      uint64_t v40 = (char *)*v28;
    }
    char *v28 = v38;
    *size_t v29 = v32;
    v28[2] = v39;
    if (v40) {
      operator delete(v40);
    }
  }
  else
  {
    *uint64_t v30 = v7;
    unsigned int v32 = v30 + 1;
  }
  *size_t v29 = v32;
  return v7;
}

void sentencepiece::unigram::Lattice::Viterbi(sentencepiece::unigram::Lattice *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = 0;
  int v4 = ((*((void *)this + 4) - *((void *)this + 3)) >> 3) - 1;
  unsigned int v5 = v4 & ~(v4 >> 31);
  uint64_t v6 = *((void *)this + 6);
  while (1)
  {
    uint64_t v7 = (uint64_t **)(v6 + 24 * v3);
    int v8 = *v7;
    uint64_t v9 = v7[1];
    if (v8 != v9) {
      break;
    }
LABEL_14:
    if (++v3 == v5 + 1)
    {
      std::string __p = 0;
      uint64_t v46 = 0;
      size_t v47 = 0;
      uint64_t v21 = **(void **)(v6 + 24 * v5);
      int v22 = *(_DWORD *)(v21 + 36);
      uint64_t v23 = *(void *)(v21 + 40);
      if (*(void *)(v23 + 40))
      {
        unint64_t v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            uint64_t v25 = (v24 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61) {
              std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v26 = (v47 - (unsigned char *)__p) >> 2;
            if (v26 <= v25 + 1) {
              unint64_t v26 = v25 + 1;
            }
            if ((unint64_t)(v47 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v26;
            }
            if (v27) {
              unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v47, v27);
            }
            else {
              unint64_t v28 = 0;
            }
            size_t v29 = &v28[8 * v25];
            *(void *)size_t v29 = v23;
            unint64_t v24 = v29 + 8;
            unint64_t v31 = (char *)__p;
            uint64_t v30 = v46;
            if (v46 != __p)
            {
              do
              {
                uint64_t v32 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              uint64_t v30 = (char *)__p;
            }
            std::string __p = v29;
            uint64_t v46 = v24;
            size_t v47 = &v28[8 * v27];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)unint64_t v24 = v23;
            v24 += 8;
          }
          uint64_t v46 = v24;
          uint64_t v23 = *(void *)(v23 + 40);
        }
        while (*(void *)(v23 + 40));
        uint64_t v33 = __p;
        uint64_t v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          unint64_t v36 = (char *)__p + 8;
          do
          {
            uint64_t v37 = *((void *)v36 - 1);
            *((void *)v36 - 1) = *(void *)v34;
            *(void *)uint64_t v34 = v37;
            v34 -= 8;
            BOOL v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          uint64_t v33 = __p;
          unint64_t v24 = v46;
        }
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v33 = 0;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      std::vector<sentencepiece::unigram::Lattice::Node *>::__init_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((void *)a2, v33, (uint64_t)v24, (v24 - (unsigned char *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        uint64_t v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  uint64_t v10 = (uint64_t **)(*((void *)this + 9) + 24 * v3);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  while (1)
  {
    uint64_t v13 = *v8;
    *(void *)(*v8 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
    if (v11 == v12) {
      break;
    }
    uint64_t v14 = 0;
    float v15 = 0.0;
    uint64_t v16 = v11;
    do
    {
      uint64_t v18 = *v16++;
      uint64_t v17 = v18;
      float v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        float v15 = v19;
        uint64_t v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14) {
      break;
    }
    *(void *)(v13 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9) {
      goto LABEL_14;
    }
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 2)
  {
    LOBYTE(__p) = 0;
    uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"(", 1);
    uint64_t v40 = (void *)std::ostream::operator<<();
    uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") ", 2);
    uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"LOG(", 4);
    BOOL v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"ERROR", 5);
    uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__p);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
}

void sub_25BFC32DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Lattice::ForwardAlgorithm(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, uint64_t *a3@<X8>)
{
  int v6 = ((*((void *)this + 4) - *((void *)this + 3)) >> 3) - 1;
  int v7 = v6 & ~(v6 >> 31);
  unint64_t v8 = *((void *)this + 16) + *((void *)this + 17) * *((void *)this + 18);
  int v29 = 0;
  uint64_t v25 = a3;
  std::vector<float>::vector(a3, v8, &v29);
  uint64_t v9 = 0;
  uint64_t v28 = *((void *)this + 6);
  unint64_t v26 = this;
  uint64_t v27 = (v7 + 1);
  do
  {
    uint64_t v10 = (uint64_t *)(v28 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 != v12)
    {
      uint64_t v13 = *((void *)v26 + 9) + 24 * v9;
      float v15 = *(void **)v13;
      uint64_t v14 = *(void **)(v13 + 8);
      uint64_t v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          uint64_t v17 = *(unsigned int *)(*(void *)v11 + 24);
          uint64_t v18 = *v15;
          float v19 = *(float *)(v16 + 4 * v17);
          uint64_t v20 = v15;
          do
          {
            float v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a2 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19) {
                float v22 = v19;
              }
              else {
                float v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a2 * *(float *)(*v20 + 32));
              }
              if (v19 >= v21) {
                float v21 = v19;
              }
              if (v21 <= (float)(v22 + 50.0))
              {
                double v23 = v21;
                long double v24 = exp((float)(v22 - v21));
                float v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            float v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

float sentencepiece::unigram::Lattice::CalculateEntropy(sentencepiece::unigram::Lattice *this, float a2)
{
  uint64_t v5 = *((void *)this + 3);
  uint64_t v4 = *((void *)this + 4);
  unint64_t v6 = *((void *)this + 16) + *((void *)this + 17) * *((void *)this + 18);
  LODWORD(__p[0]) = 0;
  std::vector<float>::vector(v29, v6, __p);
  sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)__p);
  uint64_t v7 = 0;
  uint64_t v27 = *((void *)this + 6);
  unsigned int v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  unint64_t v26 = this;
  do
  {
    unint64_t v8 = (uint64_t *)(v27 + 24 * v7);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 != v10)
    {
      uint64_t v11 = (uint64_t **)(*((void *)v26 + 9) + 24 * v7);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = (float *)__p[0];
      float v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          uint64_t v16 = *(unsigned int *)(*(void *)v9 + 24);
          float v17 = v15[v16];
          uint64_t v18 = v12;
          do
          {
            uint64_t v19 = *v18++;
            uint64_t v20 = *(unsigned int *)(v19 + 24);
            float v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            float v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  float v22 = v29[0];
  float v23 = *((float *)v29[0] + *(unsigned int *)(**(void **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (float v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_25BFC363C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Lattice::NBest(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, uint64_t a3@<X1>, int a4@<W2>, uint64_t *a5@<X8>)
{
  uint64_t v177 = *MEMORY[0x263EF8340];
  if (a3 == 1)
  {
    if ((a4 & 1) == 0)
    {
      sentencepiece::unigram::Lattice::Viterbi(this, (uint64_t)&v173);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      *(void *)uint64_t v159 = a5;
      v159[8] = 0;
      long long v147 = operator new(0x20uLL);
      *a5 = (uint64_t)v147;
      a5[1] = (uint64_t)v147;
      a5[2] = (uint64_t)v147 + 32;
      a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>((uint64_t)(a5 + 2), (uint64_t)&v173, (uint64_t)&v175[1], (uint64_t)v147);
      if (v173)
      {
        *(void *)&long long v174 = v173;
        operator delete(v173);
      }
      return;
    }
  }
  else if (!a3)
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 1)
    {
      LOBYTE(v173) = 0;
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
      uint64_t v10 = (void *)std::ostream::operator<<();
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"LOG(", 4);
      uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"WARNING", 7);
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v173);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  long long v174 = 0u;
  memset(v175, 0, sizeof(v175));
  v173 = &unk_270972F28;
  uint64_t v176 = 512;
  long long v170 = 0uLL;
  uint64_t v171 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  uint64_t v169 = v15;
  int v16 = ((*((void *)this + 4) - *((void *)this + 3)) >> 3) - 1;
  *(void *)uint64_t v15 = **(void **)(*((void *)this + 6) + 24 * (v16 & ~(v16 >> 31)));
  *(void *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
  unint64_t v17 = *((void *)this + 16) + *((void *)this + 17) * *((void *)this + 18);
  *(_DWORD *)uint64_t v159 = 0;
  std::vector<float>::vector(__p, v17, v159);
  if (a4)
  {
    sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)v159);
    uint64_t v18 = (sentencepiece::random *)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v159;
    std::string __p[2] = *(void **)&v159[16];
    RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v18);
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v20 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(RandomGenerator);
    float v21 = logf((float)((float)((float)v20 * 2.3283e-10) + 0.0) + 0.0000001);
    float v22 = -logf(-v21);
  }
  else
  {
    sentencepiece::unigram::Lattice::Viterbi(this, (uint64_t)v167);
    if (v167[0])
    {
      v167[1] = v167[0];
      operator delete(v167[0]);
    }
    float v22 = *(float *)(*(void *)v15 + 36);
  }
  *(float *)(v15 + 16) = v22;
  int v148 = 0;
  char v149 = 0;
  if (10 * (int)a3 >= 512) {
    int v23 = 512;
  }
  else {
    int v23 = 10 * a3;
  }
  if (v23 <= 1) {
    int v24 = 1;
  }
  else {
    int v24 = v23;
  }
  int v150 = v24;
  while (1)
  {
    long long v25 = v170;
    if ((void)v170 == *((void *)&v170 + 1)) {
      break;
    }
    unint64_t v26 = *(uint64_t **)v170;
    if ((uint64_t)(*((void *)&v170 + 1) - v170) >= 9)
    {
      uint64_t v27 = 0;
      uint64_t v28 = (uint64_t)(*((void *)&v170 + 1) - v170) >> 3;
      int v29 = (void *)v170;
      do
      {
        uint64_t v30 = v29;
        v29 += v27 + 1;
        uint64_t v31 = 2 * v27;
        uint64_t v27 = (2 * v27) | 1;
        uint64_t v32 = v31 + 2;
        if (v32 < v28 && *(float *)(*v29 + 16) < *(float *)(v29[1] + 16))
        {
          ++v29;
          uint64_t v27 = v32;
        }
        *uint64_t v30 = *v29;
      }
      while (v27 <= (uint64_t)((unint64_t)(v28 - 2) >> 1));
      if (v29 == (void *)(*((void *)&v25 + 1) - 8))
      {
        *int v29 = v26;
      }
      else
      {
        *int v29 = **((void **)&v25 + 1);
        **((void **)&v25 + 1) = v26;
      }
    }
    *((void *)&v170 + 1) -= 8;
    uint64_t v33 = *v26;
    uint64_t v34 = (void **)*((void *)this + 9);
    if (*v26 == **v34)
    {
      std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::resize(a5, ((a5[1] - *a5) >> 5) + 1);
      for (size_t i = (void *)v26[1]; i[1]; size_t i = (void *)i[1])
      {
        uint64_t v36 = a5[1];
        uint64_t v37 = *(void **)(v36 - 24);
        unint64_t v38 = *(void *)(v36 - 16);
        if ((unint64_t)v37 >= v38)
        {
          uint64_t v40 = *(void *)(v36 - 32);
          uint64_t v41 = ((uint64_t)v37 - v40) >> 3;
          if ((unint64_t)(v41 + 1) >> 61) {
            std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v42 = v38 - v40;
          uint64_t v43 = v42 >> 2;
          if (v42 >> 2 <= (unint64_t)(v41 + 1)) {
            uint64_t v43 = v41 + 1;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          if (v44) {
            uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v36 - 16, v44);
          }
          else {
            uint64_t v45 = 0;
          }
          uint64_t v46 = &v45[8 * v41];
          *(void *)uint64_t v46 = *i;
          uint64_t v39 = v46 + 8;
          uint64_t v48 = *(char **)(v36 - 32);
          size_t v47 = *(char **)(v36 - 24);
          if (v47 != v48)
          {
            do
            {
              uint64_t v49 = *((void *)v47 - 1);
              v47 -= 8;
              *((void *)v46 - 1) = v49;
              v46 -= 8;
            }
            while (v47 != v48);
            size_t v47 = *(char **)(v36 - 32);
          }
          *(void *)(v36 - 32) = v46;
          *(void *)(v36 - 24) = v39;
          *(void *)(v36 - 16) = &v45[8 * v44];
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          *uint64_t v37 = *i;
          uint64_t v39 = v37 + 1;
        }
        *(void *)(v36 - 24) = v39;
      }
      uint64_t v50 = a5[1];
      *(_DWORD *)(v50 - 8) = *((_DWORD *)v26 + 4);
      if (a3 == (v50 - *a5) >> 5) {
        break;
      }
    }
    else
    {
      unint64_t v51 = (int)(v34[3 * *(int *)(v33 + 16) + 1] - v34[3 * *(int *)(v33 + 16)]);
      *(_DWORD *)uint64_t v159 = 0;
      std::vector<float>::vector(v166, v51, v159);
      *(_DWORD *)uint64_t v159 = 0;
      std::vector<float>::vector(v165, v51, v159);
      *(void *)uint64_t v159 = 0;
      MinLogLevel = (sentencepiece::random *)std::vector<double>::vector(&v163, v51, v159);
      int v53 = *(_DWORD *)(v33 + 16);
      uint64_t v54 = *((void *)this + 9);
      if (a4)
      {
        uint64_t v55 = *(void *)(v54 + 24 * v53);
        float v56 = -100000000.0;
        if (*(void *)(v54 + 24 * v53 + 8) != v55)
        {
          unint64_t v57 = 0;
          float v58 = *((float *)__p[0] + *(unsigned int *)(v33 + 24));
          float v56 = -100000000.0;
          do
          {
            float v59 = (float)((float)(*((float *)v26 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(void *)(v55 + 8 * v57) + 24)))
                        + (float)(a2 * *(float *)(*(void *)(v55 + 8 * v57) + 32)))
                - v58;
            *((float *)v166[0] + v57) = v59;
            uint64_t v60 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(MinLogLevel);
            std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v61 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v60);
            float v62 = logf((float)((float)((float)v61 * 2.3283e-10) + 0.0) + 0.0000001);
            float v63 = v59 - logf(-v62);
            *((float *)v165[0] + v57) = v63;
            if (v63 > v56) {
              float v56 = v63;
            }
            ++v57;
            int v64 = *(_DWORD *)(v33 + 16);
            uint64_t v54 = *((void *)this + 9);
            uint64_t v55 = *(void *)(v54 + 24 * v64);
          }
          while (v57 < (*(void *)(v54 + 24 * v64 + 8) - v55) >> 3);
          int v53 = *(_DWORD *)(v33 + 16);
        }
        uint64_t v65 = (double *)v163;
        if (v164 != v163)
        {
          float v66 = *((float *)v26 + 4);
          uint64_t v67 = (float *)v165[0];
          if ((unint64_t)((v164 - (unsigned char *)v163) >> 3) <= 1) {
            uint64_t v5 = 1;
          }
          else {
            uint64_t v5 = (v164 - (unsigned char *)v163) >> 3;
          }
          do
          {
            float v68 = *v67++;
            float v69 = expf(v68 - v56);
            float v70 = (float)(v66 - v68) + log1pf(-v69);
            float v71 = v66 - fmaxf(v70, 0.0);
            float v72 = expf(-fabsf(v70));
            *v65++ = (float)(v71 - log1pf(v72));
            --v5;
          }
          while (v5);
        }
      }
      uint64_t v73 = *(void *)(v54 + 24 * v53);
      if (*(void *)(v54 + 24 * v53 + 8) != v73)
      {
        unint64_t v74 = 0;
        do
        {
          uint64_t v75 = *(void *)(v73 + 8 * v74);
          *(void *)uint64_t v159 = v76;
          *(void *)uint64_t v76 = v75;
          if (a4)
          {
            *(_DWORD *)(v76 + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)v166[0] + v74);
            float v77 = *((double *)v163 + v74);
          }
          else
          {
            *(float *)(v76 + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *(float *)(v75 + 32) + *((float *)v26 + 5);
            float v77 = *(float *)(v75 + 36) + *((float *)v26 + 5);
          }
          *(float *)(v76 + 16) = v77;
          *(void *)(v76 + 8) = v26;
          ++v74;
          uint64_t v73 = *(void *)(*((void *)this + 9) + 24 * *(int *)(v33 + 16));
        }
        while (v74 < (*(void *)(*((void *)this + 9) + 24 * *(int *)(v33 + 16) + 8) - v73) >> 3);
      }
      if (!(((unint64_t)(v175[1] + v175[2] * v176) < 0x3B9ACA00) | v149 & 1))
      {
        MinLogLevel = (sentencepiece::random *)sentencepiece::logging::GetMinLogLevel(MinLogLevel);
        if ((int)MinLogLevel <= 1)
        {
          v159[0] = 0;
          uint64_t v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"(", 1);
          uint64_t v79 = (void *)std::ostream::operator<<();
          size_t v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)") ", 2);
          uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"LOG(", 4);
          uint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"WARNING", 7);
          uint64_t v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Allocator size exceeds ", 23);
          uint64_t v84 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sentencepiece::error::Die::~Die((sentencepiece::error::Die *)v159);
        }
        char v149 = 1;
      }
      uint64_t v85 = *((void *)&v170 + 1);
      int v86 = (void *)v170;
      if (*((void *)&v170 + 1) - (void)v170 >= 0x13879uLL)
      {
        long long v161 = 0uLL;
        uint64_t v162 = 0;
        memset(&v159[8], 0, 40);
        *(void *)uint64_t v159 = &unk_270972F28;
        uint64_t v160 = 512;
        *(_OWORD *)uint64_t v156 = 0u;
        long long v157 = 0u;
        float v158 = 1.0;
        ++v148;
        if ((int)sentencepiece::logging::GetMinLogLevel(MinLogLevel) <= 1)
        {
          LOBYTE(v172) = 0;
          uint64_t v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"(", 1);
          std::string::size_type v88 = (void *)std::ostream::operator<<();
          unint64_t v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)") ", 2);
          long long v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"LOG(", 4);
          uint64_t v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"WARNING", 7);
          uint64_t v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Too big agenda size ", 20);
          unint64_t v93 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)". Shrinking (round ", 19);
          uint64_t v94 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)") down to ", 10);
          uint64_t v95 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)".", 1);
          sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v172);
        }
        if (10 * (int)a3 >= 1)
        {
          int v96 = 0;
          while (1)
          {
            uint64_t v151 = (void *)v170;
            uint64_t v152 = v85;
            unint64_t v97 = *(void *)v170;
            uint64_t v155 = 0;
            uint64_t v172 = 0;
            if (!v97) {
              goto LABEL_181;
            }
            uint64_t v98 = &v172;
            unint64_t v99 = (unint64_t)v156[1];
            do
            {
              unint64_t v100 = 0x9DDFEA08EB382D69 * (((8 * v97) + 8) ^ HIDWORD(v97));
              unint64_t v101 = 0x9DDFEA08EB382D69 * (HIDWORD(v97) ^ (v100 >> 47) ^ v100);
              unint64_t v102 = 0x9DDFEA08EB382D69 * (v101 ^ (v101 >> 47));
              if (v99)
              {
                uint8x8_t v103 = (uint8x8_t)vcnt_s8((int8x8_t)v99);
                v103.i16[0] = vaddlv_u8(v103);
                if (v103.u32[0] > 1uLL)
                {
                  unint64_t v104 = 0x9DDFEA08EB382D69 * (v101 ^ (v101 >> 47));
                  if (v102 >= v99) {
                    unint64_t v104 = v102 % v99;
                  }
                }
                else
                {
                  unint64_t v104 = v102 & (v99 - 1);
                }
                uint64_t v105 = (void *)*((void *)v156[0] + v104);
                if (v105)
                {
                  for (unint64_t j = (void *)*v105; j; unint64_t j = (void *)*j)
                  {
                    unint64_t v107 = j[1];
                    if (v107 == v102)
                    {
                      if (j[2] == v97)
                      {
                        *uint64_t v98 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v103.u32[0] > 1uLL)
                      {
                        if (v107 >= v99) {
                          v107 %= v99;
                        }
                      }
                      else
                      {
                        v107 &= v99 - 1;
                      }
                      if (v107 != v104) {
                        break;
                      }
                    }
                  }
                }
              }
              long long v109 = *(_OWORD *)v97;
              *(void *)(v108 + 16) = *(void *)(v97 + 16);
              *(_OWORD *)uint64_t v108 = v109;
              *uint64_t v98 = v108;
              unint64_t v99 = (unint64_t)v156[1];
              if (v156[1])
              {
                uint8x8_t v110 = (uint8x8_t)vcnt_s8((int8x8_t)v156[1]);
                v110.i16[0] = vaddlv_u8(v110);
                if (v110.u32[0] > 1uLL)
                {
                  uint64_t v5 = v102;
                  if ((void *)v102 >= v156[1]) {
                    uint64_t v5 = v102 % (unint64_t)v156[1];
                  }
                }
                else
                {
                  uint64_t v5 = ((unint64_t)v156[1] - 1) & v102;
                }
                int v111 = (void *)*((void *)v156[0] + v5);
                if (v111)
                {
                  for (uint64_t k = (void *)*v111; k; uint64_t k = (void *)*k)
                  {
                    unint64_t v113 = k[1];
                    if (v113 == v102)
                    {
                      if (k[2] == v97) {
                        goto LABEL_170;
                      }
                    }
                    else
                    {
                      if (v110.u32[0] > 1uLL)
                      {
                        if ((void *)v113 >= v156[1]) {
                          v113 %= (unint64_t)v156[1];
                        }
                      }
                      else
                      {
                        v113 &= (unint64_t)v156[1] - 1;
                      }
                      if (v113 != v5) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v114 = operator new(0x20uLL);
              *uint64_t v114 = 0;
              v114[1] = v102;
              v114[2] = v97;
              v114[3] = v108;
              float v115 = (float)(unint64_t)(*((void *)&v157 + 1) + 1);
              if (!v99 || (float)(v158 * (float)v99) < v115)
              {
                BOOL v116 = (v99 & (v99 - 1)) == 0;
                if (v99 < 3) {
                  BOOL v116 = 0;
                }
                unint64_t v117 = (2 * v99) | !v116;
                unint64_t v118 = vcvtps_u32_f32(v115 / v158);
                if (v117 <= v118) {
                  int8x8_t prime = (int8x8_t)v118;
                }
                else {
                  int8x8_t prime = (int8x8_t)v117;
                }
                if (*(void *)&prime == 1)
                {
                  int8x8_t prime = (int8x8_t)2;
                }
                else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                {
                  int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                  unint64_t v99 = (unint64_t)v156[1];
                }
                if (*(void *)&prime <= v99)
                {
                  if (*(void *)&prime < v99)
                  {
                    unint64_t v126 = vcvtps_u32_f32((float)*((unint64_t *)&v157 + 1) / v158);
                    if (v99 < 3
                      || (uint8x8_t v127 = (uint8x8_t)vcnt_s8((int8x8_t)v99), v127.i16[0] = vaddlv_u8(v127), v127.u32[0] > 1uLL))
                    {
                      unint64_t v126 = std::__next_prime(v126);
                    }
                    else
                    {
                      uint64_t v128 = 1 << -(char)__clz(v126 - 1);
                      if (v126 >= 2) {
                        unint64_t v126 = v128;
                      }
                    }
                    if (*(void *)&prime <= v126) {
                      int8x8_t prime = (int8x8_t)v126;
                    }
                    if (*(void *)&prime >= v99)
                    {
                      unint64_t v99 = (unint64_t)v156[1];
                    }
                    else
                    {
                      if (prime) {
                        goto LABEL_126;
                      }
                      uint64_t v134 = v156[0];
                      v156[0] = 0;
                      if (v134) {
                        operator delete(v134);
                      }
                      unint64_t v99 = 0;
                      v156[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(void *)&prime >> 61) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  uint64_t v120 = operator new(8 * *(void *)&prime);
                  uint64_t v121 = v156[0];
                  v156[0] = v120;
                  if (v121) {
                    operator delete(v121);
                  }
                  uint64_t v122 = 0;
                  v156[1] = (void *)prime;
                  do
                    *((void *)v156[0] + v122++) = 0;
                  while (*(void *)&prime != v122);
                  uint64_t v123 = (void **)v157;
                  if ((void)v157)
                  {
                    unint64_t v124 = *(void *)(v157 + 8);
                    uint8x8_t v125 = (uint8x8_t)vcnt_s8(prime);
                    v125.i16[0] = vaddlv_u8(v125);
                    if (v125.u32[0] > 1uLL)
                    {
                      if (v124 >= *(void *)&prime) {
                        v124 %= *(void *)&prime;
                      }
                    }
                    else
                    {
                      v124 &= *(void *)&prime - 1;
                    }
                    *((void *)v156[0] + v124) = &v157;
                    for (m = *v123; m; unint64_t v124 = v130)
                    {
                      unint64_t v130 = m[1];
                      if (v125.u32[0] > 1uLL)
                      {
                        if (v130 >= *(void *)&prime) {
                          v130 %= *(void *)&prime;
                        }
                      }
                      else
                      {
                        v130 &= *(void *)&prime - 1;
                      }
                      if (v130 != v124)
                      {
                        if (!*((void *)v156[0] + v130))
                        {
                          *((void *)v156[0] + v13std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v123;
                          goto LABEL_151;
                        }
                        *uint64_t v123 = (void *)*m;
                        void *m = **((void **)v156[0] + v130);
                        **((void **)v156[0] + v13std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = m;
                        m = v123;
                      }
                      unint64_t v130 = v124;
LABEL_151:
                      uint64_t v123 = (void **)m;
                      m = (void *)*m;
                    }
                  }
                  unint64_t v99 = (unint64_t)prime;
                }
                if ((v99 & (v99 - 1)) != 0)
                {
                  if (v102 >= v99) {
                    uint64_t v5 = v102 % v99;
                  }
                  else {
                    uint64_t v5 = v102;
                  }
                }
                else
                {
                  uint64_t v5 = (v99 - 1) & v102;
                }
              }
              uint64_t v131 = v156[0];
              long long v132 = (void *)*((void *)v156[0] + v5);
              if (v132)
              {
                *uint64_t v114 = *v132;
LABEL_168:
                *long long v132 = v114;
                goto LABEL_169;
              }
              *uint64_t v114 = v157;
              *(void *)&long long v157 = v114;
              v131[v5] = &v157;
              if (*v114)
              {
                unint64_t v133 = *(void *)(*v114 + 8);
                if ((v99 & (v99 - 1)) != 0)
                {
                  if (v133 >= v99) {
                    v133 %= v99;
                  }
                }
                else
                {
                  v133 &= v99 - 1;
                }
                long long v132 = (char *)v156[0] + 8 * v133;
                goto LABEL_168;
              }
LABEL_169:
              ++*((void *)&v157 + 1);
LABEL_170:
              unint64_t v97 = *(void *)(v97 + 8);
              uint64_t v98 = (uint64_t *)(v108 + 8);
            }
            while (v97);
LABEL_181:
            uint64_t v155 = v172;
            if (v152 - (uint64_t)v151 >= 9)
            {
              uint64_t v135 = 0;
              uint64_t v136 = (v152 - (uint64_t)v151) >> 3;
              uint64_t v137 = *v151;
              uint64_t v138 = v151;
              do
              {
                uint64_t v139 = v138;
                v138 += v135 + 1;
                uint64_t v140 = 2 * v135;
                uint64_t v135 = (2 * v135) | 1;
                uint64_t v141 = v140 + 2;
                if (v141 < v136 && *(float *)(*v138 + 16) < *(float *)(v138[1] + 16))
                {
                  ++v138;
                  uint64_t v135 = v141;
                }
                *uint64_t v139 = *v138;
              }
              while (v135 <= (uint64_t)((unint64_t)(v136 - 2) >> 1));
              long long v142 = (void *)(v152 - 8);
              if (v138 == (void *)(v152 - 8))
              {
                *uint64_t v138 = v137;
              }
              else
              {
                *uint64_t v138 = *v142;
                *long long v142 = v137;
              }
            }
            uint64_t v85 = *((void *)&v170 + 1) - 8;
            *((void *)&v170 + 1) -= 8;
            if (++v96 == v150)
            {
              int v86 = (void *)v170;
              break;
            }
          }
        }
        if (v86)
        {
          *((void *)&v170 + 1) = v86;
          operator delete(v86);
        }
        long long v170 = v161;
        uint64_t v171 = v162;
        long long v143 = v174;
        long long v174 = *(_OWORD *)&v159[8];
        *(_OWORD *)&v159[8] = v143;
        uint64_t v144 = *(void *)&v159[24];
        uint64_t v145 = v176;
        *(void *)&v159[24] = v175[0];
        long long v146 = *(_OWORD *)&v175[1];
        *(_OWORD *)&v175[1] = *(_OWORD *)&v159[32];
        *(_OWORD *)&v159[32] = v146;
        v175[0] = v144;
        uint64_t v176 = v160;
        uint64_t v160 = v145;
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v156);
      }
      if (v163)
      {
        v164 = v163;
        operator delete(v163);
      }
      if (v165[0])
      {
        v165[1] = v165[0];
        operator delete(v165[0]);
      }
      if (v166[0])
      {
        v166[1] = v166[0];
        operator delete(v166[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v170) {
    operator delete((void *)v170);
  }
}

void sub_25BFC46D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a21);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  float v59 = a57;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  if (v59) {
    operator delete(v59);
  }
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::model::FreeList<sentencepiece::unigram::anonymous namespace'::Hypothesis>::Allocate(void *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[4];
  if (v4 >= v3)
  {
    unint64_t v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  uint64_t v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    operator new[]();
  }
  uint64_t result = *(void *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t std::priority_queue<sentencepiece::unigram::anonymous namespace'::Hypothesis *,std::vector<sentencepiece::unigram::anonymous namespace'::Hypothesis *>,sentencepiece::unigram::Lattice::NBest(unsigned long,BOOL,float)::HypothesisComparator>::push(uint64_t *a1, void *a2)
{
  uint64_t v5 = (void *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (void *)*a1;
    uint64_t v8 = ((uint64_t)v5 - *a1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = *a2;
    uint64_t v6 = (uint64_t)(v13 + 8);
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = (void *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
  uint64_t v15 = *a1;
  uint64_t v16 = (v6 - *a1) >> 3;
}

void std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = a1[1];
        do
        {
          unint64_t v9 = *(void **)(v7 - 32);
          v7 -= 32;
          uint64_t v8 = v9;
          if (v9)
          {
            *(void *)(v3 - 24) = v8;
            operator delete(v8);
          }
          uint64_t v3 = v7;
        }
        while (v7 != v6);
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__append(a1, v5);
  }
}

void *sentencepiece::model::FreeList<sentencepiece::unigram::anonymous namespace'::Hypothesis>::~FreeList(void *a1)
{
  *a1 = &unk_270972F28;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x26117ABA0](*v2, 0x1020C8062D53EE8);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sentencepiece::unigram::Lattice::Sample(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, void **a3@<X8>)
{
  if ((int)(((*((void *)this + 4) - *((void *)this + 3)) >> 3) - 1) <= 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    unint64_t v6 = *((void *)this + 16) + *((void *)this + 17) * *((void *)this + 18);
    LODWORD(v49[0]) = 0;
    std::vector<float>::vector(__p, v6, v49);
    sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)v49);
    uint64_t v7 = (sentencepiece::random *)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v49;
    uint64_t v52 = v50;
    RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v7);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v49[0] = 0;
    v49[1] = 0;
    uint64_t v50 = 0;
    int v8 = ((*((void *)this + 4) - *((void *)this + 3)) >> 3) - 1;
    uint64_t v9 = **(void **)(*((void *)this + 6) + 24 * (v8 & ~(v8 >> 31)));
    float v10 = *((float *)__p[0] + *(unsigned int *)(v9 + 24));
    do
    {
      unint64_t v11 = (float *)v49[0];
      v49[1] = v49[0];
      uint64_t v12 = (uint64_t *)(*((void *)this + 9) + 24 * *(unsigned int *)(v9 + 16));
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      uint64_t v15 = (float *)v49[0];
      if (*v12 != v13)
      {
        do
        {
          float v16 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(void *)v14 + 24))
                                  + (float)(a2 * *(float *)(*(void *)v14 + 32)))
                          - v10));
          if (v11 >= v50)
          {
            unint64_t v17 = (float *)v49[0];
            uint64_t v18 = ((char *)v11 - (char *)v49[0]) >> 2;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v20 = (char *)v50 - (char *)v49[0];
            if (((char *)v50 - (char *)v49[0]) >> 1 > v19) {
              unint64_t v19 = v20 >> 1;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              float v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v50, v21);
              unint64_t v17 = (float *)v49[0];
              unint64_t v11 = (float *)v49[1];
            }
            else
            {
              float v22 = 0;
            }
            int v23 = (float *)&v22[4 * v18];
            *int v23 = v16;
            int v24 = v23 + 1;
            while (v11 != v17)
            {
              int v25 = *((_DWORD *)v11-- - 1);
              *((_DWORD *)v23-- - 1) = v25;
            }
            v49[0] = v23;
            v49[1] = v24;
            uint64_t v50 = (float *)&v22[4 * v21];
            if (v17) {
              operator delete(v17);
            }
            unint64_t v11 = (float *)v24;
          }
          else
          {
            *v11++ = v16;
          }
          v49[1] = v11;
          v14 += 8;
        }
        while (v14 != v13);
        uint64_t v15 = (float *)v49[0];
      }
      std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>((uint64_t)v48, v15, v11);
      unsigned int v26 = *(_DWORD *)(v9 + 16);
      uint64_t v27 = *((void *)this + 9);
      uint64_t v9 = *(void *)(*(void *)(v27 + 24 * v26)
                     + 8
                     * (int)std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)v48, RandomGenerator, (double **)v48));
      uint64_t v28 = ***((void ***)this + 9);
      if (v9 != v28)
      {
        float v10 = *((float *)__p[0] + *(unsigned int *)(v9 + 24));
        uint64_t v30 = a3[1];
        unint64_t v29 = (unint64_t)a3[2];
        if ((unint64_t)v30 >= v29)
        {
          uint64_t v32 = ((char *)v30 - (unsigned char *)*a3) >> 3;
          if ((unint64_t)(v32 + 1) >> 61) {
            std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = v29 - (void)*a3;
          uint64_t v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
            uint64_t v34 = v32 + 1;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v34;
          }
          if (v35) {
            uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v35);
          }
          else {
            uint64_t v36 = 0;
          }
          uint64_t v37 = &v36[8 * v32];
          *(void *)uint64_t v37 = v9;
          uint64_t v31 = v37 + 8;
          uint64_t v39 = (char *)*a3;
          unint64_t v38 = (char *)a3[1];
          if (v38 != *a3)
          {
            do
            {
              uint64_t v40 = *((void *)v38 - 1);
              v38 -= 8;
              *((void *)v37 - 1) = v40;
              v37 -= 8;
            }
            while (v38 != v39);
            unint64_t v38 = (char *)*a3;
          }
          *a3 = v37;
          a3[1] = v31;
          a3[2] = &v36[8 * v35];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *uint64_t v30 = v9;
          uint64_t v31 = v30 + 1;
        }
        a3[1] = v31;
      }
      if (v48[0])
      {
        v48[1] = v48[0];
        operator delete(v48[0]);
      }
    }
    while (v9 != v28);
    unint64_t v42 = (unint64_t)*a3;
    uint64_t v41 = (char *)a3[1];
    if (*a3 != v41)
    {
      uint64_t v43 = v41 - 8;
      if ((unint64_t)v43 > v42)
      {
        unint64_t v44 = v42 + 8;
        do
        {
          uint64_t v45 = *(void *)(v44 - 8);
          *(void *)(v44 - 8) = *(void *)v43;
          *(void *)uint64_t v43 = v45;
          v43 -= 8;
          BOOL v46 = v44 >= (unint64_t)v43;
          v44 += 8;
        }
        while (!v46);
      }
    }
    if (v49[0])
    {
      v49[1] = v49[0];
      operator delete(v49[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_25BFC4FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::PopulateNodes(sentencepiece::unigram::Model *this, sentencepiece::unigram::Lattice *a2)
{
  float v4 = *((float *)this + 26);
  uint64_t v5 = ((*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3) - 1;
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a2 + 2);
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(&__p, *((int *)this + 23) + 1);
  uint64_t v42 = v5;
  if ((int)v5 < 1) {
    goto LABEL_40;
  }
  uint64_t v43 = 0;
  uint64_t v8 = 0;
  float v9 = v4 + -10.0;
  uint64_t v41 = v6 + (int)v7;
  do
  {
    float v10 = *(unsigned char **)(*((void *)a2 + 3) + 8 * v8);
    unint64_t v11 = (char *)__p;
    unint64_t v12 = (v46 - (unsigned char *)__p) >> 4;
    uint64_t v13 = (_DWORD *)*((void *)this + 5);
    uint64_t v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (void)v10) << 32)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = v10[v15];
        uint64_t v18 = v14 ^ v17;
        unsigned int v19 = v13[v18];
        if ((v19 & 0x800000FF) != v17) {
          break;
        }
        uint64_t v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            uint64_t v20 = &v11[16 * v16];
            *(_DWORD *)uint64_t v20 = v13[v14] & 0x7FFFFFFF;
            *((void *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while (v41 - v10 != v15);
    }
    else
    {
      unsigned int v21 = *v10;
      if (*v10)
      {
        unint64_t v16 = 0;
        uint64_t v22 = 1;
        do
        {
          uint64_t v23 = v14 ^ v21;
          unsigned int v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21) {
            break;
          }
          uint64_t v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              int v25 = &v11[16 * v16];
              *(_DWORD *)int v25 = v13[v14] & 0x7FFFFFFF;
              *((void *)v25 + 1) = v22;
            }
            ++v16;
          }
          unsigned int v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        unint64_t v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      char v44 = 1;
      unsigned int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      uint64_t v27 = (void *)std::ostream::operator<<();
      uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)") [", 3);
      unint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v44);
    }
    if (!v16)
    {
LABEL_38:
      uint64_t v40 = sentencepiece::unigram::Lattice::Insert(a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *((_DWORD *)this + 22);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    uint64_t v30 = 0;
    BOOL v31 = 0;
    do
    {
      while (1)
      {
        uint64_t v32 = (unint64_t *)(*((void *)a2 + 3) + v43);
        int v33 = -1;
        do
        {
          unint64_t v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((void *)__p + 2 * v30 + 1)]);
        uint64_t v35 = *((unsigned int *)__p + 4 * v30);
        if ((*(uint64_t (**)(void, uint64_t))(**((void **)this + 1) + 128))(*((void *)this + 1), v35)) {
          break;
        }
        uint64_t v36 = v8;
        uint64_t v37 = sentencepiece::unigram::Lattice::Insert(a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 1) + 136))(*((void *)this + 1), v35))
        {
          double v38 = (float)(*((float *)this + 27) * (float)v33) + -0.1;
        }
        else
        {
          double v38 = (*(float (**)(void, uint64_t))(**((void **)this + 1) + 96))(*((void *)this + 1), v35);
        }
        float v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          BOOL v31 = *(_DWORD *)(v37 + 20) == 1;
          uint64_t v8 = v36;
          break;
        }
        ++v30;
        BOOL v31 = 1;
        uint64_t v8 = v36;
        if (v30 == v16) {
          goto LABEL_39;
        }
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31) {
      goto LABEL_38;
    }
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    BOOL v46 = __p;
    operator delete(__p);
  }
}

void sub_25BFC53EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::LookupPredictive(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&__p);
  unint64_t v12 = __p;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&__p);
  if (v12)
  {
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    uint64_t v14 = (unsigned int *)__p;
    uint64_t v15 = v22;
    if (__p != v22)
    {
      do
      {
        uint64_t v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, v16);
          v20[1] = v17;
          unint64_t v18 = *(void *)(a5 + 8);
          if (v18 >= *(void *)(a5 + 16))
          {
            uint64_t v19 = std::vector<std::string>::__emplace_back_slow_path<std::string_view>(a5, (uint64_t)v20);
          }
          else
          {
            std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(a5 + 16, *(unsigned char **)(a5 + 8), (uint64_t)v20);
            uint64_t v19 = v18 + 24;
            *(void *)(a5 + 8) = v18 + 24;
          }
          *(void *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
    if (__p)
    {
      uint64_t v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  void *__p;
  unsigned int *v29;

  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&__p);
  unint64_t v12 = __p;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&__p);
  if (v12)
  {
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    uint64_t v14 = (unsigned int *)__p;
    uint64_t v15 = v29;
    if (__p != v29)
    {
      do
      {
        uint64_t v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v16) & 1) == 0)
        {
          unint64_t v18 = *(_DWORD **)(a5 + 8);
          uint64_t v17 = *(void *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            uint64_t v20 = *(_DWORD **)a5;
            unsigned int v21 = ((uint64_t)v18 - *(void *)a5) >> 2;
            uint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62) {
              std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v23 = v17 - (void)v20;
            if (v23 >> 1 > v22) {
              uint64_t v22 = v23 >> 1;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
              unsigned int v24 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unsigned int v24 = v22;
            }
            if (v24)
            {
              int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a5 + 16, v24);
              uint64_t v20 = *(_DWORD **)a5;
              unint64_t v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              int v25 = 0;
            }
            unsigned int v26 = &v25[4 * v21];
            *(_DWORD *)unsigned int v26 = v16;
            uint64_t v19 = v26 + 4;
            while (v18 != v20)
            {
              uint64_t v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(void *)a5 = v26;
            *(void *)(a5 + 8) = v19;
            *(void *)(a5 + 16) = &v25[4 * v24];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            sentencepiece::random *v18 = v16;
            uint64_t v19 = v18 + 1;
          }
          *(void *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
    if (__p)
    {
      unint64_t v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_25BFC5608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::anonymous namespace'::LookupPredictiveInternal(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  if (a4 != -1) {
    a5 = a4;
  }
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(a6, a5);
  unint64_t v12 = Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::resize((uint64_t)a6, v12);
}

void sub_25BFC56B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_25BFC590C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

sentencepiece::unigram::Model *sentencepiece::unigram::Model::Model(sentencepiece::unigram::Model *this, const sentencepiece::ModelProto *a2)
{
  float v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *((void *)v4 + 13) = 0;
  *((_DWORD *)v4 + 28) = 0;
  *(void *)float v4 = &unk_270972F88;
  *((void *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  unint64_t v5 = 0;
  *((void *)this + 13) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1)))
  {
    if ((*(unsigned int (**)(void, unint64_t))(**((void **)this + 1) + 104))(*((void *)this + 1), v5))
    {
      float v6 = (*(float (**)(void, unint64_t))(**((void **)this + 1) + 96))(*((void *)this + 1), v5);
      if (v6 >= *((float *)this + 26)) {
        float v6 = *((float *)this + 26);
      }
      *((float *)this + 26) = v6;
      float v7 = (*(float (**)(void, unint64_t))(**((void **)this + 1) + 96))(*((void *)this + 1), v5);
      if (*((float *)this + 27) >= v7) {
        float v7 = *((float *)this + 27);
      }
      *((float *)this + 27) = v7;
    }
    ++v5;
  }
  return this;
}

void sub_25BFC5A78(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

sentencepiece::ModelInterface *sentencepiece::ModelInterface::ModelInterface(sentencepiece::ModelInterface *this)
{
  *((void *)this + 2) = 0;
  *(void *)this = &unk_270972520;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = &unk_270973370;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = &unk_270973370;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
  *((_DWORD *)this + 22) = 0;
  sentencepiece::util::Status::Status((void *)this + 12);
  return this;
}

void sub_25BFC5B3C(_Unwind_Exception *a1)
{
  Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(v3);
  Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(v2);
  unint64_t v5 = *v1;
  sentencepiece::ModelInterface *v1 = 0;
  if (v5) {
    std::default_delete<sentencepiece::normalizer::PrefixMatcher>::operator()[abi:ne180100]((uint64_t)v1, v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::unigram::Model::Model(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7 = a4 > 7;
  if (a4 <= 7) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = a4 - 8;
  }
  if (v7) {
    float v9 = (char *)(a3 + 2);
  }
  else {
    float v9 = "";
  }
  uint64_t v10 = sentencepiece::ModelInterface::ModelInterface(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  unint64_t v11 = (_DWORD *)(v10 + 104);
  *(void *)uint64_t v10 = &unk_270972F88;
  *(_DWORD *)(v10 + 108) = 0;
  unint64_t v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  int v13 = (uint64_t *)(v10 + 96);
  sentencepiece::util::Status::Status((sentencepiece::util::Status *)&v17, (const sentencepiece::util::Status *)(v10 + 96));
  uint64_t v14 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v14)
  {
    sentencepiece::mmap_util::DecodePrefix<float>(a3, a4, v11, &v17);
    sentencepiece::util::Status::operator=(v13, &v17);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v17, a1);
    uint64_t v15 = v17;
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    if (!v15)
    {
      sentencepiece::mmap_util::DecodePrefix<float>(a3 + 1, a4 - 4, v12, &v17);
      sentencepiece::util::Status::operator=(v13, &v17);
      sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    }
  }
  return a1;
}

void sub_25BFC5CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  sentencepiece::ModelInterface::~ModelInterface(v2);
  _Unwind_Resume(a1);
}

void *sentencepiece::mmap_util::DecodePrefix<float>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    float v6 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v8[1] = MEMORY[0x263F8C318] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x26117AB30](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_25BFC5ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sentencepiece::unigram::Model::~Model(sentencepiece::unigram::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);

  JUMPOUT(0x26117ABD0);
}

void sentencepiece::unigram::Model::Encode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (*((_DWORD *)a1 + 28))
  {
    (*(void (**)(void **__return_ptr, sentencepiece::unigram::Model *))(*(void *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
    if (!a3) {
      goto LABEL_4;
    }
    int v25 = &unk_270973078;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v31 = 0;
    uint64_t v32 = &unk_270972F48;
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v35 = 0;
    uint64_t v36 = 1024;
    sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v25, a2, a3);
    sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v25, (uint64_t)&v23);
    unint64_t v8 = v23;
    char v9 = v24;
    if (v23 != v24)
    {
      uint64_t v10 = a4 + 2;
      unint64_t v11 = (char *)a4[1];
      do
      {
        uint64_t v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14) {
            unint64_t v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555) {
            unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v15 = v14;
          }
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v15);
          unint64_t v18 = &v16[24 * v13];
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          uint64_t v20 = (char *)*a4;
          uint64_t v19 = (char *)a4[1];
          unsigned int v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              long long v22 = *(_OWORD *)(v19 - 24);
              *((void *)v21 - 1) = *((void *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            uint64_t v19 = (char *)*a4;
          }
          unint64_t v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      unint64_t v8 = v23;
    }
    if (v8)
    {
      unsigned int v24 = v8;
      operator delete(v8);
    }
    sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v25);
  }
  else
  {
    sentencepiece::unigram::Model::EncodeOptimized((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_25BFC61F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  unint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::EncodeOptimized(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 16))(&v67);
  if ((void)v67)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v67);
  if (!a3) {
    goto LABEL_3;
  }
  float v8 = *(float *)(a1 + 104);
  uint64_t v9 = (a3 << 32) + 0x100000000;
  uint64_t v66 = a2;
  if (a3 << 32 == 0xFFFFFFFF00000000)
  {
    uint64_t v12 = 0;
  }
  else
  {
    if (v9 < 0) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v9 >> 32;
    uint64_t v11 = 3 * v10;
    uint64_t v12 = (float *)operator new(12 * v10);
    uint64_t v13 = v12;
    do
    {
      *(void *)uint64_t v13 = 0xFFFFFFFFLL;
      uint64_t v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    uint64_t v65 = a4;
    int v14 = 0;
    float v15 = v8 + -10.0;
    unint64_t v16 = (int)a3;
    float v62 = (char *)(v12 + 5);
    unint64_t v63 = a3;
    int v64 = v12;
    unint64_t v61 = (int)a3;
    do
    {
      float v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_25C005013[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4]) {
        int v18 = asc_25C005013[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      }
      else {
        int v18 = a3 - v14;
      }
      if (v16 <= v14) {
        goto LABEL_31;
      }
      uint64_t v19 = 0;
      char v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = a2 + v14;
      unint64_t v23 = v16 - v14;
      unsigned int v24 = (int *)&v62[12 * v14];
      do
      {
        uint64_t v25 = *(void *)(a1 + 40);
        int v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        unsigned int v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26) {
          break;
        }
        if ((v27 & 0x100) != 0)
        {
          uint64_t v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v28))
            {
              double v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              double v29 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v28);
            }
            double v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              float v31 = v30;
              *((float *)v24 - 1) = v31;
              *unsigned int v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      uint64_t v12 = v64;
      a2 = v66;
      unint64_t v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        uint64_t v32 = &v12[3 * v18 + 3 * v14];
        int v34 = *((_DWORD *)v32 + 2);
        long long v33 = (int *)(v32 + 2);
        float v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          *long long v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    uint64_t v37 = 0;
    v65[2] = 0;
    double v38 = v65 + 2;
    void *v65 = 0;
    v65[1] = 0;
    unsigned int v39 = a3;
    do
    {
      uint64_t v40 = &v12[3 * v39];
      uint64_t v42 = (unsigned int *)(v40 + 2);
      unint64_t v41 = *((int *)v40 + 2);
      if (v63 < v41) {
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      }
      int v43 = v39 - v41;
      uint64_t v44 = v66 + v41;
      if (v63 - v41 >= v43) {
        unint64_t v45 = v43;
      }
      else {
        unint64_t v45 = v63 - v41;
      }
      if ((unint64_t)v37 >= *v38)
      {
        unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        unint64_t v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48) {
          unint64_t v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555) {
          unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v49 = v48;
        }
        uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v38, v49);
        uint64_t v52 = &v50[24 * v47];
        *(void *)uint64_t v52 = v44;
        *((void *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        BOOL v46 = (char **)v65;
        uint64_t v54 = (char *)*v65;
        int v53 = (char *)v65[1];
        uint64_t v55 = v52;
        if (v53 == (char *)*v65)
        {
          uint64_t v12 = v64;
        }
        else
        {
          uint64_t v12 = v64;
          do
          {
            long long v56 = *(_OWORD *)(v53 - 24);
            *((void *)v55 - 1) = *((void *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          int v53 = (char *)*v65;
        }
        uint64_t v37 = v52 + 24;
        void *v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)uint64_t v37 = v44;
        *((void *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        uint64_t v12 = v64;
        BOOL v46 = (char **)v65;
      }
      v46[1] = v37;
      unsigned int v39 = *v42;
    }
    while ((int)*v42 > 0);
    uint64_t v57 = (long long *)*v46;
    if (*v46 != v37)
    {
      for (size_t i = v37 - 24; v57 < (long long *)i; i -= 24)
      {
        long long v67 = *v57;
        long long v59 = v67;
        *uint64_t v57 = *(_OWORD *)i;
        *(_OWORD *)size_t i = v59;
        int v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        uint64_t v57 = (long long *)((char *)v57 + 24);
      }
    }
  }
  if (v12) {
    operator delete(v12);
  }
}

void sub_25BFC6774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  float v15 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::NBestEncode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(__p);
  if (__p[0])
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)__p);
LABEL_3:
    memset(__p, 0, 24);
    std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(void *)&long long v38 = a5;
    BYTE8(v38) = 0;
    uint64_t v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    uint64_t v11 = __p[0];
    if (!__p[0]) {
      return;
    }
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)__p);
  if (!a3) {
    goto LABEL_3;
  }
  if (a4 >= 1024) {
    int v12 = 1024;
  }
  else {
    int v12 = a4;
  }
  if (v12 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 > 1)
  {
    __p[0] = &unk_270973078;
    memset(&__p[1], 0, 88);
    __p[12] = &unk_270972F48;
    long long v41 = 0u;
    long long v42 = 0u;
    uint64_t v43 = 0;
    uint64_t v44 = 1024;
    sentencepiece::unigram::Lattice::SetSentence((uint64_t)__p, a2, a3);
    sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)__p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    int v34 = a5;
    sentencepiece::unigram::Lattice::NBest((sentencepiece::unigram::Lattice *)__p, 0.0, v13, 0, (uint64_t *)&v38);
    uint64_t v33 = *((void *)&v38 + 1);
    for (uint64_t i = v38; i != v33; i += 32)
    {
      float v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      unint64_t v16 = *(uint64_t **)i;
      float v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        int v18 = 0;
        do
        {
          uint64_t v19 = *v16;
          if (v18 >= v37)
          {
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (unsigned char *)v35) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((v37 - (unsigned char *)v35) >> 3) > v21) {
              unint64_t v21 = 0x5555555555555556 * ((v37 - (unsigned char *)v35) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (unsigned char *)v35) >> 3) >= 0x555555555555555) {
              unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v22 = v21;
            }
            unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v37, v22);
            uint64_t v25 = &v23[24 * v20];
            *(_OWORD *)uint64_t v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            unsigned int v27 = (char *)v35;
            int v26 = v36;
            uint64_t v28 = v25;
            if (v36 != v35)
            {
              do
              {
                long long v29 = *(_OWORD *)(v26 - 24);
                *((void *)v28 - 1) = *((void *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              int v26 = (char *)v35;
            }
            int v18 = v25 + 24;
            float v35 = v28;
            uint64_t v36 = v25 + 24;
            uint64_t v37 = &v23[24 * v24];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(_OWORD *)int v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          uint64_t v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      double v30 = (float *)(i + 24);
      unint64_t v31 = v34[1];
      if (v31 >= v34[2])
      {
        uint64_t v32 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float const&>(v34, (long long **)&v35, v30);
      }
      else
      {
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<std::string_view,int>>&,float const&>((uint64_t)v34, (long long **)&v35, v30);
        uint64_t v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        uint64_t v36 = (char *)v35;
        operator delete(v35);
      }
    }
    float v35 = &v38;
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)__p);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, sentencepiece::unigram::Model *, unsigned __int8 *, uint64_t))(*(void *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)std::string __p = v38;
    std::string __p[2] = v39;
    unsigned int v39 = 0;
    long long v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    float v35 = a5;
    LOBYTE(v36) = 0;
    int v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v11 = (void *)v38;
    if ((void)v38)
    {
      *((void *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_25BFC6C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&__p);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::SampleEncode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&v27);
  if (v27)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v27);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v27);
  if (!a3) {
    goto LABEL_3;
  }
  unsigned int v27 = &unk_270973078;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v33 = 0;
  int v34 = &unk_270972F48;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v37 = 0;
  uint64_t v38 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v27, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v27);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sentencepiece::unigram::Lattice::Sample((sentencepiece::unigram::Lattice *)&v27, a5, (void **)&v25);
  uint64_t v10 = v25;
  uint64_t v11 = v26;
  if (v25 != v26)
  {
    int v12 = 0;
    uint64_t v13 = a4 + 2;
    do
    {
      uint64_t v14 = *v10;
      if ((unint64_t)v12 >= *v13)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v12[-*a4] >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(*v13 - *a4) >> 3) > v16) {
          unint64_t v16 = 0x5555555555555556 * ((uint64_t)(*v13 - *a4) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v13 - *a4) >> 3) >= 0x555555555555555) {
          unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v17 = v16;
        }
        int v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v17);
        unint64_t v20 = &v18[24 * v15];
        *(_OWORD *)unint64_t v20 = *(_OWORD *)v14;
        *((_DWORD *)v20 + 4) = *(_DWORD *)(v14 + 28);
        unint64_t v22 = (char *)*a4;
        unint64_t v21 = (char *)a4[1];
        unint64_t v23 = v20;
        if (v21 != (char *)*a4)
        {
          do
          {
            long long v24 = *(_OWORD *)(v21 - 24);
            *((void *)v23 - 1) = *((void *)v21 - 1);
            *(_OWORD *)(v23 - 24) = v24;
            v23 -= 24;
            v21 -= 24;
          }
          while (v21 != v22);
          unint64_t v21 = (char *)*a4;
        }
        int v12 = v20 + 24;
        *a4 = v23;
        a4[1] = v20 + 24;
        a4[2] = &v18[24 * v19];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(_OWORD *)int v12 = *(_OWORD *)v14;
        *((_DWORD *)v12 + 4) = *(_DWORD *)(v14 + 28);
        v12 += 24;
      }
      a4[1] = v12;
      ++v10;
    }
    while (v10 != v11);
    uint64_t v10 = v25;
  }
  if (v10)
  {
    int v26 = v10;
    operator delete(v10);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v27);
}

void sub_25BFC6F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void sentencepiece::unigram::Model::SampleEncodeAndScore(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 16))(&v123);
  if (v123)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v123);
LABEL_3:
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v123);
  if (!a3) {
    goto LABEL_3;
  }
  unint64_t v104 = a7;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  unint64_t v137 = 0;
  uint64_t v123 = (void **)&unk_270973078;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  uint64_t v129 = 0;
  unint64_t v130 = &unk_270972F48;
  long long v131 = 0u;
  long long v132 = 0u;
  uint64_t v133 = 0;
  uint64_t v134 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v123, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v123);
  sentencepiece::unigram::Lattice::ForwardAlgorithm((sentencepiece::unigram::Lattice *)&v123, a8, (uint64_t *)v122);
  float v17 = *((float *)v122[0]
        + *(unsigned int *)(**(void **)(*((void *)&v126 + 1)
                                        + 24
                                        * ((((*((void *)&v125 + 1) - (void)v125) >> 3) - 1) & ~((int)(((*((void *)&v125 + 1) - (void)v125) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sentencepiece::logging::GetMinLogLevel(v16) <= 2)
      {
        LOBYTE(__p[0]) = 0;
        long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
        long long v36 = (void *)std::ostream::operator<<();
        uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") ", 2);
        uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"LOG(", 4);
        unsigned int v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"ERROR", 5);
        uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"include_best not supported for wor false", 40);
        sentencepiece::error::Die::~Die((sentencepiece::error::Die *)__p);
      }
      long long v41 = a7;
      goto LABEL_114;
    }
    int v105 = a6;
    uint64_t v108 = a3;
    uint64_t v106 = a2;
    char v119 = 0;
    uint64_t v120 = 0;
    uint64_t v121 = 0;
    sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v123, (uint64_t)__p);
    int v18 = (uint64_t *)__p[0];
    uint64_t v19 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      unint64_t v20 = v120;
      do
      {
        uint64_t v21 = *v18;
        if (v20 >= (long long *)v121)
        {
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v119) >> 3);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((v121 - (char *)v119) >> 3) > v23) {
            unint64_t v23 = 0x5555555555555556 * ((v121 - (char *)v119) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v121 - (char *)v119) >> 3) >= 0x555555555555555) {
            unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v24 = v23;
          }
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v121, v24);
          unsigned int v27 = &v25[24 * v22];
          *(_OWORD *)unsigned int v27 = *(_OWORD *)v21;
          *((_DWORD *)v27 + 4) = *(_DWORD *)(v21 + 28);
          long long v29 = v119;
          long long v28 = v120;
          long long v30 = (long long *)v27;
          if (v120 != v119)
          {
            do
            {
              long long v31 = *(long long *)((char *)v28 - 24);
              *((void *)v30 - 1) = *((void *)v28 - 1);
              *(long long *)((char *)v30 - 24) = v31;
              long long v30 = (long long *)((char *)v30 - 24);
              long long v28 = (long long *)((char *)v28 - 24);
            }
            while (v28 != v29);
            long long v28 = v119;
          }
          unint64_t v20 = (long long *)(v27 + 24);
          char v119 = v30;
          uint64_t v120 = (long long *)(v27 + 24);
          uint64_t v121 = &v25[24 * v26];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          *unint64_t v20 = *(_OWORD *)v21;
          *((_DWORD *)v20 + 4) = *(_DWORD *)(v21 + 28);
          unint64_t v20 = (long long *)((char *)v20 + 24);
        }
        uint64_t v120 = v20;
        ++v18;
      }
      while (v18 != v19);
    }
    double v117 = 0.0;
    long long v32 = v136;
    if ((unint64_t)v136 >= v137)
    {
      uint64_t v34 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,double>(&v135, &v119, &v117);
    }
    else
    {
      *(void *)uint64_t v136 = 0;
      *((void *)v32 + 1) = 0;
      *((void *)v32 + 2) = 0;
      std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v32, v119, v120, 0xAAAAAAAAAAAAAAABLL * (((char *)v120 - (char *)v119) >> 3));
      float v33 = v117;
      *((float *)v32 + 6) = v33;
      uint64_t v34 = (uint64_t)(v32 + 32);
    }
    a2 = v106;
    a3 = v108;
    a6 = v105;
    uint64_t v136 = (char *)v34;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v119)
    {
      uint64_t v120 = v119;
      operator delete(v119);
    }
  }
  if (a5)
  {
    sentencepiece::unigram::Lattice::NBest((sentencepiece::unigram::Lattice *)&v123, a8, a4 + 1, 1, (uint64_t *)&v119);
    if (a6)
    {
      std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::vector(&v117, ((char *)v120 - (char *)v119) >> 5);
      uint64_t v43 = v119;
      long long v42 = v120;
      if (v120 != v119)
      {
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        unint64_t v46 = 0;
        do
        {
          if (&v43[v44] != (long long *)(*(void *)&v117 + v45))
          {
            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)(*(void *)&v117 + v45), *(char **)&v43[v44], *((void *)&v43[v44] + 1), (uint64_t)(*((void *)&v43[v44] + 1) - *(void *)&v43[v44]) >> 3);
            uint64_t v43 = v119;
            long long v42 = v120;
          }
          ++v46;
          v45 += 24;
          v44 += 2;
        }
        while (v46 < ((char *)v42 - (char *)v43) >> 5);
      }
      sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v123, (uint64_t)__p);
      uint64_t v47 = std::__find_impl[abi:ne180100]<std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *>,std::__identity>(*(uint64_t *)&v117, *(uint64_t *)&v118, (uint64_t)__p);
      uint64_t v48 = (int)(-1431655765 * ((unint64_t)(v47 - *(void *)&v117) >> 3));
      if (v48 == ((char *)v120 - (char *)v119) >> 5)
      {
        uint64_t v50 = v120 - 2;
        unint64_t v49 = (void *)*((void *)v120 - 4);
        if (v49)
        {
          *((void *)v120 - 3) = v49;
          operator delete(v49);
        }
      }
      else
      {
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,0>((__n128 *)&v119[2 * v48 + 2], (__n128 *)v120, (uint64_t)&v119[2 * v48]);
        uint64_t v50 = v70;
        float v71 = v120;
        if (v120 != v70)
        {
          float v72 = v120;
          do
          {
            unint64_t v74 = (void *)*((void *)v72 - 4);
            v72 -= 2;
            uint64_t v73 = v74;
            if (v74)
            {
              *((void *)v71 - 3) = v73;
              operator delete(v73);
            }
            float v71 = v72;
          }
          while (v72 != v50);
        }
      }
      uint64_t v120 = v50;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v117;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    uint64_t v75 = (void *)*((void *)v120 - 4);
    uint8x8_t v110 = v120 - 2;
    float v76 = *((float *)v120 - 2);
    if (v75)
    {
      *((void *)v120 - 3) = v75;
      operator delete(v75);
    }
    uint64_t v120 = v110;
    for (uint64_t i = v119; i != v110; i += 2)
    {
      memset(__p, 0, 24);
      uint64_t v78 = *(uint64_t **)i;
      uint64_t v79 = (uint64_t *)*((void *)i + 1);
      if (*(uint64_t **)i == v79)
      {
        float v81 = 0.0;
      }
      else
      {
        size_t v80 = 0;
        float v81 = 0.0;
        do
        {
          uint64_t v82 = *v78;
          float v83 = *(float *)(*v78 + 32);
          if (v80 >= __p[2])
          {
            unint64_t v84 = 0xAAAAAAAAAAAAAAABLL * ((v80 - (char *)__p[0]) >> 3);
            unint64_t v85 = v84 + 1;
            if (v84 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v85) {
              unint64_t v85 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555) {
              unint64_t v86 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v86 = v85;
            }
            uint64_t v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[2], v86);
            unint64_t v89 = &v87[24 * v84];
            *(_OWORD *)unint64_t v89 = *(_OWORD *)v82;
            *((_DWORD *)v89 + 4) = *(_DWORD *)(v82 + 28);
            uint64_t v91 = (char *)__p[0];
            long long v90 = (char *)__p[1];
            uint64_t v92 = v89;
            if (__p[1] != __p[0])
            {
              do
              {
                long long v93 = *(_OWORD *)(v90 - 24);
                *((void *)v92 - 1) = *((void *)v90 - 1);
                *(_OWORD *)(v92 - 24) = v93;
                v92 -= 24;
                v90 -= 24;
              }
              while (v90 != v91);
              long long v90 = (char *)__p[0];
            }
            size_t v80 = v89 + 24;
            __p[0] = v92;
            __p[1] = v89 + 24;
            std::string __p[2] = &v87[24 * v88];
            if (v90) {
              operator delete(v90);
            }
          }
          else
          {
            *(_OWORD *)size_t v80 = *(_OWORD *)v82;
            *((_DWORD *)v80 + 4) = *(_DWORD *)(v82 + 28);
            v80 += 24;
          }
          __p[1] = v80;
          float v81 = v81 + (float)(a8 * v83);
          ++v78;
        }
        while (v78 != v79);
      }
      *(float *)&double v117 = v81 - v17;
      uint64_t v94 = v136;
      if ((unint64_t)v136 >= v137)
      {
        uint64_t v95 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(&v135, (long long **)__p, &v117);
      }
      else
      {
        *(void *)uint64_t v136 = 0;
        *((void *)v94 + 1) = 0;
        *((void *)v94 + 2) = 0;
        std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v94, (long long *)__p[0], (long long *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v94 + 6) = LODWORD(v117);
        uint64_t v95 = (uint64_t)(v94 + 32);
      }
      uint64_t v136 = (char *)v95;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    uint64_t v96 = v135;
    for (unint64_t j = v136; (char *)v96 != j; v96 += 32)
    {
      float v98 = *(float *)(v96 + 24);
      if (v98 != 0.0)
      {
        double v99 = v98 - v76;
        long double v100 = exp(v99);
        if (v99 <= -10.0)
        {
          double v102 = v99 + v100 * -0.5 + v100 * v100 / 24.0 + pow(v100, 4.0) / -2880.0;
        }
        else
        {
          long double v101 = expm1(-v100);
          double v102 = log(-v101);
        }
        float v103 = v102;
        *(float *)(v96 + 24) = v103;
      }
    }
    __p[0] = &v119;
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    uint64_t v52 = v135;
    uint64_t v51 = v136;
  }
  else
  {
    uint64_t v52 = v135;
    uint64_t v51 = v136;
    if (a4 > (unint64_t)((uint64_t)&v136[-v135] >> 5))
    {
      uint64_t v109 = a3;
      unint64_t v107 = a2;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = &unk_270973078;
        __p[12] = &unk_270972F48;
        long long v113 = 0u;
        long long v114 = 0u;
        uint64_t v115 = 0;
        uint64_t v116 = 1024;
        sentencepiece::unigram::Lattice::SetSentence((uint64_t)__p, a2, a3);
        sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)__p);
        char v119 = 0;
        uint64_t v120 = 0;
        uint64_t v121 = 0;
        sentencepiece::unigram::Lattice::Sample((sentencepiece::unigram::Lattice *)__p, a8, (void **)&v117);
        double v54 = v117;
        double v53 = v118;
        float v55 = 0.0;
        if (*(void *)&v117 != *(void *)&v118)
        {
          long long v56 = v120;
          do
          {
            uint64_t v57 = **(void **)&v54;
            if (v56 >= (long long *)v121)
            {
              unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (char *)v119) >> 3);
              unint64_t v59 = v58 + 1;
              if (v58 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((v121 - (char *)v119) >> 3) > v59) {
                unint64_t v59 = 0x5555555555555556 * ((v121 - (char *)v119) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v121 - (char *)v119) >> 3) >= 0x555555555555555) {
                unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v60 = v59;
              }
              unint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v121, v60);
              unint64_t v63 = &v61[24 * v58];
              *(_OWORD *)unint64_t v63 = *(_OWORD *)v57;
              *((_DWORD *)v63 + 4) = *(_DWORD *)(v57 + 28);
              uint64_t v65 = v119;
              int v64 = v120;
              uint64_t v66 = (long long *)v63;
              if (v120 != v119)
              {
                do
                {
                  long long v67 = *(long long *)((char *)v64 - 24);
                  *((void *)v66 - 1) = *((void *)v64 - 1);
                  *(long long *)((char *)v66 - 24) = v67;
                  uint64_t v66 = (long long *)((char *)v66 - 24);
                  int v64 = (long long *)((char *)v64 - 24);
                }
                while (v64 != v65);
                int v64 = v119;
              }
              long long v56 = (long long *)(v63 + 24);
              char v119 = v66;
              uint64_t v120 = (long long *)(v63 + 24);
              uint64_t v121 = &v61[24 * v62];
              if (v64) {
                operator delete(v64);
              }
            }
            else
            {
              *long long v56 = *(_OWORD *)v57;
              *((_DWORD *)v56 + 4) = *(_DWORD *)(v57 + 28);
              long long v56 = (long long *)((char *)v56 + 24);
            }
            uint64_t v120 = v56;
            float v55 = v55 + (float)(a8 * *(float *)(v57 + 32));
            *(void *)&v54 += 8;
          }
          while (*(void *)&v54 != *(void *)&v53);
        }
        float v111 = v55 - v17;
        float v68 = v136;
        if ((unint64_t)v136 >= v137)
        {
          uint64_t v69 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(&v135, &v119, &v111);
        }
        else
        {
          *(void *)uint64_t v136 = 0;
          *((void *)v68 + 1) = 0;
          *((void *)v68 + 2) = 0;
          std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v68, v119, v120, 0xAAAAAAAAAAAAAAABLL * (((char *)v120 - (char *)v119) >> 3));
          *((float *)v68 + 6) = v111;
          uint64_t v69 = (uint64_t)(v68 + 32);
        }
        a2 = v107;
        a3 = v109;
        uint64_t v136 = (char *)v69;
        if (v117 != 0.0)
        {
          double v118 = v117;
          operator delete(*(void **)&v117);
        }
        if (v119)
        {
          uint64_t v120 = v119;
          operator delete(v119);
        }
        sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)__p);
        uint64_t v52 = v135;
        uint64_t v51 = v136;
      }
      while (a4 > (unint64_t)((uint64_t)&v136[-v135] >> 5));
    }
  }
  *unint64_t v104 = v52;
  v104[1] = (uint64_t)v51;
  v104[2] = v137;
  long long v41 = &v135;
LABEL_114:
  *long long v41 = 0;
  v41[1] = 0;
  v41[2] = 0;
  if (v122[0])
  {
    v122[1] = v122[0];
    operator delete(v122[0]);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v123);
  uint64_t v123 = (void **)&v135;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v123);
}

void sub_25BFC7AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void **a46)
{
  if (__p)
  {
    a19 = __p;
    operator delete(__p);
  }
  std::string __p = &a37;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a40;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  unint64_t v49 = *(void **)(v46 + 200);
  if (v49)
  {
    *(void *)(v46 + 208) = v49;
    operator delete(v49);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&a46);
  a46 = (void **)(v47 - 160);
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&a46);
  _Unwind_Resume(a1);
}

float sentencepiece::unigram::Model::CalculateEntropy(sentencepiece::unigram::Model *a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  float v8 = &unk_270973078;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = 0;
  unint64_t v15 = &unk_270972F48;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  uint64_t v19 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v8, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v8);
  float v6 = sentencepiece::unigram::Lattice::CalculateEntropy((sentencepiece::unigram::Lattice *)&v8, a4);
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v8);
  return v6;
}

void sub_25BFC7CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)va);
  _Unwind_Resume(a1);
}

BOOL sentencepiece::unigram::Model::VerifyOutputsEquivalent(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  strcpy(__s, " ");
  size_t v10 = strlen(__s);
  absl::internal::Splitter::Splitter((char **)&v44, a2, a3, (unsigned __int8 *)__s, v10, 0);
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  std::string __p = 0;
  std::vector<std::string_view>::__init_with_size[abi:ne180100]<std::string_view*,std::string_view*>(&__p, v44, (uint64_t)v45, (v45 - (unsigned char *)v44) >> 4);
  long long v11 = __p;
  long long v12 = v47;
  if (__p == v47)
  {
    float v14 = 0.0;
    if (__p)
    {
LABEL_11:
      uint64_t v47 = v11;
      operator delete(v11);
    }
  }
  else
  {
    float v13 = *(float *)(a1 + 104) + -10.0;
    float v14 = 0.0;
    do
    {
      uint64_t v15 = v11[1];
      uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 112))(a1, *v11, v15);
      if (v16 == *(_DWORD *)(a1 + 88))
      {
        float v14 = v13 + v14;
      }
      else
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v16)) {
          double v17 = (float)(*(float *)(a1 + 108) * (float)(int)v15) + -0.1;
        }
        else {
          double v17 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v16);
        }
        float v14 = v17 + v14;
      }
      v11 += 2;
    }
    while (v11 != v12);
    long long v11 = __p;
    if (__p) {
      goto LABEL_11;
    }
  }
  if (v44)
  {
    uint64_t v45 = v44;
    operator delete(v44);
  }
  strcpy(__s, " ");
  size_t v18 = strlen(__s);
  absl::internal::Splitter::Splitter((char **)&v44, a4, a5, (unsigned __int8 *)__s, v18, 0);
  long long v42 = 0;
  uint64_t v43 = 0;
  long long v41 = 0;
  std::vector<std::string_view>::__init_with_size[abi:ne180100]<std::string_view*,std::string_view*>(&v41, v44, (uint64_t)v45, (v45 - (unsigned char *)v44) >> 4);
  uint64_t v19 = v41;
  unint64_t v20 = v42;
  if (v41 != v42)
  {
    float v21 = *(float *)(a1 + 104) + -10.0;
    float v22 = 0.0;
    do
    {
      uint64_t v23 = v19[1];
      uint64_t v24 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 112))(a1, *v19, v23);
      if (v24 == *(_DWORD *)(a1 + 88))
      {
        float v22 = v21 + v22;
      }
      else
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v24)) {
          double v25 = (float)(*(float *)(a1 + 108) * (float)(int)v23) + -0.1;
        }
        else {
          double v25 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v24);
        }
        float v22 = v25 + v22;
      }
      v19 += 2;
    }
    while (v19 != v20);
    uint64_t v19 = v41;
    if (!v41) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  float v22 = 0.0;
  if (v41)
  {
LABEL_24:
    long long v42 = v19;
    operator delete(v19);
  }
LABEL_25:
  uint64_t v26 = (sentencepiece::logging *)v44;
  if (v44)
  {
    uint64_t v45 = v44;
    operator delete(v44);
  }
  float v27 = vabds_f32(v14, v22);
  if (v27 > 0.0000001 && (int)sentencepiece::logging::GetMinLogLevel(v26) <= 1)
  {
    LOBYTE(v44) = 0;
    long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"unigram_model.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(", 1);
    long long v29 = (void *)std::ostream::operator<<();
    long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") ", 2);
    long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"LOG(", 4);
    long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"WARNING", 7);
    float v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)") ", 2);
    uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, a2, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", Score: ", 9);
    long long v36 = (void *)std::ostream::operator<<();
    uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)". Right: ", 9);
    uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, a4, a5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", Score: ", 9);
    unsigned int v39 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)".", 1);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v44);
  }
  return v27 <= 0.0000001;
}

void sub_25BFC8170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::MemoryMappableString(sentencepiece::unigram::Model *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sentencepiece::ModelInterface::MemoryMappableString(this, &v13);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(p_p->__r_.__value_.__l.__data_) = *((_DWORD *)this + 26);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v5 = &__p;
  }
  else {
    unint64_t v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v7 = &__p;
  }
  else {
    unsigned int v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v7->__r_.__value_.__l.__data_) = *((_DWORD *)this + 27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v8 = &__p;
  }
  else {
    float v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v10 = &v13;
  }
  else {
    size_t v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_25BFC830C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::unigram::Model::IsSampleEncodeAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

uint64_t sentencepiece::unigram::Model::IsNBestEncodeAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

uint64_t sentencepiece::unigram::Model::IsSampleEncodeAndScoreAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

uint64_t sentencepiece::unigram::Model::IsCalculateEntropyAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

void *std::vector<sentencepiece::unigram::Lattice::Node *>::__init_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25BFC83E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(uint64_t a1, unsigned char *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  std::string::size_type v9 = *(unsigned int **)(a1 + 16);
  unsigned int v10 = *v9;
  if (a5)
  {
    int v11 = *a2;
    unint64_t v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v11;
    unsigned int v10 = v9[v12];
    if ((v10 & 0x800000FF) == v11)
    {
      uint64_t v13 = a5 - 1;
      float v14 = a2 + 1;
      while (1)
      {
        unint64_t v15 = v12;
        if (!v13) {
          goto LABEL_16;
        }
        int v16 = *v14++;
        unint64_t v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v16;
        unsigned int v10 = v9[v12];
        --v13;
        if ((v10 & 0x800000FF) != v16) {
          goto LABEL_14;
        }
      }
    }
  }
  else
  {
    int v17 = *a2;
    if (!*a2)
    {
      unint64_t v15 = 0;
      LODWORD(v12) = 0;
LABEL_16:
      if ((v10 & 0x100) != 0) {
        int v22 = v9[(v10 >> 10 << ((v10 >> 6) & 8)) ^ v12] & 0x7FFFFFFF;
      }
      else {
        int v22 = -1;
      }
      goto LABEL_19;
    }
    unint64_t v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v17;
    unsigned int v10 = v9[v18];
    if ((v10 & 0x800000FF) == v17)
    {
      uint64_t v19 = a2 + 1;
      LODWORD(v12) = v18;
      while (1)
      {
        unint64_t v15 = v18;
        int v21 = *v19++;
        int v20 = v21;
        if (!v21) {
          goto LABEL_16;
        }
        unint64_t v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v20;
        unsigned int v10 = v9[v18];
        LODWORD(v12) = v18;
        if ((v10 & 0x800000FF) != v20) {
          goto LABEL_14;
        }
      }
    }
  }
  unint64_t v15 = 0;
LABEL_14:
  int v22 = -2;
LABEL_19:
  long long v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v41.n128_u32[0] = 0;
  v41.n128_u64[1] = v15;
  int v42 = v22;
  std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::push_back(v43, &v41);
  uint64_t v23 = *((void *)&v44 + 1);
  if (*((void *)&v44 + 1))
  {
    unint64_t v24 = 0;
    do
    {
      double v25 = (int *)(*(void *)(*((void *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))
                  + 24 * ((unint64_t)v44 % 0xAA));
      int v26 = *v25;
      uint64_t v27 = v25[2];
      int v28 = v25[4];
      *(void *)&long long v44 = v44 + 1;
      *((void *)&v44 + 1) = v23 - 1;
      if ((unint64_t)v44 >= 0x154)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((void *)&v43[0] + 1) += 8;
        *(void *)&long long v44 = v44 - 170;
      }
      if ((v28 & 0x80000000) == 0)
      {
        uint64_t v29 = a3 + 16 * v24;
        *(_DWORD *)uint64_t v29 = v28;
        *(void *)(v29 + 8) = a5;
        ++v24;
      }
      BOOL v31 = a6 >= 0 && v26 > a6;
      if (v24 >= a4 || v31) {
        break;
      }
      if (v28 != -2)
      {
        unsigned __int32 v32 = v26 + 1;
        for (int i = 1; i != 256; ++i)
        {
          uint64_t v34 = *(void *)(a1 + 16);
          unint64_t v35 = (*(_DWORD *)(v34 + 4 * v27) >> 10 << ((*(_DWORD *)(v34 + 4 * v27) >> 6) & 8)) ^ v27 ^ i;
          unsigned int v36 = *(_DWORD *)(v34 + 4 * v35);
          if (i == (v36 & 0x800000FF))
          {
            if ((v36 & 0x100) != 0) {
              int v37 = *(_DWORD *)(v34 + 4 * ((v36 >> 10 << ((v36 >> 6) & 8)) ^ v35)) & 0x7FFFFFFF;
            }
            else {
              int v37 = -1;
            }
            v41.n128_u32[0] = v32;
            v41.n128_u64[1] = v35;
            int v42 = v37;
            std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::push_back(v43, &v41);
          }
        }
      }
      uint64_t v23 = *((void *)&v44 + 1);
    }
    while (*((void *)&v44 + 1));
  }
  else
  {
    unint64_t v24 = 0;
  }
  std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::~deque[abi:ne180100](v43);
  return v24;
}

void sub_25BFC86F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__append((void **)a1, a2 - v2);
  }
}

__n128 std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  size_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *size_t v8 = result;
  ++a1[5];
  return result;
}

void std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::string::size_type v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)size_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        size_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __n128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__n128 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::string::size_type v9 = (char *)a1[1];
    }
    size_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::string::size_type v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        size_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        size_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_25BFC8AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *> &>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *> &>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    unint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::vector<std::string_view>::__init_with_size[abi:ne180100]<std::string_view*,std::string_view*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<_NSRange>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25BFC91E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList(void *a1)
{
  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList(a1);

  JUMPOUT(0x26117ABD0);
}

void *sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList(void *a1)
{
  *a1 = &unk_270972F48;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x26117ABA0](*v2, 0x1070C8005A2B047);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    unint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_25BFC941C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<sentencepiece::unigram::Lattice::Node *>::__init_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((void *)v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_25BFC962C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void sentencepiece::model::FreeList<sentencepiece::unigram::anonymous namespace'::Hypothesis>::~FreeList(void *a1)
{
  JUMPOUT(0x26117ABD0);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::unigram::Lattice::NBest(unsigned long,BOOL,float)::HypothesisComparator &,std::__wrap_iter<sentencepiece::unigram::anonymous namespace'::Hypothesis **>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    unint64_t v3 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v4 = (void *)(result + 8 * v3);
    uint64_t v5 = *v4;
    uint64_t v8 = *(void *)(a2 - 8);
    uint64_t v6 = (void *)(a2 - 8);
    uint64_t v7 = v8;
    float v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        uint64_t v10 = v4;
        void *v6 = v5;
        if (!v3) {
          break;
        }
        unint64_t v3 = (v3 - 1) >> 1;
        uint64_t v4 = (void *)(result + 8 * v3);
        uint64_t v5 = *v4;
        uint64_t v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      *uint64_t v10 = v7;
    }
  }
  return result;
}

uint64_t std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = 32 * a2;
      uint64_t v15 = v7 + 32 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(void *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      uint64_t v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    v19[4] = result;
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(result, v12);
    }
    else {
      long long v13 = 0;
    }
    unint64_t v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    void v19[3] = &v13[32 * v12];
    uint64_t v17 = 32 * a2;
    uint64_t v18 = &v16[32 * a2];
    do
    {
      *(void *)unint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((void *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    v19[2] = v18;
    std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__swap_out_circular_buffer(a1, v19);
    return std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_25BFC9820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<double>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_25BFC99F8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<std::string_view,int>>&,float const&>(uint64_t a1, long long **a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_25BFC9A80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float const&>(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  uint64_t v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_25BFC9B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,double>(uint64_t *a1, long long **a2, double *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v20 = a1 + 2;
  if (v11) {
    char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v17[0] = v12;
  v17[1] = v13;
  uint64_t v18 = v13;
  uint64_t v19 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float v14 = *a3;
  *((float *)v13 + 6) = v14;
  v18 += 32;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_25BFC9DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_25BFC9E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__find_impl[abi:ne180100]<std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *>,std::__identity>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8) - *(void *)a3;
    while (*(void *)(v3 + 8) - *(void *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

__n128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,0>(__n128 *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  size_t v5 = a2;
  do
  {
    std::vector<sentencepiece::unigram::Lattice::Node *>::__move_assign(a3, v4);
    *(_DWORD *)(a3 + 24) = v4[1].n128_u32[2];
    a3 += 32;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

__n128 std::vector<sentencepiece::unigram::Lattice::Node *>::__move_assign(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  uint64_t v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_25BFCA0D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

sentencepiece::character::Model *sentencepiece::character::Model::Model(sentencepiece::character::Model *this, const sentencepiece::ModelProto *a2)
{
  uint64_t v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *(void *)uint64_t v4 = &unk_270973098;
  *((void *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  return this;
}

void sub_25BFCA13C(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::character::Model::~Model(sentencepiece::character::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);

  JUMPOUT(0x26117ABD0);
}

void sentencepiece::character::Model::Encode(uint64_t *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v25);
  if (v25)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
  if (!a3) {
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    uint64_t v8 = (int)sentencepiece::normalizer::PrefixMatcher::PrefixMatch(a1[2], a2, a3, 0);
    int v9 = (*(uint64_t (**)(uint64_t *, unsigned char *, uint64_t))(*a1 + 112))(a1, a2, v8);
    int v10 = v9;
    char v12 = (char *)a4[1];
    unint64_t v11 = (char *)a4[2];
    if (v12 >= v11)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a4) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*a4) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v17);
      uint64_t v20 = &v18[24 * v14];
      *(void *)uint64_t v20 = a2;
      *((void *)v20 + 1) = v8;
      *((_DWORD *)v20 + 4) = v10;
      uint64_t v22 = (char *)*a4;
      uint64_t v21 = (char *)a4[1];
      uint64_t v23 = v20;
      if (v21 != *a4)
      {
        do
        {
          long long v24 = *(_OWORD *)(v21 - 24);
          *((void *)v23 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        uint64_t v21 = (char *)*a4;
      }
      long long v13 = v20 + 24;
      *a4 = v23;
      a4[1] = v20 + 24;
      a4[2] = &v18[24 * v19];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)char v12 = a2;
      *((void *)v12 + 1) = v8;
      long long v13 = v12 + 24;
      *((_DWORD *)v12 + 4) = v9;
    }
    a4[1] = v13;
    a2 += v8;
    a3 -= v8;
  }
  while (a3);
}

void sub_25BFCA384(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

sentencepiece::word::Model *sentencepiece::word::Model::Model(sentencepiece::word::Model *this, const sentencepiece::ModelProto *a2)
{
  uint64_t v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *(void *)uint64_t v4 = &unk_270972E38;
  *((void *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  return this;
}

void sub_25BFCA3F8(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::word::Model::~Model(sentencepiece::word::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);

  JUMPOUT(0x26117ABD0);
}

void sentencepiece::word::Model::Encode(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  (*(void (**)(unsigned __int8 ***__return_ptr))(*(void *)a1 + 16))(&v26);
  if (v26)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v26);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v26);
  if (!a3) {
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sentencepiece::SplitIntoWords(a2, a3, 0, 0, &v26);
  uint64_t v8 = v26;
  int v9 = v27;
  if (v26 != v27)
  {
    do
    {
      int v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(void *)a1 + 112))(a1, *v8, v8[1]);
      int v11 = v10;
      long long v13 = (char *)a4[1];
      char v12 = (char *)a4[2];
      if (v13 >= v12)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)*a4) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a4) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v18);
        uint64_t v21 = &v19[24 * v15];
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v8;
        *((_DWORD *)v21 + 4) = v11;
        uint64_t v23 = (char *)*a4;
        uint64_t v22 = (char *)a4[1];
        long long v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            long long v25 = *(_OWORD *)(v22 - 24);
            *((void *)v24 - 1) = *((void *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          uint64_t v22 = (char *)*a4;
        }
        unint64_t v14 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)long long v13 = *(_OWORD *)v8;
        *((_DWORD *)v13 + 4) = v10;
        unint64_t v14 = v13 + 24;
      }
      a4[1] = v14;
      v8 += 2;
    }
    while (v8 != v9);
    uint64_t v8 = v26;
  }
  if (v8)
  {
    uint64_t v27 = v8;
    operator delete(v8);
  }
}

void sub_25BFCA664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  long long v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void InitDefaultsscc_info_NBestSentencePieceText_sentencepiece_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", a4);
  sentencepiece::NBestSentencePieceText::NBestSentencePieceText((uint64_t)&sentencepiece::_NBestSentencePieceText_default_instance_, 0);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_NBestSentencePieceText_default_instance_, v4);
}

void InitDefaultsscc_info_SentencePieceText_sentencepiece_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", a4);
  sentencepiece::SentencePieceText::SentencePieceText((uint64_t)&sentencepiece::_SentencePieceText_default_instance_, 0);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SentencePieceText_default_instance_, v4);
}

void InitDefaultsscc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", a4);
  sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece((uint64_t)&sentencepiece::_SentencePieceText_SentencePiece_default_instance_, 0);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SentencePieceText_SentencePiece_default_instance_, v4);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270972CA8;
  *(void *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(void *)(a1 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
  if (atomic_load_explicit(scc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto);
  }
  *(void *)(a1 + 48) = &google::protobuf::internal::fixed_address_empty_string;
  *(void *)(a1 + 56) = &google::protobuf::internal::fixed_address_empty_string;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_25BFCA868(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece(sentencepiece::SentencePieceText_SentencePiece *this)
{
}

{
  uint64_t vars8;

  sentencepiece::SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece(this);

  JUMPOUT(0x26117ABD0);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::SentencePieceText_SentencePiece::SharedDtor(sentencepiece::SentencePieceText_SentencePiece *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 140);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  __n128 result = (sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 48);
  if (*((uint64_t **)this + 6) != &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v6 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    __n128 result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x26117ABD0](v7, 0x1012C40EC159624);
  }
  int v9 = (uint64_t *)*((void *)this + 7);
  uint64_t v8 = (sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 56);
  if (v9 != &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v10 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v8);
    uint64_t v11 = v10;
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x26117ABD0](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_25BFCA9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::internal::InternalMetadata::Delete<std::string>(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(void *)(v1 & 0xFFFFFFFFFFFFFFFELL) && v2 != 0)
    {
      if (*(char *)(v2 + 31) < 0) {
        operator delete(*(void **)(v2 + 8));
      }
      JUMPOUT(0x26117ABD0);
    }
  }
  return result;
}

void sentencepiece::SentencePieceText_SentencePiece::Clear(sentencepiece::SentencePieceText_SentencePiece *this)
{
  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
  int v2 = *((_DWORD *)this + 10);
  if ((v2 & 3) != 0)
  {
    if (v2)
    {
      unint64_t v3 = *((void *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v3 + 23) < 0)
      {
        **(unsigned char **)unint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        if ((v2 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    unint64_t v4 = *((void *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
LABEL_11:
  if ((v2 & 0x1C) != 0)
  {
    *((_DWORD *)this + 18) = 0;
    *((void *)this + 8) = 0;
  }
  *((_DWORD *)this + 1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
  uint64_t v5 = *((void *)this + 1);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 31) < 0)
    {
      **(unsigned char **)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v6 + 8) = 0;
      *(unsigned char *)(v6 + 3google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::SentencePieceText_SentencePiece::_InternalParse(sentencepiece::SentencePieceText_SentencePiece *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  uint64_t v36 = a2;
  int v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v36, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)((char *)this + 8);
    while (1)
    {
      uint64_t v8 = (google::protobuf::internal *)((char *)v36 + 1);
      unsigned int v9 = *(unsigned __int8 *)v36;
      if (*(char *)v36 < 0)
      {
        unsigned int v10 = v9 + (*(unsigned __int8 *)v8 << 7);
        unsigned int v9 = v10 - 128;
        if (*(char *)v8 < 0)
        {
          TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v36, (const char *)(v10 - 128));
          uint64_t v36 = TagFallback;
          if (!TagFallback) {
            goto LABEL_56;
          }
          uint64_t v8 = TagFallback;
          unsigned int v9 = v28;
          goto LABEL_8;
        }
        uint64_t v8 = (google::protobuf::internal *)((char *)v36 + 2);
      }
      uint64_t v36 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10) {
            goto LABEL_37;
          }
          *((_DWORD *)this + 10) |= 1u;
          uint64_t v11 = *((void *)this + 1);
          char v12 = (google::protobuf::internal::ArenaImpl *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if (v11) {
            char v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          }
          long long v13 = (uint64_t **)((char *)this + 48);
          goto LABEL_22;
        case 2u:
          if (v9 != 16) {
            goto LABEL_37;
          }
          v5 |= 4u;
          unint64_t v14 = (google::protobuf::internal *)((char *)v8 + 1);
          LODWORD(v15) = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          int v16 = *(char *)v14;
          unint64_t v15 = (const char *)(v15 + (v16 << 7) - 128);
          if (v16 < 0)
          {
            long long v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v8, v15);
            uint64_t v36 = v30;
            *((_DWORD *)this + 16) = v31;
            if (!v30) {
              goto LABEL_56;
            }
          }
          else
          {
            unint64_t v14 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_17:
            uint64_t v36 = v14;
            *((_DWORD *)this + 16) = v15;
          }
          goto LABEL_35;
        case 3u:
          if (v9 != 26) {
            goto LABEL_37;
          }
          *((_DWORD *)this + 10) |= 2u;
          uint64_t v17 = *((void *)this + 1);
          char v12 = (google::protobuf::internal::ArenaImpl *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if (v17) {
            char v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          }
          long long v13 = (uint64_t **)((char *)this + 56);
LABEL_22:
          unint64_t v18 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v13, v12);
          uint64_t v19 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v18, (std::string::value_type *)v36, (uint64_t)a3);
          goto LABEL_23;
        case 4u:
          if (v9 != 32) {
            goto LABEL_37;
          }
          v5 |= 8u;
          uint64_t v20 = (google::protobuf::internal *)((char *)v8 + 1);
          LODWORD(v2google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0) {
            goto LABEL_29;
          }
          int v22 = *(char *)v20;
          uint64_t v21 = (const char *)(v21 + (v22 << 7) - 128);
          if (v22 < 0)
          {
            long long v32 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v8, v21);
            uint64_t v36 = v32;
            *((_DWORD *)this + 17) = v33;
            if (!v32) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v20 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_29:
            uint64_t v36 = v20;
            *((_DWORD *)this + 17) = v21;
          }
          goto LABEL_35;
        case 5u:
          if (v9 != 40) {
            goto LABEL_37;
          }
          v5 |= 0x10u;
          uint64_t v23 = (google::protobuf::internal *)((char *)v8 + 1);
          LODWORD(v24) = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          int v25 = *(char *)v23;
          long long v24 = (const char *)(v24 + (v25 << 7) - 128);
          if (v25 < 0)
          {
            uint64_t v34 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v8, v24);
            uint64_t v36 = v34;
            *((_DWORD *)this + 18) = v35;
            if (!v34) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v23 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_34:
            uint64_t v36 = v23;
            *((_DWORD *)this + 18) = v24;
          }
          goto LABEL_35;
        default:
LABEL_37:
          if (v9) {
            BOOL v26 = (v9 & 7) == 4;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26)
          {
            a3[10].i32[0] = v9 - 1;
            goto LABEL_2;
          }
          if (v9 < 0x640)
          {
            if (*v7)
            {
              uint64_t v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              uint64_t v29 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
              uint64_t v8 = v36;
            }
            uint64_t v19 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v29, v8, (google::protobuf::internal::ParseContext *)a3);
          }
          else
          {
            uint64_t v19 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), v9, v8, (uint64_t)&sentencepiece::_SentencePieceText_SentencePiece_default_instance_, (unint64_t *)this + 1, a3);
          }
LABEL_23:
          uint64_t v36 = v19;
          if (!v19)
          {
LABEL_56:
            uint64_t v36 = 0;
            goto LABEL_2;
          }
LABEL_35:
          if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v36, a3[11].i32[1]))goto LABEL_2; {
          break;
          }
      }
    }
  }
LABEL_2:
  *((_DWORD *)this + 10) |= v5;
  return v36;
}

unsigned __int8 *sentencepiece::SentencePieceText_SentencePiece::_InternalSerialize(sentencepiece::SentencePieceText_SentencePiece *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 10);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0) {
      goto LABEL_3;
    }
LABEL_11:
    if (*(void *)a3 <= (unint64_t)v4) {
      unint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    }
    unsigned int v8 = *((_DWORD *)this + 16);
    *unint64_t v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v10 | 0x80;
          unsigned int v13 = v10 >> 7;
          ++v4;
          unsigned int v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        *(v4 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v13;
        if ((v6 & 2) != 0) {
          goto LABEL_27;
        }
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0) {
        goto LABEL_27;
      }
    }
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
  unint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, (const void **)(*((void *)this + 6) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v6 & 4) != 0) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v6 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_27:
  unint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, (const void **)(*((void *)this + 7) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_39;
    }
    goto LABEL_6;
  }
LABEL_28:
  if (*(void *)a3 <= (unint64_t)v4) {
    unint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  unsigned int v15 = *((_DWORD *)this + 17);
  *unint64_t v4 = 32;
  if (v15 > 0x7F)
  {
    v4[1] = v15 | 0x80;
    unsigned int v16 = v15 >> 7;
    if (v15 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v16 | 0x80;
        unsigned int v17 = v16 >> 7;
        ++v4;
        unsigned int v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v4 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v17;
      if ((v6 & 0x10) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      v4[2] = v16;
      v4 += 3;
      if ((v6 & 0x10) == 0) {
        goto LABEL_39;
      }
    }
  }
  else
  {
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 0x10) == 0) {
      goto LABEL_39;
    }
  }
LABEL_6:
  if (*(void *)a3 <= (unint64_t)v4) {
    unint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  unsigned int v7 = *((_DWORD *)this + 18);
  *unint64_t v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    unsigned int v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        ++v4;
        unsigned int v12 = v9 >> 14;
        v9 >>= 7;
      }
      while (v12);
      *(v4 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v11;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  uint64_t v19 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)v4, a3);
  uint64_t v20 = v19;
  uint64_t v21 = *((void *)this + 1);
  if ((v21 & 1) == 0) {
    return v20;
  }
  unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 31) < 0)
  {
    long long v24 = *(void **)(v23 + 8);
    uint64_t v25 = *(void *)(v23 + 16);
  }
  else
  {
    long long v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if (*(void *)a3 - (void)v19 >= (int)v25)
  {
    uint64_t v26 = (int)v25;
    memcpy(v19, v24, (int)v25);
    v20 += v26;
    return v20;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v24, v25, v19);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(google::protobuf::io::EpsCopyOutputStream *a1, int a2, const void **a3, char *a4)
{
  if (*((char *)a3 + 23) < 0)
  {
    int64_t v4 = (int64_t)a3[1];
    if (v4 > 127) {
      goto LABEL_24;
    }
  }
  else
  {
    int64_t v4 = *((unsigned __int8 *)a3 + 23);
  }
  unsigned int v5 = 8 * a2;
  uint64_t v6 = 1;
  uint64_t v7 = 2;
  uint64_t v8 = 3;
  uint64_t v9 = 4;
  if ((8 * a2) >> 28) {
    uint64_t v9 = 5;
  }
  if (v5 >= 0x200000) {
    uint64_t v8 = v9;
  }
  if (v5 >= 0x4000) {
    uint64_t v7 = v8;
  }
  if (v5 >= 0x80) {
    uint64_t v6 = v7;
  }
  if ((uint64_t)(*(void *)a1 + ~(unint64_t)&a4[v6] + 16) >= v4)
  {
    unsigned int v10 = v5 | 2;
    if ((v5 | 2) > 0x7F)
    {
      *a4 = v5 | 0x82;
      unsigned int v12 = v5 >> 7;
      if (v10 >> 14)
      {
        unsigned int v11 = (unsigned __int8 *)(a4 + 2);
        do
        {
          *(v11 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v12 | 0x80;
          unsigned int v13 = v12 >> 7;
          ++v11;
          unsigned int v14 = v12 >> 14;
          v12 >>= 7;
        }
        while (v14);
        *(v11 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v13;
      }
      else
      {
        a4[1] = v12;
        unsigned int v11 = (unsigned __int8 *)(a4 + 2);
      }
    }
    else
    {
      *a4 = v10;
      unsigned int v11 = (unsigned __int8 *)(a4 + 1);
    }
    *unsigned int v11 = v4;
    unsigned int v15 = (char *)(v11 + 1);
    if (*((char *)a3 + 23) >= 0) {
      unsigned int v16 = a3;
    }
    else {
      unsigned int v16 = *a3;
    }
    memcpy(v15, v16, v4);
    return (unsigned __int8 *)&v15[v4];
  }
LABEL_24:

  return google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a1, a2, (void **)a3, a4);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::ByteSizeLong(sentencepiece::SentencePieceText_SentencePiece *this)
{
  uint64_t result = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
  int v3 = *((_DWORD *)this + 10);
  if ((v3 & 0x1F) == 0) {
    goto LABEL_8;
  }
  if (v3)
  {
    unint64_t v5 = *((void *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
    uint64_t v7 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = v6;
    }
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0) {
        goto LABEL_5;
      }
LABEL_16:
      result += ((9 * (__clz(*((_DWORD *)this + 16) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  unint64_t v8 = *((void *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  uint64_t v10 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_5:
  if ((v3 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_17:
  result += ((9 * (__clz(*((_DWORD *)this + 17) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0) {
LABEL_7:
  }
    result += ((9 * (__clz(*((_DWORD *)this + 18) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    unint64_t v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    result += v12;
  }
  *((_DWORD *)this + 1google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = result;
  return result;
}

void sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom(sentencepiece::SentencePieceText_SentencePiece *this, const google::protobuf::MessageLite *lpsrc)
{
  sentencepiece::SentencePieceText_SentencePiece::MergeFrom(this, lpsrc);
}

void sentencepiece::SentencePieceText_SentencePiece::MergeFrom(sentencepiece::SentencePieceText_SentencePiece *this, const sentencepiece::SentencePieceText_SentencePiece *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 375);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), (const sentencepiece::SentencePieceText_SentencePiece *)((char *)a2 + 16));
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *((void *)this + 1);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *((_DWORD *)a2 + 10);
  if ((v13 & 0x1F) != 0)
  {
    if (v13)
    {
      unsigned int v14 = (long long *)(*((void *)a2 + 6) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 10) |= 1u;
      uint64_t v15 = *((void *)this + 1);
      unsigned int v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unsigned int v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      }
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 48), v14, v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0) {
          goto LABEL_17;
        }
        goto LABEL_28;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    unsigned int v17 = (long long *)(*((void *)a2 + 7) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 2u;
    uint64_t v18 = *((void *)this + 1);
    uint64_t v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if (v18) {
      uint64_t v19 = *(google::protobuf::internal::ArenaImpl **)v19;
    }
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 56), v17, v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0) {
        goto LABEL_18;
      }
      goto LABEL_29;
    }
LABEL_28:
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
      {
LABEL_20:
        *((_DWORD *)this + 10) |= v13;
        return;
      }
LABEL_19:
      *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
      goto LABEL_20;
    }
LABEL_29:
    *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
    if ((v13 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
}

void sub_25BFCB60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::IsInitialized(sentencepiece::SentencePieceText_SentencePiece *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
}

uint64_t *sentencepiece::SentencePieceText_SentencePiece::InternalSwap(sentencepiece::SentencePieceText_SentencePiece *this, sentencepiece::SentencePieceText_SentencePiece *a2)
{
  google::protobuf::internal::ExtensionSet::Swap((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), (sentencepiece::SentencePieceText_SentencePiece *)((char *)a2 + 16));
  uint64_t v5 = (uint64_t *)((char *)this + 8);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      int v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)a2 + 1);
      uint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_21:
      unint64_t v11 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    uint64_t v7 = 0;
    int v8 = *((_DWORD *)this + 10);
    *((_DWORD *)this + 1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v8;
    uint64_t v9 = (google::protobuf::internal::ArenaImpl *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  int v10 = (char *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
  if ((v4 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_6:
  unint64_t v11 = (char *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
LABEL_7:
  uint64_t v12 = *((void *)v11 + 2);
  long long v13 = *(_OWORD *)v11;
  uint64_t v14 = *((void *)v10 + 2);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v10;
  *((void *)v11 + 2) = v14;
  *(_OWORD *)int v10 = v13;
  *((void *)v10 + 2) = v12;
  uint64_t v15 = *((void *)this + 1);
  LODWORD(v14) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v14;
  uint64_t v9 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if (v15)
  {
    unsigned int v16 = *(google::protobuf::internal::ArenaImpl **)v9;
    uint64_t v7 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = 0;
LABEL_9:
  unsigned int v16 = v9;
LABEL_10:
  if (*((uint64_t **)this + 6) != &google::protobuf::internal::fixed_address_empty_string
    || *((uint64_t **)a2 + 6) != &google::protobuf::internal::fixed_address_empty_string)
  {
    unsigned int v17 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)this + 6, v16);
    uint64_t v18 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)a2 + 6, v16);
    uint64_t v19 = v17[2];
    long long v20 = *(_OWORD *)v17;
    uint64_t v21 = v18[2];
    *(_OWORD *)unsigned int v17 = *(_OWORD *)v18;
    void v17[2] = v21;
    *(_OWORD *)uint64_t v18 = v20;
    void v18[2] = v19;
    uint64_t v7 = *v5 & 1;
    uint64_t v9 = (google::protobuf::internal::ArenaImpl *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t result = (uint64_t *)((char *)this + 56);
  if (v7) {
    uint64_t v9 = *(google::protobuf::internal::ArenaImpl **)v9;
  }
  if ((uint64_t *)*result != &google::protobuf::internal::fixed_address_empty_string
    || *((uint64_t **)a2 + 7) != &google::protobuf::internal::fixed_address_empty_string)
  {
    unint64_t v23 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)result, v9);
    uint64_t result = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)a2 + 7, v9);
    uint64_t v24 = v23[2];
    long long v25 = *(_OWORD *)v23;
    uint64_t v26 = result[2];
    *(_OWORD *)unint64_t v23 = *(_OWORD *)result;
    v23[2] = v26;
    *(_OWORD *)uint64_t result = v25;
    result[2] = v24;
  }
  uint64_t v27 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v27;
  LODWORD(v27) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v27;
  return result;
}

void *sentencepiece::SentencePieceText_SentencePiece::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

uint64_t sentencepiece::SentencePieceText::SentencePieceText(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2709726F0;
  *(void *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  if (atomic_load_explicit(scc_info_SentencePieceText_sentencepiece_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SentencePieceText_sentencepiece_2eproto);
  }
  *(void *)(a1 + 72) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(a1 + 8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
  return a1;
}

void sub_25BFCB8CC(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceText::~SentencePieceText(sentencepiece::SentencePieceText *this)
{
}

{
  uint64_t vars8;

  sentencepiece::SentencePieceText::~SentencePieceText(this);

  JUMPOUT(0x26117ABD0);
}

void sentencepiece::SentencePieceText::SharedDtor(sentencepiece::SentencePieceText *this)
{
  uint64_t v2 = *((void *)this + 1);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 486);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  uint64_t v6 = (uint64_t *)*((void *)this + 9);
  uint64_t v5 = (sentencepiece::SentencePieceText *)((char *)this + 72);
  if (v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v7 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v5);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    MEMORY[0x26117ABD0](v8, 0x1012C40EC159624);
  }
}

void sub_25BFCB9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *sentencepiece::SentencePieceText::default_instance(sentencepiece::SentencePieceText *this)
{
  if (atomic_load_explicit(scc_info_SentencePieceText_sentencepiece_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SentencePieceText_sentencepiece_2eproto);
  }
  return &sentencepiece::_SentencePieceText_default_instance_;
}

void sentencepiece::SentencePieceText::Clear(sentencepiece::SentencePieceText *this)
{
  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::SentencePieceText *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)this + 48);
  if (*((unsigned char *)this + 40))
  {
    unint64_t v2 = *((void *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)unint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  *((_DWORD *)this + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
  *((_DWORD *)this + 1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(unsigned char **)(v4 + 8) = 0;
      *(void *)(v4 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 3google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::SentencePieceText::_InternalParse(sentencepiece::SentencePieceText *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v29 = a2;
  int v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    uint64_t v7 = (void *)((char *)this + 8);
    while (1)
    {
      uint64_t v8 = (google::protobuf::internal *)((char *)v29 + 1);
      unsigned int v9 = *(unsigned __int8 *)v29;
      if ((*(char *)v29 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v10 = v9 + (*(unsigned __int8 *)v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((*(char *)v8 & 0x80000000) == 0) {
        break;
      }
      TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v29, (const char *)(v10 - 128));
      uint64_t v29 = TagFallback;
      if (!TagFallback) {
        goto LABEL_48;
      }
      uint64_t v8 = TagFallback;
      unsigned int v9 = v27;
LABEL_8:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 29)
        {
          v5 |= 2u;
          *((_DWORD *)this + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)v8;
          uint64_t v29 = (google::protobuf::internal *)((char *)v8 + 4);
          goto LABEL_44;
        }
        goto LABEL_14;
      }
      if (v11 == 2)
      {
        if (v9 == 18)
        {
          uint64_t v15 = (char *)v8 - 1;
          while (1)
          {
            unsigned int v16 = (google::protobuf::internal *)(v15 + 1);
            uint64_t v29 = (google::protobuf::internal *)(v15 + 1);
            unsigned int v17 = (int *)*((void *)this + 8);
            if (!v17) {
              break;
            }
            uint64_t v18 = *((int *)this + 14);
            int v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *((_DWORD *)this + 15))
              {
LABEL_29:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 12, v19 + 1);
                unsigned int v17 = (int *)*((void *)this + 8);
                int v19 = *v17;
              }
              *unsigned int v17 = v19 + 1;
              long long v20 = (sentencepiece::SentencePieceText_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*((void *)this + 6));
              uint64_t v21 = *((void *)this + 8);
              uint64_t v22 = *((int *)this + 14);
              *((_DWORD *)this + 14) = v22 + 1;
              *(void *)(v21 + 8 * v22 + 8) = v20;
              unsigned int v16 = v29;
              goto LABEL_31;
            }
            *((_DWORD *)this + 14) = v18 + 1;
            long long v20 = *(sentencepiece::SentencePieceText_SentencePiece **)&v17[2 * v18 + 2];
LABEL_31:
            uint64_t v15 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText_SentencePiece>(a3, v20, v16);
            uint64_t v29 = (google::protobuf::internal *)v15;
            if (!v15) {
              goto LABEL_48;
            }
            if (*(void *)a3 <= (unint64_t)v15 || *v15 != 18) {
              goto LABEL_44;
            }
          }
          int v19 = *((_DWORD *)this + 15);
          goto LABEL_29;
        }
LABEL_14:
        if (v9) {
          BOOL v13 = (v9 & 7) == 4;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          *((_DWORD *)a3 + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v9 - 1;
          goto LABEL_2;
        }
        if (v9 < 0x640)
        {
          if (*v7)
          {
            unsigned int v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            unsigned int v28 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
            uint64_t v8 = v29;
          }
          uint64_t v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v28, v8, a3);
        }
        else
        {
          uint64_t v14 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::SentencePieceText *)((char *)this + 16), v9, v8, (uint64_t)&sentencepiece::_SentencePieceText_default_instance_, (unint64_t *)this + 1, (int32x2_t *)a3);
        }
        goto LABEL_43;
      }
      if (v11 != 1 || v9 != 10) {
        goto LABEL_14;
      }
      *((_DWORD *)this + 10) |= 1u;
      uint64_t v23 = *((void *)this + 1);
      uint64_t v24 = (google::protobuf::internal::ArenaImpl *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if (v23) {
        uint64_t v24 = *(google::protobuf::internal::ArenaImpl **)v24;
      }
      long long v25 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)this + 9, v24);
      uint64_t v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v25, (std::string::value_type *)v29, (uint64_t)a3);
LABEL_43:
      uint64_t v29 = v14;
      if (!v14)
      {
LABEL_48:
        uint64_t v29 = 0;
        goto LABEL_2;
      }
LABEL_44:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23))) {
        goto LABEL_2;
      }
    }
    uint64_t v8 = (google::protobuf::internal *)((char *)v29 + 2);
LABEL_7:
    uint64_t v29 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *((_DWORD *)this + 10) |= v5;
  return v29;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText_SentencePiece>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SentencePieceText_SentencePiece *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  uint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    uint64_t result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    uint64_t v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (char *)sentencepiece::SentencePieceText_SentencePiece::_InternalParse(a2, (google::protobuf::internal *)v8, (int32x2_t *)this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::SentencePieceText::_InternalSerialize(sentencepiece::SentencePieceText *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 10);
  if (v6) {
    unint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, (const void **)(*((void *)this + 9) & 0xFFFFFFFFFFFFFFFELL), a2);
  }
  int v7 = *((_DWORD *)this + 14);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if (*(void *)a3 <= (unint64_t)v4) {
        unint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      }
      unsigned int v9 = (sentencepiece::SentencePieceText_SentencePiece *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)this + 48, i);
      *unint64_t v4 = 18;
      unsigned int v10 = *((_DWORD *)v9 + 11);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        unsigned int v12 = v10 >> 7;
        if (v10 >> 14)
        {
          int v11 = v4 + 3;
          do
          {
            *(v11 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v12 | 0x80;
            unsigned int v13 = v12 >> 7;
            ++v11;
            unsigned int v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v13;
        }
        else
        {
          v4[2] = v12;
          int v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        int v11 = v4 + 2;
      }
      unint64_t v4 = (char *)sentencepiece::SentencePieceText_SentencePiece::_InternalSerialize(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4) {
      unint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    }
    int v15 = *((_DWORD *)this + 20);
    *unint64_t v4 = 29;
    *(_DWORD *)(v4 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v15;
    v4 += 5;
  }
  unsigned int v16 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::SentencePieceText *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)v4, a3);
  unsigned int v17 = v16;
  uint64_t v18 = *((void *)this + 1);
  if ((v18 & 1) == 0) {
    return v17;
  }
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 31) < 0)
  {
    uint64_t v21 = *(void **)(v20 + 8);
    uint64_t v22 = *(void *)(v20 + 16);
  }
  else
  {
    uint64_t v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if (*(void *)a3 - (void)v16 >= (int)v22)
  {
    uint64_t v23 = (int)v22;
    memcpy(v16, v21, (int)v22);
    v17 += v23;
    return v17;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v21, v22, v16);
}

uint64_t sentencepiece::SentencePieceText::ByteSizeLong(sentencepiece::SentencePieceText *this)
{
  uint64_t v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::SentencePieceText *)((char *)this + 16));
  uint64_t v3 = *((int *)this + 14);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *((void *)this + 8);
  if (v5) {
    int v6 = (sentencepiece::SentencePieceText_SentencePiece **)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sentencepiece::SentencePieceText_SentencePiece::ByteSizeLong(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  int v10 = *((_DWORD *)this + 10);
  if ((v10 & 3) != 0)
  {
    if (v10)
    {
      unint64_t v11 = *((void *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      uint64_t v13 = *(void *)(v11 + 8);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = v12;
      }
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0) {
      v4 += 5;
    }
  }
  uint64_t v14 = *((void *)this + 1);
  if (v14)
  {
    unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0) {
      uint64_t v17 = *(void *)(v16 + 16);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(v16 + 31);
    }
    v4 += v17;
  }
  *((_DWORD *)this + 1google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v4;
  return v4;
}

void sentencepiece::SentencePieceText::CheckTypeAndMergeFrom(sentencepiece::SentencePieceText *this, const google::protobuf::MessageLite *lpsrc)
{
  sentencepiece::SentencePieceText::MergeFrom(this, lpsrc);
}

void sentencepiece::SentencePieceText::MergeFrom(sentencepiece::SentencePieceText *this, const sentencepiece::SentencePieceText *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 674);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::SentencePieceText *)((char *)this + 16), (const sentencepiece::SentencePieceText *)((char *)a2 + 16));
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *((void *)this + 1);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  int v13 = *((_DWORD *)a2 + 10);
  if ((v13 & 3) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*((void *)a2 + 9) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 10) |= 1u;
      uint64_t v15 = *((void *)this + 1);
      unint64_t v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unint64_t v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      }
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SentencePieceText *)((char *)this + 72), v14, v16);
    }
    if ((v13 & 2) != 0) {
      *((_DWORD *)this + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 20);
    }
    *((_DWORD *)this + 10) |= v13;
  }
}

void sub_25BFCC354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText::IsInitialized(sentencepiece::SentencePieceText *this)
{
  uint64_t result = google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::SentencePieceText *)((char *)this + 16));
  if (result)
  {
    return google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText_SentencePiece>((uint64_t)this + 48);
  }
  return result;
}

BOOL google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText_SentencePiece>(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(a1, v2);
  }
  while ((google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v5 + 16)) & 1) != 0);
  return v3 < 1;
}

void *sentencepiece::SentencePieceText::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SentencePieceText");
}

uint64_t sentencepiece::NBestSentencePieceText::NBestSentencePieceText(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2709728A8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
  if (atomic_load_explicit(scc_info_NBestSentencePieceText_sentencepiece_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_NBestSentencePieceText_sentencepiece_2eproto);
  }
  return a1;
}

void sub_25BFCC490(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::~RepeatedPtrField(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::NBestSentencePieceText::~NBestSentencePieceText(sentencepiece::NBestSentencePieceText *this)
{
  int v3 = (uint64_t *)((char *)this + 8);
  uint64_t v2 = *((void *)this + 1);
  BOOL v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    if (!*v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 755);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  google::protobuf::internal::InternalMetadata::Delete<std::string>(v3);
  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 2);
}

{
  uint64_t vars8;

  sentencepiece::NBestSentencePieceText::~NBestSentencePieceText(this);

  JUMPOUT(0x26117ABD0);
}

void sub_25BFCC540(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

void sentencepiece::NBestSentencePieceText::Clear(sentencepiece::NBestSentencePieceText *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t)this + 16);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 31) < 0)
    {
      **(unsigned char **)(v3 + 8) = 0;
      *(void *)(v3 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0;
    }
    else
    {
      *(unsigned char *)(v3 + 8) = 0;
      *(unsigned char *)(v3 + 3google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::NBestSentencePieceText::_InternalParse(sentencepiece::NBestSentencePieceText *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v22 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    uint64_t v5 = (void *)((char *)this + 8);
    while (1)
    {
      char v6 = (google::protobuf::internal *)((char *)v22 + 1);
      unsigned int v7 = *(unsigned __int8 *)v22;
      if ((*(char *)v22 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v8 = v7 + (*(unsigned __int8 *)v6 << 7);
      unsigned int v7 = v8 - 128;
      if ((*(char *)v6 & 0x80000000) == 0) {
        break;
      }
      TagFallbacuint64_t k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, (const char *)(v8 - 128));
      uint64_t v22 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      char v6 = TagFallback;
      unsigned int v7 = v20;
LABEL_7:
      if (v7 == 10)
      {
        unint64_t v11 = (char *)v6 - 1;
        while (1)
        {
          std::string::size_type v12 = (google::protobuf::internal *)(v11 + 1);
          uint64_t v22 = (google::protobuf::internal *)(v11 + 1);
          int v13 = (int *)*((void *)this + 4);
          if (!v13) {
            break;
          }
          uint64_t v14 = *((int *)this + 6);
          int v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *((_DWORD *)this + 7))
            {
LABEL_22:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 4, v15 + 1);
              int v13 = (int *)*((void *)this + 4);
              int v15 = *v13;
            }
            int *v13 = v15 + 1;
            unint64_t v16 = (sentencepiece::SentencePieceText *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*((void *)this + 2));
            uint64_t v17 = *((void *)this + 4);
            uint64_t v18 = *((int *)this + 6);
            *((_DWORD *)this + google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v18 + 1;
            *(void *)(v17 + 8 * v18 + 8) = v16;
            std::string::size_type v12 = v22;
            goto LABEL_24;
          }
          *((_DWORD *)this + google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v14 + 1;
          unint64_t v16 = *(sentencepiece::SentencePieceText **)&v13[2 * v14 + 2];
LABEL_24:
          unint64_t v11 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText>(a3, v16, v12);
          uint64_t v22 = (google::protobuf::internal *)v11;
          if (!v11) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
            goto LABEL_27;
          }
        }
        int v15 = *((_DWORD *)this + 7);
        goto LABEL_22;
      }
      if (v7) {
        BOOL v9 = (v7 & 7) == 4;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        *((_DWORD *)a3 + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v7 - 1;
        return v22;
      }
      if (*v5)
      {
        int v10 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        int v10 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
        char v6 = v22;
      }
      uint64_t v22 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, v10, v6, a3);
      if (!v22) {
        return 0;
      }
LABEL_27:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)))return v22; {
    }
      }
    char v6 = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
    uint64_t v22 = v6;
    goto LABEL_7;
  }
  return v22;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SentencePieceText *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  unsigned int v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    uint64_t result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (char *)sentencepiece::SentencePieceText::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::NBestSentencePieceText::_InternalSerialize(sentencepiece::NBestSentencePieceText *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)a2) {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      }
      unsigned int v8 = (sentencepiece::SentencePieceText *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t)this + 16, i);
      *a2 = 10;
      unsigned int v9 = *((_DWORD *)v8 + 11);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          int v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v12;
        }
        else
        {
          a2[2] = v11;
          int v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        int v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)sentencepiece::SentencePieceText::_InternalSerialize(v8, (char *)v10, a3);
    }
  }
  uint64_t v14 = *((void *)this + 1);
  if ((v14 & 1) == 0) {
    return (unsigned __int8 *)a2;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    uint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if (*(void *)a3 - (void)a2 >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(a2, v17, (int)v18);
    a2 += v19;
    return (unsigned __int8 *)a2;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v17, v18, (unsigned __int8 *)a2);
}

uint64_t sentencepiece::NBestSentencePieceText::ByteSizeLong(sentencepiece::NBestSentencePieceText *this)
{
  uint64_t v2 = *((int *)this + 6);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    BOOL v4 = (sentencepiece::SentencePieceText **)(v3 + 8);
  }
  else {
    BOOL v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      int v6 = *v4++;
      uint64_t v7 = sentencepiece::SentencePieceText::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *((void *)this + 1);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v2 += v11;
  }
  *((_DWORD *)this + 1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v2;
  return v2;
}

void sentencepiece::NBestSentencePieceText::CheckTypeAndMergeFrom(sentencepiece::NBestSentencePieceText *this, const google::protobuf::MessageLite *lpsrc)
{
  sentencepiece::NBestSentencePieceText::MergeFrom(this, lpsrc);
}

void sentencepiece::NBestSentencePieceText::MergeFrom(sentencepiece::NBestSentencePieceText *this, const sentencepiece::NBestSentencePieceText *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 877);
    BOOL v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *((void *)this + 1);
    if (v8) {
      unsigned int v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unsigned int v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t)this + 16, (uint64_t)a2 + 16);
}

void sub_25BFCCC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL sentencepiece::NBestSentencePieceText::IsInitialized(sentencepiece::NBestSentencePieceText *this)
{
  return google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText>((uint64_t)this + 16);
}

BOOL google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText>(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(a1, v2);
    if (!google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v5 + 16))) {
      break;
    }
  }
  while (google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText_SentencePiece>(v5 + 48));
  return v3 < 1;
}

void *sentencepiece::NBestSentencePieceText::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  AlignedNoHoouint64_t k = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x50uLL);
  }
  sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(AlignedNoHook, a1);
  return AlignedNoHook;
}

void sub_25BFCCD58(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10A1C40E4A317A1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  AlignedNoHoouint64_t k = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x58uLL);
  }
  sentencepiece::SentencePieceText::SentencePieceText(AlignedNoHook, a1);
  return AlignedNoHook;
}

void sub_25BFCCE28(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10A1C40431D3885);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NBestSentencePieceText>(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  AlignedNoHoouint64_t k = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x30uLL);
  }
  sentencepiece::NBestSentencePieceText::NBestSentencePieceText(AlignedNoHook, a1);
  return AlignedNoHook;
}

void sub_25BFCCEF8(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::New(sentencepiece::SentencePieceText_SentencePiece *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(0);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(a2);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::GetCachedSize(sentencepiece::SentencePieceText_SentencePiece *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t google::protobuf::MessageLite::InternalGetTable(google::protobuf::MessageLite *this)
{
  return 0;
}

uint64_t sentencepiece::SentencePieceText::New(sentencepiece::SentencePieceText *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(0);
}

uint64_t sentencepiece::SentencePieceText::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(a2);
}

uint64_t sentencepiece::SentencePieceText::GetCachedSize(sentencepiece::SentencePieceText *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t sentencepiece::NBestSentencePieceText::New(sentencepiece::NBestSentencePieceText *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NBestSentencePieceText>(0);
}

uint64_t sentencepiece::NBestSentencePieceText::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NBestSentencePieceText>(a2);
}

uint64_t sentencepiece::NBestSentencePieceText::GetCachedSize(sentencepiece::NBestSentencePieceText *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(google::protobuf::internal::ArenaStringPtr *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 363);
    int v3 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: !tagged_ptr_.IsTagged(): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
    uint64_t result = *(void *)this;
  }
  if (!result)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 364);
    BOOL v4 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: tagged_ptr_.UnsafeGet() != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
    return *(void *)this;
  }
  return result;
}

void sub_25BFCD020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(google::protobuf::internal::EpsCopyInputStream *this, const char **a2, int a3)
{
  unint64_t v6 = (unint64_t)*a2;
  if (!*a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 209);
    unint64_t v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: *ptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    unint64_t v6 = (unint64_t)*a2;
  }
  if (v6 < *(void *)this) {
    return 0;
  }
  signed int v9 = v6 - *((_DWORD *)this + 2);
  if (v9 >= 17)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 212);
    int v10 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (overrun) <= (kSlopBytes): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 7) == v9)
  {
    if (v9 >= 1 && !*((void *)this + 2)) {
      *a2 = 0;
    }
    return 1;
  }
  else
  {
    *a2 = (const char *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(this, v9, a3);
    return v11 & 1;
  }
}

void sub_25BFCD160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(unint64_t *a1)
{
  unint64_t v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) == 0)
  {
    if (v2) {
      goto LABEL_3;
    }
LABEL_7:
    operator new();
  }
  unint64_t v2 = *(void *)v2;
  if (!v2) {
    goto LABEL_7;
  }
LABEL_3:
  if (*(unsigned char *)(v2 + 24)) {
  unint64_t AlignedAndAddCleanup = (unint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)v2, (google::protobuf::internal::SerialArena::Block *)0x20, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadata::Container<std::string>>);
  }
  *(_OWORD *)unint64_t AlignedAndAddCleanup = 0u;
  *(_OWORD *)(AlignedAndAddCleanup + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0u;
  *a1 = AlignedAndAddCleanup | 1;
  *(void *)unint64_t AlignedAndAddCleanup = v2;
  return (char *)(AlignedAndAddCleanup + 8);
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadata::Container<std::string>>(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    int v3 = (sentencepiece::SentencePieceText_SentencePiece **)(*(void *)(a1 + 16) + 8);
    do
    {
      BOOL v4 = *v3++;
      sentencepiece::SentencePieceText_SentencePiece::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_25BFCD2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    int v3 = (sentencepiece::SentencePieceText **)(*(void *)(a1 + 16) + 8);
    do
    {
      BOOL v4 = *v3++;
      sentencepiece::SentencePieceText::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_25BFCD3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(void *a1)
{
  unint64_t v2 = (sentencepiece::SentencePieceText_SentencePiece **)a1[2];
  if (v2 && !*a1)
  {
    int v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece(*v3);
          MEMORY[0x26117ABD0]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      unint64_t v2 = (sentencepiece::SentencePieceText_SentencePiece **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(google::protobuf::internal::ArenaImpl **this)
{
  uint64_t v1 = *this;
  if (v1) {
    google::protobuf::internal::ArenaImpl::SpaceAllocated(v1);
  }
}

uint64_t google::protobuf::internal::EpsCopyInputStream::PushLimit(google::protobuf::internal::EpsCopyInputStream *this, const char *a2, unsigned int a3)
{
  int v4 = (int)a2;
  if (a3 >= 0x7FFFFFF0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 128);
    char v6 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  uint64_t v7 = *((void *)this + 1);
  int v8 = v4 - v7 + a3;
  *(void *)this = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = v8;
  return (v7 - v8);
}

void sub_25BFCD550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    int v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (sentencepiece::SentencePieceText_SentencePiece **)(*(void *)(a2 + 16) + 8);
    uint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t *)a1, (sentencepiece::SentencePieceText_SentencePiece **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    signed int v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *signed int v9 = v8;
    }
  }
}

void sub_25BFCD640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t *a1, sentencepiece::SentencePieceText_SentencePiece **a2, sentencepiece::SentencePieceText_SentencePiece **a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    char v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      char v13 = v14;
      int v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText_SentencePiece>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    uint64_t v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = (sentencepiece::SentencePieceText_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText_SentencePiece>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText_SentencePiece>::Merge(sentencepiece::SentencePieceText_SentencePiece *a1, sentencepiece::SentencePieceText_SentencePiece *this)
{
}

void google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(void *a1)
{
  unint64_t v2 = (sentencepiece::SentencePieceText **)a1[2];
  if (v2 && !*a1)
  {
    int v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::SentencePieceText::~SentencePieceText(*v3);
          MEMORY[0x26117ABD0]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      unint64_t v2 = (sentencepiece::SentencePieceText **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (sentencepiece::SentencePieceText **)(*(void *)(a2 + 16) + 8);
    uint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t *)a1, (sentencepiece::SentencePieceText **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    signed int v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *signed int v9 = v8;
    }
  }
}

void sub_25BFCD8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t *a1, sentencepiece::SentencePieceText **a2, sentencepiece::SentencePieceText **a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    char v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      char v13 = v14;
      int v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    uint64_t v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = (sentencepiece::SentencePieceText *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText>::Merge(sentencepiece::SentencePieceText *a1, sentencepiece::SentencePieceText *this)
{
}

void sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom()
{
  __assert_rtn("down_cast", "casts.h", 94, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void InitDefaultsscc_info_ModelProto_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::ModelProto::ModelProto((uint64_t)&sentencepiece::_ModelProto_default_instance_, 0);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_ModelProto_default_instance_, v4);
}

void InitDefaultsscc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(sentencepiece::_ModelProto_SentencePiece_default_instance_, 0);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))sentencepiece::_ModelProto_SentencePiece_default_instance_, v4);
}

void InitDefaultsscc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::NormalizerSpec::NormalizerSpec((uint64_t)&sentencepiece::_NormalizerSpec_default_instance_, 0);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_NormalizerSpec_default_instance_, v4);
}

void InitDefaultsscc_info_SelfTestData_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::SelfTestData::SelfTestData((uint64_t)&sentencepiece::_SelfTestData_default_instance_, 0);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SelfTestData_default_instance_, v4);
}

void InitDefaultsscc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::SelfTestData_Sample::SelfTestData_Sample(sentencepiece::_SelfTestData_Sample_default_instance_, 0);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))sentencepiece::_SelfTestData_Sample_default_instance_, v4);
}

void InitDefaultsscc_info_TrainerSpec_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::TrainerSpec::TrainerSpec((uint64_t)&sentencepiece::_TrainerSpec_default_instance_, 0);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_TrainerSpec_default_instance_, v4);
}

BOOL sentencepiece::ModelProto_SentencePiece_Type_IsValid(sentencepiece *this)
{
  return (this - 1) < 6;
}

uint64_t sentencepiece::TrainerSpec::TrainerSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270972420;
  *(void *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 5google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = a2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 9google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 13google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0;
  *(void *)(a1 + 144) = 0;
  if (atomic_load_explicit(scc_info_TrainerSpec_sentencepiece_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_TrainerSpec_sentencepiece_5fmodel_2eproto);
  }
  *(void *)(a1 + 152) = &google::protobuf::internal::fixed_address_empty_string;
  *(void *)(a1 + 16std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = &google::protobuf::internal::fixed_address_empty_string;
  *(void *)(a1 + 168) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)(a1 + 17google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 21google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 25google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0u;
  *(void *)(a1 + 272) = 0x1F4000000001;
  *(void *)(a1 + 28std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 288) = 1061158912;
  *(_OWORD *)(a1 + 292) = xmmword_25BFF7900;
  *(_DWORD *)(a1 + 308) = 16843009;
  *(_WORD *)(a1 + 312) = 257;
  *(_DWORD *)(a1 + 31google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 1;
  *(void *)(a1 + 32std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_25BFCDD9C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v4);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::TrainerSpec::~TrainerSpec(sentencepiece::TrainerSpec *this)
{
}

{
  uint64_t vars8;

  sentencepiece::TrainerSpec::~TrainerSpec(this);

  JUMPOUT(0x26117ABD0);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::TrainerSpec::SharedDtor(sentencepiece::TrainerSpec *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 519);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  if (*((uint64_t **)this + 19) != &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v5 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 152));
    uint64_t v6 = v5;
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    MEMORY[0x26117ABD0](v6, 0x1012C40EC159624);
  }
  if (*((uint64_t **)this + 20) != &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v7 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 160));
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    MEMORY[0x26117ABD0](v8, 0x1012C40EC159624);
  }
  if (*((uint64_t **)this + 21) != &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v9 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 168));
    uint64_t v10 = v9;
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    MEMORY[0x26117ABD0](v10, 0x1012C40EC159624);
  }
  if (*((void *)this + 22))
  {
    uint64_t v11 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 176));
    uint64_t v12 = v11;
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    MEMORY[0x26117ABD0](v12, 0x1012C40EC159624);
  }
  if (*((void *)this + 23))
  {
    uint64_t v13 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 184));
    uint64_t v14 = v13;
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    MEMORY[0x26117ABD0](v14, 0x1012C40EC159624);
  }
  if (*((void *)this + 24))
  {
    uint64_t v15 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 192));
    uint64_t v16 = v15;
    if (*(char *)(v15 + 23) < 0) {
      operator delete(*(void **)v15);
    }
    MEMORY[0x26117ABD0](v16, 0x1012C40EC159624);
  }
  if (*((void *)this + 25))
  {
    uint64_t v17 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 200));
    uint64_t v18 = v17;
    if (*(char *)(v17 + 23) < 0) {
      operator delete(*(void **)v17);
    }
    MEMORY[0x26117ABD0](v18, 0x1012C40EC159624);
  }
  uint64_t result = (sentencepiece::TrainerSpec *)((char *)this + 208);
  if (*((void *)this + 26))
  {
    uint64_t v20 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    uint64_t v21 = v20;
    if (*(char *)(v20 + 23) < 0) {
      operator delete(*(void **)v20);
    }
    uint64_t result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x26117ABD0](v21, 0x1012C40EC159624);
  }
  uint64_t v23 = (uint64_t *)*((void *)this + 27);
  uint64_t v22 = (sentencepiece::TrainerSpec *)((char *)this + 216);
  if (v23 != &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v24 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v22);
    uint64_t v25 = v24;
    if (*(char *)(v24 + 23) < 0) {
      operator delete(*(void **)v24);
    }
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x26117ABD0](v25, 0x1012C40EC159624);
  }
  return result;
}

void sub_25BFCE0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sentencepiece::TrainerSpec::Clear(sentencepiece::TrainerSpec *this)
{
  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::TrainerSpec *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128);
  unsigned int v2 = *((_DWORD *)this + 10);
  if (!(_BYTE)v2) {
    goto LABEL_10;
  }
  if (v2)
  {
    unint64_t v3 = *((void *)this + 19) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_16;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_16;
      }
    }
LABEL_4:
    if ((v2 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_20:
    unint64_t v5 = *((void *)this + 21) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      if ((v2 & 8) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
      if ((v2 & 8) != 0) {
        goto LABEL_24;
      }
    }
LABEL_6:
    if ((v2 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
  if ((v2 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_16:
  unint64_t v4 = *((void *)this + 20) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    **(unsigned char **)unint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v4 = 0;
    *(unsigned char *)(v4 + 23) = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_20;
    }
  }
LABEL_5:
  if ((v2 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_24:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 176), (atomic_ullong *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_);
  if ((v2 & 0x10) == 0)
  {
LABEL_7:
    if ((v2 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 184), (atomic_ullong *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_);
  if ((v2 & 0x20) == 0)
  {
LABEL_8:
    if ((v2 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)this + 8, (atomic_ullong *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_);
  if ((v2 & 0x40) != 0)
  {
LABEL_27:
    google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 200), (atomic_ullong *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_);
    if ((v2 & 0x80) != 0) {
      goto LABEL_28;
    }
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
LABEL_9:
  if ((v2 & 0x80) == 0) {
    goto LABEL_10;
  }
LABEL_28:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 208), (atomic_ullong *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_);
  if ((v2 & 0x100) == 0) {
    goto LABEL_32;
  }
LABEL_29:
  unint64_t v6 = *((void *)this + 27) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v6 + 23) < 0)
  {
    **(unsigned char **)unint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
  }
  else
  {
    *(unsigned char *)unint64_t v6 = 0;
    *(unsigned char *)(v6 + 23) = 0;
  }
LABEL_32:
  if ((v2 & 0xFE00) != 0)
  {
    *((void *)this + 28) = 0;
    *((void *)this + 29) = 0;
    *(void *)((char *)this + 239) = 0;
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *(void *)((char *)this + 247) = 0;
    *((unsigned char *)this + 27google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 0;
    *(void *)((char *)this + 255) = 0;
    *(void *)((char *)this + 263) = 0;
    *((_DWORD *)this + 68) = 1;
  }
  if (HIBYTE(v2))
  {
    *(void *)((char *)this + 27google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0x3F7FDF3B00001F40;
    *(void *)((char *)this + 284) = 0x3F400000000F4240;
    *(_OWORD *)((char *)this + 292) = xmmword_25BFF7900;
  }
  if (*((unsigned char *)this + 44))
  {
    *((_WORD *)this + 15google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 257;
    *((_DWORD *)this + 77) = 16843009;
    *(void *)((char *)this + 31google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0x200000001;
  }
  *((_DWORD *)this + 8google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = -1;
  *((void *)this + 5) = 0;
  uint64_t v7 = *((void *)this + 1);
  if (v7)
  {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(unsigned char **)(v8 + 8) = 0;
      *(void *)(v8 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0;
    }
    else
    {
      *(unsigned char *)(v8 + 8) = 0;
      *(unsigned char *)(v8 + 3google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::TrainerSpec::_InternalParse(sentencepiece::TrainerSpec *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  v188 = a2;
  char v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v188, *((_DWORD *)a3 + 23));
  uint64_t result = v188;
  if (v5) {
    return result;
  }
  v187 = (unint64_t *)((char *)this + 8);
  uint64_t v7 = (uint64_t *)((char *)this + 128);
  unint64_t v8 = (uint64_t *)((char *)this + 104);
  uint64_t v9 = (uint64_t *)((char *)this + 80);
  uint64_t v10 = (uint64_t *)((char *)this + 56);
  while (2)
  {
    uint64_t v11 = (google::protobuf::internal *)((char *)result + 1);
    unsigned int v12 = *(unsigned __int8 *)result;
    if ((*(char *)result & 0x80000000) == 0) {
      goto LABEL_7;
    }
    unsigned int v13 = v12 + (*(unsigned __int8 *)v11 << 7);
    unsigned int v12 = v13 - 128;
    if ((*(char *)v11 & 0x80000000) == 0)
    {
      uint64_t v11 = (google::protobuf::internal *)((char *)result + 2);
LABEL_7:
      v188 = v11;
      goto LABEL_8;
    }
    uint64_t result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, (const char *)(v13 - 128));
    v188 = result;
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    unsigned int v12 = v22;
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10) {
          goto LABEL_275;
        }
        uint64_t result = (google::protobuf::internal *)((char *)v11 - 1);
        while (2)
        {
          uint64_t v14 = (char *)result + 1;
          v188 = (google::protobuf::internal *)((char *)result + 1);
          uint64_t v15 = (int *)*((void *)this + 9);
          if (!v15)
          {
            int v17 = *((_DWORD *)this + 17);
LABEL_16:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 14, v17 + 1);
            uint64_t v15 = (int *)*((void *)this + 9);
            int v17 = *v15;
            goto LABEL_17;
          }
          uint64_t v16 = *((int *)this + 16);
          int v17 = *v15;
          if ((int)v16 < *v15)
          {
            *((_DWORD *)this + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v16 + 1;
            unint64_t AlignedAndAddCleanup = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_22;
          }
          if (v17 == *((_DWORD *)this + 17)) {
            goto LABEL_16;
          }
LABEL_17:
          int *v15 = v17 + 1;
          uint64_t v19 = *v10;
          if (!*v10) {
            operator new();
          }
          if (*(unsigned char *)(v19 + 24)) {
          unint64_t AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)v19, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
          }
          AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
          AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
          AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
          uint64_t v20 = *((void *)this + 9);
          uint64_t v21 = *((int *)this + 16);
          *((_DWORD *)this + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v21 + 1;
          *(void *)(v20 + 8 * v21 + 8) = AlignedAndAddCleanup;
          uint64_t v14 = (std::string::value_type *)v188;
LABEL_22:
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v14, (uint64_t)a3);
          v188 = result;
          if (result)
          {
            if (*(void *)a3 <= (unint64_t)result || *(unsigned char *)result != 10) {
              goto LABEL_273;
            }
            continue;
          }
          return result;
        }
      case 2u:
        if (v12 != 18) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 1u;
        uint64_t v23 = *((void *)this + 1);
        uint64_t v24 = (google::protobuf::internal::ArenaImpl *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if (v23) {
          uint64_t v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        }
        uint64_t v25 = (uint64_t **)((char *)this + 152);
        goto LABEL_265;
      case 3u:
        if (v12 != 24) {
          goto LABEL_275;
        }
        char v26 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v27 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_36;
        }
        int v28 = *(char *)v26;
        int v29 = v27 + (v28 << 7);
        unint64_t v27 = (v29 - 128);
        if (v28 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, (v29 - 128));
          v188 = result;
          if (!result) {
            return result;
          }
          unint64_t v27 = v157;
        }
        else
        {
          char v26 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_36:
          v188 = v26;
        }
        if ((v27 - 1) > 3)
        {
          if (*v187) {
            v186 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            v186 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(v187);
          }
          google::protobuf::internal::WriteVarint(3, v27, v186);
        }
        else
        {
          *((_DWORD *)this + 10) |= 0x800000u;
          *((_DWORD *)this + 68) = v27;
        }
        goto LABEL_273;
      case 4u:
        if (v12 != 32) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x1000000u;
        int v31 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v3std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *(unsigned __int8 *)v11;
        if ((v30 & 0x80) == 0) {
          goto LABEL_43;
        }
        int v32 = *(char *)v31;
        unint64_t v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v30);
          v188 = result;
          *((_DWORD *)this + 69) = v158;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v31 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_43:
          v188 = v31;
          *((_DWORD *)this + 69) = v30;
        }
        goto LABEL_273;
      case 5u:
        if (v12 != 42) {
          goto LABEL_275;
        }
        uint64_t result = (google::protobuf::internal *)((char *)v11 - 1);
        while (1)
        {
          int v33 = (char *)result + 1;
          v188 = (google::protobuf::internal *)((char *)result + 1);
          uint64_t v34 = (int *)*((void *)this + 12);
          if (!v34) {
            break;
          }
          uint64_t v35 = *((int *)this + 22);
          int v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *((_DWORD *)this + 23))
            {
LABEL_51:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 20, v36 + 1);
              uint64_t v34 = (int *)*((void *)this + 12);
              int v36 = *v34;
            }
            *uint64_t v34 = v36 + 1;
            uint64_t v38 = *v9;
            if (!*v9) {
              operator new();
            }
            if (*(unsigned char *)(v38 + 24)) {
            int v37 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)v38, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            v37->__r_.__value_.__r.__words[0] = 0;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            uint64_t v39 = *((void *)this + 12);
            uint64_t v40 = *((int *)this + 22);
            *((_DWORD *)this + 22) = v40 + 1;
            *(void *)(v39 + 8 * v40 + 8) = v37;
            int v33 = (std::string::value_type *)v188;
            goto LABEL_57;
          }
          *((_DWORD *)this + 22) = v35 + 1;
          int v37 = *(std::string **)&v34[2 * v35 + 2];
LABEL_57:
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v37, v33, (uint64_t)a3);
          v188 = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(unsigned char *)result != 42) {
            goto LABEL_273;
          }
        }
        int v36 = *((_DWORD *)this + 23);
        goto LABEL_51;
      case 6u:
        if (v12 != 48) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x200u;
        uint64_t v42 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v4google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = *(unsigned __int8 *)v11;
        if ((v41 & 0x80) == 0) {
          goto LABEL_65;
        }
        int v43 = *(char *)v42;
        unint64_t v41 = v41 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v41);
          v188 = result;
          *((_DWORD *)this + 5google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v159;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v42 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_65:
          v188 = v42;
          *((_DWORD *)this + 5google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v41;
        }
        goto LABEL_273;
      case 7u:
        if (v12 != 58) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 2u;
        uint64_t v44 = *((void *)this + 1);
        uint64_t v24 = (google::protobuf::internal::ArenaImpl *)(v44 & 0xFFFFFFFFFFFFFFFELL);
        if (v44) {
          uint64_t v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        }
        uint64_t v25 = (uint64_t **)((char *)this + 160);
        goto LABEL_265;
      case 0xAu:
        if (v12 != 85) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x2000000u;
        int v46 = *(_DWORD *)v11;
        uint64_t v45 = (google::protobuf::internal *)((char *)v11 + 4);
        *((_DWORD *)this + 7std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v46;
        goto LABEL_255;
      case 0xBu:
        if (v12 != 88) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x800u;
        uint64_t v47 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v48 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_76;
        }
        int v49 = *(char *)v47;
        unint64_t v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v48);
          v188 = result;
          *((void *)this + 29) = v160;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v47 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_76:
          v188 = v47;
          *((void *)this + 29) = v48;
        }
        goto LABEL_273;
      case 0xCu:
        if (v12 != 96) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x400u;
        uint64_t v51 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v5std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *(unsigned __int8 *)v11;
        if ((v50 & 0x80) == 0) {
          goto LABEL_81;
        }
        int v52 = *(char *)v51;
        unint64_t v50 = v50 + (v52 << 7) - 128;
        if (v52 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v50);
          v188 = result;
          *((_DWORD *)this + 57) = v161;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v51 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_81:
          v188 = v51;
          *((_DWORD *)this + 57) = v50;
        }
        goto LABEL_273;
      case 0xDu:
        if (v12 != 104) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x1000u;
        long long v54 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v53) = *(unsigned __int8 *)v11;
        if ((v53 & 0x80) == 0) {
          goto LABEL_86;
        }
        int v55 = *(char *)v54;
        unint64_t v53 = v53 + (v55 << 7) - 128;
        if (v55 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v53);
          v188 = result;
          *((_DWORD *)this + 6std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v162;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v54 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_86:
          v188 = v54;
          *((_DWORD *)this + 6std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v53;
        }
        goto LABEL_273;
      case 0xEu:
        if (v12 != 112) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x4000000u;
        uint64_t v57 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v5google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = *(unsigned __int8 *)v11;
        if ((v56 & 0x80) == 0) {
          goto LABEL_91;
        }
        int v58 = *(char *)v57;
        unint64_t v56 = v56 + (v58 << 7) - 128;
        if (v58 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v56);
          v188 = result;
          *((_DWORD *)this + 7google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v163;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v57 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_91:
          v188 = v57;
          *((_DWORD *)this + 7google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v56;
        }
        goto LABEL_273;
      case 0xFu:
        if (v12 != 125) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x8000000u;
        int v59 = *(_DWORD *)v11;
        uint64_t v45 = (google::protobuf::internal *)((char *)v11 + 4);
        *((_DWORD *)this + 72) = v59;
        goto LABEL_255;
      case 0x10u:
        if (v12 != 128) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x10000000u;
        unint64_t v61 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v6std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *(unsigned __int8 *)v11;
        if ((v60 & 0x80) == 0) {
          goto LABEL_98;
        }
        int v62 = *(char *)v61;
        unint64_t v60 = v60 + (v62 << 7) - 128;
        if (v62 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v60);
          v188 = result;
          *((_DWORD *)this + 73) = v164;
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t v61 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_98:
          v188 = v61;
          *((_DWORD *)this + 73) = v60;
        }
        goto LABEL_273;
      case 0x11u:
        if (v12 != 136) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x20000000u;
        int v64 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v63) = *(unsigned __int8 *)v11;
        if ((v63 & 0x80) == 0) {
          goto LABEL_103;
        }
        int v65 = *(char *)v64;
        unint64_t v63 = v63 + (v65 << 7) - 128;
        if (v65 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v63);
          v188 = result;
          *((_DWORD *)this + 74) = v165;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v64 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_103:
          v188 = v64;
          *((_DWORD *)this + 74) = v63;
        }
        goto LABEL_273;
      case 0x12u:
        if (v12 != 144) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x40000000u;
        long long v67 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v6google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = *(unsigned __int8 *)v11;
        if ((v66 & 0x80) == 0) {
          goto LABEL_108;
        }
        int v68 = *(char *)v67;
        unint64_t v66 = v66 + (v68 << 7) - 128;
        if (v68 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v66);
          v188 = result;
          *((_DWORD *)this + 75) = v166;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v67 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_108:
          v188 = v67;
          *((_DWORD *)this + 75) = v66;
        }
        goto LABEL_273;
      case 0x13u:
        if (v12 != 152) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 11) |= 1u;
        uint64_t v69 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v70 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_113;
        }
        int v71 = *(char *)v69;
        unint64_t v70 = v70 + (v71 << 7) - 128;
        if (v71 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v70);
          v188 = result;
          *((unsigned char *)this + 308) = v167 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v69 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_113:
          v188 = v69;
          *((unsigned char *)this + 308) = v70 != 0;
        }
        goto LABEL_273;
      case 0x14u:
        if (v12 != 160) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x80000000;
        uint64_t v73 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v72) = *(unsigned __int8 *)v11;
        if ((v72 & 0x80) == 0) {
          goto LABEL_118;
        }
        int v74 = *(char *)v73;
        unint64_t v72 = v72 + (v74 << 7) - 128;
        if (v74 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v72);
          v188 = result;
          *((_DWORD *)this + 7google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v168;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v73 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_118:
          v188 = v73;
          *((_DWORD *)this + 7google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v72;
        }
        goto LABEL_273;
      case 0x15u:
        if (v12 != 168) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 11) |= 2u;
        uint64_t v75 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v76 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_123;
        }
        int v77 = *(char *)v75;
        unint64_t v76 = v76 + (v77 << 7) - 128;
        if (v77 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v76);
          v188 = result;
          *((unsigned char *)this + 309) = v169 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v75 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_123:
          v188 = v75;
          *((unsigned char *)this + 309) = v76 != 0;
        }
        goto LABEL_273;
      case 0x16u:
        if (v12 != 176) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 11) |= 8u;
        uint64_t v78 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v79 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_128;
        }
        int v80 = *(char *)v78;
        unint64_t v79 = v79 + (v80 << 7) - 128;
        if (v80 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v79);
          v188 = result;
          *((unsigned char *)this + 31google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v170 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v78 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_128:
          v188 = v78;
          *((unsigned char *)this + 31google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v79 != 0;
        }
        goto LABEL_273;
      case 0x17u:
        if (v12 != 184) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 11) |= 4u;
        float v81 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v82 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_133;
        }
        int v83 = *(char *)v81;
        unint64_t v82 = v82 + (v83 << 7) - 128;
        if (v83 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v82);
          v188 = result;
          *((unsigned char *)this + 31std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v171 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v81 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_133:
          v188 = v81;
          *((unsigned char *)this + 31std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v82 != 0;
        }
        goto LABEL_273;
      case 0x18u:
        if (v12 != 192) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x4000u;
        unint64_t v84 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v85 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_138;
        }
        int v86 = *(char *)v84;
        unint64_t v85 = v85 + (v86 << 7) - 128;
        if (v86 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v85);
          v188 = result;
          *((unsigned char *)this + 245) = v172 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t v84 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_138:
          v188 = v84;
          *((unsigned char *)this + 245) = v85 != 0;
        }
        goto LABEL_273;
      case 0x19u:
        if (v12 != 200) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x10000u;
        uint64_t v87 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v88 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_143;
        }
        int v89 = *(char *)v87;
        unint64_t v88 = v88 + (v89 << 7) - 128;
        if (v89 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v88);
          v188 = result;
          *((unsigned char *)this + 247) = v173 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v87 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_143:
          v188 = v87;
          *((unsigned char *)this + 247) = v88 != 0;
        }
        goto LABEL_273;
      case 0x1Au:
        if (v12 != 208) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x8000u;
        long long v90 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v91 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_148;
        }
        int v92 = *(char *)v90;
        unint64_t v91 = v91 + (v92 << 7) - 128;
        if (v92 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v91);
          v188 = result;
          *((unsigned char *)this + 24google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v174 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v90 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_148:
          v188 = v90;
          *((unsigned char *)this + 24google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v91 != 0;
        }
        goto LABEL_273;
      case 0x1Eu:
        if (v12 != 242) {
          goto LABEL_275;
        }
        uint64_t result = (google::protobuf::internal *)((char *)v11 - 2);
        while (1)
        {
          long long v93 = (char *)result + 2;
          v188 = (google::protobuf::internal *)((char *)result + 2);
          uint64_t v94 = (int *)*((void *)this + 15);
          if (!v94) {
            break;
          }
          uint64_t v95 = *((int *)this + 28);
          int v96 = *v94;
          if ((int)v95 >= *v94)
          {
            if (v96 == *((_DWORD *)this + 29))
            {
LABEL_156:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 26, v96 + 1);
              uint64_t v94 = (int *)*((void *)this + 15);
              int v96 = *v94;
            }
            *uint64_t v94 = v96 + 1;
            uint64_t v98 = *v8;
            if (!*v8) {
              operator new();
            }
            if (*(unsigned char *)(v98 + 24)) {
            unint64_t v97 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)v98, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            v97->__r_.__value_.__r.__words[0] = 0;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            uint64_t v99 = *((void *)this + 15);
            uint64_t v100 = *((int *)this + 28);
            *((_DWORD *)this + 28) = v100 + 1;
            *(void *)(v99 + 8 * v100 + 8) = v97;
            long long v93 = (std::string::value_type *)v188;
            goto LABEL_162;
          }
          *((_DWORD *)this + 28) = v95 + 1;
          unint64_t v97 = *(std::string **)&v94[2 * v95 + 2];
LABEL_162:
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v97, v93, (uint64_t)a3);
          v188 = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 498) {
            goto LABEL_273;
          }
        }
        int v96 = *((_DWORD *)this + 29);
        goto LABEL_156;
      case 0x1Fu:
        if (v12 != 250) {
          goto LABEL_275;
        }
        uint64_t result = (google::protobuf::internal *)((char *)v11 - 2);
        break;
      case 0x20u:
        if ((_BYTE)v12) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 11) |= 0x10u;
        uint64_t v109 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v110 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_187;
        }
        int v111 = *(char *)v109;
        unint64_t v110 = v110 + (v111 << 7) - 128;
        if (v111 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v110);
          v188 = result;
          *((unsigned char *)this + 312) = v175 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v109 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_187:
          v188 = v109;
          *((unsigned char *)this + 312) = v110 != 0;
        }
        goto LABEL_273;
      case 0x21u:
        if (v12 != 8) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 11) |= 0x20u;
        uint64_t v112 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v113 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_192;
        }
        int v114 = *(char *)v112;
        unint64_t v113 = v113 + (v114 << 7) - 128;
        if (v114 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v113);
          v188 = result;
          *((unsigned char *)this + 313) = v176 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v112 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_192:
          v188 = v112;
          *((unsigned char *)this + 313) = v113 != 0;
        }
        goto LABEL_273;
      case 0x22u:
        if (v12 != 16) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x40000u;
        uint64_t v115 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v116 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_197;
        }
        int v117 = *(char *)v115;
        unint64_t v116 = v116 + (v117 << 7) - 128;
        if (v117 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v116);
          v188 = result;
          *((unsigned char *)this + 249) = v177 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v115 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_197:
          v188 = v115;
          *((unsigned char *)this + 249) = v116 != 0;
        }
        goto LABEL_273;
      case 0x23u:
        if (v12 != 24) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x20000u;
        double v118 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v119 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_202;
        }
        int v120 = *(char *)v118;
        unint64_t v119 = v119 + (v120 << 7) - 128;
        if (v120 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v119);
          v188 = result;
          *((unsigned char *)this + 248) = v178 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          double v118 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_202:
          v188 = v118;
          *((unsigned char *)this + 248) = v119 != 0;
        }
        goto LABEL_273;
      case 0x24u:
        if (v12 != 34) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 4u;
        uint64_t v121 = *((void *)this + 1);
        uint64_t v24 = (google::protobuf::internal::ArenaImpl *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if (v121) {
          uint64_t v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        }
        uint64_t v25 = (uint64_t **)((char *)this + 168);
        goto LABEL_265;
      case 0x28u:
        if (v12 != 64) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x100000u;
        uint64_t v123 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v122) = *(unsigned __int8 *)v11;
        if ((v122 & 0x80) == 0) {
          goto LABEL_211;
        }
        int v124 = *(char *)v123;
        unint64_t v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v122);
          v188 = result;
          *((_DWORD *)this + 63) = v179;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v123 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_211:
          v188 = v123;
          *((_DWORD *)this + 63) = v122;
        }
        goto LABEL_273;
      case 0x29u:
        if (v12 != 72) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 11) |= 0x40u;
        long long v126 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v125) = *(unsigned __int8 *)v11;
        if ((v125 & 0x80) == 0) {
          goto LABEL_216;
        }
        int v127 = *(char *)v126;
        unint64_t v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v125);
          v188 = result;
          *((_DWORD *)this + 79) = v180;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v126 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_216:
          v188 = v126;
          *((_DWORD *)this + 79) = v125;
        }
        goto LABEL_273;
      case 0x2Au:
        if (v12 != 80) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 11) |= 0x80u;
        uint64_t v129 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(vgoogle::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 128) = *(unsigned __int8 *)v11;
        if ((v128 & 0x80) == 0) {
          goto LABEL_221;
        }
        int v130 = *(char *)v129;
        unint64_t v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v128);
          v188 = result;
          *((_DWORD *)this + 8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v181;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v129 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_221:
          v188 = v129;
          *((_DWORD *)this + 8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v128;
        }
        goto LABEL_273;
      case 0x2Bu:
        if (v12 != 88) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 11) |= 0x100u;
        long long v132 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v13google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = *(unsigned __int8 *)v11;
        if ((v131 & 0x80) == 0) {
          goto LABEL_226;
        }
        int v133 = *(char *)v132;
        unint64_t v131 = v131 + (v133 << 7) - 128;
        if (v133 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v131);
          v188 = result;
          *((_DWORD *)this + 8google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v182;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v132 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_226:
          v188 = v132;
          *((_DWORD *)this + 8google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v131;
        }
        goto LABEL_273;
      case 0x2Cu:
        if (v12 != 98) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 8u;
        uint64_t v153 = *((void *)this + 1);
        uint64_t v135 = (google::protobuf::Arena *)(v153 & 0xFFFFFFFFFFFFFFFELL);
        if (v153) {
          uint64_t v135 = *(google::protobuf::Arena **)v135;
        }
        uint64_t v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_;
        unint64_t v137 = (sentencepiece::TrainerSpec *)((char *)this + 176);
        goto LABEL_270;
      case 0x2Du:
        if (v12 != 106) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x10u;
        uint64_t v134 = *((void *)this + 1);
        uint64_t v135 = (google::protobuf::Arena *)(v134 & 0xFFFFFFFFFFFFFFFELL);
        if (v134) {
          uint64_t v135 = *(google::protobuf::Arena **)v135;
        }
        uint64_t v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_;
        unint64_t v137 = (sentencepiece::TrainerSpec *)((char *)this + 184);
        goto LABEL_270;
      case 0x2Eu:
        if (v12 != 114) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x20u;
        uint64_t v138 = *((void *)this + 1);
        uint64_t v135 = (google::protobuf::Arena *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if (v138) {
          uint64_t v135 = *(google::protobuf::Arena **)v135;
        }
        uint64_t v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_;
        unint64_t v137 = (sentencepiece::TrainerSpec *)((char *)this + 192);
        goto LABEL_270;
      case 0x2Fu:
        if (v12 != 122) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x40u;
        uint64_t v139 = *((void *)this + 1);
        uint64_t v135 = (google::protobuf::Arena *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if (v139) {
          uint64_t v135 = *(google::protobuf::Arena **)v135;
        }
        uint64_t v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_;
        unint64_t v137 = (sentencepiece::TrainerSpec *)((char *)this + 200);
        goto LABEL_270;
      case 0x30u:
        if (v12 != 130) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x80u;
        uint64_t v140 = *((void *)this + 1);
        uint64_t v135 = (google::protobuf::Arena *)(v140 & 0xFFFFFFFFFFFFFFFELL);
        if (v140) {
          uint64_t v135 = *(google::protobuf::Arena **)v135;
        }
        uint64_t v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_;
        unint64_t v137 = (sentencepiece::TrainerSpec *)((char *)this + 208);
LABEL_270:
        uint64_t v152 = google::protobuf::internal::ArenaStringPtr::Mutable(v137, (atomic_ullong *)v136, v135);
        goto LABEL_271;
      case 0x31u:
        if (v12 != 136) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x80000u;
        uint64_t v141 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v142 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_247;
        }
        int v143 = *(char *)v141;
        unint64_t v142 = v142 + (v143 << 7) - 128;
        if (v143 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v142);
          v188 = result;
          *((unsigned char *)this + 25std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v183 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v141 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_247:
          v188 = v141;
          *((unsigned char *)this + 25std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v142 != 0;
        }
        goto LABEL_273;
      case 0x32u:
        if (v12 != 144) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x2000u;
        uint64_t v144 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v145 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_252;
        }
        int v146 = *(char *)v144;
        unint64_t v145 = v145 + (v146 << 7) - 128;
        if (v146 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v145);
          v188 = result;
          *((unsigned char *)this + 244) = v184 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v144 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_252:
          v188 = v144;
          *((unsigned char *)this + 244) = v145 != 0;
        }
        goto LABEL_273;
      case 0x33u:
        if (v12 != 157) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x200000u;
        int v147 = *(_DWORD *)v11;
        uint64_t v45 = (google::protobuf::internal *)((char *)v11 + 4);
        *((_DWORD *)this + 64) = v147;
LABEL_255:
        v188 = v45;
        goto LABEL_273;
      case 0x34u:
        if (v12 != 160) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x400000u;
        int v148 = (google::protobuf::internal *)((char *)v11 + 1);
        unint64_t v149 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0) {
          goto LABEL_260;
        }
        int v150 = *(char *)v148;
        unint64_t v149 = v149 + (v150 << 7) - 128;
        if (v150 < 0)
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v149);
          v188 = result;
          *((void *)this + 33) = v185;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v148 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_260:
          v188 = v148;
          *((void *)this + 33) = v149;
        }
        goto LABEL_273;
      case 0x35u:
        if (v12 != 170) {
          goto LABEL_275;
        }
        *((_DWORD *)this + 10) |= 0x100u;
        uint64_t v151 = *((void *)this + 1);
        uint64_t v24 = (google::protobuf::internal::ArenaImpl *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if (v151) {
          uint64_t v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        }
        uint64_t v25 = (uint64_t **)((char *)this + 216);
LABEL_265:
        uint64_t v152 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v25, v24);
LABEL_271:
        uint64_t result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v152, (std::string::value_type *)v188, (uint64_t)a3);
        goto LABEL_272;
      default:
LABEL_275:
        if (v12) {
          BOOL v155 = (v12 & 7) == 4;
        }
        else {
          BOOL v155 = 1;
        }
        if (v155)
        {
          *((_DWORD *)a3 + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v12 - 1;
          return v11;
        }
        if (v12 < 0x640)
        {
          if (*v187)
          {
            uint64_t v156 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            uint64_t v156 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(v187);
            uint64_t v11 = v188;
          }
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v12, v156, v11, a3);
        }
        else
        {
          uint64_t result = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::TrainerSpec *)((char *)this + 16), v12, v11, (uint64_t)&sentencepiece::_TrainerSpec_default_instance_, v187, (int32x2_t *)a3);
        }
LABEL_272:
        v188 = result;
        if (!result) {
          return result;
        }
LABEL_273:
        int v154 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v188, *((_DWORD *)a3 + 23));
        uint64_t result = v188;
        if (v154) {
          return result;
        }
        continue;
    }
    break;
  }
  while (1)
  {
    long double v101 = (char *)result + 2;
    v188 = (google::protobuf::internal *)((char *)result + 2);
    double v102 = (int *)*((void *)this + 18);
    if (!v102) {
      break;
    }
    uint64_t v103 = *((int *)this + 34);
    int v104 = *v102;
    if ((int)v103 >= *v102)
    {
      if (v104 == *((_DWORD *)this + 35))
      {
LABEL_173:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 32, v104 + 1);
        double v102 = (int *)*((void *)this + 18);
        int v104 = *v102;
      }
      *double v102 = v104 + 1;
      uint64_t v106 = *v7;
      if (!*v7) {
        operator new();
      }
      if (*(unsigned char *)(v106 + 24)) {
      int v105 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)v106, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      }
      v105->__r_.__value_.__r.__words[0] = 0;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      uint64_t v107 = *((void *)this + 18);
      uint64_t v108 = *((int *)this + 34);
      *((_DWORD *)this + 34) = v108 + 1;
      *(void *)(v107 + 8 * v108 + 8) = v105;
      long double v101 = (std::string::value_type *)v188;
      goto LABEL_179;
    }
    *((_DWORD *)this + 34) = v103 + 1;
    int v105 = *(std::string **)&v102[2 * v103 + 2];
LABEL_179:
    uint64_t result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v105, v101, (uint64_t)a3);
    v188 = result;
    if (!result) {
      return result;
    }
    if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 506) {
      goto LABEL_273;
    }
  }
  int v104 = *((_DWORD *)this + 35);
  goto LABEL_173;
}

unsigned __int8 *sentencepiece::TrainerSpec::_InternalSerialize(sentencepiece::TrainerSpec *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6 = *((_DWORD *)this + 16);
  if (v6 >= 1)
  {
    for (int i = 0; v6 != i; ++i)
    {
      uint64_t v8 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56, i);
      if (*(char *)(v8 + 23) < 0)
      {
        int64_t v9 = *(void *)(v8 + 8);
        if (v9 > 127) {
          goto LABEL_13;
        }
      }
      else
      {
        int64_t v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*(void *)a3 - (void)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0) {
          uint64_t v10 = (const void *)v8;
        }
        else {
          uint64_t v10 = *(const void **)v8;
        }
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v8, (char *)a2);
    }
  }
  int v11 = *((_DWORD *)this + 10);
  if (v11)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, (const void **)(*((void *)this + 19) & 0xFFFFFFFFFFFFFFFELL), (char *)a2);
    if ((v11 & 0x800000) == 0)
    {
LABEL_16:
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_17;
    }
  }
  else if ((v11 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unint64_t v13 = *((int *)this + 68);
  *a2 = 24;
  if (v13 > 0x7F)
  {
    a2[1] = v13 | 0x80;
    unint64_t v15 = v13 >> 7;
    if (v13 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v15 | 0x80;
        unint64_t v18 = v15 >> 7;
        ++a2;
        unint64_t v19 = v15 >> 14;
        v15 >>= 7;
      }
      while (v19);
      *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v18;
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
    }
  }
  else
  {
    a2[1] = v13;
    a2 += 2;
    if ((v11 & 0x1000000) == 0) {
      goto LABEL_38;
    }
  }
LABEL_17:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unint64_t v12 = *((int *)this + 69);
  *a2 = 32;
  if (v12 > 0x7F)
  {
    a2[1] = v12 | 0x80;
    unint64_t v14 = v12 >> 7;
    if (v12 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v14 | 0x80;
        unint64_t v16 = v14 >> 7;
        ++a2;
        unint64_t v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v16;
    }
    else
    {
      a2[2] = v14;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v12;
    a2 += 2;
  }
LABEL_38:
  int v20 = *((_DWORD *)this + 22);
  if (v20 >= 1)
  {
    for (int j = 0; v20 != j; ++j)
    {
      uint64_t v22 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80, j);
      if (*(char *)(v22 + 23) < 0)
      {
        int64_t v23 = *(void *)(v22 + 8);
        if (v23 > 127) {
          goto LABEL_50;
        }
      }
      else
      {
        int64_t v23 = *(unsigned __int8 *)(v22 + 23);
      }
      if (*(void *)a3 - (void)a2 + 14 >= v23)
      {
        *a2 = 42;
        a2[1] = v23;
        if (*(char *)(v22 + 23) >= 0) {
          uint64_t v24 = (const void *)v22;
        }
        else {
          uint64_t v24 = *(const void **)v22;
        }
        memcpy(a2 + 2, v24, v23);
        a2 += v23 + 2;
        continue;
      }
LABEL_50:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 5, v22, (char *)a2);
    }
  }
  if ((v11 & 0x200) != 0)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unint64_t v26 = *((int *)this + 56);
    *a2 = 48;
    if (v26 > 0x7F)
    {
      a2[1] = v26 | 0x80;
      unint64_t v28 = v26 >> 7;
      if (v26 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v28 | 0x80;
          unint64_t v31 = v28 >> 7;
          ++a2;
          unint64_t v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v31;
        if ((v11 & 2) != 0) {
          goto LABEL_82;
        }
      }
      else
      {
        a2[2] = v28;
        a2 += 3;
        if ((v11 & 2) != 0) {
          goto LABEL_82;
        }
      }
    }
    else
    {
      a2[1] = v26;
      a2 += 2;
      if ((v11 & 2) != 0) {
        goto LABEL_82;
      }
    }
LABEL_53:
    if ((v11 & 0x2000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_83;
  }
  if ((v11 & 2) == 0) {
    goto LABEL_53;
  }
LABEL_82:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, (const void **)(*((void *)this + 20) & 0xFFFFFFFFFFFFFFFELL), (char *)a2);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x800) == 0) {
      goto LABEL_55;
    }
    goto LABEL_86;
  }
LABEL_83:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  int v33 = *((_DWORD *)this + 70);
  *a2 = 85;
  *(_DWORD *)(a2 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v33;
  a2 += 5;
  if ((v11 & 0x800) == 0)
  {
LABEL_55:
    if ((v11 & 0x400) == 0) {
      goto LABEL_56;
    }
LABEL_97:
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unint64_t v38 = *((int *)this + 57);
    *a2 = 96;
    if (v38 > 0x7F)
    {
      a2[1] = v38 | 0x80;
      unint64_t v39 = v38 >> 7;
      if (v38 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v39 | 0x80;
          unint64_t v40 = v39 >> 7;
          ++a2;
          unint64_t v41 = v39 >> 14;
          v39 >>= 7;
        }
        while (v41);
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v40;
        if ((v11 & 0x1000) != 0) {
          goto LABEL_108;
        }
      }
      else
      {
        a2[2] = v39;
        a2 += 3;
        if ((v11 & 0x1000) != 0) {
          goto LABEL_108;
        }
      }
    }
    else
    {
      a2[1] = v38;
      a2 += 2;
      if ((v11 & 0x1000) != 0) {
        goto LABEL_108;
      }
    }
LABEL_57:
    if ((v11 & 0x4000000) == 0) {
      goto LABEL_58;
    }
LABEL_119:
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unint64_t v46 = *((int *)this + 71);
    *a2 = 112;
    if (v46 > 0x7F)
    {
      a2[1] = v46 | 0x80;
      unint64_t v47 = v46 >> 7;
      if (v46 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v47 | 0x80;
          unint64_t v48 = v47 >> 7;
          ++a2;
          unint64_t v49 = v47 >> 14;
          v47 >>= 7;
        }
        while (v49);
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v48;
        if ((v11 & 0x8000000) != 0) {
          goto LABEL_130;
        }
      }
      else
      {
        a2[2] = v47;
        a2 += 3;
        if ((v11 & 0x8000000) != 0) {
          goto LABEL_130;
        }
      }
    }
    else
    {
      a2[1] = v46;
      a2 += 2;
      if ((v11 & 0x8000000) != 0) {
        goto LABEL_130;
      }
    }
LABEL_59:
    if ((v11 & 0x10000000) == 0) {
      goto LABEL_60;
    }
LABEL_133:
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unint64_t v51 = *((int *)this + 73);
    *(_WORD *)a2 = 384;
    if (v51 > 0x7F)
    {
      a2[2] = v51 | 0x80;
      unint64_t v52 = v51 >> 7;
      if (v51 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v52 | 0x80;
          unint64_t v53 = v52 >> 7;
          ++a2;
          unint64_t v54 = v52 >> 14;
          v52 >>= 7;
        }
        while (v54);
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v53;
        if ((v11 & 0x20000000) != 0) {
          goto LABEL_144;
        }
      }
      else
      {
        a2[3] = v52;
        a2 += 4;
        if ((v11 & 0x20000000) != 0) {
          goto LABEL_144;
        }
      }
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
      if ((v11 & 0x20000000) != 0) {
        goto LABEL_144;
      }
    }
LABEL_61:
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_155;
    }
    goto LABEL_62;
  }
LABEL_86:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unint64_t v34 = *((void *)this + 29);
  *a2 = 88;
  if (v34 > 0x7F)
  {
    a2[1] = v34 | 0x80;
    unint64_t v35 = v34 >> 7;
    if (v34 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v35 | 0x80;
        unint64_t v36 = v35 >> 7;
        ++a2;
        unint64_t v37 = v35 >> 14;
        v35 >>= 7;
      }
      while (v37);
      *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v36;
      if ((v11 & 0x400) != 0) {
        goto LABEL_97;
      }
    }
    else
    {
      a2[2] = v35;
      a2 += 3;
      if ((v11 & 0x400) != 0) {
        goto LABEL_97;
      }
    }
  }
  else
  {
    a2[1] = v34;
    a2 += 2;
    if ((v11 & 0x400) != 0) {
      goto LABEL_97;
    }
  }
LABEL_56:
  if ((v11 & 0x1000) == 0) {
    goto LABEL_57;
  }
LABEL_108:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unint64_t v42 = *((int *)this + 60);
  *a2 = 104;
  if (v42 > 0x7F)
  {
    a2[1] = v42 | 0x80;
    unint64_t v43 = v42 >> 7;
    if (v42 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v43 | 0x80;
        unint64_t v44 = v43 >> 7;
        ++a2;
        unint64_t v45 = v43 >> 14;
        v43 >>= 7;
      }
      while (v45);
      *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v44;
      if ((v11 & 0x4000000) != 0) {
        goto LABEL_119;
      }
    }
    else
    {
      a2[2] = v43;
      a2 += 3;
      if ((v11 & 0x4000000) != 0) {
        goto LABEL_119;
      }
    }
  }
  else
  {
    a2[1] = v42;
    a2 += 2;
    if ((v11 & 0x4000000) != 0) {
      goto LABEL_119;
    }
  }
LABEL_58:
  if ((v11 & 0x8000000) == 0) {
    goto LABEL_59;
  }
LABEL_130:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  int v50 = *((_DWORD *)this + 72);
  *a2 = 125;
  *(_DWORD *)(a2 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v50;
  a2 += 5;
  if ((v11 & 0x10000000) != 0) {
    goto LABEL_133;
  }
LABEL_60:
  if ((v11 & 0x20000000) == 0) {
    goto LABEL_61;
  }
LABEL_144:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unint64_t v55 = *((int *)this + 74);
  *(_WORD *)a2 = 392;
  if (v55 > 0x7F)
  {
    a2[2] = v55 | 0x80;
    unint64_t v56 = v55 >> 7;
    if (v55 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v56 | 0x80;
        unint64_t v57 = v56 >> 7;
        ++a2;
        unint64_t v58 = v56 >> 14;
        v56 >>= 7;
      }
      while (v58);
      *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v57;
      if ((v11 & 0x40000000) == 0) {
        goto LABEL_155;
      }
    }
    else
    {
      a2[3] = v56;
      a2 += 4;
      if ((v11 & 0x40000000) == 0) {
        goto LABEL_155;
      }
    }
  }
  else
  {
    a2[2] = v55;
    a2 += 3;
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_155;
    }
  }
LABEL_62:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unint64_t v25 = *((int *)this + 75);
  *(_WORD *)a2 = 400;
  if (v25 > 0x7F)
  {
    a2[2] = v25 | 0x80;
    unint64_t v27 = v25 >> 7;
    if (v25 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v27 | 0x80;
        unint64_t v29 = v27 >> 7;
        ++a2;
        unint64_t v30 = v27 >> 14;
        v27 >>= 7;
      }
      while (v30);
      *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v29;
    }
    else
    {
      a2[3] = v27;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v25;
    a2 += 3;
  }
LABEL_155:
  if (*((unsigned char *)this + 44))
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unsigned __int8 v59 = *((unsigned char *)this + 308);
    *(_WORD *)a2 = 408;
    a2[2] = v59;
    a2 += 3;
  }
  if ((*((_DWORD *)this + 10) & 0x80000000) != 0)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unint64_t v60 = *((int *)this + 76);
    *(_WORD *)a2 = 416;
    if (v60 > 0x7F)
    {
      a2[2] = v60 | 0x80;
      unint64_t v61 = v60 >> 7;
      if (v60 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v61 | 0x80;
          unint64_t v62 = v61 >> 7;
          ++a2;
          unint64_t v63 = v61 >> 14;
          v61 >>= 7;
        }
        while (v63);
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v62;
      }
      else
      {
        a2[3] = v61;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v60;
      a2 += 3;
    }
  }
  int v64 = *((_DWORD *)this + 11);
  if ((v64 & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unsigned __int8 v65 = *((unsigned char *)this + 309);
    *(_WORD *)a2 = 424;
    a2[2] = v65;
    a2 += 3;
    if ((v64 & 8) == 0)
    {
LABEL_171:
      if ((v64 & 4) == 0) {
        goto LABEL_182;
      }
      goto LABEL_179;
    }
  }
  else if ((v64 & 8) == 0)
  {
    goto LABEL_171;
  }
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unsigned __int8 v66 = *((unsigned char *)this + 311);
  *(_WORD *)a2 = 432;
  a2[2] = v66;
  a2 += 3;
  if ((v64 & 4) != 0)
  {
LABEL_179:
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unsigned __int8 v67 = *((unsigned char *)this + 310);
    *(_WORD *)a2 = 440;
    a2[2] = v67;
    a2 += 3;
  }
LABEL_182:
  int v68 = *((_DWORD *)this + 10);
  if ((v68 & 0x4000) != 0)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unsigned __int8 v69 = *((unsigned char *)this + 245);
    *(_WORD *)a2 = 448;
    a2[2] = v69;
    a2 += 3;
    if ((v68 & 0x10000) == 0)
    {
LABEL_184:
      if ((v68 & 0x8000) == 0) {
        goto LABEL_195;
      }
      goto LABEL_192;
    }
  }
  else if ((v68 & 0x10000) == 0)
  {
    goto LABEL_184;
  }
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unsigned __int8 v70 = *((unsigned char *)this + 247);
  *(_WORD *)a2 = 456;
  a2[2] = v70;
  a2 += 3;
  if ((v68 & 0x8000) != 0)
  {
LABEL_192:
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unsigned __int8 v71 = *((unsigned char *)this + 246);
    *(_WORD *)a2 = 464;
    a2[2] = v71;
    a2 += 3;
  }
LABEL_195:
  int v72 = *((_DWORD *)this + 28);
  if (v72 >= 1)
  {
    for (int k = 0; v72 != k; ++k)
    {
      uint64_t v74 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104, k);
      if (*(char *)(v74 + 23) < 0)
      {
        int64_t v75 = *(void *)(v74 + 8);
        if (v75 > 127) {
          goto LABEL_207;
        }
      }
      else
      {
        int64_t v75 = *(unsigned __int8 *)(v74 + 23);
      }
      if (*(void *)a3 - (void)a2 + 13 >= v75)
      {
        *(_WORD *)a2 = 498;
        a2[2] = v75;
        if (*(char *)(v74 + 23) >= 0) {
          unint64_t v76 = (const void *)v74;
        }
        else {
          unint64_t v76 = *(const void **)v74;
        }
        memcpy(a2 + 3, v76, v75);
        a2 += v75 + 3;
        continue;
      }
LABEL_207:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 30, v74, (char *)a2);
    }
  }
  int v77 = *((_DWORD *)this + 34);
  if (v77 >= 1)
  {
    for (int m = 0; v77 != m; ++m)
    {
      uint64_t v79 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128, m);
      if (*(char *)(v79 + 23) < 0)
      {
        int64_t v80 = *(void *)(v79 + 8);
        if (v80 > 127) {
          goto LABEL_220;
        }
      }
      else
      {
        int64_t v80 = *(unsigned __int8 *)(v79 + 23);
      }
      if (*(void *)a3 - (void)a2 + 13 >= v80)
      {
        *(_WORD *)a2 = 506;
        a2[2] = v80;
        if (*(char *)(v79 + 23) >= 0) {
          float v81 = (const void *)v79;
        }
        else {
          float v81 = *(const void **)v79;
        }
        memcpy(a2 + 3, v81, v80);
        a2 += v80 + 3;
        continue;
      }
LABEL_220:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 31, v79, (char *)a2);
    }
  }
  int v82 = *((_DWORD *)this + 11);
  if ((v82 & 0x10) != 0)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unsigned __int8 v83 = *((unsigned char *)this + 312);
    *(_WORD *)a2 = 640;
    a2[2] = v83;
    a2 += 3;
  }
  if ((v82 & 0x20) != 0)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unsigned __int8 v84 = *((unsigned char *)this + 313);
    *(_WORD *)a2 = 648;
    a2[2] = v84;
    a2 += 3;
  }
  int v85 = *((_DWORD *)this + 10);
  if ((v85 & 0x40000) != 0)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unsigned __int8 v86 = *((unsigned char *)this + 249);
    *(_WORD *)a2 = 656;
    a2[2] = v86;
    a2 += 3;
    if ((v85 & 0x20000) == 0)
    {
LABEL_231:
      if ((v85 & 4) == 0) {
        goto LABEL_232;
      }
      goto LABEL_240;
    }
  }
  else if ((v85 & 0x20000) == 0)
  {
    goto LABEL_231;
  }
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unsigned __int8 v87 = *((unsigned char *)this + 248);
  *(_WORD *)a2 = 664;
  a2[2] = v87;
  a2 += 3;
  if ((v85 & 4) == 0)
  {
LABEL_232:
    if ((v85 & 0x100000) == 0) {
      goto LABEL_250;
    }
    goto LABEL_241;
  }
LABEL_240:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 36, (const void **)(*((void *)this + 21) & 0xFFFFFFFFFFFFFFFELL), (char *)a2);
  if ((v85 & 0x100000) == 0) {
    goto LABEL_250;
  }
LABEL_241:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unint64_t v88 = *((int *)this + 63);
  *(_WORD *)a2 = 704;
  if (v88 > 0x7F)
  {
    a2[2] = v88 | 0x80;
    unint64_t v89 = v88 >> 7;
    if (v88 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v89 | 0x80;
        unint64_t v90 = v89 >> 7;
        ++a2;
        unint64_t v91 = v89 >> 14;
        v89 >>= 7;
      }
      while (v91);
      *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v90;
    }
    else
    {
      a2[3] = v89;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v88;
    a2 += 3;
  }
LABEL_250:
  int v92 = *((_DWORD *)this + 11);
  if ((v92 & 0x40) != 0)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    }
    unint64_t v94 = *((int *)this + 79);
    *(_WORD *)a2 = 712;
    if (v94 > 0x7F)
    {
      a2[2] = v94 | 0x80;
      unint64_t v96 = v94 >> 7;
      if (v94 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v96 | 0x80;
          unint64_t v99 = v96 >> 7;
          ++a2;
          unint64_t v100 = v96 >> 14;
          v96 >>= 7;
        }
        while (v100);
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v99;
        if ((v92 & 0x80) != 0) {
          goto LABEL_273;
        }
      }
      else
      {
        a2[3] = v96;
        a2 += 4;
        if ((v92 & 0x80) != 0) {
          goto LABEL_273;
        }
      }
    }
    else
    {
      a2[2] = v94;
      a2 += 3;
      if ((v92 & 0x80) != 0) {
        goto LABEL_273;
      }
    }
LABEL_252:
    if ((v92 & 0x100) == 0) {
      goto LABEL_284;
    }
    goto LABEL_253;
  }
  if ((v92 & 0x80) == 0) {
    goto LABEL_252;
  }
LABEL_273:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unint64_t v101 = *((int *)this + 80);
  *(_WORD *)a2 = 720;
  if (v101 > 0x7F)
  {
    a2[2] = v101 | 0x80;
    unint64_t v102 = v101 >> 7;
    if (v101 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v102 | 0x80;
        unint64_t v103 = v102 >> 7;
        ++a2;
        unint64_t v104 = v102 >> 14;
        v102 >>= 7;
      }
      while (v104);
      *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v103;
      if ((v92 & 0x100) == 0) {
        goto LABEL_284;
      }
    }
    else
    {
      a2[3] = v102;
      a2 += 4;
      if ((v92 & 0x100) == 0) {
        goto LABEL_284;
      }
    }
  }
  else
  {
    a2[2] = v101;
    a2 += 3;
    if ((v92 & 0x100) == 0) {
      goto LABEL_284;
    }
  }
LABEL_253:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unint64_t v93 = *((int *)this + 81);
  *(_WORD *)a2 = 728;
  if (v93 > 0x7F)
  {
    a2[2] = v93 | 0x80;
    unint64_t v95 = v93 >> 7;
    if (v93 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v95 | 0x80;
        unint64_t v97 = v95 >> 7;
        ++a2;
        unint64_t v98 = v95 >> 14;
        v95 >>= 7;
      }
      while (v98);
      *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v97;
    }
    else
    {
      a2[3] = v95;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v93;
    a2 += 3;
  }
LABEL_284:
  int v105 = *((_DWORD *)this + 10);
  if ((v105 & 8) != 0)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 44, (const void **)(*((void *)this + 22) & 0xFFFFFFFFFFFFFFFELL), (char *)a2);
    if ((v105 & 0x10) == 0)
    {
LABEL_286:
      if ((v105 & 0x20) == 0) {
        goto LABEL_287;
      }
      goto LABEL_299;
    }
  }
  else if ((v105 & 0x10) == 0)
  {
    goto LABEL_286;
  }
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 45, (const void **)(*((void *)this + 23) & 0xFFFFFFFFFFFFFFFELL), (char *)a2);
  if ((v105 & 0x20) == 0)
  {
LABEL_287:
    if ((v105 & 0x40) == 0) {
      goto LABEL_288;
    }
    goto LABEL_300;
  }
LABEL_299:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 46, (const void **)(*((void *)this + 24) & 0xFFFFFFFFFFFFFFFELL), (char *)a2);
  if ((v105 & 0x40) == 0)
  {
LABEL_288:
    if ((v105 & 0x80) == 0) {
      goto LABEL_289;
    }
    goto LABEL_301;
  }
LABEL_300:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 47, (const void **)(*((void *)this + 25) & 0xFFFFFFFFFFFFFFFELL), (char *)a2);
  if ((v105 & 0x80) == 0)
  {
LABEL_289:
    if ((v105 & 0x80000) == 0) {
      goto LABEL_290;
    }
    goto LABEL_302;
  }
LABEL_301:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 48, (const void **)(*((void *)this + 26) & 0xFFFFFFFFFFFFFFFELL), (char *)a2);
  if ((v105 & 0x80000) == 0)
  {
LABEL_290:
    if ((v105 & 0x2000) == 0) {
      goto LABEL_291;
    }
    goto LABEL_305;
  }
LABEL_302:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unsigned __int8 v110 = *((unsigned char *)this + 250);
  *(_WORD *)a2 = 904;
  a2[2] = v110;
  a2 += 3;
  if ((v105 & 0x2000) == 0)
  {
LABEL_291:
    if ((v105 & 0x200000) == 0) {
      goto LABEL_292;
    }
    goto LABEL_308;
  }
LABEL_305:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unsigned __int8 v111 = *((unsigned char *)this + 244);
  *(_WORD *)a2 = 912;
  a2[2] = v111;
  a2 += 3;
  if ((v105 & 0x200000) == 0)
  {
LABEL_292:
    if ((v105 & 0x400000) == 0) {
      goto LABEL_293;
    }
    goto LABEL_311;
  }
LABEL_308:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  int v112 = *((_DWORD *)this + 64);
  *(_WORD *)a2 = 925;
  *(_DWORD *)(a2 + 2) = v112;
  a2 += 6;
  if ((v105 & 0x400000) == 0)
  {
LABEL_293:
    if ((v105 & 0x100) == 0) {
      goto LABEL_295;
    }
    goto LABEL_294;
  }
LABEL_311:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  }
  unint64_t v113 = *((void *)this + 33);
  *(_WORD *)a2 = 928;
  if (v113 <= 0x7F)
  {
    a2[2] = v113;
    a2 += 3;
    if ((v105 & 0x100) == 0) {
      goto LABEL_295;
    }
LABEL_294:
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 53, (const void **)(*((void *)this + 27) & 0xFFFFFFFFFFFFFFFELL), (char *)a2);
    goto LABEL_295;
  }
  a2[2] = v113 | 0x80;
  unint64_t v114 = v113 >> 7;
  if (v113 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v114 | 0x80;
      unint64_t v115 = v114 >> 7;
      ++a2;
      unint64_t v116 = v114 >> 14;
      v114 >>= 7;
    }
    while (v116);
    *(a2 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v115;
    if ((v105 & 0x100) != 0) {
      goto LABEL_294;
    }
  }
  else
  {
    a2[3] = v114;
    a2 += 4;
    if ((v105 & 0x100) != 0) {
      goto LABEL_294;
    }
  }
LABEL_295:
  uint64_t v106 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::TrainerSpec *)((char *)this + 16), 200, 0x20000000, a2, a3);
  uint64_t v107 = v106;
  uint64_t v108 = *((void *)this + 1);
  if ((v108 & 1) == 0) {
    return v107;
  }
  unint64_t v117 = v108 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v117 + 31) < 0)
  {
    double v118 = *(void **)(v117 + 8);
    uint64_t v119 = *(void *)(v117 + 16);
  }
  else
  {
    double v118 = (void *)(v117 + 8);
    LODWORD(v119) = *(unsigned __int8 *)(v117 + 31);
  }
  if (*(void *)a3 - (void)v106 >= (int)v119)
  {
    uint64_t v120 = (int)v119;
    memcpy(v106, v118, (int)v119);
    v107 += v120;
    return v107;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v118, v119, v106);
}

uint64_t sentencepiece::TrainerSpec::ByteSizeLong(sentencepiece::TrainerSpec *this)
{
  uint64_t v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::TrainerSpec *)((char *)this + 16));
  uint64_t v3 = *((unsigned int *)this + 16);
  uint64_t v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56, v5);
      uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(v6 + 8);
      }
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v5;
    }
    while (v3 != v5);
  }
  uint64_t v8 = *((unsigned int *)this + 22);
  uint64_t v9 = v4 + v8;
  if ((int)v8 >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80, v10);
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(v11 + 8);
      }
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while (v8 != v10);
  }
  uint64_t v13 = *((unsigned int *)this + 28);
  uint64_t v14 = v9 + 2 * v13;
  if ((int)v13 >= 1)
  {
    int v15 = 0;
    do
    {
      uint64_t v16 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104, v15);
      uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *(void *)(v16 + 8);
      }
      v14 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while (v13 != v15);
  }
  uint64_t v18 = *((unsigned int *)this + 34);
  uint64_t v19 = v14 + 2 * v18;
  if ((int)v18 >= 1)
  {
    int v20 = 0;
    do
    {
      uint64_t v21 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128, v20);
      uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *(void *)(v21 + 8);
      }
      v19 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while (v18 != v20);
  }
  unsigned int v23 = *((_DWORD *)this + 10);
  if (!(_BYTE)v23) {
    goto LABEL_33;
  }
  if (v23)
  {
    unint64_t v58 = *((void *)this + 19) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v59 = *(unsigned __int8 *)(v58 + 23);
    uint64_t v60 = *(void *)(v58 + 8);
    if ((v59 & 0x80u) == 0) {
      uint64_t v60 = v59;
    }
    v19 += v60 + ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0) {
        goto LABEL_25;
      }
      goto LABEL_131;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_24;
  }
  unint64_t v61 = *((void *)this + 20) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v62 = *(unsigned __int8 *)(v61 + 23);
  uint64_t v63 = *(void *)(v61 + 8);
  if ((v62 & 0x80u) == 0) {
    uint64_t v63 = v62;
  }
  v19 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_134;
  }
LABEL_131:
  unint64_t v64 = *((void *)this + 21) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v65 = *(unsigned __int8 *)(v64 + 23);
  uint64_t v66 = *(void *)(v64 + 8);
  if ((v65 & 0x80u) == 0) {
    uint64_t v66 = v65;
  }
  v19 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 8) == 0)
  {
LABEL_26:
    if ((v23 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_137;
  }
LABEL_134:
  unint64_t v67 = *((void *)this + 22) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v68 = *(unsigned __int8 *)(v67 + 23);
  uint64_t v69 = *(void *)(v67 + 8);
  if ((v68 & 0x80u) == 0) {
    uint64_t v69 = v68;
  }
  v19 += v69 + ((9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x10) == 0)
  {
LABEL_27:
    if ((v23 & 0x20) == 0) {
      goto LABEL_28;
    }
LABEL_140:
    unint64_t v73 = *((void *)this + 24) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v74 = *(unsigned __int8 *)(v73 + 23);
    uint64_t v75 = *(void *)(v73 + 8);
    if ((v74 & 0x80u) == 0) {
      uint64_t v75 = v74;
    }
    v19 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x40) == 0)
    {
LABEL_29:
      if ((v23 & 0x80) == 0) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
    goto LABEL_143;
  }
LABEL_137:
  unint64_t v70 = *((void *)this + 23) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v71 = *(unsigned __int8 *)(v70 + 23);
  uint64_t v72 = *(void *)(v70 + 8);
  if ((v71 & 0x80u) == 0) {
    uint64_t v72 = v71;
  }
  v19 += v72 + ((9 * (__clz(v72 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x20) != 0) {
    goto LABEL_140;
  }
LABEL_28:
  if ((v23 & 0x40) == 0) {
    goto LABEL_29;
  }
LABEL_143:
  unint64_t v76 = *((void *)this + 25) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v77 = *(unsigned __int8 *)(v76 + 23);
  uint64_t v78 = *(void *)(v76 + 8);
  if ((v77 & 0x80u) == 0) {
    uint64_t v78 = v77;
  }
  v19 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x80) != 0)
  {
LABEL_30:
    unint64_t v24 = *((void *)this + 26) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v25 = *(unsigned __int8 *)(v24 + 23);
    uint64_t v26 = *(void *)(v24 + 8);
    if ((v25 & 0x80u) == 0) {
      uint64_t v26 = v25;
    }
    v19 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_33:
  if ((v23 & 0xFF00) == 0) {
    goto LABEL_50;
  }
  if ((v23 & 0x100) != 0)
  {
    unint64_t v79 = *((void *)this + 27) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v80 = *(unsigned __int8 *)(v79 + 23);
    uint64_t v81 = *(void *)(v79 + 8);
    if ((v80 & 0x80u) == 0) {
      uint64_t v81 = v80;
    }
    v19 += v81 + ((9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x200) == 0)
    {
LABEL_36:
      if ((v23 & 0x400) == 0) {
        goto LABEL_37;
      }
      goto LABEL_154;
    }
  }
  else if ((v23 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  int v82 = *((_DWORD *)this + 56);
  uint64_t v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
  if (v82 >= 0) {
    uint64_t v84 = v83;
  }
  else {
    uint64_t v84 = 10;
  }
  v19 += v84 + 1;
  if ((v23 & 0x400) == 0)
  {
LABEL_37:
    if ((v23 & 0x800) == 0) {
      goto LABEL_38;
    }
LABEL_158:
    v19 += ((9 * (__clz(*((void *)this + 29) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v23 & 0x1000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }
LABEL_154:
  int v85 = *((_DWORD *)this + 57);
  uint64_t v86 = (9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6;
  if (v85 >= 0) {
    uint64_t v87 = v86;
  }
  else {
    uint64_t v87 = 10;
  }
  v19 += v87 + 1;
  if ((v23 & 0x800) != 0) {
    goto LABEL_158;
  }
LABEL_38:
  if ((v23 & 0x1000) != 0)
  {
LABEL_39:
    int v27 = *((_DWORD *)this + 60);
    uint64_t v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
    if (v27 >= 0) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 10;
    }
    v19 += v29 + 1;
  }
LABEL_43:
  uint64_t v30 = v19 + 3;
  if ((v23 & 0x2000) == 0) {
    uint64_t v30 = v19;
  }
  if ((v23 & 0x4000) != 0) {
    v30 += 3;
  }
  if ((v23 & 0x8000) != 0) {
    uint64_t v19 = v30 + 3;
  }
  else {
    uint64_t v19 = v30;
  }
LABEL_50:
  if ((v23 & 0xFF0000) != 0)
  {
    uint64_t v31 = v19 + 3;
    if ((v23 & 0x10000) == 0) {
      uint64_t v31 = v19;
    }
    if ((v23 & 0x20000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x40000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x80000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x100000) != 0)
    {
      int v32 = *((_DWORD *)this + 63);
      uint64_t v33 = (9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6;
      if (v32 >= 0) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = 10;
      }
      v31 += v34 + 2;
    }
    if ((v23 & 0x200000) != 0) {
      uint64_t v19 = v31 + 6;
    }
    else {
      uint64_t v19 = v31;
    }
    if ((v23 & 0x400000) != 0) {
      v19 += ((9 * (__clz(*((void *)this + 33) | 1) ^ 0x3F) + 73) >> 6) + 2;
    }
    if ((v23 & 0x800000) != 0)
    {
      int v35 = *((_DWORD *)this + 68);
      uint64_t v36 = (9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6;
      if (v35 >= 0) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 10;
      }
      v19 += v37 + 1;
    }
  }
  if (!HIBYTE(v23)) {
    goto LABEL_94;
  }
  if ((v23 & 0x1000000) != 0)
  {
    int v38 = *((_DWORD *)this + 69);
    uint64_t v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
    if (v38 >= 0) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 10;
    }
    v19 += v40 + 1;
  }
  uint64_t v41 = v19 + 5;
  if ((v23 & 0x2000000) == 0) {
    uint64_t v41 = v19;
  }
  if ((v23 & 0x4000000) != 0)
  {
    int v42 = *((_DWORD *)this + 71);
    uint64_t v43 = (9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6;
    if (v42 >= 0) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 10;
    }
    v41 += v44 + 1;
  }
  if ((v23 & 0x8000000) != 0) {
    uint64_t v19 = v41 + 5;
  }
  else {
    uint64_t v19 = v41;
  }
  if ((v23 & 0x10000000) == 0)
  {
    if ((v23 & 0x20000000) == 0) {
      goto LABEL_92;
    }
LABEL_164:
    int v91 = *((_DWORD *)this + 74);
    uint64_t v92 = ((9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v91 >= 0) {
      uint64_t v93 = v92;
    }
    else {
      uint64_t v93 = 12;
    }
    v19 += v93;
    if ((v23 & 0x40000000) == 0)
    {
LABEL_93:
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_94;
      }
      goto LABEL_172;
    }
    goto LABEL_168;
  }
  int v88 = *((_DWORD *)this + 73);
  uint64_t v89 = (9 * (__clz(v88 | 1) ^ 0x1F) + 73) >> 6;
  if (v88 >= 0) {
    uint64_t v90 = v89;
  }
  else {
    uint64_t v90 = 10;
  }
  v19 += v90 + 2;
  if ((v23 & 0x20000000) != 0) {
    goto LABEL_164;
  }
LABEL_92:
  if ((v23 & 0x40000000) == 0) {
    goto LABEL_93;
  }
LABEL_168:
  int v94 = *((_DWORD *)this + 75);
  uint64_t v95 = ((9 * (__clz(v94 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v94 >= 0) {
    uint64_t v96 = v95;
  }
  else {
    uint64_t v96 = 12;
  }
  v19 += v96;
  if ((v23 & 0x80000000) != 0)
  {
LABEL_172:
    int v97 = *((_DWORD *)this + 76);
    uint64_t v98 = ((9 * (__clz(v97 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v97 >= 0) {
      uint64_t v99 = v98;
    }
    else {
      uint64_t v99 = 12;
    }
    v19 += v99;
  }
LABEL_94:
  int v45 = *((_DWORD *)this + 11);
  if ((_BYTE)v45)
  {
    uint64_t v46 = v19 + 3;
    if ((v45 & 1) == 0) {
      uint64_t v46 = v19;
    }
    if ((v45 & 2) != 0) {
      v46 += 3;
    }
    if ((v45 & 4) != 0) {
      v46 += 3;
    }
    if ((v45 & 8) != 0) {
      v46 += 3;
    }
    if ((v45 & 0x10) != 0) {
      v46 += 3;
    }
    if ((v45 & 0x20) != 0) {
      uint64_t v19 = v46 + 3;
    }
    else {
      uint64_t v19 = v46;
    }
    if ((v45 & 0x40) != 0)
    {
      int v47 = *((_DWORD *)this + 79);
      uint64_t v48 = ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v47 >= 0) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = 12;
      }
      v19 += v49;
    }
    if ((v45 & 0x80) != 0)
    {
      int v50 = *((_DWORD *)this + 80);
      uint64_t v51 = ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v50 >= 0) {
        uint64_t v52 = v51;
      }
      else {
        uint64_t v52 = 12;
      }
      v19 += v52;
    }
  }
  if ((v45 & 0x100) != 0)
  {
    int v53 = *((_DWORD *)this + 81);
    uint64_t v54 = ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v53 >= 0) {
      uint64_t v55 = v54;
    }
    else {
      uint64_t v55 = 12;
    }
    v19 += v55;
  }
  uint64_t v56 = *((void *)this + 1);
  if (v56)
  {
    unint64_t v100 = v56 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v100 + 31) < 0) {
      uint64_t v101 = *(void *)(v100 + 16);
    }
    else {
      uint64_t v101 = *(unsigned __int8 *)(v100 + 31);
    }
    v19 += v101;
  }
  *((_DWORD *)this + 12) = v19;
  return v19;
}

void sentencepiece::TrainerSpec::CheckTypeAndMergeFrom(sentencepiece::TrainerSpec *this, const google::protobuf::MessageLite *lpsrc)
{
  sentencepiece::TrainerSpec::MergeFrom(this, lpsrc);
}

void sentencepiece::TrainerSpec::MergeFrom(sentencepiece::TrainerSpec *this, const sentencepiece::TrainerSpec *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v44, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1671);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v44, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v43, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v44[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::TrainerSpec *)((char *)this + 16), (const sentencepiece::TrainerSpec *)((char *)a2 + 16));
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *((void *)this + 1);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56, (uint64_t)a2 + 56);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80, (uint64_t)a2 + 80);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104, (uint64_t)a2 + 104);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128, (uint64_t)a2 + 128);
  unsigned int v13 = *((_DWORD *)a2 + 10);
  if (!(_BYTE)v13) {
    goto LABEL_47;
  }
  if (v13)
  {
    uint64_t v14 = (long long *)(*((void *)a2 + 19) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 1u;
    uint64_t v15 = *((void *)this + 1);
    uint64_t v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
    if (v15) {
      uint64_t v16 = *(google::protobuf::internal::ArenaImpl **)v16;
    }
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 152), v14, v16);
    if ((v13 & 2) == 0)
    {
LABEL_16:
      if ((v13 & 4) == 0) {
        goto LABEL_17;
      }
      goto LABEL_29;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v17 = (long long *)(*((void *)a2 + 20) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 2u;
  uint64_t v18 = *((void *)this + 1);
  uint64_t v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
  if (v18) {
    uint64_t v19 = *(google::protobuf::internal::ArenaImpl **)v19;
  }
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 160), v17, v19);
  if ((v13 & 4) == 0)
  {
LABEL_17:
    if ((v13 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
LABEL_29:
  int v20 = (long long *)(*((void *)a2 + 21) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 4u;
  uint64_t v21 = *((void *)this + 1);
  uint64_t v22 = (google::protobuf::internal::ArenaImpl *)(v21 & 0xFFFFFFFFFFFFFFFELL);
  if (v21) {
    uint64_t v22 = *(google::protobuf::internal::ArenaImpl **)v22;
  }
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 168), v20, v22);
  if ((v13 & 8) == 0)
  {
LABEL_18:
    if ((v13 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_32:
  unsigned int v23 = (long long *)(*((void *)a2 + 22) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 8u;
  uint64_t v24 = *((void *)this + 1);
  uint64_t v25 = (google::protobuf::internal::ArenaImpl *)(v24 & 0xFFFFFFFFFFFFFFFELL);
  if (v24) {
    uint64_t v25 = *(google::protobuf::internal::ArenaImpl **)v25;
  }
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 176), v23, v25);
  if ((v13 & 0x10) == 0)
  {
LABEL_19:
    if ((v13 & 0x20) == 0) {
      goto LABEL_20;
    }
LABEL_38:
    uint64_t v29 = (long long *)(*((void *)a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 0x20u;
    uint64_t v30 = *((void *)this + 1);
    uint64_t v31 = (google::protobuf::internal::ArenaImpl *)(v30 & 0xFFFFFFFFFFFFFFFELL);
    if (v30) {
      uint64_t v31 = *(google::protobuf::internal::ArenaImpl **)v31;
    }
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 192), v29, v31);
    if ((v13 & 0x40) == 0)
    {
LABEL_21:
      if ((v13 & 0x80) == 0) {
        goto LABEL_47;
      }
      goto LABEL_44;
    }
    goto LABEL_41;
  }
LABEL_35:
  uint64_t v26 = (long long *)(*((void *)a2 + 23) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 0x10u;
  uint64_t v27 = *((void *)this + 1);
  uint64_t v28 = (google::protobuf::internal::ArenaImpl *)(v27 & 0xFFFFFFFFFFFFFFFELL);
  if (v27) {
    uint64_t v28 = *(google::protobuf::internal::ArenaImpl **)v28;
  }
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 184), v26, v28);
  if ((v13 & 0x20) != 0) {
    goto LABEL_38;
  }
LABEL_20:
  if ((v13 & 0x40) == 0) {
    goto LABEL_21;
  }
LABEL_41:
  int v32 = (long long *)(*((void *)a2 + 25) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 0x40u;
  uint64_t v33 = *((void *)this + 1);
  uint64_t v34 = (google::protobuf::internal::ArenaImpl *)(v33 & 0xFFFFFFFFFFFFFFFELL);
  if (v33) {
    uint64_t v34 = *(google::protobuf::internal::ArenaImpl **)v34;
  }
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 200), v32, v34);
  if ((v13 & 0x80) != 0)
  {
LABEL_44:
    int v35 = (long long *)(*((void *)a2 + 26) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 0x80u;
    uint64_t v36 = *((void *)this + 1);
    uint64_t v37 = (google::protobuf::internal::ArenaImpl *)(v36 & 0xFFFFFFFFFFFFFFFELL);
    if (v36) {
      uint64_t v37 = *(google::protobuf::internal::ArenaImpl **)v37;
    }
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 208), v35, v37);
  }
LABEL_47:
  if ((v13 & 0xFF00) == 0) {
    goto LABEL_58;
  }
  if ((v13 & 0x100) != 0)
  {
    uint64_t v40 = (long long *)(*((void *)a2 + 27) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 0x100u;
    uint64_t v41 = *((void *)this + 1);
    int v42 = (google::protobuf::internal::ArenaImpl *)(v41 & 0xFFFFFFFFFFFFFFFELL);
    if (v41) {
      int v42 = *(google::protobuf::internal::ArenaImpl **)v42;
    }
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 216), v40, v42);
    if ((v13 & 0x200) == 0)
    {
LABEL_50:
      if ((v13 & 0x400) == 0) {
        goto LABEL_51;
      }
      goto LABEL_97;
    }
  }
  else if ((v13 & 0x200) == 0)
  {
    goto LABEL_50;
  }
  *((_DWORD *)this + 5google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = *((_DWORD *)a2 + 56);
  if ((v13 & 0x400) == 0)
  {
LABEL_51:
    if ((v13 & 0x800) == 0) {
      goto LABEL_52;
    }
    goto LABEL_98;
  }
LABEL_97:
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  if ((v13 & 0x800) == 0)
  {
LABEL_52:
    if ((v13 & 0x1000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_99;
  }
LABEL_98:
  *((void *)this + 29) = *((void *)a2 + 29);
  if ((v13 & 0x1000) == 0)
  {
LABEL_53:
    if ((v13 & 0x2000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_100;
  }
LABEL_99:
  *((_DWORD *)this + 6std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 60);
  if ((v13 & 0x2000) == 0)
  {
LABEL_54:
    if ((v13 & 0x4000) == 0) {
      goto LABEL_55;
    }
LABEL_101:
    *((unsigned char *)this + 245) = *((unsigned char *)a2 + 245);
    if ((v13 & 0x8000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
LABEL_100:
  *((unsigned char *)this + 244) = *((unsigned char *)a2 + 244);
  if ((v13 & 0x4000) != 0) {
    goto LABEL_101;
  }
LABEL_55:
  if ((v13 & 0x8000) != 0) {
LABEL_56:
  }
    *((unsigned char *)this + 24google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = *((unsigned char *)a2 + 246);
LABEL_57:
  *((_DWORD *)this + 10) |= v13;
LABEL_58:
  if ((v13 & 0xFF0000) == 0) {
    goto LABEL_69;
  }
  if ((v13 & 0x10000) != 0)
  {
    *((unsigned char *)this + 247) = *((unsigned char *)a2 + 247);
    if ((v13 & 0x20000) == 0)
    {
LABEL_61:
      if ((v13 & 0x40000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_105;
    }
  }
  else if ((v13 & 0x20000) == 0)
  {
    goto LABEL_61;
  }
  *((unsigned char *)this + 248) = *((unsigned char *)a2 + 248);
  if ((v13 & 0x40000) == 0)
  {
LABEL_62:
    if ((v13 & 0x80000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_106;
  }
LABEL_105:
  *((unsigned char *)this + 249) = *((unsigned char *)a2 + 249);
  if ((v13 & 0x80000) == 0)
  {
LABEL_63:
    if ((v13 & 0x100000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_107;
  }
LABEL_106:
  *((unsigned char *)this + 25std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *((unsigned char *)a2 + 250);
  if ((v13 & 0x100000) == 0)
  {
LABEL_64:
    if ((v13 & 0x200000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_108;
  }
LABEL_107:
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  if ((v13 & 0x200000) == 0)
  {
LABEL_65:
    if ((v13 & 0x400000) == 0) {
      goto LABEL_66;
    }
LABEL_109:
    *((void *)this + 33) = *((void *)a2 + 33);
    if ((v13 & 0x800000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
LABEL_108:
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  if ((v13 & 0x400000) != 0) {
    goto LABEL_109;
  }
LABEL_66:
  if ((v13 & 0x800000) != 0) {
LABEL_67:
  }
    *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
LABEL_68:
  *((_DWORD *)this + 10) |= v13;
LABEL_69:
  if (!HIBYTE(v13)) {
    goto LABEL_79;
  }
  if ((v13 & 0x1000000) != 0)
  {
    *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
    if ((v13 & 0x2000000) == 0)
    {
LABEL_72:
      if ((v13 & 0x4000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_121;
    }
  }
  else if ((v13 & 0x2000000) == 0)
  {
    goto LABEL_72;
  }
  *((_DWORD *)this + 7std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 70);
  if ((v13 & 0x4000000) == 0)
  {
LABEL_73:
    if ((v13 & 0x8000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_122;
  }
LABEL_121:
  *((_DWORD *)this + 7google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = *((_DWORD *)a2 + 71);
  if ((v13 & 0x8000000) == 0)
  {
LABEL_74:
    if ((v13 & 0x10000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_123;
  }
LABEL_122:
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  if ((v13 & 0x10000000) == 0)
  {
LABEL_75:
    if ((v13 & 0x20000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_124;
  }
LABEL_123:
  *((_DWORD *)this + 73) = *((_DWORD *)a2 + 73);
  if ((v13 & 0x20000000) == 0)
  {
LABEL_76:
    if ((v13 & 0x40000000) == 0) {
      goto LABEL_77;
    }
LABEL_125:
    *((_DWORD *)this + 75) = *((_DWORD *)a2 + 75);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_78;
    }
LABEL_126:
    *((_DWORD *)this + 7google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = *((_DWORD *)a2 + 76);
    goto LABEL_78;
  }
LABEL_124:
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  if ((v13 & 0x40000000) != 0) {
    goto LABEL_125;
  }
LABEL_77:
  if ((v13 & 0x80000000) != 0) {
    goto LABEL_126;
  }
LABEL_78:
  *((_DWORD *)this + 10) |= v13;
LABEL_79:
  int v38 = *((_DWORD *)a2 + 11);
  if (!(_BYTE)v38) {
    goto LABEL_90;
  }
  if (v38)
  {
    *((unsigned char *)this + 308) = *((unsigned char *)a2 + 308);
    if ((v38 & 2) == 0)
    {
LABEL_82:
      if ((v38 & 4) == 0) {
        goto LABEL_83;
      }
      goto LABEL_113;
    }
  }
  else if ((v38 & 2) == 0)
  {
    goto LABEL_82;
  }
  *((unsigned char *)this + 309) = *((unsigned char *)a2 + 309);
  if ((v38 & 4) == 0)
  {
LABEL_83:
    if ((v38 & 8) == 0) {
      goto LABEL_84;
    }
    goto LABEL_114;
  }
LABEL_113:
  *((unsigned char *)this + 31std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *((unsigned char *)a2 + 310);
  if ((v38 & 8) == 0)
  {
LABEL_84:
    if ((v38 & 0x10) == 0) {
      goto LABEL_85;
    }
    goto LABEL_115;
  }
LABEL_114:
  *((unsigned char *)this + 31google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = *((unsigned char *)a2 + 311);
  if ((v38 & 0x10) == 0)
  {
LABEL_85:
    if ((v38 & 0x20) == 0) {
      goto LABEL_86;
    }
    goto LABEL_116;
  }
LABEL_115:
  *((unsigned char *)this + 312) = *((unsigned char *)a2 + 312);
  if ((v38 & 0x20) == 0)
  {
LABEL_86:
    if ((v38 & 0x40) == 0) {
      goto LABEL_87;
    }
LABEL_117:
    *((_DWORD *)this + 79) = *((_DWORD *)a2 + 79);
    if ((v38 & 0x80) == 0) {
      goto LABEL_89;
    }
    goto LABEL_88;
  }
LABEL_116:
  *((unsigned char *)this + 313) = *((unsigned char *)a2 + 313);
  if ((v38 & 0x40) != 0) {
    goto LABEL_117;
  }
LABEL_87:
  if ((v38 & 0x80) != 0) {
LABEL_88:
  }
    *((_DWORD *)this + 8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 80);
LABEL_89:
  *((_DWORD *)this + 11) |= v38;
LABEL_90:
  if ((v38 & 0x100) != 0)
  {
    int v39 = *((_DWORD *)a2 + 81);
    *((_DWORD *)this + 11) |= 0x100u;
    *((_DWORD *)this + 8google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v39;
  }
}

void sub_25BFD1AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::TrainerSpec::IsInitialized(sentencepiece::TrainerSpec *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::TrainerSpec *)((char *)this + 16));
}

void *sentencepiece::TrainerSpec::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.TrainerSpec");
}

uint64_t sentencepiece::NormalizerSpec::NormalizerSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270972610;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = &unk_2709726B0;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 24, a2);
  *(void *)(a1 + 48) = 0;
  if (atomic_load_explicit(scc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto);
  }
  *(void *)(a1 + 5google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *(void *)(a1 + 64) = &google::protobuf::internal::fixed_address_empty_string;
  *(void *)(a1 + 72) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(a1 + 8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 16843008;
  return a1;
}

void sub_25BFD1BB4(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::NormalizerSpec::~NormalizerSpec(sentencepiece::NormalizerSpec *this)
{
}

{
  uint64_t vars8;

  sentencepiece::NormalizerSpec::~NormalizerSpec(this);

  JUMPOUT(0x26117ABD0);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::NormalizerSpec::SharedDtor(sentencepiece::NormalizerSpec *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1972);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  if (*((uint64_t **)this + 7) != &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v5 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::NormalizerSpec *)((char *)this + 56));
    uint64_t v6 = v5;
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    MEMORY[0x26117ABD0](v6, 0x1012C40EC159624);
  }
  uint64_t result = (sentencepiece::NormalizerSpec *)((char *)this + 64);
  if (*((uint64_t **)this + 8) != &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v8 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    uint64_t v9 = v8;
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    uint64_t result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x26117ABD0](v9, 0x1012C40EC159624);
  }
  uint64_t v11 = (uint64_t *)*((void *)this + 9);
  int v10 = (sentencepiece::NormalizerSpec *)((char *)this + 72);
  if (v11 != &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v12 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v10);
    uint64_t v13 = v12;
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x26117ABD0](v13, 0x1012C40EC159624);
  }
  return result;
}

void sub_25BFD1D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'sentencepiece::NormalizerSpec::~NormalizerSpec(sentencepiece::NormalizerSpec *this)
{
}

{
  uint64_t vars8;

  sentencepiece::NormalizerSpec::~NormalizerSpec((sentencepiece::NormalizerSpec *)((char *)this - 16));

  JUMPOUT(0x26117ABD0);
}

void sentencepiece::NormalizerSpec::Clear(sentencepiece::NormalizerSpec *this)
{
  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::NormalizerSpec *)((char *)this + 24));
  int v2 = *((_DWORD *)this + 12);
  if ((v2 & 7) != 0)
  {
    if ((v2 & 1) == 0)
    {
      if ((v2 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      unint64_t v4 = *((void *)this + 8) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(unsigned char **)unint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        if ((v2 & 4) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v4 = 0;
        *(unsigned char *)(v4 + 23) = 0;
        if ((v2 & 4) == 0) {
          goto LABEL_17;
        }
      }
      goto LABEL_14;
    }
    unint64_t v3 = *((void *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_10;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
      if ((v2 & 2) != 0) {
        goto LABEL_10;
      }
    }
LABEL_4:
    if ((v2 & 4) == 0) {
      goto LABEL_17;
    }
LABEL_14:
    unint64_t v5 = *((void *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
LABEL_17:
  if ((v2 & 0x78) != 0) {
    *((_DWORD *)this + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 16843008;
  }
  *((_DWORD *)this + 12) = 0;
  uint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(unsigned char **)(v7 + 8) = 0;
      *(void *)(v7 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0;
    }
    else
    {
      *(unsigned char *)(v7 + 8) = 0;
      *(unsigned char *)(v7 + 3google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::NormalizerSpec::_InternalParse(sentencepiece::NormalizerSpec *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  int v42 = a2;
  int v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v42, a3[11].i32[1]) & 1) == 0)
  {
    unint64_t v7 = (void *)((char *)this + 8);
    while (1)
    {
      uint64_t v8 = (google::protobuf::internal *)((char *)v42 + 1);
      unsigned int v9 = *(unsigned __int8 *)v42;
      if (*(char *)v42 < 0)
      {
        unsigned int v10 = v9 + (*(unsigned __int8 *)v8 << 7);
        unsigned int v9 = v10 - 128;
        if (*(char *)v8 < 0)
        {
          TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v42, (const char *)(v10 - 128));
          int v42 = TagFallback;
          if (!TagFallback) {
            goto LABEL_67;
          }
          uint64_t v8 = TagFallback;
          unsigned int v9 = v18;
          goto LABEL_8;
        }
        uint64_t v8 = (google::protobuf::internal *)((char *)v42 + 2);
      }
      int v42 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10) {
            goto LABEL_48;
          }
          *((_DWORD *)this + 12) |= 1u;
          uint64_t v11 = *((void *)this + 1);
          uint64_t v12 = (google::protobuf::internal::ArenaImpl *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if (v11) {
            uint64_t v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          }
          uint64_t v13 = (uint64_t **)((char *)this + 56);
          goto LABEL_44;
        case 2u:
          if (v9 != 18) {
            goto LABEL_48;
          }
          *((_DWORD *)this + 12) |= 2u;
          uint64_t v19 = *((void *)this + 1);
          uint64_t v12 = (google::protobuf::internal::ArenaImpl *)(v19 & 0xFFFFFFFFFFFFFFFELL);
          if (v19) {
            uint64_t v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          }
          uint64_t v13 = (uint64_t **)((char *)this + 64);
          goto LABEL_44;
        case 3u:
          if (v9 != 24) {
            goto LABEL_48;
          }
          v5 |= 0x10u;
          int v20 = (google::protobuf::internal *)((char *)v8 + 1);
          unint64_t v21 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0) {
            goto LABEL_29;
          }
          int v22 = *(char *)v20;
          unint64_t v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            uint64_t v36 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v21);
            int v42 = v36;
            *((unsigned char *)this + 8google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v37 != 0;
            if (!v36) {
              goto LABEL_67;
            }
          }
          else
          {
            int v20 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_29:
            int v42 = v20;
            *((unsigned char *)this + 8google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v21 != 0;
          }
          goto LABEL_46;
        case 4u:
          if (v9 != 32) {
            goto LABEL_48;
          }
          v5 |= 0x20u;
          unsigned int v23 = (google::protobuf::internal *)((char *)v8 + 1);
          unint64_t v24 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          int v25 = *(char *)v23;
          unint64_t v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            int v38 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v24);
            int v42 = v38;
            *((unsigned char *)this + 82) = v39 != 0;
            if (!v38) {
              goto LABEL_67;
            }
          }
          else
          {
            unsigned int v23 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_34:
            int v42 = v23;
            *((unsigned char *)this + 82) = v24 != 0;
          }
          goto LABEL_46;
        case 5u:
          if (v9 != 40) {
            goto LABEL_48;
          }
          v5 |= 0x40u;
          uint64_t v26 = (google::protobuf::internal *)((char *)v8 + 1);
          unint64_t v27 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0) {
            goto LABEL_39;
          }
          int v28 = *(char *)v26;
          unint64_t v27 = v27 + (v28 << 7) - 128;
          if (v28 < 0)
          {
            uint64_t v40 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v27);
            int v42 = v40;
            *((unsigned char *)this + 83) = v41 != 0;
            if (!v40) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v26 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_39:
            int v42 = v26;
            *((unsigned char *)this + 83) = v27 != 0;
          }
          goto LABEL_46;
        case 6u:
          if (v9 != 50) {
            goto LABEL_48;
          }
          *((_DWORD *)this + 12) |= 4u;
          uint64_t v29 = *((void *)this + 1);
          uint64_t v12 = (google::protobuf::internal::ArenaImpl *)(v29 & 0xFFFFFFFFFFFFFFFELL);
          if (v29) {
            uint64_t v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          }
          uint64_t v13 = (uint64_t **)((char *)this + 72);
LABEL_44:
          uint64_t v30 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v13, v12);
          uint64_t v31 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v30, (std::string::value_type *)v42, (uint64_t)a3);
          goto LABEL_45;
        default:
          if (v9 >> 3 == 200 && v9 == 64)
          {
            v5 |= 8u;
            char v14 = (google::protobuf::internal *)((char *)v8 + 1);
            unint64_t v15 = *(unsigned __int8 *)v8;
            if ((*(char *)v8 & 0x80000000) == 0) {
              goto LABEL_18;
            }
            int v16 = *(char *)v14;
            unint64_t v15 = v15 + (v16 << 7) - 128;
            if ((v16 & 0x80000000) == 0)
            {
              char v14 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_18:
              int v42 = v14;
              *((unsigned char *)this + 8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v15 != 0;
              goto LABEL_46;
            }
            uint64_t v34 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v15);
            int v42 = v34;
            *((unsigned char *)this + 8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v35 != 0;
            if (!v34) {
              goto LABEL_67;
            }
          }
          else
          {
LABEL_48:
            if (v9) {
              BOOL v32 = (v9 & 7) == 4;
            }
            else {
              BOOL v32 = 1;
            }
            if (v32)
            {
              a3[10].i32[0] = v9 - 1;
              goto LABEL_2;
            }
            if (v9 < 0x648)
            {
              if (*v7)
              {
                uint64_t v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
              }
              else
              {
                uint64_t v33 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
                uint64_t v8 = v42;
              }
              uint64_t v31 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v33, v8, (google::protobuf::internal::ParseContext *)a3);
            }
            else
            {
              uint64_t v31 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::NormalizerSpec *)((char *)this + 24), v9, v8, (uint64_t)&sentencepiece::_NormalizerSpec_default_instance_, (unint64_t *)this + 1, a3);
            }
LABEL_45:
            int v42 = v31;
            if (!v31)
            {
LABEL_67:
              int v42 = 0;
              goto LABEL_2;
            }
          }
LABEL_46:
          if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v42, a3[11].i32[1]))goto LABEL_2; {
          break;
          }
      }
    }
  }
LABEL_2:
  *((_DWORD *)this + 12) |= v5;
  return v42;
}

unsigned __int8 *sentencepiece::NormalizerSpec::_InternalSerialize(sentencepiece::NormalizerSpec *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 12);
  if (v6)
  {
    unint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, (const void **)(*((void *)this + 7) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, (const void **)(*((void *)this + 8) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_11:
  if (*(void *)a3 <= (unint64_t)v4) {
    unint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v7 = *((unsigned char *)this + 81);
  *unint64_t v4 = 24;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_14:
  if (*(void *)a3 <= (unint64_t)v4) {
    unint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v8 = *((unsigned char *)this + 82);
  *unint64_t v4 = 32;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_17:
  if (*(void *)a3 <= (unint64_t)v4) {
    unint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v9 = *((unsigned char *)this + 83);
  *unint64_t v4 = 40;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
LABEL_20:
  unint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, (const void **)(*((void *)this + 9) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0) {
    goto LABEL_24;
  }
LABEL_21:
  if (*(void *)a3 <= (unint64_t)v4) {
    unint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v10 = *((unsigned char *)this + 80);
  *(_WORD *)unint64_t v4 = 3264;
  v4[2] = v10;
  v4 += 3;
LABEL_24:
  uint64_t v11 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::NormalizerSpec *)((char *)this + 24), 201, 0x20000000, (unsigned __int8 *)v4, a3);
  uint64_t v12 = v11;
  uint64_t v13 = *((void *)this + 1);
  if ((v13 & 1) == 0) {
    return v12;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 31) < 0)
  {
    int v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    int v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if (*(void *)a3 - (void)v11 >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v11, v16, (int)v17);
    v12 += v18;
    return v12;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v16, v17, v11);
}

uint64_t sentencepiece::NormalizerSpec::ByteSizeLong(sentencepiece::NormalizerSpec *this)
{
  uint64_t result = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::NormalizerSpec *)((char *)this + 24));
  int v3 = *((_DWORD *)this + 12);
  if ((v3 & 0x7F) == 0) {
    goto LABEL_17;
  }
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_22:
    unint64_t v12 = *((void *)this + 8) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v14 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      uint64_t v14 = v13;
    }
    result += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  unint64_t v9 = *((void *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  uint64_t v11 = *(void *)(v9 + 8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v10;
  }
  result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 2) != 0) {
    goto LABEL_22;
  }
LABEL_4:
  if ((v3 & 4) != 0)
  {
LABEL_5:
    unint64_t v4 = *((void *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v6 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = v5;
    }
    result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v7 = result + 3;
  if ((v3 & 8) == 0) {
    uint64_t v7 = result;
  }
  if ((v3 & 0x10) != 0) {
    v7 += 2;
  }
  if ((v3 & 0x20) != 0) {
    v7 += 2;
  }
  if ((v3 & 0x40) != 0) {
    uint64_t result = v7 + 2;
  }
  else {
    uint64_t result = v7;
  }
LABEL_17:
  uint64_t v8 = *((void *)this + 1);
  if (v8)
  {
    unint64_t v15 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v15 + 31) < 0) {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 31);
    }
    result += v16;
  }
  *((_DWORD *)this + 13) = result;
  return result;
}

void sentencepiece::NormalizerSpec::CheckTypeAndMergeFrom(sentencepiece::NormalizerSpec *this, const google::protobuf::MessageLite *lpsrc)
{
  sentencepiece::NormalizerSpec::MergeFrom(this, lpsrc);
}

void sentencepiece::NormalizerSpec::MergeFrom(sentencepiece::NormalizerSpec *this, const sentencepiece::NormalizerSpec *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2246);
    unint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::NormalizerSpec *)((char *)this + 24), (const sentencepiece::NormalizerSpec *)((char *)a2 + 24));
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *((void *)this + 1);
    if (v8) {
      unint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unint64_t v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *((_DWORD *)a2 + 12);
  if ((v13 & 0x7F) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*((void *)a2 + 7) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 12) |= 1u;
      uint64_t v15 = *((void *)this + 1);
      uint64_t v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        uint64_t v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      }
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::NormalizerSpec *)((char *)this + 56), v14, v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0) {
          goto LABEL_17;
        }
        goto LABEL_30;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    uint64_t v17 = (long long *)(*((void *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 12) |= 2u;
    uint64_t v18 = *((void *)this + 1);
    uint64_t v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if (v18) {
      uint64_t v19 = *(google::protobuf::internal::ArenaImpl **)v19;
    }
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::NormalizerSpec *)((char *)this + 64), v17, v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0) {
        goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_30:
    int v20 = (long long *)(*((void *)a2 + 9) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 12) |= 4u;
    uint64_t v21 = *((void *)this + 1);
    int v22 = (google::protobuf::internal::ArenaImpl *)(v21 & 0xFFFFFFFFFFFFFFFELL);
    if (v21) {
      int v22 = *(google::protobuf::internal::ArenaImpl **)v22;
    }
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::NormalizerSpec *)((char *)this + 72), v20, v22);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_34;
    }
LABEL_33:
    *((unsigned char *)this + 8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *((unsigned char *)a2 + 80);
    if ((v13 & 0x10) == 0)
    {
LABEL_19:
      if ((v13 & 0x20) == 0) {
        goto LABEL_20;
      }
      goto LABEL_35;
    }
LABEL_34:
    *((unsigned char *)this + 8google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = *((unsigned char *)a2 + 81);
    if ((v13 & 0x20) == 0)
    {
LABEL_20:
      if ((v13 & 0x40) == 0)
      {
LABEL_22:
        *((_DWORD *)this + 12) |= v13;
        return;
      }
LABEL_21:
      *((unsigned char *)this + 83) = *((unsigned char *)a2 + 83);
      goto LABEL_22;
    }
LABEL_35:
    *((unsigned char *)this + 82) = *((unsigned char *)a2 + 82);
    if ((v13 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
}

void sub_25BFD28F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::NormalizerSpec::IsInitialized(sentencepiece::NormalizerSpec *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::NormalizerSpec *)((char *)this + 24));
}

void *sentencepiece::NormalizerSpec::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.NormalizerSpec");
}

void *sentencepiece::SelfTestData_Sample::SelfTestData_Sample(void *a1, uint64_t a2)
{
  *a1 = &unk_270972770;
  a1[1] = a2;
  a1[2] = 0;
  if (atomic_load_explicit(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto);
  }
  a1[3] = &google::protobuf::internal::fixed_address_empty_string;
  a1[4] = &google::protobuf::internal::fixed_address_empty_string;
  return a1;
}

void sentencepiece::SelfTestData_Sample::~SelfTestData_Sample(sentencepiece::SelfTestData_Sample *this)
{
}

{
  uint64_t vars8;

  sentencepiece::SelfTestData_Sample::~SelfTestData_Sample(this);

  JUMPOUT(0x26117ABD0);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::SelfTestData_Sample::SharedDtor(sentencepiece::SelfTestData_Sample *this)
{
  uint64_t v2 = *((void *)this + 1);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2362);
    unint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  uint64_t result = (sentencepiece::SelfTestData_Sample *)((char *)this + 24);
  if (*((uint64_t **)this + 3) != &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v6 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    uint64_t result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x26117ABD0](v7, 0x1012C40EC159624);
  }
  unint64_t v9 = (uint64_t *)*((void *)this + 4);
  uint64_t v8 = (sentencepiece::SelfTestData_Sample *)((char *)this + 32);
  if (v9 != &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v10 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v8);
    uint64_t v11 = v10;
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x26117ABD0](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_25BFD2AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SelfTestData_Sample::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 16);
  if ((v1 & 3) != 0)
  {
    if (v1)
    {
      unint64_t v2 = *(void *)(this + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v2 + 23) < 0)
      {
        **(unsigned char **)unint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
        if ((v1 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)unint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    unint64_t v3 = *(void *)(this + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  *(_DWORD *)(this + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0;
  uint64_t v4 = *(void *)(this + 8);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(unsigned char **)(v5 + 8) = 0;
      *(void *)(v5 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 8) = 0;
      *(unsigned char *)(v5 + 3google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 0;
    }
  }
  return this;
}

google::protobuf::internal *sentencepiece::SelfTestData_Sample::_InternalParse(sentencepiece::SelfTestData_Sample *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v21 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    uint64_t v6 = (void *)((char *)this + 8);
    while (1)
    {
      uint64_t v7 = (google::protobuf::internal *)((char *)v21 + 1);
      unsigned int v8 = *(unsigned __int8 *)v21;
      if ((*(char *)v21 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v9 = v8 + (*(unsigned __int8 *)v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((*(char *)v7 & 0x80000000) == 0) {
        break;
      }
      TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, (const char *)(v9 - 128));
      uint64_t v21 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      uint64_t v7 = TagFallback;
      unsigned int v8 = v20;
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *((_DWORD *)this + 4) |= 2u;
          uint64_t v14 = *((void *)this + 1);
          uint64_t v15 = (google::protobuf::internal::ArenaImpl *)(v14 & 0xFFFFFFFFFFFFFFFELL);
          if (v14) {
            uint64_t v15 = *(google::protobuf::internal::ArenaImpl **)v15;
          }
          uint64_t v16 = (uint64_t **)((char *)this + 32);
          goto LABEL_27;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *((_DWORD *)this + 4) |= 1u;
        uint64_t v17 = *((void *)this + 1);
        uint64_t v15 = (google::protobuf::internal::ArenaImpl *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if (v17) {
          uint64_t v15 = *(google::protobuf::internal::ArenaImpl **)v15;
        }
        uint64_t v16 = (uint64_t **)((char *)this + 24);
LABEL_27:
        uint64_t v18 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v16, v15);
        int v13 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v18, (std::string::value_type *)v21, (uint64_t)a3);
        goto LABEL_28;
      }
      if (v8) {
        BOOL v11 = (v8 & 7) == 4;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {
        *((_DWORD *)a3 + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v8 - 1;
        return v21;
      }
      if (*v6)
      {
        char v12 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        char v12 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
        uint64_t v7 = v21;
      }
      int v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v12, v7, a3);
LABEL_28:
      uint64_t v21 = v13;
      if (!v13) {
        return 0;
      }
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23))) {
        return v21;
      }
    }
    uint64_t v7 = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_7:
    uint64_t v21 = v7;
    goto LABEL_8;
  }
  return v21;
}

unsigned __int8 *sentencepiece::SelfTestData_Sample::_InternalSerialize(sentencepiece::SelfTestData_Sample *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = (unsigned __int8 *)a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, (const void **)(*((void *)this + 3) & 0xFFFFFFFFFFFFFFFELL), a2);
  }
  if ((v6 & 2) != 0) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, (const void **)(*((void *)this + 4) & 0xFFFFFFFFFFFFFFFELL), (char *)v4);
  }
  uint64_t v7 = *((void *)this + 1);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 31) < 0)
  {
    uint64_t v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    uint64_t v10 = (void *)(v9 + 8);
    LODWORD(v1google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*(void *)a3 - (void)v4 >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v10, v11, v4);
}

uint64_t sentencepiece::SelfTestData_Sample::ByteSizeLong(sentencepiece::SelfTestData_Sample *this)
{
  int v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *((void *)this + 3) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *((void *)this + 4) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void sentencepiece::SelfTestData_Sample::CheckTypeAndMergeFrom(sentencepiece::SelfTestData_Sample *this, const google::protobuf::MessageLite *lpsrc)
{
  sentencepiece::SelfTestData_Sample::MergeFrom(this, lpsrc);
}

void sentencepiece::SelfTestData_Sample::MergeFrom(sentencepiece::SelfTestData_Sample *this, const sentencepiece::SelfTestData_Sample *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2516);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *((void *)this + 1);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *((_DWORD *)a2 + 4);
  if ((v13 & 3) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*((void *)a2 + 3) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v15 = *((void *)this + 1);
      uint64_t v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        uint64_t v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      }
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SelfTestData_Sample *)((char *)this + 24), v14, v16);
    }
    if ((v13 & 2) != 0)
    {
      uint64_t v17 = (long long *)(*((void *)a2 + 4) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 4) |= 2u;
      uint64_t v18 = *((void *)this + 1);
      uint64_t v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if (v18) {
        uint64_t v19 = *(google::protobuf::internal::ArenaImpl **)v19;
      }
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SelfTestData_Sample *)((char *)this + 32), v17, v19);
    }
  }
}

void sub_25BFD30F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SelfTestData_Sample::IsInitialized(sentencepiece::SelfTestData_Sample *this)
{
  return 1;
}

void *sentencepiece::SelfTestData_Sample::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SelfTestData.Sample");
}

uint64_t sentencepiece::SelfTestData::SelfTestData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2709724A0;
  *(void *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(void *)(a1 + 4std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 5google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (atomic_load_explicit(scc_info_SelfTestData_sentencepiece_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SelfTestData_sentencepiece_5fmodel_2eproto);
  }
  return a1;
}

void sub_25BFD31A8(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SelfTestData::~SelfTestData(sentencepiece::SelfTestData *this)
{
  unint64_t v3 = (uint64_t *)((char *)this + 8);
  uint64_t v2 = *((void *)this + 1);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    if (!*v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2589);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  google::protobuf::internal::InternalMetadata::Delete<std::string>(v3);
  google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 5);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::SelfTestData *)((char *)this + 16));
}

{
  uint64_t vars8;

  sentencepiece::SelfTestData::~SelfTestData(this);

  JUMPOUT(0x26117ABD0);
}

void sub_25BFD3264(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

void sentencepiece::SelfTestData::Clear(sentencepiece::SelfTestData *this)
{
  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::SelfTestData *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t)this + 40);
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 31) < 0)
    {
      **(unsigned char **)(v3 + 8) = 0;
      *(void *)(v3 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0;
    }
    else
    {
      *(unsigned char *)(v3 + 8) = 0;
      *(unsigned char *)(v3 + 3google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::SelfTestData::_InternalParse(sentencepiece::SelfTestData *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  char v23 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    uint64_t v5 = (void *)((char *)this + 8);
    while (1)
    {
      char v6 = (google::protobuf::internal *)((char *)v23 + 1);
      unsigned int v7 = *(unsigned __int8 *)v23;
      if ((*(char *)v23 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v8 = v7 + (*(unsigned __int8 *)v6 << 7);
      unsigned int v7 = v8 - 128;
      if ((*(char *)v6 & 0x80000000) == 0) {
        break;
      }
      TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, (const char *)(v8 - 128));
      char v23 = TagFallback;
      if (!TagFallback) {
        return 0;
      }
      char v6 = TagFallback;
      unsigned int v7 = v21;
LABEL_7:
      if (v7 == 10)
      {
        unint64_t v11 = (char *)v6 - 1;
        while (1)
        {
          std::string::size_type v12 = (google::protobuf::internal *)(v11 + 1);
          char v23 = (google::protobuf::internal *)(v11 + 1);
          int v13 = (int *)*((void *)this + 7);
          if (!v13) {
            break;
          }
          uint64_t v14 = *((int *)this + 12);
          int v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *((_DWORD *)this + 13))
            {
LABEL_20:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 10, v15 + 1);
              int v13 = (int *)*((void *)this + 7);
              int v15 = *v13;
            }
            int *v13 = v15 + 1;
            uint64_t v16 = (sentencepiece::SelfTestData_Sample *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(*((void *)this + 5));
            uint64_t v17 = *((void *)this + 7);
            uint64_t v18 = *((int *)this + 12);
            *((_DWORD *)this + 12) = v18 + 1;
            *(void *)(v17 + 8 * v18 + 8) = v16;
            std::string::size_type v12 = v23;
            goto LABEL_22;
          }
          *((_DWORD *)this + 12) = v14 + 1;
          uint64_t v16 = *(sentencepiece::SelfTestData_Sample **)&v13[2 * v14 + 2];
LABEL_22:
          unint64_t v11 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData_Sample>(a3, v16, v12);
          char v23 = (google::protobuf::internal *)v11;
          if (!v11) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
            goto LABEL_30;
          }
        }
        int v15 = *((_DWORD *)this + 13);
        goto LABEL_20;
      }
      if (v7) {
        BOOL v9 = (v7 & 7) == 4;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        *((_DWORD *)a3 + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v7 - 1;
        return v23;
      }
      if (v7 < 0x640)
      {
        if (*v5)
        {
          uint64_t v19 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          uint64_t v19 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
          char v6 = v23;
        }
        int v10 = google::protobuf::internal::UnknownFieldParse(v7, v19, v6, a3);
      }
      else
      {
        int v10 = google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::SelfTestData *)((char *)this + 16), v7, v6, (uint64_t)&sentencepiece::_SelfTestData_default_instance_, (unint64_t *)this + 1, (int32x2_t *)a3);
      }
      char v23 = (google::protobuf::internal *)v10;
      if (!v10) {
        return 0;
      }
LABEL_30:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)))return v23; {
    }
      }
    char v6 = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
    char v23 = v6;
    goto LABEL_7;
  }
  return v23;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData_Sample>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SelfTestData_Sample *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  unsigned int v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    uint64_t result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (char *)sentencepiece::SelfTestData_Sample::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::SelfTestData::_InternalSerialize(sentencepiece::SelfTestData *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6 = *((_DWORD *)this + 12);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)a2) {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      }
      unsigned int v8 = (sentencepiece::SelfTestData_Sample *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t)this + 40, i);
      *a2 = 10;
      unsigned int v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          int v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v12;
        }
        else
        {
          a2[2] = v11;
          int v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        int v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)sentencepiece::SelfTestData_Sample::_InternalSerialize(v8, (char *)v10, a3);
    }
  }
  int v14 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::SelfTestData *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)a2, a3);
  int v15 = v14;
  uint64_t v16 = *((void *)this + 1);
  if ((v16 & 1) == 0) {
    return v15;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 31) < 0)
  {
    uint64_t v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    uint64_t v19 = (void *)(v18 + 8);
    LODWORD(v2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = *(unsigned __int8 *)(v18 + 31);
  }
  if (*(void *)a3 - (void)v14 >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v14, v19, (int)v20);
    v15 += v21;
    return v15;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v19, v20, v14);
}

uint64_t sentencepiece::SelfTestData::ByteSizeLong(sentencepiece::SelfTestData *this)
{
  uint64_t v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::SelfTestData *)((char *)this + 16));
  uint64_t v3 = *((int *)this + 12);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *((void *)this + 7);
  if (v5) {
    int v6 = (sentencepiece::SelfTestData_Sample **)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      unsigned int v8 = *v6++;
      uint64_t v9 = sentencepiece::SelfTestData_Sample::ByteSizeLong(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t v10 = *((void *)this + 1);
  if (v10)
  {
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = *(void *)(v12 + 16);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
    }
    v4 += v13;
  }
  *((_DWORD *)this + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v4;
  return v4;
}

void sentencepiece::SelfTestData::CheckTypeAndMergeFrom(sentencepiece::SelfTestData *this, const google::protobuf::MessageLite *lpsrc)
{
  sentencepiece::SelfTestData::MergeFrom(this, lpsrc);
}

void sentencepiece::SelfTestData::MergeFrom(sentencepiece::SelfTestData *this, const sentencepiece::SelfTestData *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2724);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::SelfTestData *)((char *)this + 16), (const sentencepiece::SelfTestData *)((char *)a2 + 16));
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *((void *)this + 1);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unsigned int v11 = (const std::string::value_type *)v7;
    }
    else {
      unsigned int v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t)this + 40, (uint64_t)a2 + 40);
}

void sub_25BFD39A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SelfTestData::IsInitialized(sentencepiece::SelfTestData *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::SelfTestData *)((char *)this + 16));
}

void *sentencepiece::SelfTestData::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SelfTestData");
}

void *sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(void *a1, uint64_t a2)
{
  *a1 = &unk_270972BA8;
  a1[1] = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet((uint64_t)(a1 + 2), a2);
  a1[5] = 0;
  if (atomic_load_explicit(scc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto);
  }
  a1[6] = &google::protobuf::internal::fixed_address_empty_string;
  a1[7] = 0x100000000;
  return a1;
}

void sub_25BFD3A54(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto_SentencePiece::~ModelProto_SentencePiece(sentencepiece::ModelProto_SentencePiece *this)
{
}

{
  uint64_t vars8;

  sentencepiece::ModelProto_SentencePiece::~ModelProto_SentencePiece(this);

  JUMPOUT(0x26117ABD0);
}

void sentencepiece::ModelProto_SentencePiece::SharedDtor(sentencepiece::ModelProto_SentencePiece *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2813);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  unint64_t v6 = (uint64_t *)*((void *)this + 6);
  uint64_t v5 = (sentencepiece::ModelProto_SentencePiece *)((char *)this + 48);
  if (v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v7 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v5);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    MEMORY[0x26117ABD0](v8, 0x1012C40EC159624);
  }
}

void sub_25BFD3B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto_SentencePiece::Clear(sentencepiece::ModelProto_SentencePiece *this)
{
  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
  int v2 = *((_DWORD *)this + 10);
  if (v2)
  {
    unint64_t v3 = *((void *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  if ((v2 & 6) != 0) {
    *((void *)this + 7) = 0x100000000;
  }
  *((_DWORD *)this + 1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0;
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(unsigned char **)(v5 + 8) = 0;
      *(void *)(v5 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 8) = 0;
      *(unsigned char *)(v5 + 3google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::ModelProto_SentencePiece::_InternalParse(sentencepiece::ModelProto_SentencePiece *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  unint64_t v27 = a2;
  int v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v27, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)((char *)this + 8);
    while (1)
    {
      uint64_t v8 = (google::protobuf::internal *)((char *)v27 + 1);
      unsigned int v9 = *(unsigned __int8 *)v27;
      if ((*(char *)v27 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v10 = v9 + (*(unsigned __int8 *)v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((*(char *)v8 & 0x80000000) == 0) {
        break;
      }
      TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v27, (const char *)(v10 - 128));
      unint64_t v27 = TagFallback;
      if (!TagFallback) {
        goto LABEL_48;
      }
      uint64_t v8 = TagFallback;
      unsigned int v9 = v23;
LABEL_8:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 24)
        {
          int v15 = (google::protobuf::internal *)((char *)v8 + 1);
          unint64_t v16 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0) {
            goto LABEL_24;
          }
          int v17 = *(char *)v15;
          int v18 = v16 + (v17 << 7);
          unint64_t v16 = (v18 - 128);
          if (v17 < 0)
          {
            unint64_t v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, (v18 - 128));
            if (!v27)
            {
LABEL_48:
              unint64_t v27 = 0;
              goto LABEL_2;
            }
            unint64_t v16 = v25;
          }
          else
          {
            int v15 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_24:
            unint64_t v27 = v15;
          }
          if ((v16 - 1) > 5)
          {
            if (*v7) {
              uint64_t v26 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else {
              uint64_t v26 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
            }
            google::protobuf::internal::WriteVarint(3, v16, v26);
          }
          else
          {
            *((_DWORD *)this + 10) |= 4u;
            *((_DWORD *)this + 15) = v16;
          }
          goto LABEL_38;
        }
      }
      else if (v11 == 2)
      {
        if (v9 == 21)
        {
          v5 |= 2u;
          *((_DWORD *)this + 14) = *(_DWORD *)v8;
          unint64_t v27 = (google::protobuf::internal *)((char *)v8 + 4);
          goto LABEL_38;
        }
      }
      else if (v11 == 1 && v9 == 10)
      {
        *((_DWORD *)this + 10) |= 1u;
        uint64_t v19 = *((void *)this + 1);
        uint64_t v20 = (google::protobuf::internal::ArenaImpl *)(v19 & 0xFFFFFFFFFFFFFFFELL);
        if (v19) {
          uint64_t v20 = *(google::protobuf::internal::ArenaImpl **)v20;
        }
        uint64_t v21 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)this + 6, v20);
        int v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v21, (std::string::value_type *)v27, (uint64_t)a3);
        goto LABEL_37;
      }
      if (v9) {
        BOOL v13 = (v9 & 7) == 4;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        a3[10].i32[0] = v9 - 1;
        goto LABEL_2;
      }
      if (v9 < 0x640)
      {
        if (*v7)
        {
          unint64_t v24 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          unint64_t v24 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
          uint64_t v8 = v27;
        }
        int v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v24, v8, (google::protobuf::internal::ParseContext *)a3);
      }
      else
      {
        int v14 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16), v9, v8, (uint64_t)sentencepiece::_ModelProto_SentencePiece_default_instance_, (unint64_t *)this + 1, a3);
      }
LABEL_37:
      unint64_t v27 = v14;
      if (!v14) {
        goto LABEL_48;
      }
LABEL_38:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v27, a3[11].i32[1]))goto LABEL_2; {
    }
      }
    uint64_t v8 = (google::protobuf::internal *)((char *)v27 + 2);
LABEL_7:
    unint64_t v27 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *((_DWORD *)this + 10) |= v5;
  return v27;
}

unsigned __int8 *sentencepiece::ModelProto_SentencePiece::_InternalSerialize(sentencepiece::ModelProto_SentencePiece *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 10);
  if (v6)
  {
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, (const void **)(*((void *)this + 6) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_18;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  int v7 = *((_DWORD *)this + 14);
  *uint64_t v4 = 21;
  *(_DWORD *)(v4 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v7;
  v4 += 5;
  if ((v6 & 4) != 0)
  {
LABEL_9:
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    }
    unint64_t v8 = *((int *)this + 15);
    *uint64_t v4 = 24;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unint64_t v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v9 | 0x80;
          unint64_t v10 = v9 >> 7;
          ++v4;
          unint64_t v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v4 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v10;
      }
      else
      {
        v4[2] = v9;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
    }
  }
LABEL_18:
  std::string::size_type v12 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)v4, a3);
  BOOL v13 = v12;
  uint64_t v14 = *((void *)this + 1);
  if ((v14 & 1) == 0) {
    return v13;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    int v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    int v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if (*(void *)a3 - (void)v12 >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(v12, v17, (int)v18);
    v13 += v19;
    return v13;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v17, v18, v12);
}

uint64_t sentencepiece::ModelProto_SentencePiece::ByteSizeLong(sentencepiece::ModelProto_SentencePiece *this)
{
  uint64_t result = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
  int v3 = *((_DWORD *)this + 10);
  if ((v3 & 7) != 0)
  {
    if (v3)
    {
      unint64_t v4 = *((void *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0) {
      result += 5;
    }
    if ((v3 & 4) != 0)
    {
      int v7 = *((_DWORD *)this + 15);
      if (v7 < 0) {
        uint64_t v8 = 11;
      }
      else {
        uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      result += v8;
    }
  }
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    result += v11;
  }
  *((_DWORD *)this + 1google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = result;
  return result;
}

void sentencepiece::ModelProto_SentencePiece::CheckTypeAndMergeFrom(sentencepiece::ModelProto_SentencePiece *this, const google::protobuf::MessageLite *lpsrc)
{
  sentencepiece::ModelProto_SentencePiece::MergeFrom(this, lpsrc);
}

void sentencepiece::ModelProto_SentencePiece::MergeFrom(sentencepiece::ModelProto_SentencePiece *this, const sentencepiece::ModelProto_SentencePiece *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3001);
    unint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16), (const sentencepiece::ModelProto_SentencePiece *)((char *)a2 + 16));
  uint64_t v5 = *((void *)a2 + 1);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *((void *)this + 1);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *((_DWORD *)a2 + 10);
  if ((v13 & 7) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*((void *)a2 + 6) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 10) |= 1u;
      uint64_t v15 = *((void *)this + 1);
      unint64_t v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unint64_t v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      }
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::ModelProto_SentencePiece *)((char *)this + 48), v14, v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
        {
LABEL_18:
          *((_DWORD *)this + 10) |= v13;
          return;
        }
LABEL_17:
        *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
        goto LABEL_18;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    if ((v13 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
}

void sub_25BFD4334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelProto_SentencePiece::IsInitialized(sentencepiece::ModelProto_SentencePiece *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
}

void *sentencepiece::ModelProto_SentencePiece::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.ModelProto.SentencePiece");
}

uint64_t sentencepiece::ModelProto::ModelProto(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_2709721D0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = &unk_2709722E8;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 24, a2);
  *(void *)(a1 + 5google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (atomic_load_explicit(scc_info_ModelProto_sentencepiece_5fmodel_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_ModelProto_sentencepiece_5fmodel_2eproto);
  }
  *(_OWORD *)(a1 + 8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 9google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0u;
  return a1;
}

void sub_25BFD4414(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto::~ModelProto(sentencepiece::ModelProto *this)
{
}

{
  uint64_t vars8;

  sentencepiece::ModelProto::~ModelProto(this);

  JUMPOUT(0x26117ABD0);
}

void sentencepiece::ModelProto::SharedDtor(sentencepiece::ModelProto *this)
{
  uint64_t v2 = *((void *)this + 1);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3145);
    unint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  if (this != (sentencepiece::ModelProto *)&sentencepiece::_ModelProto_default_instance_)
  {
    uint64_t v5 = (sentencepiece::TrainerSpec *)*((void *)this + 10);
    if (v5)
    {
      sentencepiece::TrainerSpec::~TrainerSpec(v5);
      MEMORY[0x26117ABD0]();
    }
    unint64_t v6 = (sentencepiece::NormalizerSpec *)*((void *)this + 11);
    if (v6)
    {
      sentencepiece::NormalizerSpec::~NormalizerSpec(v6);
      MEMORY[0x26117ABD0]();
    }
    unint64_t v7 = (sentencepiece::SelfTestData *)*((void *)this + 12);
    if (v7)
    {
      sentencepiece::SelfTestData::~SelfTestData(v7);
      MEMORY[0x26117ABD0]();
    }
    uint64_t v8 = (sentencepiece::NormalizerSpec *)*((void *)this + 13);
    if (v8)
    {
      sentencepiece::NormalizerSpec::~NormalizerSpec(v8);
      MEMORY[0x26117ABD0]();
    }
  }
}

void sub_25BFD4588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'sentencepiece::ModelProto::~ModelProto(sentencepiece::ModelProto *this)
{
}

{
  uint64_t vars8;

  sentencepiece::ModelProto::~ModelProto((sentencepiece::ModelProto *)((char *)this - 16));

  JUMPOUT(0x26117ABD0);
}

void sentencepiece::ModelProto::Clear(sentencepiece::ModelProto *this)
{
  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::ModelProto *)((char *)this + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56);
  int v2 = *((_DWORD *)this + 12);
  if ((v2 & 0xF) != 0)
  {
    if (v2)
    {
      int v3 = (sentencepiece::TrainerSpec *)*((void *)this + 10);
      if (!v3)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3178);
        unint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: trainer_spec_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        int v3 = (sentencepiece::TrainerSpec *)*((void *)this + 10);
      }
      sentencepiece::TrainerSpec::Clear(v3);
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v5 = (sentencepiece::NormalizerSpec *)*((void *)this + 11);
      if (!v5)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3182);
        unint64_t v6 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: normalizer_spec_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v6->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        uint64_t v5 = (sentencepiece::NormalizerSpec *)*((void *)this + 11);
      }
      sentencepiece::NormalizerSpec::Clear(v5);
    }
    if ((v2 & 4) != 0)
    {
      unint64_t v7 = (sentencepiece::SelfTestData *)*((void *)this + 12);
      if (!v7)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3186);
        uint64_t v8 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: self_test_data_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        unint64_t v7 = (sentencepiece::SelfTestData *)*((void *)this + 12);
      }
      sentencepiece::SelfTestData::Clear(v7);
    }
    if ((v2 & 8) != 0)
    {
      char v9 = (sentencepiece::NormalizerSpec *)*((void *)this + 13);
      if (!v9)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3190);
        int v10 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: denormalizer_spec_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        char v9 = (sentencepiece::NormalizerSpec *)*((void *)this + 13);
      }
      sentencepiece::NormalizerSpec::Clear(v9);
    }
  }
  *((_DWORD *)this + 12) = 0;
  uint64_t v11 = *((void *)this + 1);
  if (v11)
  {
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0)
    {
      **(unsigned char **)(v12 + 8) = 0;
      *(void *)(v12 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0;
    }
    else
    {
      *(unsigned char *)(v12 + 8) = 0;
      *(unsigned char *)(v12 + 3google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 0;
    }
  }
}

void sub_25BFD47D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *sentencepiece::ModelProto::_InternalParse(sentencepiece::ModelProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v30 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    unint64_t v6 = (void *)((char *)this + 8);
    while (2)
    {
      unint64_t v7 = (google::protobuf::internal *)((char *)v30 + 1);
      unsigned int v8 = *(unsigned __int8 *)v30;
      if (*(char *)v30 < 0)
      {
        unsigned int v9 = v8 + (*(unsigned __int8 *)v7 << 7);
        unsigned int v8 = v9 - 128;
        if (*(char *)v7 < 0)
        {
          TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, (const char *)(v9 - 128));
          uint64_t v30 = TagFallback;
          if (!TagFallback) {
            return 0;
          }
          unint64_t v7 = TagFallback;
          unsigned int v8 = v28;
LABEL_8:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10) {
                goto LABEL_49;
              }
              int v10 = (char *)v7 - 1;
              break;
            case 2u:
              if (v8 != 18) {
                goto LABEL_49;
              }
              *((_DWORD *)this + 12) |= 1u;
              uint64_t v18 = (sentencepiece::TrainerSpec *)*((void *)this + 10);
              if (!v18)
              {
                uint64_t v19 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if (*v6) {
                  uint64_t v19 = (void *)*v19;
                }
                uint64_t v18 = (sentencepiece::TrainerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>((uint64_t)v19);
                *((void *)this + 1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v18;
                unint64_t v7 = v30;
              }
              uint64_t v20 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::TrainerSpec>(a3, v18, v7);
              goto LABEL_46;
            case 3u:
              if (v8 != 26) {
                goto LABEL_49;
              }
              *((_DWORD *)this + 12) |= 2u;
              uint64_t v21 = (sentencepiece::NormalizerSpec *)*((void *)this + 11);
              if (v21) {
                goto LABEL_45;
              }
              int v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if (*v6) {
                int v22 = (void *)*v22;
              }
              uint64_t v21 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v22);
              *((void *)this + 1google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v21;
              goto LABEL_44;
            case 4u:
              if (v8 != 34) {
                goto LABEL_49;
              }
              *((_DWORD *)this + 12) |= 4u;
              unsigned int v23 = (sentencepiece::SelfTestData *)*((void *)this + 12);
              if (!v23)
              {
                unint64_t v24 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if (*v6) {
                  unint64_t v24 = (void *)*v24;
                }
                unsigned int v23 = (sentencepiece::SelfTestData *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>((uint64_t)v24);
                *((void *)this + 12) = v23;
                unint64_t v7 = v30;
              }
              uint64_t v20 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData>(a3, v23, v7);
              goto LABEL_46;
            case 5u:
              if (v8 != 42) {
                goto LABEL_49;
              }
              *((_DWORD *)this + 12) |= 8u;
              uint64_t v21 = (sentencepiece::NormalizerSpec *)*((void *)this + 13);
              if (v21) {
                goto LABEL_45;
              }
              unint64_t v25 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if (*v6) {
                unint64_t v25 = (void *)*v25;
              }
              uint64_t v21 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v25);
              *((void *)this + 13) = v21;
LABEL_44:
              unint64_t v7 = v30;
LABEL_45:
              uint64_t v20 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::NormalizerSpec>(a3, v21, v7);
              goto LABEL_46;
            default:
LABEL_49:
              if (v8) {
                BOOL v26 = (v8 & 7) == 4;
              }
              else {
                BOOL v26 = 1;
              }
              if (v26)
              {
                *((_DWORD *)a3 + 2std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v8 - 1;
                return v30;
              }
              if (v8 < 0x640)
              {
                if (*v6)
                {
                  uint64_t v29 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
                }
                else
                {
                  uint64_t v29 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
                  unint64_t v7 = v30;
                }
                uint64_t v20 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v29, v7, a3);
              }
              else
              {
                uint64_t v20 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::ModelProto *)((char *)this + 24), v8, v7, (uint64_t)&sentencepiece::_ModelProto_default_instance_, (unint64_t *)this + 1, (int32x2_t *)a3);
              }
LABEL_46:
              uint64_t v30 = v20;
              if (!v20) {
                return 0;
              }
LABEL_47:
              if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)))return v30; {
              continue;
              }
          }
          while (1)
          {
            uint64_t v11 = (google::protobuf::internal *)(v10 + 1);
            uint64_t v30 = (google::protobuf::internal *)(v10 + 1);
            unint64_t v12 = (int *)*((void *)this + 9);
            if (!v12) {
              break;
            }
            uint64_t v13 = *((int *)this + 16);
            int v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *((_DWORD *)this + 17))
              {
LABEL_16:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 14, v14 + 1);
                unint64_t v12 = (int *)*((void *)this + 9);
                int v14 = *v12;
              }
              *unint64_t v12 = v14 + 1;
              uint64_t v15 = (sentencepiece::ModelProto_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(*((void *)this + 7));
              uint64_t v16 = *((void *)this + 9);
              uint64_t v17 = *((int *)this + 16);
              *((_DWORD *)this + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v17 + 1;
              *(void *)(v16 + 8 * v17 + 8) = v15;
              uint64_t v11 = v30;
              goto LABEL_18;
            }
            *((_DWORD *)this + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v13 + 1;
            uint64_t v15 = *(sentencepiece::ModelProto_SentencePiece **)&v12[2 * v13 + 2];
LABEL_18:
            int v10 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::ModelProto_SentencePiece>(a3, v15, v11);
            uint64_t v30 = (google::protobuf::internal *)v10;
            if (!v10) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v10 || *v10 != 10) {
              goto LABEL_47;
            }
          }
          int v14 = *((_DWORD *)this + 17);
          goto LABEL_16;
        }
        unint64_t v7 = (google::protobuf::internal *)((char *)v30 + 2);
      }
      break;
    }
    uint64_t v30 = v7;
    goto LABEL_8;
  }
  return v30;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::ModelProto_SentencePiece>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::ModelProto_SentencePiece *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  unint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    uint64_t result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(vgoogle::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (char *)sentencepiece::ModelProto_SentencePiece::_InternalParse(a2, (google::protobuf::internal *)v8, (int32x2_t *)this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::TrainerSpec>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::TrainerSpec *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  unint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    uint64_t result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(vgoogle::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (char *)sentencepiece::TrainerSpec::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::NormalizerSpec>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::NormalizerSpec *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  unint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    uint64_t result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(vgoogle::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (char *)sentencepiece::NormalizerSpec::_InternalParse(a2, (google::protobuf::internal *)v8, (int32x2_t *)this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SelfTestData *a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  unint64_t v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    uint64_t result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    unsigned int v8 = result;
    LODWORD(vgoogle::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7) = v10;
  }
  else
  {
    unsigned int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (char *)sentencepiece::SelfTestData::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::ModelProto::_InternalSerialize(sentencepiece::ModelProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6 = *((_DWORD *)this + 16);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*(void *)a3 <= (unint64_t)a2) {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      }
      unsigned int v8 = (sentencepiece::ModelProto_SentencePiece *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, i);
      *a2 = 10;
      unsigned int v9 = *((_DWORD *)v8 + 11);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          int v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v12;
        }
        else
        {
          a2[2] = v11;
          int v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        int v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)sentencepiece::ModelProto_SentencePiece::_InternalSerialize(v8, (char *)v10, a3);
    }
  }
  int v14 = *((_DWORD *)this + 12);
  if (v14)
  {
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    int v15 = (sentencepiece::TrainerSpec *)*((void *)this + 10);
    *a2 = 18;
    unsigned int v16 = *((_DWORD *)v15 + 12);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        uint64_t v17 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v17 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v18 | 0x80;
          unsigned int v19 = v18 >> 7;
          ++v17;
          unsigned int v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v19;
      }
      else
      {
        a2[2] = v18;
        uint64_t v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      uint64_t v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)sentencepiece::TrainerSpec::_InternalSerialize(v15, v17, a3);
    if ((v14 & 2) == 0)
    {
LABEL_15:
      if ((v14 & 4) == 0) {
        goto LABEL_16;
      }
      goto LABEL_38;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_15;
  }
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  uint64_t v21 = (sentencepiece::NormalizerSpec *)*((void *)this + 11);
  *a2 = 26;
  unsigned int v22 = *((_DWORD *)v21 + 13);
  if (v22 > 0x7F)
  {
    a2[1] = v22 | 0x80;
    unsigned int v24 = v22 >> 7;
    if (v22 >> 14)
    {
      unsigned int v23 = (unsigned __int8 *)(a2 + 3);
      do
      {
        *(v23 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v24 | 0x80;
        unsigned int v25 = v24 >> 7;
        ++v23;
        unsigned int v26 = v24 >> 14;
        v24 >>= 7;
      }
      while (v26);
      *(v23 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v25;
    }
    else
    {
      a2[2] = v24;
      unsigned int v23 = (unsigned __int8 *)(a2 + 3);
    }
  }
  else
  {
    a2[1] = v22;
    unsigned int v23 = (unsigned __int8 *)(a2 + 2);
  }
  a2 = (char *)sentencepiece::NormalizerSpec::_InternalSerialize(v21, (char *)v23, a3);
  if ((v14 & 4) == 0)
  {
LABEL_16:
    if ((v14 & 8) == 0) {
      goto LABEL_58;
    }
    goto LABEL_48;
  }
LABEL_38:
  if (*(void *)a3 <= (unint64_t)a2) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unint64_t v27 = (sentencepiece::SelfTestData *)*((void *)this + 12);
  *a2 = 34;
  unsigned int v28 = *((_DWORD *)v27 + 16);
  if (v28 > 0x7F)
  {
    a2[1] = v28 | 0x80;
    unsigned int v30 = v28 >> 7;
    if (v28 >> 14)
    {
      uint64_t v29 = (unsigned __int8 *)(a2 + 3);
      do
      {
        *(v29 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v30 | 0x80;
        unsigned int v31 = v30 >> 7;
        ++v29;
        unsigned int v32 = v30 >> 14;
        v30 >>= 7;
      }
      while (v32);
      *(v29 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v31;
    }
    else
    {
      a2[2] = v30;
      uint64_t v29 = (unsigned __int8 *)(a2 + 3);
    }
  }
  else
  {
    a2[1] = v28;
    uint64_t v29 = (unsigned __int8 *)(a2 + 2);
  }
  a2 = (char *)sentencepiece::SelfTestData::_InternalSerialize(v27, (char *)v29, a3);
  if ((v14 & 8) != 0)
  {
LABEL_48:
    if (*(void *)a3 <= (unint64_t)a2) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v33 = (sentencepiece::NormalizerSpec *)*((void *)this + 13);
    *a2 = 42;
    unsigned int v34 = *((_DWORD *)v33 + 13);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      unsigned int v36 = v34 >> 7;
      if (v34 >> 14)
      {
        uint64_t v35 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v35 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v36 | 0x80;
          unsigned int v37 = v36 >> 7;
          ++v35;
          unsigned int v38 = v36 >> 14;
          v36 >>= 7;
        }
        while (v38);
        *(v35 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v37;
      }
      else
      {
        a2[2] = v36;
        uint64_t v35 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v34;
      uint64_t v35 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)sentencepiece::NormalizerSpec::_InternalSerialize(v33, (char *)v35, a3);
  }
LABEL_58:
  uint64_t v39 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::ModelProto *)((char *)this + 24), 200, 0x20000000, (unsigned __int8 *)a2, a3);
  uint64_t v40 = v39;
  uint64_t v41 = *((void *)this + 1);
  if ((v41 & 1) == 0) {
    return v40;
  }
  unint64_t v43 = v41 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v43 + 31) < 0)
  {
    uint64_t v44 = *(void **)(v43 + 8);
    uint64_t v45 = *(void *)(v43 + 16);
  }
  else
  {
    uint64_t v44 = (void *)(v43 + 8);
    LODWORD(v45) = *(unsigned __int8 *)(v43 + 31);
  }
  if (*(void *)a3 - (void)v39 >= (int)v45)
  {
    uint64_t v46 = (int)v45;
    memcpy(v39, v44, (int)v45);
    v40 += v46;
    return v40;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v44, v45, v39);
}

uint64_t sentencepiece::ModelProto::ByteSizeLong(sentencepiece::ModelProto *this)
{
  uint64_t v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::ModelProto *)((char *)this + 24));
  uint64_t v3 = *((int *)this + 16);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *((void *)this + 9);
  if (v5) {
    int v6 = (sentencepiece::ModelProto_SentencePiece **)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      unsigned int v8 = *v6++;
      uint64_t v9 = sentencepiece::ModelProto_SentencePiece::ByteSizeLong(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  int v10 = *((_DWORD *)this + 12);
  if ((v10 & 0xF) == 0) {
    goto LABEL_13;
  }
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0) {
      goto LABEL_10;
    }
LABEL_16:
    uint64_t v15 = sentencepiece::NormalizerSpec::ByteSizeLong(*((sentencepiece::NormalizerSpec **)this + 11));
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v10 & 4) == 0)
    {
LABEL_11:
      if ((v10 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  uint64_t v14 = sentencepiece::TrainerSpec::ByteSizeLong(*((sentencepiece::TrainerSpec **)this + 10));
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_10:
  if ((v10 & 4) == 0) {
    goto LABEL_11;
  }
LABEL_17:
  uint64_t v16 = sentencepiece::SelfTestData::ByteSizeLong(*((sentencepiece::SelfTestData **)this + 12));
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 8) != 0)
  {
LABEL_12:
    uint64_t v11 = sentencepiece::NormalizerSpec::ByteSizeLong(*((sentencepiece::NormalizerSpec **)this + 13));
    v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_13:
  uint64_t v12 = *((void *)this + 1);
  if (v12)
  {
    unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 31) < 0) {
      uint64_t v18 = *(void *)(v17 + 16);
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 31);
    }
    v4 += v18;
  }
  *((_DWORD *)this + 13) = v4;
  return v4;
}

void sentencepiece::ModelProto::CheckTypeAndMergeFrom(sentencepiece::ModelProto *this, const google::protobuf::MessageLite *lpsrc)
{
  sentencepiece::ModelProto::MergeFrom(this, lpsrc);
}

void sentencepiece::ModelProto::MergeFrom(sentencepiece::ModelProto *this, const sentencepiece::ModelProto *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3397);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::ModelProto *)((char *)this + 24), (const sentencepiece::ModelProto *)((char *)a2 + 24));
  uint64_t v5 = (void *)((char *)this + 8);
  uint64_t v6 = *((void *)a2 + 1);
  if (v6)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if (*v5) {
      uint64_t v9 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((unint64_t *)this + 1);
    }
    int v10 = *(char *)(v7 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v8;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v7 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v7 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v7 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, (uint64_t)a2 + 56);
  int v13 = *((_DWORD *)a2 + 12);
  if ((v13 & 0xF) != 0)
  {
    if (v13)
    {
      *((_DWORD *)this + 12) |= 1u;
      uint64_t v14 = (sentencepiece::TrainerSpec *)*((void *)this + 10);
      if (!v14)
      {
        uint64_t v15 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          uint64_t v15 = (void *)*v15;
        }
        uint64_t v14 = (sentencepiece::TrainerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>((uint64_t)v15);
        *((void *)this + 1std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v14;
      }
      if (*((void *)a2 + 10)) {
        uint64_t v16 = (const sentencepiece::TrainerSpec *)*((void *)a2 + 10);
      }
      else {
        uint64_t v16 = (const sentencepiece::TrainerSpec *)&sentencepiece::_TrainerSpec_default_instance_;
      }
      sentencepiece::TrainerSpec::MergeFrom(v14, v16);
    }
    if ((v13 & 2) != 0)
    {
      *((_DWORD *)this + 12) |= 2u;
      unint64_t v17 = (sentencepiece::NormalizerSpec *)*((void *)this + 11);
      if (!v17)
      {
        uint64_t v18 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          uint64_t v18 = (void *)*v18;
        }
        unint64_t v17 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v18);
        *((void *)this + 1google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v17;
      }
      if (*((void *)a2 + 11)) {
        unsigned int v19 = (const sentencepiece::NormalizerSpec *)*((void *)a2 + 11);
      }
      else {
        unsigned int v19 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
      }
      sentencepiece::NormalizerSpec::MergeFrom(v17, v19);
      if ((v13 & 4) == 0)
      {
LABEL_25:
        if ((v13 & 8) == 0) {
          return;
        }
        goto LABEL_43;
      }
    }
    else if ((v13 & 4) == 0)
    {
      goto LABEL_25;
    }
    *((_DWORD *)this + 12) |= 4u;
    unsigned int v20 = (sentencepiece::SelfTestData *)*((void *)this + 12);
    if (!v20)
    {
      uint64_t v21 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
      if (*v5) {
        uint64_t v21 = (void *)*v21;
      }
      unsigned int v20 = (sentencepiece::SelfTestData *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>((uint64_t)v21);
      *((void *)this + 12) = v20;
    }
    if (*((void *)a2 + 12)) {
      unsigned int v22 = (const sentencepiece::SelfTestData *)*((void *)a2 + 12);
    }
    else {
      unsigned int v22 = (const sentencepiece::SelfTestData *)&sentencepiece::_SelfTestData_default_instance_;
    }
    sentencepiece::SelfTestData::MergeFrom(v20, v22);
    if ((v13 & 8) != 0)
    {
LABEL_43:
      *((_DWORD *)this + 12) |= 8u;
      unsigned int v23 = (sentencepiece::NormalizerSpec *)*((void *)this + 13);
      if (!v23)
      {
        unsigned int v24 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          unsigned int v24 = (void *)*v24;
        }
        unsigned int v23 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v24);
        *((void *)this + 13) = v23;
      }
      if (*((void *)a2 + 13)) {
        unsigned int v25 = (const sentencepiece::NormalizerSpec *)*((void *)a2 + 13);
      }
      else {
        unsigned int v25 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
      }
      sentencepiece::NormalizerSpec::MergeFrom(v23, v25);
    }
  }
}

void sub_25BFD5700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto::CopyFrom(sentencepiece::ModelProto *this, const sentencepiece::ModelProto *a2)
{
  if (a2 != this)
  {
    sentencepiece::ModelProto::Clear(this);
    sentencepiece::ModelProto::MergeFrom(this, a2);
  }
}

uint64_t sentencepiece::ModelProto::IsInitialized(sentencepiece::ModelProto *this)
{
  uint64_t result = google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::ModelProto *)((char *)this + 24));
  if (!result) {
    return result;
  }
  uint64_t result = google::protobuf::internal::AllAreInitialized<sentencepiece::ModelProto_SentencePiece>((uint64_t)this + 56);
  if (!result) {
    return result;
  }
  int v3 = *((_DWORD *)this + 12);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 10);
    if (!v4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4741);
      uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || trainer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v5->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      uint64_t v4 = *((void *)this + 10);
    }
    uint64_t result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v4 + 16));
    if (!result) {
      return result;
    }
    int v3 = *((_DWORD *)this + 12);
  }
  if ((v3 & 2) != 0)
  {
    uint64_t v6 = *((void *)this + 11);
    if (!v6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4824);
      unint64_t v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || normalizer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      uint64_t v6 = *((void *)this + 11);
    }
    uint64_t result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v6 + 24));
    if (!result) {
      return result;
    }
    int v3 = *((_DWORD *)this + 12);
  }
  if ((v3 & 4) == 0)
  {
LABEL_18:
    if ((v3 & 8) == 0) {
      return 1;
    }
    uint64_t v10 = *((void *)this + 13);
    if (!v10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      uint64_t v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      uint64_t v10 = *((void *)this + 13);
    }
    uint64_t result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v10 + 24));
    if (result) {
      return 1;
    }
    return result;
  }
  uint64_t v8 = *((void *)this + 12);
  if (!v8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4907);
    uint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || self_test_data_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    uint64_t v8 = *((void *)this + 12);
  }
  uint64_t result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v8 + 16));
  if (result)
  {
    int v3 = *((_DWORD *)this + 12);
    goto LABEL_18;
  }
  return result;
}

void sub_25BFD5918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::internal::AllAreInitialized<sentencepiece::ModelProto_SentencePiece>(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(a1, v2);
  }
  while ((google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v5 + 16)) & 1) != 0);
  return v3 < 1;
}

void *sentencepiece::ModelProto::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.ModelProto");
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x148uLL);
  }
  sentencepiece::TrainerSpec::TrainerSpec(AlignedNoHook, a1);
  return AlignedNoHook;
}

void sub_25BFD5A5C(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10A1C4074230EEALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x58uLL);
  }
  sentencepiece::NormalizerSpec::NormalizerSpec(AlignedNoHook, a1);
  return AlignedNoHook;
}

void sub_25BFD5B2C(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10A1C402CDD3876);
  _Unwind_Resume(a1);
}

void *google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  AlignedNoHooint k = (void *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x28uLL);
  }
  sentencepiece::SelfTestData_Sample::SelfTestData_Sample(AlignedNoHook, a1);
  return AlignedNoHook;
}

void sub_25BFD5BFC(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x1081C400F7E8713);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x48uLL);
  }
  sentencepiece::SelfTestData::SelfTestData(AlignedNoHook, a1);
  return AlignedNoHook;
}

void sub_25BFD5CCC(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10A1C4075D007F8);
  _Unwind_Resume(a1);
}

void *google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  AlignedNoHooint k = (void *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x40uLL);
  }
  sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(AlignedNoHook, a1);
  return AlignedNoHook;
}

void sub_25BFD5D9C(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10A1C40F497E4DALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto>(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
  AlignedNoHooint k = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x70uLL);
  }
  sentencepiece::ModelProto::ModelProto(AlignedNoHook, a1);
  return AlignedNoHook;
}

void sub_25BFD5E6C(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::TrainerSpec::New(sentencepiece::TrainerSpec *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>(0);
}

uint64_t sentencepiece::TrainerSpec::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>(a2);
}

uint64_t sentencepiece::TrainerSpec::GetCachedSize(sentencepiece::TrainerSpec *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t sentencepiece::NormalizerSpec::New(sentencepiece::NormalizerSpec *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>(0);
}

uint64_t sentencepiece::NormalizerSpec::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>(a2);
}

uint64_t sentencepiece::NormalizerSpec::GetCachedSize(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t sentencepiece::NormalizerSpec::add_suffix_space(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t sentencepiece::NormalizerSpec::add_dummy_prefix(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 81);
}

uint64_t sentencepiece::NormalizerSpec::remove_extra_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 82);
}

uint64_t sentencepiece::NormalizerSpec::escape_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 83);
}

uint64_t non-virtual thunk to'sentencepiece::NormalizerSpec::add_dummy_prefix(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 65);
}

uint64_t non-virtual thunk to'sentencepiece::NormalizerSpec::remove_extra_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 66);
}

uint64_t non-virtual thunk to'sentencepiece::NormalizerSpec::escape_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 67);
}

uint64_t non-virtual thunk to'sentencepiece::NormalizerSpec::add_suffix_space(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 64);
}

void *sentencepiece::SelfTestData_Sample::New(sentencepiece::SelfTestData_Sample *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(0);
}

void *sentencepiece::SelfTestData_Sample::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(a2);
}

uint64_t sentencepiece::SelfTestData_Sample::GetCachedSize(sentencepiece::SelfTestData_Sample *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t sentencepiece::SelfTestData::New(sentencepiece::SelfTestData *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>(0);
}

uint64_t sentencepiece::SelfTestData::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>(a2);
}

uint64_t sentencepiece::SelfTestData::GetCachedSize(sentencepiece::SelfTestData *this)
{
  return *((unsigned int *)this + 16);
}

void *sentencepiece::ModelProto_SentencePiece::New(sentencepiece::ModelProto_SentencePiece *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(0);
}

void *sentencepiece::ModelProto_SentencePiece::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(a2);
}

uint64_t sentencepiece::ModelProto_SentencePiece::GetCachedSize(sentencepiece::ModelProto_SentencePiece *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t sentencepiece::ModelProto::New(sentencepiece::ModelProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto>(0);
}

uint64_t sentencepiece::ModelProto::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto>(a2);
}

uint64_t sentencepiece::ModelProto::GetCachedSize(sentencepiece::ModelProto *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t sentencepiece::ModelProto::PieceSize(sentencepiece::ModelProto *this)
{
  return *((unsigned int *)this + 16);
}

char *sentencepiece::ModelProto::UnkSurface(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 10);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_TrainerSpec_default_instance_;
  }
  uint64_t v2 = v1[22];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26A584948, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sentencepiece::ModelProto::UnkPiece(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 10);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_TrainerSpec_default_instance_;
  }
  uint64_t v2 = v1[23];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26A5848C8, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sentencepiece::ModelProto::BosPiece(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 10);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_TrainerSpec_default_instance_;
  }
  uint64_t v2 = v1[24];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26A5848E8, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sentencepiece::ModelProto::EosPiece(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 10);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_TrainerSpec_default_instance_;
  }
  uint64_t v2 = v1[25];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26A584908, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sentencepiece::ModelProto::PadPiece(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 10);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_TrainerSpec_default_instance_;
  }
  uint64_t v2 = v1[26];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26A584928, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t sentencepiece::ModelProto::ByteFallback(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (unsigned __int8 *)*((void *)this + 10);
  if (!v1) {
    uint64_t v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  }
  return v1[248];
}

uint64_t sentencepiece::ModelProto::HasUnkSurface(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  if (*((void *)this + 10)) {
    uint64_t v1 = (unsigned __int8 *)*((void *)this + 10);
  }
  return (v1[40] >> 3) & 1;
}

char *sentencepiece::ModelProto::IdToPiece(sentencepiece::ModelProto *this, int a2)
{
  uint64_t result = (char *)(*(void *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

float sentencepiece::ModelProto::GetScore(sentencepiece::ModelProto *this, int a2)
{
  return *(float *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 56);
}

BOOL sentencepiece::ModelProto::PieceIsNormal(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 1;
}

BOOL sentencepiece::ModelProto::PieceIsUnknown(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 2;
}

BOOL sentencepiece::ModelProto::PieceIsControl(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 3;
}

BOOL sentencepiece::ModelProto::PieceIsUnused(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 5;
}

BOOL sentencepiece::ModelProto::PieceIsUserDefined(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 4;
}

BOOL sentencepiece::ModelProto::PieceIsByte(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 6;
}

uint64_t sentencepiece::ModelProto::NormalizerSpec(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 11);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  }
  return (uint64_t)v1 + 16;
}

uint64_t sentencepiece::ModelProto::DenormalizerSpec(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 13);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  }
  return (uint64_t)v1 + 16;
}

uint64_t sentencepiece::ModelProto::GetModelType(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 10);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_TrainerSpec_default_instance_;
  }
  int v2 = v1[68];
  unsigned int v3 = v2 - 2;
  unsigned int v4 = v2 - 1;
  if (v3 >= 3) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t non-virtual thunk to'sentencepiece::ModelProto::PieceSize(sentencepiece::ModelProto *this)
{
  return *((unsigned int *)this + 12);
}

char *non-virtual thunk to'sentencepiece::ModelProto::UnkSurface(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 8);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_TrainerSpec_default_instance_;
  }
  uint64_t v2 = v1[22];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26A584948, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *non-virtual thunk to'sentencepiece::ModelProto::UnkPiece(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 8);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_TrainerSpec_default_instance_;
  }
  uint64_t v2 = v1[23];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26A5848C8, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *non-virtual thunk to'sentencepiece::ModelProto::BosPiece(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 8);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_TrainerSpec_default_instance_;
  }
  uint64_t v2 = v1[24];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26A5848E8, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *non-virtual thunk to'sentencepiece::ModelProto::EosPiece(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 8);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_TrainerSpec_default_instance_;
  }
  uint64_t v2 = v1[25];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26A584908, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *non-virtual thunk to'sentencepiece::ModelProto::PadPiece(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 8);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_TrainerSpec_default_instance_;
  }
  uint64_t v2 = v1[26];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_26A584928, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t non-virtual thunk to'sentencepiece::ModelProto::ByteFallback(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (unsigned __int8 *)*((void *)this + 8);
  if (!v1) {
    uint64_t v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  }
  return v1[248];
}

uint64_t non-virtual thunk to'sentencepiece::ModelProto::HasUnkSurface(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  if (*((void *)this + 8)) {
    uint64_t v1 = (unsigned __int8 *)*((void *)this + 8);
  }
  return (v1[40] >> 3) & 1;
}

uint64_t non-virtual thunk to'sentencepiece::ModelProto::GetModelType(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 8);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_TrainerSpec_default_instance_;
  }
  int v2 = v1[68];
  unsigned int v3 = v2 - 2;
  unsigned int v4 = v2 - 1;
  if (v3 >= 3) {
    return 0;
  }
  else {
    return v4;
  }
}

char *non-virtual thunk to'sentencepiece::ModelProto::IdToPiece(sentencepiece::ModelProto *this, int a2)
{
  uint64_t result = (char *)(*(void *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

float non-virtual thunk to'sentencepiece::ModelProto::GetScore(sentencepiece::ModelProto *this, int a2)
{
  return *(float *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 56);
}

BOOL non-virtual thunk to'sentencepiece::ModelProto::PieceIsNormal(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 1;
}

BOOL non-virtual thunk to'sentencepiece::ModelProto::PieceIsUnknown(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 2;
}

BOOL non-virtual thunk to'sentencepiece::ModelProto::PieceIsControl(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 3;
}

BOOL non-virtual thunk to'sentencepiece::ModelProto::PieceIsUnused(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 5;
}

BOOL non-virtual thunk to'sentencepiece::ModelProto::PieceIsUserDefined(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 4;
}

BOOL non-virtual thunk to'sentencepiece::ModelProto::PieceIsByte(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 6;
}

uint64_t non-virtual thunk to'sentencepiece::ModelProto::NormalizerSpec(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 9);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  }
  return (uint64_t)v1 + 16;
}

uint64_t non-virtual thunk to'sentencepiece::ModelProto::DenormalizerSpec(sentencepiece::ModelProto *this)
{
  uint64_t v1 = (void *)*((void *)this + 11);
  if (!v1) {
    uint64_t v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  }
  return (uint64_t)v1 + 16;
}

void google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    unsigned int v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_25BFD684C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    unsigned int v4 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 16) + 8;
    do
    {
      uint64_t v3 = *(void *)v2;
      if (*(char *)(*(void *)v2 + 23) < 0)
      {
        **(unsigned char **)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v3 = 0;
        *(unsigned char *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_25BFD6918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    unsigned int v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    char v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_25BFD69F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    uint64_t v3 = (uint64_t *)(*(void *)(a1 + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      sentencepiece::SelfTestData_Sample::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_25BFD6AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    uint64_t v3 = (sentencepiece::ModelProto_SentencePiece **)(*(void *)(a1 + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      sentencepiece::ModelProto_SentencePiece::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_25BFD6B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (const std::string **)(*(void *)(a2 + 16) + 8);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)a1, (std::string **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    uint64_t v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *uint64_t v9 = v8;
    }
  }
}

void sub_25BFD6C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(std::string *result, std::string **a2, const std::string **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (std::string::__raw *)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      uint64_t v15 = *v12++;
      uint64_t result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    std::string::size_type v18 = v9->__words[0];
    unsigned int v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      if (*(unsigned char *)(v18 + 24)) {
      unint64_t AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)v18, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      }
      AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
      AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
      uint64_t result = std::string::operator=(AlignedAndAddCleanup, v21);
      *v20++ = AlignedAndAddCleanup;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(void *a1)
{
  uint64_t v2 = (sentencepiece::SelfTestData_Sample **)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::SelfTestData_Sample::~SelfTestData_Sample(*v3);
          MEMORY[0x26117ABD0]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (sentencepiece::SelfTestData_Sample **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (sentencepiece::SelfTestData_Sample **)(*(void *)(a2 + 16) + 8);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t *)a1, (sentencepiece::SelfTestData_Sample **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    uint64_t v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *uint64_t v9 = v8;
    }
  }
}

void sub_25BFD6F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t *a1, sentencepiece::SelfTestData_Sample **a2, sentencepiece::SelfTestData_Sample **a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      uint64_t v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SelfTestData_Sample>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    unsigned int v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      unsigned int v22 = (sentencepiece::SelfTestData_Sample *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SelfTestData_Sample>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::SelfTestData_Sample>::Merge(sentencepiece::SelfTestData_Sample *a1, sentencepiece::SelfTestData_Sample *this)
{
}

void google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(void *a1)
{
  uint64_t v2 = (sentencepiece::ModelProto_SentencePiece **)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::ModelProto_SentencePiece::~ModelProto_SentencePiece(*v3);
          MEMORY[0x26117ABD0]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (sentencepiece::ModelProto_SentencePiece **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (sentencepiece::ModelProto_SentencePiece **)(*(void *)(a2 + 16) + 8);
    char v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t *)a1, (sentencepiece::ModelProto_SentencePiece **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    uint64_t v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *uint64_t v9 = v8;
    }
  }
}

void sub_25BFD7198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t *a1, sentencepiece::ModelProto_SentencePiece **a2, sentencepiece::ModelProto_SentencePiece **a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      uint64_t v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::ModelProto_SentencePiece>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    unsigned int v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      unsigned int v22 = (sentencepiece::ModelProto_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::ModelProto_SentencePiece>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::ModelProto_SentencePiece>::Merge(sentencepiece::ModelProto_SentencePiece *a1, sentencepiece::ModelProto_SentencePiece *this)
{
}

void sentencepiece::filesystem::NewReadableFile()
{
}

void absl::make_unique<sentencepiece::filesystem::PosixReadableFile,std::string_view &,BOOL &>()
{
}

void sub_25BFD7314(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void *sentencepiece::filesystem::PosixReadableFile::PosixReadableFile(void *a1, const char *a2, uint64_t a3)
{
  *a1 = &unk_2709723A0;
  char v6 = a1 + 1;
  sentencepiece::util::Status::Status(a1 + 1);
  if (a3) {
    operator new();
  }
  char v7 = (void *)MEMORY[0x263F8C0E8];
  a1[2] = MEMORY[0x263F8C0E8];
  if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0)
  {
    unsigned int v15 = 5;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\"", 1);
    size_t v8 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)a2, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\": ", 3);
    uint64_t v9 = __error();
    sentencepiece::util::StrError((sentencepiece::util *)*v9);
    if ((v14 & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = v14;
    }
    else {
      uint64_t v11 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)&v19);
    sentencepiece::util::Status::operator=(v6, &v19);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    v16[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v16 + *(void *)(v16[0] - google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::ModelProto *)((char *)this + 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v16[1] = MEMORY[0x263F8C318] + 16;
    if (v17 < 0) {
      operator delete((void *)v16[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x26117AB30](&v18);
  }
  return a1;
}

void sub_25BFD75AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)(v16 - 56));
  if (a14 < 0) {
    operator delete(__p);
  }
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a15);
  sentencepiece::util::Status::~Status(v15);
  _Unwind_Resume(a1);
}

void sentencepiece::filesystem::PosixReadableFile::~PosixReadableFile(sentencepiece::filesystem::PosixReadableFile *this)
{
  sentencepiece::filesystem::PosixReadableFile::~PosixReadableFile(this);

  JUMPOUT(0x26117ABD0);
}

{
  uint64_t v2;

  *(void *)this = &unk_2709723A0;
  uint64_t v2 = *((void *)this + 2);
  if (v2 != MEMORY[0x263F8C0E8] && v2 != 0) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sentencepiece::util::Status::~Status((sentencepiece::filesystem::PosixReadableFile *)((char *)this + 8));
}

uint64_t sentencepiece::filesystem::PosixReadableFile::status@<X0>(sentencepiece::filesystem::PosixReadableFile *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::filesystem::PosixReadableFile *)((char *)this + 8));
}

BOOL sentencepiece::filesystem::PosixReadableFile::ReadLine(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  uint64_t v4 = std::locale::use_facet(&v8, MEMORY[0x263F8C108]);
  unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  char v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, a2, v5);
  return (*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) == 0;
}

void sub_25BFD773C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

BOOL sentencepiece::filesystem::PosixReadableFile::ReadAll(sentencepiece::logging *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*((void *)a1 + 2);
  uint64_t v3 = (void *)MEMORY[0x263F8C0E8];
  if (v2 == (void *)MEMORY[0x263F8C0E8])
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
    {
      char v11 = 0;
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"filesystem.cc", 13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
      unsigned __int8 v5 = (void *)std::ostream::operator<<();
      char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
      char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"LOG(", 4);
      std::locale v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ERROR", 5);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ReadAll is not supported for stdin.", 35);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v11);
    }
  }
  else
  {
    std::string::__assign_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(a2, *(void **)((char *)v2 + *(void *)(*v2 - 24) + 40), 0);
  }
  return v2 != v3;
}

void sub_25BFD7858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x26117A950](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    char v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    std::locale v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      void v7[3] = v8 + 1;
      LOBYTE(vgoogle::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7) = *v8;
      goto LABEL_9;
    }
    LODWORD(vgoogle::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_25BFD7A50(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x25BFD7A10);
  }
  __cxa_rethrow();
}

void sub_25BFD7ACC(_Unwind_Exception *a1)
{
}

void std::string::__assign_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(uint64_t a1, void *a2, void *a3)
{
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&__p, a2, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  MEMORY[0x26117A890](a1, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_25BFD7B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *a1, void *a2, void *a3)
{
  char v11 = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    if (a2)
    {
      if (a2[3] == a2[4])
      {
        int v6 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
        int v5 = v6 == -1;
        if (v6 == -1) {
          a2 = 0;
        }
      }
      else
      {
        int v5 = 0;
      }
    }
    else
    {
      int v5 = 1;
    }
    BOOL result = std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](&v11);
    if (v5 == result) {
      break;
    }
    std::locale v8 = (std::string::value_type *)a2[3];
    if (v8 == (std::string::value_type *)a2[4]) {
      std::string::value_type v9 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      std::string::value_type v9 = *v8;
    }
    std::string::push_back(a1, v9);
    uint64_t v10 = a2[3];
    if (v10 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v10 + 1;
    }
  }
  return result;
}

void sub_25BFD7C90(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_25BFD7CAC(_Unwind_Exception *a1)
{
}

BOOL std::istreambuf_iterator<char>::__test_for_eof[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v2[3] != v2[4]) {
      return 0;
    }
    if ((*(unsigned int (**)(void *))(*v2 + 72))(v2) != -1) {
      return *a1 == 0;
    }
    *a1 = 0;
  }
  return 1;
}

uint64_t sentencepiece::GetRandomGeneratorSeed(sentencepiece *this)
{
  if (v1 != -1) {
  std::random_device::random_device[abi:ne180100](&v4);
  }
  uint64_t v2 = MEMORY[0x26117AA50](&v4);
  std::random_device::~random_device(&v4);
  return v2;
}

void sub_25BFD7DA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  std::random_device::~random_device(&a11);
  __cxa_begin_catch(a1);
  atomic_load(v12);
  __cxa_end_catch();
  JUMPOUT(0x25BFD7D8CLL);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_25BFD7E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::logging::GetMinLogLevel(sentencepiece::logging *this)
{
}

uint64_t sentencepiece::string_util::DecodeUTF8(sentencepiece::string_util *this, const char *a2, char *a3, unint64_t *a4)
{
  int v4 = *(char *)this;
  if ((v4 & 0x80000000) == 0)
  {
    *(void *)a3 = 1;
    return *(unsigned __int8 *)this;
  }
  unint64_t v6 = a2 - (const char *)this;
  if ((unint64_t)(a2 - (const char *)this) >= 2)
  {
    if ((v4 & 0xE0) == 0xC0)
    {
      char v7 = *((unsigned char *)this + 1);
      if (v7 <= -65)
      {
        uint64_t result = v7 & 0x3F | ((v4 & 0x1F) << 6);
        if (result >= 0x80)
        {
          uint64_t v8 = 2;
LABEL_8:
          *(void *)a3 = v8;
          return result;
        }
      }
    }
    else if (v6 >= 3)
    {
      if ((v4 & 0xF0) == 0xE0)
      {
        int v9 = *((char *)this + 1);
        if (v9 <= -65)
        {
          char v10 = *((unsigned char *)this + 2);
          if (v10 <= -65)
          {
            uint64_t result = v10 & 0x3F | ((v9 & 0x3F) << 6) & 0xFFF | ((v4 & 0xF) << 12);
            if (result >= 0x800
              && (((v4 & 0xF) << 12) - 57344 < 0x102000u || result >> 11 <= 0x1A))
            {
              uint64_t v8 = 3;
              goto LABEL_8;
            }
          }
        }
      }
      else if (v6 >= 4 && (v4 & 0xF8) == 0xF0)
      {
        int v11 = *((char *)this + 1);
        if (v11 <= -65)
        {
          int v12 = *((char *)this + 2);
          if (v12 <= -65)
          {
            char v13 = *((unsigned char *)this + 3);
            if (v13 <= -65)
            {
              int v14 = ((v4 & 7) << 18) | ((v11 & 0x3F) << 12);
              uint64_t result = v13 & 0x3F | ((v12 & 0x3F) << 6) | v14;
              if (result >= 0x10000 && (v14 - 57344) < 0x102000)
              {
                uint64_t v8 = 4;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  *(void *)a3 = 1;
  return 65533;
}

uint64_t sentencepiece::random::GetRandomGenerator(sentencepiece::random *this)
{
  if ((*(unsigned char *)v2 & 1) == 0)
  {
    sentencepiece::GetRandomGeneratorSeed(v2);
    int v4 = (_DWORD *)sentencepiece::random::GetRandomGenerator(void)::mt(&sentencepiece::random::GetRandomGenerator(void)::mt);
    *int v4 = v6;
    do
    {
      uint64_t v7 = v5(&sentencepiece::random::GetRandomGenerator(void)::mt);
      *(_DWORD *)(v7 + 4 * v9) = v8;
    }
    while (v9 != 623);
    *(void *)(v5(&sentencepiece::random::GetRandomGenerator(void)::mt) + 249google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 0;
  }
  return sentencepiece::random::GetRandomGenerator(void)::mt(&sentencepiece::random::GetRandomGenerator(void)::mt);
}

uint64_t sentencepiece::util::StrError(sentencepiece::util *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  strerror_r((int)this, __strerrbuf, 0x3FFuLL);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  size_t v1 = strlen(__strerrbuf);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__strerrbuf, v1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" Error #", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v4 + *(void *)(v4[0] - google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::ModelProto *)((char *)this + 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v4[1] = MEMORY[0x263F8C318] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x26117AB30](&v6);
}

void sub_25BFD81DC(_Unwind_Exception *exception_object)
{
}

unint64_t sentencepiece::mmap_util::RoundUp(sentencepiece::mmap_util *this, unint64_t a2)
{
  if (!a2) {
    sentencepiece::mmap_util::RoundUp();
  }
  return ((unint64_t)this + a2 - 1) / a2 * a2;
}

void sentencepiece::mmap_util::Padding(std::string *this)
{
  LOBYTE(size) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if ((size & 3) != 0)
  {
    do
    {
      std::string::push_back(this, 0);
      LOBYTE(v3) = *((unsigned char *)&this->__r_.__value_.__s + 23);
      if ((v3 & 0x80u) != 0) {
        std::string::size_type v3 = this->__r_.__value_.__l.__size_;
      }
    }
    while ((v3 & 3) != 0);
  }
}

void *sentencepiece::mmap_util::RemovePrefix@<X0>(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = a1[1];
  BOOL v5 = v4 >= a2;
  unint64_t v6 = v4 - a2;
  if (v5)
  {
    *a1 += a2;
    a1[1] = v6;
    return sentencepiece::util::Status::Status(a3);
  }
  else
  {
    unsigned int v9 = 13;
    uint64_t v7 = (void *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.cc", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"string.size() >= size", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a3);
    v10[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v10 + *(void *)(v10[0] - google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::ModelProto *)((char *)this + 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v10[1] = MEMORY[0x263F8C318] + 16;
    if (v11 < 0) {
      operator delete((void *)v10[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x26117AB30](&v12);
  }
}

void sub_25BFD8470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sentencepiece::mmap_util::RoundUp()
{
}

sentencepiece::bpe::Model *sentencepiece::bpe::Model::Model(sentencepiece::bpe::Model *this, const sentencepiece::ModelProto *a2)
{
  unint64_t v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *(void *)unint64_t v4 = &unk_270972D28;
  *((void *)v4 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  return this;
}

void sub_25BFD8504(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

void *sentencepiece::bpe::Model::Model(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t result = (void *)sentencepiece::ModelInterface::ModelInterface(a1, a2, a3, a4);
  void *result = &unk_270972D28;
  return result;
}

void sentencepiece::bpe::Model::~Model(sentencepiece::bpe::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);

  JUMPOUT(0x26117ABD0);
}

void sentencepiece::bpe::Model::SampleEncode(uint64_t *a1@<X0>, unsigned char *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  (*(void (**)(void **__return_ptr))(*a1 + 16))(&v66);
  if (v66)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v66);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v66);
  if (!a3) {
    goto LABEL_3;
  }
  unint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  std::string __p = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  if (a3 >> 59) {
    std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
  }
  int v8 = 0;
  std::string __p = operator new(32 * a3);
  uint64_t v74 = (char *)__p;
  uint64_t v75 = (char *)__p + 32 * a3;
  memset(v71, 0, sizeof(v71));
  int v72 = 1065353216;
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v69 = 0;
  uint64_t v70 = 256;
  v65[0] = (uint64_t)a1;
  v65[1] = (uint64_t)&v66;
  v65[2] = (uint64_t)&__p;
  v65[3] = (uint64_t)&v76;
  v65[4] = (uint64_t)v71;
  uint64_t v66 = &unk_270972F68;
  do
  {
    long long v81 = 0uLL;
    int v9 = sentencepiece::normalizer::PrefixMatcher::PrefixMatch(a1[2], a2, a3, (BOOL *)&v80 + 8);
    *(void *)&long long v81 = a2;
    *((void *)&v81 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v9;
    a3 -= v9;
    if (a3) {
      int v10 = v8 + 1;
    }
    else {
      int v10 = -1;
    }
    LODWORD(v8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v8 - 1;
    DWORD1(v8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = v10;
    char v11 = v74;
    if (v74 >= v75)
    {
      int v14 = (char *)__p;
      uint64_t v15 = (v74 - (unsigned char *)__p) >> 5;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59) {
        std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v75 - (unsigned char *)__p;
      if ((v75 - (unsigned char *)__p) >> 4 > v16) {
        unint64_t v16 = v17 >> 4;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(32 * v18);
      }
      else
      {
        uint64_t v19 = 0;
      }
      long long v20 = v81;
      uint64_t v21 = &v19[32 * v15];
      *(_OWORD *)uint64_t v21 = v80;
      *((_OWORD *)v21 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v20;
      unsigned int v22 = v21;
      if (v11 != v14)
      {
        do
        {
          long long v23 = *((_OWORD *)v11 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
          *((_OWORD *)v22 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v23;
          v22 -= 32;
          v11 -= 32;
        }
        while (v11 != v14);
        char v11 = v14;
      }
      unsigned int v24 = &v19[32 * v18];
      char v13 = v21 + 32;
      std::string __p = v22;
      uint64_t v74 = v21 + 32;
      uint64_t v75 = v24;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      long long v12 = v81;
      *(_OWORD *)uint64_t v74 = v80;
      *((_OWORD *)v11 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v12;
      char v13 = v11 + 32;
    }
    a2 += v9;
    ++v8;
    uint64_t v74 = v13;
  }
  while (a3);
  if (__p == v13)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if ((unint64_t)(v13 - (unsigned char *)__p) >= 0x21)
    {
      unint64_t v25 = 1;
      do
      {
        sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(v65, v25 - 1, v25);
        ++v25;
      }
      while (v25 < (v74 - (unsigned char *)__p) >> 5);
    }
    char v26 = (sentencepiece::random *)v76;
    unint64_t v27 = v77;
    if (v76 != v77)
    {
      RandomGenerator = 0;
      do
      {
        uint64_t v29 = *(int **)v26;
        if (v27 - (char *)v26 >= 9)
        {
          uint64_t v30 = 0;
          uint64_t v31 = (v27 - (char *)v26) >> 3;
          unsigned int v32 = v26;
          do
          {
            uint64_t v33 = v32;
            unsigned int v32 = (sentencepiece::random *)((char *)v32 + 8 * v30 + 8);
            uint64_t v34 = 2 * v30;
            uint64_t v30 = (2 * v30) | 1;
            uint64_t v35 = v34 + 2;
            if (v35 < v31)
            {
              uint64_t v36 = *((void *)v32 + 1);
              float v37 = *(float *)(*(void *)v32 + 8);
              float v38 = *(float *)(v36 + 8);
              if (v37 < v38 || v37 == v38 && **(_DWORD **)v32 > *(_DWORD *)v36)
              {
                unsigned int v32 = (sentencepiece::random *)((char *)v32 + 8);
                uint64_t v30 = v35;
              }
            }
            *(void *)uint64_t v33 = *(void *)v32;
          }
          while (v30 <= (uint64_t)((unint64_t)(v31 - 2) >> 1));
          uint64_t v39 = (sentencepiece::random *)(v27 - 8);
          if (v32 == v39)
          {
            *(void *)unsigned int v32 = v29;
          }
          else
          {
            *(void *)unsigned int v32 = *(void *)v39;
            *(void *)uint64_t v39 = v29;
            char v26 = (sentencepiece::random *)std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPairComparator &,std::__wrap_iter<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair **>>((uint64_t)v26, (uint64_t)v32 + 8, ((sentencepiece::random *)((char *)v32 + 8) - v26) >> 3);
          }
        }
        v77 -= 8;
        int v40 = *v29;
        uint64_t v41 = *v29;
        int v42 = __p;
        uint64_t v43 = *((void *)__p + 4 * v41 + 3);
        if (!v43) {
          goto LABEL_58;
        }
        uint64_t v44 = v29[1];
        uint64_t v45 = *((void *)__p + 4 * v44 + 3);
        if (!v45) {
          goto LABEL_58;
        }
        uint64_t v46 = v45 + v43;
        if (v46 != *((void *)v29 + 2)) {
          goto LABEL_58;
        }
        if (a5 > 0.0)
        {
          if (a5 >= 1.0) {
            goto LABEL_58;
          }
          if (!RandomGenerator) {
            RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v26);
          }
          std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v47 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(RandomGenerator);
          if (((double)v47
              + (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(RandomGenerator)
              * 4294967300.0)
             * 5.42101086e-20
             + 0.0 < a5)
            goto LABEL_58;
          int v42 = __p;
          int v40 = *v29;
          uint64_t v44 = v29[1];
          uint64_t v41 = *v29;
          uint64_t v46 = *((void *)__p + 4 * v44 + 3) + *((void *)__p + 4 * v41 + 3);
        }
        uint64_t v48 = (char *)&v42[8 * v41];
        uint64_t v49 = (char *)&v42[8 * v44];
        *((void *)v48 + 3) = v46;
        *((_DWORD *)v48 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = *((_DWORD *)v49 + 1);
        uint64_t v50 = *((unsigned int *)v49 + 1);
        if ((v50 & 0x80000000) == 0) {
          v42[8 * v50] = v40;
        }
        *((void *)v49 + 2) = "";
        *((void *)v49 + 3) = 0;
        sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(v65, *((_DWORD *)__p + 8 * v41), v40);
        sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(v65, *v29, *((_DWORD *)__p + 8 * *v29 + 1));
LABEL_58:
        char v26 = (sentencepiece::random *)v76;
        unint64_t v27 = v77;
      }
      while (v76 != v77);
    }
    v79[3] = 0;
    uint64_t v51 = operator new(0x20uLL);
    *uint64_t v51 = &unk_270973BF0;
    v51[1] = a1;
    void v51[2] = v79;
    v51[3] = v71;
    *((void *)&v81 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v51;
    std::__function::__value_func<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::swap[abi:ne180100](&v80, v79);
    std::__function::__value_func<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::~__value_func[abi:ne180100](&v80);
    int v52 = 0;
    int v53 = (void *)MEMORY[0x263F8C0F8];
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    do
    {
      if (v52 < 0)
      {
        LOBYTE(v8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 1;
        uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"bpe_model.cc", 12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"(", 1);
        uint64_t v55 = (void *)std::ostream::operator<<();
        uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)") [", 3);
        unint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"(index) >= (0)", 14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"] ", 2);
        sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v80);
      }
      unint64_t v58 = __p;
      if (v52 >= (int)((unint64_t)(v74 - (unsigned char *)__p) >> 5))
      {
        LOBYTE(v8std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0) = 1;
        uint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"bpe_model.cc", 12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"(", 1);
        uint64_t v60 = (void *)std::ostream::operator<<();
        unint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)") [", 3);
        uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"(index) < (static_cast<int>(symbols.size()))", 44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"] ", 2);
        sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v80);
        unint64_t v58 = __p;
      }
      std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()((uint64_t)v79, v58[4 * v52 + 2], v58[4 * v52 + 3], (uint64_t)a4);
      int v52 = *((_DWORD *)__p + 8 * v52 + 1);
    }
    while (v52 != -1);
    std::__function::__value_func<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::~__value_func[abi:ne180100](v79);
  }
  sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(&v66);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v71);
  if (__p)
  {
    uint64_t v74 = (char *)__p;
    operator delete(__p);
  }
  if (v76)
  {
    uint64_t v77 = (char *)v76;
    operator delete(v76);
  }
}

void sub_25BFD8C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  std::__function::__value_func<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::~__value_func[abi:ne180100]((void *)(v33 - 200));
  sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(&a16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a23);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

__n128 sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(uint64_t *a1, int a2, int a3)
{
  if (a2 != -1 && a3 != -1)
  {
    uint64_t v4 = a2;
    uint64_t v5 = *(void *)a1[2];
    if (!*(unsigned char *)(v5 + 32 * a2 + 8))
    {
      uint64_t v6 = a3;
      uint64_t v7 = v5 + 32 * a3;
      if (!*(unsigned char *)(v7 + 8))
      {
        uint64_t v8 = *a1;
        uint64_t v9 = v5 + 32 * a2;
        int v10 = *(unsigned char **)(v9 + 16);
        uint64_t v11 = *(void *)(v7 + 24) + *(void *)(v9 + 24);
        v47[0] = v10;
        v47[1] = v11;
        long long v12 = *(unsigned int **)(v8 + 40);
        unsigned int v13 = *v12;
        if (v11)
        {
          uint64_t v14 = 0;
          uint64_t v15 = v11;
          while (1)
          {
            int v16 = *v10++;
            v14 ^= (v13 >> 10 << ((v13 >> 6) & 8)) ^ v16;
            unsigned int v13 = v12[v14];
            if ((v13 & 0x800000FF) != v16) {
              break;
            }
            if (!--v15) {
              goto LABEL_17;
            }
          }
        }
        else
        {
          int v17 = *v10;
          if (*v10)
          {
            uint64_t v14 = 0;
            unint64_t v18 = v10 + 1;
            while (1)
            {
              v14 ^= (v13 >> 10 << ((v13 >> 6) & 8)) ^ v17;
              unsigned int v13 = v12[v14];
              if ((v13 & 0x800000FF) != v17) {
                break;
              }
              int v19 = *v18++;
              int v17 = v19;
              if (!v19) {
                goto LABEL_17;
              }
            }
          }
          else
          {
            uint64_t v14 = 0;
LABEL_17:
            if ((v13 & 0x100) != 0)
            {
              unsigned int v20 = v12[v14 ^ (v13 >> 10 << ((v13 >> 6) & 8))];
              uint64_t v21 = (void *)a1[1];
              uint64_t v22 = v21[5];
              unint64_t v23 = v21[6];
              unint64_t v24 = v21[4];
              if (v24 >= v23)
              {
                unint64_t v24 = 0;
                ++v22;
                v21[4] = 0;
                v21[5] = v22;
              }
              uint64_t v25 = v21[1];
              if (v22 == (v21[2] - v25) >> 3)
              {
                is_mul_ok(v23, 0x18uLL);
                operator new[]();
              }
              uint64_t v26 = *(void *)(v25 + 8 * v22) + 24 * v24;
              v21[4] = v24 + 1;
              *(_DWORD *)uint64_t v26 = a2;
              *(_DWORD *)(v26 + 4) = a3;
              unsigned int v44 = v20 & 0x7FFFFFFF;
              *(float *)(v26 + 8) = (*(float (**)(uint64_t))(*(void *)v8 + 136))(v8);
              *(void *)(v26 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v11;
              unint64_t v27 = (uint64_t *)a1[3];
              uint64_t v29 = (void *)v27[1];
              unint64_t v28 = v27[2];
              if ((unint64_t)v29 >= v28)
              {
                uint64_t v32 = *v27;
                uint64_t v33 = ((uint64_t)v29 - *v27) >> 3;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 61) {
                  std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v35 = v28 - v32;
                if (v35 >> 2 > v34) {
                  unint64_t v34 = v35 >> 2;
                }
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36)
                {
                  if (v36 >> 61) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  float v37 = (char *)operator new(8 * v36);
                }
                else
                {
                  float v37 = 0;
                }
                float v38 = (uint64_t *)&v37[8 * v33];
                *float v38 = v26;
                uint64_t v30 = (uint64_t)(v38 + 1);
                if (v29 == (void *)v32)
                {
                  uint64_t v31 = v44;
                }
                else
                {
                  uint64_t v31 = v44;
                  do
                  {
                    uint64_t v39 = *--v29;
                    *--float v38 = v39;
                  }
                  while (v29 != (void *)v32);
                  uint64_t v29 = (void *)*v27;
                }
                *unint64_t v27 = (uint64_t)v38;
                v27[1] = v30;
                std::string v27[2] = (uint64_t)&v37[8 * v36];
                if (v29) {
                  operator delete(v29);
                }
              }
              else
              {
                *uint64_t v29 = v26;
                uint64_t v30 = (uint64_t)(v29 + 1);
                uint64_t v31 = v44;
              }
              v27[1] = v30;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPairComparator &,std::__wrap_iter<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair **>>(*v27, v30, (v30 - *v27) >> 3);
              if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v8 + 8) + 128))(*(void *)(v8 + 8), v31))
              {
                uint64_t v41 = *(void *)a1[2];
                __n128 v45 = *(__n128 *)(v41 + 32 * v4 + 16);
                __n128 v46 = *(__n128 *)(v41 + 32 * v6 + 16);
                uint64_t v42 = a1[4];
                uint64_t v48 = v47;
                uint64_t v43 = (__n128 *)std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(v42, (uint64_t)v47, (uint64_t)&std::piecewise_construct, &v48);
                __n128 result = v45;
                _OWORD v43[2] = v45;
                v43[3] = v46;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(void *)v4 + 48))(v4, v7, &v6);
}

void *sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(void *a1)
{
  *a1 = &unk_270972F68;
  uint64_t v2 = (void *)a1[1];
  std::string::size_type v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x26117ABA0](*v2, 0x1000C801E56706BLL);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sentencepiece::bpe::Model::Encode(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(void *)a1 + 56))(0.0);
}

uint64_t sentencepiece::bpe::Model::IsSampleEncodeAvailable(sentencepiece::bpe::Model *this)
{
  return 1;
}

uint64_t sentencepiece::bpe::Model::IsNBestEncodeAvailable(sentencepiece::bpe::Model *this)
{
  return 0;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPairComparator &,std::__wrap_iter<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair **>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v4 = v3 >> 1;
    uint64_t v5 = result + 8 * (v3 >> 1);
    uint64_t v6 = *(_DWORD **)v5;
    uint64_t v7 = *(void *)(a2 - 8);
    float v8 = *(float *)(*(void *)v5 + 8);
    float v9 = *(float *)(v7 + 8);
    if (v8 < v9 || v8 == v9 && *v6 > *(_DWORD *)v7)
    {
      *(void *)(a2 - 8) = v6;
      if (v3 >= 2)
      {
        while (1)
        {
          unint64_t v11 = v4 - 1;
          unint64_t v4 = (v4 - 1) >> 1;
          uint64_t v10 = result + 8 * v4;
          long long v12 = *(_DWORD **)v10;
          float v13 = *(float *)(*(void *)v10 + 8);
          if (v13 >= v9 && (v13 != v9 || *v12 <= *(_DWORD *)v7)) {
            break;
          }
          *(void *)uint64_t v5 = v12;
          uint64_t v5 = result + 8 * v4;
          if (v11 <= 1) {
            goto LABEL_11;
          }
        }
      }
      uint64_t v10 = v5;
LABEL_11:
      *(void *)uint64_t v10 = v7;
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  float v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_view_hash<char>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        uint64_t v18 = a2;
        int v16 = *(uint64_t **)a2;
        size_t v17 = *(void *)(v18 + 8);
        do
        {
          unint64_t v19 = *((void *)v15 + 1);
          if (v19 == v10)
          {
            if (*((void *)v15 + 3) == v17 && !memcmp(*((const void **)v15 + 2), v16, v17)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11) {
                v19 %= v11;
              }
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
  uint64_t v15 = operator new(0x40uLL);
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v10;
  *((_OWORD *)v15 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = **a4;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  unint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t v15 = *v27;
LABEL_40:
    *unint64_t v27 = v15;
    goto LABEL_41;
  }
  *(void *)uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v15;
  *(void *)(v26 + 8 * v4) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v28 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    unint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v8;
  return v15;
}

void sub_25BFD9560(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_view_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

void sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(void *a1)
{
  sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(a1);

  JUMPOUT(0x26117ABD0);
}

void *std::__function::__value_func<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::~__func()
{
}

__n128 std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_270973BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270973BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(uint64_t a1, void *a2, void ***a3)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = *a3;
  *(void *)&long long v33 = *a2;
  *((void *)&v33 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v4;
  uint64_t v6 = *(void ***)(a1 + 8);
  uint64_t v7 = ((uint64_t (*)(void **, void, uint64_t))(*v6)[14])(v6, v33, v4);
  if (v7 == -1 || ((*(uint64_t (**)(void *, uint64_t))(*v6[1] + 128))(v6[1], v7) & 1) == 0)
  {
    unint64_t v10 = (char *)v5[2];
    unint64_t v11 = (char *)v5[1];
    if (v11 >= v10)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*v5) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (unsigned char *)*v5) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        size_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v5 + 2), v16);
        uint64_t v18 = &v17[24 * v13];
        float v20 = &v17[24 * v19];
        *(_OWORD *)uint64_t v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        uint8x8_t v12 = v18 + 24;
        BOOL v22 = (char *)*v5;
        float v21 = (char *)v5[1];
        if (v21 == *v5) {
          goto LABEL_16;
        }
        do
        {
          long long v23 = *(_OWORD *)(v21 - 24);
          *((void *)v18 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = *((void *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v23;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        goto LABEL_15;
      }
LABEL_30:
      std::vector<_NSRange>::__throw_length_error[abi:ne180100]();
    }
  }
  else
  {
    float v8 = std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::find<std::string_view>(*(void **)(a1 + 24), (uint64_t)&v33);
    if (v8)
    {
      unint64_t v9 = (uint64_t *)v8;
      std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(*(void *)(a1 + 16), v9[4], v9[5], (uint64_t)v5);
      std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(*(void *)(a1 + 16), v9[6], v9[7], (uint64_t)v5);
      return;
    }
    unint64_t v24 = (char *)v5[2];
    unint64_t v11 = (char *)v5[1];
    if (v11 >= v24)
    {
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*v5) >> 3);
      unint64_t v26 = v25 + 1;
      if (v25 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (unsigned char *)*v5) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v5 + 2), v28);
        uint64_t v18 = &v29[24 * v25];
        float v20 = &v29[24 * v30];
        *(_OWORD *)uint64_t v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        uint8x8_t v12 = v18 + 24;
        uint64_t v31 = (char *)*v5;
        float v21 = (char *)v5[1];
        if (v21 == *v5) {
          goto LABEL_16;
        }
        do
        {
          long long v32 = *(_OWORD *)(v21 - 24);
          *((void *)v18 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = *((void *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v32;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v31);
LABEL_15:
        float v21 = (char *)*v5;
LABEL_16:
        *uint64_t v5 = v18;
        v5[1] = v12;
        uint64_t v5[2] = v20;
        if (v21) {
          operator delete(v21);
        }
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }
  *(_OWORD *)unint64_t v11 = v33;
  *((_DWORD *)v11 + 4) = v7;
  uint8x8_t v12 = v11 + 24;
LABEL_18:
  v5[1] = v12;
}

uint64_t std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::target_type()
{
}

uint64_t **std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::find<std::string_view>(void *a1, uint64_t a2)
{
  unint64_t v4 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v14 = a2;
    uint8x8_t v12 = *(uint64_t **)a2;
    size_t v13 = *(void *)(v14 + 8);
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(void *)&v5) {
            v15 %= *(void *)&v5;
          }
        }
        else
        {
          v15 &= *(void *)&v5 - 1;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

void *std::__function::__value_func<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    int8x8_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_25BFD9D4C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sentencepiece::error::Abort(sentencepiece::error *this)
{
  if (!sentencepiece::error::gTestCounter)
  {
    size_t v1 = std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x263F8C0F8], "Program terminated with an unrecoverable error.");
    uint64_t v2 = (sentencepiece *)std::endl[abi:ne180100]<char,std::char_traits<char>>(v1);
    sentencepiece::ShutdownLibrary(v2);
    exit(-1);
  }
  sentencepiece::error::gTestCounter = 2;
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_25BFD9E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *sentencepiece::util::Status::Status(void *this)
{
  *this = 0;
  return this;
}

void sentencepiece::util::Status::~Status(sentencepiece::util::Status *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

void sentencepiece::util::Status::Status()
{
}

void sub_25BFD9FF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void *sentencepiece::util::Status::Status(void *this, const sentencepiece::util::Status *a2)
{
  if (*(void *)a2) {
    operator new();
  }
  *this = 0;
  return this;
}

void sub_25BFDA0A8(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

void sentencepiece::util::Status::operator=(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 != *a2)
  {
    if (*a2) {
      operator new();
    }
    *a1 = 0;
    if (v3)
    {
      std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100]((uint64_t)a1, v3);
    }
  }
}

void sub_25BFDA194(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

const char *sentencepiece::util::Status::error_message(sentencepiece::util::Status *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this) {
    return "";
  }
  __n128 result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0) {
    return *(const char **)result;
  }
  return result;
}

std::string *sentencepiece::util::Status::ToString@<X0>(sentencepiece::util::Status *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(_DWORD **)this;
  if (*(void *)this)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    unsigned int v5 = *v3 - 1;
    if (v5 < 0x10) {
      MEMORY[0x26117A880](a2, off_2654A9568[v5]);
    }
    std::string::append(a2, ": ");
    int v6 = *(char *)(*(void *)this + 31);
    if (v6 >= 0) {
      uint8x8_t v7 = (const std::string::value_type *)(*(void *)this + 8);
    }
    else {
      uint8x8_t v7 = *(const std::string::value_type **)(*(void *)this + 8);
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(*(void *)this + 31);
    }
    else {
      std::string::size_type v8 = *(void *)(*(void *)this + 16);
    }
    return std::string::append(a2, v7, v8);
  }
  else
  {
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "OK");
  }
}

void sub_25BFDA29C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    JUMPOUT(0x26117ABD0);
  }
}

void *google::protobuf::internal::ArenaImpl::thread_cache(google::protobuf::internal::ArenaImpl *this)
{
  {
    operator new();
  }
  uint64_t v1 = (pthread_key_t *)google::protobuf::internal::ArenaImpl::thread_cache(void)::thread_cache_;

  return google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Get(v1);
}

void sub_25BFDA3B8(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Get(pthread_key_t *a1)
{
  uint64_t v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    uint64_t v2 = operator new(0x40uLL, (std::align_val_t)0x40uLL);
    *(_OWORD *)uint64_t v2 = xmmword_25BFF7CD0;
    v2[2] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

uint64_t google::protobuf::internal::SerialArena::Block::Pointer(google::protobuf::internal::SerialArena::Block *this, unint64_t a2)
{
  if (*((void *)this + 2) < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 111);
    std::locale v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: n <= size_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  return (uint64_t)this + a2;
}

void sub_25BFDA4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::SerialArena::New(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, void *a3, google::protobuf::internal::ArenaImpl *a4)
{
  unint64_t v7 = *((void *)this + 1);
  unint64_t v8 = v7 + 72;
  if (v7 + 72 > *((void *)this + 2))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 398);
    unint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (pos + ArenaImpl::kSerialArenaSize) <= (b->size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  unint64_t v10 = (void *)google::protobuf::internal::SerialArena::Block::Pointer(this, v7);
  *((void *)this + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v8;
  *unint64_t v10 = a3;
  v10[1] = a2;
  std::string v10[2] = this;
  v10[5] = google::protobuf::internal::SerialArena::Block::Pointer(this, v8);
  uint64_t v11 = google::protobuf::internal::SerialArena::Block::Pointer(this, *((void *)this + 2));
  void v10[3] = 0;
  v10[7] = 0;
  v10[8] = 0;
  v10[6] = v11;
  return v10;
}

void sub_25BFDA5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ArenaImpl::SpaceAllocated(google::protobuf::internal::ArenaImpl *this)
{
  return *((void *)this + 2);
}

void *google::protobuf::internal::ArenaImpl::NewBuffer(google::protobuf::internal::ArenaImpl *this, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *((void *)this + 4);
  if (a2 == -1)
  {
    if (v5) {
      unint64_t v7 = *(void *)v5;
    }
    else {
      unint64_t v7 = 256;
    }
  }
  else
  {
    if (v5) {
      unint64_t v6 = *(void *)(v5 + 8);
    }
    else {
      unint64_t v6 = 0x2000;
    }
    if (v6 >= 2 * a2) {
      unint64_t v7 = 2 * a2;
    }
    else {
      unint64_t v7 = v6;
    }
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 245);
    unint64_t v8 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
    uint64_t v5 = *((void *)this + 4);
  }
  if (v7 <= a3 + 24) {
    size_t v9 = a3 + 24;
  }
  else {
    size_t v9 = v7;
  }
  if (v5) {
    __n128 result = (void *)(*(uint64_t (**)(size_t))(v5 + 16))(v9);
  }
  else {
    __n128 result = operator new(v9);
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)this + 2, v9, memory_order_relaxed);
  return result;
}

void sub_25BFDA710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::SerialArena::Block *google::protobuf::internal::SerialArena::NewBlock(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, google::protobuf::internal::ArenaImpl *a3, google::protobuf::internal::ArenaImpl *a4)
{
  if (this) {
    uint64_t v7 = *((void *)this + 2);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = (google::protobuf::internal::SerialArena::Block *)google::protobuf::internal::ArenaImpl::NewBuffer(a3, v7, (unint64_t)a2);

  return google::protobuf::internal::SerialArena::Block::Block(v8, v9, (unint64_t)this, 0, 0);
}

void *google::protobuf::internal::SerialArena::AddCleanupFallback(google::protobuf::internal::SerialArena *this, void *a2, void (*a3)(void *), google::protobuf::internal::ArenaImpl *a4)
{
  __n128 result = (void *)*((void *)this + 3);
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40) {
        uint64_t v8 = 64;
      }
      else {
        uint64_t v8 = 2 * *result;
      }
    }
    else
    {
      uint64_t v8 = 8;
    }
    __n128 result = (void *)google::protobuf::internal::SerialArena::AllocateAligned(this, (google::protobuf::internal::SerialArena::Block *)((16 * (_WORD)v8 + 23) & 0xFF0), (uint64_t)a3, a4);
    uint64_t v9 = *((void *)this + 3);
    void *result = v8;
    result[1] = v9;
    *((void *)this + 3) = result;
    *((void *)this + google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7) = result + 2;
    *((void *)this + 8) = &result[2 * v8 + 2];
  }
  while (!(16 * v8));
  result[2] = a2;
  result[3] = a3;
  *((void *)this + google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7) = result + 4;
  return result;
}

unint64_t google::protobuf::internal::SerialArena::AllocateAligned(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, uint64_t a3, google::protobuf::internal::ArenaImpl *a4)
{
  if ((google::protobuf::internal::SerialArena::Block *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 159);
    unint64_t v6 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (internal::AlignUpTo8(n)) == (n): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  unint64_t result = *((void *)this + 5);
  unint64_t v8 = *((void *)this + 6);
  if (v8 < result)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 160);
    uint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (limit_) >= (ptr_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    unint64_t result = *((void *)this + 5);
    unint64_t v8 = *((void *)this + 6);
  }
  if (v8 - result < (unint64_t)a2) {
    return google::protobuf::internal::SerialArena::AllocateAlignedFallback(this, a2, a3, a4);
  }
  *((void *)this + 5) = (char *)a2 + result;
  return result;
}

void sub_25BFDA904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(atomic_ullong *this, google::protobuf::internal::SerialArena::Block *a2, void (*a3)(void *))
{
  unint64_t v6 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache((google::protobuf::internal::ArenaImpl *)this);
  if (*((void *)v6 + 1) == this[3])
  {
    explicit = (google::protobuf::internal::SerialArena *)*((void *)v6 + 2);
    goto LABEL_3;
  }
  char v10 = google::protobuf::internal::ArenaImpl::thread_cache(v6);
  explicit = (google::protobuf::internal::SerialArena *)atomic_load_explicit(this + 1, memory_order_acquire);
  if (explicit && *((void **)explicit + 1) == v10)
  {
LABEL_3:
    return google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(explicit, a2, a3, v7);
  }

  return google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanupFallback((google::protobuf::internal::ArenaImpl *)this, a2, a3);
}

void *google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, void (*a3)(void *), google::protobuf::internal::ArenaImpl *a4)
{
  Aligned = (void *)google::protobuf::internal::SerialArena::AllocateAligned(this, a2, (uint64_t)a3, a4);
  unint64_t v8 = Aligned;
  uint64_t v9 = (void *)*((void *)this + 7);
  if (v9 == *((void **)this + 8))
  {
    google::protobuf::internal::SerialArena::AddCleanupFallback(this, Aligned, a3, v7);
  }
  else
  {
    *uint64_t v9 = Aligned;
    v9[1] = a3;
    *((void *)this + google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7) = v9 + 2;
  }
  return v8;
}

void *google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanupFallback(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2, void (*a3)(void *))
{
  unint64_t v6 = (google::protobuf::internal::SerialArena::Block *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  SerialArenaFallbacint k = google::protobuf::internal::ArenaImpl::GetSerialArenaFallback((atomic_ullong *)this, v6);

  return google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(SerialArenaFallback, a2, a3, v8);
}

unint64_t google::protobuf::internal::ArenaImpl::AllocateAlignedFallback(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2)
{
  std::locale v4 = (google::protobuf::internal::SerialArena::Block *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  SerialArenaFallbacint k = google::protobuf::internal::ArenaImpl::GetSerialArenaFallback((atomic_ullong *)this, v4);

  return google::protobuf::internal::SerialArena::AllocateAligned(SerialArenaFallback, a2, v6, v7);
}

google::protobuf::internal::ArenaImpl *google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(atomic_ullong *this, google::protobuf::internal::SerialArena::Block *a2)
{
  uint64_t v3 = (unint64_t *)this;
  explicit = (google::protobuf::internal::ArenaImpl *)atomic_load_explicit(this, memory_order_acquire);
  if (explicit)
  {
    while (*((google::protobuf::internal::SerialArena::Block **)explicit + 1) != a2)
    {
      explicit = (google::protobuf::internal::ArenaImpl *)*((void *)explicit + 4);
      if (!explicit) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    uint64_t v5 = (google::protobuf::internal::SerialArena *)google::protobuf::internal::ArenaImpl::NewBuffer((google::protobuf::internal::ArenaImpl *)this, -1, 0x48uLL);
    *(_OWORD *)uint64_t v5 = xmmword_25BFF7CE0;
    *((void *)v5 + 2) = v6;
    this = google::protobuf::internal::SerialArena::New(v5, a2, v3, v7);
    explicit = (google::protobuf::internal::ArenaImpl *)this;
    unint64_t v8 = *v3;
    this[4] = *v3;
    atomic_ullong v9 = v8;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)v3, (unint64_t *)&v9, (unint64_t)this, memory_order_release, memory_order_relaxed);
    if (v9 != v8)
    {
      atomic_ullong v10 = v9;
      do
      {
        this[4] = v9;
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)v3, (unint64_t *)&v10, (unint64_t)this, memory_order_release, memory_order_relaxed);
        BOOL v11 = v10 == v9;
        atomic_ullong v9 = v10;
      }
      while (!v11);
    }
  }
  uint8x8_t v12 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache((google::protobuf::internal::ArenaImpl *)this);
  *((void *)v12 + 2) = explicit;
  unint64_t v13 = v3[3];
  google::protobuf::internal::ArenaImpl::thread_cache(v12)[1] = v13;
  atomic_store((unint64_t)explicit, v3 + 1);
  return explicit;
}

uint64_t google::protobuf::internal::SerialArena::AllocateAlignedFallback(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, uint64_t a3, google::protobuf::internal::ArenaImpl *a4)
{
  uint64_t v6 = (google::protobuf::internal::SerialArena *)*((void *)this + 2);
  *((void *)v6 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = *((void *)v6 + 2) - *((void *)this + 6) + *((void *)this + 5);
  uint64_t v7 = (unint64_t *)google::protobuf::internal::SerialArena::NewBlock(v6, a2, *(google::protobuf::internal::ArenaImpl **)this, a4);
  *((void *)this + 2) = v7;
  *((void *)this + 5) = google::protobuf::internal::SerialArena::Block::Pointer((google::protobuf::internal::SerialArena::Block *)v7, v7[1]);
  *((void *)this + google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = google::protobuf::internal::SerialArena::Block::Pointer(*((google::protobuf::internal::SerialArena::Block **)this + 2), *(void *)(*((void *)this + 2) + 16));

  return google::protobuf::internal::SerialArena::AllocateAligned(this, (unint64_t)a2);
}

unint64_t google::protobuf::internal::ArenaImpl::AllocateAligned(atomic_ullong *this, google::protobuf::internal::SerialArena::Block *a2)
{
  std::locale v4 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache((google::protobuf::internal::ArenaImpl *)this);
  if (*((void *)v4 + 1) == this[3])
  {
    explicit = (google::protobuf::internal::SerialArena *)*((void *)v4 + 2);
    goto LABEL_3;
  }
  atomic_ullong v9 = google::protobuf::internal::ArenaImpl::thread_cache(v4);
  explicit = (google::protobuf::internal::SerialArena *)atomic_load_explicit(this + 1, memory_order_acquire);
  if (explicit && *((void **)explicit + 1) == v9)
  {
LABEL_3:
    return google::protobuf::internal::SerialArena::AllocateAligned(explicit, a2, v5, v6);
  }

  return google::protobuf::internal::ArenaImpl::AllocateAlignedFallback((google::protobuf::internal::ArenaImpl *)this, a2);
}

google::protobuf::internal::SerialArena::Block *google::protobuf::internal::SerialArena::Block::Block(google::protobuf::internal::SerialArena::Block *this, uint64_t a2, unint64_t a3, unsigned int a4, int a5)
{
  uint64_t v6 = 2;
  if (!a5) {
    uint64_t v6 = 0;
  }
  *(void *)this = v6 | a4 | a3;
  *((void *)this + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 24;
  *((void *)this + 2) = a2;
  if ((a3 & 3) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 107);
    uint64_t v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (reinterpret_cast<uintptr_t>(next) & 3) == (0u): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_25BFDAD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Delete(uint64_t result)
{
  if (result) {
    JUMPOUT(0x26117ABC0);
  }
  return result;
}

google::protobuf::internal::LazyString *google::protobuf::internal::LazyString::Init(google::protobuf::internal::LazyString *this)
{
  {
    __cxa_atexit((void (*)(void *))google::protobuf::internal::WrappedMutex::~WrappedMutex, &google::protobuf::internal::LazyString::Init(void)const::mu, &dword_25BF41000);
  }
  std::mutex::lock(&google::protobuf::internal::LazyString::Init(void)const::mu);
  explicit = (google::protobuf::internal::LazyString *)atomic_load_explicit((atomic_ullong *volatile)this + 3, memory_order_acquire);
  if (!explicit)
  {
    std::string::basic_string[abi:ne180100](this, *(void **)this, *((void *)this + 1));
    atomic_store((unint64_t)this, (unint64_t *)this + 3);
    explicit = this;
  }
  std::mutex::unlock(&google::protobuf::internal::LazyString::Init(void)const::mu);
  return explicit;
}

void google::protobuf::internal::ArenaStringPtr::Set(google::protobuf::internal::ArenaStringPtr *this, uint64_t a2, long long *a3, google::protobuf::internal::ArenaImpl *a4)
{
  if (*(void *)this != a2)
  {
    google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(this);
    JUMPOUT(0x26117A890);
  }
  if (!a4) {
    operator new();
  }
  if (*((unsigned char *)a4 + 24)) {
  unint64_t AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)a4, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  unint64_t v8 = AlignedAndAddCleanup;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(AlignedAndAddCleanup, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&AlignedAndAddCleanup->__r_.__value_.__l.__data_ = v9;
  }
  *(void *)this = v8;
}

{
  uint64_t v6;
  uint64_t v7;
  long long v8;
  void *AlignedAndAddCleanup;
  uint64_t v10;
  google::protobuf::internal::ArenaImpl *v11;

  if (*(void *)this == a2)
  {
    if (!a4) {
      operator new();
    }
    if (*((unsigned char *)a4 + 24))
    {
      BOOL v11 = a4;
      a4 = v11;
    }
    unint64_t AlignedAndAddCleanup = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)a4, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
    atomic_ullong v10 = *((void *)a3 + 2);
    *(_OWORD *)unint64_t AlignedAndAddCleanup = *a3;
    AlignedAndAddCleanup[2] = v10;
    *((void *)a3 + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
    *(void *)this = AlignedAndAddCleanup;
  }
  else
  {
    uint64_t v6 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(this);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    unint64_t v8 = *a3;
    *(void *)(v7 + 1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    *((unsigned char *)a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
}

void sub_25BFDAF88(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ArenaStringPtr::Set(google::protobuf::internal::ArenaStringPtr *a1, long long *a2, google::protobuf::internal::ArenaImpl *a3)
{
}

{
  google::protobuf::internal::ArenaStringPtr::Set(a1, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, a2, a3);
}

{
  google::protobuf::internal::ArenaStringPtr::Set(a1, 0, a2, a3);
}

uint64_t *google::protobuf::internal::ArenaStringPtr::Mutable(uint64_t **a1, google::protobuf::internal::ArenaImpl *a2)
{
  if (*a1 == &google::protobuf::internal::fixed_address_empty_string) {
    return google::protobuf::internal::ArenaStringPtr::MutableSlow<>(a1, a2);
  }
  else {
    return (uint64_t *)google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((google::protobuf::internal::ArenaStringPtr *)a1);
  }
}

uint64_t *google::protobuf::internal::ArenaStringPtr::MutableSlow<>(uint64_t **a1, google::protobuf::internal::ArenaImpl *this)
{
  if (*a1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    std::locale v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: IsDefault(default_value): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  if (!this) {
    operator new();
  }
  if (*((unsigned char *)this + 24)) {
  unint64_t result = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  uint64_t *result = 0;
  result[1] = 0;
  result[2] = 0;
  *a1 = result;
  return result;
}

void sub_25BFDB234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::ArenaStringPtr::Mutable(google::protobuf::internal::ArenaStringPtr *this, atomic_ullong *a2, google::protobuf::Arena *a3)
{
  if (*(void *)this) {
    return (std::string *)google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(this);
  }
  else {
    return google::protobuf::internal::ArenaStringPtr::MutableSlow<google::protobuf::internal::LazyString>((std::string **)this, a3, a2);
  }
}

std::string *google::protobuf::internal::ArenaStringPtr::MutableSlow<google::protobuf::internal::LazyString>(std::string **a1, google::protobuf::internal::ArenaImpl *this, atomic_ullong *a3)
{
  if (*a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    char v6 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: IsDefault(default_value): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  explicit = (google::protobuf::internal::LazyString *)atomic_load_explicit(a3 + 3, memory_order_acquire);
  if (explicit)
  {
    if (this) {
      goto LABEL_5;
    }
LABEL_10:
    operator new();
  }
  explicit = google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)a3);
  if (!this) {
    goto LABEL_10;
  }
LABEL_5:
  if (*((unsigned char *)this + 24)) {
  unint64_t AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  long long v9 = AlignedAndAddCleanup;
  if (*((char *)explicit + 23) < 0)
  {
    std::string::__init_copy_ctor_external(AlignedAndAddCleanup, *(const std::string::value_type **)explicit, *((void *)explicit + 1));
  }
  else
  {
    long long v10 = *(_OWORD *)explicit;
    AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = *((void *)explicit + 2);
    *(_OWORD *)&AlignedAndAddCleanup->__r_.__value_.__l.__data_ = v10;
  }
  *a1 = v9;
  return v9;
}

void sub_25BFDB3CC(_Unwind_Exception *a1)
{
  MEMORY[0x26117ABD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::ArenaStringPtr::ClearToDefault(std::string *result, atomic_ullong *a2)
{
  if (result->__r_.__value_.__r.__words[0])
  {
    uint64_t v3 = (std::string *)google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((google::protobuf::internal::ArenaStringPtr *)result);
    explicit = (google::protobuf::internal::LazyString *)atomic_load_explicit(a2 + 3, memory_order_acquire);
    if (!explicit) {
      explicit = google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)a2);
    }
    return std::string::operator=(v3, (const std::string *)explicit);
  }
  return result;
}

unint64_t google::protobuf::io::EpsCopyOutputStream::Flush(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  while (1)
  {
    unint64_t v5 = *(void *)this;
    std::locale v4 = (void *)*((void *)this + 1);
    if (!v4)
    {
      unint64_t v10 = v5 - (void)a2;
      unint64_t v9 = v10 + 16;
      *((void *)this + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = a2;
      if (((v10 + 16) & 0x80000000) == 0) {
        return v9;
      }
      goto LABEL_12;
    }
    int v6 = a2 - v5;
    if ((unint64_t)a2 <= v5) {
      break;
    }
    if (*((unsigned char *)this + 56))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 685);
      uint64_t v7 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: !had_error_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    if (v6 >= 17)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 686);
      unint64_t v8 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: overrun <= kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    a2 = &google::protobuf::io::EpsCopyOutputStream::Next(this)[v6];
    if (*((unsigned char *)this + 56)) {
      return 0;
    }
  }
  memcpy(v4, (char *)this + 16, a2 - ((char *)this + 16));
  unint64_t v11 = *(void *)this;
  *((void *)this + 1) += a2 - ((char *)this + 16);
  unint64_t v9 = v11 - (void)a2;
  if (((v11 - a2) & 0x80000000) == 0) {
    return v9;
  }
LABEL_12:
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 700);
  char v12 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: s >= 0: ");
  google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  return v9;
}

void sub_25BFDB5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::Next(google::protobuf::io::EpsCopyOutputStream *this)
{
  if (*((unsigned char *)this + 56))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 788);
    uint64_t v2 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !had_error_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  if (*((void *)this + 6))
  {
    uint64_t v3 = (char *)this + 16;
    unint64_t v5 = *(char **)this;
    std::locale v4 = (void *)*((void *)this + 1);
    if (v4)
    {
      memcpy(v4, (char *)this + 16, v5 - v3);
      int v12 = 0;
      do
      {
        v13[0].__r_.__value_.__r.__words[0] = 0;
        if (((*(uint64_t (**)(void, std::string *, int *))(**((void **)this + 6) + 16))(*((void *)this + 6), v13, &v12) & 1) == 0)
        {
          *((unsigned char *)this + 5google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 1;
          goto LABEL_14;
        }
        uint64_t v6 = v12;
      }
      while (!v12);
      unint64_t v5 = (char *)v13[0].__r_.__value_.__r.__words[0];
      if (v12 >= 17)
      {
        *(_OWORD *)v13[0].__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)this;
        *(void *)this = &v5[v6 - 16];
        *((void *)this + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 0;
        return v5;
      }
      if (v12 <= 0)
      {
        std::string::size_type v10 = v13[0].__r_.__value_.__r.__words[0];
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 810);
        unint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: size > 0: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
        LODWORD(vgoogle::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v12;
        unint64_t v5 = (char *)v10;
      }
      *(_OWORD *)uint64_t v3 = *(_OWORD *)*(void *)this;
      uint64_t v7 = &v3[(int)v6];
    }
    else
    {
      *(_OWORD *)uint64_t v3 = *(_OWORD *)v5;
      uint64_t v7 = (char *)this + 32;
    }
    *(void *)this = v7;
    *((void *)this + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v5;
  }
  else
  {
    *((unsigned char *)this + 5google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 1;
    uint64_t v3 = (char *)this + 16;
LABEL_14:
    *(void *)this = (char *)this + 32;
  }
  return v3;
}

void sub_25BFDB7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::Trim(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  if (!*((unsigned char *)this + 56))
  {
    unint64_t v3 = google::protobuf::io::EpsCopyOutputStream::Flush(this, a2);
    if (v3) {
      (*(void (**)(void, unint64_t))(**((void **)this + 6) + 24))(*((void *)this + 6), v3);
    }
    a2 = (char *)this + 16;
    *(void *)this = (char *)this + 16;
    *((void *)this + google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = (char *)this + 16;
  }
  return a2;
}

char *google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  while (!*((unsigned char *)this + 56))
  {
    unint64_t v3 = &a2[-*(void *)this];
    if ((v3 & 0x80000000) != 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 829);
      unint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: overrun >= 0: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      goto LABEL_6;
    }
    if (v3 > 0x10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 830);
      std::locale v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: overrun <= kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
LABEL_6:
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    }
    a2 = &google::protobuf::io::EpsCopyOutputStream::Next(this)[(int)v3];
    if ((unint64_t)a2 < *(void *)this) {
      return a2;
    }
  }
  return (char *)this + 16;
}

void sub_25BFDB91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(google::protobuf::io::EpsCopyOutputStream *this, char *a2, int a3, unsigned __int8 *a4)
{
  std::locale v4 = a4;
  for (int i = google::protobuf::io::EpsCopyOutputStream::GetSize(this, a4);
        a3 > i;
        int i = google::protobuf::io::EpsCopyOutputStream::GetSize(this, v4))
  {
    memcpy(v4, a2, i);
    a3 -= i;
    a2 += i;
    std::locale v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, (char *)&v4[i]);
  }
  memcpy(v4, a2, a3);
  return &v4[a3];
}

uint64_t google::protobuf::io::EpsCopyOutputStream::GetSize(google::protobuf::io::EpsCopyOutputStream *this, unsigned __int8 *a2)
{
  uint64_t v3 = *(void *)this;
  if (*(void *)this + 16 < (unint64_t)a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 838);
    unint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    uint64_t v3 = *(void *)this;
  }
  return v3 - (void)a2 + 16;
}

void sub_25BFDBA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteAliasedRaw(google::protobuf::io::EpsCopyOutputStream *this, void *a2, uint64_t a3, char *a4)
{
  if (google::protobuf::io::EpsCopyOutputStream::GetSize(this, (unsigned __int8 *)a4) <= (int)a3)
  {
    unint64_t v8 = google::protobuf::io::EpsCopyOutputStream::Trim(this, a4);
    if (((*(uint64_t (**)(void, void *, uint64_t))(**((void **)this + 6) + 40))(*((void *)this + 6), a2, a3) & 1) == 0)
    {
      *((unsigned char *)this + 5google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = 1;
      unint64_t v8 = (char *)this + 16;
      *(void *)this = (char *)this + 32;
    }
    return (unsigned __int8 *)v8;
  }
  if (*(void *)this - (void)a4 >= (int)a3)
  {
    memcpy(a4, a2, (int)a3);
    return (unsigned __int8 *)&a4[(int)a3];
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, (char *)a2, a3, (unsigned __int8 *)a4);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(google::protobuf::io::EpsCopyOutputStream *this, int a2, void **a3, char *a4)
{
  std::locale v4 = a4;
  unint64_t v8 = *(void *)this;
  if (*(void *)this <= (unint64_t)a4)
  {
    std::locale v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a4);
    unint64_t v8 = *(void *)this;
  }
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v9 = *((unsigned int *)a3 + 2);
  }
  if (v8 <= (unint64_t)v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    std::string::size_type v10 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: ptr < end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  unsigned int v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *std::locale v4 = (8 * a2) | 0x82;
    unsigned int v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      int v12 = v4 + 2;
      do
      {
        *(v12 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v13 | 0x80;
        unsigned int v14 = v13 >> 7;
        ++v12;
        unsigned int v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v14;
    }
    else
    {
      v4[1] = v13;
      int v12 = v4 + 2;
    }
  }
  else
  {
    *std::locale v4 = v11;
    int v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    unsigned int v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      unsigned int v16 = v20 >> 7;
      unsigned int v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v9;
  }
  *int v12 = v16;
  size_t v17 = v12 + 1;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v18 = a3;
  }
  else {
    uint64_t v18 = *a3;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawMaybeAliased(this, v18, v9, v17);
}

void sub_25BFDBCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteRawMaybeAliased(google::protobuf::io::EpsCopyOutputStream *this, void *a2, uint64_t a3, char *a4)
{
  if (*((unsigned char *)this + 57))
  {
    return google::protobuf::io::EpsCopyOutputStream::WriteAliasedRaw(this, a2, a3, a4);
  }
  else if (*(void *)this - (void)a4 < (int)a3)
  {
    return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, (char *)a2, a3, (unsigned __int8 *)a4);
  }
  else
  {
    uint64_t v6 = (int)a3;
    memcpy(a4, a2, (int)a3);
    return (unsigned __int8 *)&a4[v6];
  }
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(google::protobuf::io::EpsCopyOutputStream *this, int a2, uint64_t a3, char *a4)
{
  std::locale v4 = a4;
  unint64_t v8 = *(void *)this;
  if (*(void *)this <= (unint64_t)a4)
  {
    std::locale v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a4);
    unint64_t v8 = *(void *)this;
  }
  if (*(char *)(a3 + 23) >= 0) {
    LODWORD(v9) = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  if (v8 <= (unint64_t)v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    std::string::size_type v10 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: ptr < end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  unsigned int v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *std::locale v4 = (8 * a2) | 0x82;
    unsigned int v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      int v12 = v4 + 2;
      do
      {
        *(v12 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v13 | 0x80;
        unsigned int v14 = v13 >> 7;
        ++v12;
        unsigned int v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = v14;
    }
    else
    {
      v4[1] = v13;
      int v12 = v4 + 2;
    }
  }
  else
  {
    *std::locale v4 = v11;
    int v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    unsigned int v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      unsigned int v16 = v20 >> 7;
      unsigned int v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v1google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6) = v9;
  }
  *int v12 = v16;
  size_t v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v18 = (char *)a3;
  }
  else {
    uint64_t v18 = *(char **)a3;
  }
  if (*(void *)this - (void)v17 < (int)v9) {
    return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, v18, v9, v17);
  }
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_25BFDBF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::VerifyVersion(google::protobuf::internal *this, google::protobuf::internal *a2, const std::string::value_type *a3, const char *a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if ((int)a2 > 3014000)
  {
    LODWORD(v2google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 3;
    char v22 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    int v23 = 76;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program requires version ");
    google::protobuf::internal::VersionString(a2, &v18);
    if ((v20 & 0x80u) == 0) {
      char v7 = (const std::string::value_type *)&v18;
    }
    else {
      char v7 = (const std::string::value_type *)v18;
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v8 = v20;
    }
    else {
      std::string::size_type v8 = v19;
    }
    std::string::append(&v24, v7, v8);
    std::string::append(&v24, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    char v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v10 = v17;
    }
    else {
      std::string::size_type v10 = v16;
    }
    std::string::append(&v24, p_p, v10);
    std::string::append(&v24, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    google::protobuf::internal::LogMessage::Finish(&v21);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
    if ((char)v20 < 0) {
      operator delete(v18);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  if ((int)this < 3014000)
  {
    LODWORD(v2google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1) = 3;
    char v22 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    int v23 = 87;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program was compiled against version ");
    google::protobuf::internal::VersionString(this, &v18);
    if ((v20 & 0x80u) == 0) {
      unsigned int v11 = (const std::string::value_type *)&v18;
    }
    else {
      unsigned int v11 = (const std::string::value_type *)v18;
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v12 = v20;
    }
    else {
      std::string::size_type v12 = v19;
    }
    std::string::append(&v24, v11, v12);
    std::string::append(&v24, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    char v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0) {
      unsigned int v13 = (const std::string::value_type *)&__p;
    }
    else {
      unsigned int v13 = (const std::string::value_type *)__p;
    }
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v14 = v17;
    }
    else {
      std::string::size_type v14 = v16;
    }
    std::string::append(&v24, v13, v14);
    std::string::append(&v24, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    google::protobuf::internal::LogMessage::Finish(&v21);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
    if ((char)v20 < 0) {
      operator delete(v18);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
}