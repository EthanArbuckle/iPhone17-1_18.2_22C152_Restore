void __WFCallRegistrationMethodsIfNeeded_block_invoke(uint64_t a1, objc_method *a2, SEL aSelector)
{
  id v6;
  uint64_t vars8;

  NSStringFromSelector(aSelector);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0 && method_getNumberOfArguments(a2) <= 2)
  {
    [*(id *)(a1 + 32) addObject:v6];
    [*(id *)(a1 + 40) aSelector];
  }
}

void WFRegisterTypeForItemClass(void *a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = [v6 objectForKey:v5];
  Class v8 = NSClassFromString(&cfstr_Wflinkentityco.isa);
  Class v9 = NSClassFromString(&cfstr_Wflinkenumerat.isa);
  int v10 = [v5 isEqualToClass:objc_opt_class()];
  int v11 = [v5 isEqualToClass:NSClassFromString(&cfstr_Wflinkenumerat_0.isa)];
  int v12 = v10 & [a2 isSubclassOfClass:v8];
  int v13 = v11 & [a2 isSubclassOfClass:v9];
  if (v7 && (v12 & 1) == 0 && (v13 & 1) == 0)
  {
    v14 = getWFContentGraphLogObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      int v17 = 136315906;
      v18 = "WFRegisterTypeForItemClass";
      __int16 v19 = 2114;
      v20 = a2;
      __int16 v21 = 2114;
      id v22 = v5;
      __int16 v23 = 2114;
      uint64_t v24 = v7;
      _os_log_impl(&dword_216505000, v14, OS_LOG_TYPE_FAULT, "%s WFContent warning: %{public}@ is trying to register itself for %{public}@, but %{public}@ is already registered.", (uint8_t *)&v17, 0x2Au);
    }
  }
  if (v12) {
    Class v15 = v8;
  }
  else {
    Class v15 = (Class)a2;
  }
  if (v13) {
    Class v16 = v9;
  }
  else {
    Class v16 = v15;
  }
  [v6 setObject:v16 forKey:v5];
}

void WFCallRegistrationMethodsIfNeeded(void *a1, void *a2, os_unfair_lock_s *a3, atomic_uchar *a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  os_unfair_lock_lock(a3);
  int v11 = 1;
  atomic_compare_exchange_strong(a4, (unsigned __int8 *)&v11, 0);
  if (v11 == 1)
  {
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 3221225472;
    v12[2] = __WFCallRegistrationMethodsIfNeeded_block_invoke;
    v12[3] = &unk_264287A20;
    id v13 = v10;
    v14 = a1;
    objc_msgSend(a1, "wf_enumerateClassMethodsWithPrefix:usingBlock:", v9, v12);
  }
  os_unfair_lock_unlock(a3);
}

id WFContentItemRegistry.register(_:)()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  return objc_msgSend(v0, sel_registerContentItemClass_, ObjCClassFromMetadata);
}

id WFContentItemRegistry.contentItemClass(for:)(uint64_t a1)
{
  id result = objc_msgSend(v1, sel_contentItemClassForType_, a1);
  if (result)
  {
    swift_getObjCClassMetadata();
    sub_21650A7F8();
    return (id)swift_dynamicCastMetatypeUnconditional();
  }
  return result;
}

unint64_t sub_21650A7F8()
{
  unint64_t result = qword_26AB356A8;
  if (!qword_26AB356A8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26AB356A8);
  }
  return result;
}

void WFContentItemRegistry.contentItemClasses(supporting:)(uint64_t a1)
{
  id v5 = objc_msgSend(v1, sel_contentItemClassesSupportingType_, a1);
  uint64_t v6 = sub_216605F30();

  if (*(void *)(v6 + 16))
  {
    OUTLINED_FUNCTION_3(MEMORY[0x263F8EE78]);
    sub_21650AD6C(v6);
    OUTLINED_FUNCTION_8();
    while ((v2 & 0x8000000000000000) == 0)
    {
      OUTLINED_FUNCTION_5();
      if (v7 == v8) {
        break;
      }
      OUTLINED_FUNCTION_6();
      if ((v17 & 1) == 0) {
        goto LABEL_17;
      }
      if (*(_DWORD *)(v6 + 36) != v3) {
        goto LABEL_18;
      }
      uint64_t v18 = OUTLINED_FUNCTION_7(v9, v10, v11, v12, v13, v14, v15, v16, v29, v31, v33);
      OUTLINED_FUNCTION_1(v18, v19, v20, v21, v22, v23, v24, v25, v30, v32, v34, v35, v36, v37, v38[0], v38[1], v39, v40, v41,
        v42);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26AB356B0);
      swift_dynamicCast();
      sub_21650AE8C((uint64_t)v38);
      uint64_t v26 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_4();
        uint64_t v26 = v43;
      }
      unint64_t v27 = *(void *)(v26 + 24);
      if (*(void *)(v26 + 16) >= v27 >> 1) {
        OUTLINED_FUNCTION_2(v27);
      }
      OUTLINED_FUNCTION_0();
      if (v28)
      {
        sub_21650AEE0(v2, v3, v4);
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void WFContentItemRegistry.contentItemClasses.getter()
{
  id v4 = objc_msgSend(v0, sel_contentItemClasses);
  uint64_t v5 = sub_216605F30();

  if (*(void *)(v5 + 16))
  {
    OUTLINED_FUNCTION_3(MEMORY[0x263F8EE78]);
    sub_21650AD6C(v5);
    OUTLINED_FUNCTION_8();
    while ((v1 & 0x8000000000000000) == 0)
    {
      OUTLINED_FUNCTION_5();
      if (v6 == v7) {
        break;
      }
      OUTLINED_FUNCTION_6();
      if ((v16 & 1) == 0) {
        goto LABEL_17;
      }
      if (*(_DWORD *)(v5 + 36) != v2) {
        goto LABEL_18;
      }
      uint64_t v17 = OUTLINED_FUNCTION_7(v8, v9, v10, v11, v12, v13, v14, v15, v28, v30, v32);
      OUTLINED_FUNCTION_1(v17, v18, v19, v20, v21, v22, v23, v24, v29, v31, v33, v34, v35, v36, v37[0], v37[1], v38, v39, v40,
        v41);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26AB356B0);
      swift_dynamicCast();
      sub_21650AE8C((uint64_t)v37);
      uint64_t v25 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_4();
        uint64_t v25 = v42;
      }
      unint64_t v26 = *(void *)(v25 + 24);
      if (*(void *)(v25 + 16) >= v26 >> 1) {
        OUTLINED_FUNCTION_2(v26);
      }
      OUTLINED_FUNCTION_0();
      if (v27)
      {
        sub_21650AEE0(v1, v2, v3);
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

char *sub_21650AB1C(char *a1, int64_t a2, char a3)
{
  unint64_t result = sub_21650AB3C(a1, a2, a3, *v3);
  *char v3 = result;
  return result;
}

char *sub_21650AB3C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_21650AC38();
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[8 * v8] <= v12) {
      memmove(v12, v13, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 8 * v8);
  }
  swift_release();
  return v10;
}

uint64_t sub_21650AC38()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_26AB356B0);
  if (dynamic_cast_existential_0_class_conditional(v0)) {
    uint64_t v1 = (uint64_t *)&unk_267988330;
  }
  else {
    uint64_t v1 = (uint64_t *)&unk_26AB356B8;
  }
  return __swift_instantiateConcreteTypeFromMangledName(v1);
}

int64_t sub_21650AC88(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_21650AD6C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_21650ADEC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_21650AE8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_21650AEE0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t dynamic_cast_existential_0_class_conditional(uint64_t a1)
{
  if (swift_isClassType()) {
    return a1;
  }
  else {
    return 0;
  }
}

int64_t OUTLINED_FUNCTION_0()
{
  *(void *)(v1 + 16) = v7;
  *(void *)(v1 + 8 * v6 + 32) = v5;
  return sub_21650AC88(v2, v3, v4 & 1, v0);
}

uint64_t OUTLINED_FUNCTION_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, long long a16, uint64_t a17, long long a18, long long a19, uint64_t a20)
{
  a15 = a18;
  a16 = a19;
  a17 = a20;
  return sub_21650ADEC((uint64_t)&a15, (uint64_t)&a10);
}

char *OUTLINED_FUNCTION_2@<X0>(unint64_t a1@<X8>)
{
  return sub_21650AB1C((char *)(a1 > 1), v1, 1);
}

char *OUTLINED_FUNCTION_3@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 88) = a1;
  return sub_21650AB1C(0, v1, 0);
}

char *OUTLINED_FUNCTION_4()
{
  int64_t v2 = *(void *)(v0 + 16) + 1;
  return sub_21650AB1C(0, v2, 1);
}

uint64_t OUTLINED_FUNCTION_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  uint64_t v14 = *(void *)(v11 + 48) + 40 * v12;
  return sub_21650ADEC(v14, (uint64_t)va);
}

unint64_t StaticString._asString.getter(unint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    if (result) {
      return sub_216605F10();
    }
    __break(1u);
  }
  if (HIDWORD(result))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return sub_216605F10();
  }
  if (result >> 11 == 27) {
    goto LABEL_14;
  }
  if (WORD1(result) > 0x10u) {
    goto LABEL_11;
  }
  if ((result & 0xFFFFFF80) != 0 || result <= 0xFF) {
    return sub_216605F10();
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

id static NSBundle._current.getter()
{
  if (qword_267988328 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_267988338;
  return v0;
}

id sub_21650B1C0()
{
  _s2__CMa();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  qword_267988338 = (uint64_t)result;
  return result;
}

uint64_t sub_21650B218()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t _s2__CMa()
{
  return self;
}

uint64_t WFContentCollection.objectRepresentation(for:)(uint64_t a1)
{
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 112) = v1;
  return MEMORY[0x270FA2498](sub_21650B26C, 0, 0);
}

uint64_t sub_21650B26C()
{
  uint64_t v1 = (void *)v0[14];
  v0[2] = v0;
  v0[7] = v0 + 10;
  v0[3] = sub_21650B318;
  uint64_t v2 = swift_continuation_init();
  sub_21650B45C(v2, v1);
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_21650B318()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void **)v0;
  if (*(void *)(*(void *)v0 + 48))
  {
    swift_willThrow();
    uint64_t v3 = (uint64_t (*)(void))v2[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v1[10];
    uint64_t v6 = v1[11];
    uint64_t v7 = v1[12];
    unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v2[1];
    return v8(v5, v6, v7);
  }
}

void sub_21650B45C(uint64_t a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  v6[4] = sub_21650B9A0;
  v6[5] = v4;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 1107296256;
  v6[2] = sub_21650B64C;
  v6[3] = &block_descriptor;
  uint64_t v5 = _Block_copy(v6);
  swift_release();
  objc_msgSend(a2, sel_getObjectRepresentation_forClass_, v5, swift_getObjCClassFromMetadata());
  _Block_release(v5);
}

uint64_t sub_21650B540(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (a4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_267988350);
    uint64_t v7 = swift_allocError();
    *unint64_t v8 = a4;
    id v9 = a4;
    return MEMORY[0x270FA2410](a5, v7);
  }
  else
  {
    sub_21650BA20(a1, (uint64_t)v17);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26AB35688);
    int v12 = swift_dynamicCast();
    uint64_t v13 = v16;
    if (!v12) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(void **)(*(void *)(a5 + 64) + 40);
    void *v14 = v13;
    v14[1] = a2;
    v14[2] = a3;
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_21650B64C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void (**)(long long *, uint64_t, uint64_t, void *))(a1 + 32);
  if (!a2)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v8 = 0;
    goto LABEL_6;
  }
  *((void *)&v13 + 1) = swift_getObjectType();
  *(void *)&long long v12 = a2;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v8 = sub_216605F00();
  uint64_t v5 = v9;
LABEL_6:
  swift_retain();
  swift_unknownObjectRetain();
  id v10 = a4;
  v7(&v12, v8, v5, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return sub_21650B9C0((uint64_t)&v12);
}

uint64_t WFContentCollection.objectRepresentation<A>(for:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 40) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_21650B7B0;
  return WFContentCollection.objectRepresentation(for:)(a1);
}

uint64_t sub_21650B7B0(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 48) = a1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x270FA2498](sub_21650B8F0, 0, 0);
  }
}

uint64_t sub_21650B8F0()
{
  uint64_t v1 = v0[6];
  if (v1)
  {
    v0[2] = v1;
    if (swift_dynamicCast()) {
      uint64_t v2 = v0[3];
    }
    else {
      uint64_t v2 = 0;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

uint64_t sub_21650B990()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_21650B9A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_21650B540(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_21650B9C0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26AB35688);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21650BA20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26AB35688);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id WFContentProperty.valueItemClass.getter()
{
  id result = objc_msgSend(v0, sel_valueItemClass);
  if (result)
  {
    swift_getObjCClassMetadata();
    sub_21650A7F8();
    return (id)swift_dynamicCastMetatype();
  }
  return result;
}

uint64_t WFContentPropertyPossibleValuesGetter.unsafeValues.getter()
{
  id v1 = WFContentPropertyGetPossibleValuesSynchronouslyWithSemaphore(v0);
  uint64_t v2 = sub_216605F20();

  return v2;
}

void sub_21650EE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_21650F11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_21650F3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_21650F614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_216510B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id WFFilenameByApplyingFormatStringToBasenameAndAppendPathExtension(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a4;
  if (a3)
  {
    uint64_t v12 = objc_msgSend(NSString, "stringWithFormat:", v10, v9);

    id v9 = (id)v12;
  }
  if (a5)
  {
    uint64_t v13 = [v9 stringByAppendingPathExtension:v11];

    id v9 = (id)v13;
  }

  return v9;
}

uint64_t __WFSubstringByEncodingComposedCharacterSequencesToMaxLength_block_invoke(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t result = [a2 lengthOfBytesUsingEncoding:a1[6]];
  uint64_t v11 = *(void *)(a1[4] + 8);
  unint64_t v12 = *(void *)(v11 + 24) + result;
  if (v12 <= a1[7])
  {
    *(void *)(v11 + 24) = v12;
  }
  else
  {
    *(void *)(*(void *)(a1[5] + 8) + 24) = a3;
    *a7 = 1;
  }
  return result;
}

uint64_t file_softmagic(uint64_t *a1, long long *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned int a5, unsigned int a6)
{
  uint64_t v8 = a4;
  uint64_t v16 = 0;
  __int16 v15 = 0;
  if (!a4)
  {
    __int16 v15 = 0;
    uint64_t v8 = (unsigned __int16 *)&v15;
  }
  __int16 v14 = 0;
  if (a3) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = (unsigned __int16 *)&v14;
  }
  uint64_t v12 = *a1;
  while (1)
  {
    uint64_t v12 = *(void *)(v12 + 24);
    if (v12 == *a1) {
      break;
    }
    uint64_t result = match((uint64_t)a1, *(void *)v12, *(unsigned int *)(v12 + 8), a2, 0, a5, a6, 0, v11, v8, (_DWORD *)&v16 + 1, (int *)&v16, 0, 0);
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t match(uint64_t a1, uint64_t a2, unint64_t a3, long long *a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned __int16 *a9, unsigned __int16 *a10, _DWORD *a11, int *a12, unsigned int *a13, char *a14)
{
  uint64_t v20 = a14;
  v102[0] = 0;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v99 = 0u;
  memset(&v98[2], 0, 112);
  if (a13) {
    uint64_t v21 = a13;
  }
  else {
    uint64_t v21 = (unsigned int *)v102;
  }
  memset(v98, 0, 32);
  if (!a14) {
    uint64_t v20 = (char *)v102 + 4;
  }
  v95 = v21;
  v96 = v20;
  int v22 = *(_DWORD *)(a1 + 68);
  uint64_t result = file_check_mem(a1, 0);
  if (result == -1) {
    return result;
  }
  uint64_t v94 = a5;
  if (!a3) {
    return *v95;
  }
  unint64_t v26 = a3;
  LODWORD(a3) = 0;
  int v83 = v22 & 0x1000C10;
  uint64_t v27 = a2 + 4;
  unint64_t v28 = (v26 - 1);
  unint64_t v82 = v26;
  uint64_t v29 = a2 + 376;
  unsigned int v84 = 1;
  uint64_t v85 = a2;
  unsigned int v86 = a7;
  unsigned int v89 = v26;
  unint64_t v92 = v28;
  uint64_t v93 = a2 + 4;
  uint64_t v91 = a2 + 376;
  while (1)
  {
    unint64_t v30 = a3;
    uint64_t v31 = a2 + 376 * a3;
    uint64_t v32 = *(unsigned __int8 *)(v31 + 6);
    if (*(unsigned __int8 *)(v31 + 6) <= 0x2Eu)
    {
      if (((1 << v32) & 0x4200001E2020) != 0)
      {
        int v33 = *(_DWORD *)(v27 + 376 * a3 + 24) & 0x60;
        if (a7)
        {
          if (v33 == 64) {
            goto LABEL_41;
          }
        }
        else if (v33 == 32)
        {
          goto LABEL_41;
        }
      }
      else if (v32 == 45)
      {
        goto LABEL_18;
      }
    }
    if ((a6 & ~*(unsigned __int8 *)(a2 + 376 * a3 + 2)) != 0) {
      goto LABEL_41;
    }
LABEL_18:
    unint64_t v34 = v26;
    if (msetoffset(a1, a2 + 376 * a3, (uint64_t)v98, (uint64_t)a4, v94, 0, v24, v25) == -1)
    {
      unint64_t v28 = v92;
      uint64_t v27 = v93;
      uint64_t v29 = v91;
      unint64_t v26 = v34;
      goto LABEL_41;
    }
    *(void *)(a1 + 88) = *(unsigned int *)(a2 + 376 * a3 + 20);
    unint64_t v87 = v100;
    uint64_t result = mget(a1, a2 + 376 * a3, a4, *((uint64_t *)&v99 + 1), v100, v94, 0, a6, a7, a8, a9, a10, (uint64_t)a11, a12, (uint64_t)v95, (uint64_t)v96);
    if (result) {
      break;
    }
    unint64_t v26 = v89;
    long long v39 = a12;
    if (*(unsigned char *)(a2 + 376 * a3 + 4) == 33) {
      goto LABEL_28;
    }
    a7 = v86;
    a2 = v85;
    unint64_t v28 = v92;
    uint64_t v27 = v93;
    uint64_t v29 = v91;
LABEL_41:
    if (a3 <= v28) {
      int v50 = v28;
    }
    else {
      int v50 = a3;
    }
    if (v30 <= v28) {
      unint64_t v51 = v28;
    }
    else {
      unint64_t v51 = v30;
    }
    v52 = (unsigned __int16 *)(v29 + 376 * v30);
    while (v51 != v30)
    {
      int v53 = v30++;
      int v54 = *v52;
      v52 += 188;
      if (!v54)
      {
        int v50 = v53;
        break;
      }
    }
    LODWORD(a3) = v50 + 1;
LABEL_52:
    if (a3 >= v26) {
      return *v95;
    }
  }
  if (result == -1) {
    return result;
  }
  if (*(unsigned char *)(v31 + 6) == 41)
  {
    _DWORD *v96 = 1;
    unsigned int *v95 = 1;
  }
  uint64_t result = magiccheck(a1, (char *)(a2 + 376 * a3), v35, v36, v37, v38, v24, v25);
  if (!result)
  {
    a7 = v86;
    unint64_t v26 = v89;
    a2 = v85;
    unint64_t v28 = v92;
    uint64_t v27 = v93;
    uint64_t v29 = v91;
    goto LABEL_41;
  }
  long long v39 = a12;
  if (result == -1) {
    return result;
  }
LABEL_28:
  a2 = v85;
  uint64_t v40 = v85 + 376 * a3;
  int v42 = *(unsigned __int8 *)(v40 + 160);
  uint64_t v41 = (unsigned char *)(v40 + 160);
  unsigned int v43 = v84;
  if (v42) {
    _DWORD *v96 = 1;
  }
  uint64_t result = handle_annotation(a1, (char *)v31, v84, v36, v37, v38, v24, v25);
  if (result)
  {
LABEL_112:
    *long long v39 = 1;
    *a11 = 1;
    unsigned int *v95 = 1;
    return result;
  }
  if (v83
    || !*v41
    || ((*long long v39 = 1, *a11 = 1, *v95 = 1, v84)
     || (uint64_t result = file_printf(a1, "\n- ", v44, v45, v46, v47, v48, v49, v79), result != -1))
    && (uint64_t result = mprint(a1, (char *)v31), result != -1))
  {
    if (moffset(a1, (unsigned __int16 *)v31, v87, *(_DWORD **)(a1 + 24)) + 1 >= 2)
    {
      uint64_t result = file_check_mem(a1, 1u);
      if (result == -1) {
        return result;
      }
      unsigned int v55 = 1;
LABEL_56:
      unint64_t v56 = v82;
      unint64_t v26 = v89;
      while (1)
      {
        int v57 = a3;
        uint64_t v58 = v85 + 376 * a3;
        a3 = a3;
        do
        {
          if (a3 + 1 >= v56)
          {
            if (v26 <= v57 + 1) {
              LODWORD(a3) = v57 + 1;
            }
            else {
              LODWORD(a3) = v26;
            }
LABEL_103:
            uint64_t v29 = v91;
            if (*a11) {
              unsigned int v43 = 0;
            }
            a7 = v86;
            unint64_t v28 = v92;
            uint64_t v27 = v93;
            if (*v96)
            {
              if ((*(unsigned char *)(a1 + 68) & 0x20) == 0) {
                return *v95;
              }
              unsigned int v84 = 0;
              *a11 = 0;
            }
            else
            {
              unsigned int v84 = v43;
            }
            goto LABEL_52;
          }
          uint64_t v59 = *(unsigned __int16 *)(v58 + 376);
          if (!*(_WORD *)(v58 + 376))
          {
            LODWORD(a3) = a3 + 1;
            goto LABEL_103;
          }
          *(void *)(a1 + 88) = *(unsigned int *)(v58 + 396);
          v58 += 376;
          ++a3;
        }
        while (v55 < v59);
        if (msetoffset(a1, v58, (uint64_t)v98, (uint64_t)a4, v94, v59, v24, v25) == -1)
        {
          unint64_t v30 = a3;
          a7 = v86;
          unint64_t v28 = v92;
          uint64_t v27 = v93;
          uint64_t v29 = v91;
          goto LABEL_38;
        }
        v88 = (unsigned char *)(v85 + 376 * a3 + 2);
        unint64_t v26 = v89;
        if ((*v88 & 2) != 0) {
          *(_DWORD *)(a1 + 56) += *(_DWORD *)(*(void *)(a1 + 24) + 16 * (v59 - 1));
        }
        unint64_t v56 = v82;
        if ((*(unsigned char *)(v85 + 376 * a3 + 10) & 0xFE) == 2)
        {
          unsigned int v55 = v59;
          if (*(_DWORD *)(*(void *)(a1 + 24) + 16 * v59 + 8) == 1) {
            continue;
          }
        }
        unint64_t v60 = v100;
        uint64_t result = mget(a1, v58, a4, *((uint64_t *)&v99 + 1), v100, v94, v59, a6, v86, a8, a9, a10, (uint64_t)a11, v39, (uint64_t)v95, (uint64_t)v96);
        if (result)
        {
          if (result == -1) {
            return result;
          }
          if (*(unsigned char *)(v85 + 376 * a3 + 6) == 41)
          {
            _DWORD *v96 = 1;
            unsigned int *v95 = 1;
          }
          uint64_t result = magiccheck(a1, (char *)v58, v61, v62, v63, v64, v24, v25);
          if (!result)
          {
            *(_DWORD *)(*(void *)(a1 + 24) + 16 * v59 + 8) = 0;
            unsigned int v55 = v59;
            goto LABEL_56;
          }
          unint64_t v81 = v60;
          unint64_t v56 = v82;
          unint64_t v26 = v89;
          if (result == -1) {
            return result;
          }
        }
        else
        {
          unint64_t v81 = v60;
          unsigned int v55 = v59;
          unint64_t v56 = v82;
          unint64_t v26 = v89;
          if (*(unsigned char *)(v85 + 376 * a3 + 4) != 33) {
            continue;
          }
        }
        uint64_t v65 = *(void *)(a1 + 24) + 16 * v59;
        *(_DWORD *)(v65 + 8) = 1;
        int v66 = *(unsigned __int8 *)(v85 + 376 * a3 + 6);
        v67 = (int *)(v65 + 4);
        if (v66 == 47)
        {
          int v68 = 0;
          goto LABEL_80;
        }
        if (*v67)
        {
          unsigned int v55 = v59;
          if (v66 == 3) {
            continue;
          }
        }
        else
        {
          int v68 = 1;
LABEL_80:
          int *v67 = v68;
        }
        uint64_t v69 = v85 + 376 * a3;
        int v71 = *(unsigned __int8 *)(v69 + 160);
        v70 = (unsigned char *)(v69 + 160);
        if (v71) {
          _DWORD *v96 = 1;
        }
        uint64_t result = handle_annotation(a1, (char *)v58, v84, v62, v63, v64, v24, v25);
        if (result) {
          goto LABEL_112;
        }
        if (!v83 && *v70)
        {
          if (!*a11)
          {
            *a11 = 1;
            if (!v84)
            {
              uint64_t result = file_printf(a1, "\n- ", v72, v73, v74, v75, v76, v77, v80);
              if (result == -1) {
                return result;
              }
            }
          }
          if (*v39)
          {
            if ((*v88 & 0x10) == 0)
            {
              uint64_t result = file_printf(a1, " ", v72, v73, v74, v75, v76, v77, v80);
              if (result == -1) {
                return result;
              }
            }
          }
          unsigned int *v95 = 1;
          *long long v39 = 0;
          uint64_t result = mprint(a1, (char *)v58);
          if (result == -1) {
            return result;
          }
          *long long v39 = 1;
        }
        if (moffset(a1, (unsigned __int16 *)v58, v81, (_DWORD *)(*(void *)(a1 + 24) + 16 * v59)) + 1 <= 1) {
          LODWORD(v59) = v59 - 1;
        }
        unsigned int v55 = v59 + 1;
        int v78 = file_check_mem(a1, (int)v59 + 1);
        uint64_t result = 0xFFFFFFFFLL;
        unint64_t v56 = v82;
        unint64_t v26 = v89;
        if (v78 == -1) {
          return result;
        }
      }
    }
    a7 = v86;
    unint64_t v28 = v92;
    uint64_t v27 = v93;
    uint64_t v29 = v91;
LABEL_38:
    unint64_t v26 = v89;
    goto LABEL_41;
  }
  return result;
}

uint64_t msetoffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12 = *(char *)(a2 + 2);
  int v13 = *(_DWORD *)(a2 + 12);
  if ((v12 & 0x80000000) == 0)
  {
    if (a6)
    {
      int v14 = *(_DWORD *)(a1 + 60) + v13;
      *(_DWORD *)(a1 + 56) = v14;
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v17 = *(void *)(a4 + 152);
    uint64_t v18 = *(void *)(a4 + 160);
    *(_DWORD *)a3 = -1;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *(_OWORD *)(a3 + 136) = 0u;
    *(void *)(a3 + 152) = v17;
    *(void *)(a3 + 160) = v18;
    *(void *)(a3 + 176) = 0;
    *(void *)(a3 + 184) = 0;
    *(void *)(a3 + 168) = 0;
    int v14 = v13;
    *(_DWORD *)(a1 + 56) = v13;
    *(_DWORD *)(a1 + 60) = 0;
    goto LABEL_7;
  }
  int v13 = -v13;
  if (a6 && (v12 & 6) != 0) {
    goto LABEL_6;
  }
  uint64_t v20 = *(void *)(a4 + 184);
  if (v20 == -1) {
    return 0xFFFFFFFFLL;
  }
  if (!v20)
  {
    if ((*(_WORD *)(a4 + 12) & 0xF000) == 0x8000)
    {
      size_t v21 = *(void *)(a4 + 104) >= *(void *)(a4 + 160) ? *(void *)(a4 + 160) : *(void *)(a4 + 104);
      *(void *)(a4 + 184) = v21;
      int v22 = malloc_type_malloc(v21, 0x496C7C3DuLL);
      *(void *)(a4 + 176) = v22;
      if (v22)
      {
        size_t v23 = *(void *)(a4 + 184);
        off_t v24 = *(void *)(a4 + 104) - v23;
        *(void *)(a4 + 168) = v24;
        if (pread(*(_DWORD *)a4, v22, v23, v24) != -1) {
          goto LABEL_19;
        }
        free(*(void **)(a4 + 176));
        *(void *)(a4 + 176) = 0;
      }
    }
    *(void *)(a4 + 184) = -1;
    return 0xFFFFFFFFLL;
  }
LABEL_19:
  if (a5)
  {
    file_magerror(a1, "non zero offset %zu at level %u", a3, a4, a5, a6, a7, a8, a5, a6);
    return 0xFFFFFFFFLL;
  }
  unint64_t v25 = *(void *)(a4 + 184);
  uint64_t result = 0xFFFFFFFFLL;
  if (v25 < *(int *)(a2 + 12)) {
    return result;
  }
  uint64_t v26 = *(void *)(a4 + 176);
  *(_DWORD *)a3 = -1;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(void *)(a3 + 152) = v26;
  *(void *)(a3 + 160) = v25;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  *(void *)(a3 + 168) = 0;
  int v14 = *(_DWORD *)(a4 + 184) - *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 56) = v14;
  *(_DWORD *)(a1 + 60) = v14;
LABEL_7:
  if (*(unsigned char *)(a1 + 68)) {
    fprintf((FILE *)*MEMORY[0x263EF8348], "bb=[%p,%zu,%zu], %d [b=%p,%zu,%zu], [o=%#x, c=%d]\n", *(const void **)(a3 + 152), *(void *)(a3 + 160), *(void *)(a3 + 184), v14, *(const void **)(a4 + 152), *(void *)(a4 + 160), *(void *)(a4 + 184), v13, a6);
  }
  return 0;
}

uint64_t mget(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned __int16 *a11, unsigned __int16 *a12, uint64_t a13, int *a14, uint64_t a15, uint64_t a16)
{
  unint64_t v17 = *(unsigned int *)(a1 + 56);
  long long v137 = 0u;
  long long v138 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  uint64_t v126 = 0;
  memset(v125, 0, sizeof(v125));
  if (*a11 >= *(unsigned __int16 *)(a1 + 264))
  {
    file_error(a1, 0, "indirect count (%hu) exceeded", a4, a5, a6, a7, a8, *a11);
    return 0xFFFFFFFFLL;
  }
  if (*a12 >= *(unsigned __int16 *)(a1 + 266))
  {
    file_error(a1, 0, "name use count (%hu) exceeded", a4, a5, a6, a7, a8, *a12);
    return 0xFFFFFFFFLL;
  }
  int v18 = a7;
  unsigned int v122 = a8;
  mcopy(a1, (char *)(a1 + 136), *(unsigned __int8 *)(a2 + 6), *(unsigned char *)(a2 + 2) & 1, a4, v17 + a6, a5, a2);
  if (*(unsigned char *)(a1 + 68))
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "mget(type=%d, flag=%#x, offset=%u, o=%zu, nbytes=%zu, il=%hu, nc=%hu)\n", *(unsigned __int8 *)(a2 + 6), *(unsigned __int8 *)(a2 + 2), v17, a6, a5, *a11, *a12);
    mdebug(v17, (unsigned char *)(a1 + 136));
    file_mdump(a2);
  }
  __dst = (unsigned int *)(a1 + 136);
  if ((*(unsigned char *)(a2 + 2) & 1) == 0) {
    goto LABEL_118;
  }
  uint64_t v29 = *(int *)(a2 + 16);
  char v30 = *(unsigned char *)(a2 + 8);
  if (v30 < 0)
  {
    uint64_t v38 = (unsigned __int8 *)(a4 + v17 + v29);
    int v39 = *(unsigned __int8 *)(a2 + 7);
    if (a10)
    {
      uint64_t v40 = (v39 - 7);
      if v40 <= 0x25 && ((0x30DB6C033FuLL >> (v39 - 7))) {
        int v39 = *(_DWORD *)&asc_21661270C[4 * v40];
      }
    }
    if (v39 <= 0x16u)
    {
      switch((char)v39)
      {
        case 1:
          uint64_t v36 = 0;
          if (v29 + v17 == a5 || (v29 + v17) > a5) {
            return v36;
          }
          uint64_t v41 = (char)*v38;
          uint64_t v42 = v41;
          goto LABEL_96;
        case 2:
          uint64_t v36 = 0;
          if (a5 < (v29 + v17) || a5 - (v29 + v17) < 2) {
            return v36;
          }
          uint64_t v41 = *(__int16 *)v38;
          uint64_t v42 = (unsigned __int16)v41;
          goto LABEL_96;
        case 4:
        case 11:
          goto LABEL_40;
        case 7:
          uint64_t v36 = 0;
          if (a5 < (v29 + v17) || a5 - (v29 + v17) < 2) {
            return v36;
          }
          uint64_t v56 = *v38;
          uint64_t v57 = v38[1];
          goto LABEL_105;
        case 8:
          goto LABEL_88;
        case 10:
          uint64_t v36 = 0;
          if (a5 < (v29 + v17) || a5 - (v29 + v17) < 2) {
            return v36;
          }
          uint64_t v56 = v38[1];
          uint64_t v57 = *v38;
LABEL_105:
          uint64_t v58 = v57 | (v56 << 8);
          uint64_t v59 = (__int16)(v57 | ((_WORD)v56 << 8));
          if ((*(unsigned char *)(a2 + 8) & 0x20) != 0) {
            uint64_t v29 = v59;
          }
          else {
            uint64_t v29 = v58;
          }
          break;
        default:
          goto LABEL_201;
      }
      goto LABEL_199;
    }
    if (v39 <= 0x19u)
    {
      if (v39 != 23)
      {
        if (v39 == 25)
        {
          uint64_t v36 = 0;
          if (a5 < (v29 + v17) || a5 - (v29 + v17) < 8) {
            return v36;
          }
          uint64_t v29 = *(void *)v38;
          goto LABEL_199;
        }
        goto LABEL_201;
      }
      uint64_t v36 = 0;
      if (a5 < (v29 + v17) || a5 - (v29 + v17) < 4) {
        return v36;
      }
      unsigned int v52 = v38[1];
      uint64_t v53 = *v38;
      uint64_t v54 = v38[3];
      uint64_t v55 = v38[2];
    }
    else
    {
      if (v39 == 26)
      {
        uint64_t v36 = 0;
        if (a5 < (v29 + v17) || a5 - (v29 + v17) < 8) {
          return v36;
        }
        uint64_t v29 = bswap64(*(void *)v38);
        goto LABEL_199;
      }
      if (v39 != 39)
      {
        if (v39 == 40)
        {
LABEL_40:
          uint64_t v36 = 0;
          if (a5 < (v29 + v17) || a5 - (v29 + v17) < 4) {
            return v36;
          }
          uint64_t v41 = *(int *)v38;
          uint64_t v42 = v41;
LABEL_96:
          if ((*(unsigned char *)(a2 + 8) & 0x20) != 0) {
            uint64_t v29 = v41;
          }
          else {
            uint64_t v29 = v42;
          }
          goto LABEL_199;
        }
LABEL_201:
        if (*(unsigned char *)(a1 + 68)) {
          fprintf((FILE *)*MEMORY[0x263EF8348], "bad op=%d\n");
        }
        return 0;
      }
LABEL_88:
      uint64_t v36 = 0;
      if (a5 < (v29 + v17) || a5 - (v29 + v17) < 4) {
        return v36;
      }
      unsigned int v52 = *v38;
      uint64_t v53 = v38[1];
      uint64_t v54 = v38[2];
      uint64_t v55 = v38[3];
    }
    unint64_t v103 = ((unint64_t)v52 << 24) | (v53 << 16) | (v54 << 8) | v55;
    uint64_t v104 = (int)(v52 << 24) | (unint64_t)(v53 << 16) | (v54 << 8) | v55;
    if ((*(unsigned char *)(a2 + 8) & 0x20) != 0) {
      uint64_t v29 = v104;
    }
    else {
      uint64_t v29 = v103;
    }
LABEL_199:
    if (*(unsigned char *)(a1 + 68))
    {
      char v121 = *(unsigned char *)(a2 + 8);
      uint64_t v105 = v29;
      fprintf((FILE *)*MEMORY[0x263EF8348], "indirect offs=%jd\n", v29);
      uint64_t v29 = v105;
      char v30 = v121;
    }
  }
  int v31 = *(unsigned __int8 *)(a2 + 7);
  if (a10)
  {
    uint64_t v32 = (v31 - 7);
    if v32 <= 0x25 && ((0x30DB6C033FuLL >> (v31 - 7))) {
      int v31 = *(_DWORD *)&asc_21661270C[4 * v32];
    }
  }
  if (v31 <= 0x16u)
  {
    switch((char)v31)
    {
      case 1:
        if (a5 <= v17) {
          return 0;
        }
        int v33 = (char *)(a1 + 136);
        uint64_t v34 = *(unsigned __int8 *)__dst;
        uint64_t v35 = (char)v34;
        goto LABEL_66;
      case 2:
        uint64_t v36 = 0;
        if (a5 < v17 || a5 - v17 < 2) {
          return v36;
        }
        int v33 = (char *)(a1 + 136);
        uint64_t v34 = *(unsigned __int16 *)__dst;
        uint64_t v35 = (__int16)v34;
        goto LABEL_66;
      case 4:
        uint64_t v36 = 0;
        if (a5 < v17 || a5 - v17 < 4) {
          return v36;
        }
        int v33 = (char *)(a1 + 136);
        uint64_t v34 = *__dst;
        uint64_t v35 = (int)v34;
LABEL_66:
        if ((v30 & 0x20) != 0) {
          uint64_t v34 = v35;
        }
        goto LABEL_85;
      case 7:
        uint64_t v36 = 0;
        if (a5 < v17 || a5 - v17 < 2) {
          return v36;
        }
        uint64_t v47 = *(unsigned __int8 *)(a1 + 136);
        uint64_t v48 = *(unsigned __int8 *)(a1 + 137);
        if ((v30 & 0x20) == 0) {
          goto LABEL_72;
        }
        goto LABEL_76;
      case 8:
        goto LABEL_48;
      case 10:
        uint64_t v36 = 0;
        if (a5 < v17 || a5 - v17 < 2) {
          return v36;
        }
        uint64_t v47 = *(unsigned __int8 *)(a1 + 137);
        uint64_t v48 = *(unsigned __int8 *)(a1 + 136);
        if ((v30 & 0x20) != 0) {
LABEL_76:
        }
          uint64_t v34 = (__int16)(v48 | ((_WORD)v47 << 8));
        else {
LABEL_72:
        }
          uint64_t v34 = v48 | (v47 << 8);
        break;
      case 11:
        goto LABEL_32;
      default:
        goto LABEL_91;
    }
LABEL_84:
    int v33 = (char *)(a1 + 136);
    goto LABEL_85;
  }
  if (v31 > 0x19u)
  {
    switch(v31)
    {
      case 0x1Au:
        uint64_t v36 = 0;
        if (a5 < v17 || a5 - v17 < 8) {
          return v36;
        }
        uint64_t v34 = bswap64(*(void *)(a1 + 136));
        goto LABEL_84;
      case 0x27u:
LABEL_48:
        uint64_t v36 = 0;
        if (a5 < v17 || a5 - v17 < 4) {
          return v36;
        }
        unsigned int v43 = bswap32(*(_DWORD *)(a1 + 136));
        if (v31 != 39) {
          goto LABEL_52;
        }
        goto LABEL_51;
      case 0x28u:
LABEL_32:
        uint64_t v36 = 0;
        if (a5 < v17 || a5 - v17 < 4) {
          return v36;
        }
        unsigned int v43 = *(_DWORD *)(a1 + 136);
        if (v31 != 40) {
          goto LABEL_52;
        }
LABEL_51:
        char v44 = v30;
        uint64_t v45 = v29;
        unsigned int v46 = cvt_id3(*(_DWORD *)(a1 + 68), v43);
        uint64_t v29 = v45;
        char v30 = v44;
        unsigned int v43 = v46;
LABEL_52:
        int v33 = (char *)(a1 + 136);
        uint64_t v34 = (int)v43;
        if ((v30 & 0x20) == 0) {
          uint64_t v34 = v43;
        }
        goto LABEL_85;
    }
LABEL_91:
    if (*(unsigned char *)(a1 + 68)) {
      fprintf((FILE *)*MEMORY[0x263EF8348], "bad in_type=%d\n");
    }
    return 0;
  }
  if (v31 == 23)
  {
    uint64_t v36 = 0;
    if (a5 < v17 || a5 - v17 < 4) {
      return v36;
    }
    uint64_t v49 = *(unsigned __int8 *)(a1 + 136);
    uint64_t v50 = *(unsigned __int8 *)(a1 + 139);
    uint64_t v51 = *(unsigned __int8 *)(a1 + 138);
    uint64_t v34 = (*(unsigned __int8 *)(a1 + 137) << 24) | (unint64_t)(v49 << 16) | (v50 << 8) | v51;
    if ((v30 & 0x20) == 0) {
      uint64_t v34 = ((unint64_t)*(unsigned __int8 *)(a1 + 137) << 24) | (v49 << 16) | (v50 << 8) | v51;
    }
    goto LABEL_84;
  }
  if (v31 != 25) {
    goto LABEL_91;
  }
  uint64_t v36 = 0;
  if (a5 < v17 || a5 - v17 < 8) {
    return v36;
  }
  int v33 = (char *)(a1 + 136);
  uint64_t v34 = *(void *)__dst;
LABEL_85:
  if (v29)
  {
    switch(*(unsigned char *)(a2 + 8) & 7)
    {
      case 1:
        LODWORD(v34) = v29 | v34;
        break;
      case 2:
        LODWORD(v34) = v29 ^ v34;
        break;
      case 3:
        LODWORD(v34) = v29 + v34;
        break;
      case 4:
        LODWORD(v34) = v34 - v29;
        break;
      case 5:
        LODWORD(v34) = v29 * v34;
        break;
      case 6:
        v34 /= v29;
        break;
      case 7:
        v34 %= v29;
        break;
      default:
        LODWORD(v34) = v29 & v34;
        break;
    }
  }
  LODWORD(v17) = v34 ^ ((char)(2 * *(unsigned char *)(a2 + 8)) >> 7);
  if ((*(unsigned char *)(a2 + 2) & 4) == 0) {
    goto LABEL_116;
  }
  if (!v18)
  {
    if (*(unsigned char *)(a1 + 68))
    {
      uint64_t v63 = (FILE *)*MEMORY[0x263EF8348];
      uint64_t v64 = "indirect *zero* cont_level\n";
      size_t v65 = 27;
LABEL_146:
      fwrite(v64, v65, 1uLL, v63);
    }
    return 0;
  }
  int v62 = *(_DWORD *)(a1 + 68);
  LODWORD(v17) = *(_DWORD *)(*(void *)(a1 + 24) + 16 * (v18 - 1)) + v17;
  if (!v17)
  {
    if (v62)
    {
      uint64_t v63 = (FILE *)*MEMORY[0x263EF8348];
      uint64_t v64 = "indirect *zero* offset\n";
      size_t v65 = 23;
      goto LABEL_146;
    }
    return 0;
  }
  if (v62) {
    fprintf((FILE *)*MEMORY[0x263EF8348], "indirect +offs=%u\n", v17);
  }
LABEL_116:
  mcopy(a1, v33, *(unsigned __int8 *)(a2 + 6), 0, a4, v17, a5, a2);
  *(_DWORD *)(a1 + 56) = v17;
  if (*(unsigned char *)(a1 + 68))
  {
    mdebug(v17, v33);
    file_mdump(a2);
  }
LABEL_118:
  switch(*(unsigned char *)(a2 + 6))
  {
    case 1:
      if (v17 >= a5) {
        return 0;
      }
      goto LABEL_121;
    case 2:
    case 7:
    case 0xA:
      uint64_t v36 = 0;
      if (a5 < v17 || a5 - v17 < 2) {
        return v36;
      }
      goto LABEL_121;
    case 4:
    case 6:
    case 8:
    case 9:
    case 0xB:
    case 0xC:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x21:
    case 0x22:
    case 0x23:
      uint64_t v36 = 0;
      if (a5 >= v17 && a5 - v17 >= 4) {
        goto LABEL_121;
      }
      return v36;
    case 5:
    case 0xD:
    case 0x14:
      if (a5 < v17 || a5 - v17 < *(unsigned __int8 *)(a2 + 5)) {
        return 0;
      }
      goto LABEL_121;
    case 0x11:
      if (v17 > a5) {
        return 0;
      }
      goto LABEL_121;
    case 0x24:
    case 0x25:
    case 0x26:
      uint64_t v36 = 0;
      if (a5 < v17 || a5 - v17 < 8) {
        return v36;
      }
      goto LABEL_121;
    case 0x29:
      int v66 = (*(unsigned __int8 *)(a2 + 28) << 31 >> 31) & a6;
      uint64_t v67 = (v66 + v17);
      if (!(v66 + v17) || a5 < v67) {
        return 0;
      }
      int v68 = (void **)file_push_buffer(a1);
      if (!v68) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v69 = v68;
      ++*a11;
      long long v70 = a3[9];
      long long v135 = a3[8];
      long long v136 = v70;
      long long v71 = a3[11];
      long long v137 = a3[10];
      long long v138 = v71;
      long long v72 = a3[5];
      long long v131 = a3[4];
      long long v132 = v72;
      long long v73 = a3[7];
      long long v133 = a3[6];
      long long v134 = v73;
      long long v74 = a3[1];
      long long v127 = *a3;
      long long v128 = v74;
      long long v75 = a3[3];
      long long v129 = a3[2];
      long long v130 = v75;
      *((void *)&v136 + 1) = a4 + v67;
      *(void *)&long long v137 = a5 - v67;
      uint64_t v36 = file_softmagic(a1, &v127, a11, a12, 32, a9);
      if (*(unsigned char *)(a1 + 68)) {
        fprintf((FILE *)*MEMORY[0x263EF8348], "indirect @offs=%u[%d]\n", v67, v36);
      }
      unint64_t v82 = (void *)file_pop_buffer(a1, v69);
      if (!v82 && (*(unsigned char *)(a1 + 72) & 1) != 0) {
        return 0xFFFFFFFFLL;
      }
      if (v36 != 1
        || ((*(_DWORD *)(a1 + 68) & 0x1000C10) != 0
         || (int v83 = (char *)file_fmtcheck(a1, (char *)(a2 + 160), "%u", 1854),
             file_printf(a1, v83, v84, v85, v86, v87, v88, v89, v67) != -1))
        && file_printf(a1, "%s", v76, v77, v78, v79, v80, v81, (char)v82) != -1)
      {
        free(v82);
        return v36;
      }
      free(v82);
      return 0xFFFFFFFFLL;
    case 0x2D:
      if ((*(_DWORD *)(a1 + 68) & 0x1000C10) != 0) {
        goto LABEL_220;
      }
      if (file_printf(a1, "%s", v23, v24, v25, v26, v27, v28, a2 - 96) == -1) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 1;
      }
    case 0x2E:
      uint64_t v90 = v17;
      if (v17 > a5) {
        return 0;
      }
      int v91 = *(unsigned __int8 *)(a2 + 32);
      if (v91 == 94) {
        uint64_t v92 = a10 == 0;
      }
      else {
        uint64_t v92 = a10;
      }
      if (v91 == 94) {
        uint64_t v93 = (char *)(a2 + 33);
      }
      else {
        uint64_t v93 = (char *)(a2 + 32);
      }
      if (file_magicfind(*(uint64_t **)(a1 + 8), v93, (uint64_t)v125) == -1)
      {
        return 0xFFFFFFFFLL;
      }
      ++*a12;
      int v99 = *a14;
      if ((*(unsigned char *)(a2 + 2) & 0x10) != 0) {
        *a14 = 0;
      }
      uint64_t v100 = match(a1, *(void *)&v125[0], DWORD2(v125[0]), a3, v90 + a6, v122, a9, v92, a11, a12, a13, a14, a15, a16);
      --*a12;
      if (v100 == 1)
      {
LABEL_220:
        uint64_t v36 = 1;
      }
      else
      {
        uint64_t v36 = v100;
        *a14 = v99;
      }
      break;
    case 0x31:
      uint64_t v36 = 0;
      if (a5 < v17 || a5 - v17 < 0x10) {
        return v36;
      }
      goto LABEL_121;
    default:
LABEL_121:
      if (a10 && (uint64_t v60 = *(unsigned __int8 *)(a2 + 6) - 7, v60 <= 0x25))
      {
        LOBYTE(v61) = *(unsigned char *)(a2 + 6);
        if ((0x30DB6C033FuLL >> (v61 - 7))) {
          int v61 = *(_DWORD *)&asc_21661270C[4 * v60];
        }
      }
      else
      {
        LOBYTE(v61) = *(unsigned char *)(a2 + 6);
      }
      uint64_t v36 = 1;
      switch((char)v61)
      {
        case 1:
          uint64_t v106 = *(void *)(a2 + 24);
          if (v106)
          {
            switch(*(unsigned char *)(a2 + 9) & 7)
            {
              case 1:
                char v107 = *(unsigned char *)__dst | v106;
                break;
              case 2:
                char v107 = *(unsigned char *)__dst ^ v106;
                break;
              case 3:
                char v107 = *(unsigned char *)__dst + v106;
                break;
              case 4:
                char v107 = *(unsigned char *)__dst - v106;
                break;
              case 5:
                char v107 = *(unsigned char *)__dst * v106;
                break;
              case 6:
                if (!*(void *)(a2 + 24)) {
                  goto LABEL_188;
                }
                char v107 = *(unsigned char *)__dst / *(void *)(a2 + 24);
                break;
              case 7:
                if (!*(void *)(a2 + 24)) {
                  goto LABEL_188;
                }
                char v107 = *(unsigned char *)__dst % *(void *)(a2 + 24);
                break;
              default:
                char v107 = *(unsigned char *)__dst & v106;
                break;
            }
            *(unsigned char *)__dst = v107;
          }
          if ((*(unsigned char *)(a2 + 9) & 0x40) != 0) {
            *(unsigned char *)__dst = ~*(unsigned char *)__dst;
          }
          goto LABEL_220;
        case 2:
        case 10:
          goto LABEL_208;
        case 3:
        case 17:
        case 20:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
          return v36;
        case 4:
        case 6:
        case 11:
        case 12:
        case 14:
        case 16:
          goto LABEL_186;
        case 5:
        case 18:
        case 19:
          *(unsigned char *)(a1 + 263) = 0;
          goto LABEL_220;
        case 7:
          *(_WORD *)(a1 + 136) = bswap32(*(unsigned __int16 *)(a1 + 136)) >> 16;
LABEL_208:
          int v102 = cvt_16(__dst, a2);
          goto LABEL_187;
        case 8:
        case 9:
        case 15:
          int v101 = bswap32(*(_DWORD *)(a1 + 136));
          goto LABEL_185;
        case 13:
          uint64_t v108 = file_pstring_length_size(a1, *(_DWORD *)(a2 + 28), v23, v24, v25, v26, v27, v28);
          if (v108 == -1) {
            return 0;
          }
          uint64_t v114 = v108;
          int v115 = a1;
          v116 = (unsigned char *)(a1 + 136);
          unint64_t length = file_pstring_get_length(v115, *(_DWORD *)(a2 + 28), __dst, v109, v110, v111, v112, v113);
          if (length == -1) {
            return 0;
          }
          unint64_t v118 = 128 - v114;
          if (length < 128 - v114) {
            unint64_t v118 = length;
          }
          if (v118)
          {
            do
            {
              v119 = (unsigned int *)(v116 + 1);
              unsigned char *v116 = v116[v114];
              ++v116;
              --v118;
            }
            while (v118);
          }
          else
          {
            v119 = __dst;
          }
          *(unsigned char *)v119 = 0;
          goto LABEL_220;
        case 21:
        case 22:
        case 23:
          int v101 = (*(unsigned __int8 *)(a1 + 137) << 24) | (*(unsigned __int8 *)(a1 + 136) << 16) | (*(unsigned __int8 *)(a1 + 139) << 8) | *(unsigned __int8 *)(a1 + 138);
LABEL_185:
          *(_DWORD *)(a1 + 136) = v101;
LABEL_186:
          int v102 = cvt_32(__dst, a2);
LABEL_187:
          if (v102 != -1) {
            goto LABEL_220;
          }
LABEL_188:
          file_magerror(a1, "zerodivide in mconvert()", v23, v24, v25, v26, v27, v28, v120);
          return 0;
        case 24:
        case 25:
        case 27:
        case 28:
        case 30:
        case 31:
        case 42:
        case 43:
        case 50:
          goto LABEL_128;
        case 26:
        case 29:
        case 32:
        case 44:
          *(void *)(a1 + 136) = bswap64(*(void *)(a1 + 136));
LABEL_128:
          cvt_64((uint64_t *)__dst, a2);
          goto LABEL_220;
        case 33:
        case 35:
          goto LABEL_217;
        case 34:
          *(_DWORD *)(a1 + 136) = bswap32(*(_DWORD *)(a1 + 136));
LABEL_217:
          cvt_float((float *)__dst, a2);
          goto LABEL_220;
        case 36:
        case 38:
          goto LABEL_219;
        case 37:
          *(void *)(a1 + 136) = bswap64(*(void *)(a1 + 136));
LABEL_219:
          cvt_double((double *)__dst, a2);
          break;
        default:
          file_magerror(a1, "invalid type %d in mconvert()", v23, v24, v25, v26, v27, v28, *(unsigned __int8 *)(a2 + 6));
          return 0;
      }
      goto LABEL_220;
  }
  return v36;
}

uint64_t magiccheck(uint64_t a1, char *__little, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  id v9 = __little + 32;
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  int v13 = (char *)(a1 + 136);
  BOOL v14 = 1;
  switch(__little[6])
  {
    case 1:
      unint64_t v12 = *v13;
      goto LABEL_32;
    case 2:
    case 7:
    case 10:
      unint64_t v12 = *(unsigned __int16 *)v13;
      goto LABEL_32;
    case 3:
    case 47:
      goto LABEL_33;
    case 4:
    case 6:
    case 8:
    case 9:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 21:
    case 22:
    case 23:
      unint64_t v12 = *(unsigned int *)v13;
      goto LABEL_32;
    case 5:
    case 13:
      unint64_t v12 = file_strncmp(__little + 32, v13, __little[5], 128, *((_DWORD *)__little + 7));
      goto LABEL_16;
    case 17:
      long long v90 = 0u;
      long long v91 = 0u;
      *(_OWORD *)__str = 0u;
      long long v89 = 0u;
      if (!*(void *)(a1 + 104)) {
        return 0;
      }
      if ((*((_DWORD *)__little + 7) & 0xC) != 0) {
        int v37 = 11;
      }
      else {
        int v37 = 9;
      }
      uint64_t v38 = file_regcomp((uint64_t)__str, __little + 32, v37);
      if (v38)
      {
        uint64_t v39 = v38;
LABEL_72:
        file_regerror((uint64_t)__str, v39, a1);
        file_regfree((uint64_t)__str);
        return 0xFFFFFFFFLL;
      }
      v87.regoff_t rm_so = 0;
      v87.regoff_t rm_eo = 0;
      uint64_t v58 = *(char **)(a1 + 112);
      if (v58)
      {
        uint64_t v59 = (char *)malloc_type_malloc(*(void *)(a1 + 112), 0xDC536CAuLL);
        if (!v59)
        {
          file_regfree((uint64_t)__str);
          long long v74 = __error();
          file_error(a1, *v74, "can't allocate %zu bytes", v75, v76, v77, v78, v79, (char)v58);
          return 0xFFFFFFFFLL;
        }
        uint64_t v60 = v59;
        memcpy(v59, *(const void **)(a1 + 104), (size_t)v58);
        v60[(void)v58 - 1] = 0;
        uint64_t v58 = (char *)v60;
      }
      else
      {
        uint64_t v60 = "";
      }
      unsigned int v71 = file_regexec((uint64_t)__str, v60, 1uLL, &v87);
      free(v58);
      unint64_t v12 = v71;
      if (v71 != 1)
      {
        if (v71)
        {
          uint64_t v39 = v71;
          goto LABEL_72;
        }
        unint64_t v12 = 0;
        regoff_t rm_so = v87.rm_so;
        regoff_t rm_eo = v87.rm_eo;
        *(void *)(a1 + 104) += SLODWORD(v87.rm_so);
        *(void *)(a1 + 120) += rm_so;
        *(void *)(a1 + 128) = rm_eo - rm_so;
      }
      file_regfree((uint64_t)__str);
LABEL_16:
      uint64_t v11 = 0;
LABEL_33:
      uint64_t v26 = file_signextend(a1, (uint64_t)__little, v12, a4, a5, a6, a7, a8);
      unsigned int v33 = __little[4];
      if (v33 <= 0x3C)
      {
        switch(v33)
        {
          case '!':
            BOOL v14 = v26 != v11;
            if (*(unsigned char *)(a1 + 68)) {
              fprintf((FILE *)*MEMORY[0x263EF8348], "%llu != %llu = %d\n", v26, v11, v26 != v11);
            }
            return v14;
          case '&':
            BOOL v14 = (v11 & ~v26) == 0;
            if (*(unsigned char *)(a1 + 68)) {
              fprintf((FILE *)*MEMORY[0x263EF8348], "((%llx & %llx) == %llx) = %d\n");
            }
            return v14;
          case '<':
            int v35 = *(_DWORD *)(a1 + 68);
            if ((__little[2] & 8) != 0)
            {
              BOOL v14 = v26 < (unint64_t)v11;
              if (v35) {
                fprintf((FILE *)*MEMORY[0x263EF8348], "%llu < %llu = %d\n");
              }
            }
            else
            {
              BOOL v14 = v26 < v11;
              if (v35) {
                fprintf((FILE *)*MEMORY[0x263EF8348], "%lld < %lld = %d\n");
              }
            }
            return v14;
        }
        goto LABEL_59;
      }
      if (__little[4] > 0x5Du)
      {
        if (v33 == 94)
        {
          BOOL v14 = (v11 & ~v26) != 0;
          if (*(unsigned char *)(a1 + 68)) {
            fprintf((FILE *)*MEMORY[0x263EF8348], "((%llx & %llx) != %llx) = %d\n");
          }
          return v14;
        }
        if (v33 == 120)
        {
          if (*(unsigned char *)(a1 + 68)) {
            fprintf((FILE *)*MEMORY[0x263EF8348], "%llu == *any* = 1\n", v26);
          }
          return 1;
        }
LABEL_59:
        return 0xFFFFFFFFLL;
      }
      if (v33 != 61)
      {
        if (v33 == 62)
        {
          int v34 = *(_DWORD *)(a1 + 68);
          if ((__little[2] & 8) != 0)
          {
            BOOL v14 = v26 > (unint64_t)v11;
            if (v34) {
              fprintf((FILE *)*MEMORY[0x263EF8348], "%llu > %llu = %d\n");
            }
          }
          else
          {
            BOOL v14 = v26 > v11;
            if (v34) {
              fprintf((FILE *)*MEMORY[0x263EF8348], "%lld > %lld = %d\n");
            }
          }
          return v14;
        }
        goto LABEL_59;
      }
      BOOL v14 = v26 == v11;
      if (*(unsigned char *)(a1 + 68)) {
        fprintf((FILE *)*MEMORY[0x263EF8348], "%llu == %llu = %d\n");
      }
      return v14;
    case 18:
    case 19:
      uint64_t v21 = __little[5];
      uint64_t v11 = 0;
      while (v21)
      {
        --v21;
        unsigned int v23 = *v13++;
        uint64_t v22 = v23;
        unsigned int v24 = *v9++;
        unint64_t v12 = v22 - v24;
        if (v22 != v24) {
          goto LABEL_33;
        }
      }
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      goto LABEL_33;
    case 20:
      uint64_t v40 = *(const void **)(a1 + 104);
      if (!v40) {
        return 0;
      }
      if (__little[5] >= 0x80u) {
        size_t v41 = 128;
      }
      else {
        size_t v41 = __little[5];
      }
      if (!v41 || *((_DWORD *)__little + 7))
      {
        uint64_t v42 = 0;
        unint64_t v43 = 0;
        while (1)
        {
          size_t v44 = *(void *)(a1 + 112);
          if (v41 + v43 > v44) {
            return 0;
          }
          unint64_t v12 = file_strncmp(v9, (char *)(*(void *)(a1 + 104) + v43), v41, v42 + v44, *((_DWORD *)__little + 7));
          if (!v12)
          {
            uint64_t v11 = 0;
            unint64_t v62 = *(void *)(a1 + 112) - v43;
            *(void *)(a1 + 120) += v43;
            *(void *)(a1 + 128) = v62;
            goto LABEL_33;
          }
          ++v43;
          unint64_t v45 = *((unsigned int *)__little + 6);
          --v42;
          if (v45)
          {
            uint64_t v11 = 0;
            if (v43 >= v45) {
              goto LABEL_33;
            }
          }
        }
      }
      uint64_t v63 = *((unsigned int *)__little + 6);
      if (v63)
      {
        size_t v64 = v63 + v41;
        size_t v65 = *(void *)(a1 + 112);
        if (v65 >= v64) {
          goto LABEL_147;
        }
      }
      else
      {
        size_t v65 = *(void *)(a1 + 112);
      }
      size_t v64 = v65;
LABEL_147:
      uint64_t v80 = (char *)memmem(v40, v64, v9, v41);
      if (!v80) {
        return 0;
      }
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      uint64_t v81 = &v80[-*(void *)(a1 + 104)];
      unint64_t v82 = &v81[*(void *)(a1 + 120)];
      uint64_t v83 = *(void *)(a1 + 112) - (void)v81;
      *(void *)(a1 + 120) = v82;
      *(void *)(a1 + 128) = v83;
      goto LABEL_33;
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 42:
    case 43:
    case 44:
    case 50:
      unint64_t v12 = *(void *)v13;
LABEL_32:
      uint64_t v11 = *((void *)__little + 4);
      goto LABEL_33;
    case 33:
    case 34:
    case 35:
      LODWORD(v15) = *((void *)__little + 4);
      float v16 = *(float *)v13;
      unsigned int v17 = __little[4];
      if (v17 <= 0x3C)
      {
        if (v17 == 33)
        {
          BOOL v57 = v16 == v15;
          return !v57;
        }
        if (v17 == 60) {
          return v16 < v15;
        }
      }
      else
      {
        switch(v17)
        {
          case '=':
            return v16 == v15;
          case '>':
            BOOL v56 = v16 <= v15;
            return !v56;
          case 'x':
            return 1;
        }
      }
      return 0xFFFFFFFFLL;
    case 36:
    case 37:
    case 38:
      double v18 = *((double *)__little + 4);
      double v19 = *(double *)v13;
      unsigned int v20 = __little[4];
      if (v20 <= 0x3C)
      {
        if (v20 == 33)
        {
          BOOL v57 = v19 == v18;
          return !v57;
        }
        if (v20 == 60) {
          return v19 < v18;
        }
      }
      else
      {
        switch(v20)
        {
          case '=':
            return v19 == v18;
          case '>':
            BOOL v56 = v19 <= v18;
            return !v56;
          case 'x':
            return 1;
        }
      }
      return 0xFFFFFFFFLL;
    case 41:
    case 45:
    case 46:
      return v14;
    case 48:
      v87.regoff_t rm_so = 0;
      uint64_t v47 = *(char **)(a1 + 104);
      unint64_t v46 = *(void *)(a1 + 112);
      int v48 = gettag((uint64_t)v47, (unint64_t *)&v87, v46);
      if (v48 == -1 || (int v49 = v48, v50 = getlength((uint64_t)v47, (unint64_t *)&v87, v46), v50 == -1))
      {
        if (*(unsigned char *)(a1 + 68)) {
          fwrite("EOF comparing DER entries", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
        }
        return 0;
      }
      unsigned int v51 = v50;
      if (v49 > 0x24) {
        snprintf(__str, 0x80uLL, "%#x", v49);
      }
      else {
        __strlcpy_chk();
      }
      if (*(unsigned char *)(a1 + 68)) {
        fprintf((FILE *)*MEMORY[0x263EF8348], "%s: tag %p got=%s exp=%s\n", "der_cmp", v47, __str, v9);
      }
      size_t v61 = strlen(__str);
      if (strncmp(__str, v9, v61)) {
        return 0;
      }
      int v66 = &v9[v61];
      uint64_t v67 = v51;
      while (1)
      {
        if (!*v66) {
          return 1;
        }
        if (*v66 == 61) {
          break;
        }
        int v68 = *v66;
        if ((v68 - 48) <= 9)
        {
          uint64_t v69 = 0;
          do
          {
            uint64_t v69 = 10 * v69 + (char)v68 - 48;
            int v70 = *++v66;
            LOBYTE(v68) = v70;
          }
          while ((v70 - 48) < 0xA);
          if (*(unsigned char *)(a1 + 68)) {
            fprintf((FILE *)*MEMORY[0x263EF8348], "%s: len %zu %u\n", "der_cmp", v69, v51);
          }
          if (v69 == v51) {
            continue;
          }
        }
        return 0;
      }
      uint64_t v84 = v66 + 1;
      uint64_t v85 = (unsigned __int8 *)&v47[v87.rm_so];
      if (v49 > 21)
      {
        if (v49 == 23)
        {
          if (v51 >= 0xC)
          {
            snprintf(__str, 0x80uLL, "20%c%c-%c%c-%c%c %c%c:%c%c:%c%c GMT", *v85, v85[1], v85[2], v85[3], v85[4], v85[5], v85[6]);
            goto LABEL_162;
          }
LABEL_157:
          if (v51)
          {
            uint64_t v86 = 0;
            do
            {
              if (v86 <= 0x7D) {
                snprintf(&__str[v86], 128 - v86, "%.2x", *v85);
              }
              ++v85;
              v86 += 2;
            }
            while (2 * v67 != v86);
          }
LABEL_162:
          if (*(unsigned char *)(a1 + 68)) {
            fprintf((FILE *)*MEMORY[0x263EF8348], "%s: data %s %s\n", "der_cmp", __str, v84);
          }
          if (!strcmp(__str, v84) || !strcmp("x", v84))
          {
            __strlcpy_chk();
            return 1;
          }
          return 0;
        }
        if (v49 != 22) {
          goto LABEL_157;
        }
      }
      else if (v49 != 12 && v49 != 19)
      {
        goto LABEL_157;
      }
      snprintf(__str, 0x80uLL, "%.*s");
      goto LABEL_162;
    case 49:
      unint64_t v52 = bswap64(*(void *)v9);
      unint64_t v53 = bswap64(*(void *)v13);
      if (v52 == v53 && (v52 = bswap64(*((void *)__little + 5)), unint64_t v53 = bswap64(*(void *)(a1 + 144)), v52 == v53))
      {
        int v54 = 0;
      }
      else if (v52 < v53)
      {
        int v54 = -1;
      }
      else
      {
        int v54 = 1;
      }
      uint64_t v11 = 0;
      unint64_t v12 = v54;
      goto LABEL_33;
    default:
      file_magerror(a1, "invalid type %d in magiccheck()", a3, a4, a5, a6, a7, a8, __little[6]);
      return 0xFFFFFFFFLL;
  }
}

uint64_t handle_annotation(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = (char)__s1;
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v10 = *(_DWORD *)(a1 + 68);
  if ((v10 & 0x800) == 0 || !__s1[304])
  {
    if ((v10 & 0x1000000) != 0 && __s1[312])
    {
      if (!a3)
      {
        uint64_t result = file_printf(a1, "\n- ", a3, a4, a5, a6, a7, a8, v15);
        if (result == -1) {
          return result;
        }
      }
      LOBYTE(v13) = v8 + 56;
    }
    else
    {
      if ((v10 & 0x10) == 0) {
        return 0;
      }
      BOOL v14 = __s1 + 224;
      if (!__s1[224]) {
        return 0;
      }
      if (!a3)
      {
        uint64_t result = file_printf(a1, "\n- ", a3, a4, a5, a6, a7, a8, v15);
        if (result == -1) {
          return result;
        }
      }
      if (varexpand(a1, v16, 0x400uLL, v14) == -1) {
        LOBYTE(v13) = (_BYTE)v14;
      }
      else {
        int v13 = v16;
      }
    }
    int v12 = file_printf(a1, "%s", a3, a4, a5, a6, a7, a8, (char)v13);
LABEL_19:
    if (v12 == -1) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  if (a3 || (uint64_t result = file_printf(a1, "\n- ", a3, a4, a5, a6, a7, a8, v15), result != -1))
  {
    int v12 = file_printf(a1, "%.8s", a3, a4, a5, a6, a7, a8, v8 + 48);
    goto LABEL_19;
  }
  return result;
}

uint64_t mprint(uint64_t a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v176 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 160;
  uint64_t v5 = v174;
  if (varexpand(a1, v174, 0x200uLL, a2 + 160) == -1) {
    uint64_t v5 = v4;
  }
  uint64_t v12 = a1 + 136;
  switch(v2[6])
  {
    case 1:
      unsigned __int8 v116 = file_signextend(a1, (uint64_t)v2, *(unsigned __int8 *)(a1 + 136), v7, v8, v9, v10, v11);
      uint64_t v117 = check_fmt(a1, v5);
      uint64_t v14 = v117;
      if (v117 != -1)
      {
        if (v117 == 1)
        {
          snprintf(__str, 0x80uLL, "%d", v116);
          unint64_t v118 = (char *)file_fmtcheck(a1, v5, "%s", 592);
          int v125 = file_printf(a1, v118, v119, v120, v121, v122, v123, v124, (char)__str);
        }
        else
        {
          v161 = (char *)file_fmtcheck(a1, v5, "%d", 596);
          int v125 = file_printf(a1, v161, v162, v163, v164, v165, v166, v167, v116);
        }
        if (v125 == -1) {
          return 0xFFFFFFFFLL;
        }
        return *(unsigned int *)(a1 + 56) + 1;
      }
      return v14;
    case 2:
    case 7:
    case 10:
      unsigned __int16 v43 = file_signextend(a1, (uint64_t)v2, *(unsigned __int16 *)(a1 + 136), v7, v8, v9, v10, v11);
      uint64_t v44 = check_fmt(a1, v5);
      uint64_t v14 = v44;
      if (v44 != -1)
      {
        if (v44 == 1)
        {
          snprintf(__str, 0x80uLL, "%u", v43);
          unint64_t v45 = (char *)file_fmtcheck(a1, v5, "%s", 614);
          int v52 = file_printf(a1, v45, v46, v47, v48, v49, v50, v51, (char)__str);
        }
        else
        {
          v140 = (char *)file_fmtcheck(a1, v5, "%u", 618);
          int v52 = file_printf(a1, v140, v141, v142, v143, v144, v145, v146, v43);
        }
        if (v52 == -1) {
          return 0xFFFFFFFFLL;
        }
        return *(unsigned int *)(a1 + 56) + 2;
      }
      return v14;
    case 3:
    case 47:
      int v67 = file_printf(a1, "%s", v6, v7, v8, v9, v10, v11, (char)v4);
      goto LABEL_64;
    case 4:
    case 8:
    case 11:
    case 23:
      LODWORD(v2) = file_signextend(a1, (uint64_t)v2, *(unsigned int *)(a1 + 136), v7, v8, v9, v10, v11);
      uint64_t v13 = check_fmt(a1, v5);
      uint64_t v14 = v13;
      if (v13 == -1) {
        return v14;
      }
      if (v13 == 1)
      {
        int v169 = (int)v2;
        uint64_t v2 = __str;
        snprintf(__str, 0x80uLL, "%u", v169);
        char v15 = "%s";
        uint64_t v16 = a1;
        uint64_t v17 = v5;
        uint64_t v18 = 637;
      }
      else
      {
        char v15 = "%u";
        uint64_t v16 = a1;
        uint64_t v17 = v5;
        uint64_t v18 = 641;
      }
      goto LABEL_36;
    case 5:
    case 13:
    case 18:
    case 19:
      int v19 = v2[4];
      if (v19 == 61 || v19 == 33)
      {
        unsigned int v20 = (char *)file_fmtcheck(a1, v5, "%s", 677);
        file_printable(__str, 512, (uint64_t)(v2 + 32), 128);
        if (file_printf(a1, v20, v21, v22, v23, v24, v25, v26, (char)__str) == -1) {
          return 0xFFFFFFFFLL;
        }
        return *(_DWORD *)(a1 + 56) + v2[5];
      }
      uint64_t v85 = *(unsigned int *)(a1 + 56);
      size_t v86 = strlen((const char *)(a1 + 136));
      if (!v2[32]) {
        *(unsigned char *)(v12 + strcspn((const char *)(a1 + 136), "\r\n")) = 0;
      }
      uint64_t v87 = a1 + 136;
      if ((v2[29] & 0x20) != 0)
      {
        uint64_t v87 = a1 + 135;
        uint64_t v88 = MEMORY[0x263EF8318];
        do
        {
          uint64_t v89 = *(unsigned __int8 *)(v87 + 1);
          if (*(char *)(v87 + 1) < 0) {
            int v90 = __maskrune(v89, 0x4000uLL);
          }
          else {
            int v90 = *(_DWORD *)(v88 + 4 * v89 + 60) & 0x4000;
          }
          ++v87;
        }
        while (v90);
        long long v91 = (unsigned char *)v87;
        while (*v91++)
          ;
        do
        {
          uint64_t v93 = *(v91 - 2);
          if ((char)*(v91 - 2) < 0) {
            int v94 = __maskrune(v93, 0x4000uLL);
          }
          else {
            int v94 = *(_DWORD *)(v88 + 4 * v93 + 60) & 0x4000;
          }
          --v91;
        }
        while (v94);
        *long long v91 = 0;
      }
      uint64_t v95 = (char *)file_fmtcheck(a1, v5, "%s", 705);
      file_printable(__str, 512, v87, v12 - v87 + 128);
      if (file_printf(a1, v95, v96, v97, v98, v99, v100, v101, (char)__str) != -1)
      {
        uint64_t v14 = v86 + v85;
        if (v2[6] != 13) {
          return v14;
        }
        uint64_t v108 = file_pstring_length_size(a1, *((_DWORD *)v2 + 7), v102, v103, v104, v105, v106, v107);
        if (v108 != -1)
        {
          v14 += v108;
          return v14;
        }
      }
      return 0xFFFFFFFFLL;
    case 6:
    case 9:
    case 12:
    case 21:
      uint64_t v27 = (char *)file_fmtcheck(a1, v5, "%s", 723);
      uint64_t v28 = *(unsigned int *)(a1 + 136);
      char v29 = 0;
      goto LABEL_13;
    case 14:
    case 15:
    case 16:
    case 22:
      uint64_t v27 = (char *)file_fmtcheck(a1, v5, "%s", 733);
      uint64_t v28 = *(unsigned int *)(a1 + 136);
      char v29 = 1;
LABEL_13:
      char v170 = file_fmttime(__str, 0x1AuLL, v28, v29);
      int v36 = file_printf(a1, v27, v30, v31, v32, v33, v34, v35, v170);
      goto LABEL_70;
    case 17:
    case 20:
      size_t v68 = *(void *)(a1 + 128);
      uint64_t v69 = strndup(*(const char **)(a1 + 104), v68);
      if (!v69)
      {
        file_oomem(a1, v68);
        return 0xFFFFFFFFLL;
      }
      int v70 = v69;
      unsigned int v71 = (char *)file_fmtcheck(a1, v5, "%s", 818);
      file_printable(__str, 512, (uint64_t)v70, *(void *)(a1 + 128));
      LODWORD(v71) = file_printf(a1, v71, v72, v73, v74, v75, v76, v77, (char)__str);
      free(v70);
      if (v71 == -1) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v14 = *(void *)(a1 + 120);
      if ((v2[28] & 0x10) == 0) {
        v14 += *(void *)(a1 + 128);
      }
      return v14;
    case 24:
    case 25:
    case 26:
    case 50:
      uint64_t v37 = file_signextend(a1, (uint64_t)v2, *(void *)(a1 + 136), v7, v8, v9, v10, v11);
      uint64_t v38 = check_fmt(a1, v5);
      uint64_t v14 = v38;
      if (v38 == -1) {
        return v14;
      }
      if (v38 == 1)
      {
        uint64_t v171 = v37;
        uint64_t v37 = (uint64_t)__str;
        snprintf(__str, 0x80uLL, "%llu", v171);
        uint64_t v39 = "%s";
        uint64_t v40 = a1;
        size_t v41 = v5;
        uint64_t v42 = 660;
      }
      else
      {
        uint64_t v39 = "%llu";
        uint64_t v40 = a1;
        size_t v41 = v5;
        uint64_t v42 = 664;
      }
      goto LABEL_57;
    case 27:
    case 28:
    case 29:
      unint64_t v53 = (char *)file_fmtcheck(a1, v5, "%s", 742);
      uint64_t v54 = *(void *)(a1 + 136);
      char v55 = 0;
      goto LABEL_29;
    case 30:
    case 31:
    case 32:
      unint64_t v53 = (char *)file_fmtcheck(a1, v5, "%s", 751);
      uint64_t v54 = *(void *)(a1 + 136);
      char v55 = 1;
      goto LABEL_29;
    case 33:
    case 34:
    case 35:
      float v56 = *(float *)(a1 + 136);
      uint64_t v57 = check_fmt(a1, v5);
      uint64_t v14 = v57;
      if (v57 == -1) {
        return v14;
      }
      if (v57 == 1)
      {
        uint64_t v2 = __str;
        snprintf(__str, 0x80uLL, "%g", v56);
        char v15 = "%s";
        uint64_t v16 = a1;
        uint64_t v17 = v5;
        uint64_t v18 = 776;
LABEL_36:
        uint64_t v78 = (char *)file_fmtcheck(v16, v17, v15, v18);
        int v36 = file_printf(a1, v78, v79, v80, v81, v82, v83, v84, (char)v2);
      }
      else
      {
        double v173 = v56;
        v147 = (char *)file_fmtcheck(a1, v5, "%g", 780);
        int v36 = file_printf(a1, v147, v148, v149, v150, v151, v152, v153, SLOBYTE(v173));
      }
LABEL_70:
      if (v36 == -1) {
        return 0xFFFFFFFFLL;
      }
      return *(unsigned int *)(a1 + 56) + 4;
    case 36:
    case 37:
    case 38:
      double v58 = *(double *)(a1 + 136);
      uint64_t v59 = check_fmt(a1, v5);
      uint64_t v14 = v59;
      if (v59 == -1) {
        return v14;
      }
      if (v59 == 1)
      {
        uint64_t v37 = (uint64_t)__str;
        snprintf(__str, 0x80uLL, "%g", v58);
        uint64_t v39 = "%s";
        uint64_t v40 = a1;
        size_t v41 = v5;
        uint64_t v42 = 796;
LABEL_57:
        uint64_t v109 = (char *)file_fmtcheck(v40, v41, v39, v42);
        int v66 = file_printf(a1, v109, v110, v111, v112, v113, v114, v115, v37);
      }
      else
      {
        v154 = (char *)file_fmtcheck(a1, v5, "%g", 800);
        int v66 = file_printf(a1, v154, v155, v156, v157, v158, v159, v160, SLOBYTE(v58));
      }
LABEL_73:
      if (v66 == -1) {
        return 0xFFFFFFFFLL;
      }
      return *(unsigned int *)(a1 + 56) + 8;
    case 41:
    case 45:
    case 46:
      return *(unsigned int *)(a1 + 56);
    case 42:
    case 43:
    case 44:
      unint64_t v53 = (char *)file_fmtcheck(a1, v5, "%s", 760);
      uint64_t v54 = *(void *)(a1 + 136);
      char v55 = 2;
LABEL_29:
      char v172 = file_fmttime(__str, 0x1AuLL, v54, v55);
      int v66 = file_printf(a1, v53, v60, v61, v62, v63, v64, v65, v172);
      goto LABEL_73;
    case 48:
      uint64_t v126 = (char *)file_fmtcheck(a1, v5, "%s", 845);
      file_printable(__str, 512, a1 + 136, 128);
      int v67 = file_printf(a1, v126, v127, v128, v129, v130, v131, v132, (char)__str);
      goto LABEL_64;
    case 49:
      file_print_guid(__str, 0x80uLL, a1 + 136);
      long long v133 = (char *)file_fmtcheck(a1, v5, "%s", 853);
      int v67 = file_printf(a1, v133, v134, v135, v136, v137, v138, v139, (char)__str);
LABEL_64:
      if (v67 == -1) {
        return 0xFFFFFFFFLL;
      }
      return *(unsigned int *)(a1 + 56);
    default:
      file_magerror(a1, "invalid m->type (%d) in mprint()", v6, v7, v8, v9, v10, v11, v2[6]);
      return 0xFFFFFFFFLL;
  }
}

uint64_t moffset(uint64_t a1, unsigned __int16 *a2, unint64_t a3, _DWORD *a4)
{
  LODWORD(v6) = 0;
  int v7 = *((unsigned __int8 *)a2 + 6);
  switch(*((unsigned char *)a2 + 6))
  {
    case 1:
      LODWORD(v6) = *(_DWORD *)(a1 + 56) + 1;
      goto LABEL_31;
    case 2:
    case 7:
    case 0xA:
      LODWORD(v6) = *(_DWORD *)(a1 + 56) + 2;
      goto LABEL_31;
    case 3:
    case 0x29:
    case 0x2F:
    case 0x32:
      LODWORD(v6) = *(_DWORD *)(a1 + 56);
      goto LABEL_31;
    case 4:
    case 6:
    case 8:
    case 9:
    case 0xB:
    case 0xC:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x21:
    case 0x22:
    case 0x23:
      LODWORD(v6) = *(_DWORD *)(a1 + 56) + 4;
      goto LABEL_31;
    case 5:
    case 0xD:
    case 0x12:
    case 0x13:
      int v10 = *((unsigned __int8 *)a2 + 4);
      if (v10 == 61 || v10 == 33)
      {
        LODWORD(v6) = *(_DWORD *)(a1 + 56) + *((unsigned __int8 *)a2 + 5);
        goto LABEL_31;
      }
      if (!*((unsigned char *)a2 + 32))
      {
        *(unsigned char *)(a1 + 136 + strcspn((const char *)(a1 + 136), "\r\n")) = 0;
        int v7 = *((unsigned __int8 *)a2 + 6);
      }
      LODWORD(v6) = *(_DWORD *)(a1 + 56) + strlen((const char *)(a1 + 136));
      if (v7 != 13) {
        goto LABEL_31;
      }
      uint64_t v17 = file_pstring_length_size(a1, *((_DWORD *)a2 + 7), v11, v12, v13, v14, v15, v16);
      if (v17 == -1) {
        return 0xFFFFFFFFLL;
      }
      LODWORD(v6) = v6 + v17;
      goto LABEL_31;
    case 0x11:
      uint64_t v6 = *(void *)(a1 + 120);
      if ((a2[14] & 0x10) == 0) {
        LODWORD(v6) = *(_DWORD *)(a1 + 128) + v6;
      }
      goto LABEL_31;
    case 0x14:
      uint64_t v6 = *(void *)(a1 + 120);
      if ((a2[14] & 0x10) == 0) {
        LODWORD(v6) = v6 + *((unsigned __int8 *)a2 + 5);
      }
      goto LABEL_31;
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x24:
    case 0x25:
    case 0x26:
      LODWORD(v6) = *(_DWORD *)(a1 + 56) + 8;
      goto LABEL_31;
    case 0x30:
      unint64_t v25 = 0;
      uint64_t v18 = *(void *)(a1 + 104);
      if (*(void *)(a1 + 112)) {
        unint64_t v19 = *(void *)(a1 + 112);
      }
      else {
        unint64_t v19 = a3;
      }
      if (gettag(*(void *)(a1 + 104), &v25, v19) == -1) {
        goto LABEL_26;
      }
      unsigned int v20 = getlength(v18, &v25, v19);
      if (v20 == -1) {
        goto LABEL_26;
      }
      uint64_t v21 = v25 + (*((_DWORD *)a2 + 3) + *(_DWORD *)(a1 + 56));
      if (!*a2) {
        goto LABEL_36;
      }
      unint64_t v22 = v21 + v20;
      if (v22 > a3)
      {
LABEL_26:
        LODWORD(v21) = -1;
LABEL_27:
        if (*(unsigned char *)(a1 + 68)) {
          fprintf((FILE *)*MEMORY[0x263EF8348], "Bad DER offset %d nbytes=%zu", v21, a3);
        }
        LODWORD(v6) = 0;
        uint64_t result = 0;
        goto LABEL_34;
      }
      *(_DWORD *)(*(void *)(a1 + 24) + 16 * (*a2 - 1)) = v22;
LABEL_36:
      BOOL v24 = v21 == -1 || (int)v21 > a3;
      LODWORD(v6) = v21;
      if (v24) {
        goto LABEL_27;
      }
LABEL_31:
      if ((int)v6 > a3) {
        return 0xFFFFFFFFLL;
      }
      uint64_t result = 1;
LABEL_34:
      *a4 = v6;
      return result;
    case 0x31:
      LODWORD(v6) = *(_DWORD *)(a1 + 56) + 16;
      goto LABEL_31;
    default:
      goto LABEL_31;
  }
}

uint64_t varexpand(uint64_t a1, char *a2, size_t a3, char *__s1)
{
LABEL_1:
  uint64_t v8 = strstr(__s1, "${");
  if (v8)
  {
    uint64_t v9 = (unsigned __int8 *)v8;
    size_t v10 = v8 - __s1;
    BOOL v11 = a3 > v8 - __s1;
    size_t v12 = a3 - (v8 - __s1);
    if (v11)
    {
      memcpy(a2, __s1, v10);
      int v13 = v9[2];
      if (v9[2])
      {
        if (v9[3] == 63)
        {
          uint64_t v14 = &a2[v10];
          uint64_t v15 = v9 + 4;
          for (uint64_t i = v9 + 4; *i; ++i)
          {
            if (*i == 58)
            {
              uint64_t v17 = i + 1;
              for (j = i + 1; *j; ++j)
              {
                if (*j == 125)
                {
                  if (v13 == 120)
                  {
                    unint64_t v19 = (unsigned char *)(i - v15);
                    size_t v20 = (*(_WORD *)(a1 + 96) & 0x49) != 0 ? (size_t)v19 : j - v17;
                    BOOL v11 = v12 > v20;
                    a3 = v12 - v20;
                    if (v11)
                    {
                      if ((*(_WORD *)(a1 + 96) & 0x49) != 0) {
                        uint64_t v21 = v15;
                      }
                      else {
                        uint64_t v21 = v17;
                      }
                      memcpy(v14, v21, v20);
                      a2 = &v14[v20];
                      __s1 = j + 1;
                      goto LABEL_1;
                    }
                  }
                  return 0xFFFFFFFFLL;
                }
              }
              return 0xFFFFFFFFLL;
            }
          }
        }
      }
    }
  }
  else
  {
    size_t v22 = strlen(__s1);
    if (v22 < a3)
    {
      size_t v23 = v22;
      memcpy(a2, __s1, v22);
      uint64_t result = 0;
      a2[v23] = 0;
      return result;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t check_fmt(uint64_t a1, char *__s)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!strchr(__s, 37)) {
    return 0;
  }
  memset(&v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  uint64_t v4 = file_regcomp((uint64_t)v14, "%[-0-9\\.]*s", 5);
  if (v4)
  {
    uint64_t v7 = v4;
    regerror(v4, &v15, v16, 0x200uLL);
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v5 = file_regexec((uint64_t)v14, __s, 0, 0) == 0;
  }
  file_regfree((uint64_t)v14);
  return v5;
}

const char *file_fmtcheck(uint64_t a1, char *__s, const char *a3, uint64_t a4)
{
  if (!strchr(__s, 37)) {
    return __s;
  }
  uint64_t result = fmtcheck(__s, a3);
  if (result == a3)
  {
    return a3;
  }
  return result;
}

unint64_t file_strncmp(char *a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  if ((a5 & 3) != 0) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = a3;
  }
  if (a5)
  {
    if (a3)
    {
      char v9 = a5;
      unint64_t v10 = (unint64_t)&a2[v8];
      uint64_t v11 = &a2[v8];
      uint64_t v12 = (uint64_t)&a2[v8 - 1];
      uint64_t v13 = 1;
      uint64_t v14 = MEMORY[0x263EF8318];
      do
      {
        if ((unint64_t)v6 >= v10) {
          return v13;
        }
        uint64_t v15 = *a1;
        if ((v9 & 4) != 0)
        {
          if ((v15 & 0x80) != 0)
          {
            if (__maskrune(*a1, 0x1000uLL))
            {
LABEL_11:
              __darwin_ct_rune_t v16 = *v6++;
              __darwin_ct_rune_t v17 = __tolower(v16);
              goto LABEL_18;
            }
          }
          else if ((*(_DWORD *)(v14 + 4 * v15 + 60) & 0x1000) != 0)
          {
            goto LABEL_11;
          }
          LODWORD(v15) = *a1;
        }
        if ((v9 & 8) != 0)
        {
          if ((v15 & 0x80) != 0)
          {
            if (__maskrune(v15, 0x8000uLL))
            {
LABEL_17:
              __darwin_ct_rune_t v18 = *v6++;
              __darwin_ct_rune_t v17 = __toupper(v18);
LABEL_18:
              if (v17 != v15) {
                return v17 - (int)v15;
              }
              goto LABEL_43;
            }
          }
          else if ((*(_DWORD *)(v14 + 4 * v15 + 60) & 0x8000) != 0)
          {
            goto LABEL_17;
          }
          LODWORD(v15) = *a1;
        }
        if ((v9 & 1) == 0) {
          goto LABEL_30;
        }
        if ((v15 & 0x80) != 0)
        {
          if (!__maskrune(v15, 0x4000uLL))
          {
LABEL_29:
            LODWORD(v15) = *a1;
LABEL_30:
            if ((v9 & 2) == 0) {
              goto LABEL_42;
            }
            if ((v15 & 0x80) != 0)
            {
              if (!__maskrune(v15, 0x4000uLL))
              {
LABEL_41:
                LODWORD(v15) = *a1;
LABEL_42:
                unsigned int v22 = *v6++;
                unint64_t v23 = v22 - (unint64_t)v15;
                if (v22 != (unint64_t)v15) {
                  return v23;
                }
LABEL_43:
                ++a1;
LABEL_44:
                BOOL v24 = v6;
                goto LABEL_45;
              }
            }
            else if ((*(_DWORD *)(v14 + 4 * v15 + 60) & 0x4000) == 0)
            {
              goto LABEL_41;
            }
            ++a1;
            int64_t v20 = v11 - v6;
            do
            {
              uint64_t v21 = *v6;
              if (*v6 < 0)
              {
                if (!__maskrune(v21, 0x4000uLL)) {
                  goto LABEL_44;
                }
              }
              else if ((*(_DWORD *)(v14 + 4 * v21 + 60) & 0x4000) == 0)
              {
                goto LABEL_44;
              }
              ++v6;
              --v20;
            }
            while (v20);
LABEL_59:
            BOOL v24 = v11;
            goto LABEL_45;
          }
        }
        else if ((*(_DWORD *)(v14 + 4 * v15 + 60) & 0x4000) == 0)
        {
          goto LABEL_29;
        }
        uint64_t v19 = *v6;
        if (*v6 < 0)
        {
          if (!__maskrune(v19, 0x4000uLL)) {
            return v13;
          }
        }
        else if ((*(_DWORD *)(v14 + 4 * v19 + 60) & 0x4000) == 0)
        {
          return v13;
        }
        uint64_t v25 = *++a1;
        if (*a1 < 0) {
          int v26 = __maskrune(v25, 0x4000uLL);
        }
        else {
          int v26 = *(_DWORD *)(v14 + 4 * v25 + 60) & 0x4000;
        }
        BOOL v24 = v6 + 1;
        if (!v26 && (unint64_t)v24 < v10)
        {
          uint64_t v27 = v12 - (void)v6;
          do
          {
            uint64_t v28 = *v24;
            if (*v24 < 0)
            {
              if (!__maskrune(v28, 0x4000uLL)) {
                goto LABEL_45;
              }
            }
            else if ((*(_DWORD *)(v14 + 4 * v28 + 60) & 0x4000) == 0)
            {
              goto LABEL_45;
            }
            ++v24;
            --v27;
          }
          while (v27);
          goto LABEL_59;
        }
LABEL_45:
        uint64_t v6 = v24;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    while (v5)
    {
      --v5;
      unsigned int v30 = *v6++;
      uint64_t v29 = v30;
      unsigned int v31 = *a1++;
      uint64_t v13 = v29 - v31;
      if (v29 != v31) {
        return v13;
      }
    }
  }
  return 0;
}

void mcopy(uint64_t a1, char *__dst, int a3, int a4, uint64_t a5, unsigned int a6, unint64_t a7, uint64_t a8)
{
  if (a4)
  {
    if (a3 == 50)
    {
LABEL_3:
      *((void *)__dst + 15) = 0;
      *(_OWORD *)(__dst + 104) = 0u;
      *(_OWORD *)(__dst + 88) = 0u;
      *(_OWORD *)(__dst + 72) = 0u;
      *(_OWORD *)(__dst + 56) = 0u;
      *(_OWORD *)(__dst + 40) = 0u;
      *(_OWORD *)(__dst + 24) = 0u;
      *(_OWORD *)(__dst + 8) = 0u;
      *(void *)__dst = a6;
      return;
    }
    goto LABEL_33;
  }
  if (a3 > 19)
  {
    switch(a3)
    {
      case 20:
        goto LABEL_25;
      case 50:
        goto LABEL_3;
      case 48:
LABEL_25:
        if (a6 <= a7) {
          uint64_t v16 = a6;
        }
        else {
          uint64_t v16 = a7;
        }
        *(void *)(a1 + 104) = a5 + v16;
        *(void *)(a1 + 112) = a7 - v16;
        *(void *)(a1 + 120) = v16;
        return;
    }
    goto LABEL_33;
  }
  if ((a3 - 18) >= 2)
  {
    if (a3 != 17) {
      goto LABEL_33;
    }
    if (!a5 || a7 < a6)
    {
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
      return;
    }
    uint64_t v19 = a6;
    int v20 = *(_DWORD *)(a8 + 28);
    if ((v20 & 0x800) != 0) {
      uint64_t v21 = *(unsigned int *)(a8 + 24);
    }
    else {
      uint64_t v21 = 0;
    }
    if ((v20 & 0x800) != 0) {
      unint64_t v22 = 80 * *(unsigned int *)(a8 + 24);
    }
    else {
      unint64_t v22 = *(unsigned int *)(a8 + 24);
    }
    if (v22 - 1 >= a7 - a6) {
      unint64_t v22 = a7 - a6;
    }
    unint64_t v23 = *(unsigned __int16 *)(a1 + 274);
    if (v22 < v23) {
      unint64_t v23 = v22;
    }
    uint64_t v24 = a5 + a6;
    unint64_t v25 = v24 + v23;
    BOOL v26 = v21 != 0;
    uint64_t v27 = (unsigned char *)(v24 + v23);
    if (v21 && v23)
    {
      unint64_t v28 = v25 - 1;
      uint64_t v29 = v21 - 1;
      unsigned int v30 = (void *)(a5 + a6);
      while (1)
      {
        uint64_t v27 = memchr(v30, 10, v25 - (void)v30);
        if (!v27)
        {
          uint64_t v27 = memchr(v30, 13, v25 - (void)v30);
          if (!v27) {
            break;
          }
        }
        if ((unint64_t)v27 < v28 && *v27 == 13 && v27[1] == 10) {
          ++v27;
        }
        if ((unint64_t)v27 < v28 && *v27 == 10) {
          ++v27;
        }
        BOOL v31 = v29-- != 0;
        BOOL v26 = v31;
        if (v31)
        {
          unsigned int v30 = v27 + 1;
          if ((unint64_t)(v27 + 1) < v25) {
            continue;
          }
        }
        goto LABEL_71;
      }
    }
    else
    {
LABEL_71:
      if (!v26)
      {
LABEL_73:
        *(void *)(a1 + 104) = v24;
        *(void *)(a1 + 112) = &v27[-v24];
        *(void *)(a1 + 120) = v19;
        *(void *)(a1 + 128) = 0;
        return;
      }
    }
    uint64_t v27 = (unsigned char *)v25;
    goto LABEL_73;
  }
  if (a6 < a7)
  {
    unint64_t v10 = a5 + a7;
    uint64_t v11 = __dst + 127;
    unint64_t v12 = a5 + a6;
    if (a3 == 18) {
      ++v12;
    }
    if (v12 >= v10)
    {
LABEL_21:
      *uint64_t v11 = 0;
      return;
    }
    uint64_t v13 = __dst + 1;
    unint64_t v14 = (a3 == 18) + (unint64_t)a6 + a5 + 2;
    while (1)
    {
      int v15 = *(unsigned __int8 *)(v14 - 2);
      *(v13 - 1) = v15;
      if (v15) {
        goto LABEL_18;
      }
      if (a3 != 18) {
        break;
      }
      if (*(unsigned char *)(v14 - 3)) {
        goto LABEL_17;
      }
LABEL_18:
      if (v14 < v10)
      {
        v14 += 2;
        BOOL v31 = v13++ >= v11;
        if (!v31) {
          continue;
        }
      }
      goto LABEL_21;
    }
    if (v14 - 1 >= v10 || !*(unsigned char *)(v14 - 1)) {
      goto LABEL_18;
    }
LABEL_17:
    *(v13 - 1) = 32;
    goto LABEL_18;
  }
LABEL_33:
  if (a7 <= a6)
  {
    *((_OWORD *)__dst + 6) = 0u;
    *((_OWORD *)__dst + 7) = 0u;
    *((_OWORD *)__dst + 4) = 0u;
    *((_OWORD *)__dst + 5) = 0u;
    *((_OWORD *)__dst + 2) = 0u;
    *((_OWORD *)__dst + 3) = 0u;
    *(_OWORD *)__dst = 0u;
    *((_OWORD *)__dst + 1) = 0u;
  }
  else
  {
    unint64_t v17 = a7 - a6;
    if (v17 >= 0x80) {
      size_t v18 = 128;
    }
    else {
      size_t v18 = a7 - a6;
    }
    memcpy(__dst, (const void *)(a5 + a6), v18);
    if (v17 <= 0x7F)
    {
      bzero(&__dst[v17], 128 - v17);
    }
  }
}

uint64_t mdebug(int a1, unsigned char *a2)
{
  uint64_t v3 = (FILE **)MEMORY[0x263EF8348];
  fprintf((FILE *)*MEMORY[0x263EF8348], "mget/%zu @%d: ", 0x80uLL, a1);
  file_showstr(*v3, a2, 128);
  fputc(10, *v3);
  uint64_t v4 = *v3;
  return fputc(10, v4);
}

uint64_t cvt_id3(char a1, unsigned int a2)
{
  uint64_t v2 = a2 & 0x7F | (((a2 >> 8) & 0x7F) << 7) | (a2 >> 2) & 0x1FC000 | (a2 >> 3) & 0xFE00000;
  if (a1) {
    fprintf((FILE *)*MEMORY[0x263EF8348], "id3 offs=%u\n", a2 & 0x7F | (((a2 >> 8) & 0x7F) << 7) | (a2 >> 2) & 0x1FC000 | (a2 >> 3) & 0xFE00000);
  }
  return v2;
}

uint64_t cvt_16(_WORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2)
  {
    switch(*(unsigned char *)(a2 + 9) & 7)
    {
      case 1:
        __int16 v3 = *a1 | v2;
        goto LABEL_13;
      case 2:
        __int16 v3 = *a1 ^ v2;
        goto LABEL_13;
      case 3:
        __int16 v3 = *a1 + v2;
        goto LABEL_13;
      case 4:
        __int16 v3 = *a1 - v2;
        goto LABEL_13;
      case 5:
        __int16 v3 = *a1 * v2;
        goto LABEL_13;
      case 6:
        if (!(unsigned __int16)*(void *)(a2 + 24)) {
          return 0xFFFFFFFFLL;
        }
        __int16 v3 = *a1 / (unsigned __int16)*(void *)(a2 + 24);
        goto LABEL_13;
      case 7:
        if (!(unsigned __int16)*(void *)(a2 + 24)) {
          return 0xFFFFFFFFLL;
        }
        __int16 v3 = *a1 % (unsigned __int16)*(void *)(a2 + 24);
LABEL_13:
        *a1 = v3;
        break;
      default:
        __int16 v3 = *a1 & v2;
        goto LABEL_13;
    }
  }
  uint64_t v4 = 0;
  if ((*(unsigned char *)(a2 + 9) & 0x40) != 0) {
    *a1 = ~*a1;
  }
  return v4;
}

uint64_t cvt_32(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2)
  {
    switch(*(unsigned char *)(a2 + 9) & 7)
    {
      case 1:
        unsigned int v3 = *a1 | v2;
        goto LABEL_13;
      case 2:
        unsigned int v3 = *a1 ^ v2;
        goto LABEL_13;
      case 3:
        unsigned int v3 = *a1 + v2;
        goto LABEL_13;
      case 4:
        unsigned int v3 = *a1 - v2;
        goto LABEL_13;
      case 5:
        unsigned int v3 = *a1 * v2;
        goto LABEL_13;
      case 6:
        if (!v2) {
          return 0xFFFFFFFFLL;
        }
        unsigned int v3 = *a1 / v2;
        goto LABEL_13;
      case 7:
        if (!v2) {
          return 0xFFFFFFFFLL;
        }
        unsigned int v3 = *a1 % v2;
LABEL_13:
        *a1 = v3;
        break;
      default:
        unsigned int v3 = *a1 & v2;
        goto LABEL_13;
    }
  }
  uint64_t v4 = 0;
  if ((*(unsigned char *)(a2 + 9) & 0x40) != 0) {
    *a1 = ~*a1;
  }
  return v4;
}

uint64_t *cvt_64(uint64_t *result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 24);
  if (v2)
  {
    switch(*(unsigned char *)(a2 + 9) & 7)
    {
      case 1:
        uint64_t v3 = *result | v2;
        break;
      case 2:
        uint64_t v3 = *result ^ v2;
        break;
      case 3:
        uint64_t v3 = *result + v2;
        break;
      case 4:
        uint64_t v3 = *result - v2;
        break;
      case 5:
        uint64_t v3 = *result * v2;
        break;
      case 6:
        uint64_t v3 = *result / v2;
        break;
      case 7:
        uint64_t v3 = *result % v2;
        break;
      default:
        uint64_t v3 = *result & v2;
        break;
    }
    *uint64_t result = v3;
  }
  if ((*(unsigned char *)(a2 + 9) & 0x40) != 0) {
    *uint64_t result = ~*result;
  }
  return result;
}

float *cvt_float(float *result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 24);
  if (v2)
  {
    switch(*(unsigned char *)(a2 + 9) & 7)
    {
      case 3:
        float v3 = *result + (float)v2;
        goto LABEL_7;
      case 4:
        float v3 = *result - (float)v2;
        goto LABEL_7;
      case 5:
        float v3 = *result * (float)v2;
        goto LABEL_7;
      case 6:
        float v3 = *result / (float)v2;
LABEL_7:
        *uint64_t result = v3;
        break;
      default:
        return result;
    }
  }
  return result;
}

double *cvt_double(double *result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 24);
  if (v2)
  {
    switch(*(unsigned char *)(a2 + 9) & 7)
    {
      case 3:
        double v3 = *result + (double)v2;
        goto LABEL_7;
      case 4:
        double v3 = *result - (double)v2;
        goto LABEL_7;
      case 5:
        double v3 = *result * (double)v2;
        goto LABEL_7;
      case 6:
        double v3 = *result / (double)v2;
LABEL_7:
        *uint64_t result = v3;
        break;
      default:
        return result;
    }
  }
  return result;
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  va_list v16 = a3;
  uint64_t v12 = 0;
  *(_OWORD *)ptr = 0u;
  long long v11 = 0u;
  char v9 = a2;
  uint64_t v15 = 0;
  unint64_t v13 = 2147483646;
  long long v14 = (unint64_t)a3;
  if (!a2) {
    char v9 = "(null)";
  }
  ptr[0] = 0;
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  if (realloc_buff((uint64_t)&v9, 0) == -1) {
    goto LABEL_14;
  }
  ptr[1] = ptr[0];
  while (*v9)
  {
    if (dispatch((uint64_t)&v9) == -1)
    {
LABEL_13:
      free(ptr[0]);
      goto LABEL_14;
    }
    if (*((void *)&v11 + 1) >= v13)
    {
      uint64_t v4 = (char *)ptr[0] + v13;
      goto LABEL_10;
    }
  }
  uint64_t v4 = ptr[1];
LABEL_10:
  *uint64_t v4 = 0;
  uint64_t v5 = *((void *)&v11 + 1);
  uint64_t v6 = (char *)ptr[0] + *((void *)&v11 + 1);
  while (*v9)
  {
    *((void *)&v11 + 1) = 0;
    ptr[1] = v6;
    if (dispatch((uint64_t)&v9) == -1) {
      goto LABEL_13;
    }
  }
  ptr[0] = malloc_type_realloc(ptr[0], v5 + 1, 0xE493931FuLL);
  if (!ptr[0] || (int result = v12, v12 == -1))
  {
LABEL_14:
    uint64_t v7 = 0;
    int result = -1;
  }
  else
  {
    uint64_t v7 = (char *)ptr[0];
  }
  *a1 = v7;
  return result;
}

uint64_t realloc_buff(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32) + a2;
  if ((unint64_t)(v2 + 1024) <= *(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v4 = malloc_type_realloc(*(void **)(a1 + 8), v2 + 2048, 0x1F36DADCuLL);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t result = 0;
    uint64_t v7 = &v5[*(void *)(a1 + 16) - *(void *)(a1 + 8)];
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v2 + 2048;
    v5[v2 + 2047] = 1;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t dispatch(uint64_t a1)
{
  *(void *)&v51[22] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(char **)a1;
  if (*v2 != 37)
  {
    size_t v8 = strcspn(v2, "%");
    uint64_t result = realloc_buff(a1, v8);
    if (result == -1) {
      return result;
    }
    memcpy(*(void **)(a1 + 16), *(const void **)a1, v8);
    uint64_t result = 0;
    *(void *)a1 += v8;
    *(void *)(a1 + 16) += v8;
    int64x2_t v6 = *(int64x2_t *)(a1 + 32);
    int64x2_t v7 = vdupq_n_s64(v8);
LABEL_7:
    *(int64x2_t *)(a1 + 32) = vaddq_s64(v6, v7);
    return result;
  }
  double v3 = v2 + 1;
  *(void *)a1 = v2 + 1;
  int v4 = v2[1];
  if (v4 == 37)
  {
    uint64_t result = realloc_buff(a1, 1);
    if (result == -1) {
      return result;
    }
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(a1 + 16))++ = 37;
    ++*(void *)a1;
    int64x2_t v6 = *(int64x2_t *)(a1 + 32);
    int64x2_t v7 = vdupq_n_s64(1uLL);
    goto LABEL_7;
  }
  int v9 = 0;
  int v10 = 0;
  int v11 = 0;
  int v12 = 0;
  int v13 = 0;
  for (uint64_t i = v2 + 2; ; ++i)
  {
    uint64_t v15 = i - 1;
    if (v4 > 0x29u)
    {
      switch((char)v4)
      {
        case '*':
          *(void *)a1 = i;
          int v20 = *(unsigned int **)(a1 + 56);
          *(void *)(a1 + 56) = v20 + 2;
          unsigned int v21 = *v20;
          if (v21 >= 0x3FFF) {
            int v19 = 0x3FFF;
          }
          else {
            int v19 = v21;
          }
          LOBYTE(v4) = *i;
          uint64_t v15 = i;
          goto LABEL_31;
        case '+':
          int v13 = 1;
          goto LABEL_18;
        case '-':
          int v12 = 1;
          goto LABEL_18;
        case '0':
          int v9 = 1;
          goto LABEL_18;
        default:
          goto LABEL_20;
      }
    }
    if (v4 != 32) {
      break;
    }
    int v11 = 1;
LABEL_18:
    *(void *)a1 = i;
    char v16 = *i;
    LOBYTE(v4) = v16;
  }
  if (v4 == 35)
  {
    int v10 = 1;
    goto LABEL_18;
  }
  if (!(_BYTE)v4) {
    goto LABEL_55;
  }
LABEL_20:
  if (v4 - 48 > 9)
  {
    int v19 = -1;
  }
  else
  {
    unsigned int v17 = 0;
    do
    {
      uint64_t v15 = i;
      unsigned int v17 = 10 * v17 + (char)v4 - 48;
      *(void *)a1 = i;
      int v18 = *i++;
      LOBYTE(v4) = v18;
    }
    while ((v18 - 48) < 0xA);
    if (v17 >= 0x7FFF) {
      int v19 = 0x7FFF;
    }
    else {
      int v19 = v17;
    }
  }
LABEL_31:
  if (v4 == 46)
  {
    *(void *)a1 = v15 + 1;
    int v4 = v15[1];
    if (v4 == 42)
    {
      *(void *)a1 = v15 + 2;
      unint64_t v22 = *(unsigned int **)(a1 + 56);
      *(void *)(a1 + 56) = v22 + 2;
      unsigned int v23 = *v22;
      if (v23 >= 0x3FFF) {
        unsigned int v23 = 0x3FFF;
      }
      int v47 = v23;
      int v4 = v15[2];
      v15 += 2;
      if (!v4) {
        goto LABEL_55;
      }
    }
    else
    {
      if ((v4 - 58) < 0xFFFFFFF6) {
        goto LABEL_55;
      }
      unsigned int v24 = 0;
      unint64_t v25 = v15 + 2;
      do
      {
        uint64_t v15 = v25;
        unsigned int v24 = 10 * v24 + (char)v4 - 48;
        *(void *)a1 = v25;
        int v26 = *v25++;
        int v4 = v26;
      }
      while ((v26 - 48) < 0xA);
      if (v24 >= 0x7FFF) {
        unsigned int v24 = 0x7FFF;
      }
      int v47 = v24;
      if (!v4) {
        goto LABEL_55;
      }
    }
LABEL_45:
    int v27 = (char)v4;
    if (((char)v4 - 76) > 0x2E || ((1 << (v4 - 76)) & 0x410110000001) == 0)
    {
      int v27 = -1;
      goto LABEL_59;
    }
    uint64_t v29 = v15 + 1;
    *(void *)a1 = v15 + 1;
    if (v4 == 108)
    {
      int v4 = *v29;
      if (v4 != 108)
      {
        int v27 = 108;
LABEL_54:
        uint64_t v15 = v29;
        if (!v4) {
          goto LABEL_55;
        }
LABEL_59:
        int v46 = v27;
        int v48 = v19;
        uint64_t result = (uint64_t)memchr("diouxXfegEGcspn", (char)v4, 0x10uLL);
        if (!result) {
          goto LABEL_56;
        }
        *(void *)a1 = v15 + 1;
        char v49 = 37;
        if (v13)
        {
          char v50 = 43;
          uint64_t v35 = v51;
        }
        else
        {
          uint64_t v35 = &v50;
        }
        if (v12) {
          *v35++ = 45;
        }
        if (v11) {
          *v35++ = 32;
        }
        if (v10) {
          *v35++ = 35;
        }
        if (v9) {
          *v35++ = 48;
        }
        if (v48 != -1)
        {
          sprintf(v35, "%i", v48);
          v35 += strlen(v35);
        }
        if (v47 != -1)
        {
          *uint64_t v35 = 46;
          int v36 = v35 + 1;
          sprintf(v36, "%i", v47);
          uint64_t v35 = &v36[strlen(v36)];
        }
        int v37 = v48;
        if (v46 != -1)
        {
          if (v46 == 76 && (v38 = memchr("diouxX", (char)v4, 7uLL), int v37 = v48, v38))
          {
            *(_WORD *)uint64_t v35 = 27756;
            v35 += 2;
          }
          else
          {
            *v35++ = v46;
          }
        }
        *uint64_t v35 = v4;
        v35[1] = 0;
        uint64_t v39 = (v47 + v37) & ~((v47 + v37) >> 31);
        if ((char)v4 > 98)
        {
          switch((char)v4)
          {
            case 'c':
              if (v46 == -1) {
                goto LABEL_100;
              }
              goto LABEL_55;
            case 'd':
            case 'i':
            case 'o':
            case 'u':
            case 'x':
              goto LABEL_82;
            case 'e':
            case 'f':
            case 'g':
              goto LABEL_91;
            case 'n':
              if (v46 != -1) {
                goto LABEL_55;
              }
              uint64_t v42 = *(_DWORD ***)(a1 + 56);
              *(void *)(a1 + 56) = v42 + 1;
              unsigned __int16 v43 = *v42;
              if (v43)
              {
                uint64_t result = 0;
                *unsigned __int16 v43 = *(void *)(a1 + 40);
              }
              else
              {
                uint64_t result = 0xFFFFFFFFLL;
              }
              break;
            case 'p':
              if (v46 == -1) {
                goto LABEL_105;
              }
              goto LABEL_55;
            case 's':
              unint64_t v45 = *(uint64_t **)(a1 + 56);
              *(void *)(a1 + 56) = v45 + 1;
              uint64_t result = type_s(a1, v37, v47, &v49, *v45, v32, v33, v34);
              break;
            default:
              goto LABEL_55;
          }
          return result;
        }
        if ((char)v4 == 69 || (char)v4 == 71)
        {
LABEL_91:
          if (v46 != 108 && v46 != 76 && v46 != -1) {
            goto LABEL_55;
          }
          uint64_t v40 = *(void **)(a1 + 56);
          *(void *)(a1 + 56) = v40 + 1;
          return print_it(a1, v39, &v49, v30, v31, v32, v33, v34, *v40);
        }
        if ((char)v4 != 88) {
          goto LABEL_55;
        }
LABEL_82:
        if (v46 > 107)
        {
          if (v46 != 108 && v46 != 116 && v46 != 122) {
            goto LABEL_55;
          }
        }
        else
        {
          if (v46 == -1)
          {
LABEL_100:
            size_t v41 = *(_DWORD **)(a1 + 56);
            *(void *)(a1 + 56) = v41 + 2;
            LODWORD(v41) = *v41;
            return print_it(a1, v39, &v49, v30, v31, v32, v33, v34, (char)v41);
          }
          if (v46 != 76)
          {
            if (v46 != 104) {
              goto LABEL_55;
            }
            goto LABEL_100;
          }
        }
LABEL_105:
        uint64_t v44 = *(_DWORD ***)(a1 + 56);
        *(void *)(a1 + 56) = v44 + 1;
        size_t v41 = *v44;
        return print_it(a1, v39, &v49, v30, v31, v32, v33, v34, (char)v41);
      }
      uint64_t v29 = v15 + 2;
      *(void *)a1 = v15 + 2;
      int v27 = 76;
    }
    int v4 = *v29;
    goto LABEL_54;
  }
  if ((_BYTE)v4)
  {
    int v47 = -1;
    goto LABEL_45;
  }
LABEL_55:
  uint64_t result = 0;
LABEL_56:
  *(void *)a1 = v3;
  return result;
}

uint64_t print_it(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result = realloc_buff(a1, a2);
  if (result != -1)
  {
    uint64_t result = vsprintf(*(char **)(a1 + 16), a3, &a9);
    if (*(unsigned char *)(*(void *)(a1 + 24) + *(void *)(a1 + 8) - 1) != 1) {
      __assert_rtn("print_it", "vasprintf.c", 216, "(s->buffer_base)[s->buffer_len - 1] == 1");
    }
    if (result != -1)
    {
      *(void *)(a1 + 40) += (int)result;
      int v12 = *(const char **)(a1 + 16);
      size_t v13 = strlen(v12);
      uint64_t result = 0;
      *(void *)(a1 + 32) += v13;
      *(void *)(a1 + 16) = &v12[v13];
    }
  }
  return result;
}

uint64_t type_s(uint64_t a1, int a2, int a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a5) {
    return print_it(a1, 6, "(null)", (uint64_t)a4, 0, a6, a7, a8, 0);
  }
  unint64_t v8 = 0;
  do
  {
    unint64_t v9 = v8;
    if (a3 == v8) {
      break;
    }
    ++v8;
  }
  while (*(unsigned char *)(a5 + v9));
  unint64_t v10 = a2;
  if (v9 > a2) {
    unint64_t v10 = v9;
  }
  if (a2 == -1) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  return print_it(a1, v11, a4, (uint64_t)a4, a5, a6, a7, a8, a5);
}

BOOL json_parse(unsigned __int8 **a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v8 = *a1;
  if (*a1 < a2)
  {
    int64_t v9 = a2 - v8;
    while (1)
    {
      unsigned int v10 = *v8;
      BOOL v11 = v10 > 0x20;
      uint64_t v12 = (1 << v10) & 0x100002600;
      if (v11 || v12 == 0) {
        break;
      }
      ++v8;
      if (!--v9)
      {
        unint64_t v8 = a2;
        break;
      }
    }
  }
  if (v8 == a2)
  {
    uint64_t v14 = 0;
    *a1 = a2;
    return v14;
  }
  if (a4 > 0x14) {
    return 0;
  }
  uint64_t v15 = v8 + 1;
  char v49 = v8 + 1;
  unsigned int v16 = *v8;
  if (v16 > 0x6D)
  {
    switch(v16)
    {
      case 'n':
        if (v15 >= a2) {
          goto LABEL_70;
        }
        uint64_t v32 = 1;
        while (v32 != 4)
        {
          uint64_t v15 = &v8[++v32];
          if (&v8[v32] >= a2) {
            goto LABEL_70;
          }
        }
        break;
      case 't':
        if (v15 >= a2) {
          goto LABEL_70;
        }
        uint64_t v32 = 1;
        while (v32 != 4)
        {
          uint64_t v15 = &v8[++v32];
          if (&v8[v32] >= a2) {
            goto LABEL_70;
          }
        }
        break;
      case '{':
        char v50 = v8 + 1;
        while (1)
        {
          if (v15 >= a2) {
            goto LABEL_95;
          }
          int64_t v19 = a2 - v15;
          while (1)
          {
            unsigned int v20 = *v15;
            BOOL v11 = v20 > 0x20;
            uint64_t v21 = (1 << v20) & 0x100002600;
            if (v11 || v21 == 0) {
              break;
            }
            ++v15;
            if (!--v19)
            {
              uint64_t v15 = a2;
              break;
            }
          }
          char v50 = v15;
          if (v15 == a2) {
            goto LABEL_86;
          }
          unsigned int v23 = v15 + 1;
          if (*v15 == 125) {
            break;
          }
          char v50 = v15 + 1;
          if (*v15 != 34) {
            goto LABEL_94;
          }
          unsigned int v18 = json_parse_string(&v50, a2);
          uint64_t v15 = v50;
          if (!v18) {
            goto LABEL_103;
          }
          if (v50 < a2)
          {
            uint64_t v24 = a2 - v50;
            while (1)
            {
              unsigned int v25 = *v15;
              BOOL v11 = v25 > 0x20;
              uint64_t v26 = (1 << v25) & 0x100002600;
              if (v11 || v26 == 0) {
                break;
              }
              ++v15;
              if (!--v24)
              {
                uint64_t v15 = a2;
                break;
              }
            }
          }
          if (v15 == a2)
          {
LABEL_86:
            unsigned int v18 = 0;
            uint64_t v15 = a2;
            goto LABEL_103;
          }
          unsigned int v23 = v15 + 1;
          char v50 = v15 + 1;
          if (*v15 != 58)
          {
LABEL_94:
            unsigned int v18 = 0;
            goto LABEL_102;
          }
          unsigned int v18 = json_parse(&v50, a2, a3, a4 + 2);
          uint64_t v15 = v50;
          if (!v18) {
            goto LABEL_103;
          }
          if (v50 == a2) {
            goto LABEL_86;
          }
          int v29 = *v50;
          uint64_t v15 = v50 + 1;
          int v28 = v29;
          ++v50;
          if (v29 != 44)
          {
            if (v28 == 125)
            {
              unsigned int v18 = 1;
              goto LABEL_103;
            }
LABEL_95:
            unsigned int v18 = 0;
            goto LABEL_103;
          }
        }
        unsigned int v18 = 1;
LABEL_102:
        uint64_t v15 = v23;
LABEL_103:
        char v49 = v15;
        uint64_t v30 = 3;
        goto LABEL_120;
      default:
        goto LABEL_71;
    }
    uint64_t v15 = &v8[v32];
LABEL_88:
    unsigned int v18 = 1;
    goto LABEL_89;
  }
  if (v16 != 34)
  {
    if (v16 == 91)
    {
      char v50 = v8 + 1;
      if (v15 >= a2)
      {
LABEL_98:
        unsigned int v18 = 0;
      }
      else
      {
        while (1)
        {
          if (*v15 == 93) {
            goto LABEL_97;
          }
          unsigned int v18 = json_parse(&v50, a2, a3, a4 + 2);
          uint64_t v15 = v50;
          if (!v18) {
            goto LABEL_99;
          }
          if (v50 == a2) {
            break;
          }
          int v31 = *v50;
          if (v31 != 44)
          {
            if (v31 != 93) {
              goto LABEL_98;
            }
LABEL_97:
            ++*(void *)(a3 + 40);
            ++v15;
            unsigned int v18 = 1;
            goto LABEL_99;
          }
          uint64_t v15 = v50 + 1;
          char v50 = v15;
          if (v15 >= a2) {
            goto LABEL_98;
          }
        }
        unsigned int v18 = 0;
        uint64_t v15 = a2;
      }
LABEL_99:
      uint64_t v30 = 0;
      char v49 = v15;
      goto LABEL_120;
    }
    if (v16 == 102)
    {
      if (v15 < a2)
      {
        uint64_t v17 = 0;
        while (v17 != 4)
        {
          if (&v15[++v17] >= a2)
          {
            unsigned int v18 = 0;
            v15 += v17;
            goto LABEL_89;
          }
        }
        v15 += 4;
        goto LABEL_88;
      }
LABEL_70:
      unsigned int v18 = 0;
LABEL_89:
      char v49 = v15;
      uint64_t v30 = 1;
      goto LABEL_120;
    }
LABEL_71:
    char v49 = v8;
    uint64_t v33 = v8 + 1;
    if (*v8 != 45) {
      uint64_t v33 = v8;
    }
    if (v33 < a2 && *v33 - 58 >= 0xFFFFFFF6)
    {
      int v37 = &v8[(*v8 == 45) + 1];
      while (v37 < a2)
      {
        int v38 = *v37++;
        if ((v38 - 58) < 0xFFFFFFF6)
        {
          uint64_t v33 = v37 - 1;
          unsigned int v18 = 1;
          goto LABEL_76;
        }
      }
      unsigned int v18 = 1;
      uint64_t v33 = a2;
    }
    else
    {
      unsigned int v18 = 0;
    }
LABEL_76:
    if (v33 != a2)
    {
      uint64_t v34 = v33 + 1;
      if (*v33 != 46) {
        uint64_t v34 = v33;
      }
      if (v34 < a2 && *v34 - 58 >= 0xFFFFFFF6)
      {
        uint64_t v35 = &v33[(*v33 == 46) + 1];
        while (v35 < a2)
        {
          int v36 = *v35++;
          if ((v36 - 58) < 0xFFFFFFF6)
          {
            uint64_t v34 = v35 - 1;
            unsigned int v18 = 1;
            goto LABEL_106;
          }
        }
        unsigned int v18 = 1;
        uint64_t v34 = a2;
      }
LABEL_106:
      if (v34 == a2 || !v18) {
        goto LABEL_119;
      }
      if ((*v34 | 0x20) != 0x65)
      {
        unsigned int v18 = 1;
        goto LABEL_119;
      }
      uint64_t v39 = v34 + 1;
      if (v34 + 1 == a2)
      {
        unsigned int v18 = 0;
      }
      else
      {
        int v40 = *v39;
        if (v40 == 45 || v40 == 43) {
          uint64_t v39 = v34 + 2;
        }
        if (v39 >= a2 || *v39 - 58 < 0xFFFFFFF6)
        {
          unsigned int v18 = 0;
          uint64_t v34 = v39;
LABEL_119:
          char v49 = v34;
          uint64_t v30 = 2;
          goto LABEL_120;
        }
        int v47 = &a2[~(unint64_t)v39];
        uint64_t v34 = v39;
        unsigned int v18 = 1;
        while (v47)
        {
          int v48 = *++v34;
          --v47;
          if ((v48 - 58) < 0xFFFFFFF6) {
            goto LABEL_119;
          }
        }
        unsigned int v18 = 1;
      }
    }
    uint64_t v34 = a2;
    goto LABEL_119;
  }
  unsigned int v18 = json_parse_string(&v49, a2);
  uint64_t v30 = 4;
LABEL_120:
  if (v18) {
    ++*(void *)(a3 + 8 * v30);
  }
  size_t v41 = v49;
  if (v49 < a2)
  {
    uint64_t v42 = a2 - v49;
    while (1)
    {
      unsigned int v43 = *v41;
      BOOL v11 = v43 > 0x20;
      uint64_t v44 = (1 << v43) & 0x100002600;
      if (v11 || v44 == 0) {
        break;
      }
      ++v41;
      if (!--v42)
      {
        size_t v41 = a2;
        break;
      }
    }
  }
  *a1 = v41;
  if (a4) {
    uint64_t v14 = v18;
  }
  else {
    uint64_t v14 = 0;
  }
  if (!a4 && v18) {
    return *(void *)(a3 + 40) || *(void *)(a3 + 24) != 0;
  }
  return v14;
}

uint64_t json_parse_string(unsigned __int8 **a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (*a1 >= a2)
  {
LABEL_24:
    uint64_t v4 = 0;
    goto LABEL_25;
  }
  while (1)
  {
    double v3 = v2;
    unsigned int v5 = *v2++;
    uint64_t v4 = v5;
    if (v5 != 92)
    {
      if (!v4) {
        goto LABEL_25;
      }
      if (v4 == 34)
      {
        uint64_t v4 = 1;
        goto LABEL_25;
      }
      goto LABEL_23;
    }
    if (v2 == a2)
    {
LABEL_26:
      uint64_t v4 = 0;
      uint64_t v2 = a2;
      goto LABEL_25;
    }
    uint64_t v2 = v3 + 2;
    int v6 = v3[1];
    if ((v6 - 47) > 0x37 || ((1 << (v6 - 47)) & 0x88200000000001) == 0) {
      break;
    }
LABEL_23:
    if (v2 >= a2) {
      goto LABEL_24;
    }
  }
  uint64_t v4 = 0;
  switch(v3[1])
  {
    case 'n':
    case 'r':
    case 't':
      goto LABEL_23;
    case 'o':
    case 'p':
    case 'q':
    case 's':
      goto LABEL_25;
    case 'u':
      if (a2 - v2 < 4) {
        goto LABEL_26;
      }
      uint64_t v8 = 0;
      uint64_t v2 = v3 + 6;
      break;
    default:
      if (v6 == 34) {
        goto LABEL_23;
      }
      goto LABEL_25;
  }
  while (1)
  {
    int v9 = v3[v8 + 2];
    if ((v9 - 58) <= 0xFFFFFFF5)
    {
      unsigned int v10 = v9 - 65;
      BOOL v11 = v10 > 0x25;
      uint64_t v12 = (1 << v10) & 0x3F0000003FLL;
      if (v11 || v12 == 0) {
        break;
      }
    }
    if (++v8 == 4) {
      goto LABEL_23;
    }
  }
  uint64_t v4 = 0;
  uint64_t v2 = &v3[v8 + 3];
LABEL_25:
  *a1 = v2;
  return v4;
}

__CFString *WFLocalizedDisplayNameForContentCategory(void *a1)
{
  id v1 = WFLocalizedDisplayNameResourceForContentCategory(a1);
  uint64_t v2 = v1;
  if (v1)
  {
    double v3 = [v1 localize];
  }
  else
  {
    double v3 = &stru_26C71CE08;
  }

  return v3;
}

id WFLocalizedDisplayNameResourceForContentCategory(void *a1)
{
  id v1 = a1;
  uint64_t v2 = @"Controls";
  if ([v1 isEqualToString:@"Controls"]) {
    goto LABEL_10;
  }
  uint64_t v2 = @"Device";
  if (([v1 isEqualToString:@"Device"] & 1) != 0
    || (uint64_t v2 = @"Documents", ([v1 isEqualToString:@"Documents"] & 1) != 0)
    || (uint64_t v2 = @"Location", ([v1 isEqualToString:@"Location"] & 1) != 0)
    || (uint64_t v2 = @"Media", ([v1 isEqualToString:@"Media"] & 1) != 0)
    || (uint64_t v2 = @"Scripting", ([v1 isEqualToString:@"Scripting"] & 1) != 0)
    || (uint64_t v2 = @"Sharing", ([v1 isEqualToString:@"Sharing"] & 1) != 0)
    || (uint64_t v2 = @"Web", ([v1 isEqualToString:@"Web"] & 1) != 0)
    || (uint64_t v2 = @"Favorites", [v1 isEqualToString:@"Favorites"]))
  {
LABEL_10:
    double v3 = WFLocalizedStringResourceWithKey(v2, v2);
  }
  else
  {
    double v3 = 0;
  }

  return v3;
}

void WFDyldBulkImageLoadCallback()
{
}

id getPHAssetResourceClass()
{
  uint64_t v4 = 0;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getPHAssetResourceClass_softClass;
  uint64_t v7 = getPHAssetResourceClass_softClass;
  if (!getPHAssetResourceClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPHAssetResourceClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getPHAssetResourceClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_216518C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetResourceClass_block_invoke(uint64_t a1)
{
  PhotosLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetResource");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetResourceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    double v3 = [NSString stringWithUTF8String:"Class getPHAssetResourceClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 42, @"Unable to find class %s", "PHAssetResource");

    __break(1u);
  }
}

void *PhotosLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __PhotosLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264285CC0;
    uint64_t v6 = 0;
    PhotosLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)PhotosLibraryCore_frameworkLibrary;
  if (!PhotosLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    double v3 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 37, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __PhotosLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary = result;
  return result;
}

id getAVURLAssetClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getAVURLAssetClass_softClass;
  uint64_t v7 = getAVURLAssetClass_softClass;
  if (!getAVURLAssetClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAVURLAssetClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getAVURLAssetClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165193E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void WFLivePhotoFileType()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void (*)(void))getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_ptr;
  int v9 = getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_ptr;
  if (!getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_ptr)
  {
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = __getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_block_invoke;
    v5[3] = &unk_26428AC60;
    v5[4] = &v6;
    __getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_block_invoke(v5);
    uint64_t v0 = (void (*)(void))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v1 = v0();
    id v2 = v1;
  }
  else
  {
    double v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"UTType *soft_PFCurrentPlatformLivePhotoBundleType(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFPhotoMediaContentItem.m", 59, @"%s", dlerror());

    __break(1u);
  }
}

void sub_216519528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!PhotosFormatsLibraryCore_frameworkLibrary)
  {
    v5[1] = (void *)MEMORY[0x263EF8330];
    v5[2] = (void *)3221225472;
    v5[3] = __PhotosFormatsLibraryCore_block_invoke;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_264285CA8;
    uint64_t v7 = 0;
    PhotosFormatsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  id v2 = (void *)PhotosFormatsLibraryCore_frameworkLibrary;
  if (!PhotosFormatsLibraryCore_frameworkLibrary)
  {
    a1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *PhotosFormatsLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFPhotoMediaContentItem.m", 58, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  double v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "PFCurrentPlatformLivePhotoBundleType");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getPFCurrentPlatformLivePhotoBundleTypeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __PhotosFormatsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PhotosFormatsLibraryCore_frameworkLibrary = result;
  return result;
}

void __getAVURLAssetClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVURLAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVURLAssetClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    double v3 = [NSString stringWithUTF8String:"Class getAVURLAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 63, @"Unable to find class %s", "AVURLAsset");

    __break(1u);
  }
}

void *AVFoundationLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264285CF0;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)AVFoundationLibraryCore_frameworkLibrary;
  if (!AVFoundationLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    double v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 61, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __AVFoundationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_216519E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_21651A63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

id getPHImageRequestOptionsClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getPHImageRequestOptionsClass_softClass;
  uint64_t v7 = getPHImageRequestOptionsClass_softClass;
  if (!getPHImageRequestOptionsClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPHImageRequestOptionsClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getPHImageRequestOptionsClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21651A72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getPHVideoRequestOptionsClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getPHVideoRequestOptionsClass_softClass;
  uint64_t v7 = getPHVideoRequestOptionsClass_softClass;
  if (!getPHVideoRequestOptionsClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPHVideoRequestOptionsClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getPHVideoRequestOptionsClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21651A97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHLivePhotoRequestOptionsClass_block_invoke(uint64_t a1)
{
  PhotosLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHLivePhotoRequestOptions");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHLivePhotoRequestOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    double v3 = [NSString stringWithUTF8String:"Class getPHLivePhotoRequestOptionsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 51, @"Unable to find class %s", "PHLivePhotoRequestOptions");

    __break(1u);
  }
}

void *__getPHImageManagerMaximumSizeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = PhotosLibrary();
  uint64_t result = dlsym(v2, "PHImageManagerMaximumSize");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPHImageManagerMaximumSizeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void getPHImageErrorKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getPHImageErrorKeySymbolLoc_ptr;
  uint64_t v9 = getPHImageErrorKeySymbolLoc_ptr;
  if (!getPHImageErrorKeySymbolLoc_ptr)
  {
    id v1 = PhotosLibrary();
    v7[3] = (uint64_t)dlsym(v1, "PHImageErrorKey");
    getPHImageErrorKeySymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getPHImageErrorKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFPhotoMediaContentItem.m", 55, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21651ADBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getPHImageErrorKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = PhotosLibrary();
  uint64_t result = dlsym(v2, "PHImageErrorKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPHImageErrorKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getPHVideoRequestOptionsClass_block_invoke(uint64_t a1)
{
  PhotosLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHVideoRequestOptions");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHVideoRequestOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHVideoRequestOptionsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 50, @"Unable to find class %s", "PHVideoRequestOptions");

    __break(1u);
  }
}

void __getPHImageRequestOptionsClass_block_invoke(uint64_t a1)
{
  PhotosLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHImageRequestOptions");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHImageRequestOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHImageRequestOptionsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 49, @"Unable to find class %s", "PHImageRequestOptions");

    __break(1u);
  }
}

void sub_21651B434(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void __getPHLivePhotoClass_block_invoke(uint64_t a1)
{
  PhotosLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHLivePhoto");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHLivePhotoClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHLivePhotoClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 44, @"Unable to find class %s", "PHLivePhoto");

    __break(1u);
  }
}

void sub_21651BB4C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void __getAVAssetClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 62, @"Unable to find class %s", "AVAsset");

    __break(1u);
  }
}

void sub_21651C138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetResourceRequestOptionsClass_block_invoke(uint64_t a1)
{
  PhotosLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetResourceRequestOptions");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetResourceRequestOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetResourceRequestOptionsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 52, @"Unable to find class %s", "PHAssetResourceRequestOptions");

    __break(1u);
  }
}

id getPHAssetClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getPHAssetClass_softClass;
  uint64_t v7 = getPHAssetClass_softClass;
  if (!getPHAssetClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPHAssetClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getPHAssetClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21651C918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetClass_block_invoke(uint64_t a1)
{
  PhotosLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 40, @"Unable to find class %s", "PHAsset");

    __break(1u);
  }
}

void sub_21651D2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_21651D61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVMediaTypeVideoSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary();
  uint64_t result = dlsym(v2, "AVMediaTypeVideo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMediaTypeVideoSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_21651D7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_21651DA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetResourceManagerClass_block_invoke(uint64_t a1)
{
  PhotosLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetResourceManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetResourceManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetResourceManagerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 46, @"Unable to find class %s", "PHAssetResourceManager");

    __break(1u);
  }
}

void sub_21651DBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHImageManagerClass_block_invoke(uint64_t a1)
{
  PhotosLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHImageManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHImageManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHImageManagerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 45, @"Unable to find class %s", "PHImageManager");

    __break(1u);
  }
}

void sub_21651F624(_Unwind_Exception *a1)
{
}

Class __getCLLocationClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreLocationLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_264285CD8;
    uint64_t v8 = 0;
    CoreLocationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFPhotoMediaContentItem.m", 67, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CLLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFPhotoMediaContentItem.m", 68, @"Unable to find class %s", "CLLocation");

LABEL_10:
    __break(1u);
  }
  getCLLocationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary = result;
  return result;
}

id getPHAssetCollectionClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getPHAssetCollectionClass_softClass;
  uint64_t v7 = getPHAssetCollectionClass_softClass;
  if (!getPHAssetCollectionClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPHAssetCollectionClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getPHAssetCollectionClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21651FE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetCollectionClass_block_invoke(uint64_t a1)
{
  PhotosLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetCollection");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetCollectionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetCollectionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 41, @"Unable to find class %s", "PHAssetCollection");

    __break(1u);
  }
}

void sub_21652031C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void __getPHPhotoLibraryClass_block_invoke(uint64_t a1)
{
  PhotosLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHPhotoLibrary");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHPhotoLibraryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHPhotoLibraryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoMediaContentItem.m", 43, @"Unable to find class %s", "PHPhotoLibrary");

    __break(1u);
  }
}

id WFImagePropertyNameAlbum()
{
  return WFLocalizedContentPropertyNameMarkerWithContext(@"Album", @"Image Content Item");
}

id WFImagePropertyNameWidth()
{
  return WFLocalizedContentPropertyNameMarker(@"Width");
}

id WFImagePropertyNameHeight()
{
  return WFLocalizedContentPropertyNameMarker(@"Height");
}

id WFImagePropertyNameDateTaken()
{
  return WFLocalizedContentPropertyNameMarker(@"Date Taken");
}

id WFImagePropertyNameTimeTaken()
{
  return WFLocalizedContentPropertyNameMarker(@"Time Taken");
}

id WFImagePropertyNameMediaType()
{
  return WFLocalizedContentPropertyNameMarker(@"Media Type");
}

id WFImagePropertyNamePhotoType()
{
  return WFLocalizedContentPropertyNameMarker(@"Photo Type");
}

id WFImagePropertyNameIsScreenshot()
{
  return WFLocalizedContentPropertyNameMarker(@"Is a Screenshot");
}

id WFImagePropertyNameIsScreenRecording()
{
  return WFLocalizedContentPropertyNameMarker(@"Is a Screen Recording");
}

id WFImagePropertyNameLocation()
{
  return WFLocalizedContentPropertyNameMarker(@"Location");
}

id WFImagePropertyNameOrientation()
{
  return WFLocalizedContentPropertyNameMarker(@"Orientation");
}

id WFImagePropertyNameCameraMake()
{
  return WFLocalizedContentPropertyNameMarker(@"Camera Make");
}

id WFImagePropertyNameCameraModel()
{
  return WFLocalizedContentPropertyNameMarker(@"Camera Model");
}

id WFImagePropertyNameMetadataDictionary()
{
  return WFLocalizedContentPropertyNameMarker(@"Metadata Dictionary");
}

id WFImagePropertyNameIsHidden()
{
  return WFLocalizedContentPropertyNameMarker(@"Is Hidden");
}

id WFImagePropertyNameIsFavorite()
{
  return WFLocalizedContentPropertyNameMarker(@"Is Favorite");
}

id WFPhotoLibraryMediaTypeImage()
{
  return WFLocalizedContentPropertyPossibleValueMarker(@"Image");
}

id WFPhotoLibraryMediaTypeVideo()
{
  return WFLocalizedContentPropertyPossibleValueMarker(@"Video");
}

id WFPhotoLibraryMediaTypeAudio()
{
  return WFLocalizedContentPropertyPossibleValueMarker(@"Audio");
}

id WFPhotoLibraryPossibleMediaTypes()
{
  v5[3] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedContentPropertyPossibleValueMarker(@"Image");
  v5[0] = v0;
  id v1 = WFLocalizedContentPropertyPossibleValueMarker(@"Video");
  v5[1] = v1;
  id v2 = WFLocalizedContentPropertyPossibleValueMarker(@"Audio");
  v5[2] = v2;
  id v3 = [MEMORY[0x263EFF8C0] arrayWithObjects:v5 count:3];

  return v3;
}

id WFPhotoLibraryPhotoTypeHDR()
{
  return WFLocalizedContentPropertyPossibleValueMarker(@"HDR");
}

id WFPhotoLibraryPhotoTypePanorama()
{
  return WFLocalizedContentPropertyPossibleValueMarker(@"Panorama");
}

id WFPhotoLibraryPhotoTypeBurst()
{
  return WFLocalizedContentPropertyPossibleValueMarker(@"Burst");
}

id WFPhotoLibraryPhotoTypeLivePhoto()
{
  return WFLocalizedContentPropertyPossibleValueMarker(@"Live Photo");
}

id WFPhotoLibraryPossiblePhotoTypes()
{
  v6[4] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedContentPropertyPossibleValueMarker(@"HDR");
  v6[0] = v0;
  id v1 = WFLocalizedContentPropertyPossibleValueMarker(@"Panorama");
  v6[1] = v1;
  id v2 = WFLocalizedContentPropertyPossibleValueMarker(@"Burst");
  v6[2] = v2;
  id v3 = WFLocalizedContentPropertyPossibleValueMarker(@"Live Photo");
  v6[3] = v3;
  uint64_t v4 = [MEMORY[0x263EFF8C0] arrayWithObjects:v6 count:4];

  return v4;
}

void WFImageSizeFromMetadata(void *a1)
{
  uint64_t v1 = *MEMORY[0x263F0F4F8];
  id v2 = a1;
  id v3 = [v2 objectForKey:v1];
  [v3 doubleValue];
  uint64_t v4 = [v2 objectForKey:*MEMORY[0x263F0F4F0]];
  [v4 doubleValue];

  WFImageOrientationFromMetadata(v2);
}

uint64_t WFImageOrientationFromMetadata(void *a1)
{
  uint64_t v1 = [a1 objectForKey:*MEMORY[0x263F0F4C8]];
  uint64_t v2 = [v1 intValue];

  return v2;
}

id WFImageDateTakenFromMetadata(void *a1)
{
  uint64_t v1 = [a1 objectForKey:*MEMORY[0x263F0F248]];
  id v2 = objc_alloc_init(MEMORY[0x263F08790]);
  [v2 setDateFormat:@"yyyy:MM:dd HH:mm:ss"];
  id v3 = [MEMORY[0x263EFFA18] systemTimeZone];
  [v2 setTimeZone:v3];

  uint64_t v4 = [v1 objectForKey:*MEMORY[0x263F0F240]];
  long long v5 = [v2 dateFromString:v4];

  if (!v5)
  {
    uint64_t v6 = [v1 objectForKey:*MEMORY[0x263F0F238]];
    long long v5 = [v2 dateFromString:v6];
  }
  return v5;
}

id WFImageMakeFromMetadata(void *a1)
{
  uint64_t v1 = [a1 objectForKey:*MEMORY[0x263F0F518]];
  id v2 = [v1 objectForKey:*MEMORY[0x263F0F530]];

  return v2;
}

id WFImageModelFromMetadata(void *a1)
{
  uint64_t v1 = [a1 objectForKey:*MEMORY[0x263F0F518]];
  id v2 = [v1 objectForKey:*MEMORY[0x263F0F538]];

  return v2;
}

void WFImageLocationTakenFromMetadata(void *a1)
{
  id v1 = a1;
  id v2 = [v1 objectForKey:*MEMORY[0x263F0F3C0]];
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 objectForKey:*MEMORY[0x263F0F3E0]];
    [v4 doubleValue];
    double v6 = v5;

    uint64_t v7 = [v3 objectForKey:*MEMORY[0x263F0F3F0]];
    [v7 doubleValue];
    double v9 = v8;

    unsigned int v10 = [v3 objectForKey:*MEMORY[0x263F0F3E8]];
    int v11 = [v10 isEqualToString:@"S"];

    if (v11) {
      double v6 = -v6;
    }
    uint64_t v12 = [v3 objectForKey:*MEMORY[0x263F0F3F8]];
    int v13 = [v12 isEqualToString:@"W"];

    if (v13) {
      double v9 = -v9;
    }
    uint64_t v39 = 0;
    int v40 = &v39;
    uint64_t v41 = 0x2020000000;
    uint64_t v14 = (double (*)(double, double))getCLLocationCoordinate2DMakeSymbolLoc_ptr;
    uint64_t v42 = getCLLocationCoordinate2DMakeSymbolLoc_ptr;
    if (!getCLLocationCoordinate2DMakeSymbolLoc_ptr)
    {
      uint64_t v34 = MEMORY[0x263EF8330];
      uint64_t v35 = 3221225472;
      int v36 = __getCLLocationCoordinate2DMakeSymbolLoc_block_invoke;
      int v37 = &unk_26428AC60;
      int v38 = &v39;
      uint64_t v15 = CoreLocationLibrary();
      v40[3] = (uint64_t)dlsym(v15, "CLLocationCoordinate2DMake");
      getCLLocationCoordinate2DMakeSymbolLoc_ptr = *(_UNKNOWN **)(v38[1] + 24);
      uint64_t v14 = (double (*)(double, double))v40[3];
    }
    _Block_object_dispose(&v39, 8);
    if (!v14)
    {
      uint64_t v32 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v33 = objc_msgSend(NSString, "stringWithUTF8String:", "CLLocationCoordinate2D WFCLLocationCoordinate2DMake(CLLocationDegrees, CLLocationDegrees)");
      objc_msgSend(v32, "handleFailureInFunction:file:lineNumber:description:", v33, @"WFImageProperties.m", 15, @"%s", dlerror());

      __break(1u);
      return;
    }
    double v16 = v14(v6, v9);
    double v18 = v17;
    int64_t v19 = [v3 objectForKey:*MEMORY[0x263F0F410]];
    unsigned int v20 = [v3 objectForKey:*MEMORY[0x263F0F3A8]];
    uint64_t v21 = [NSString stringWithFormat:@"%@ %@", v20, v19];
    id v22 = objc_alloc_init(MEMORY[0x263F08790]);
    [v22 setDateFormat:@"yyyy:MM:dd HH:mm:ss"];
    unsigned int v23 = [MEMORY[0x263EFFA18] timeZoneWithName:@"UTC"];
    [v22 setTimeZone:v23];

    if ([v20 length] && objc_msgSend(v19, "length"))
    {
      uint64_t v24 = [v22 dateFromString:v21];
    }
    else
    {
      uint64_t v24 = 0;
    }
    unsigned int v25 = [v3 objectForKey:*MEMORY[0x263F0F398]];
    [v25 doubleValue];
    double v27 = v26;

    uint64_t v39 = 0;
    int v40 = &v39;
    uint64_t v41 = 0x2050000000;
    int v28 = (void *)getCLLocationClass_softClass_735;
    uint64_t v42 = (void *)getCLLocationClass_softClass_735;
    if (!getCLLocationClass_softClass_735)
    {
      uint64_t v34 = MEMORY[0x263EF8330];
      uint64_t v35 = 3221225472;
      int v36 = __getCLLocationClass_block_invoke_736;
      int v37 = &unk_26428AC60;
      int v38 = &v39;
      __getCLLocationClass_block_invoke_736((uint64_t)&v34);
      int v28 = (void *)v40[3];
    }
    int v29 = v28;
    _Block_object_dispose(&v39, 8);
    uint64_t v30 = objc_msgSend([v29 alloc], "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", v24, v16, v18, v27, 0.0, 0.0);
  }
  else
  {
    uint64_t v30 = 0;
  }

  id v31 = v30;
}

void sub_21652159C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCLLocationCoordinate2DMakeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreLocationLibrary();
  uint64_t result = dlsym(v2, "CLLocationCoordinate2DMake");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCLLocationCoordinate2DMakeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CoreLocationLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_740)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreLocationLibraryCore_block_invoke_741;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264285D08;
    uint64_t v6 = 0;
    CoreLocationLibraryCore_frameworkLibrary_740 = _sl_dlopen();
  }
  uint64_t v0 = (void *)CoreLocationLibraryCore_frameworkLibrary_740;
  if (!CoreLocationLibraryCore_frameworkLibrary_740)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFImageProperties.m", 13, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void __getCLLocationClass_block_invoke_736(uint64_t a1)
{
  CoreLocationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLLocation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLLocationClass_softClass_735 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFImageProperties.m", 14, @"Unable to find class %s", "CLLocation");

    __break(1u);
  }
}

uint64_t __CoreLocationLibraryCore_block_invoke_741()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_740 = result;
  return result;
}

id WFImagePossibleOrientationStrings()
{
  v10[8] = *MEMORY[0x263EF8340];
  uint64_t v0 = WFLocalizedContentPropertyPossibleValueMarker(@"Up");
  v10[0] = v0;
  id v1 = WFLocalizedContentPropertyPossibleValueMarker(@"Down");
  v10[1] = v1;
  id v2 = WFLocalizedContentPropertyPossibleValueMarker(@"Left");
  v10[2] = v2;
  id v3 = WFLocalizedContentPropertyPossibleValueMarker(@"Right");
  v10[3] = v3;
  uint64_t v4 = WFLocalizedContentPropertyPossibleValueMarker(@"Up Mirrored");
  v10[4] = v4;
  long long v5 = WFLocalizedContentPropertyPossibleValueMarker(@"Down Mirrored");
  v10[5] = v5;
  uint64_t v6 = WFLocalizedContentPropertyPossibleValueMarker(@"Left Mirrored");
  v10[6] = v6;
  uint64_t v7 = WFLocalizedContentPropertyPossibleValueMarker(@"Right Mirrored");
  v10[7] = v7;
  double v8 = [MEMORY[0x263EFF8C0] arrayWithObjects:v10 count:8];

  return v8;
}

id WFImageStringFromOrientation(int a1)
{
  if ((a1 - 1) > 7)
  {
    id v2 = 0;
  }
  else
  {
    id v2 = WFLocalizedContentPropertyPossibleValueMarker(off_264285D20[a1 - 1]);
  }
  return v2;
}

void sub_216522928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getNSTextAttachmentClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!UIFoundationLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __UIFoundationLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264285DC0;
    uint64_t v8 = 0;
    UIFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!UIFoundationLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *UIFoundationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFImageContentItem.m", 36, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("NSTextAttachment");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getNSTextAttachmentClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFImageContentItem.m", 37, @"Unable to find class %s", "NSTextAttachment");

LABEL_10:
    __break(1u);
  }
  getNSTextAttachmentClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __UIFoundationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  UIFoundationLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_216524DC4(_Unwind_Exception *a1)
{
}

Class __getCLLocationClass_block_invoke_876(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_880)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreLocationLibraryCore_block_invoke_881;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264285DA8;
    uint64_t v8 = 0;
    CoreLocationLibraryCore_frameworkLibrary_880 = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary_880)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFImageContentItem.m", 33, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CLLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFImageContentItem.m", 34, @"Unable to find class %s", "CLLocation");

LABEL_10:
    __break(1u);
  }
  getCLLocationClass_softClass_875 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke_881()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_880 = result;
  return result;
}

id WFCreateArchiveWithFiles(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (![v8 length])
  {
    if ([v9 isEqualToString:@"gz"] && objc_msgSend(v7, "count") == 1)
    {
      unsigned int v10 = [v7 firstObject];
      uint64_t v11 = [v10 filename];
    }
    else
    {
      unsigned int v10 = [v7 firstObject];
      uint64_t v11 = [v10 wfName];
    }
    uint64_t v12 = (void *)v11;

    id v8 = v12;
  }
  int v13 = [MEMORY[0x263F08C38] UUID];
  uint64_t v14 = [v13 UUIDString];
  id v15 = v9;
  double v16 = +[WFFileRepresentation sanitizedFilename:v14 withExtension:v15];

  double v17 = +[WFTemporaryFileManager proposedTemporaryFileURLForFilename:v16];
  double v18 = [[WFArchiveWriter alloc] initWithDestinationURL:v17 format:v15 error:a4];
  if (v18)
  {
    uint64_t v72 = v16;
    int64_t v19 = objc_opt_new();
    long long v77 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    id v20 = v7;
    uint64_t v21 = [v20 countByEnumeratingWithState:&v77 objects:v83 count:16];
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)v78;
      id v65 = v8;
      id v66 = v15;
      size_t v68 = v17;
      int v70 = v20;
      uint64_t v63 = *(void *)v78;
      do
      {
        uint64_t v24 = 0;
        do
        {
          id v25 = v7;
          if (*(void *)v78 != v23) {
            objc_enumerationMutation(v20);
          }
          uint64_t v26 = *(void *)(*((void *)&v77 + 1) + 8 * v24);
          long long v73 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          double v27 = v19;
          int v28 = +[WFArchiveEntry archiveEntriesWithTopLevelFileRepresentation:v26 usedFilenames:v19];
          uint64_t v29 = [v28 countByEnumeratingWithState:&v73 objects:v82 count:16];
          if (v29)
          {
            uint64_t v30 = v29;
            uint64_t v31 = *(void *)v74;
            while (2)
            {
              for (uint64_t i = 0; i != v30; ++i)
              {
                if (*(void *)v74 != v31) {
                  objc_enumerationMutation(v28);
                }
                if (![(WFArchiveWriter *)v18 writeArchiveEntry:*(void *)(*((void *)&v73 + 1) + 8 * i) error:a4])
                {

                  int v37 = 0;
                  id v7 = v25;
                  id v8 = v65;
                  id v15 = v66;
                  double v17 = v68;
                  int v36 = v70;
                  int64_t v19 = v27;
                  goto LABEL_26;
                }
              }
              uint64_t v30 = [v28 countByEnumeratingWithState:&v73 objects:v82 count:16];
              if (v30) {
                continue;
              }
              break;
            }
          }

          ++v24;
          id v7 = v25;
          double v17 = v68;
          id v20 = v70;
          int64_t v19 = v27;
          uint64_t v23 = v63;
        }
        while (v24 != v22);
        uint64_t v22 = [v70 countByEnumeratingWithState:&v77 objects:v83 count:16];
        id v8 = v65;
        id v15 = v66;
      }
      while (v22);
    }

    if (![(WFArchiveWriter *)v18 finishWithError:a4])
    {
      int v37 = 0;
      goto LABEL_27;
    }
    uint64_t v33 = v19;
    uint64_t v34 = v17;
    id v35 = v15;
    int v36 = +[WFFileRepresentation sanitizedFilename:v8 withExtension:v35];

    double v17 = v34;
    int64_t v19 = v33;
    int v37 = +[WFFileRepresentation fileWithURL:v17 options:1 ofType:0 proposedFilename:v36];
LABEL_26:

LABEL_27:
    double v16 = v72;
    goto LABEL_39;
  }
  if ([v15 isEqualToString:@"gz"] && objc_msgSend(v7, "count") == 1)
  {
    if (a4) {
      *a4 = 0;
    }
    id v67 = v15;
    id v38 = [v7 firstObject];
    id v39 = v17;
    if (!v38)
    {
      float v56 = [MEMORY[0x263F08690] currentHandler];
      objc_msgSend(NSString, "stringWithUTF8String:", "WFFileRepresentation * _Nullable WFGZipCompressFile(WFFileRepresentation * _Nonnull __strong, NSURL * _Nonnull __strong, NSError *__autoreleasing  _Nullable * _Nullable)");
      v58 = uint64_t v57 = v17;
      [v56 handleFailureInFunction:v58, @"WFArchiveUtilities.m", 20, @"Invalid parameter not satisfying: %@", @"file" file lineNumber description];

      double v17 = v57;
      id v38 = 0;
    }
    id v40 = v8;
    if (([v39 isFileURL] & 1) == 0)
    {
      [MEMORY[0x263F08690] currentHandler];
      v60 = id v59 = v38;
      objc_msgSend(NSString, "stringWithUTF8String:", "WFFileRepresentation * _Nullable WFGZipCompressFile(WFFileRepresentation * _Nonnull __strong, NSURL * _Nonnull __strong, NSError *__autoreleasing  _Nullable * _Nullable)");
      v62 = uint64_t v61 = v17;
      [v60 handleFailureInFunction:v62, @"WFArchiveUtilities.m", 21, @"Invalid parameter not satisfying: %@", @"outputURL.isFileURL" file lineNumber description];

      double v17 = v61;
      id v38 = v59;
    }
    id v71 = v38;
    if ([v38 representationType]) {
      [v38 mappedData];
    }
    else {
    uint64_t v42 = [v38 data];
    }
    memset(&strm.avail_in, 0, 104);
    strm.avail_in = [v42 length];
    id v64 = v42;
    strm.next_in = (Bytef *)[v64 bytes];
    strm.avail_out = 0;
    id v43 = v39;
    uint64_t v44 = open((const char *)[v43 fileSystemRepresentation], 1538, 420);
    uint64_t v72 = v16;
    if (v44 == -1)
    {
      id v8 = v40;
      if (a4)
      {
        id v46 = objc_alloc(MEMORY[0x263F087E8]);
        int v47 = v17;
        uint64_t v48 = *MEMORY[0x263F08438];
        char v49 = __error();
        uint64_t v50 = v48;
        double v17 = v47;
        int v37 = 0;
        *a4 = (id)[v46 initWithDomain:v50 code:*v49 userInfo:0];
      }
      else
      {
        int v37 = 0;
      }
      id v15 = v67;
      int v36 = v71;
    }
    else
    {
      unint64_t v45 = (void *)[objc_alloc(MEMORY[0x263F08840]) initWithFileDescriptor:v44 closeOnDealloc:1];
      if (deflateInit2_(&strm, -1, 8, 31, 8, 0, "1.2.12", 112))
      {
        id v8 = v40;
        int v37 = 0;
        id v15 = v67;
        int v36 = v71;
      }
      else
      {
        uint64_t v69 = v17;
        for (j = (void *)[objc_alloc(MEMORY[0x263EFF990]) initWithLength:0x4000];
              ;
              objc_msgSend(j, "setLength:", objc_msgSend(j, "length") + 0x4000))
        {
          do
          {
            id v52 = j;
            strm.next_out = (Bytef *)[v52 mutableBytes];
            strm.avail_out = [v52 length];
            int v53 = deflate(&strm, 4);
            uint64_t v54 = objc_msgSend(v52, "subdataWithRange:", 0, strm.total_out - objc_msgSend(v45, "offsetInFile"));
            [v45 writeData:v54];
          }
          while (!v53);
          if (v53 != -5) {
            break;
          }
        }
        deflateEnd(&strm);
        if (v53 == 1)
        {
          int v37 = +[WFFileRepresentation fileWithURL:v43 options:1 ofType:0];
        }
        else
        {
          char v55 = [MEMORY[0x263F08850] defaultManager];
          [v55 removeItemAtURL:v43 error:0];

          int v37 = 0;
        }
        id v8 = v40;
        double v17 = v69;
        int v36 = v71;

        id v15 = v67;
      }
    }
    int64_t v19 = v36;
    goto LABEL_26;
  }
  int v37 = 0;
LABEL_39:

  return v37;
}

id WFCreateArchiveWithFileWrapper(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (!v7)
  {
    uint64_t v31 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v32 = objc_msgSend(NSString, "stringWithUTF8String:", "WFFileRepresentation * _Nullable WFCreateArchiveWithFileWrapper(NSFileWrapper * _Nonnull __strong, NSString * _Nonnull __strong, WFArchiveFormat  _Nonnull __strong, NSError *__autoreleasing  _Nullable * _Nullable)");
    [v31 handleFailureInFunction:v32, @"WFArchiveUtilities.m", 109, @"Invalid parameter not satisfying: %@", @"wrapper" file lineNumber description];

    if (v8) {
      goto LABEL_3;
    }
LABEL_23:
    uint64_t v33 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v34 = objc_msgSend(NSString, "stringWithUTF8String:", "WFFileRepresentation * _Nullable WFCreateArchiveWithFileWrapper(NSFileWrapper * _Nonnull __strong, NSString * _Nonnull __strong, WFArchiveFormat  _Nonnull __strong, NSError *__autoreleasing  _Nullable * _Nullable)");
    [v33 handleFailureInFunction:v34, @"WFArchiveUtilities.m", 110, @"Invalid parameter not satisfying: %@", @"archiveFilename" file lineNumber description];

    goto LABEL_3;
  }
  if (!v8) {
    goto LABEL_23;
  }
LABEL_3:
  unsigned int v10 = [v8 stringByDeletingPathExtension];
  uint64_t v11 = +[WFTemporaryFileManager proposedTemporaryFileURLForFilename:v8];
  uint64_t v42 = [v7 fileWrappers];
  uint64_t v12 = [v42 allKeys];
  int v13 = [v12 sortedArrayUsingSelector:sel_compare_];

  uint64_t v14 = [[WFArchiveWriter alloc] initWithDestinationURL:v11 format:v9 error:a4];
  if (v14
    && (id v15 = [[WFArchiveEntry alloc] initWithDirectoryName:v10], v16 = [(WFArchiveWriter *)v14 writeArchiveEntry:v15 error:a4], v15, v16))
  {
    id v40 = v14;
    uint64_t v41 = v10;
    id v36 = v8;
    id v37 = v7;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v35 = v13;
    id obj = v13;
    uint64_t v17 = [obj countByEnumeratingWithState:&v45 objects:v49 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v39 = *(void *)v46;
      while (2)
      {
        for (uint64_t i = 0; i != v18; ++i)
        {
          uint64_t v20 = a4;
          if (*(void *)v46 != v39) {
            objc_enumerationMutation(obj);
          }
          uint64_t v21 = *(void *)(*((void *)&v45 + 1) + 8 * i);
          uint64_t v22 = [v42 objectForKey:v21];
          uint64_t v23 = [v22 regularFileContents];
          uint64_t v24 = [WFArchiveEntry alloc];
          id v25 = [NSString stringWithFormat:@"%@/%@", v41, v21];
          uint64_t v26 = [v23 length];
          v43[0] = MEMORY[0x263EF8330];
          v43[1] = 3221225472;
          v43[2] = __WFCreateArchiveWithFileWrapper_block_invoke;
          v43[3] = &unk_2642884F8;
          id v44 = v23;
          id v27 = v23;
          int v28 = [(WFArchiveEntry *)v24 initWithFilename:v25 fileType:0x8000 filePermission:420 fileSize:v26 modificationDate:0 creationDate:0 dataProvider:v43];

          a4 = v20;
          LODWORD(v25) = [(WFArchiveWriter *)v40 writeArchiveEntry:v28 error:v20];

          if (!v25)
          {
            uint64_t v29 = 0;
            id v8 = v36;
            id v7 = v37;
            uint64_t v14 = v40;
            unsigned int v10 = v41;
            goto LABEL_17;
          }
        }
        uint64_t v18 = [obj countByEnumeratingWithState:&v45 objects:v49 count:16];
        if (v18) {
          continue;
        }
        break;
      }
    }

    uint64_t v14 = v40;
    if ([(WFArchiveWriter *)v40 finishWithError:a4])
    {
      id obj = [MEMORY[0x263F852B8] typeWithUTType:*MEMORY[0x263F1DC70]];
      id v8 = v36;
      uint64_t v29 = +[WFFileRepresentation fileWithURL:options:ofType:proposedFilename:](WFFileRepresentation, "fileWithURL:options:ofType:proposedFilename:", v11, 1);
      id v7 = v37;
      unsigned int v10 = v41;
LABEL_17:
      int v13 = v35;
    }
    else
    {
      uint64_t v29 = 0;
      id v8 = v36;
      id v7 = v37;
      unsigned int v10 = v41;
      int v13 = v35;
    }
  }
  else
  {
    uint64_t v29 = 0;
  }

  return v29;
}

id __WFCreateArchiveWithFileWrapper_block_invoke(uint64_t a1)
{
  uint64_t v1 = (void *)[objc_alloc(MEMORY[0x263EFF950]) initWithData:*(void *)(a1 + 32)];
  return v1;
}

id WFExtractArchiveFile(void *a1, uint64_t a2)
{
  long long v37[2] = *MEMORY[0x263EF8340];
  id v3 = a1;
  uint64_t v4 = [[WFArchiveReader alloc] initWithArchiveFile:v3 error:a2];
  if (!v4)
  {
    id v9 = 0;
    goto LABEL_24;
  }
  long long v5 = [v3 wfName];
  uint64_t v6 = +[WFTemporaryFileManager proposedTemporaryFileURLForFilename:v5 isDirectory:1];

  id v7 = [MEMORY[0x263F08850] defaultManager];
  int v8 = [v7 createDirectoryAtURL:v6 withIntermediateDirectories:0 attributes:0 error:a2];

  id v9 = 0;
  if (v8)
  {
    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x3032000000;
    v34[3] = __Block_byref_object_copy__981;
    v34[4] = __Block_byref_object_dispose__982;
    id v35 = +[WFFileRepresentation fileWithURL:v6 options:1];
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = __WFExtractArchiveFile_block_invoke;
    aBlock[3] = &unk_26428AC60;
    aBlock[4] = v34;
    int v28 = (void (**)(void))_Block_copy(aBlock);
    unsigned int v10 = objc_opt_new();
    uint64_t v11 = [(WFArchiveReader *)v4 extractArchiveToDestinationURL:v6 error:a2];
    id v12 = v11;
    if (!v11)
    {
      id v9 = 0;
      goto LABEL_22;
    }
    if ([v11 count] != 1) {
      goto LABEL_11;
    }
    uint64_t v26 = [v12 firstObject];
    uint64_t v14 = *MEMORY[0x263EFF6D0];
    v37[0] = *MEMORY[0x263EFF6A8];
    uint64_t v13 = v37[0];
    v37[1] = v14;
    id v15 = [MEMORY[0x263EFF8C0] arrayWithObjects:v37 count:2];
    id v27 = [v26 resourceValuesForKeys:v15 error:0];

    BOOL v16 = [v27 objectForKey:v13];
    if ([v16 BOOLValue])
    {
      uint64_t v17 = [v27 objectForKey:v14];
      char v18 = [v17 BOOLValue];

      if (v18)
      {
LABEL_10:

LABEL_11:
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        id v12 = v12;
        uint64_t v21 = [v12 countByEnumeratingWithState:&v29 objects:v36 count:16];
        if (v21)
        {
          uint64_t v22 = *(void *)v30;
          do
          {
            for (uint64_t i = 0; i != v21; ++i)
            {
              if (*(void *)v30 != v22) {
                objc_enumerationMutation(v12);
              }
              uint64_t v24 = +[WFFileRepresentation fileWithURL:*(void *)(*((void *)&v29 + 1) + 8 * i) options:3];
              [v10 addObject:v24];
            }
            uint64_t v21 = [v12 countByEnumeratingWithState:&v29 objects:v36 count:16];
          }
          while (v21);
        }

        id v9 = v10;
        goto LABEL_19;
      }
      int64_t v19 = [MEMORY[0x263F08850] defaultManager];
      BOOL v16 = [v19 contentsOfDirectoryAtURL:v26 includingPropertiesForKeys:0 options:1 error:a2];

      if (!v16)
      {

        id v9 = 0;
LABEL_19:

LABEL_22:
        v28[2](v28);

        _Block_object_dispose(v34, 8);
        goto LABEL_23;
      }
      uint64_t v20 = [objc_alloc(MEMORY[0x263EFF9B0]) initWithArray:v16];

      id v12 = (id)v20;
    }

    goto LABEL_10;
  }
LABEL_23:

LABEL_24:
  return v9;
}

void sub_216526904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t __Block_byref_object_copy__981(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__982(uint64_t a1)
{
}

void __WFExtractArchiveFile_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  id v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

id getWFTemporaryFileManagerLogObject()
{
  if (getWFTemporaryFileManagerLogObject_onceToken != -1) {
    dispatch_once(&getWFTemporaryFileManagerLogObject_onceToken, &__block_literal_global_1165);
  }
  uint64_t v0 = (void *)getWFTemporaryFileManagerLogObject_log;
  return v0;
}

uint64_t __getWFTemporaryFileManagerLogObject_block_invoke()
{
  getWFTemporaryFileManagerLogObject_log = (uint64_t)os_log_create((const char *)*MEMORY[0x263F85748], "TemporaryFileManager");
  return MEMORY[0x270F9A758]();
}

uint64_t gettag(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3 = *a2;
  if (*a2 >= a3) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v5 = v3 + 1;
  *a2 = v3 + 1;
  uint64_t result = *(unsigned char *)(a1 + v3) & 0x1F;
  if (result != 31) {
    return result;
  }
  if (v5 >= a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 31;
  while (*(char *)(a1 + v5) < 0)
  {
    *a2 = v5 + 1;
    uint64_t result = *(unsigned __int8 *)(a1 + v5++) + (result << 7) - 128;
    if (a3 == v5) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t getlength(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3 = *a2;
  if (*a2 >= a3) {
    return 0xFFFFFFFFLL;
  }
  int v5 = *(char *)(a1 + v3);
  unint64_t v6 = v3 + 1;
  *a2 = v3 + 1;
  uint64_t result = *(unsigned char *)(a1 + v3) & 0x7F;
  if (v3 + 1 + result >= a3) {
    return 0xFFFFFFFFLL;
  }
  if (v5 < 0)
  {
    unint64_t v8 = 0;
    if (result)
    {
      unsigned int v9 = 0;
      unint64_t v10 = v6;
      do
      {
        unint64_t v6 = v10 + 1;
        *a2 = v10 + 1;
        unint64_t v8 = *(unsigned __int8 *)(a1 + v10) | (v8 << 8);
        ++v9;
        ++v10;
      }
      while (v9 < result);
    }
    if (v6 + v8 > a3 || v8 > 0xFFFFFFFF - v6) {
      return 0xFFFFFFFFLL;
    }
    else {
      return v8;
    }
  }
  return result;
}

id WFJSONSerializable(void *a1)
{
  v5[3] = *MEMORY[0x263EF8340];
  id v1 = a1;
  v5[0] = objc_opt_class();
  v5[1] = objc_opt_class();
  v5[2] = objc_opt_class();
  id v2 = [MEMORY[0x263EFF8C0] arrayWithObjects:v5 count:3];
  unint64_t v3 = WFSerializable(v1, v2);

  return v3;
}

id WFPlistSerializable(void *a1)
{
  void v5[4] = *MEMORY[0x263EF8340];
  id v1 = a1;
  v5[0] = objc_opt_class();
  v5[1] = objc_opt_class();
  v5[2] = objc_opt_class();
  v5[3] = objc_opt_class();
  id v2 = [MEMORY[0x263EFF8C0] arrayWithObjects:v5 count:4];
  unint64_t v3 = WFSerializable(v1, v2);

  return v3;
}

id WFSerializable(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v3 = a1;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v4 = a2;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v18;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(v4);
        }
        if (objc_opt_isKindOfClass())
        {
          id v3 = v3;
          uint64_t v11 = v4;
          unint64_t v10 = v3;
          goto LABEL_14;
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v9 = [v3 allObjects];

    id v3 = (id)v9;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    v15[2] = __WFSerializable_block_invoke;
    v15[3] = &unk_26428AD10;
    id v16 = v4;
    unint64_t v10 = objc_msgSend(v3, "if_compactMap:", v15);
    uint64_t v11 = v16;
LABEL_14:

    goto LABEL_15;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3221225472;
    v13[2] = __WFSerializable_block_invoke_2;
    v13[3] = &unk_264285FC8;
    id v14 = v4;
    unint64_t v10 = objc_msgSend(v3, "if_compactMap:", v13);
    uint64_t v11 = v14;
    goto LABEL_14;
  }
  unint64_t v10 = 0;
LABEL_15:

  return v10;
}

uint64_t __WFSerializable_block_invoke(uint64_t a1, uint64_t a2)
{
  return WFSerializable(a2, *(void *)(a1 + 32));
}

id __WFSerializable_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  WFSerializable(a3, *(void *)(a1 + 32));
  id result = (id)objc_claimAutoreleasedReturnValue();
  *a5 = result;
  return result;
}

void WFAddDictionaryObjectToItemArray(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    v15[2] = __WFAddDictionaryObjectToItemArray_block_invoke;
    v15[3] = &unk_264285FA0;
    id v16 = v10;
    id v17 = v11;
    id v18 = v13;
    [v9 enumerateObjectsUsingBlock:v15];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      objc_msgSend(v9, "setWf_preferredFileType:", v11);
    }
    id v14 = +[WFContentItem itemWithObject:v9 named:v12 attributionSet:v13];
    if (v14) {
      [v10 addObject:v14];
    }
  }
}

uint64_t __WFAddDictionaryObjectToItemArray_block_invoke(void *a1, uint64_t a2)
{
  return WFAddDictionaryObjectToItemArray(a2, a1[4], a1[5], 0, a1[6]);
}

int asprintf(char **a1, const char *a2, ...)
{
  va_start(va, a2);
  return vasprintf(a1, a2, va);
}

id WFEnforceClass(void *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v3 = a1;
  if (v3 && (objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v5 = getWFGeneralLogObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      int v8 = 136315906;
      id v9 = "WFEnforceClass";
      __int16 v10 = 2114;
      id v11 = v3;
      __int16 v12 = 2114;
      id v13 = (id)objc_opt_class();
      __int16 v14 = 2114;
      uint64_t v15 = a2;
      id v6 = v13;
      _os_log_impl(&dword_216505000, v5, OS_LOG_TYPE_FAULT, "%s Warning: %{public}@ is of type %{public}@, not %{public}@! Falling back to nil.", (uint8_t *)&v8, 0x2Au);
    }
    id v4 = 0;
  }
  else
  {
    id v4 = v3;
  }

  return v4;
}

void __getCLCircularRegionClass_block_invoke(uint64_t a1)
{
  CoreLocationLibrary_1780();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLCircularRegion");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLCircularRegionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLCircularRegionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"CLCircularRegion+WFSerialization.m", 16, @"Unable to find class %s", "CLCircularRegion");

    __break(1u);
  }
}

void *__getCLLocationCoordinate2DMakeSymbolLoc_block_invoke_1779(uint64_t a1)
{
  id v2 = CoreLocationLibrary_1780();
  id result = dlsym(v2, "CLLocationCoordinate2DMake");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCLLocationCoordinate2DMakeSymbolLoc_ptr_1778 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CoreLocationLibrary_1780()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_1789)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreLocationLibraryCore_block_invoke_1790;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264286030;
    uint64_t v6 = 0;
    CoreLocationLibraryCore_frameworkLibrary_1789 = _sl_dlopen();
  }
  uint64_t v0 = (void *)CoreLocationLibraryCore_frameworkLibrary_1789;
  if (!CoreLocationLibraryCore_frameworkLibrary_1789)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"CLCircularRegion+WFSerialization.m", 15, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CoreLocationLibraryCore_block_invoke_1790()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_1789 = result;
  return result;
}

id WFStatusPropertyValueForEKParticipantStatus(unint64_t a1)
{
  if (a1 <= 7)
  {
    a1 = WFLocalizedContentPropertyPossibleValueMarker(off_2642860D8[a1]);
  }
  return (id)a1;
}

uint64_t unreadable_info(uint64_t a1, __int16 a2, char *a3)
{
  if (access(a3, 2) || (uint64_t result = file_printf(a1, "writable, ", v6, v7, v8, v9, v10, v11, v19), result != -1))
  {
    if (access(a3, 1)
      || (uint64_t result = file_printf(a1, "executable, ", v13, v14, v15, v16, v17, v18, v19), result != -1))
    {
      if ((a2 & 0xF000) != 0x8000
        || (uint64_t result = file_printf(a1, "regular file, ", v13, v14, v15, v16, v17, v18, v19), result != -1))
      {
        if (file_printf(a1, "no read permission", v13, v14, v15, v16, v17, v18, v19) == -1) {
          return 0xFFFFFFFFLL;
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

const char *magic_file(const char *result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v9 = (uint64_t)result;
    if (file_reset((uint64_t)result, 1, a3, a4, a5, a6, a7, a8) == -1) {
      return 0;
    }
    uint64_t result = (const char *)malloc_type_malloc(*(void *)(v9 + 280) + 129, 0x74214EDCuLL);
    if (!result) {
      return result;
    }
    uint64_t v10 = (char *)result;
    memset(&v104, 0, sizeof(v104));
    if (!a2)
    {
      int v19 = 0;
      goto LABEL_115;
    }
    int v11 = *(_DWORD *)(v9 + 68);
    if ((v11 & 2) != 0) {
      int v12 = stat(a2, &v104);
    }
    else {
      int v12 = lstat(a2, &v104);
    }
    memset(&v105, 0, sizeof(v105));
    if (v12)
    {
      int v20 = *(_DWORD *)(v9 + 68);
      uint64_t v21 = __error();
      int v27 = *v21;
      if ((v20 & 0x200) == 0)
      {
        strerror(*v21);
          int v34 = -1;
        else {
          int v34 = 0;
        }
        goto LABEL_14;
      }
      char v103 = (char)a2;
LABEL_24:
      file_error(v9, v27, v39, v22, v23, v24, v25, v26, v103);
LABEL_25:
      int v34 = -1;
      goto LABEL_26;
    }
    if ((v11 & 0x1000C10) != 0)
    {
      int v35 = 0;
    }
    else
    {
      mode_t st_mode = v104.st_mode;
      if ((v104.st_mode & 0x800) != 0)
      {
        if (file_printf(v9, "%ssetuid", v13, v14, v15, v16, v17, v18, (char)"") == -1) {
          goto LABEL_25;
        }
        mode_t v41 = v104.st_mode;
        int v35 = 1;
      }
      else
      {
        int v35 = 0;
        mode_t v41 = v104.st_mode;
      }
      if ((v41 & 0x400) != 0)
      {
        uint64_t v42 = ", ";
        if ((st_mode & 0x800) == 0) {
          uint64_t v42 = "";
        }
        if (file_printf(v9, "%ssetgid", v13, v14, v15, v16, v17, v18, (char)v42) == -1) {
          goto LABEL_25;
        }
        ++v35;
        mode_t v41 = v104.st_mode;
      }
      if ((v41 & 0x200) != 0)
      {
        id v43 = ", ";
        if (!v35) {
          id v43 = "";
        }
        if (file_printf(v9, "%ssticky", v13, v14, v15, v16, v17, v18, (char)v43) == -1) {
          goto LABEL_25;
        }
        ++v35;
      }
    }
    int v36 = v11 & 0x410;
    int v37 = v11 & 0x1000800;
    switch(((v104.st_mode & 0xF000u) - 4096) >> 12)
    {
      case 0u:
        if ((*(unsigned char *)(v9 + 68) & 8) != 0) {
          goto LABEL_83;
        }
        if ((v11 & 0x410) != 0)
        {
          id v38 = "fifo";
          goto LABEL_109;
        }
        if (v37) {
          goto LABEL_114;
        }
        id v64 = ", ";
        if (!v35) {
          id v64 = "";
        }
        int v47 = file_printf(v9, "%sfifo (named pipe)", v13, v14, v15, v16, v17, v18, (char)v64);
        goto LABEL_172;
      case 1u:
        if ((*(unsigned char *)(v9 + 68) & 8) != 0) {
          goto LABEL_54;
        }
        if ((v11 & 0x410) != 0)
        {
          id v38 = "chardevice";
          goto LABEL_109;
        }
        if (v37) {
          goto LABEL_114;
        }
        id v65 = ", ";
        if (!v35) {
          id v65 = "";
        }
        int v47 = file_printf(v9, "%scharacter special (%ld/%ld)", v13, v14, v15, v16, v17, v18, (char)v65);
        goto LABEL_172;
      case 3u:
        if ((v11 & 0x410) != 0)
        {
          id v38 = "directory";
          goto LABEL_109;
        }
        if (v37) {
          goto LABEL_114;
        }
        long long v46 = ", ";
        if (!v35) {
          long long v46 = "";
        }
        int v47 = file_printf(v9, "%sdirectory", v13, v14, v15, v16, v17, v18, (char)v46);
        goto LABEL_172;
      case 5u:
        if ((*(unsigned char *)(v9 + 68) & 8) != 0) {
          goto LABEL_54;
        }
        if ((v11 & 0x410) != 0)
        {
          id v38 = "blockdevice";
          goto LABEL_109;
        }
        if (v37) {
          goto LABEL_114;
        }
        id v66 = ", ";
        if (!v35) {
          id v66 = "";
        }
        int v47 = file_printf(v9, "%sblock special (%ld/%ld)", v13, v14, v15, v16, v17, v18, (char)v66);
        goto LABEL_172;
      case 7u:
        if ((*(unsigned char *)(v9 + 68) & 8) != 0 || v104.st_size)
        {
LABEL_54:
          if ((v11 & 0x1000C10) != 0
            || !v35
            || file_printf(v9, " ", v13, v14, v15, v16, v17, v18, v102) != -1)
          {
            goto LABEL_114;
          }
          goto LABEL_25;
        }
        if ((v11 & 0x410) != 0)
        {
          id v38 = "x-empty";
          goto LABEL_109;
        }
        if (!v37)
        {
          id v67 = ", ";
          if (!v35) {
            id v67 = "";
          }
          int v47 = file_printf(v9, "%sempty", v13, v14, v15, v16, v17, v18, (char)v67);
          goto LABEL_172;
        }
        goto LABEL_114;
      case 9u:
        ssize_t v44 = readlink(a2, v109, 0x3FFuLL);
        if (v44 <= 0)
        {
          if ((*(unsigned char *)(v9 + 69) & 2) != 0)
          {
            int v27 = *__error();
            char v103 = (char)a2;
            goto LABEL_24;
          }
          if ((v11 & 0x410) != 0) {
            goto LABEL_108;
          }
          if (v37) {
            goto LABEL_114;
          }
          if (v35) {
            long long v48 = ", ";
          }
          else {
            long long v48 = "";
          }
          char v49 = __error();
          strerror(*v49);
        }
        else
        {
          v109[v44] = 0;
          if (v109[0] == 47)
          {
            long long v45 = v109;
          }
          else
          {
            uint64_t v57 = strrchr(a2, 47);
            if (v57)
            {
              if (v57 - a2 >= 1024)
              {
                if ((*(unsigned char *)(v9 + 69) & 2) != 0)
                {
                }
                else if ((v11 & 0x410) != 0)
                {
                  if (handle_mime(v9, v36, (uint64_t)"x-path-too-long", v59, v60, v61, v62, v63) != -1)
                  {
LABEL_83:
                    if (v37) {
                      goto LABEL_114;
                    }
                    goto LABEL_16;
                  }
                }
                else
                {
                  if (v37) {
                    goto LABEL_114;
                  }
                  uint64_t v101 = ", ";
                  if (!v35) {
                    uint64_t v101 = "";
                  }
                    goto LABEL_16;
                }
                int v34 = -1;
LABEL_14:
                if (v34 == -1)
                {
LABEL_26:
                  free(v10);
                  goto LABEL_157;
                }
                if (v34)
                {
LABEL_16:
                  int v34 = 0;
                  goto LABEL_26;
                }
LABEL_114:
                *__error() = 0;
                int v19 = open(a2, 4);
                if (v19 < 0)
                {
                  if (!stat(a2, &v104) && unreadable_info(v9, v104.st_mode, a2) == -1)
                  {
                    off_t v75 = -1;
                    int v34 = -1;
                  }
                  else
                  {
                    int v34 = 0;
                    off_t v75 = -1;
                  }
LABEL_139:
                  free(v10);
                  if (v19 == -1) {
                    goto LABEL_157;
                  }
                  goto LABEL_151;
                }
LABEL_115:
                int v72 = fstat(v19, &v104);
                if (v72) {
                  BOOL v73 = 0;
                }
                else {
                  BOOL v73 = (v104.st_mode & 0xF000) == 4096;
                }
                int v74 = v73;
                if (a2)
                {
                  off_t v75 = -1;
                  if (v74) {
                    goto LABEL_123;
                  }
                }
                else
                {
                  off_t v75 = lseek(v19, 0, 1);
                  if (v74)
                  {
LABEL_123:
                    uint64_t v76 = 0;
                    do
                    {
                      uint64_t v77 = sread(v19, &v10[v76], *(void *)(v9 + 280) - v76);
                      if (v77 < 1) {
                        break;
                      }
                      v76 += v77;
                    }
                    while ((unint64_t)v77 > 0x1FF);
                    if (!v76 && a2)
                    {
                      int v81 = unreadable_info(v9, v104.st_mode, a2);
                      goto LABEL_136;
                    }
                    uint64_t v85 = &v10[v76];
                    v85[128] = 0;
                    *((_OWORD *)v85 + 6) = 0u;
                    *((_OWORD *)v85 + 7) = 0u;
                    *((_OWORD *)v85 + 4) = 0u;
                    *((_OWORD *)v85 + 5) = 0u;
                    *((_OWORD *)v85 + 2) = 0u;
                    *((_OWORD *)v85 + 3) = 0u;
                    *(_OWORD *)uint64_t v85 = 0u;
                    *((_OWORD *)v85 + 1) = 0u;
                    goto LABEL_134;
                  }
                }
                ssize_t v82 = read(v19, v10, *(void *)(v9 + 280));
                if (v82 == -1)
                {
                  int v86 = *__error();
                  if (a2 || !v19)
                  {
                    uint64_t v92 = "/dev/stdin";
                    if (a2) {
                      LOBYTE(v92) = (_BYTE)a2;
                    }
                  }
                  else
                  {
                    file_error(v9, v86, "cannot read fd %d", v87, v88, v89, v90, v91, v19);
                  }
                  free(v10);
                  int v34 = -1;
LABEL_151:
                  if (v75 != -1) {
                    lseek(v19, v75, 0);
                  }
                  if (a2 && v19)
                  {
                    close(v19);
                    if ((*(unsigned char *)(v9 + 68) & 0x80) != 0)
                    {
                      v106.__darwin_time_t tv_sec = v104.st_atimespec.tv_sec;
                      *(void *)&v106.tv_usec = 0;
                      __darwin_time_t tv_sec = v104.st_mtimespec.tv_sec;
                      uint64_t v108 = 0;
                      utimes(a2, &v106);
                    }
                  }
LABEL_157:
                  if (!v34) {
                    return file_getbuffer(v9);
                  }
                  return 0;
                }
                uint64_t v76 = v82;
                uint64_t v83 = &v10[v82];
                unsigned char v83[128] = 0;
                *((_OWORD *)v83 + 6) = 0u;
                *((_OWORD *)v83 + 7) = 0u;
                *((_OWORD *)v83 + 4) = 0u;
                *((_OWORD *)v83 + 5) = 0u;
                *((_OWORD *)v83 + 2) = 0u;
                *((_OWORD *)v83 + 3) = 0u;
                *(_OWORD *)uint64_t v83 = 0u;
                *((_OWORD *)v83 + 1) = 0u;
                if (v72)
                {
                  uint64_t v84 = 0;
LABEL_135:
                  int v81 = file_buffer(v9, v19, v84, (unsigned __int8 *)v10, v76, v78, v79, v80);
LABEL_136:
                  if (v81 == -1) {
                    int v34 = -1;
                  }
                  else {
                    int v34 = 0;
                  }
                  goto LABEL_139;
                }
LABEL_134:
                uint64_t v84 = (long long *)&v104;
                goto LABEL_135;
              }
              size_t v68 = (char *)&v106;
              uint64_t v69 = (char *)&v106 + v57 - a2;
              __strlcpy_chk();
              v69[1] = 0;
              __strlcat_chk();
            }
            else
            {
              size_t v68 = v109;
            }
            long long v45 = v68;
          }
          if (stat(v45, &v105) < 0)
          {
            uint64_t v93 = __error();
            int v34 = bad_link(v9, *v93, (uint64_t)v109, v94, v95, v96, v97, v98);
            goto LABEL_14;
          }
          if ((*(_DWORD *)(v9 + 68) & 2) != 0)
          {
            *(_DWORD *)(v9 + 68) &= 2u;
            uint64_t v99 = magic_file(v9, v109);
            *(_DWORD *)(v9 + 68) |= 2u;
            if (v99) {
              int v34 = 1;
            }
            else {
              int v34 = -1;
            }
            if (v99)
            {
LABEL_113:
              if (v37) {
                goto LABEL_114;
              }
            }
            goto LABEL_14;
          }
          if (v36)
          {
LABEL_108:
            id v38 = "symlink";
            goto LABEL_109;
          }
          if (v37) {
            goto LABEL_114;
          }
          uint64_t v100 = ", ";
          if (!v35) {
            uint64_t v100 = "";
          }
          int v47 = file_printf(v9, "%ssymbolic link to %s", v70, v14, v15, v16, v17, v18, (char)v100);
        }
LABEL_172:
        if (v47 != -1) {
          goto LABEL_16;
        }
        goto LABEL_25;
      case 0xBu:
        if ((v11 & 0x410) == 0)
        {
          if (v37) {
            goto LABEL_114;
          }
          float v56 = ", ";
          if (!v35) {
            float v56 = "";
          }
          int v47 = file_printf(v9, "%ssocket", v13, v14, v15, v16, v17, v18, (char)v56);
          goto LABEL_172;
        }
        id v38 = "socket";
LABEL_109:
        int v71 = handle_mime(v9, v36, (uint64_t)v38, v14, v15, v16, v17, v18);
        if (v71 == -1) {
          int v34 = -1;
        }
        else {
          int v34 = 1;
        }
        if (v71 == -1) {
          goto LABEL_14;
        }
        goto LABEL_113;
      default:
        file_error(v9, 0, "invalid mode 0%o", v14, v15, v16, v17, v18, v104.st_mode);
        goto LABEL_25;
    }
  }
  return result;
}

Class initUIPrintFormatter()
{
  if (UIKitLibrary_sOnce != -1) {
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_237);
  }
  Class result = objc_getClass("UIPrintFormatter");
  classUIPrintFormatter = (uint64_t)result;
  getUIPrintFormatterClass = (uint64_t (*)())UIPrintFormatterFunction;
  return result;
}

id UIPrintFormatterFunction()
{
  return (id)classUIPrintFormatter;
}

void *__UIKitLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib = (uint64_t)result;
  return result;
}

Class initUISimpleTextPrintFormatter()
{
  if (UIKitLibrary_sOnce != -1) {
    dispatch_once(&UIKitLibrary_sOnce, &__block_literal_global_237);
  }
  Class result = objc_getClass("UISimpleTextPrintFormatter");
  classUISimpleTextPrintFormatter = (uint64_t)result;
  getUISimpleTextPrintFormatterClass = (uint64_t (*)())UISimpleTextPrintFormatterFunction;
  return result;
}

id UISimpleTextPrintFormatterFunction()
{
  return (id)classUISimpleTextPrintFormatter;
}

id getWFWFContactLogObject()
{
  if (getWFWFContactLogObject_onceToken != -1) {
    dispatch_once(&getWFWFContactLogObject_onceToken, &__block_literal_global_2962);
  }
  uint64_t v0 = (void *)getWFWFContactLogObject_log;
  return v0;
}

uint64_t __getWFWFContactLogObject_block_invoke()
{
  getWFWFContactLogObject_log = (uint64_t)os_log_create((const char *)*MEMORY[0x263F85748], "WFContact");
  return MEMORY[0x270F9A758]();
}

void sub_216532C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMKMapItemClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MapKitLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264286218;
    uint64_t v8 = 0;
    MapKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!MapKitLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *MapKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFMKMapItemContentItem.m", 19, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MKMapItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getMKMapItemClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFMKMapItemContentItem.m", 20, @"Unable to find class %s", "MKMapItem");

LABEL_10:
    __break(1u);
  }
  getMKMapItemClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MapKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary = result;
  return result;
}

id WFGenerateGIFFromImageFiles(void *a1, void *a2, uint64_t a3, void *a4, double a5, double a6, float a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a4;
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2020000000;
  char v33 = 0;
  uint64_t v16 = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __WFGenerateGIFFromImageFiles_block_invoke;
  block[3] = &unk_264286288;
  double v28 = a5;
  double v29 = a6;
  id v24 = v13;
  id v25 = v14;
  uint64_t v30 = a3;
  float v31 = a7;
  id v26 = v15;
  int v27 = v32;
  id v17 = v14;
  id v18 = v15;
  id v19 = v13;
  dispatch_async(v16, block);

  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __WFGenerateGIFFromImageFiles_block_invoke_6;
  aBlock[3] = &unk_26428AC60;
  aBlock[4] = v32;
  int v20 = _Block_copy(aBlock);

  _Block_object_dispose(v32, 8);
  return v20;
}

void __WFGenerateGIFFromImageFiles_block_invoke(uint64_t a1)
{
  if (![*(id *)(a1 + 32) count]) {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  double v2 = WFAutoSizeFromInputSize(*(void **)(a1 + 32), *(double *)(a1 + 64), *(double *)(a1 + 72));
  id v3 = *(void **)(a1 + 32);
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  v15[2] = __WFGenerateGIFFromImageFiles_block_invoke_2;
  v15[3] = &__block_descriptor_48_e53_v32__0__WFFileRepresentation_8Q16___v_____NSError__24l;
  *(double *)&void v15[4] = v2;
  v15[5] = v4;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = __WFGenerateGIFFromImageFiles_block_invoke_5;
  v8[3] = &unk_264286260;
  id v11 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 80);
  int v14 = *(_DWORD *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 56);
  id v10 = v5;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  objc_msgSend(v3, "if_mapAsynchronously:completionHandler:", v15, v8);
}

uint64_t __WFGenerateGIFFromImageFiles_block_invoke_6(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

double WFAutoSizeFromInputSize(void *a1, double a2, double a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  double v5 = a3;
  id v6 = a1;
  uint64_t v7 = v6;
  if (a2 != 0.0 && a3 == 0.0)
  {
    uint64_t v8 = [v6 firstObject];
    double v9 = WFImageSizeFromFile(v8, 0);
    double v11 = v10;

    double v5 = a2 * (v11 / v9);
  }
  if (a2 == 0.0)
  {
    double v12 = a2;
    if (v5 != 0.0)
    {
      uint64_t v13 = [v7 firstObject];
      double v14 = WFImageSizeFromFile(v13, 0);
      double v16 = v15;

      double v12 = v5 * (v14 / v16);
    }
  }
  else
  {
    double v12 = a2;
  }
  if (v12 == 0.0 && v5 == 0.0)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v17 = v7;
    uint64_t v18 = [v17 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)v29;
      do
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v29 != v20) {
            objc_enumerationMutation(v17);
          }
          double v22 = WFImageSizeFromFile(*(void **)(*((void *)&v28 + 1) + 8 * i), 0);
          if (v12 == 0.0 || v22 < a2) {
            double v12 = v22;
          }
          if (v5 == 0.0 || v23 < a3) {
            double v5 = v23;
          }
        }
        uint64_t v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v28, v32, 16, v22);
      }
      while (v19);
    }

    if (v12 > 500.0)
    {
      double v26 = v5 / v12;
      double v12 = 500.0;
      double v5 = v26 * 500.0;
    }
    if (v5 > 500.0) {
      double v12 = v12 * 500.0 / v5;
    }
  }

  return v12;
}

void __WFGenerateGIFFromImageFiles_block_invoke_2(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = a2;
  if (WFImageSizeFromFile(v7, 0) == *(double *)(a1 + 32) && v8 == *(double *)(a1 + 40))
  {
    v6[2](v6, v7, 0);
  }
  else
  {
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 3221225472;
    v10[2] = __WFGenerateGIFFromImageFiles_block_invoke_4;
    v10[3] = &unk_26428AA60;
    double v11 = v6;
    WFAsyncTransformedImageFromImage(v7, 0, &__block_literal_global_3205, v10, *(double *)(a1 + 32), *(double *)(a1 + 40));

    id v7 = v11;
  }
}

void __WFGenerateGIFFromImageFiles_block_invoke_5(uint64_t a1, void *a2, uint64_t a3)
{
  v49[1] = *MEMORY[0x263EF8340];
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v6 = (void *)*MEMORY[0x263F1DAD0];
    uint64_t v36 = [MEMORY[0x263F852B8] typeWithUTType:*MEMORY[0x263F1DAD0]];
    uint64_t v35 = +[WFFileRepresentation proposedFilenameForFile:ofType:](WFFileRepresentation, "proposedFilenameForFile:ofType:", *(void *)(a1 + 32));
    +[WFTemporaryFileManager createTemporaryFileWithFilename:](WFTemporaryFileManager, "createTemporaryFileWithFilename:");
    CFURLRef v7 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
    double v8 = [v6 identifier];
    CFURLRef v34 = v7;
    double v9 = CGImageDestinationCreateWithURL(v7, v8, [*(id *)(a1 + 40) count], 0);

    uint64_t v48 = *MEMORY[0x263F0F370];
    uint64_t v10 = v48;
    v46[0] = *MEMORY[0x263F0F388];
    double v11 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 64)];
    v46[1] = *MEMORY[0x263F0F380];
    v47[0] = v11;
    v47[1] = MEMORY[0x263EFFA80];
    double v12 = [NSDictionary dictionaryWithObjects:v47 forKeys:v46 count:2];
    v49[0] = v12;
    CFDictionaryRef v13 = [NSDictionary dictionaryWithObjects:v49 forKeys:&v48 count:1];

    CFDictionaryRef v33 = v13;
    CGImageDestinationSetProperties(v9, v13);
    uint64_t v44 = v10;
    uint64_t v42 = *MEMORY[0x263F0F368];
    *(float *)&double v14 = 1.0 / *(float *)(a1 + 72);
    double v15 = [NSNumber numberWithFloat:v14];
    id v43 = v15;
    double v16 = [NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
    long long v45 = v16;
    CFDictionaryRef v17 = [NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];

    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    id v18 = v5;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v37 objects:v41 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v38;
LABEL_5:
      uint64_t v22 = 0;
      while (1)
      {
        if (*(void *)v38 != v21) {
          objc_enumerationMutation(v18);
        }
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
          break;
        }
        CGImageSourceRef v23 = WFImageSourceCreateFromFile(*(void **)(*((void *)&v37 + 1) + 8 * v22), 0);
        if (v23)
        {
          id v24 = v23;
          if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
          {
            size_t v25 = 0;
            do
            {
              if (v25 >= CGImageSourceGetCount(v24)) {
                break;
              }
              CGImageDestinationAddImageFromSource(v9, v24, v25++, v17);
            }
            while (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24));
          }
          CFRelease(v24);
        }
        if (++v22 == v20)
        {
          uint64_t v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v37, v41, 16, v33);
          if (v20) {
            goto LABEL_5;
          }
          break;
        }
      }
    }

    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      CFRelease(v9);
      double v26 = [MEMORY[0x263F08850] defaultManager];
      CFURLRef v27 = v34;
      [v26 removeItemAtURL:v34 error:0];

      uint64_t v28 = *(void *)(a1 + 48);
      long long v29 = [MEMORY[0x263F087E8] userCancelledError];
      (*(void (**)(uint64_t, void, void *))(v28 + 16))(v28, 0, v29);
      long long v31 = (void *)v35;
      long long v30 = (void *)v36;
    }
    else
    {
      CGImageDestinationFinalize(v9);
      CFRelease(v9);
      uint64_t v32 = *(void *)(a1 + 48);
      CFURLRef v27 = v34;
      long long v31 = (void *)v35;
      long long v30 = (void *)v36;
      long long v29 = +[WFFileRepresentation fileWithURL:v34 options:1 ofType:v36 proposedFilename:v35];
      (*(void (**)(uint64_t, void *, void))(v32 + 16))(v32, v29, 0);
    }
  }
}

uint64_t __WFGenerateGIFFromImageFiles_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __WFGenerateGIFFromImageFiles_block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "drawInContext:inRect:");
}

id WFGenerateGIFFromVideo(void *a1, void *a2, uint64_t a3, void *a4, double a5, double a6, float a7)
{
  v48[1] = *MEMORY[0x263EF8340];
  id v13 = a1;
  id v14 = a2;
  id v15 = a4;
  v41[0] = 0;
  v41[1] = v41;
  v41[2] = 0x2020000000;
  char v42 = 0;
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x3032000000;
  v39[3] = __Block_byref_object_copy__3208;
  v39[4] = __Block_byref_object_dispose__3209;
  id v40 = 0;
  uint64_t v44 = 0;
  long long v45 = &v44;
  uint64_t v46 = 0x2050000000;
  double v16 = (void *)getAVURLAssetClass_softClass_3210;
  uint64_t v47 = getAVURLAssetClass_softClass_3210;
  if (!getAVURLAssetClass_softClass_3210)
  {
    v43[0] = MEMORY[0x263EF8330];
    v43[1] = 3221225472;
    v43[2] = __getAVURLAssetClass_block_invoke_3211;
    v43[3] = &unk_26428AC60;
    void v43[4] = &v44;
    __getAVURLAssetClass_block_invoke_3211((uint64_t)v43);
    double v16 = (void *)v45[3];
  }
  id v17 = v16;
  _Block_object_dispose(&v44, 8);
  id v18 = [v13 fileURL];
  uint64_t v19 = [v17 assetWithURL:v18];

  v48[0] = @"duration";
  uint64_t v20 = [MEMORY[0x263EFF8C0] arrayWithObjects:v48 count:1];
  v28[0] = MEMORY[0x263EF8330];
  v28[1] = 3221225472;
  v28[2] = __WFGenerateGIFFromVideo_block_invoke;
  v28[3] = &unk_2642862D8;
  id v21 = v19;
  id v29 = v21;
  CFDictionaryRef v33 = v41;
  id v22 = v15;
  id v32 = v22;
  float v38 = a7;
  id v23 = v14;
  double v36 = a5;
  double v37 = a6;
  id v30 = v23;
  CFURLRef v34 = v39;
  uint64_t v35 = a3;
  id v24 = v13;
  id v31 = v24;
  [v21 loadValuesAsynchronouslyForKeys:v20 completionHandler:v28];

  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __WFGenerateGIFFromVideo_block_invoke_2_29;
  aBlock[3] = &unk_264286300;
  aBlock[4] = v41;
  void aBlock[5] = v39;
  size_t v25 = _Block_copy(aBlock);

  _Block_object_dispose(v39, 8);
  _Block_object_dispose(v41, 8);

  return v25;
}

void sub_216534084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose((const void *)(v36 - 144), 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__3208(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__3209(uint64_t a1)
{
}

void __getAVURLAssetClass_block_invoke_3211(uint64_t a1)
{
  AVFoundationLibrary_3220();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVURLAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVURLAssetClass_softClass_3210 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVURLAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAnimatedGIFTranscoder.m", 47, @"Unable to find class %s", "AVURLAsset");

    __break(1u);
  }
}

void __WFGenerateGIFFromVideo_block_invoke(uint64_t a1)
{
  void (*v32)(void *__return_ptr, long long *, uint64_t, uint64_t);
  void *v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  CFURLRef v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  float64x2_t v50;
  void *v51;
  CFDictionaryRef properties;
  CFURLRef url;
  void *v54;
  void *v55;
  double v56;
  double v57;
  float64x2_t v58;
  void *v59;
  size_t v60;
  void v61[4];
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  CFURLRef v67;
  id v68;
  id v69;
  id v70;
  uint64_t *v71;
  void *v72;
  long long *v73;
  uint64_t *v74;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t);
  void (*v81)(uint64_t);
  id v82;
  long long v83;
  uint64_t v84;
  void *v85;
  void v86[3];
  void v87[4];
  void aBlock[4];
  id v89;
  long long v90;
  uint64_t v91;
  void v92[3];
  long long v93;
  uint64_t v94;
  long long v95;
  uint64_t v96;
  long long v97;
  uint64_t v98;
  long long v99;
  uint64_t v100;
  CGAffineTransform v101;
  CGAffineTransform v102;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  CGImageDestinationRef v110;
  long long v111;
  uint64_t v112;
  id v113;
  void v114[2];
  void v115[2];
  uint64_t v116;
  void v117[4];

  v117[1] = *MEMORY[0x263EF8340];
  double v2 = *(void **)(a1 + 32);
  uint64_t v113 = 0;
  uint64_t v3 = [v2 statusOfValueForKey:@"duration" error:&v113];
  id v4 = v113;
  if (v3 == 2 && !*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = getAVMediaTypeVideo();
    CFURLRef v7 = [v5 tracksWithMediaType:v6];
    uint64_t v59 = [v7 firstObject];

    if (v59 && !*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
      uint64_t v111 = 0uLL;
      uint64_t v112 = 0;
      double v8 = *(void **)(a1 + 32);
      if (v8) {
        [v8 duration];
      }
      uint64_t v83 = v111;
      uint64_t v84 = v112;
      soft_CMTimeGetSeconds(&v83);
      double v10 = v9;
      float v11 = *(float *)(a1 + 104);
      double v12 = (void *)*MEMORY[0x263F1DAD0];
      uint64_t v55 = [MEMORY[0x263F852B8] typeWithUTType:*MEMORY[0x263F1DAD0]];
      uint64_t v54 = +[WFFileRepresentation proposedFilenameForFile:*(void *)(a1 + 40) ofType:v55];
      url = +[WFTemporaryFileManager createTemporaryFileWithFilename:v54];
      uint64_t v107 = 0;
      uint64_t v108 = &v107;
      uint64_t v109 = 0x2020000000;
      uint64_t v110 = 0;
      id v13 = [v12 identifier];
      uint64_t v60 = (unint64_t)(v10 * v11);
      CGImageDestinationRef v14 = CGImageDestinationCreateWithURL(url, v13, v60, 0);

      uint64_t v110 = v14;
      unsigned __int8 v116 = *MEMORY[0x263F0F370];
      v114[0] = *MEMORY[0x263F0F388];
      id v15 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 80)];
      v114[1] = *MEMORY[0x263F0F380];
      v115[0] = v15;
      v115[1] = MEMORY[0x263EFFA80];
      double v16 = [NSDictionary dictionaryWithObjects:v115 forKeys:v114 count:2];
      v117[0] = v16;
      properties = [NSDictionary dictionaryWithObjects:v117 forKeys:&v116 count:1];

      CGImageDestinationSetProperties((CGImageDestinationRef)v108[3], properties);
      [v59 naturalSize];
      double v18 = v17;
      double v20 = v19;
      [v59 preferredTransform];
      double v21 = fabs(v20 * v105 + v103 * v18);
      double v22 = fabs(v20 * v106 + v104 * v18);
      double v23 = *(double *)(a1 + 88);
      float v56 = v23;
      uint64_t v57 = *(double *)(a1 + 96);
      if (v23 != 0.0 && *(double *)(a1 + 96) == 0.0) {
        uint64_t v57 = v23 * (v22 / v21);
      }
      if (v23 == 0.0 && v57 != 0.0) {
        float v56 = v21 / v22 * v57;
      }
      if (v56 == 0.0 && v57 == 0.0)
      {
        uint64_t v57 = 500.0;
        if (v21 > 500.0)
        {
          double v24 = v22 / v21;
          double v21 = 500.0;
          double v22 = v24 * 500.0;
        }
        if (v22 <= 500.0) {
          uint64_t v57 = v22;
        }
        else {
          double v21 = v21 * 500.0 / v22;
        }
        float v56 = v21;
      }
      [v59 preferredTransform];
      CGAffineTransformInvert(&v102, &v101);
      uint64_t v58 = *(float64x2_t *)&v102.a;
      uint64_t v50 = *(float64x2_t *)&v102.c;
      uint64_t v77 = 0;
      uint64_t v78 = &v77;
      uint64_t v79 = 0x2050000000;
      size_t v25 = (void *)getAVAssetImageGeneratorClass_softClass;
      uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t))getAVAssetImageGeneratorClass_softClass;
      if (!getAVAssetImageGeneratorClass_softClass)
      {
        *(void *)&uint64_t v83 = MEMORY[0x263EF8330];
        *((void *)&v83 + 1) = 3221225472;
        uint64_t v84 = (uint64_t)__getAVAssetImageGeneratorClass_block_invoke;
        uint64_t v85 = &unk_26428AC60;
        v86[0] = &v77;
        __getAVAssetImageGeneratorClass_block_invoke((uint64_t)&v83);
        size_t v25 = (void *)v78[3];
      }
      id v26 = v25;
      _Block_object_dispose(&v77, 8);
      CFURLRef v27 = [v26 assetImageGeneratorWithAsset:*(void *)(a1 + 32)];
      getkCMTimeZero((uint64_t)&v99);
      uint64_t v97 = v99;
      uint64_t v98 = v100;
      [v27 setRequestedTimeToleranceAfter:&v97];
      getkCMTimeZero((uint64_t)&v95);
      uint64_t v93 = v95;
      uint64_t v94 = v96;
      [v27 setRequestedTimeToleranceBefore:&v93];
      [v27 setAppliesPreferredTrackTransform:1];
      objc_msgSend(v27, "setMaximumSize:", vabsq_f64(vmlaq_n_f64(vmulq_n_f64(v50, v57), v58, v56)));
      uint64_t v51 = v27;
      uint64_t v28 = objc_opt_new();
      if (v60)
      {
        for (uint64_t i = 0; i != v60; ++i)
        {
          id v30 = (void *)MEMORY[0x263F08D40];
          soft_CMTimeMake((uint64_t)&v90, i, (int)*(float *)(a1 + 104));
          uint64_t v31 = DWORD2(v111);
          uint64_t v77 = 0;
          uint64_t v78 = &v77;
          uint64_t v79 = 0x2020000000;
          id v32 = (void (*)(void *__return_ptr, long long *, uint64_t, uint64_t))getCMTimeConvertScaleSymbolLoc_ptr;
          uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t))getCMTimeConvertScaleSymbolLoc_ptr;
          if (!getCMTimeConvertScaleSymbolLoc_ptr)
          {
            *(void *)&uint64_t v83 = MEMORY[0x263EF8330];
            *((void *)&v83 + 1) = 3221225472;
            uint64_t v84 = (uint64_t)__getCMTimeConvertScaleSymbolLoc_block_invoke;
            uint64_t v85 = &unk_26428AC60;
            v86[0] = &v77;
            CFDictionaryRef v33 = CoreMediaLibrary();
            CFURLRef v34 = dlsym(v33, "CMTimeConvertScale");
            *(void *)(*(void *)(v86[0] + 8) + 24) = v34;
            getCMTimeConvertScaleSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(v86[0] + 8) + 24);
            id v32 = (void (*)(void *__return_ptr, long long *, uint64_t, uint64_t))v78[3];
          }
          _Block_object_dispose(&v77, 8);
          if (!v32)
          {
            uint64_t v48 = [MEMORY[0x263F08690] currentHandler];
            char v49 = objc_msgSend(NSString, "stringWithUTF8String:", "CMTime soft_CMTimeConvertScale(CMTime, int32_t, CMTimeRoundingMethod)");
            objc_msgSend(v48, "handleFailureInFunction:file:lineNumber:description:", v49, @"WFAnimatedGIFTranscoder.m", 42, @"%s", dlerror());

            __break(1u);
          }
          uint64_t v83 = v90;
          uint64_t v84 = v91;
          v32(v92, &v83, v31, 1);
          uint64_t v35 = [v30 valueWithCMTime:v92];
          [v28 addObject:v35];
        }
      }
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 3221225472;
      aBlock[2] = __WFGenerateGIFFromVideo_block_invoke_2;
      aBlock[3] = &unk_26428A060;
      uint64_t v36 = v51;
      uint64_t v89 = v36;
      double v37 = _Block_copy(aBlock);
      float v38 = *(void *)(*(void *)(a1 + 72) + 8);
      long long v39 = *(void **)(v38 + 40);
      *(void *)(v38 + 40) = v37;

      v87[0] = 0;
      v87[1] = v87;
      v87[2] = 0x2020000000;
      v87[3] = 0;
      *(void *)&uint64_t v83 = 0;
      *((void *)&v83 + 1) = &v83;
      uint64_t v84 = 0x3810000000;
      uint64_t v85 = &unk_2166330CF;
      memset(v86, 0, sizeof(v86));
      getkCMTimeZero((uint64_t)v86);
      uint64_t v77 = 0;
      uint64_t v78 = &v77;
      uint64_t v79 = 0x3032000000;
      uint64_t v80 = __Block_byref_object_copy__19;
      int v81 = __Block_byref_object_dispose__20;
      ssize_t v82 = 0;
      id v40 = objc_opt_new();
      mode_t v41 = objc_opt_new();
      v61[0] = MEMORY[0x263EF8330];
      v61[1] = 3221225472;
      v61[2] = __WFGenerateGIFFromVideo_block_invoke_22;
      v61[3] = &unk_2642862B0;
      int v71 = &v107;
      off_t v75 = v56;
      uint64_t v76 = v57;
      uint64_t v62 = v59;
      uint64_t v63 = *(id *)(a1 + 48);
      int v72 = v87;
      char v42 = v40;
      id v64 = v42;
      BOOL v73 = &v83;
      id v43 = v41;
      id v65 = v43;
      int v74 = &v77;
      uint64_t v44 = v28;
      id v66 = v44;
      uint64_t v70 = *(id *)(a1 + 56);
      long long v45 = url;
      id v67 = v45;
      uint64_t v46 = v55;
      size_t v68 = v46;
      uint64_t v47 = v54;
      uint64_t v69 = v47;
      [v36 generateCGImagesAsynchronouslyForTimes:v44 completionHandler:v61];

      _Block_object_dispose(&v77, 8);
      _Block_object_dispose(&v83, 8);
      _Block_object_dispose(v87, 8);

      _Block_object_dispose(&v107, 8);
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_216534B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v45 - 248), 8);
  _Unwind_Resume(a1);
}

uint64_t __WFGenerateGIFFromVideo_block_invoke_2_29(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void getAVMediaTypeVideo()
{
  uint64_t v6 = 0;
  CFURLRef v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVMediaTypeVideoSymbolLoc_ptr_3230;
  uint64_t v9 = getAVMediaTypeVideoSymbolLoc_ptr_3230;
  if (!getAVMediaTypeVideoSymbolLoc_ptr_3230)
  {
    uint64_t v1 = AVFoundationLibrary_3220();
    v7[3] = (uint64_t)dlsym(v1, "AVMediaTypeVideo");
    getAVMediaTypeVideoSymbolLoc_ptr_3230 = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    double v2 = *v0;
    id v3 = v2;
  }
  else
  {
    id v4 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"AVMediaType getAVMediaTypeVideo(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAnimatedGIFTranscoder.m", 52, @"%s", dlerror());

    __break(1u);
  }
}

void sub_216534D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void soft_CMTimeGetSeconds(long long *a1)
{
  uint64_t v10 = 0;
  float v11 = &v10;
  uint64_t v12 = 0x2020000000;
  double v2 = (void (*)(long long *))getCMTimeGetSecondsSymbolLoc_ptr;
  id v13 = getCMTimeGetSecondsSymbolLoc_ptr;
  if (!getCMTimeGetSecondsSymbolLoc_ptr)
  {
    *(void *)&long long v6 = MEMORY[0x263EF8330];
    *((void *)&v6 + 1) = 3221225472;
    CFURLRef v7 = __getCMTimeGetSecondsSymbolLoc_block_invoke;
    uint64_t v8 = &unk_26428AC60;
    uint64_t v9 = &v10;
    id v3 = CoreMediaLibrary();
    v11[3] = (uint64_t)dlsym(v3, "CMTimeGetSeconds");
    getCMTimeGetSecondsSymbolLoc_ptr = *(_UNKNOWN **)(v9[1] + 24);
    double v2 = (void (*)(long long *))v11[3];
  }
  _Block_object_dispose(&v10, 8);
  if (v2)
  {
    long long v6 = *a1;
    CFURLRef v7 = (void *(*)(uint64_t))*((void *)a1 + 2);
    v2(&v6);
  }
  else
  {
    id v4 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Float64 soft_CMTimeGetSeconds(CMTime)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAnimatedGIFTranscoder.m", 40, @"%s", dlerror());

    __break(1u);
  }
}

void sub_216534EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVAssetImageGeneratorClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_3220();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetImageGenerator");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetImageGeneratorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAssetImageGeneratorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAnimatedGIFTranscoder.m", 48, @"Unable to find class %s", "AVAssetImageGenerator");

    __break(1u);
  }
}

void getkCMTimeZero(uint64_t a1)
{
  uint64_t v6 = 0;
  CFURLRef v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v2 = getkCMTimeZeroSymbolLoc_ptr;
  uint64_t v9 = getkCMTimeZeroSymbolLoc_ptr;
  if (!getkCMTimeZeroSymbolLoc_ptr)
  {
    id v3 = CoreMediaLibrary();
    v7[3] = (uint64_t)dlsym(v3, "kCMTimeZero");
    getkCMTimeZeroSymbolLoc_ptr = v7[3];
    uint64_t v2 = v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    *(_OWORD *)a1 = *(_OWORD *)v2;
    *(void *)(a1 + 16) = *(void *)(v2 + 16);
  }
  else
  {
    id v4 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"CMTime getkCMTimeZero(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAnimatedGIFTranscoder.m", 39, @"%s", dlerror());

    __break(1u);
  }
}

void sub_216535100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __WFGenerateGIFFromVideo_block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) cancelAllCGImageGeneration];
}

void soft_CMTimeMake(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000;
  id v5 = (void (*)(uint64_t, uint64_t))getCMTimeMakeSymbolLoc_ptr;
  uint64_t v12 = getCMTimeMakeSymbolLoc_ptr;
  if (!getCMTimeMakeSymbolLoc_ptr)
  {
    uint64_t v6 = CoreMediaLibrary();
    v10[3] = (uint64_t)dlsym(v6, "CMTimeMake");
    getCMTimeMakeSymbolLoc_ptr = (_UNKNOWN *)v10[3];
    id v5 = (void (*)(uint64_t, uint64_t))v10[3];
  }
  _Block_object_dispose(&v9, 8);
  if (v5)
  {
    v5(a2, a3);
  }
  else
  {
    CFURLRef v7 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "CMTime soft_CMTimeMake(int64_t, int32_t)");
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, @"WFAnimatedGIFTranscoder.m", 41, @"%s", dlerror());

    __break(1u);
  }
}

void sub_216535288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCMTimeConvertScaleSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreMediaLibrary();
  uint64_t result = dlsym(v2, "CMTimeConvertScale");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMTimeConvertScaleSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CoreMediaLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreMediaLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreMediaLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_2642863D8;
    uint64_t v6 = 0;
    CoreMediaLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)CoreMediaLibraryCore_frameworkLibrary;
  if (!CoreMediaLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreMediaLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAnimatedGIFTranscoder.m", 38, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

void __WFGenerateGIFFromVideo_block_invoke_22(uint64_t a1, uint64_t a2, CGImageRef Image, uint64_t a4, uint64_t a5, void *a6)
{
  void (*v37)(long long *__return_ptr, long long *, long long *);
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  long long v48;
  unint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  uint64_t v55;
  void *v56;
  CGImageSource *v57;
  CGImageDestination *v58;
  CFDictionaryRef v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  uint64_t v69;
  long long v70;
  void *(*v71)(uint64_t);
  long long v72;
  void *(*v73)(uint64_t);
  CGAffineTransform v74;
  long long v75;
  void *(*v76)(uint64_t);
  void *v77;
  long long *v78;
  long long v79;
  uint64_t v80;
  void *v81;
  unsigned char v82[128];
  uint64_t v83;
  void *v84;
  uint64_t v85;
  void v86[3];
  CGRect v87;

  v86[1] = *MEMORY[0x263EF8340];
  id v11 = a6;
  if (!*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24)) {
    goto LABEL_32;
  }
  if (Image && !a5)
  {
    CFRetain(Image);
    double Width = (double)CGImageGetWidth(Image);
    double Height = (double)CGImageGetHeight(Image);
    double v14 = *(double *)(a1 + 136);
    double v15 = *(double *)(a1 + 144);
    if (v14 == Width && v15 == Height)
    {
      double v17 = *(void **)(a1 + 32);
      if (v17) {
        [v17 preferredTransform];
      }
      else {
        memset(&v74, 0, sizeof(v74));
      }
      if (CGAffineTransformIsIdentity(&v74))
      {
LABEL_17:
        double v24 = NSString;
        size_t v25 = [*(id *)(a1 + 40) wfName];
        id v26 = [v24 stringWithFormat:@"%@-%lu.jpg", v25, *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24)];

        CFURLRef v27 = +[WFTemporaryFileManager createTemporaryFileWithFilename:v26];
        uint64_t v28 = *MEMORY[0x263F1DB40];
        id v29 = [(id)*MEMORY[0x263F1DB40] identifier];
        id v30 = CGImageDestinationCreateWithURL(v27, v29, 1uLL, 0);

        CGImageDestinationAddImage(v30, Image, 0);
        CGImageDestinationFinalize(v30);
        CFRelease(v30);
        CFRelease(Image);
        uint64_t v31 = [MEMORY[0x263F852B8] typeWithUTType:v28];
        id v32 = +[WFFileRepresentation fileWithURL:v27 options:1 ofType:v31 proposedFilename:v26];

        CFDictionaryRef v33 = *(void **)(a1 + 48);
        CFURLRef v34 = NSNumber;
        off_t v75 = *(_OWORD *)a4;
        uint64_t v76 = *(void *(**)(uint64_t))(a4 + 16);
        soft_CMTimeGetSeconds(&v75);
        uint64_t v35 = objc_msgSend(v34, "numberWithDouble:");
        [v33 setObject:v32 forKey:v35];

        BOOL v73 = 0;
        uint64_t v36 = *(void *)(*(void *)(a1 + 120) + 8);
        uint64_t v70 = *(_OWORD *)a4;
        int v71 = *(void *(**)(uint64_t))(a4 + 16);
        int v72 = 0uLL;
        size_t v68 = *(_OWORD *)(v36 + 32);
        uint64_t v69 = *(void *)(v36 + 48);
        *(void *)&uint64_t v79 = 0;
        *((void *)&v79 + 1) = &v79;
        uint64_t v80 = 0x2020000000;
        double v37 = (void (*)(long long *__return_ptr, long long *, long long *))getCMTimeSubtractSymbolLoc_ptr;
        int v81 = getCMTimeSubtractSymbolLoc_ptr;
        if (!getCMTimeSubtractSymbolLoc_ptr)
        {
          *(void *)&off_t v75 = MEMORY[0x263EF8330];
          *((void *)&v75 + 1) = 3221225472;
          uint64_t v76 = __getCMTimeSubtractSymbolLoc_block_invoke;
          uint64_t v77 = &unk_26428AC60;
          uint64_t v78 = &v79;
          float v38 = CoreMediaLibrary();
          long long v39 = dlsym(v38, "CMTimeSubtract");
          *(void *)(*((void *)v78 + 1) + 24) = v39;
          getCMTimeSubtractSymbolLoc_ptr = *(_UNKNOWN **)(*((void *)v78 + 1) + 24);
          double v37 = *(void (**)(long long *__return_ptr, long long *, long long *))(*((void *)&v79 + 1) + 24);
        }
        _Block_object_dispose(&v79, 8);
        if (!v37)
        {
          uint64_t v62 = [MEMORY[0x263F08690] currentHandler];
          uint64_t v63 = objc_msgSend(NSString, "stringWithUTF8String:", "CMTime soft_CMTimeSubtract(CMTime, CMTime)");
          objc_msgSend(v62, "handleFailureInFunction:file:lineNumber:description:", v63, @"WFAnimatedGIFTranscoder.m", 44, @"%s", dlerror());

          __break(1u);
        }
        off_t v75 = v70;
        uint64_t v76 = v71;
        uint64_t v79 = v68;
        uint64_t v80 = v69;
        v37(&v72, &v75, &v79);
        uint64_t v85 = *MEMORY[0x263F0F370];
        uint64_t v83 = *MEMORY[0x263F0F368];
        id v40 = NSNumber;
        off_t v75 = v72;
        uint64_t v76 = v73;
        soft_CMTimeGetSeconds(&v75);
        mode_t v41 = objc_msgSend(v40, "numberWithDouble:");
        uint64_t v84 = v41;
        char v42 = [NSDictionary dictionaryWithObjects:&v84 forKeys:&v83 count:1];
        v86[0] = v42;
        id v43 = [NSDictionary dictionaryWithObjects:v86 forKeys:&v85 count:1];

        uint64_t v44 = *(void **)(a1 + 56);
        uint64_t v45 = NSNumber;
        off_t v75 = *(_OWORD *)a4;
        uint64_t v76 = *(void *(**)(uint64_t))(a4 + 16);
        soft_CMTimeGetSeconds(&v75);
        uint64_t v46 = objc_msgSend(v45, "numberWithDouble:");
        [v44 setObject:v43 forKey:v46];

        goto LABEL_21;
      }
      double v14 = *(double *)(a1 + 136);
      double v15 = *(double *)(a1 + 144);
    }
    double v18 = objc_msgSend(MEMORY[0x263F85188], "HDRCapableContextWithSize:scale:", v14, v15, 1.0);
    double v19 = v18;
    if (v18)
    {
      id v20 = v18;
      CGContextTranslateCTM((CGContextRef)[v20 CGContext], 0.0, *(CGFloat *)(a1 + 144));
      id v21 = v20;
      CGContextScaleCTM((CGContextRef)[v21 CGContext], 1.0, -1.0);
      id v22 = v21;
      double v23 = (CGContext *)[v22 CGContext];
      v87.origin.x = *(CGFloat *)MEMORY[0x263F00148];
      v87.origin.y = *(CGFloat *)(MEMORY[0x263F00148] + 8);
      v87.size.width = *(CGFloat *)(a1 + 136);
      v87.size.height = *(CGFloat *)(a1 + 144);
      CGContextDrawImage(v23, v87, Image);
      CFRelease(Image);
      Image = CGBitmapContextCreateImage((CGContextRef)[v22 CGContext]);
    }

    goto LABEL_17;
  }
LABEL_21:
  ++*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24);
  uint64_t v47 = *(void *)(*(void *)(a1 + 120) + 8);
  uint64_t v48 = *(_OWORD *)a4;
  *(void *)(v47 + 4_Block_object_dispose(&STACK[0x248], 8) = *(void *)(a4 + 16);
  *(_OWORD *)(v47 + 32) = v48;
  if (v11) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 128) + 8) + 40), a6);
  }
  char v49 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 24);
  if (v49 >= [*(id *)(a1 + 64) count])
  {
    id v66 = 0u;
    id v67 = 0u;
    id v64 = 0u;
    id v65 = 0u;
    uint64_t v50 = [*(id *)(a1 + 48) allKeys];
    uint64_t v51 = [v50 sortedArrayUsingSelector:sel_compare_];

    uint64_t v52 = [v51 countByEnumeratingWithState:&v64 objects:v82 count:16];
    if (v52)
    {
      uint64_t v53 = *(void *)v65;
      do
      {
        for (uint64_t i = 0; i != v52; ++i)
        {
          if (*(void *)v65 != v53) {
            objc_enumerationMutation(v51);
          }
          uint64_t v55 = *(void *)(*((void *)&v64 + 1) + 8 * i);
          float v56 = [*(id *)(a1 + 48) objectForKeyedSubscript:v55];
          uint64_t v57 = WFImageSourceCreateFromFile(v56, 0);

          uint64_t v58 = *(CGImageDestination **)(*(void *)(*(void *)(a1 + 104) + 8) + 24);
          uint64_t v59 = [*(id *)(a1 + 56) objectForKeyedSubscript:v55];
          CGImageDestinationAddImageFromSource(v58, v57, 0, v59);

          CFRelease(v57);
        }
        uint64_t v52 = [v51 countByEnumeratingWithState:&v64 objects:v82 count:16];
      }
      while (v52);
    }

    CGImageDestinationFinalize(*(CGImageDestinationRef *)(*(void *)(*(void *)(a1 + 104) + 8) + 24));
    CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 104) + 8) + 24));
    *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 0;
    uint64_t v60 = *(void *)(a1 + 96);
    uint64_t v61 = +[WFFileRepresentation fileWithURL:*(void *)(a1 + 72) options:1 ofType:*(void *)(a1 + 80) proposedFilename:*(void *)(a1 + 88)];
    (*(void (**)(uint64_t, void *, void))(v60 + 16))(v60, v61, 0);
  }
LABEL_32:
}

void sub_216535B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void *__getCMTimeSubtractSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreMediaLibrary();
  uint64_t result = dlsym(v2, "CMTimeSubtract");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMTimeSubtractSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreMediaLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreMediaLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getCMTimeMakeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreMediaLibrary();
  uint64_t result = dlsym(v2, "CMTimeMake");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMTimeMakeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkCMTimeZeroSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreMediaLibrary();
  uint64_t result = dlsym(v2, "kCMTimeZero");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkCMTimeZeroSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *AVFoundationLibrary_3220()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_3224)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_3225;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_2642863C0;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_3224 = _sl_dlopen();
  }
  uint64_t v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_3224;
  if (!AVFoundationLibraryCore_frameworkLibrary_3224)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAnimatedGIFTranscoder.m", 46, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __AVFoundationLibraryCore_block_invoke_3225()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_3224 = result;
  return result;
}

void *__getCMTimeGetSecondsSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreMediaLibrary();
  uint64_t result = dlsym(v2, "CMTimeGetSeconds");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMTimeGetSecondsSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVMediaTypeVideoSymbolLoc_block_invoke_3231(uint64_t a1)
{
  uint64_t v2 = AVFoundationLibrary_3220();
  uint64_t result = dlsym(v2, "AVMediaTypeVideo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMediaTypeVideoSymbolLoc_ptr_3230 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void WFAddImageFileToGIF(void *a1, void *a2, void *a3, void *a4, double a5, double a6, double a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  double v17 = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __WFAddImageFileToGIF_block_invoke;
  block[3] = &unk_264286350;
  double v27 = a6;
  double v28 = a7;
  id v23 = v14;
  id v24 = v13;
  id v25 = v15;
  id v26 = v16;
  double v29 = a5;
  id v18 = v15;
  id v19 = v16;
  id v20 = v13;
  id v21 = v14;
  dispatch_async(v17, block);
}

void __WFAddImageFileToGIF_block_invoke(uint64_t a1)
{
  v32[1] = *MEMORY[0x263EF8340];
  v32[0] = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x263EFF8C0] arrayWithObjects:v32 count:1];
  double v3 = WFAutoSizeFromInputSize(v2, *(double *)(a1 + 64), *(double *)(a1 + 72));
  double v5 = v4;

  double v6 = WFImageSizeFromFile(*(void **)(a1 + 40), 0);
  double v8 = v7;
  uint64_t v9 = dispatch_group_create();
  uint64_t v26 = 0;
  double v27 = (id *)&v26;
  uint64_t v28 = 0x3032000000;
  double v29 = __Block_byref_object_copy__19;
  id v30 = __Block_byref_object_dispose__20;
  id v31 = 0;
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x3032000000;
  v24[3] = __Block_byref_object_copy__19;
  v24[4] = __Block_byref_object_dispose__20;
  id v25 = 0;
  dispatch_group_enter(v9);
  if (v6 == v3 && v8 == v5)
  {
    objc_storeStrong(v27 + 5, *(id *)(a1 + 40));
    dispatch_group_leave(v9);
  }
  else
  {
    id v11 = *(void **)(a1 + 40);
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 3221225472;
    v21[2] = __WFAddImageFileToGIF_block_invoke_3;
    v21[3] = &unk_2642890E0;
    id v23 = &v26;
    id v22 = v9;
    WFAsyncTransformedImageFromImage(v11, 0, &__block_literal_global_31_3237, v21, v3, v5);
  }
  uint64_t v12 = dispatch_get_global_queue(0, 0);
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  _OWORD v14[2] = __WFAddImageFileToGIF_block_invoke_4;
  v14[3] = &unk_264286328;
  id v18 = v24;
  id v17 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 80);
  id v16 = v13;
  id v19 = &v26;
  dispatch_group_notify(v9, v12, v14);

  _Block_object_dispose(v24, 8);
  _Block_object_dispose(&v26, 8);
}

void __WFAddImageFileToGIF_block_invoke_3(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void __WFAddImageFileToGIF_block_invoke_4(uint64_t a1)
{
  v29[1] = *MEMORY[0x263EF8340];
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v2();
  }
  else
  {
    double v3 = WFImageSourceCreateFromFile(*(void **)(a1 + 32), 0);
    size_t Count = CGImageSourceGetCount(v3);
    double v5 = (void *)*MEMORY[0x263F1DAD0];
    id v23 = [MEMORY[0x263F852B8] typeWithUTType:*MEMORY[0x263F1DAD0]];
    double v6 = +[WFFileRepresentation proposedFilenameForFile:ofType:](WFFileRepresentation, "proposedFilenameForFile:ofType:", *(void *)(a1 + 40));
    CFURLRef v7 = +[WFTemporaryFileManager createTemporaryFileWithFilename:v6];
    double v8 = [v5 identifier];
    uint64_t v9 = CGImageDestinationCreateWithURL(v7, v8, Count + 1, 0);

    CFDictionaryRef v10 = CGImageSourceCopyProperties(v3, 0);
    uint64_t v11 = *MEMORY[0x263F0F370];
    uint64_t v28 = v11;
    CFDictionaryRef v22 = v10;
    uint64_t v12 = [(__CFDictionary *)v10 objectForKey:v11];
    v29[0] = v12;
    CFDictionaryRef v13 = [NSDictionary dictionaryWithObjects:v29 forKeys:&v28 count:1];

    CGImageDestinationSetProperties(v9, v13);
    if (Count)
    {
      for (size_t i = 0; i != Count; ++i)
        CGImageDestinationAddImageFromSource(v9, v3, i, 0);
    }
    CFRelease(v3);
    uint64_t v26 = v11;
    uint64_t v24 = *MEMORY[0x263F0F368];
    id v15 = [NSNumber numberWithDouble:*(double *)(a1 + 72)];
    id v25 = v15;
    id v16 = [NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    double v27 = v16;
    CFDictionaryRef v17 = [NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];

    id v18 = WFImageSourceCreateFromFile(*(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40), 0);
    for (size_t j = 0; j < CGImageSourceGetCount(v18); ++j)
      CGImageDestinationAddImageFromSource(v9, v18, j, v17);
    CFRelease(v18);
    CGImageDestinationFinalize(v9);
    CFRelease(v9);
    uint64_t v20 = *(void *)(a1 + 48);
    id v21 = +[WFFileRepresentation fileWithURL:v7 options:1 ofType:v23 proposedFilename:v6];
    (*(void (**)(uint64_t, void *, void))(v20 + 16))(v20, v21, 0);
  }
}

uint64_t __WFAddImageFileToGIF_block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "drawInContext:inRect:");
}

id WFGenerateImageFilesFromGIF(void *a1, void *a2, void *a3)
{
  v27[2] = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v7) {
    goto LABEL_6;
  }
  double v8 = [v5 wfType];
  uint64_t v9 = (void *)*MEMORY[0x263F1DAD0];
  char v10 = [v8 conformsToUTType:*MEMORY[0x263F1DAD0]];

  if ((v10 & 1) == 0)
  {
    (*((void (**)(id, void, void))v7 + 2))(v7, 0, 0);
LABEL_6:
    id v15 = 0;
    goto LABEL_7;
  }
  uint64_t v11 = *MEMORY[0x263F0F600];
  v27[0] = MEMORY[0x263EFFA80];
  uint64_t v12 = *MEMORY[0x263F0F640];
  v26[0] = v11;
  v26[1] = v12;
  CFDictionaryRef v13 = [v9 identifier];
  v27[1] = v13;
  id v14 = [NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:2];
  id v15 = WFImageSourceCreateFromFile(v5, v14);

  if (v15)
  {
    v24[0] = 0;
    v24[1] = v24;
    v24[2] = 0x2020000000;
    char v25 = 0;
    id v16 = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = __WFGenerateImageFilesFromGIF_block_invoke;
    block[3] = &unk_264286378;
    CFDictionaryRef v22 = v24;
    id v23 = v15;
    id v20 = v6;
    id v21 = v7;
    dispatch_async(v16, block);

    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 3221225472;
    v18[2] = __WFGenerateImageFilesFromGIF_block_invoke_2;
    v18[3] = &unk_26428AC60;
    v18[4] = v24;
    id v15 = _Block_copy(v18);

    _Block_object_dispose(v24, 8);
  }
  else
  {
    (*((void (**)(id, void, void))v7 + 2))(v7, 0, 0);
  }
LABEL_7:

  return v15;
}

void __WFGenerateImageFilesFromGIF_block_invoke(uint64_t a1)
{
  size_t Count = CGImageSourceGetCount(*(CGImageSourceRef *)(a1 + 56));
  id v16 = (id)objc_opt_new();
  if (Count)
  {
    size_t v2 = 0;
    uint64_t v14 = *MEMORY[0x263F1DB40];
    do
    {
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
        break;
      }
      double v3 = [MEMORY[0x263F852B8] typeWithUTType:v14];
      id v4 = [NSString stringWithFormat:@"%@-%lu", *(void *)(a1 + 32), v2 + 1];
      id v5 = +[WFFileRepresentation proposedFilenameForFile:v4 ofType:v3];

      CFURLRef v6 = +[WFTemporaryFileManager createTemporaryFileWithFilename:v5];
      id v7 = [v3 utType];
      double v8 = [v7 identifier];
      uint64_t v9 = CGImageDestinationCreateWithURL(v6, v8, 1uLL, 0);

      CGImageDestinationAddImageFromSource(v9, *(CGImageSourceRef *)(a1 + 56), v2, 0);
      CGImageDestinationFinalize(v9);
      CFRelease(v9);
      char v10 = +[WFFileRepresentation fileWithURL:v6 options:1 ofType:v3 proposedFilename:v5];
      [v16 addObject:v10];

      ++v2;
    }
    while (Count != v2);
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
  uint64_t v12 = a1 + 40;
  uint64_t v11 = *(void *)(a1 + 40);
  if (*(unsigned char *)(*(void *)(*(void *)(v12 + 8) + 8) + 24))
  {
    CFDictionaryRef v13 = [MEMORY[0x263F087E8] userCancelledError];
    (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v13);
  }
  else
  {
    (*(void (**)(uint64_t, id, void))(v11 + 16))(v11, v16, 0);
  }
}

uint64_t __WFGenerateImageFilesFromGIF_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

id WFGenerateVideoFromGIF(void *a1, void *a2, uint64_t a3, void *a4)
{
  v139[2] = *MEMORY[0x263EF8340];
  id v96 = a1;
  id v7 = a2;
  double v8 = a4;
  if (!v8)
  {
    id v23 = 0;
    goto LABEL_52;
  }
  uint64_t v91 = a3;
  uint64_t v9 = [MEMORY[0x263F852B8] typeWithUTType:*MEMORY[0x263F1DBA8]];
  uint64_t v95 = +[WFFileRepresentation proposedFilenameForFile:v7 ofType:v9];
  uint64_t v94 = +[WFTemporaryFileManager proposedTemporaryFileURLForFilename:v95];
  uint64_t v130 = 0;
  uint64_t v131 = &v130;
  uint64_t v132 = 0x2050000000;
  char v10 = (void *)getAVAssetWriterClass_softClass;
  uint64_t v133 = getAVAssetWriterClass_softClass;
  if (!getAVAssetWriterClass_softClass)
  {
    uint64_t v118 = MEMORY[0x263EF8330];
    uint64_t v119 = 3221225472;
    uint64_t v120 = (uint64_t)__getAVAssetWriterClass_block_invoke;
    uint64_t v121 = &unk_26428AC60;
    v122[0] = &v130;
    __getAVAssetWriterClass_block_invoke((uint64_t)&v118);
    char v10 = (void *)v131[3];
  }
  uint64_t v11 = v10;
  _Block_object_dispose(&v130, 8);
  id v12 = [v11 alloc];
  CFDictionaryRef v13 = [v9 string];
  id v129 = 0;
  uint64_t v14 = (void *)[v12 initWithURL:v94 fileType:v13 error:&v129];
  id v93 = v129;

  if (v14)
  {
    uint64_t v125 = 0;
    uint64_t v126 = &v125;
    uint64_t v127 = 0x2020000000;
    CGImageSourceRef v128 = 0;
    uint64_t v15 = *MEMORY[0x263F0F600];
    v139[0] = MEMORY[0x263EFFA88];
    uint64_t v16 = *MEMORY[0x263F0F640];
    v138[0] = v15;
    v138[1] = v16;
    CFDictionaryRef v17 = [(id)*MEMORY[0x263F1DAD0] identifier];
    v139[1] = v17;
    id v18 = [NSDictionary dictionaryWithObjects:v139 forKeys:v138 count:2];
    CGImageSourceRef v19 = WFImageSourceCreateFromFile(v96, v18);

    CGImageSourceRef v128 = v19;
    id v20 = (CGImageSource *)v126[3];
    if (!v20)
    {
      v8[2](v8, 0, v93);
      id v23 = 0;
LABEL_50:
      _Block_object_dispose(&v125, 8);
      goto LABEL_51;
    }
    size_t Count = CGImageSourceGetCount(v20);
    if (Count <= 1)
    {
      CFRelease((CFTypeRef)v126[3]);
      CFDictionaryRef v22 = [MEMORY[0x263F087E8] errorWithDomain:@"WFAnimatedGIFTranscoderErrorDomain" code:0 userInfo:0];
      v8[2](v8, 0, v22);
      id v23 = 0;
LABEL_49:

      goto LABEL_50;
    }
    size_t v24 = 0;
    double v26 = *MEMORY[0x263F001B0];
    double v25 = *(double *)(MEMORY[0x263F001B0] + 8);
    uint64_t v27 = *MEMORY[0x263F0F4F0];
    uint64_t v28 = (id *)*MEMORY[0x263F0F4F8];
    do
    {
      CFDictionaryRef v29 = CGImageSourceCopyPropertiesAtIndex((CGImageSourceRef)v126[3], v24, 0);
      id v30 = [(__CFDictionary *)v29 objectForKey:v27];
      [v30 doubleValue];
      double v32 = v31;

      CFDictionaryRef v33 = [(__CFDictionary *)v29 objectForKey:v28];
      [v33 doubleValue];
      double v35 = v34;

      double v25 = fmax(v25, v32);
      double v26 = fmax(v26, v35);
      ++v24;
    }
    while (Count != v24);
    uint64_t v130 = 0;
    uint64_t v131 = &v130;
    uint64_t v132 = 0x2020000000;
    uint64_t v36 = (uint64_t *)getAVVideoCodecKeySymbolLoc_ptr;
    uint64_t v133 = getAVVideoCodecKeySymbolLoc_ptr;
    if (!getAVVideoCodecKeySymbolLoc_ptr)
    {
      uint64_t v118 = MEMORY[0x263EF8330];
      uint64_t v119 = 3221225472;
      uint64_t v120 = (uint64_t)__getAVVideoCodecKeySymbolLoc_block_invoke;
      uint64_t v121 = &unk_26428AC60;
      v122[0] = &v130;
      double v37 = AVFoundationLibrary_3220();
      float v38 = dlsym(v37, "AVVideoCodecKey");
      *(void *)(*(void *)(v122[0] + 8) + 24) = v38;
      getAVVideoCodecKeySymbolLoc_ptr = *(void *)(*(void *)(v122[0] + 8) + 24);
      uint64_t v36 = (uint64_t *)v131[3];
    }
    _Block_object_dispose(&v130, 8);
    if (v36)
    {
      id v88 = (id)*v36;
      v136[0] = v88;
      uint64_t v130 = 0;
      uint64_t v131 = &v130;
      uint64_t v132 = 0x2020000000;
      uint64_t v36 = (uint64_t *)getAVVideoCodecTypeH264SymbolLoc_ptr;
      uint64_t v133 = getAVVideoCodecTypeH264SymbolLoc_ptr;
      if (!getAVVideoCodecTypeH264SymbolLoc_ptr)
      {
        uint64_t v118 = MEMORY[0x263EF8330];
        uint64_t v119 = 3221225472;
        uint64_t v120 = (uint64_t)__getAVVideoCodecTypeH264SymbolLoc_block_invoke;
        uint64_t v121 = &unk_26428AC60;
        v122[0] = &v130;
        long long v39 = AVFoundationLibrary_3220();
        id v40 = dlsym(v39, "AVVideoCodecTypeH264");
        *(void *)(*(void *)(v122[0] + 8) + 24) = v40;
        getAVVideoCodecTypeH264SymbolLoc_ptr = *(void *)(*(void *)(v122[0] + 8) + 24);
        uint64_t v36 = (uint64_t *)v131[3];
      }
      _Block_object_dispose(&v130, 8);
      if (v36)
      {
        id v87 = (id)*v36;
        v137[0] = v87;
        uint64_t v130 = 0;
        uint64_t v131 = &v130;
        uint64_t v132 = 0x2020000000;
        uint64_t v36 = (uint64_t *)getAVVideoWidthKeySymbolLoc_ptr;
        uint64_t v133 = getAVVideoWidthKeySymbolLoc_ptr;
        if (!getAVVideoWidthKeySymbolLoc_ptr)
        {
          uint64_t v118 = MEMORY[0x263EF8330];
          uint64_t v119 = 3221225472;
          uint64_t v120 = (uint64_t)__getAVVideoWidthKeySymbolLoc_block_invoke;
          uint64_t v121 = &unk_26428AC60;
          v122[0] = &v130;
          mode_t v41 = AVFoundationLibrary_3220();
          char v42 = dlsym(v41, "AVVideoWidthKey");
          *(void *)(*(void *)(v122[0] + 8) + 24) = v42;
          getAVVideoWidthKeySymbolLoc_ptr = *(void *)(*(void *)(v122[0] + 8) + 24);
          uint64_t v36 = (uint64_t *)v131[3];
        }
        _Block_object_dispose(&v130, 8);
        if (v36)
        {
          id v86 = (id)*v36;
          v136[1] = v86;
          uint64_t v90 = [NSNumber numberWithDouble:v26];
          v137[1] = v90;
          uint64_t v130 = 0;
          uint64_t v131 = &v130;
          uint64_t v132 = 0x2020000000;
          uint64_t v36 = &classUIPrintFormatter;
          id v43 = (id *)getAVVideoHeightKeySymbolLoc_ptr;
          uint64_t v133 = getAVVideoHeightKeySymbolLoc_ptr;
          if (!getAVVideoHeightKeySymbolLoc_ptr)
          {
            uint64_t v118 = MEMORY[0x263EF8330];
            uint64_t v119 = 3221225472;
            uint64_t v120 = (uint64_t)__getAVVideoHeightKeySymbolLoc_block_invoke;
            uint64_t v121 = &unk_26428AC60;
            v122[0] = &v130;
            uint64_t v44 = AVFoundationLibrary_3220();
            uint64_t v45 = dlsym(v44, "AVVideoHeightKey");
            *(void *)(*(void *)(v122[0] + 8) + 24) = v45;
            getAVVideoHeightKeySymbolLoc_ptr = *(void *)(*(void *)(v122[0] + 8) + 24);
            id v43 = (id *)v131[3];
          }
          _Block_object_dispose(&v130, 8);
          if (v43)
          {
            id v84 = *v43;
            v136[2] = v84;
            uint64_t v85 = [NSNumber numberWithDouble:v25];
            v137[2] = v85;
            uint64_t v130 = 0;
            uint64_t v131 = &v130;
            uint64_t v132 = 0x2020000000;
            uint64_t v36 = (uint64_t *)getAVVideoCompressionPropertiesKeySymbolLoc_ptr;
            uint64_t v133 = getAVVideoCompressionPropertiesKeySymbolLoc_ptr;
            if (!getAVVideoCompressionPropertiesKeySymbolLoc_ptr)
            {
              uint64_t v118 = MEMORY[0x263EF8330];
              uint64_t v119 = 3221225472;
              uint64_t v120 = (uint64_t)__getAVVideoCompressionPropertiesKeySymbolLoc_block_invoke;
              uint64_t v121 = &unk_26428AC60;
              v122[0] = &v130;
              uint64_t v46 = AVFoundationLibrary_3220();
              uint64_t v47 = dlsym(v46, "AVVideoCompressionPropertiesKey");
              *(void *)(*(void *)(v122[0] + 8) + 24) = v47;
              getAVVideoCompressionPropertiesKeySymbolLoc_ptr = *(void *)(*(void *)(v122[0] + 8) + 24);
              uint64_t v36 = (uint64_t *)v131[3];
            }
            _Block_object_dispose(&v130, 8);
            if (v36)
            {
              id v83 = (id)*v36;
              v136[3] = v83;
              uint64_t v130 = 0;
              uint64_t v131 = &v130;
              uint64_t v132 = 0x2020000000;
              uint64_t v36 = (uint64_t *)getAVVideoAverageBitRateKeySymbolLoc_ptr;
              uint64_t v133 = getAVVideoAverageBitRateKeySymbolLoc_ptr;
              if (!getAVVideoAverageBitRateKeySymbolLoc_ptr)
              {
                uint64_t v118 = MEMORY[0x263EF8330];
                uint64_t v119 = 3221225472;
                uint64_t v120 = (uint64_t)__getAVVideoAverageBitRateKeySymbolLoc_block_invoke;
                uint64_t v121 = &unk_26428AC60;
                v122[0] = &v130;
                uint64_t v48 = AVFoundationLibrary_3220();
                char v49 = dlsym(v48, "AVVideoAverageBitRateKey");
                *(void *)(*(void *)(v122[0] + 8) + 24) = v49;
                getAVVideoAverageBitRateKeySymbolLoc_ptr = *(void *)(*(void *)(v122[0] + 8) + 24);
                uint64_t v36 = (uint64_t *)v131[3];
              }
              _Block_object_dispose(&v130, 8);
              if (v36)
              {
                id v82 = (id)*v36;
                v134[0] = v82;
                v135[0] = &unk_26C741C80;
                uint64_t v130 = 0;
                uint64_t v131 = &v130;
                uint64_t v132 = 0x2020000000;
                uint64_t v36 = (uint64_t *)getAVVideoProfileLevelKeySymbolLoc_ptr;
                uint64_t v133 = getAVVideoProfileLevelKeySymbolLoc_ptr;
                if (!getAVVideoProfileLevelKeySymbolLoc_ptr)
                {
                  uint64_t v118 = MEMORY[0x263EF8330];
                  uint64_t v119 = 3221225472;
                  uint64_t v120 = (uint64_t)__getAVVideoProfileLevelKeySymbolLoc_block_invoke;
                  uint64_t v121 = &unk_26428AC60;
                  v122[0] = &v130;
                  uint64_t v50 = AVFoundationLibrary_3220();
                  uint64_t v51 = dlsym(v50, "AVVideoProfileLevelKey");
                  *(void *)(*(void *)(v122[0] + 8) + 24) = v51;
                  getAVVideoProfileLevelKeySymbolLoc_ptr = *(void *)(*(void *)(v122[0] + 8) + 24);
                  uint64_t v36 = (uint64_t *)v131[3];
                }
                _Block_object_dispose(&v130, 8);
                if (v36)
                {
                  uint64_t v36 = (uint64_t *)(id)*v36;
                  v134[1] = v36;
                  uint64_t v130 = 0;
                  uint64_t v131 = &v130;
                  uint64_t v132 = 0x2020000000;
                  uint64_t v52 = (id *)getAVVideoProfileLevelH264High41SymbolLoc_ptr;
                  uint64_t v133 = getAVVideoProfileLevelH264High41SymbolLoc_ptr;
                  if (!getAVVideoProfileLevelH264High41SymbolLoc_ptr)
                  {
                    uint64_t v118 = MEMORY[0x263EF8330];
                    uint64_t v119 = 3221225472;
                    uint64_t v120 = (uint64_t)__getAVVideoProfileLevelH264High41SymbolLoc_block_invoke;
                    uint64_t v121 = &unk_26428AC60;
                    v122[0] = &v130;
                    uint64_t v53 = AVFoundationLibrary_3220();
                    uint64_t v54 = dlsym(v53, "AVVideoProfileLevelH264High41");
                    *(void *)(*(void *)(v122[0] + 8) + 24) = v54;
                    getAVVideoProfileLevelH264High41SymbolLoc_ptr = *(void *)(*(void *)(v122[0] + 8) + 24);
                    uint64_t v52 = (id *)v131[3];
                  }
                  _Block_object_dispose(&v130, 8);
                  if (v52)
                  {
                    id v55 = *v52;
                    v135[1] = v55;
                    uint64_t v130 = 0;
                    uint64_t v131 = &v130;
                    uint64_t v132 = 0x2020000000;
                    uint64_t v28 = (id *)getAVVideoMaxKeyFrameIntervalKeySymbolLoc_ptr;
                    uint64_t v133 = getAVVideoMaxKeyFrameIntervalKeySymbolLoc_ptr;
                    if (!getAVVideoMaxKeyFrameIntervalKeySymbolLoc_ptr)
                    {
                      uint64_t v118 = MEMORY[0x263EF8330];
                      uint64_t v119 = 3221225472;
                      uint64_t v120 = (uint64_t)__getAVVideoMaxKeyFrameIntervalKeySymbolLoc_block_invoke;
                      uint64_t v121 = &unk_26428AC60;
                      v122[0] = &v130;
                      float v56 = AVFoundationLibrary_3220();
                      uint64_t v57 = dlsym(v56, "AVVideoMaxKeyFrameIntervalKey");
                      *(void *)(*(void *)(v122[0] + 8) + 24) = v57;
                      getAVVideoMaxKeyFrameIntervalKeySymbolLoc_ptr = *(void *)(*(void *)(v122[0] + 8) + 24);
                      uint64_t v28 = (id *)v131[3];
                    }
                    _Block_object_dispose(&v130, 8);
                    if (v28)
                    {
                      id v58 = *v28;
                      v134[2] = v58;
                      v135[2] = &unk_26C741C98;
                      uint64_t v59 = [NSDictionary dictionaryWithObjects:v135 forKeys:v134 count:3];
                      v137[3] = v59;
                      uint64_t v89 = [NSDictionary dictionaryWithObjects:v137 forKeys:v136 count:4];

                      uint64_t v130 = 0;
                      uint64_t v131 = &v130;
                      uint64_t v132 = 0x2050000000;
                      uint64_t v60 = (void *)getAVAssetWriterInputClass_softClass;
                      uint64_t v133 = getAVAssetWriterInputClass_softClass;
                      if (!getAVAssetWriterInputClass_softClass)
                      {
                        uint64_t v118 = MEMORY[0x263EF8330];
                        uint64_t v119 = 3221225472;
                        uint64_t v120 = (uint64_t)__getAVAssetWriterInputClass_block_invoke;
                        uint64_t v121 = &unk_26428AC60;
                        v122[0] = &v130;
                        __getAVAssetWriterInputClass_block_invoke((uint64_t)&v118);
                        uint64_t v60 = (void *)v131[3];
                      }
                      id v61 = v60;
                      _Block_object_dispose(&v130, 8);
                      uint64_t v62 = getAVMediaTypeVideo();
                      uint64_t v28 = [v61 assetWriterInputWithMediaType:v62 outputSettings:v89];

                      [v28 setExpectsMediaDataInRealTime:0];
                      if (([v14 canAddInput:v28] & 1) == 0)
                      {
                        v8[2](v8, 0, 0);
                        id v23 = 0;
                        goto LABEL_48;
                      }
                      [v14 addInput:v28];
                      uint64_t v130 = 0;
                      uint64_t v131 = &v130;
                      uint64_t v132 = 0x2050000000;
                      uint64_t v63 = (void *)getAVAssetWriterInputPixelBufferAdaptorClass_softClass;
                      uint64_t v133 = getAVAssetWriterInputPixelBufferAdaptorClass_softClass;
                      uint64_t v36 = (uint64_t *)&off_216612000;
                      if (!getAVAssetWriterInputPixelBufferAdaptorClass_softClass)
                      {
                        uint64_t v118 = MEMORY[0x263EF8330];
                        uint64_t v119 = 3221225472;
                        uint64_t v120 = (uint64_t)__getAVAssetWriterInputPixelBufferAdaptorClass_block_invoke;
                        uint64_t v121 = &unk_26428AC60;
                        v122[0] = &v130;
                        __getAVAssetWriterInputPixelBufferAdaptorClass_block_invoke((uint64_t)&v118);
                        uint64_t v63 = (void *)v131[3];
                      }
                      id v64 = v63;
                      _Block_object_dispose(&v130, 8);
                      uint64_t v65 = [v64 assetWriterInputPixelBufferAdaptorWithAssetWriterInput:v28 sourcePixelBufferAttributes:0];
                      [v14 startWriting];
                      getkCMTimeZero((uint64_t)v124);
                      [v14 startSessionAtSourceTime:v124];
                      int v81 = v14;
                      uint64_t v90 = (void *)v65;
                      if (WFGenerateVideoFromGIF_onceToken == -1)
                      {
LABEL_46:
                        uint64_t v130 = 0;
                        uint64_t v131 = &v130;
                        uint64_t v132 = 0x2020000000;
                        uint64_t v133 = 0;
                        v123[0] = 0;
                        v123[1] = v123;
                        v123[2] = 0x2020000000;
                        v123[3] = 0;
                        uint64_t v118 = 0;
                        uint64_t v119 = (uint64_t)&v118;
                        uint64_t v120 = 0x3810000000;
                        uint64_t v121 = &unk_2166330CF;
                        memset(v122, 0, sizeof(v122));
                        getkCMTimeZero((uint64_t)v122);
                        uint64_t v66 = WFGenerateVideoFromGIF_videoWriterQueue;
                        uint64_t v101 = MEMORY[0x263EF8330];
                        uint64_t v102 = v36[174];
                        uint64_t v67 = v102;
                        char v103 = __WFGenerateVideoFromGIF_block_invoke_2;
                        stat v104 = &unk_2642863A0;
                        uint64_t v112 = &v130;
                        uint64_t v113 = v123;
                        uint64_t v116 = v91;
                        size_t v117 = Count;
                        uint64_t v114 = &v125;
                        stat v105 = v28;
                        id v92 = v90;
                        id v106 = v92;
                        uint64_t v115 = &v118;
                        uint64_t v14 = v81;
                        id v68 = v81;
                        id v107 = v68;
                        uint64_t v69 = v8;
                        id v111 = v69;
                        id v70 = v94;
                        id v108 = v70;
                        id v109 = v9;
                        id v110 = v95;
                        [v105 requestMediaDataWhenReadyOnQueue:v66 usingBlock:&v101];
                        aBlock[0] = MEMORY[0x263EF8330];
                        aBlock[1] = v67;
                        aBlock[2] = __WFGenerateVideoFromGIF_block_invoke_4;
                        aBlock[3] = &unk_26428A9D8;
                        id v98 = v68;
                        id v99 = v70;
                        uint64_t v100 = v69;
                        id v23 = _Block_copy(aBlock);

                        _Block_object_dispose(&v118, 8);
                        _Block_object_dispose(v123, 8);
                        _Block_object_dispose(&v130, 8);

LABEL_48:
                        CFDictionaryRef v22 = (void *)v89;
                        goto LABEL_49;
                      }
LABEL_65:
                      dispatch_once(&WFGenerateVideoFromGIF_onceToken, &__block_literal_global_39);
                      goto LABEL_46;
                    }
                    uint64_t v80 = [MEMORY[0x263F08690] currentHandler];
                    id v7 = [NSString stringWithUTF8String:"NSString *getAVVideoMaxKeyFrameIntervalKey(void)"];
                    objc_msgSend(v80, "handleFailureInFunction:file:lineNumber:description:", v7, @"WFAnimatedGIFTranscoder.m", 60, @"%s", dlerror());
                  }
                  else
                  {
                    uint64_t v79 = [MEMORY[0x263F08690] currentHandler];
                    id v7 = [NSString stringWithUTF8String:"NSString *getAVVideoProfileLevelH264High41(void)"];
                    objc_msgSend(v79, "handleFailureInFunction:file:lineNumber:description:", v7, @"WFAnimatedGIFTranscoder.m", 62, @"%s", dlerror());
                  }
                }
                else
                {
                  uint64_t v78 = [MEMORY[0x263F08690] currentHandler];
                  id v7 = [NSString stringWithUTF8String:"NSString *getAVVideoProfileLevelKey(void)"];
                  objc_msgSend(v78, "handleFailureInFunction:file:lineNumber:description:", v7, @"WFAnimatedGIFTranscoder.m", 59, @"%s", dlerror());
                }
              }
              else
              {
                uint64_t v77 = [MEMORY[0x263F08690] currentHandler];
                id v7 = [NSString stringWithUTF8String:"NSString *getAVVideoAverageBitRateKey(void)"];
                objc_msgSend(v77, "handleFailureInFunction:file:lineNumber:description:", v7, @"WFAnimatedGIFTranscoder.m", 58, @"%s", dlerror());
              }
            }
            else
            {
              uint64_t v76 = [MEMORY[0x263F08690] currentHandler];
              id v7 = [NSString stringWithUTF8String:"NSString *getAVVideoCompressionPropertiesKey(void)"];
              objc_msgSend(v76, "handleFailureInFunction:file:lineNumber:description:", v7, @"WFAnimatedGIFTranscoder.m", 57, @"%s", dlerror());
            }
          }
          else
          {
            off_t v75 = [MEMORY[0x263F08690] currentHandler];
            id v7 = [NSString stringWithUTF8String:"NSString *getAVVideoHeightKey(void)"];
            objc_msgSend(v75, "handleFailureInFunction:file:lineNumber:description:", v7, @"WFAnimatedGIFTranscoder.m", 56, @"%s", dlerror());
          }
        }
        else
        {
          int v74 = [MEMORY[0x263F08690] currentHandler];
          id v7 = [NSString stringWithUTF8String:"NSString *getAVVideoWidthKey(void)"];
          objc_msgSend(v74, "handleFailureInFunction:file:lineNumber:description:", v7, @"WFAnimatedGIFTranscoder.m", 55, @"%s", dlerror());
        }
      }
      else
      {
        BOOL v73 = [MEMORY[0x263F08690] currentHandler];
        id v7 = [NSString stringWithUTF8String:"AVVideoCodecType getAVVideoCodecTypeH264(void)"];
        objc_msgSend(v73, "handleFailureInFunction:file:lineNumber:description:", v7, @"WFAnimatedGIFTranscoder.m", 61, @"%s", dlerror());
      }
    }
    else
    {
      int v72 = [MEMORY[0x263F08690] currentHandler];
      id v7 = [NSString stringWithUTF8String:"NSString *getAVVideoCodecKey(void)"];
      objc_msgSend(v72, "handleFailureInFunction:file:lineNumber:description:", v7, @"WFAnimatedGIFTranscoder.m", 54, @"%s", dlerror());
    }
    __break(1u);
    goto LABEL_65;
  }
  v8[2](v8, 0, v93);
  id v23 = 0;
LABEL_51:

LABEL_52:
  return v23;
}

void sub_216537F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&a64, 8);
  _Unwind_Resume(a1);
}

void __getAVAssetWriterClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_3220();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetWriter");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetWriterClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    double v3 = [NSString stringWithUTF8String:"Class getAVAssetWriterClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAnimatedGIFTranscoder.m", 49, @"Unable to find class %s", "AVAssetWriter");

    __break(1u);
  }
}

void *__getAVVideoCodecKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_3220();
  uint64_t result = dlsym(v2, "AVVideoCodecKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVVideoCodecKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVVideoCodecTypeH264SymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_3220();
  uint64_t result = dlsym(v2, "AVVideoCodecTypeH264");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVVideoCodecTypeH264SymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVVideoWidthKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_3220();
  uint64_t result = dlsym(v2, "AVVideoWidthKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVVideoWidthKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVVideoHeightKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_3220();
  uint64_t result = dlsym(v2, "AVVideoHeightKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVVideoHeightKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVVideoCompressionPropertiesKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_3220();
  uint64_t result = dlsym(v2, "AVVideoCompressionPropertiesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVVideoCompressionPropertiesKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVVideoAverageBitRateKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_3220();
  uint64_t result = dlsym(v2, "AVVideoAverageBitRateKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVVideoAverageBitRateKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVVideoProfileLevelKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_3220();
  uint64_t result = dlsym(v2, "AVVideoProfileLevelKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVVideoProfileLevelKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVVideoProfileLevelH264High41SymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_3220();
  uint64_t result = dlsym(v2, "AVVideoProfileLevelH264High41");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVVideoProfileLevelH264High41SymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVVideoMaxKeyFrameIntervalKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_3220();
  uint64_t result = dlsym(v2, "AVVideoMaxKeyFrameIntervalKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVVideoMaxKeyFrameIntervalKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getAVAssetWriterInputClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_3220();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetWriterInput");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetWriterInputClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    double v3 = [NSString stringWithUTF8String:"Class getAVAssetWriterInputClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAnimatedGIFTranscoder.m", 50, @"Unable to find class %s", "AVAssetWriterInput");

    __break(1u);
  }
}

void __getAVAssetWriterInputPixelBufferAdaptorClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_3220();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetWriterInputPixelBufferAdaptor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetWriterInputPixelBufferAdaptorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    double v3 = [NSString stringWithUTF8String:"Class getAVAssetWriterInputPixelBufferAdaptorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAnimatedGIFTranscoder.m", 51, @"Unable to find class %s", "AVAssetWriterInputPixelBufferAdaptor");

    __break(1u);
  }
}

void __WFGenerateVideoFromGIF_block_invoke_2(uint64_t a1)
{
  void (*v52)(long long *__return_ptr, long long *, long long *);
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t);
  void *v58;
  void *v59;
  uint64_t v60;
  const void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void v84[4];
  id v85;
  id v86;
  id v87;
  id v88;
  CFDictionaryRef v89;
  long long v90;
  void *(*v91)(uint64_t);
  long long v92;
  uint64_t v93;
  long long v94;
  uint64_t v95;
  uint64_t v96;
  long long v97;
  void *(*v98)(uint64_t);
  void *v99;
  long long *v100;
  long long v101;
  uint64_t v102;
  void *v103;
  void v104[2];
  void v105[5];
  CGRect v106;

  v105[2] = *MEMORY[0x263EF8340];
  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) >= *(void *)(a1 + 120)
    || (size_t v2 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24), v2 >= *(void *)(a1 + 128)))
  {
    id v61 = *(const void **)(*(void *)(*(void *)(a1 + 104) + 8) + 24);
    if (v61)
    {
      CFRelease(v61);
      *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 0;
    }
    [*(id *)(a1 + 32) markAsFinished];
    uint64_t v62 = *(void **)(a1 + 48);
    uint64_t v63 = *(void *)(*(void *)(a1 + 112) + 8);
    uint64_t v97 = *(_OWORD *)(v63 + 32);
    id v98 = *(void *(**)(uint64_t))(v63 + 48);
    [v62 endSessionAtSourceTime:&v97];
    id v64 = *(void **)(a1 + 48);
    v84[0] = MEMORY[0x263EF8330];
    v84[1] = 3221225472;
    v84[2] = __WFGenerateVideoFromGIF_block_invoke_3;
    v84[3] = &unk_2642878F8;
    uint64_t v89 = (const __CFDictionary *)*(id *)(a1 + 80);
    uint64_t v85 = *(id *)(a1 + 48);
    id v86 = *(id *)(a1 + 56);
    id v87 = *(id *)(a1 + 64);
    id v88 = *(id *)(a1 + 72);
    [v64 finishWritingWithCompletionHandler:v84];

    CFDictionaryRef v3 = v89;
  }
  else
  {
    CFDictionaryRef v3 = CGImageSourceCopyPropertiesAtIndex(*(CGImageSourceRef *)(*(void *)(*(void *)(a1 + 104) + 8) + 24), v2, 0);
    CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(*(CGImageSourceRef *)(*(void *)(*(void *)(a1 + 104) + 8) + 24), *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24), 0);
    if (ImageAtIndex)
    {
      id v5 = ImageAtIndex;
      *(void *)&uint64_t v101 = 0;
      *((void *)&v101 + 1) = &v101;
      uint64_t v102 = 0x2020000000;
      CFURLRef v6 = (void *)getkCVPixelBufferCGImageCompatibilityKeySymbolLoc_ptr;
      char v103 = (void *)getkCVPixelBufferCGImageCompatibilityKeySymbolLoc_ptr;
      if (!getkCVPixelBufferCGImageCompatibilityKeySymbolLoc_ptr)
      {
        *(void *)&uint64_t v97 = MEMORY[0x263EF8330];
        *((void *)&v97 + 1) = 3221225472;
        id v98 = __getkCVPixelBufferCGImageCompatibilityKeySymbolLoc_block_invoke;
        id v99 = &unk_26428AC60;
        uint64_t v100 = &v101;
        id v7 = CoreVideoLibrary();
        *(void *)(*((void *)&v101 + 1) + 24) = dlsym(v7, "kCVPixelBufferCGImageCompatibilityKey");
        getkCVPixelBufferCGImageCompatibilityKeySymbolLoc_ptr = *(void *)(*((void *)v100 + 1) + 24);
        CFURLRef v6 = *(void **)(*((void *)&v101 + 1) + 24);
      }
      _Block_object_dispose(&v101, 8);
      if (v6)
      {
        v104[0] = *v6;
        uint64_t v8 = MEMORY[0x263EFFA88];
        v105[0] = MEMORY[0x263EFFA88];
        *(void *)&uint64_t v101 = 0;
        *((void *)&v101 + 1) = &v101;
        uint64_t v102 = 0x2020000000;
        uint64_t v9 = (void *)getkCVPixelBufferCGBitmapContextCompatibilityKeySymbolLoc_ptr;
        char v103 = (void *)getkCVPixelBufferCGBitmapContextCompatibilityKeySymbolLoc_ptr;
        if (!getkCVPixelBufferCGBitmapContextCompatibilityKeySymbolLoc_ptr)
        {
          *(void *)&uint64_t v97 = MEMORY[0x263EF8330];
          *((void *)&v97 + 1) = 3221225472;
          id v98 = __getkCVPixelBufferCGBitmapContextCompatibilityKeySymbolLoc_block_invoke;
          id v99 = &unk_26428AC60;
          uint64_t v100 = &v101;
          char v10 = CoreVideoLibrary();
          *(void *)(*((void *)&v101 + 1) + 24) = dlsym(v10, "kCVPixelBufferCGBitmapContextCompatibilityKey");
          getkCVPixelBufferCGBitmapContextCompatibilityKeySymbolLoc_ptr = *(void *)(*((void *)v100 + 1) + 24);
          uint64_t v9 = *(void **)(*((void *)&v101 + 1) + 24);
        }
        _Block_object_dispose(&v101, 8);
        if (v9)
        {
          v104[1] = *v9;
          v105[1] = v8;
          id v83 = [NSDictionary dictionaryWithObjects:v105 forKeys:v104 count:2];
          id v96 = 0;
          size_t Width = CGImageGetWidth(v5);
          size_t Height = CGImageGetHeight(v5);
          *(void *)&uint64_t v101 = 0;
          *((void *)&v101 + 1) = &v101;
          uint64_t v102 = 0x2020000000;
          CFDictionaryRef v13 = (void (*)(void, size_t, size_t, uint64_t, void *, uint64_t *))getCVPixelBufferCreateSymbolLoc_ptr;
          char v103 = getCVPixelBufferCreateSymbolLoc_ptr;
          if (!getCVPixelBufferCreateSymbolLoc_ptr)
          {
            *(void *)&uint64_t v97 = MEMORY[0x263EF8330];
            *((void *)&v97 + 1) = 3221225472;
            id v98 = __getCVPixelBufferCreateSymbolLoc_block_invoke;
            id v99 = &unk_26428AC60;
            uint64_t v100 = &v101;
            uint64_t v14 = CoreVideoLibrary();
            *(void *)(*((void *)&v101 + 1) + 24) = dlsym(v14, "CVPixelBufferCreate");
            getCVPixelBufferCreateSymbolLoc_ptr = *(_UNKNOWN **)(*((void *)v100 + 1) + 24);
            CFDictionaryRef v13 = *(void (**)(void, size_t, size_t, uint64_t, void *, uint64_t *))(*((void *)&v101 + 1)
                                                                                            + 24);
          }
          _Block_object_dispose(&v101, 8);
          if (v13)
          {
            v13(0, Width, Height, 32, v83, &v96);
            uint64_t v15 = v96;
            if (!v96)
            {
              CGImageRelease(v5);
LABEL_43:

              goto LABEL_41;
            }
            *(void *)&uint64_t v101 = 0;
            *((void *)&v101 + 1) = &v101;
            uint64_t v102 = 0x2020000000;
            uint64_t v16 = (void (*)(uint64_t, void))getCVPixelBufferLockBaseAddressSymbolLoc_ptr;
            char v103 = getCVPixelBufferLockBaseAddressSymbolLoc_ptr;
            if (!getCVPixelBufferLockBaseAddressSymbolLoc_ptr)
            {
              *(void *)&uint64_t v97 = MEMORY[0x263EF8330];
              *((void *)&v97 + 1) = 3221225472;
              id v98 = __getCVPixelBufferLockBaseAddressSymbolLoc_block_invoke;
              id v99 = &unk_26428AC60;
              uint64_t v100 = &v101;
              CFDictionaryRef v17 = CoreVideoLibrary();
              id v18 = dlsym(v17, "CVPixelBufferLockBaseAddress");
              *(void *)(*((void *)v100 + 1) + 24) = v18;
              getCVPixelBufferLockBaseAddressSymbolLoc_ptr = *(_UNKNOWN **)(*((void *)v100 + 1) + 24);
              uint64_t v16 = *(void (**)(uint64_t, void))(*((void *)&v101 + 1) + 24);
            }
            _Block_object_dispose(&v101, 8);
            if (v16)
            {
              v16(v15, 0);
              uint64_t v19 = v96;
              *(void *)&uint64_t v101 = 0;
              *((void *)&v101 + 1) = &v101;
              uint64_t v102 = 0x2020000000;
              id v20 = (uint64_t (*)(uint64_t))getCVPixelBufferGetBaseAddressSymbolLoc_ptr;
              char v103 = getCVPixelBufferGetBaseAddressSymbolLoc_ptr;
              if (!getCVPixelBufferGetBaseAddressSymbolLoc_ptr)
              {
                *(void *)&uint64_t v97 = MEMORY[0x263EF8330];
                *((void *)&v97 + 1) = 3221225472;
                id v98 = __getCVPixelBufferGetBaseAddressSymbolLoc_block_invoke;
                id v99 = &unk_26428AC60;
                uint64_t v100 = &v101;
                id v21 = CoreVideoLibrary();
                CFDictionaryRef v22 = dlsym(v21, "CVPixelBufferGetBaseAddress");
                *(void *)(*((void *)v100 + 1) + 24) = v22;
                getCVPixelBufferGetBaseAddressSymbolLoc_ptr = *(_UNKNOWN **)(*((void *)v100 + 1) + 24);
                id v20 = *(uint64_t (**)(uint64_t))(*((void *)&v101 + 1) + 24);
              }
              _Block_object_dispose(&v101, 8);
              if (v20)
              {
                id v23 = (void *)v20(v19);
                DeviceRGB = CGColorSpaceCreateDeviceRGB();
                soft_CVPixelBufferGetWidth(v96);
                size_t v26 = v25;
                soft_CVPixelBufferGetHeight(v96);
                size_t v28 = v27;
                uint64_t v29 = v96;
                *(void *)&uint64_t v101 = 0;
                *((void *)&v101 + 1) = &v101;
                uint64_t v102 = 0x2020000000;
                id v30 = (uint64_t (*)(uint64_t))getCVPixelBufferGetBytesPerRowSymbolLoc_ptr;
                char v103 = getCVPixelBufferGetBytesPerRowSymbolLoc_ptr;
                if (!getCVPixelBufferGetBytesPerRowSymbolLoc_ptr)
                {
                  *(void *)&uint64_t v97 = MEMORY[0x263EF8330];
                  *((void *)&v97 + 1) = 3221225472;
                  id v98 = __getCVPixelBufferGetBytesPerRowSymbolLoc_block_invoke;
                  id v99 = &unk_26428AC60;
                  uint64_t v100 = &v101;
                  double v31 = CoreVideoLibrary();
                  double v32 = dlsym(v31, "CVPixelBufferGetBytesPerRow");
                  *(void *)(*((void *)v100 + 1) + 24) = v32;
                  getCVPixelBufferGetBytesPerRowSymbolLoc_ptr = *(_UNKNOWN **)(*((void *)v100 + 1) + 24);
                  id v30 = *(uint64_t (**)(uint64_t))(*((void *)&v101 + 1) + 24);
                }
                _Block_object_dispose(&v101, 8);
                if (v30)
                {
                  size_t v33 = v30(v29);
                  double v34 = CGBitmapContextCreate(v23, v26, v28, 8uLL, v33, DeviceRGB, 2u);
                  soft_CVPixelBufferGetWidth(v96);
                  unint64_t v36 = v35;
                  soft_CVPixelBufferGetHeight(v96);
                  v106.size.width = (double)v36;
                  v106.size.height = (double)v37;
                  v106.origin.x = 0.0;
                  v106.origin.y = 0.0;
                  CGContextDrawImage(v34, v106, v5);
                  CGColorSpaceRelease(DeviceRGB);
                  CGContextRelease(v34);
                  CGImageRelease(v5);
                  uint64_t v38 = v96;
                  *(void *)&uint64_t v101 = 0;
                  *((void *)&v101 + 1) = &v101;
                  uint64_t v102 = 0x2020000000;
                  long long v39 = (void (*)(uint64_t, void))getCVPixelBufferUnlockBaseAddressSymbolLoc_ptr;
                  char v103 = getCVPixelBufferUnlockBaseAddressSymbolLoc_ptr;
                  if (!getCVPixelBufferUnlockBaseAddressSymbolLoc_ptr)
                  {
                    *(void *)&uint64_t v97 = MEMORY[0x263EF8330];
                    *((void *)&v97 + 1) = 3221225472;
                    id v98 = __getCVPixelBufferUnlockBaseAddressSymbolLoc_block_invoke;
                    id v99 = &unk_26428AC60;
                    uint64_t v100 = &v101;
                    id v40 = CoreVideoLibrary();
                    mode_t v41 = dlsym(v40, "CVPixelBufferUnlockBaseAddress");
                    *(void *)(*((void *)v100 + 1) + 24) = v41;
                    getCVPixelBufferUnlockBaseAddressSymbolLoc_ptr = *(_UNKNOWN **)(*((void *)v100 + 1) + 24);
                    long long v39 = *(void (**)(uint64_t, void))(*((void *)&v101 + 1) + 24);
                  }
                  _Block_object_dispose(&v101, 8);
                  if (v39)
                  {
                    v39(v38, 0);
                    while (![*(id *)(a1 + 32) isReadyForMoreMediaData])
                      ;
                    char v42 = *(void **)(a1 + 40);
                    uint64_t v43 = *(void *)(*(void *)(a1 + 112) + 8);
                    uint64_t v97 = *(_OWORD *)(v43 + 32);
                    id v98 = *(void *(**)(uint64_t))(v43 + 48);
                    [v42 appendPixelBuffer:v96 withPresentationTime:&v97];
                    uint64_t v44 = [(__CFDictionary *)v3 objectForKey:*MEMORY[0x263F0F370]];
                    uint64_t v45 = [v44 objectForKey:*MEMORY[0x263F0F368]];
                    [v45 doubleValue];
                    double v47 = v46;
                    BOOL v48 = v46 != 0.0;

                    double v50 = 1.0 / v47;
                    uint64_t v51 = *(void *)(*(void *)(a1 + 112) + 8);
                    if (!v48) {
                      double v50 = 9.99999985;
                    }
                    LODWORD(v49) = vcvtpd_s64_f64(v50);
                    soft_CMTimeMake((uint64_t)&v92, 1, v49);
                    uint64_t v90 = *(_OWORD *)(v51 + 32);
                    uint64_t v91 = *(void *(**)(uint64_t))(v51 + 48);
                    *(void *)&uint64_t v101 = 0;
                    *((void *)&v101 + 1) = &v101;
                    uint64_t v102 = 0x2020000000;
                    uint64_t v52 = (void (*)(long long *__return_ptr, long long *, long long *))getCMTimeAddSymbolLoc_ptr;
                    char v103 = getCMTimeAddSymbolLoc_ptr;
                    if (!getCMTimeAddSymbolLoc_ptr)
                    {
                      *(void *)&uint64_t v97 = MEMORY[0x263EF8330];
                      *((void *)&v97 + 1) = 3221225472;
                      id v98 = __getCMTimeAddSymbolLoc_block_invoke;
                      id v99 = &unk_26428AC60;
                      uint64_t v100 = &v101;
                      uint64_t v53 = CoreMediaLibrary();
                      uint64_t v54 = dlsym(v53, "CMTimeAdd");
                      *(void *)(*((void *)v100 + 1) + 24) = v54;
                      getCMTimeAddSymbolLoc_ptr = *(_UNKNOWN **)(*((void *)v100 + 1) + 24);
                      uint64_t v52 = *(void (**)(long long *__return_ptr, long long *, long long *))(*((void *)&v101 + 1)
                                                                                                  + 24);
                    }
                    _Block_object_dispose(&v101, 8);
                    if (v52)
                    {
                      uint64_t v97 = v90;
                      id v98 = v91;
                      uint64_t v101 = v92;
                      uint64_t v102 = v93;
                      v52(&v94, &v97, &v101);
                      id v55 = *(void *)(*(void *)(a1 + 112) + 8);
                      *(_OWORD *)(v55 + 32) = v94;
                      float v56 = v96;
                      *(void *)(v55 + 4_Block_object_dispose(&STACK[0x248], 8) = v95;
                      *(void *)&uint64_t v101 = 0;
                      *((void *)&v101 + 1) = &v101;
                      uint64_t v102 = 0x2020000000;
                      uint64_t v57 = (void (*)(uint64_t))getCVPixelBufferReleaseSymbolLoc_ptr;
                      char v103 = getCVPixelBufferReleaseSymbolLoc_ptr;
                      if (!getCVPixelBufferReleaseSymbolLoc_ptr)
                      {
                        *(void *)&uint64_t v97 = MEMORY[0x263EF8330];
                        *((void *)&v97 + 1) = 3221225472;
                        id v98 = __getCVPixelBufferReleaseSymbolLoc_block_invoke;
                        id v99 = &unk_26428AC60;
                        uint64_t v100 = &v101;
                        id v58 = CoreVideoLibrary();
                        uint64_t v59 = dlsym(v58, "CVPixelBufferRelease");
                        *(void *)(*((void *)v100 + 1) + 24) = v59;
                        getCVPixelBufferReleaseSymbolLoc_ptr = *(_UNKNOWN **)(*((void *)v100 + 1) + 24);
                        uint64_t v57 = *(void (**)(uint64_t))(*((void *)&v101 + 1) + 24);
                      }
                      _Block_object_dispose(&v101, 8);
                      if (v57)
                      {
                        v57(v56);
                        ++*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24);
                        uint64_t v60 = *(void *)(*(void *)(a1 + 96) + 8);
                        if (*(void *)(v60 + 24) == *(void *)(a1 + 128))
                        {
                          *(void *)(v60 + 24) = 0;
                          ++*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
                        }
                        goto LABEL_43;
                      }
                      int v81 = [MEMORY[0x263F08690] currentHandler];
                      id v82 = [NSString stringWithUTF8String:"void soft_CVPixelBufferRelease(CVPixelBufferRef _Nullable)"];
                      objc_msgSend(v81, "handleFailureInFunction:file:lineNumber:description:", v82, @"WFAnimatedGIFTranscoder.m", 33, @"%s", dlerror());
                    }
                    else
                    {
                      uint64_t v79 = [MEMORY[0x263F08690] currentHandler];
                      uint64_t v80 = objc_msgSend(NSString, "stringWithUTF8String:", "CMTime soft_CMTimeAdd(CMTime, CMTime)");
                      objc_msgSend(v79, "handleFailureInFunction:file:lineNumber:description:", v80, @"WFAnimatedGIFTranscoder.m", 43, @"%s", dlerror());
                    }
                  }
                  else
                  {
                    uint64_t v77 = [MEMORY[0x263F08690] currentHandler];
                    uint64_t v78 = objc_msgSend(NSString, "stringWithUTF8String:", "CVReturn soft_CVPixelBufferUnlockBaseAddress(CVPixelBufferRef _Nonnull, CVPixelBufferLockFlags)");
                    objc_msgSend(v77, "handleFailureInFunction:file:lineNumber:description:", v78, @"WFAnimatedGIFTranscoder.m", 31, @"%s", dlerror());
                  }
                }
                else
                {
                  off_t v75 = [MEMORY[0x263F08690] currentHandler];
                  uint64_t v76 = [NSString stringWithUTF8String:"size_t soft_CVPixelBufferGetBytesPerRow(CVPixelBufferRef _Nonnull)"];
                  objc_msgSend(v75, "handleFailureInFunction:file:lineNumber:description:", v76, @"WFAnimatedGIFTranscoder.m", 36, @"%s", dlerror());
                }
              }
              else
              {
                BOOL v73 = [MEMORY[0x263F08690] currentHandler];
                int v74 = [NSString stringWithUTF8String:"void *soft_CVPixelBufferGetBaseAddress(CVPixelBufferRef _Nonnull)"];
                objc_msgSend(v73, "handleFailureInFunction:file:lineNumber:description:", v74, @"WFAnimatedGIFTranscoder.m", 32, @"%s", dlerror());
              }
            }
            else
            {
              int v71 = [MEMORY[0x263F08690] currentHandler];
              int v72 = objc_msgSend(NSString, "stringWithUTF8String:", "CVReturn soft_CVPixelBufferLockBaseAddress(CVPixelBufferRef _Nonnull, CVPixelBufferLockFlags)");
              objc_msgSend(v71, "handleFailureInFunction:file:lineNumber:description:", v72, @"WFAnimatedGIFTranscoder.m", 30, @"%s", dlerror());
            }
          }
          else
          {
            uint64_t v69 = [MEMORY[0x263F08690] currentHandler];
            id v70 = objc_msgSend(NSString, "stringWithUTF8String:", "CVReturn soft_CVPixelBufferCreate(CFAllocatorRef _Nullable, size_t, size_t, OSType, CFDictionaryRef _Nullable, CVPixelBufferRef  _Nullable * _Nonnull)");
            objc_msgSend(v69, "handleFailureInFunction:file:lineNumber:description:", v70, @"WFAnimatedGIFTranscoder.m", 29, @"%s", dlerror());
          }
        }
        else
        {
          uint64_t v67 = [MEMORY[0x263F08690] currentHandler];
          id v68 = [NSString stringWithUTF8String:"CFStringRef getkCVPixelBufferCGBitmapContextCompatibilityKey(void)"];
          objc_msgSend(v67, "handleFailureInFunction:file:lineNumber:description:", v68, @"WFAnimatedGIFTranscoder.m", 28, @"%s", dlerror());
        }
      }
      else
      {
        uint64_t v65 = [MEMORY[0x263F08690] currentHandler];
        uint64_t v66 = [NSString stringWithUTF8String:"CFStringRef getkCVPixelBufferCGImageCompatibilityKey(void)"];
        objc_msgSend(v65, "handleFailureInFunction:file:lineNumber:description:", v66, @"WFAnimatedGIFTranscoder.m", 27, @"%s", dlerror());
      }
      __break(1u);
    }
  }
LABEL_41:
}

void sub_216539390(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void __WFGenerateVideoFromGIF_block_invoke_4(id *a1)
{
  size_t v2 = WFGenerateVideoFromGIF_videoWriterQueue;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = __WFGenerateVideoFromGIF_block_invoke_5;
  block[3] = &unk_26428A9D8;
  id v4 = a1[4];
  id v5 = a1[5];
  id v6 = a1[6];
  dispatch_async(v2, block);
}

void __WFGenerateVideoFromGIF_block_invoke_5(uint64_t a1)
{
  [*(id *)(a1 + 32) cancelWriting];
  size_t v2 = [MEMORY[0x263F08850] defaultManager];
  [v2 removeItemAtURL:*(void *)(a1 + 40) error:0];

  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = [MEMORY[0x263F087E8] userCancelledError];
  (*(void (**)(uint64_t, void, id))(v3 + 16))(v3, 0, v4);
}

void *__getkCVPixelBufferCGImageCompatibilityKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = CoreVideoLibrary();
  uint64_t result = dlsym(v2, "kCVPixelBufferCGImageCompatibilityKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkCVPixelBufferCGImageCompatibilityKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CoreVideoLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreVideoLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreVideoLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_2642863F0;
    uint64_t v6 = 0;
    CoreVideoLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)CoreVideoLibraryCore_frameworkLibrary;
  if (!CoreVideoLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *CoreVideoLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAnimatedGIFTranscoder.m", 26, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getkCVPixelBufferCGBitmapContextCompatibilityKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = CoreVideoLibrary();
  uint64_t result = dlsym(v2, "kCVPixelBufferCGBitmapContextCompatibilityKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkCVPixelBufferCGBitmapContextCompatibilityKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getCVPixelBufferCreateSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = CoreVideoLibrary();
  uint64_t result = dlsym(v2, "CVPixelBufferCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCVPixelBufferCreateSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCVPixelBufferLockBaseAddressSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = CoreVideoLibrary();
  uint64_t result = dlsym(v2, "CVPixelBufferLockBaseAddress");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCVPixelBufferLockBaseAddressSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCVPixelBufferGetBaseAddressSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = CoreVideoLibrary();
  uint64_t result = dlsym(v2, "CVPixelBufferGetBaseAddress");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCVPixelBufferGetBaseAddressSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void soft_CVPixelBufferGetWidth(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  size_t v2 = (void (*)(uint64_t))getCVPixelBufferGetWidthSymbolLoc_ptr;
  uint64_t v9 = getCVPixelBufferGetWidthSymbolLoc_ptr;
  if (!getCVPixelBufferGetWidthSymbolLoc_ptr)
  {
    uint64_t v3 = CoreVideoLibrary();
    v7[3] = (uint64_t)dlsym(v3, "CVPixelBufferGetWidth");
    getCVPixelBufferGetWidthSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    size_t v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    id v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"size_t soft_CVPixelBufferGetWidth(CVPixelBufferRef _Nonnull)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAnimatedGIFTranscoder.m", 34, @"%s", dlerror());

    __break(1u);
  }
}

void sub_216539958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void soft_CVPixelBufferGetHeight(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  size_t v2 = (void (*)(uint64_t))getCVPixelBufferGetHeightSymbolLoc_ptr;
  uint64_t v9 = getCVPixelBufferGetHeightSymbolLoc_ptr;
  if (!getCVPixelBufferGetHeightSymbolLoc_ptr)
  {
    uint64_t v3 = CoreVideoLibrary();
    v7[3] = (uint64_t)dlsym(v3, "CVPixelBufferGetHeight");
    getCVPixelBufferGetHeightSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    size_t v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    id v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"size_t soft_CVPixelBufferGetHeight(CVPixelBufferRef _Nonnull)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAnimatedGIFTranscoder.m", 35, @"%s", dlerror());

    __break(1u);
  }
}

void sub_216539AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCVPixelBufferGetBytesPerRowSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = CoreVideoLibrary();
  uint64_t result = dlsym(v2, "CVPixelBufferGetBytesPerRow");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCVPixelBufferGetBytesPerRowSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCVPixelBufferUnlockBaseAddressSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = CoreVideoLibrary();
  uint64_t result = dlsym(v2, "CVPixelBufferUnlockBaseAddress");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCVPixelBufferUnlockBaseAddressSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCMTimeAddSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = CoreMediaLibrary();
  uint64_t result = dlsym(v2, "CMTimeAdd");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMTimeAddSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCVPixelBufferReleaseSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = CoreVideoLibrary();
  uint64_t result = dlsym(v2, "CVPixelBufferRelease");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCVPixelBufferReleaseSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __WFGenerateVideoFromGIF_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = [*(id *)(a1 + 32) status];
  if (v3 == 2)
  {
    id v5 = +[WFFileRepresentation fileWithURL:*(void *)(a1 + 40) options:1 ofType:*(void *)(a1 + 48) proposedFilename:*(void *)(a1 + 56)];
  }
  else
  {
    id v5 = 0;
  }
  id v4 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v5, v4);

  if (v3 == 2)
  {
  }
}

void *__getCVPixelBufferGetHeightSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreVideoLibrary();
  uint64_t result = dlsym(v2, "CVPixelBufferGetHeight");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCVPixelBufferGetHeightSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCVPixelBufferGetWidthSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreVideoLibrary();
  uint64_t result = dlsym(v2, "CVPixelBufferGetWidth");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCVPixelBufferGetWidthSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreVideoLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreVideoLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t __WFGenerateVideoFromGIF_block_invoke()
{
  WFGenerateVideoFromGIF_videoWriterQueue = (uint64_t)dispatch_queue_create("is.workflow.my.app.gif-to-video", 0);
  return MEMORY[0x270F9A758]();
}

BOOL WFImageDataIsAnimatedGIF(void *a1)
{
  id v1 = a1;
  BOOL v3 = (unint64_t)[v1 length] >= 5
    && (uint64_t v2 = (unsigned char *)[v1 bytes], *v2 == 71)
    && v2[1] == 73
    && v2[2] == 70;

  return v3;
}

id WFUIImageWithAnimatedGIFData(void *a1)
{
  id v1 = (void *)MEMORY[0x263F85258];
  id v2 = a1;
  BOOL v3 = [v1 currentDevice];
  [v3 screenScale];
  id v5 = WFUIImageWithAnimatedGIFDataAndOptions(v2, v4, 0.0);

  return v5;
}

id WFUIImageWithAnimatedGIFDataAndOptions(void *a1, double a2, double a3)
{
  CFDataRef v5 = a1;
  if (!v5)
  {
    id v30 = 0;
    goto LABEL_20;
  }
  uint64_t v6 = [MEMORY[0x263EFF9A0] dictionary];
  [v6 setObject:MEMORY[0x263EFFA88] forKey:*MEMORY[0x263F0F600]];
  uint64_t v7 = [(id)*MEMORY[0x263F1DAD0] identifier];
  [v6 setObject:v7 forKey:*MEMORY[0x263F0F640]];

  CFDictionaryRef options = (const __CFDictionary *)v6;
  uint64_t v8 = CGImageSourceCreateWithData(v5, (CFDictionaryRef)v6);
  size_t Count = CGImageSourceGetCount(v8);
  uint64_t v10 = [MEMORY[0x263EFF980] arrayWithCapacity:Count];
  uint64_t v11 = (void *)v10;
  if (!Count)
  {
    CFRelease(v8);
    double v16 = 0.0;
LABEL_15:
    Class UIImageClass = getUIImageClass();
    if (a3 > 0.0) {
      double v32 = a3;
    }
    else {
      double v32 = v16;
    }
    uint64_t v29 = [(objc_class *)UIImageClass animatedImageWithImages:v11 duration:v32];
    goto LABEL_19;
  }
  CFDataRef v34 = v5;
  unint64_t v35 = (void *)v10;
  size_t v12 = 0;
  uint64_t v13 = *MEMORY[0x263F0F370];
  uint64_t v14 = *MEMORY[0x263F0F368];
  uint64_t v15 = *MEMORY[0x263F0F4C8];
  double v16 = 0.0;
  do
  {
    CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v8, v12, options);
    CFDictionaryRef v18 = CGImageSourceCopyPropertiesAtIndex(v8, v12, 0);
    uint64_t v19 = [(__CFDictionary *)v18 objectForKey:v13];
    id v20 = [v19 objectForKey:v14];
    [v20 doubleValue];
    double v22 = v21;

    id v23 = [(__CFDictionary *)v18 objectForKeyedSubscript:v15];
    size_t v24 = v23;
    if (v23) {
      int v25 = [v23 integerValue];
    }
    else {
      int v25 = 1;
    }
    id v26 = objc_alloc(getUIImageClass());
    if ((v25 - 2) > 6) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = qword_216612A38[v25 - 2];
    }
    double v16 = v16 + v22;
    size_t v28 = (void *)[v26 initWithCGImage:ImageAtIndex scale:v27 orientation:a2];
    [v35 addObject:v28];

    CGImageRelease(ImageAtIndex);
    ++v12;
  }
  while (Count != v12);
  CFRelease(v8);
  CFDataRef v5 = v34;
  uint64_t v11 = v35;
  if (Count != 1) {
    goto LABEL_15;
  }
  uint64_t v29 = [v35 firstObject];
LABEL_19:
  id v30 = (void *)v29;

LABEL_20:
  return v30;
}

Class initUIImage()
{
  if (UIKitLibrary_sOnce_3271 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_3271, &__block_literal_global_98_3272);
  }
  Class result = objc_getClass("UIImage");
  classUIImage = (uint64_t)result;
  getClass UIImageClass = (uint64_t (*)())UIImageFunction;
  return result;
}

id UIImageFunction()
{
  return (id)classUIImage;
}

void *__UIKitLibrary_block_invoke_3275()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib_3276 = (uint64_t)result;
  return result;
}

id WFUIImageAnimatedGIFRepresentation(void *a1)
{
  return WFUIImageAnimatedGIFRepresentationAndOptions(a1, 0, 0, 0.0);
}

id WFUIImageAnimatedGIFRepresentationAndOptions(void *a1, uint64_t a2, void *a3, double a4)
{
  v44[1] = *MEMORY[0x263EF8340];
  id v7 = a1;
  uint64_t v8 = [v7 images];

  if (v8)
  {
    uint64_t v9 = [v7 images];
    size_t v10 = [v9 count];

    if (a4 <= 0.0)
    {
      [v7 duration];
      a4 = v11;
    }
    uint64_t v43 = *MEMORY[0x263F0F370];
    uint64_t v12 = v43;
    uint64_t v41 = *MEMORY[0x263F0F368];
    uint64_t v13 = [NSNumber numberWithDouble:a4 / (double)v10];
    char v42 = v13;
    uint64_t v14 = [NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1];
    v44[0] = v14;
    CFDictionaryRef v15 = [NSDictionary dictionaryWithObjects:v44 forKeys:&v43 count:1];

    double v16 = [MEMORY[0x263EFF990] data];
    CFDictionaryRef v17 = [(id)*MEMORY[0x263F1DAD0] identifier];
    CFDictionaryRef v18 = CGImageDestinationCreateWithData(v16, v17, v10, 0);

    uint64_t v39 = v12;
    uint64_t v37 = *MEMORY[0x263F0F388];
    uint64_t v19 = [NSNumber numberWithUnsignedInteger:a2];
    uint64_t v38 = v19;
    id v20 = [NSDictionary dictionaryWithObjects:&v38 forKeys:&v37 count:1];
    id v40 = v20;
    CFDictionaryRef v21 = [NSDictionary dictionaryWithObjects:&v40 forKeys:&v39 count:1];

    CGImageDestinationSetProperties(v18, v21);
    double v22 = [v7 images];
    uint64_t v23 = [v22 count];

    if (v23)
    {
      unint64_t v24 = 0;
      do
      {
        int v25 = [v7 images];
        id v26 = [v25 objectAtIndex:v24];
        CGImageDestinationAddImage(v18, (CGImageRef)[v26 CGImage], v15);

        ++v24;
        uint64_t v27 = [v7 images];
        unint64_t v28 = [v27 count];
      }
      while (v24 < v28);
    }
    BOOL v29 = CGImageDestinationFinalize(v18);
    CFRelease(v18);
    if (v29)
    {
      id v30 = [MEMORY[0x263EFF8F8] dataWithData:v16];

      double v31 = 0;
    }
    else
    {
      uint64_t v35 = *MEMORY[0x263F08320];
      double v32 = [MEMORY[0x263F086E0] mainBundle];
      size_t v33 = [v32 localizedStringForKey:@"Could not finalize image destination" value:&stru_26C71CE08 table:0];
      unint64_t v36 = v33;
      double v31 = [NSDictionary dictionaryWithObjects:&v36 forKeys:&v35 count:1];

      id v30 = 0;
      if (a3) {
        *a3 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"WFAnimatedGIFTranscoderErrorDomain" code:-1 userInfo:v31];
      }
    }
  }
  else
  {
    id v30 = 0;
  }

  return v30;
}

uint64_t EscapeMapCompare(unsigned __int16 *a1, uint64_t a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *(unsigned __int16 *)(a2 + 8);
  BOOL v4 = v2 > v3;
  if (v2 >= v3) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = -1;
  }
  if (v4) {
    return 1;
  }
  else {
    return v5;
  }
}

id __WFGetREMReminderEntry_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v2 = a2;
  unsigned int v3 = WFGetWorkflowReminderStore();
  BOOL v4 = [v2 wfObjectOfClass:objc_opt_class() forKey:@"link.contentkit.remreminder"];
  unsigned int v5 = [v4 wfObjectOfClass:objc_opt_class() forKey:@"objectID"];
  uint64_t v6 = [NSURL URLWithString:v5];
  id v14 = 0;
  CFDictionaryRef v15 = &v14;
  uint64_t v16 = 0x2050000000;
  id v7 = (id)getREMObjectIDClass_softClass;
  uint64_t v17 = getREMObjectIDClass_softClass;
  if (!getREMObjectIDClass_softClass)
  {
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = __getREMObjectIDClass_block_invoke;
    uint64_t v19 = &unk_26428AC60;
    id v20 = &v14;
    __getREMObjectIDClass_block_invoke((uint64_t)buf);
    id v7 = v15[3];
  }
  id v8 = v7;
  _Block_object_dispose(&v14, 8);
  uint64_t v9 = objc_msgSend(v8, "objectIDWithURL:", v6, v14);
  id v14 = 0;
  size_t v10 = [v3 fetchReminderWithObjectID:v9 error:&v14];
  id v11 = v14;
  if (!v10)
  {
    uint64_t v12 = getWFContentGraphLogObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "WFGetREMReminderFromSerializedRepresentation";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v11;
      _os_log_impl(&dword_216505000, v12, OS_LOG_TYPE_ERROR, "%s Failed to fetch reminder with error %@", buf, 0x16u);
    }
  }
  return v10;
}

void sub_21653C4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void __getREMObjectIDClass_block_invoke(uint64_t a1)
{
  ReminderKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMObjectID");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMObjectIDClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    unsigned int v3 = [NSString stringWithUTF8String:"Class getREMObjectIDClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSerializableContentProvider.m", 27, @"Unable to find class %s", "REMObjectID");

    __break(1u);
  }
}

void ReminderKitLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!ReminderKitLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __ReminderKitLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264286538;
    uint64_t v5 = 0;
    ReminderKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ReminderKitLibraryCore_frameworkLibrary)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *ReminderKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFSerializableContentProvider.m", 25, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __ReminderKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ReminderKitLibraryCore_frameworkLibrary = result;
  return result;
}

id __WFGetREMReminderEntry_block_invoke(uint64_t a1, void *a2)
{
  v17[1] = *MEMORY[0x263EF8340];
  id v2 = a2;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2050000000;
  unsigned int v3 = (__CFString *)getREMReminderClass_softClass;
  uint64_t v15 = getREMReminderClass_softClass;
  if (!getREMReminderClass_softClass)
  {
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = __getREMReminderClass_block_invoke;
    v11[3] = &unk_26428AC60;
    v11[4] = &v12;
    __getREMReminderClass_block_invoke((uint64_t)v11);
    unsigned int v3 = v13[3];
  }
  long long v4 = v3;
  _Block_object_dispose(&v12, 8);
  if (objc_opt_isKindOfClass())
  {
    uint64_t v12 = @"link.contentkit.remreminder";
    uint64_t v16 = @"objectID";
    uint64_t v5 = [v2 objectID];
    uint64_t v6 = [v5 urlRepresentation];
    id v7 = [v6 absoluteString];
    v17[0] = v7;
    id v8 = [NSDictionary dictionaryWithObjects:v17 forKeys:&v16 count:1];
    v11[0] = v8;
    uint64_t v9 = [NSDictionary dictionaryWithObjects:v11 forKeys:&v12 count:1];
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_21653C960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getREMReminderClass_block_invoke(uint64_t a1)
{
  ReminderKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMReminder");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMReminderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    unsigned int v3 = [NSString stringWithUTF8String:"Class getREMReminderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSerializableContentProvider.m", 26, @"Unable to find class %s", "REMReminder");

    __break(1u);
  }
}

id __WFGetEKEventEntry_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v2 = a2;
  unsigned int v3 = WFGetWorkflowEventStore();
  long long v4 = [v2 wfObjectOfClass:objc_opt_class() forKey:@"link.contentkit.ekcalendaritem"];
  uint64_t v5 = [v4 wfObjectOfClass:objc_opt_class() forKey:@"startDate"];
  [v5 doubleValue];
  double v7 = v6;

  id v8 = [v4 wfObjectOfClass:objc_opt_class() forKey:@"endDate"];
  [v8 doubleValue];
  double v10 = v9;

  id v11 = [MEMORY[0x263EFF910] dateWithTimeIntervalSince1970:v7];
  uint64_t v12 = [MEMORY[0x263EFF910] dateWithTimeIntervalSince1970:v10];
  uint64_t v13 = [v4 wfObjectOfClass:objc_opt_class() forKey:@"calendarItemIdentifier"];
  uint64_t v14 = [v4 wfObjectOfClass:objc_opt_class() forKey:@"calendarItemExternalIdentifier"];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  double v31 = (void *)v12;
  uint64_t v15 = [v3 predicateForEventsWithStartDate:v11 endDate:v12 calendars:0];
  id value = v3;
  uint64_t v16 = [v3 eventsMatchingPredicate:v15];

  uint64_t v17 = [v16 countByEnumeratingWithState:&v33 objects:v37 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v34;
    BOOL v29 = v4;
    id v30 = v2;
    unint64_t v28 = v11;
    while (2)
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v34 != v19) {
          objc_enumerationMutation(v16);
        }
        uint64_t v21 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        double v22 = [v21 calendarItemIdentifier];
        if ([v22 isEqualToString:v13])
        {

LABEL_12:
          id v26 = value;
          objc_setAssociatedObject(v21, &WFDeserializingEventStoreKey, value, (void *)1);
          id v25 = v21;

          long long v4 = v29;
          id v2 = v30;
          id v11 = v28;
          goto LABEL_13;
        }
        uint64_t v23 = [v21 calendarItemExternalIdentifier];
        char v24 = [v23 isEqualToString:v14];

        if (v24) {
          goto LABEL_12;
        }
      }
      uint64_t v18 = [v16 countByEnumeratingWithState:&v33 objects:v37 count:16];
      long long v4 = v29;
      id v2 = v30;
      id v11 = v28;
      if (v18) {
        continue;
      }
      break;
    }
  }

  WFGetEKCalendarItemFromSerializedRepresentation(v2);
  id v25 = (id)objc_claimAutoreleasedReturnValue();
  id v26 = value;
LABEL_13:

  return v25;
}

id WFGetEKCalendarItemFromSerializedRepresentation(void *a1)
{
  id v1 = a1;
  id v2 = WFGetWorkflowEventStore();
  unsigned int v3 = [v1 wfObjectOfClass:objc_opt_class() forKey:@"link.contentkit.ekcalendaritem"];

  long long v4 = [v3 wfObjectOfClass:objc_opt_class() forKey:@"calendarItemIdentifier"];
  uint64_t v5 = [v2 calendarItemWithIdentifier:v4];
  double v6 = v5;
  if (v5)
  {
    objc_setAssociatedObject(v5, &WFDeserializingEventStoreKey, v2, (void *)1);
    id v7 = v6;
  }
  else
  {
    id v8 = [v3 wfObjectOfClass:objc_opt_class() forKey:@"calendarItemExternalIdentifier"];
    double v9 = [v2 calendarItemsWithExternalIdentifier:v8];
    id v7 = [v9 firstObject];

    if (v7) {
      objc_setAssociatedObject(v7, &WFDeserializingEventStoreKey, v2, (void *)1);
    }
  }
  return v7;
}

id __WFGetEKEventEntry_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  getEKCalendarItemClass();
  if (objc_opt_isKindOfClass())
  {
    id v3 = v2;
    long long v4 = WFGetSerializedRepresentationForEKCalendarItem(v3);
    uint64_t v5 = (void *)[v4 mutableCopy];

    double v6 = [v5 objectForKeyedSubscript:@"link.contentkit.ekcalendaritem"];
    id v7 = (void *)[v6 mutableCopy];

    id v8 = NSNumber;
    double v9 = [v3 startDate];
    [v9 timeIntervalSince1970];
    double v10 = objc_msgSend(v8, "numberWithDouble:");
    [v7 setObject:v10 forKey:@"startDate"];

    id v11 = NSNumber;
    uint64_t v12 = [v3 endDate];

    [v12 timeIntervalSince1970];
    uint64_t v13 = objc_msgSend(v11, "numberWithDouble:");
    [v7 setObject:v13 forKey:@"endDate"];

    [v5 setObject:v7 forKeyedSubscript:@"link.contentkit.ekcalendaritem"];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

id getEKCalendarItemClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getEKCalendarItemClass_softClass;
  uint64_t v7 = getEKCalendarItemClass_softClass;
  if (!getEKCalendarItemClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getEKCalendarItemClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getEKCalendarItemClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21653D100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id WFGetSerializedRepresentationForEKCalendarItem(void *a1)
{
  v11[3] = *MEMORY[0x263EF8340];
  v10[0] = @"calendarItemIdentifier";
  id v1 = a1;
  id v2 = [v1 calendarItemIdentifier];
  v11[0] = v2;
  v10[1] = @"calendarItemExternalIdentifier";
  id v3 = [v1 calendarItemExternalIdentifier];
  v11[1] = v3;
  v10[2] = @"title";
  uint64_t v4 = [v1 title];

  v11[2] = v4;
  uint64_t v5 = [NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:3];

  id v8 = @"link.contentkit.ekcalendaritem";
  double v9 = v5;
  uint64_t v6 = [NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];

  return v6;
}

Class __getEKCalendarItemClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!EventKitLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __EventKitLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264286520;
    uint64_t v8 = 0;
    EventKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!EventKitLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *EventKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSerializableContentProvider.m", 34, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("EKCalendarItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getEKCalendarItemClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSerializableContentProvider.m", 35, @"Unable to find class %s", "EKCalendarItem");

LABEL_10:
    __break(1u);
  }
  getEKCalendarItemClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __EventKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  EventKitLibraryCore_frameworkLibrary = result;
  return result;
}

id __WFGetEKCalendarItemEntry_block_invoke_2(uint64_t a1, void *a2)
{
  return WFGetEKCalendarItemFromSerializedRepresentation(a2);
}

id __WFGetEKCalendarItemEntry_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  getEKCalendarItemClass();
  if (objc_opt_isKindOfClass())
  {
    id v3 = WFGetSerializedRepresentationForEKCalendarItem(v2);
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

id __WFGetMPMediaItemEntry_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 wfObjectOfClass:objc_opt_class() forKey:@"link.contentkit.archivedmpmediaitem"];

  if ([v3 length])
  {
    id v6 = 0;
    uint64_t v4 = [MEMORY[0x263F08928] unarchivedObjectOfClass:getMPMediaItemClass() fromData:v3 error:&v6];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id getMPMediaItemClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMPMediaItemClass_softClass;
  uint64_t v7 = getMPMediaItemClass_softClass;
  if (!getMPMediaItemClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMPMediaItemClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getMPMediaItemClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21653D6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMPMediaItemClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MediaPlayerLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264286508;
    uint64_t v8 = 0;
    MediaPlayerLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!MediaPlayerLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSerializableContentProvider.m", 38, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MPMediaItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getMPMediaItemClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSerializableContentProvider.m", 39, @"Unable to find class %s", "MPMediaItem");

LABEL_10:
    __break(1u);
  }
  getMPMediaItemClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaPlayerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary = result;
  return result;
}

id __WFGetMPMediaItemEntry_block_invoke(uint64_t a1, void *a2)
{
  v9[1] = *MEMORY[0x263EF8340];
  id v2 = a2;
  getMPMediaItemClass();
  if (objc_opt_isKindOfClass())
  {
    id v7 = 0;
    id v3 = [MEMORY[0x263F08910] archivedDataWithRootObject:v2 requiringSecureCoding:1 error:&v7];
    id v4 = v7;
    if ([v3 length])
    {
      uint64_t v8 = @"link.contentkit.archivedmpmediaitem";
      v9[0] = v3;
      uint64_t v5 = [NSDictionary dictionaryWithObjects:v9 forKeys:&v8 count:1];
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

id __WFGetCLLocationEntry_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 wfObjectOfClass:objc_opt_class() forKey:@"link.contentkit.location"];

  if (v3)
  {
    id v4 = WFCLLocationFromSerializedLocation(v3);
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id __WFGetCLLocationEntry_block_invoke(uint64_t a1, void *a2)
{
  v14[1] = *MEMORY[0x263EF8340];
  id v2 = a2;
  uint64_t v9 = 0;
  double v10 = &v9;
  uint64_t v11 = 0x2050000000;
  id v3 = (void *)getCLLocationClass_softClass_3974;
  uint64_t v12 = getCLLocationClass_softClass_3974;
  if (!getCLLocationClass_softClass_3974)
  {
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3221225472;
    v8[2] = __getCLLocationClass_block_invoke_3975;
    v8[3] = &unk_26428AC60;
    void v8[4] = &v9;
    __getCLLocationClass_block_invoke_3975((uint64_t)v8);
    id v3 = (void *)v10[3];
  }
  id v4 = v3;
  _Block_object_dispose(&v9, 8);
  if (objc_opt_isKindOfClass())
  {
    uint64_t v13 = @"link.contentkit.location";
    uint64_t v5 = WFSerializedLocationFromCLLocation(v2);
    v14[0] = v5;
    uint64_t v6 = [NSDictionary dictionaryWithObjects:v14 forKeys:&v13 count:1];
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_21653DC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCLLocationClass_block_invoke_3975(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_3976)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreLocationLibraryCore_block_invoke_3977;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_2642864F0;
    uint64_t v8 = 0;
    CoreLocationLibraryCore_frameworkLibrary_3976 = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary_3976)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSerializableContentProvider.m", 41, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CLLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSerializableContentProvider.m", 42, @"Unable to find class %s", "CLLocation");

LABEL_10:
    __break(1u);
  }
  getCLLocationClass_softClass_3974 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke_3977()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_3976 = result;
  return result;
}

id __WFGetMKMapItemEntry_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 wfObjectOfClass:objc_opt_class() forKey:@"link.contentkit.mkmapitem"];
  id v4 = [v3 wfObjectOfClass:objc_opt_class() forKey:@"isCurrentLocation"];
  int v5 = [v4 BOOLValue];

  uint64_t v6 = [v3 wfObjectOfClass:objc_opt_class() forKey:@"placemark"];
  long long v7 = (void *)v6;
  if (v5)
  {
    uint64_t v8 = [getMKMapItemClass() mapItemForCurrentLocation];
  }
  else if (v6)
  {
    id v9 = objc_alloc((Class)getMKMapItemClass());
    double v10 = (void *)MEMORY[0x263F08928];
    uint64_t v21 = 0;
    double v22 = &v21;
    uint64_t v23 = 0x2050000000;
    uint64_t v11 = (void *)getMKPlacemarkClass_softClass;
    uint64_t v24 = getMKPlacemarkClass_softClass;
    if (!getMKPlacemarkClass_softClass)
    {
      v20[0] = MEMORY[0x263EF8330];
      v20[1] = 3221225472;
      v20[2] = __getMKPlacemarkClass_block_invoke;
      v20[3] = &unk_26428AC60;
      v20[4] = &v21;
      __getMKPlacemarkClass_block_invoke((uint64_t)v20);
      uint64_t v11 = (void *)v22[3];
    }
    id v12 = v11;
    _Block_object_dispose(&v21, 8);
    uint64_t v13 = [v10 unarchivedObjectOfClass:v12 fromData:v7 error:0];
    uint64_t v8 = (void *)[v9 initWithPlacemark:v13];
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v14 = [v3 wfObjectOfClass:objc_opt_class() forKey:@"name"];
  [v8 setName:v14];

  uint64_t v15 = [v3 wfObjectOfClass:objc_opt_class() forKey:@"phoneNumber"];
  [v8 setPhoneNumber:v15];

  uint64_t v16 = NSURL;
  uint64_t v17 = [v3 wfObjectOfClass:objc_opt_class() forKey:@"url"];
  uint64_t v18 = [v16 URLWithString:v17];
  [v8 setUrl:v18];

  return v8;
}

void sub_21653E138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getMKMapItemClass()
{
  uint64_t v4 = 0;
  int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMKMapItemClass_softClass_4002;
  uint64_t v7 = getMKMapItemClass_softClass_4002;
  if (!getMKMapItemClass_softClass_4002)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMKMapItemClass_block_invoke_4003;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getMKMapItemClass_block_invoke_4003((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21653E21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKPlacemarkClass_block_invoke(uint64_t a1)
{
  MapKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKPlacemark");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKPlacemarkClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKPlacemarkClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSerializableContentProvider.m", 32, @"Unable to find class %s", "MKPlacemark");

    __break(1u);
  }
}

void MapKitLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary_3997)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __MapKitLibraryCore_block_invoke_3998;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_2642864D8;
    uint64_t v5 = 0;
    MapKitLibraryCore_frameworkLibrary_3997 = _sl_dlopen();
  }
  if (!MapKitLibraryCore_frameworkLibrary_3997)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *MapKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFSerializableContentProvider.m", 30, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __MapKitLibraryCore_block_invoke_3998()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary_3997 = result;
  return result;
}

void __getMKMapItemClass_block_invoke_4003(uint64_t a1)
{
  MapKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKMapItemClass_softClass_4002 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKMapItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFSerializableContentProvider.m", 31, @"Unable to find class %s", "MKMapItem");

    __break(1u);
  }
}

id __WFGetMKMapItemEntry_block_invoke(uint64_t a1, void *a2)
{
  v19[1] = *MEMORY[0x263EF8340];
  id v2 = a2;
  getMKMapItemClass();
  if (objc_opt_isKindOfClass())
  {
    id v3 = v2;
    long long v4 = objc_opt_new();
    uint64_t v5 = [v3 placemark];

    if (v5)
    {
      uint64_t v6 = (void *)MEMORY[0x263F08910];
      uint64_t v7 = [v3 placemark];
      uint64_t v8 = [v6 archivedDataWithRootObject:v7 requiringSecureCoding:1 error:0];
      [v4 setValue:v8 forKey:@"placemark"];
    }
    else if ([v3 isCurrentLocation])
    {
      [v4 setObject:MEMORY[0x263EFFA88] forKey:@"isCurrentLocation"];
    }
    double v10 = [v3 name];

    if (v10)
    {
      uint64_t v11 = [v3 name];
      [v4 setObject:v11 forKey:@"name"];
    }
    id v12 = [v3 phoneNumber];

    if (v12)
    {
      uint64_t v13 = [v3 phoneNumber];
      [v4 setObject:v13 forKey:@"phoneNumber"];
    }
    uint64_t v14 = [v3 url];

    if (v14)
    {
      uint64_t v15 = [v3 url];
      uint64_t v16 = [v15 absoluteString];
      [v4 setObject:v16 forKey:@"url"];
    }
    uint64_t v18 = @"link.contentkit.mkmapitem";
    v19[0] = v4;
    id v9 = [NSDictionary dictionaryWithObjects:v19 forKeys:&v18 count:1];
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_21653FF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4179(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4180(uint64_t a1)
{
}

void sub_216540218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLGeocoderClass_block_invoke(uint64_t a1)
{
  CoreLocationLibrary_4183();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLGeocoder");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLGeocoderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLGeocoderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"DCMapsLink+CLGeocoding.m", 17, @"Unable to find class %s", "CLGeocoder");

    __break(1u);
  }
}

void *CoreLocationLibrary_4183()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_4191)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreLocationLibraryCore_block_invoke_4192;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264286608;
    uint64_t v6 = 0;
    CoreLocationLibraryCore_frameworkLibrary_4191 = _sl_dlopen();
  }
  uint64_t v0 = (void *)CoreLocationLibraryCore_frameworkLibrary_4191;
  if (!CoreLocationLibraryCore_frameworkLibrary_4191)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"DCMapsLink+CLGeocoding.m", 14, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CoreLocationLibraryCore_block_invoke_4192()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_4191 = result;
  return result;
}

void sub_2165407A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCLLocationCoordinate2DIsValidSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreLocationLibrary_4183();
  uint64_t result = dlsym(v2, "CLLocationCoordinate2DIsValid");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCLLocationCoordinate2DIsValidSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id getCLLocationClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCLLocationClass_softClass_4207;
  uint64_t v7 = getCLLocationClass_softClass_4207;
  if (!getCLLocationClass_softClass_4207)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCLLocationClass_block_invoke_4208;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getCLLocationClass_block_invoke_4208((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165408DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLCircularRegionClass_block_invoke_4201(uint64_t a1)
{
  CoreLocationLibrary_4183();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLCircularRegion");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLCircularRegionClass_softClass_4200 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLCircularRegionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"DCMapsLink+CLGeocoding.m", 16, @"Unable to find class %s", "CLCircularRegion");

    __break(1u);
  }
}

void __getCLLocationClass_block_invoke_4208(uint64_t a1)
{
  CoreLocationLibrary_4183();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLLocation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLLocationClass_softClass_4207 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"DCMapsLink+CLGeocoding.m", 15, @"Unable to find class %s", "CLLocation");

    __break(1u);
  }
}

void sub_216541A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCNLabelHomeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary();
  uint64_t result = dlsym(v2, "CNLabelHome");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelHomeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *ContactsLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __ContactsLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264286640;
    uint64_t v6 = 0;
    ContactsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)ContactsLibraryCore_frameworkLibrary;
  if (!ContactsLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *ContactsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContentProperty+CNLabeledValue.m", 12, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getCNLabelWorkSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary();
  uint64_t result = dlsym(v2, "CNLabelWork");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelWorkSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelSchoolSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary();
  uint64_t result = dlsym(v2, "CNLabelSchool");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelSchoolSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelPhoneNumberiPhoneSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberiPhone");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberiPhoneSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelPhoneNumberMobileSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberMobile");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberMobileSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelPhoneNumberMainSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberMain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberMainSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelPhoneNumberHomeFaxSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberHomeFax");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelPhoneNumberWorkFaxSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberWorkFax");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelPhoneNumberOtherFaxSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberOtherFax");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberOtherFaxSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelPhoneNumberPagerSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberPager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberPagerSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelEmailiCloudSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary();
  uint64_t result = dlsym(v2, "CNLabelEmailiCloud");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelEmailiCloudSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelOtherSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary();
  uint64_t result = dlsym(v2, "CNLabelOther");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelOtherSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ContactsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_216543764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNLabeledValueClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary_4420)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __ContactsLibraryCore_block_invoke_4421;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264286730;
    uint64_t v8 = 0;
    ContactsLibraryCore_frameworkLibrary_4420 = _sl_dlopen();
  }
  if (!ContactsLibraryCore_frameworkLibrary_4420)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *ContactsLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFContactLabeledValue.m", 13, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CNLabeledValue");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getCNLabeledValueClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFContactLabeledValue.m", 14, @"Unable to find class %s", "CNLabeledValue");

LABEL_10:
    __break(1u);
  }
  getCNLabeledValueClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ContactsLibraryCore_block_invoke_4421()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary_4420 = result;
  return result;
}

void __getAVAssetReaderClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_4612();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetReader");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetReaderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAssetReaderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAudioInterchangeFormatEncoder.m", 20, @"Unable to find class %s", "AVAssetReader");

    __break(1u);
  }
}

void getAVMediaTypeAudio()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getAVMediaTypeAudioSymbolLoc_ptr;
  uint64_t v9 = getAVMediaTypeAudioSymbolLoc_ptr;
  if (!getAVMediaTypeAudioSymbolLoc_ptr)
  {
    id v1 = AVFoundationLibrary_4612();
    v7[3] = (uint64_t)dlsym(v1, "AVMediaTypeAudio");
    getAVMediaTypeAudioSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"AVMediaType getAVMediaTypeAudio(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAudioInterchangeFormatEncoder.m", 24, @"%s", dlerror());

    __break(1u);
  }
}

void sub_216544004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVFormatIDKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_4612();
  uint64_t result = dlsym(v2, "AVFormatIDKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVFormatIDKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *AVFoundationLibrary_4612()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_4655)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_4656;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_2642867A8;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_4655 = _sl_dlopen();
  }
  uint64_t v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_4655;
  if (!AVFoundationLibraryCore_frameworkLibrary_4655)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAudioInterchangeFormatEncoder.m", 19, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getAVLinearPCMIsFloatKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_4612();
  uint64_t result = dlsym(v2, "AVLinearPCMIsFloatKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVLinearPCMIsFloatKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVLinearPCMBitDepthKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_4612();
  uint64_t result = dlsym(v2, "AVLinearPCMBitDepthKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVLinearPCMBitDepthKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVLinearPCMIsNonInterleavedSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_4612();
  uint64_t result = dlsym(v2, "AVLinearPCMIsNonInterleaved");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVLinearPCMIsNonInterleavedSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVLinearPCMIsBigEndianKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_4612();
  uint64_t result = dlsym(v2, "AVLinearPCMIsBigEndianKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVLinearPCMIsBigEndianKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVSampleRateKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_4612();
  uint64_t result = dlsym(v2, "AVSampleRateKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVSampleRateKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVNumberOfChannelsKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_4612();
  uint64_t result = dlsym(v2, "AVNumberOfChannelsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVNumberOfChannelsKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVChannelLayoutKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_4612();
  uint64_t result = dlsym(v2, "AVChannelLayoutKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVChannelLayoutKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getAVAssetReaderTrackOutputClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_4612();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetReaderTrackOutput");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetReaderTrackOutputClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAssetReaderTrackOutputClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAudioInterchangeFormatEncoder.m", 22, @"Unable to find class %s", "AVAssetReaderTrackOutput");

    __break(1u);
  }
}

void __getAVAssetWriterClass_block_invoke_4625(uint64_t a1)
{
  AVFoundationLibrary_4612();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetWriter");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetWriterClass_softClass_4624 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAssetWriterClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAudioInterchangeFormatEncoder.m", 21, @"Unable to find class %s", "AVAssetWriter");

    __break(1u);
  }
}

void *__getAVFileTypeAIFFSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = AVFoundationLibrary_4612();
  uint64_t result = dlsym(v2, "AVFileTypeAIFF");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVFileTypeAIFFSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getAVAssetWriterInputClass_block_invoke_4628(uint64_t a1)
{
  AVFoundationLibrary_4612();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetWriterInput");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetWriterInputClass_softClass_4627 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAssetWriterInputClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAudioInterchangeFormatEncoder.m", 23, @"Unable to find class %s", "AVAssetWriterInput");

    __break(1u);
  }
}

void *__getCMTimeMakeSymbolLoc_block_invoke_4630(uint64_t a1)
{
  id v2 = CoreMediaLibrary_4631();
  uint64_t result = dlsym(v2, "CMTimeMake");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMTimeMakeSymbolLoc_ptr_4629 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CoreMediaLibrary_4631()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreMediaLibraryCore_frameworkLibrary_4636)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreMediaLibraryCore_block_invoke_4637;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_2642867C0;
    uint64_t v6 = 0;
    CoreMediaLibraryCore_frameworkLibrary_4636 = _sl_dlopen();
  }
  uint64_t v0 = (void *)CoreMediaLibraryCore_frameworkLibrary_4636;
  if (!CoreMediaLibraryCore_frameworkLibrary_4636)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreMediaLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAudioInterchangeFormatEncoder.m", 15, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void __WFEncodeAssetToAIFF_block_invoke(id *a1)
{
  if ([a1[4] isReadyForMoreMediaData])
  {
    do
    {
      id v2 = (const void *)[a1[5] copyNextSampleBuffer];
      id v3 = a1[4];
      if (v2)
      {
        [v3 appendSampleBuffer:v2];
        uint64_t v22 = 0;
        uint64_t v23 = &v22;
        uint64_t v24 = 0x2020000000;
        uint64_t v4 = (void (*)(const void *))getCMSampleBufferInvalidateSymbolLoc_ptr;
        id v25 = getCMSampleBufferInvalidateSymbolLoc_ptr;
        if (!getCMSampleBufferInvalidateSymbolLoc_ptr)
        {
          uint64_t v17 = MEMORY[0x263EF8330];
          uint64_t v18 = 3221225472;
          uint64_t v19 = __getCMSampleBufferInvalidateSymbolLoc_block_invoke;
          id v20 = &unk_26428AC60;
          uint64_t v21 = &v22;
          long long v5 = CoreMediaLibrary_4631();
          uint64_t v6 = dlsym(v5, "CMSampleBufferInvalidate");
          *(void *)(v21[1] + 24) = v6;
          getCMSampleBufferInvalidateSymbolLoc_ptr = *(_UNKNOWN **)(v21[1] + 24);
          uint64_t v4 = (void (*)(const void *))v23[3];
        }
        _Block_object_dispose(&v22, 8);
        if (!v4)
        {
          uint64_t v8 = [MEMORY[0x263F08690] currentHandler];
          uint64_t v9 = [NSString stringWithUTF8String:"OSStatus soft_CMSampleBufferInvalidate(CMSampleBufferRef _Nonnull)"];
          objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, @"WFAudioInterchangeFormatEncoder.m", 17, @"%s", dlerror());

          __break(1u);
          return;
        }
        v4(v2);
        CFRelease(v2);
      }
      else
      {
        [v3 markAsFinished];
        id v7 = a1[6];
        v10[0] = MEMORY[0x263EF8330];
        v10[1] = 3221225472;
        v10[2] = __WFEncodeAssetToAIFF_block_invoke_2;
        void v10[3] = &unk_264286760;
        id v16 = a1[11];
        id v11 = a1[7];
        id v12 = a1[8];
        id v13 = a1[9];
        id v14 = a1[6];
        id v15 = a1[10];
        [v7 finishWritingWithCompletionHandler:v10];
      }
    }
    while (([a1[4] isReadyForMoreMediaData] & 1) != 0);
  }
}

void sub_216544AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void *__getCMSampleBufferInvalidateSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreMediaLibrary_4631();
  uint64_t result = dlsym(v2, "CMSampleBufferInvalidate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMSampleBufferInvalidateSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __WFEncodeAssetToAIFF_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  id v6 = +[WFFileRepresentation fileWithURL:*(void *)(a1 + 32) options:1 ofType:*(void *)(a1 + 40)];
  id v3 = [*(id *)(a1 + 48) error];
  if (v3)
  {
    (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v6, v3);
  }
  else
  {
    uint64_t v4 = [*(id *)(a1 + 56) error];
    long long v5 = v4;
    if (!v4) {
      long long v5 = *(void **)(a1 + 64);
    }
    (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v6, v5);
  }
}

uint64_t __CoreMediaLibraryCore_block_invoke_4637()
{
  uint64_t result = _sl_dlopen();
  CoreMediaLibraryCore_frameworkLibrary_4636 = result;
  return result;
}

uint64_t __AVFoundationLibraryCore_block_invoke_4656()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_4655 = result;
  return result;
}

void *__getAVMediaTypeAudioSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = AVFoundationLibrary_4612();
  uint64_t result = dlsym(v2, "AVMediaTypeAudio");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMediaTypeAudioSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_216545ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKPlacemarkClass_block_invoke_4688(uint64_t a1)
{
  MapKitLibrary_4689();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKPlacemark");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKPlacemarkClass_softClass_4687 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKPlacemarkClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCalendarEventContentItem.m", 40, @"Unable to find class %s", "MKPlacemark");

    __break(1u);
  }
}

void MapKitLibrary_4689()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary_4692)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __MapKitLibraryCore_block_invoke_4693;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264286A00;
    uint64_t v5 = 0;
    MapKitLibraryCore_frameworkLibrary_4692 = _sl_dlopen();
  }
  if (!MapKitLibraryCore_frameworkLibrary_4692)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *MapKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFCalendarEventContentItem.m", 35, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __MapKitLibraryCore_block_invoke_4693()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary_4692 = result;
  return result;
}

id getMKMapItemClass_4696()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMKMapItemClass_softClass_4697;
  uint64_t v7 = getMKMapItemClass_softClass_4697;
  if (!getMKMapItemClass_softClass_4697)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMKMapItemClass_block_invoke_4698;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getMKMapItemClass_block_invoke_4698((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_216545F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKMapItemClass_block_invoke_4698(uint64_t a1)
{
  MapKitLibrary_4689();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKMapItemClass_softClass_4697 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKMapItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCalendarEventContentItem.m", 39, @"Unable to find class %s", "MKMapItem");

    __break(1u);
  }
}

void sub_2165482DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEKAttendeeClass_block_invoke(uint64_t a1)
{
  EventKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EKAttendee");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEKAttendeeClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getEKAttendeeClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCalendarEventContentItem.m", 38, @"Unable to find class %s", "EKAttendee");

    __break(1u);
  }
}

void EventKitLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!EventKitLibraryCore_frameworkLibrary_4776)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __EventKitLibraryCore_block_invoke_4777;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_2642869E8;
    uint64_t v5 = 0;
    EventKitLibraryCore_frameworkLibrary_4776 = _sl_dlopen();
  }
  if (!EventKitLibraryCore_frameworkLibrary_4776)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *EventKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFCalendarEventContentItem.m", 34, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __EventKitLibraryCore_block_invoke_4777()
{
  uint64_t result = _sl_dlopen();
  EventKitLibraryCore_frameworkLibrary_4776 = result;
  return result;
}

id getEKEventClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getEKEventClass_softClass;
  uint64_t v7 = getEKEventClass_softClass;
  if (!getEKEventClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getEKEventClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getEKEventClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_216548FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEKEventClass_block_invoke(uint64_t a1)
{
  EventKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EKEvent");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEKEventClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getEKEventClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCalendarEventContentItem.m", 37, @"Unable to find class %s", "EKEvent");

    __break(1u);
  }
}

void CNContactPropertyKeyFromWFContactPropertyID(int a1)
{
  id v2 = 0;
  switch(a1)
  {
    case 0:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactGivenNameKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactGivenNameKeySymbolLoc_ptr;
      if (!getCNContactGivenNameKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactGivenNameKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        uint64_t v4 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v4, "CNContactGivenNameKey");
        getCNContactGivenNameKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactGivenNameKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 16, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 1:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactFamilyNameKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactFamilyNameKeySymbolLoc_ptr;
      if (!getCNContactFamilyNameKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactFamilyNameKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        uint64_t v7 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v7, "CNContactFamilyNameKey");
        getCNContactFamilyNameKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactFamilyNameKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 17, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 3:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactPhoneNumbersKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactPhoneNumbersKeySymbolLoc_ptr;
      if (!getCNContactPhoneNumbersKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactPhoneNumbersKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        uint64_t v8 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v8, "CNContactPhoneNumbersKey");
        getCNContactPhoneNumbersKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactPhoneNumbersKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 18, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 4:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactEmailAddressesKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactEmailAddressesKeySymbolLoc_ptr;
      if (!getCNContactEmailAddressesKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactEmailAddressesKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        uint64_t v9 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v9, "CNContactEmailAddressesKey");
        getCNContactEmailAddressesKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactEmailAddressesKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 19, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 5:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactPostalAddressesKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactPostalAddressesKeySymbolLoc_ptr;
      if (!getCNContactPostalAddressesKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactPostalAddressesKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        double v10 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v10, "CNContactPostalAddressesKey");
        getCNContactPostalAddressesKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactPostalAddressesKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 20, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 6:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactMiddleNameKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactMiddleNameKeySymbolLoc_ptr;
      if (!getCNContactMiddleNameKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactMiddleNameKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        id v11 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v11, "CNContactMiddleNameKey");
        getCNContactMiddleNameKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactMiddleNameKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 21, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 7:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactPhoneticGivenNameKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactPhoneticGivenNameKeySymbolLoc_ptr;
      if (!getCNContactPhoneticGivenNameKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactPhoneticGivenNameKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        id v12 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v12, "CNContactPhoneticGivenNameKey");
        getCNContactPhoneticGivenNameKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactPhoneticGivenNameKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 22, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 8:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactPhoneticMiddleNameKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactPhoneticMiddleNameKeySymbolLoc_ptr;
      if (!getCNContactPhoneticMiddleNameKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactPhoneticMiddleNameKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        id v13 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v13, "CNContactPhoneticMiddleNameKey");
        getCNContactPhoneticMiddleNameKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactPhoneticMiddleNameKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 23, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 9:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactPhoneticFamilyNameKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactPhoneticFamilyNameKeySymbolLoc_ptr;
      if (!getCNContactPhoneticFamilyNameKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactPhoneticFamilyNameKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        id v14 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v14, "CNContactPhoneticFamilyNameKey");
        getCNContactPhoneticFamilyNameKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactPhoneticFamilyNameKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 24, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 10:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactOrganizationNameKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactOrganizationNameKeySymbolLoc_ptr;
      if (!getCNContactOrganizationNameKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactOrganizationNameKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        id v15 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v15, "CNContactOrganizationNameKey");
        getCNContactOrganizationNameKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactOrganizationNameKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 25, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 11:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactDepartmentNameKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactDepartmentNameKeySymbolLoc_ptr;
      if (!getCNContactDepartmentNameKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactDepartmentNameKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        id v16 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v16, "CNContactDepartmentNameKey");
        getCNContactDepartmentNameKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactDepartmentNameKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 26, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 12:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactDatesKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactDatesKeySymbolLoc_ptr;
      if (!getCNContactDatesKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactDatesKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        uint64_t v17 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v17, "CNContactDatesKey");
        getCNContactDatesKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactDatesKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 27, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 13:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactInstantMessageAddressesKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactInstantMessageAddressesKeySymbolLoc_ptr;
      if (!getCNContactInstantMessageAddressesKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactInstantMessageAddressesKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        uint64_t v18 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v18, "CNContactInstantMessageAddressesKey");
        getCNContactInstantMessageAddressesKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactInstantMessageAddressesKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 29, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 14:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactNoteKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactNoteKeySymbolLoc_ptr;
      if (!getCNContactNoteKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactNoteKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        uint64_t v19 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v19, "CNContactNoteKey");
        getCNContactNoteKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactNoteKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 30, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 17:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactBirthdayKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactBirthdayKeySymbolLoc_ptr;
      if (!getCNContactBirthdayKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactBirthdayKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        id v20 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v20, "CNContactBirthdayKey");
        getCNContactBirthdayKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactBirthdayKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 31, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 18:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactJobTitleKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactJobTitleKeySymbolLoc_ptr;
      if (!getCNContactJobTitleKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactJobTitleKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        uint64_t v21 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v21, "CNContactJobTitleKey");
        getCNContactJobTitleKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactJobTitleKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 32, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 19:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactNicknameKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactNicknameKeySymbolLoc_ptr;
      if (!getCNContactNicknameKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactNicknameKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        uint64_t v22 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v22, "CNContactNicknameKey");
        getCNContactNicknameKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactNicknameKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 33, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 20:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactNamePrefixKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactNamePrefixKeySymbolLoc_ptr;
      if (!getCNContactNamePrefixKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactNamePrefixKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        uint64_t v23 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v23, "CNContactNamePrefixKey");
        getCNContactNamePrefixKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactNamePrefixKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 34, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 21:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactNameSuffixKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactNameSuffixKeySymbolLoc_ptr;
      if (!getCNContactNameSuffixKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactNameSuffixKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        uint64_t v24 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v24, "CNContactNameSuffixKey");
        getCNContactNameSuffixKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactNameSuffixKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 35, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 22:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactUrlAddressesKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactUrlAddressesKeySymbolLoc_ptr;
      if (!getCNContactUrlAddressesKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactUrlAddressesKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        id v25 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v25, "CNContactUrlAddressesKey");
        getCNContactUrlAddressesKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactUrlAddressesKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 38, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 26:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactCreationDateKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactCreationDateKeySymbolLoc_ptr;
      if (!getCNContactCreationDateKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactCreationDateKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        unint64_t v28 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v28, "CNContactCreationDateKey");
        getCNContactCreationDateKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactCreationDateKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 36, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 27:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactModificationDateKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactModificationDateKeySymbolLoc_ptr;
      if (!getCNContactModificationDateKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactModificationDateKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        id v26 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v26, "CNContactModificationDateKey");
        getCNContactModificationDateKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3) {
        goto LABEL_93;
      }
      uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactModificationDateKey(void)"];
      objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 37, @"%s", dlerror(), v30, v31, v32, v33);
      goto LABEL_98;
    case 46:
      uint64_t v34 = 0;
      long long v35 = &v34;
      uint64_t v36 = 0x2020000000;
      id v3 = (id *)getCNContactSocialProfilesKeySymbolLoc_ptr;
      uint64_t v37 = getCNContactSocialProfilesKeySymbolLoc_ptr;
      if (!getCNContactSocialProfilesKeySymbolLoc_ptr)
      {
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        double v32 = __getCNContactSocialProfilesKeySymbolLoc_block_invoke;
        long long v33 = &unk_26428AC60;
        uint64_t v27 = ContactsLibrary_4854();
        v35[3] = (uint64_t)dlsym(v27, "CNContactSocialProfilesKey");
        getCNContactSocialProfilesKeySymbolLoc_ptr = v35[3];
        id v3 = (id *)v35[3];
      }
      _Block_object_dispose(&v34, 8);
      if (v3)
      {
LABEL_93:
        id v2 = *v3;
LABEL_94:
        id v29 = v2;
      }
      else
      {
        uint64_t v5 = [MEMORY[0x263F08690] currentHandler];
        uint64_t v6 = [NSString stringWithUTF8String:"NSString *getCNContactSocialProfilesKey(void)"];
        objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, @"WFAddressBookTypes.m", 28, @"%s", dlerror(), v30, v31, v32, v33);
LABEL_98:

        __break(1u);
      }
      return;
    default:
      goto LABEL_94;
  }
}

void sub_21654AE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCNContactGivenNameKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactGivenNameKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactGivenNameKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *ContactsLibrary_4854()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary_4884)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __ContactsLibraryCore_block_invoke_4885;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264286A18;
    uint64_t v6 = 0;
    ContactsLibraryCore_frameworkLibrary_4884 = _sl_dlopen();
  }
  uint64_t v0 = (void *)ContactsLibraryCore_frameworkLibrary_4884;
  if (!ContactsLibraryCore_frameworkLibrary_4884)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *ContactsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAddressBookTypes.m", 15, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getCNContactFamilyNameKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactFamilyNameKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactFamilyNameKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactPhoneNumbersKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactPhoneNumbersKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactPhoneNumbersKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactEmailAddressesKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactEmailAddressesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactEmailAddressesKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactPostalAddressesKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactPostalAddressesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactPostalAddressesKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactMiddleNameKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactMiddleNameKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactMiddleNameKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactPhoneticGivenNameKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactPhoneticGivenNameKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactPhoneticGivenNameKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactPhoneticMiddleNameKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactPhoneticMiddleNameKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactPhoneticMiddleNameKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactPhoneticFamilyNameKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactPhoneticFamilyNameKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactPhoneticFamilyNameKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactOrganizationNameKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactOrganizationNameKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactOrganizationNameKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactDepartmentNameKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactDepartmentNameKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactDepartmentNameKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactDatesKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactDatesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactDatesKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactSocialProfilesKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactSocialProfilesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactSocialProfilesKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactInstantMessageAddressesKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactInstantMessageAddressesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactInstantMessageAddressesKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactNoteKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactNoteKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactNoteKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactBirthdayKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactBirthdayKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactBirthdayKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactJobTitleKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactJobTitleKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactJobTitleKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactNicknameKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactNicknameKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactNicknameKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactNamePrefixKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactNamePrefixKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactNamePrefixKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactNameSuffixKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactNameSuffixKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactNameSuffixKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactCreationDateKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactCreationDateKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactCreationDateKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactModificationDateKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactModificationDateKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactModificationDateKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactUrlAddressesKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_4854();
  uint64_t result = dlsym(v2, "CNContactUrlAddressesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactUrlAddressesKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ContactsLibraryCore_block_invoke_4885()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary_4884 = result;
  return result;
}

id WFHTTPBodyFromQueryItems(void *a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v1 = a1;
  if ([v1 count])
  {
    id v2 = objc_opt_new();
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v15 = v1;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v17;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v17 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          uint64_t v9 = [v8 name];
          double v10 = WFHTTPFormEncodedString(v9);
          id v11 = [v8 value];
          id v12 = WFHTTPFormEncodedString(v11);
          [v2 appendFormat:@"%@=%@&", v10, v12];
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }
      while (v5);
    }

    objc_msgSend(v2, "deleteCharactersInRange:", objc_msgSend(v2, "length") - 1, 1);
    id v13 = [v2 dataUsingEncoding:4];

    id v1 = v15;
  }
  else
  {
    id v13 = objc_opt_new();
  }

  return v13;
}

__CFString *WFHTTPFormEncodedString(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    id v2 = v1;
    id v3 = [MEMORY[0x263F08708] alphanumericCharacterSet];
    uint64_t v4 = (void *)[v3 mutableCopy];

    uint64_t v5 = [MEMORY[0x263F08708] whitespaceCharacterSet];
    [v4 formUnionWithCharacterSet:v5];

    [v4 addCharactersInString:@"-_.~"];
    uint64_t v6 = [v2 stringByReplacingOccurrencesOfString:@"\r\n" withString:@"\n"];

    uint64_t v7 = [v6 stringByReplacingOccurrencesOfString:@"\n" withString:@"\r\n"];

    uint64_t v8 = [v7 stringByAddingPercentEncodingWithAllowedCharacters:v4];

    uint64_t v9 = [MEMORY[0x263F08708] whitespaceCharacterSet];
    double v10 = [v8 componentsSeparatedByCharactersInSet:v9];
    id v11 = [v10 componentsJoinedByString:@"+"];
  }
  else
  {
    id v11 = &stru_26C71CE08;
  }
  return v11;
}

void WFExtractTypeIdentifiersReadableByItemClass(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v24 = a3;
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v5 = a2;
  uint64_t v6 = [a1 ownedTypes];
  uint64_t v7 = [a1 ownedPasteboardTypes];
  uint64_t v8 = [v6 orderedSetByAddingObjectsFromOrderedSet:v7];

  uint64_t v9 = objc_opt_new();
  double v10 = objc_opt_new();
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v11 = v8;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v32 objects:v37 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v33;
    id v26 = v11;
    uint64_t v27 = v10;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v33 != v14) {
          objc_enumerationMutation(v11);
        }
        long long v16 = *(void **)(*((void *)&v32 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          long long v17 = [v16 string];
          [v10 addObject:v17];
LABEL_8:

          continue;
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          long long v18 = (void *)[v16 objectClass];
          if ([v18 conformsToProtocol:&unk_26C75A768])
          {
            long long v17 = [v18 readableTypeIdentifiersForItemProvider];
            long long v28 = 0u;
            long long v29 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            uint64_t v19 = [v17 countByEnumeratingWithState:&v28 objects:v36 count:16];
            if (v19)
            {
              uint64_t v20 = v19;
              uint64_t v21 = *(void *)v29;
              do
              {
                for (uint64_t j = 0; j != v20; ++j)
                {
                  if (*(void *)v29 != v21) {
                    objc_enumerationMutation(v17);
                  }
                  uint64_t v23 = *(void *)(*((void *)&v28 + 1) + 8 * j);
                  if ((objc_msgSend(v5, "containsObject:", v23, v24) & 1) == 0) {
                    [v9 addObject:v23];
                  }
                }
                uint64_t v20 = [v17 countByEnumeratingWithState:&v28 objects:v36 count:16];
              }
              while (v20);
              id v11 = v26;
              double v10 = v27;
            }
            goto LABEL_8;
          }
        }
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v32 objects:v37 count:16];
    }
    while (v13);
  }

  if (v24) {
    *uint64_t v24 = (id)[v9 copy];
  }
  if (a4) {
    *a4 = (id)[v10 copy];
  }
}

uint64_t WFMethodReturnsObject(objc_method *a1)
{
  id v1 = method_copyReturnType(a1);
  id v2 = (void *)[[NSString alloc] initWithBytesNoCopy:v1 length:strlen(v1) encoding:4 freeWhenDone:1];
  id v3 = [NSString stringWithUTF8String:"@"];
  uint64_t v4 = [v2 isEqualToString:v3];

  return v4;
}

uint64_t WFURLIsWebPage(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v5 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"BOOL WFURLIsWebPage(NSURL * _Nonnull __strong)"];
    [v5 handleFailureInFunction:v6, @"WFUserInterfaceHost.m", 20, @"Invalid parameter not satisfying: %@", @"URL" file lineNumber description];
  }
  id v2 = [v1 scheme];
  if (([v2 isEqualToString:@"http"] & 1) != 0
    || ([v2 isEqualToString:@"https"] & 1) != 0)
  {
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = [v2 isEqualToString:@"file"];
  }

  return v3;
}

BOOL WFURLIsUniversalLink(uint64_t a1)
{
  uint64_t v4 = 0;
  id v1 = [MEMORY[0x263F01850] appLinksWithURL:a1 limit:1 error:&v4];
  BOOL v2 = [v1 count] != 0;

  return v2;
}

void sub_21654F380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNPostalAddressFormatterClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_5649();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNPostalAddressFormatter");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNPostalAddressFormatterClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    BOOL v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getCNPostalAddressFormatterClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFStreetAddress.m", 23, @"Unable to find class %s", "CNPostalAddressFormatter");

    __break(1u);
  }
}

void ContactsLibrary_5649()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary_5658)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __ContactsLibraryCore_block_invoke_5659;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264286B30;
    uint64_t v5 = 0;
    ContactsLibraryCore_frameworkLibrary_5658 = _sl_dlopen();
  }
  if (!ContactsLibraryCore_frameworkLibrary_5658)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    BOOL v2 = [NSString stringWithUTF8String:"void *ContactsLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFStreetAddress.m", 21, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __ContactsLibraryCore_block_invoke_5659()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary_5658 = result;
  return result;
}

void sub_21654F9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNMutablePostalAddressClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_5649();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNMutablePostalAddress");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNMutablePostalAddressClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    BOOL v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getCNMutablePostalAddressClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFStreetAddress.m", 22, @"Unable to find class %s", "CNMutablePostalAddress");

    __break(1u);
  }
}

void sub_21655032C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

Class __getCLPlacemarkClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_5680)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreLocationLibraryCore_block_invoke_5681;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264286B48;
    uint64_t v8 = 0;
    CoreLocationLibraryCore_frameworkLibrary_5680 = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary_5680)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFStreetAddress.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CLPlacemark");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getCLPlacemarkClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFStreetAddress.m", 19, @"Unable to find class %s", "CLPlacemark");

LABEL_10:
    __break(1u);
  }
  getCLPlacemarkClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke_5681()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_5680 = result;
  return result;
}

void WFCLLocationFromSerializedLocation(void *a1)
{
  id v1 = a1;
  BOOL v2 = [v1 wfObjectOfClass:objc_opt_class() forKey:@"latitude"];
  [v2 doubleValue];
  double v4 = v3;

  uint64_t v5 = [v1 wfObjectOfClass:objc_opt_class() forKey:@"longitude"];
  [v5 doubleValue];
  double v7 = v6;

  uint64_t v8 = [v1 wfObjectOfClass:objc_opt_class() forKey:@"altitude"];
  [v8 doubleValue];

  uint64_t v9 = [v1 wfObjectOfClass:objc_opt_class() forKey:@"horizontalAccuracy"];
  [v9 doubleValue];

  double v10 = [v1 wfObjectOfClass:objc_opt_class() forKey:@"verticalAccuracy"];
  [v10 doubleValue];

  id v11 = [v1 wfObjectOfClass:objc_opt_class() forKey:@"course"];
  [v11 doubleValue];

  uint64_t v12 = [v1 wfObjectOfClass:objc_opt_class() forKey:@"speed"];
  [v12 doubleValue];

  uint64_t v13 = [v1 wfObjectOfClass:objc_opt_class() forKey:@"timestamp"];
  uint64_t v29 = 0;
  long long v30 = &v29;
  uint64_t v31 = 0x2050000000;
  uint64_t v14 = (void *)getCLLocationClass_softClass_5752;
  long long v32 = (void *)getCLLocationClass_softClass_5752;
  if (!getCLLocationClass_softClass_5752)
  {
    uint64_t v24 = MEMORY[0x263EF8330];
    uint64_t v25 = 3221225472;
    id v26 = __getCLLocationClass_block_invoke_5753;
    uint64_t v27 = &unk_26428AC60;
    long long v28 = &v29;
    __getCLLocationClass_block_invoke_5753((uint64_t)&v24);
    uint64_t v14 = (void *)v30[3];
  }
  id v15 = v14;
  _Block_object_dispose(&v29, 8);
  id v16 = [v15 alloc];
  uint64_t v29 = 0;
  long long v30 = &v29;
  uint64_t v31 = 0x2020000000;
  long long v17 = (void (*)(double, double))getCLLocationCoordinate2DMakeSymbolLoc_ptr_5754;
  long long v32 = getCLLocationCoordinate2DMakeSymbolLoc_ptr_5754;
  if (!getCLLocationCoordinate2DMakeSymbolLoc_ptr_5754)
  {
    uint64_t v24 = MEMORY[0x263EF8330];
    uint64_t v25 = 3221225472;
    id v26 = __getCLLocationCoordinate2DMakeSymbolLoc_block_invoke_5755;
    uint64_t v27 = &unk_26428AC60;
    long long v28 = &v29;
    long long v18 = CoreLocationLibrary_5756();
    uint64_t v19 = dlsym(v18, "CLLocationCoordinate2DMake");
    *(void *)(v28[1] + 24) = v19;
    getCLLocationCoordinate2DMakeSymbolLoc_ptr_5754 = *(_UNKNOWN **)(v28[1] + 24);
    long long v17 = (void (*)(double, double))v30[3];
  }
  _Block_object_dispose(&v29, 8);
  if (v17)
  {
    v17(v4, v7);
    uint64_t v20 = objc_msgSend(v16, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:", v13);

    id v21 = v20;
  }
  else
  {
    uint64_t v22 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v23 = objc_msgSend(NSString, "stringWithUTF8String:", "CLLocationCoordinate2D WFCLLocationCoordinate2DMake(CLLocationDegrees, CLLocationDegrees)");
    objc_msgSend(v22, "handleFailureInFunction:file:lineNumber:description:", v23, @"CLLocation+WFSerialization.m", 15, @"%s", dlerror());

    __break(1u);
  }
}

void sub_216550D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLLocationClass_block_invoke_5753(uint64_t a1)
{
  CoreLocationLibrary_5756();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLLocation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLLocationClass_softClass_5752 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    BOOL v2 = [MEMORY[0x263F08690] currentHandler];
    double v3 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"CLLocation+WFSerialization.m", 14, @"Unable to find class %s", "CLLocation");

    __break(1u);
  }
}

void *__getCLLocationCoordinate2DMakeSymbolLoc_block_invoke_5755(uint64_t a1)
{
  BOOL v2 = CoreLocationLibrary_5756();
  uint64_t result = dlsym(v2, "CLLocationCoordinate2DMake");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCLLocationCoordinate2DMakeSymbolLoc_ptr_5754 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CoreLocationLibrary_5756()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_5762)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreLocationLibraryCore_block_invoke_5763;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264286B60;
    uint64_t v6 = 0;
    CoreLocationLibraryCore_frameworkLibrary_5762 = _sl_dlopen();
  }
  uint64_t v0 = (void *)CoreLocationLibraryCore_frameworkLibrary_5762;
  if (!CoreLocationLibraryCore_frameworkLibrary_5762)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    double v3 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"CLLocation+WFSerialization.m", 13, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CoreLocationLibraryCore_block_invoke_5763()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_5762 = result;
  return result;
}

id WFSerializedLocationFromCLLocation(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    BOOL v2 = objc_opt_new();
    [v1 coordinate];
    double v4 = v3;
    long long v5 = objc_msgSend(NSNumber, "numberWithDouble:");
    [v2 setObject:v5 forKey:@"latitude"];

    uint64_t v6 = [NSNumber numberWithDouble:v4];
    [v2 setObject:v6 forKey:@"longitude"];

    uint64_t v7 = NSNumber;
    [v1 altitude];
    uint64_t v8 = objc_msgSend(v7, "numberWithDouble:");
    [v2 setObject:v8 forKey:@"altitude"];

    uint64_t v9 = NSNumber;
    [v1 horizontalAccuracy];
    double v10 = objc_msgSend(v9, "numberWithDouble:");
    [v2 setObject:v10 forKey:@"horizontalAccuracy"];

    id v11 = NSNumber;
    [v1 verticalAccuracy];
    uint64_t v12 = objc_msgSend(v11, "numberWithDouble:");
    [v2 setObject:v12 forKey:@"verticalAccuracy"];

    uint64_t v13 = NSNumber;
    [v1 course];
    uint64_t v14 = objc_msgSend(v13, "numberWithDouble:");
    [v2 setObject:v14 forKey:@"course"];

    id v15 = NSNumber;
    [v1 speed];
    id v16 = objc_msgSend(v15, "numberWithDouble:");
    [v2 setObject:v16 forKey:@"speed"];

    long long v17 = [v1 timestamp];

    if (v17)
    {
      long long v18 = [v1 timestamp];
      [v2 setObject:v18 forKey:@"timestamp"];
    }
  }
  else
  {
    BOOL v2 = 0;
  }

  return v2;
}

void sub_216551D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

id WFReminderPredicateDescriptorFromContentPredicate(void *a1)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = v1;
    double v3 = objc_opt_new();
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    double v4 = objc_msgSend(v2, "subpredicates", 0);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v33;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v33 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = WFReminderPredicateDescriptorFromContentPredicate(*(void *)(*((void *)&v32 + 1) + 8 * i));
          if (!v9)
          {

            goto LABEL_18;
          }
          double v10 = (void *)v9;
          [v3 addObject:v9];
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v32 objects:v36 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }

    id v11 = WFCompoundReminderPredicateDescriptorWithSubpredicates(v3, [v2 compoundPredicateType]);
    goto LABEL_38;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v11 = 0;
    goto LABEL_39;
  }
  id v2 = v1;
  double v3 = [v2 value];
  if (v3)
  {
    uint64_t v12 = [v2 property];
    unint64_t v13 = [v2 comparisonType];
    uint64_t v14 = [v12 name];
    id v15 = WFLocalizedContentPropertyNameMarker(@"Is Completed");
    int v16 = [v14 isEqualToString:v15];

    if (v16)
    {
      if (v13 == 5)
      {
        uint64_t v17 = [v3 BOOLValue] ^ 1;
        goto LABEL_30;
      }
      if (v13 == 4)
      {
        uint64_t v17 = [v3 BOOLValue];
LABEL_30:
        uint64_t v30 = [getREMReminderPredicateDescriptorClass() predicateDescriptorForRemindersWithCompleted:v17];
        goto LABEL_31;
      }
    }
    else
    {
      long long v18 = [v12 name];
      uint64_t v19 = WFLocalizedContentPropertyNameMarker(@"List");
      int v20 = [v18 isEqualToString:v19];

      if (v20)
      {
        id v21 = +[WFReminderContentItem allLists];
        uint64_t v22 = objc_msgSend(v21, "if_objectsWithValue:forKey:", v3, @"name");
        uint64_t v23 = [v22 firstObject];

        id REMReminderPredicateDescriptorClass = getREMReminderPredicateDescriptorClass();
        uint64_t v25 = [v23 objectID];
        id v11 = [REMReminderPredicateDescriptorClass predicateDescriptorForRemindersWithListID:v25];

LABEL_37:
        goto LABEL_38;
      }
      id v26 = [v12 name];
      uint64_t v27 = WFLocalizedContentPropertyNameMarker(@"Due Date");
      int v28 = [v26 isEqualToString:v27];

      if (v28)
      {
        BOOL v29 = v13 != 4 && v13 > 1;
        if (!v29 && v13 - 2 <= 2)
        {
          uint64_t v30 = [getREMReminderPredicateDescriptorClass() predicateDescriptorForRemindersWithDisplayDateBetween:v3 and:v3];
LABEL_31:
          id v11 = (void *)v30;
          goto LABEL_37;
        }
        if (v13 <= 4)
        {
          if (((1 << v13) & 0x13) != 0) {
            [getREMReminderPredicateDescriptorClass() predicateDescriptorForRemindersWithDisplayDateOnOrBefore:v3];
          }
          else {
          uint64_t v30 = [getREMReminderPredicateDescriptorClass() predicateDescriptorForRemindersWithDisplayDateOnOrAfter:v3];
          }
          goto LABEL_31;
        }
      }
    }
    id v11 = 0;
    goto LABEL_37;
  }
LABEL_18:
  id v11 = 0;
LABEL_38:

LABEL_39:
  return v11;
}

id getREMReminderSortDescriptorClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getREMReminderSortDescriptorClass_softClass;
  uint64_t v7 = getREMReminderSortDescriptorClass_softClass;
  if (!getREMReminderSortDescriptorClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getREMReminderSortDescriptorClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getREMReminderSortDescriptorClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21655239C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id WFCompoundReminderPredicateDescriptorWithSubpredicates(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (a2 == 2)
  {
    uint64_t v4 = [getREMReminderPredicateDescriptorClass() orPredicateDescriptorWithDescriptors:v3];
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    uint64_t v4 = [getREMReminderPredicateDescriptorClass() andPredicateDescriptorWithDescriptors:v3];
LABEL_5:
    uint64_t v5 = (void *)v4;
    goto LABEL_7;
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

void __getREMReminderClass_block_invoke_5813(uint64_t a1)
{
  ReminderKitLibrary_5816();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMReminder");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMReminderClass_softClass_5812 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getREMReminderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFRemindersLibraryFiltering.m", 21, @"Unable to find class %s", "REMReminder");

    __break(1u);
  }
}

void ReminderKitLibrary_5816()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!ReminderKitLibraryCore_frameworkLibrary_5827)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __ReminderKitLibraryCore_block_invoke_5828;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264286BA0;
    uint64_t v5 = 0;
    ReminderKitLibraryCore_frameworkLibrary_5827 = _sl_dlopen();
  }
  if (!ReminderKitLibraryCore_frameworkLibrary_5827)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *ReminderKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFRemindersLibraryFiltering.m", 20, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __ReminderKitLibraryCore_block_invoke_5828()
{
  uint64_t result = _sl_dlopen();
  ReminderKitLibraryCore_frameworkLibrary_5827 = result;
  return result;
}

id getREMReminderPredicateDescriptorClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getREMReminderPredicateDescriptorClass_softClass;
  uint64_t v7 = getREMReminderPredicateDescriptorClass_softClass;
  if (!getREMReminderPredicateDescriptorClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getREMReminderPredicateDescriptorClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getREMReminderPredicateDescriptorClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_216552798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getREMReminderPredicateDescriptorClass_block_invoke(uint64_t a1)
{
  ReminderKitLibrary_5816();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMReminderPredicateDescriptor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMReminderPredicateDescriptorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getREMReminderPredicateDescriptorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFRemindersLibraryFiltering.m", 22, @"Unable to find class %s", "REMReminderPredicateDescriptor");

    __break(1u);
  }
}

void __getREMReminderSortDescriptorClass_block_invoke(uint64_t a1)
{
  ReminderKitLibrary_5816();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMReminderSortDescriptor");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMReminderSortDescriptorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getREMReminderSortDescriptorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFRemindersLibraryFiltering.m", 23, @"Unable to find class %s", "REMReminderSortDescriptor");

    __break(1u);
  }
}

uint64_t __getWFRemindersLibraryFilteringLogObject_block_invoke()
{
  getWFRemindersLibraryFilteringLogObject_log = (uint64_t)os_log_create((const char *)*MEMORY[0x263F85748], "RemindersLibraryFiltering");
  return MEMORY[0x270F9A758]();
}

uint64_t __Block_byref_object_copy__6237(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6238(uint64_t a1)
{
}

CGImageSourceRef WFImageSourceCreateFromFile(void *a1, void *a2)
{
  CFDictionaryRef v3 = a2;
  id v4 = a1;
  if ([v4 representationType])
  {
    CFURLRef v5 = [v4 fileURL];

    CGImageSourceRef v6 = CGImageSourceCreateWithURL(v5, v3);
  }
  else
  {
    CFURLRef v5 = [v4 data];

    CGImageSourceRef v6 = CGImageSourceCreateWithData(v5, v3);
  }
  CGImageSourceRef v7 = v6;

  return v7;
}

double WFImageSizeFromFile(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  CGImageSourceRef v5 = WFImageSourceCreateFromFile(v3, 0);
  if (v5)
  {
    CGImageSourceRef v6 = v5;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = __WFImageSizeFromFile_block_invoke;
    aBlock[3] = &__block_descriptor_40_e5_v8__0l;
    void aBlock[4] = v5;
    CGImageSourceRef v7 = (void (**)(void))_Block_copy(aBlock);
    double v8 = WFImageSizeFromImageSource(v6);
    v7[2](v7);
  }
  else
  {
    double v8 = *MEMORY[0x263F001B0];
  }

  return v8;
}

void sub_2165589A4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void __WFImageSizeFromFile_block_invoke(uint64_t a1)
{
}

double WFImageSizeFromImageSource(CGImageSource *a1)
{
  CFDictionaryRef v1 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
  id v2 = [(__CFDictionary *)v1 objectForKey:*MEMORY[0x263F0F4F8]];
  [v2 doubleValue];
  double v4 = v3;

  CGImageSourceRef v5 = [(__CFDictionary *)v1 objectForKey:*MEMORY[0x263F0F4F0]];
  [v5 doubleValue];
  double v7 = v6;

  double v8 = [(__CFDictionary *)v1 objectForKey:*MEMORY[0x263F0F4C8]];
  uint64_t v9 = [v8 integerValue];

  if (v9 > 4) {
    double v4 = v7;
  }

  return v4;
}

id WFImageAtIndexFromImageSource(CGImageSource *a1, size_t a2)
{
  CFDictionaryRef v4 = CGImageSourceCopyPropertiesAtIndex(a1, a2, 0);
  if (v4)
  {
    CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(a1, a2, 0);
    double v6 = ImageAtIndex;
    if (ImageAtIndex)
    {
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 3221225472;
      aBlock[2] = __WFImageAtIndexFromImageSource_block_invoke;
      aBlock[3] = &__block_descriptor_40_e5_v8__0l;
      void aBlock[4] = ImageAtIndex;
      double v7 = (void (**)(void))_Block_copy(aBlock);
      double v6 = [MEMORY[0x263F85308] imageWithCGImage:v6 scale:WFImageOrientationFromMetadata(v4) orientation:1.0];
      v7[2](v7);
    }
  }
  else
  {
    double v6 = 0;
  }

  return v6;
}

void sub_216558BAC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void __WFImageAtIndexFromImageSource_block_invoke(uint64_t a1)
{
}

CGImageSource *WFResizedImageFromImageFile(void *a1, void *a2, double a3)
{
  id v5 = a1;
  id v6 = a2;
  CGImageSourceRef v7 = WFImageSourceCreateFromFile(v5, 0);
  double v8 = v7;
  if (v7)
  {
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = __WFResizedImageFromImageFile_block_invoke;
    aBlock[3] = &__block_descriptor_40_e5_v8__0l;
    void aBlock[4] = v7;
    uint64_t v9 = (void (**)(void))_Block_copy(aBlock);
    if (!v6)
    {
      id v6 = [v5 wfType];
    }
    double v10 = [v5 filename];
    WFResizedImageFromImageSource(v8, v6, v10, a3);
    double v8 = (CGImageSource *)objc_claimAutoreleasedReturnValue();

    v9[2](v9);
  }

  return v8;
}

void sub_216558D04(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void __WFResizedImageFromImageFile_block_invoke(uint64_t a1)
{
}

CGImage *WFResizedImageFromImageSource(CGImageSource *a1, void *a2, void *a3, double a4)
{
  void v24[3] = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = *MEMORY[0x263F0F5A8];
  v23[0] = *MEMORY[0x263F0F5B8];
  v23[1] = v9;
  v24[0] = MEMORY[0x263EFFA88];
  v24[1] = MEMORY[0x263EFFA88];
  v23[2] = *MEMORY[0x263F0F638];
  double v10 = [NSNumber numberWithDouble:a4];
  v24[2] = v10;
  CFDictionaryRef v11 = (const __CFDictionary *)[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:3];

  CGImageRef ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex(a1, 0, v11);
  unint64_t v13 = ThumbnailAtIndex;
  if (ThumbnailAtIndex)
  {
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = __WFResizedImageFromImageSource_block_invoke;
    aBlock[3] = &__block_descriptor_40_e5_v8__0l;
    void aBlock[4] = ThumbnailAtIndex;
    uint64_t v14 = (void (**)(void))_Block_copy(aBlock);
    CFURLRef v15 = +[WFTemporaryFileManager createTemporaryFileWithFilename:v8];
    int v16 = [v7 utType];
    uint64_t v17 = [v16 identifier];
    long long v18 = CGImageDestinationCreateWithURL(v15, v17, 1uLL, 0);

    if (v18)
    {
      v21[0] = MEMORY[0x263EF8330];
      v21[1] = 3221225472;
      v21[2] = __WFResizedImageFromImageSource_block_invoke_2;
      v21[3] = &__block_descriptor_40_e5_v8__0l;
      void v21[4] = v18;
      uint64_t v19 = (void (**)(void))_Block_copy(v21);
      CGImageDestinationAddImage(v18, v13, 0);
      CGImageDestinationFinalize(v18);
      unint64_t v13 = +[WFFileRepresentation fileWithURL:v15 options:1 ofType:v7];
      v19[2](v19);
    }
    else
    {
      unint64_t v13 = 0;
    }

    v14[2](v14);
  }

  return v13;
}

void sub_216558FC8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void __WFResizedImageFromImageSource_block_invoke(uint64_t a1)
{
}

void __WFResizedImageFromImageSource_block_invoke_2(uint64_t a1)
{
}

id WFTransformedImageFromImage(void *a1, void *a2, void *a3, double a4, double a5)
{
  id v61 = a1;
  id v9 = a2;
  double v10 = a3;
  if (v10) {
    CFDictionaryRef v11 = v10;
  }
  else {
    CFDictionaryRef v11 = (void (**)(void *, void *, void *, double, double, double, double))&__block_literal_global_6579;
  }
  if (!v9)
  {
    id v9 = [v61 wfType];
  }
  if ([v9 isEqualToUTType:*MEMORY[0x263F1DB18]])
  {
    uint64_t v12 = [v61 filename];
    uint64_t v13 = [v12 length];

    if (v13)
    {
      uint64_t v14 = (void *)MEMORY[0x263F852B8];
      CFURLRef v15 = [v61 filename];
      uint64_t v16 = [v14 typeFromFilename:v15];

      id v9 = (id)v16;
    }
  }
  uint64_t v17 = WFImageSourceCreateFromFile(v61, 0);
  if (v17)
  {
    long long v18 = v17;
    size_t Count = CGImageSourceGetCount(v17);
    int v20 = [v61 filename];
    CFURLRef v21 = +[WFTemporaryFileManager createTemporaryFileWithFilename:v20];

    uint64_t v22 = [v9 utType];
    uint64_t v23 = [v22 identifier];
    CGImageDestinationRef v24 = CGImageDestinationCreateWithURL(v21, v23, Count, 0);

    if (v24)
    {
      idst = v24;
      CFURLRef v52 = v21;
      uint64_t v60 = v9;
      float v56 = objc_opt_new();
      if (Count)
      {
        size_t v25 = Count;
        size_t v26 = 0;
        uint64_t v27 = *MEMORY[0x263F0F518];
        uint64_t v58 = *MEMORY[0x263F0F540];
        uint64_t v59 = *MEMORY[0x263F0F4C8];
        uint64_t v54 = v18;
        id v55 = v11;
        size_t v53 = v25;
        uint64_t v62 = *MEMORY[0x263F0F518];
        do
        {
          CFDictionaryRef v28 = CGImageSourceCopyPropertiesAtIndex(v18, v26, 0);
          BOOL v29 = objc_msgSend(MEMORY[0x263F85188], "HDRCapableContextWithSize:scale:", a4, a5, 1.0);
          if (v29)
          {
            uint64_t v30 = WFImageAtIndexFromImageSource(v18, v26);
            v11[2](v11, v30, v29, 0.0, 0.0, a4, a5);

            image = CGBitmapContextCreateImage((CGContextRef)[v29 CGContext]);
            uint64_t v31 = (void *)[(__CFDictionary *)v28 mutableCopy];
            long long v32 = [(__CFDictionary *)v28 objectForKey:v27];
            long long v33 = (void *)[v32 mutableCopy];

            uint64_t v27 = v62;
            [v31 setObject:&unk_26C741F08 forKey:v59];
            [v33 setObject:&unk_26C741F08 forKey:v58];
            if (v33) {
              [v31 setObject:v33 forKey:v62];
            }
            if (v25 == 1)
            {
              long long v34 = image;
              CGImageDestinationAddImage(idst, image, (CFDictionaryRef)v31);
            }
            else
            {
              long long v35 = [v61 filename];
              CFURLRef v36 = +[WFTemporaryFileManager createTemporaryFileWithFilename:v35];

              uint64_t v37 = [v60 utType];
              uint64_t v38 = [v37 identifier];
              CFURLRef v39 = v36;
              id v40 = CGImageDestinationCreateWithURL(v36, v38, 1uLL, 0);

              CGImageDestinationAddImage(v40, image, (CFDictionaryRef)v31);
              CGImageDestinationFinalize(v40);
              CFRelease(v40);
              uint64_t v41 = [MEMORY[0x263F08C38] UUID];
              char v42 = [v41 UUIDString];
              uint64_t v43 = +[WFFileRepresentation fileWithURL:v39 options:1 ofType:v60 proposedFilename:v42];
              [v56 addObject:v43];

              long long v34 = image;
              long long v18 = v54;

              CFDictionaryRef v11 = v55;
              size_t v25 = v53;
              uint64_t v27 = v62;
            }
            CGImageRelease(v34);
          }
          ++v26;
        }
        while (v25 != v26);
      }
      if ([v56 count])
      {
        unint64_t v44 = 0;
        do
        {
          uint64_t v45 = [v56 objectAtIndex:v44];
          CFURLRef v46 = [v45 fileURL];
          double v47 = CGImageSourceCreateWithURL(v46, 0);

          CFDictionaryRef v48 = CGImageSourceCopyPropertiesAtIndex(v18, 0, 0);
          CGImageDestinationAddImageFromSource(idst, v47, 0, v48);
          if (v47) {
            CFRelease(v47);
          }

          ++v44;
        }
        while (v44 < [v56 count]);
      }
      CGImageDestinationFinalize(idst);

      CFRelease(v18);
      CFRelease(idst);
      uint64_t v49 = [v61 filename];
      CFURLRef v21 = v52;
      id v9 = v60;
      double v50 = +[WFFileRepresentation fileWithURL:v52 options:1 ofType:v60 proposedFilename:v49];
    }
    else
    {
      double v50 = 0;
    }
  }
  else
  {
    double v50 = 0;
  }

  return v50;
}

uint64_t __WFTransformedImageFromImage_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "drawInContext:inRect:");
}

void WFAsyncTransformedImageFromImage(void *a1, void *a2, void *a3, void *a4, double a5, double a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  if (v14)
  {
    CFURLRef v15 = dispatch_get_global_queue(0, 0);
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    v16[2] = __WFAsyncTransformedImageFromImage_block_invoke;
    v16[3] = &unk_264286DE8;
    id v17 = v11;
    double v21 = a5;
    double v22 = a6;
    id v18 = v12;
    id v19 = v13;
    id v20 = v14;
    dispatch_async(v15, v16);
  }
}

void __WFAsyncTransformedImageFromImage_block_invoke(uint64_t a1)
{
  WFTransformedImageFromImage(*(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(double *)(a1 + 64), *(double *)(a1 + 72));
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

id WFMetadataRotateImage(void *a1, int a2, void *a3, long double a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v7 = a1;
  if (fmod(a4, 90.0) != 0.0
    || (uint64_t v38 = *MEMORY[0x263F0F610],
        uint64_t v8 = MEMORY[0x263EFFA88],
        uint64_t v39 = MEMORY[0x263EFFA88],
        [NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1],
        id v9 = objc_claimAutoreleasedReturnValue(),
        double v10 = WFImageSourceCreateFromFile(v7, v9),
        v9,
        !v10))
  {
    id v17 = 0;
    goto LABEL_26;
  }
  uint64_t v36 = *MEMORY[0x263F0F620];
  uint64_t v37 = v8;
  long long v33 = CGImageSourceCopyPropertiesAtIndex(v10, 0, (CFDictionaryRef)[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1]);
  id v11 = [v33 objectForKeyedSubscript:*MEMORY[0x263F0F4C8]];
  if (!v11) {
    id v11 = &unk_26C741F08;
  }
  long long v32 = v11;
  unsigned int v12 = [v11 integerValue];
  p_CFErrorRef err = 0;
  if (v12 <= 8)
  {
    if (((1 << v12) & 0xB4) != 0)
    {
      LODWORD(err) = 2;
      int v14 = 5;
      int v15 = 4;
      int v16 = 7;
      goto LABEL_11;
    }
    if (((1 << v12) & 0x14A) != 0)
    {
      LODWORD(err) = 1;
      int v14 = 8;
      int v15 = 3;
      int v16 = 6;
LABEL_11:
      p_CFErrorRef err = &err;
      HIDWORD(err) = v16;
      int v41 = v15;
      int v42 = v14;
    }
  }
  if (v12 - 3 > 5) {
    LOBYTE(v1_Block_object_dispose(&a9, 8) = 0;
  }
  else {
    uint64_t v18 = qword_216612930[v12 - 3];
  }
  uint64_t v19 = *((unsigned int *)p_err + (((_BYTE)v18 + (unint64_t)(a4 / 90.0)) & 3));
  uint64_t v34 = *MEMORY[0x263F0F010];
  id v20 = [NSNumber numberWithUnsignedInt:v19];
  long long v35 = v20;
  CFDictionaryRef v21 = [NSDictionary dictionaryWithObjects:&v35 forKeys:&v34 count:1];

  if (a2)
  {
    CFURLRef v22 = [v7 fileURL];
  }
  else
  {
    uint64_t v23 = [v7 filename];
    CFURLRef v22 = +[WFTemporaryFileManager createTemporaryFileWithFilename:v23];
  }
  CGImageDestinationRef v24 = [v7 wfType];
  size_t v25 = [v24 utType];
  size_t v26 = [v25 identifier];
  uint64_t v27 = CGImageDestinationCreateWithURL(v22, v26, 1uLL, 0);

  CFErrorRef err = 0;
  BOOL v28 = CGImageDestinationCopyImageSource(v27, v10, v21, &err);
  if (a3) {
    *a3 = err;
  }
  if (v28)
  {
    if (a2)
    {
      id v17 = v7;
    }
    else
    {
      BOOL v29 = [v7 wfType];
      uint64_t v30 = [v7 filename];
      id v17 = +[WFFileRepresentation fileWithURL:v22 options:1 ofType:v29 proposedFilename:v30];
    }
  }
  else
  {
    id v17 = 0;
  }

LABEL_26:
  return v17;
}

id WFJavaScriptCoreRepresentationFromPropertyList(void *a1)
{
  return WFJavaScriptRepresentationFromPropertyList(a1, 1);
}

id WFJavaScriptRepresentationFromPropertyList(void *a1, uint64_t a2)
{
  v20[2] = *MEMORY[0x263EF8340];
  id v3 = a1;
  if (!v3) {
    goto LABEL_5;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (!a2)
    {
      CFDictionaryRef v4 = [MEMORY[0x263F087B0] notANumber];
      char v5 = [v3 isEqualToNumber:v4];

      if (v5) {
        goto LABEL_5;
      }
    }
    goto LABEL_8;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
LABEL_8:
    id v7 = v3;
LABEL_9:
    id v6 = v7;
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v19[0] = @"__type__";
    v19[1] = @"__value__";
    v20[0] = @"data";
    id v9 = [v3 base64EncodedStringWithOptions:0];
    v20[1] = v9;
    double v10 = NSDictionary;
    id v11 = v20;
    unsigned int v12 = v19;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_20;
    }
    if (a2 == 1) {
      goto LABEL_8;
    }
    if (a2)
    {
LABEL_20:
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        v16[0] = MEMORY[0x263EF8330];
        v16[1] = 3221225472;
        v16[2] = __WFJavaScriptRepresentationFromPropertyList_block_invoke;
        v16[3] = &__block_descriptor_40_e11__24__0_8Q16l;
        void v16[4] = a2;
        int v14 = v16;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
LABEL_5:
          id v6 = 0;
          goto LABEL_10;
        }
        v15[0] = MEMORY[0x263EF8330];
        v15[1] = 3221225472;
        v15[2] = __WFJavaScriptRepresentationFromPropertyList_block_invoke_2;
        v15[3] = &__block_descriptor_40_e19_v40__0_8_16__24__32l;
        void v15[4] = a2;
        int v14 = v15;
      }
      objc_msgSend(v3, "if_compactMap:", v14);
      id v7 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    }
    v18[0] = @"date";
    v17[0] = @"__type__";
    v17[1] = @"__value__";
    id v13 = NSNumber;
    [v3 timeIntervalSince1970];
    id v9 = objc_msgSend(v13, "numberWithDouble:");
    v18[1] = v9;
    double v10 = NSDictionary;
    id v11 = v18;
    unsigned int v12 = v17;
  }
  id v6 = [v10 dictionaryWithObjects:v11 forKeys:v12 count:2];

LABEL_10:
  return v6;
}

uint64_t __WFJavaScriptRepresentationFromPropertyList_block_invoke(uint64_t a1, uint64_t a2)
{
  return WFJavaScriptRepresentationFromPropertyList(a2, *(void *)(a1 + 32));
}

void __WFJavaScriptRepresentationFromPropertyList_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a2;
  id v9 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    *a4 = [v10 description];
  }
  WFJavaScriptRepresentationFromPropertyList(v9, *(void *)(a1 + 32));
  *a5 = (id)objc_claimAutoreleasedReturnValue();
}

id WFJSONRepresentationFromPropertyList(void *a1)
{
  return WFJavaScriptRepresentationFromPropertyList(a1, 0);
}

id WFPropertyListRepresentationFromJSON(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v3 = 0;
    goto LABEL_16;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_msgSend(v1, "if_compactMap:", &__block_literal_global_6616);
    id v2 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:
    id v3 = v2;
    goto LABEL_16;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v2 = v1;
    goto LABEL_10;
  }
  CFDictionaryRef v4 = [v1 objectForKey:@"__type__"];
  char v5 = [v1 objectForKey:@"__value__"];
  if ([v4 isEqual:@"data"]
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    uint64_t v6 = [objc_alloc(MEMORY[0x263EFF8F8]) initWithBase64EncodedString:v5 options:0];
  }
  else if ([v4 isEqual:@"date"] {
         && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  }
  {
    id v7 = (void *)MEMORY[0x263EFF910];
    [v5 doubleValue];
    uint64_t v6 = objc_msgSend(v7, "dateWithTimeIntervalSince1970:");
  }
  else
  {
    uint64_t v6 = objc_msgSend(v1, "if_compactMap:", &__block_literal_global_18_6617);
  }
  id v3 = (void *)v6;

LABEL_16:
  return v3;
}

id __WFPropertyListRepresentationFromJSON_block_invoke_2(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  WFPropertyListRepresentationFromJSON(a3);
  id result = (id)objc_claimAutoreleasedReturnValue();
  *a5 = result;
  return result;
}

id __WFPropertyListRepresentationFromJSON_block_invoke(uint64_t a1, void *a2)
{
  return WFPropertyListRepresentationFromJSON(a2);
}

_DWORD *cdf_timestamp_to_timespec(void *a1, uint64_t a2)
{
  a1[1] = 100 * (a2 % 10000000);
  v31.tm_sec = (int)(a2 / 10000000) % 60;
  v31.tm_min = (int)(a2 / 600000000) % 60;
  v31.tm_hour = (int)a2 / 1640261632 % 24;
  uint64_t v3 = a2 / 864000000000;
  int v4 = (int)a2 / 2026291200;
  int v5 = (int)a2 / 2026291200 + 1601;
  if ((int)a2 / 2026291200 < 1)
  {
    int v7 = 0;
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
    unsigned int v8 = 1601;
    do
    {
      if ((((_BYTE)v6 + 65) & 3) != 0)
      {
        int v9 = 365;
      }
      else if (400 * (v8 / 0x190) - 1601 != v6 && 100 * (v8 / 0x64) - 1601 == v6)
      {
        int v9 = 365;
      }
      else
      {
        int v9 = 366;
      }
      v7 += v9;
      ++v8;
      ++v6;
    }
    while (v4 != v6);
  }
  uint64_t v11 = 0;
  int v12 = v3 - v7 + 1;
  int v13 = v5 & 3;
  int v14 = -1030792151 * v5 + 85899344;
  HIDWORD(v16) = v14;
  LODWORD(v16) = v14;
  unsigned int v15 = v16 >> 2;
  HIDWORD(v16) = v14;
  LODWORD(v16) = v14;
  unsigned int v17 = v16 >> 4;
  BOOL v19 = v15 > 0x28F5C28 || v17 < 0xA3D70B;
  int v20 = v12;
  do
  {
    if (v13) {
      BOOL v21 = 0;
    }
    else {
      BOOL v21 = v11 == 1;
    }
    BOOL v22 = v21 && v19;
    int v23 = mdays[v11] + v22;
    BOOL v24 = __OFSUB__(v20, v23);
    int v25 = v20 - v23;
    if (v25 < 0 != v24) {
      break;
    }
    ++v11;
    int v20 = v25;
  }
  while (v11 != 12);
  uint64_t v26 = 0;
  v31.tm_mday = v20;
  do
  {
    int v27 = v12 - mdays[v26];
    if (v13) {
      BOOL v28 = 0;
    }
    else {
      BOOL v28 = v26 == 1;
    }
    BOOL v29 = v28 && v19;
    int v12 = v27 - v29;
    if (v12 < 1) {
      break;
    }
    ++v26;
  }
  while (v26 != 12);
  memset(&v31.tm_yday, 0, 20);
  v31.tm_zone = (char *)&cdf_timestamp_to_timespec_UTC;
  v31.tm_mon = v26;
  *(void *)&v31.tm_year = (v4 - 299);
  id result = (_DWORD *)mktime(&v31);
  *a1 = result;
  if (result == (_DWORD *)-1)
  {
    id result = __error();
    *id result = 22;
  }
  return result;
}

void sub_21655A680(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

id getPHPhotoLibraryClass()
{
  uint64_t v4 = 0;
  int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getPHPhotoLibraryClass_softClass_6658;
  uint64_t v7 = getPHPhotoLibraryClass_softClass_6658;
  if (!getPHPhotoLibraryClass_softClass_6658)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPHPhotoLibraryClass_block_invoke_6659;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getPHPhotoLibraryClass_block_invoke_6659((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21655A78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPHPhotoLibraryClass_block_invoke_6659(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_6660)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __PhotosLibraryCore_block_invoke_6661;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264286E68;
    uint64_t v8 = 0;
    PhotosLibraryCore_frameworkLibrary_6660 = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary_6660)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSharedPhotoLibrary.m", 17, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PHPhotoLibrary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    int v5 = [NSString stringWithUTF8String:"Class getPHPhotoLibraryClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSharedPhotoLibrary.m", 18, @"Unable to find class %s", "PHPhotoLibrary");

LABEL_10:
    __break(1u);
  }
  getPHPhotoLibraryClass_softClass_6658 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PhotosLibraryCore_block_invoke_6661()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_6660 = result;
  return result;
}

WFPasteboardItem *__WFUIPasteboardParseItems_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  id v4 = a2;
  uint64_t v34 = objc_opt_new();
  int v5 = [MEMORY[0x263F088D0] indexSetWithIndex:a3];
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id obj = v4;
  uint64_t v6 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v37;
    uint64_t v9 = *MEMORY[0x263F1DB18];
    long long v33 = (void *)*MEMORY[0x263F1DCF8];
    tm v31 = (void *)*MEMORY[0x263F1DC70];
    BOOL v28 = (void *)*MEMORY[0x263F1DB00];
    BOOL v29 = (void *)*MEMORY[0x263F1DAA8];
    uint64_t v30 = (void *)*MEMORY[0x263F1DC20];
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v37 != v8) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(id *)(*((void *)&v36 + 1) + 8 * v10);
        int v12 = [MEMORY[0x263F852B8] typeWithString:v11];
        int v13 = [v12 conformsToUTType:v9];

        int v14 = *(void **)(a1 + 32);
        if (v13) {
          [v14 dataForPasteboardType:v11 inItemSet:v5];
        }
        else {
        unsigned int v15 = [v14 valuesForPasteboardType:v11 inItemSet:v5];
        }
        unint64_t v16 = objc_msgSend(v15, "firstObject", v28);

        if (v16)
        {
          id v17 = v11;
          uint64_t v18 = [v33 identifier];
          int v19 = [v17 isEqualToString:v18];

          if (v19)
          {
            int v20 = v30;
            goto LABEL_16;
          }
          BOOL v21 = [v31 identifier];
          int v22 = [v17 isEqualToString:v21];

          if (v22)
          {
            int v20 = v29;
            goto LABEL_16;
          }
          if ([v17 isEqualToString:@"com.microsoft.HTML"])
          {
            int v20 = v28;
LABEL_16:
            id v23 = [v20 identifier];
          }
          else
          {
            id v23 = v17;
          }
          BOOL v24 = v23;

          [v34 setObject:v16 forKey:v24];
        }

        ++v10;
      }
      while (v7 != v10);
      uint64_t v25 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
      uint64_t v7 = v25;
    }
    while (v25);
  }

  uint64_t v26 = [[WFPasteboardItem alloc] initWithItemsByType:v34 fileURLs:0];
  return v26;
}

id WFPasteboardRequiredAccessResources(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v7 = @"com.apple.mobileslideshow.asset.localidentifier";
  id v1 = (void *)MEMORY[0x263EFF8C0];
  id v2 = a1;
  uint64_t v3 = [v1 arrayWithObjects:&v7 count:1];
  int v4 = objc_msgSend(v2, "containsPasteboardTypes:", v3, v7, v8);

  if (v4)
  {
    int v5 = [MEMORY[0x263EFFA08] setWithObject:@"WFPhotoAccessResource"];
  }
  else
  {
    int v5 = 0;
  }
  return v5;
}

void sub_21655F90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getNSLinkAttributeName()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getNSLinkAttributeNameSymbolLoc_ptr;
  uint64_t v9 = getNSLinkAttributeNameSymbolLoc_ptr;
  if (!getNSLinkAttributeNameSymbolLoc_ptr)
  {
    id v1 = UIFoundationLibrary();
    v7[3] = (uint64_t)dlsym(v1, "NSLinkAttributeName");
    getNSLinkAttributeNameSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    int v4 = [MEMORY[0x263F08690] currentHandler];
    int v5 = [NSString stringWithUTF8String:"NSAttributedStringKey getNSLinkAttributeName(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFRichTextContentItem.m", 49, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21655FA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNSAttachmentAttributeNameSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = UIFoundationLibrary();
  uint64_t result = dlsym(v2, "NSAttachmentAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSAttachmentAttributeNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *UIFoundationLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!UIFoundationLibraryCore_frameworkLibrary_8049)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __UIFoundationLibraryCore_block_invoke_8050;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_2642871A8;
    uint64_t v6 = 0;
    UIFoundationLibraryCore_frameworkLibrary_8049 = _sl_dlopen();
  }
  uint64_t v0 = (void *)UIFoundationLibraryCore_frameworkLibrary_8049;
  if (!UIFoundationLibraryCore_frameworkLibrary_8049)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *UIFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFRichTextContentItem.m", 45, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __UIFoundationLibraryCore_block_invoke_8050()
{
  uint64_t result = _sl_dlopen();
  UIFoundationLibraryCore_frameworkLibrary_8049 = result;
  return result;
}

void *__getNSLinkAttributeNameSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = UIFoundationLibrary();
  uint64_t result = dlsym(v2, "NSLinkAttributeName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSLinkAttributeNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void getNSDocumentTypeDocumentAttribute()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getNSDocumentTypeDocumentAttributeSymbolLoc_ptr;
  uint64_t v9 = getNSDocumentTypeDocumentAttributeSymbolLoc_ptr;
  if (!getNSDocumentTypeDocumentAttributeSymbolLoc_ptr)
  {
    id v1 = UIFoundationLibrary();
    v7[3] = (uint64_t)dlsym(v1, "NSDocumentTypeDocumentAttribute");
    getNSDocumentTypeDocumentAttributeSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    int v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSAttributedStringDocumentAttributeKey getNSDocumentTypeDocumentAttribute(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFRichTextContentItem.m", 48, @"%s", dlerror());

    __break(1u);
  }
}

void sub_216560C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getNSHTMLTextDocumentType()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getNSHTMLTextDocumentTypeSymbolLoc_ptr;
  uint64_t v9 = getNSHTMLTextDocumentTypeSymbolLoc_ptr;
  if (!getNSHTMLTextDocumentTypeSymbolLoc_ptr)
  {
    id v1 = UIFoundationLibrary();
    v7[3] = (uint64_t)dlsym(v1, "NSHTMLTextDocumentType");
    getNSHTMLTextDocumentTypeSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    int v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSAttributedStringDocumentType getNSHTMLTextDocumentType(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFRichTextContentItem.m", 53, @"%s", dlerror());

    __break(1u);
  }
}

void sub_216560DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNSHTMLTextDocumentTypeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = UIFoundationLibrary();
  uint64_t result = dlsym(v2, "NSHTMLTextDocumentType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSHTMLTextDocumentTypeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getNSDocumentTypeDocumentAttributeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = UIFoundationLibrary();
  uint64_t result = dlsym(v2, "NSDocumentTypeDocumentAttribute");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSDocumentTypeDocumentAttributeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class initUISimpleTextPrintFormatter_8064()
{
  if (UIKitLibrary_sOnce_8065 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_8065, &__block_literal_global_8066);
  }
  Class result = objc_getClass("UISimpleTextPrintFormatter");
  classUISimpleTextPrintFormatter_8068 = (uint64_t)result;
  getUISimpleTextPrintFormatterClass_8062 = (uint64_t (*)())UISimpleTextPrintFormatterFunction_8070;
  return result;
}

id UISimpleTextPrintFormatterFunction_8070()
{
  return (id)classUISimpleTextPrintFormatter_8068;
}

void *__UIKitLibrary_block_invoke_8073()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib_8075 = (uint64_t)result;
  return result;
}

void sub_2165631DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

Class __getWKWebViewConfigurationClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!WebKitLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __WebKitLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_2642871C0;
    uint64_t v8 = 0;
    WebKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!WebKitLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    int v4 = [NSString stringWithUTF8String:"void *WebKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFRichTextContentItem.m", 34, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("WKWebViewConfiguration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getWKWebViewConfigurationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFRichTextContentItem.m", 35, @"Unable to find class %s", "WKWebViewConfiguration");

LABEL_10:
    __break(1u);
  }
  getWKWebViewConfigurationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __WebKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  WebKitLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_216563750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getNSPlainTextDocumentType()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getNSPlainTextDocumentTypeSymbolLoc_ptr;
  uint64_t v9 = getNSPlainTextDocumentTypeSymbolLoc_ptr;
  if (!getNSPlainTextDocumentTypeSymbolLoc_ptr)
  {
    uint64_t v1 = UIFoundationLibrary();
    v7[3] = (uint64_t)dlsym(v1, "NSPlainTextDocumentType");
    getNSPlainTextDocumentTypeSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    int v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSAttributedStringDocumentType getNSPlainTextDocumentType(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFRichTextContentItem.m", 50, @"%s", dlerror());

    __break(1u);
  }
}

void sub_2165638B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNSCharacterEncodingDocumentAttributeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = UIFoundationLibrary();
  uint64_t result = dlsym(v2, "NSCharacterEncodingDocumentAttribute");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSCharacterEncodingDocumentAttributeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getNSPlainTextDocumentTypeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = UIFoundationLibrary();
  uint64_t result = dlsym(v2, "NSPlainTextDocumentType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSPlainTextDocumentTypeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_216563CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNSRTFTextDocumentTypeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = UIFoundationLibrary();
  uint64_t result = dlsym(v2, "NSRTFTextDocumentType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSRTFTextDocumentTypeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getNSRTFDTextDocumentTypeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = UIFoundationLibrary();
  uint64_t result = dlsym(v2, "NSRTFDTextDocumentType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSRTFDTextDocumentTypeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t WFDateFormatterStyleFromStyle(void *a1, uint64_t *a2)
{
  id v3 = a1;
  if ([v3 isEqualToString:@"None"])
  {
    uint64_t v4 = 0;
  }
  else if ([v3 isEqualToString:@"Short"])
  {
    uint64_t v4 = 1;
  }
  else if ([v3 isEqualToString:@"Medium"])
  {
    uint64_t v4 = 2;
  }
  else
  {
    if (![v3 isEqualToString:@"Long"])
    {
      uint64_t v5 = 0;
      goto LABEL_10;
    }
    uint64_t v4 = 3;
  }
  *a2 = v4;
  uint64_t v5 = 1;
LABEL_10:

  return v5;
}

__CFString *WFDateFormattingGetDefaultCustomDateFormat()
{
  return @"EEE, dd MMM yyyy HH:mm:ss Z";
}

id WFDateFormattingGetLocalizedDefaultCustomDateFormat()
{
  return WFLocalizedString(@"EEE, dd MMM yyyy HH:mm:ss Z");
}

void sub_216565E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__197(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__198(uint64_t a1)
{
}

void sub_216566B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__8650(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__8651(uint64_t a1)
{
}

void sub_216567208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_216567918(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_216567D24(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id WFConvertObjectToContentItem(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v5 = [v3 contentItemByMergingAttributionSet:v4];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v7 = v3;
      uint64_t v8 = [v7 wfType];
      uint64_t v6 = +[WFContentItem itemWithRepresentation:v7 forType:v8 attributionSet:v4 cachingIdentifier:0];

      goto LABEL_11;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v9 = [v3 localizedValue];
      uint64_t v6 = +[WFContentItem itemWithObject:v9 attributionSet:v4];

      goto LABEL_11;
    }
    uint64_t v5 = +[WFContentItem itemWithObject:v3 attributionSet:v4];
  }
  uint64_t v6 = (void *)v5;
LABEL_11:

  return v6;
}

id getWFFileRepresentationLogObject()
{
  if (getWFFileRepresentationLogObject_onceToken != -1) {
    dispatch_once(&getWFFileRepresentationLogObject_onceToken, &__block_literal_global_8819);
  }
  uint64_t v0 = (void *)getWFFileRepresentationLogObject_log;
  return v0;
}

uint64_t __getWFFileRepresentationLogObject_block_invoke()
{
  getWFFileRepresentationLogObject_log = (uint64_t)os_log_create((const char *)*MEMORY[0x263F85748], "FileRepresentation");
  return MEMORY[0x270F9A758]();
}

void sub_21656A258(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8840(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8841(uint64_t a1)
{
}

void sub_21656B48C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_21656BFB0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void WFFaultIfLoadingMagicKitInDaemon()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v0 = +[WFApplicationContext sharedContext];
  uint64_t v1 = [v0 provider];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    id v3 = getWFContentGraphLogObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      int v4 = 136315138;
      uint64_t v5 = "WFFaultIfLoadingMagicKitInDaemon";
      _os_log_impl(&dword_216505000, v3, OS_LOG_TYPE_FAULT, "%s Creating a WFFileRepresentation without a type will load MagicKit (a ContentKit dependency), which in turn loads a 7MB database into memory. Please do not do this in low memory processes like our daemon, this will cause very severe memory regressions.", (uint8_t *)&v4, 0xCu);
    }
  }
}

uint64_t sread(int a1, char *a2, unint64_t a3)
{
  int v14 = 0;
  if (!a1)
  {
LABEL_18:
    size_t v9 = a3;
    while (1)
    {
      ssize_t v10 = read(a1, a2, v9);
      if (v10 == -1)
      {
        if (*__error() != 4) {
          return -1;
        }
      }
      else
      {
        if (!v10)
        {
          a3 -= v9;
          return a3;
        }
        v9 -= v10;
        a2 += v10;
      }
      if (!v9) {
        return a3;
      }
    }
  }
  if (ioctl(a1, 0x4004667FuLL, &v14) != -1)
  {
    int v6 = v14;
    if (v14)
    {
LABEL_15:
      if (v6 >= 1 && v6 < a3) {
        a3 = v6;
      }
      goto LABEL_18;
    }
  }
  for (unint64_t i = 0; ; ++i)
  {
    timeval v12 = (timeval)xmmword_216612680;
    memset(&v13, 0, sizeof(v13));
    if (__darwin_check_fd_set_overflow(a1, &v13, 0)) {
      v13.fds_bits[(unint64_t)a1 >> 5] |= 1 << a1;
    }
    int v8 = select(a1 + 1, &v13, 0, 0, &v12);
    if (v8 != -1) {
      break;
    }
    if (*__error() != 4) {
      __error();
    }
  }
  if (v8 || i <= 4)
  {
    ioctl(a1, 0x4004667FuLL, &v14);
    int v6 = v14;
    goto LABEL_15;
  }
  return 0;
}

uint64_t file_pipe2file()
{
  int v0 = MEMORY[0x270FA5388]();
  size_t v2 = v1;
  int v4 = v3;
  int v6 = v5;
  int v7 = v0;
  uint64_t v29 = *MEMORY[0x263EF8340];
  __strlcpy_chk();
  mode_t v8 = umask(0);
  int v9 = mkstemp(__buf);
  umask(v8);
  int v10 = *__error();
  unlink(__buf);
  *__error() = v10;
  if (v9 == -1)
  {
    int v12 = *__error();
    uint64_t v18 = "cannot create temporary file for pipe copy";
    goto LABEL_10;
  }
  if (swrite(v9, v4, v2) != v2) {
    goto LABEL_8;
  }
  do
    int64_t v11 = sread(v6, __buf, 0x1000uLL);
  while (v11 >= 1 && swrite(v9, __buf, v11) == v11);
  if (v11)
  {
    if (v11 == -1)
    {
      int v12 = *__error();
      uint64_t v18 = "error copying from pipe to temp file";
LABEL_10:
      file_error(v7, v12, v18, v13, v14, v15, v16, v17, v27);
      return 0xFFFFFFFFLL;
    }
LABEL_8:
    int v12 = *__error();
    uint64_t v18 = "error while writing to temp file";
    goto LABEL_10;
  }
  uint64_t v19 = dup2(v9, v6);
  if (v19 == -1)
  {
    BOOL v21 = __error();
    file_error(v7, *v21, "could not dup descriptor for temp file", v22, v23, v24, v25, v26, v27);
    return v19;
  }
  close(v9);
  if (lseek(v19, 0, 0) == -1)
  {
    int v12 = *__error();
    uint64_t v18 = "error seeking";
    goto LABEL_10;
  }
  return v19;
}

size_t swrite(int __fd, char *__buf, size_t __nbyte)
{
  size_t v3 = __nbyte;
  size_t v6 = __nbyte;
  while (1)
  {
    ssize_t v7 = write(__fd, __buf, v6);
    if (v7 == -1) {
      break;
    }
    v6 -= v7;
    __buf += v7;
LABEL_5:
    if (!v6) {
      return v3;
    }
  }
  if (*__error() == 4) {
    goto LABEL_5;
  }
  return -1;
}

void sub_21656D85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMKLaunchOptionsMapTypeKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MapKitLibrary_8993();
  uint64_t result = dlsym(v2, "MKLaunchOptionsMapTypeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKLaunchOptionsMapTypeKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *MapKitLibrary_8993()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary_9025)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __MapKitLibraryCore_block_invoke_9026;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264287728;
    uint64_t v6 = 0;
    MapKitLibraryCore_frameworkLibrary_9025 = _sl_dlopen();
  }
  int v0 = (void *)MapKitLibraryCore_frameworkLibrary_9025;
  if (!MapKitLibraryCore_frameworkLibrary_9025)
  {
    int v0 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"void *MapKitLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"DCMapsLink+MKDirections.m", 19, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  size_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getMKLaunchOptionsShowsTrafficKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MapKitLibrary_8993();
  uint64_t result = dlsym(v2, "MKLaunchOptionsShowsTrafficKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKLaunchOptionsShowsTrafficKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMKLaunchOptionsDirectionsModeKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MapKitLibrary_8993();
  uint64_t result = dlsym(v2, "MKLaunchOptionsDirectionsModeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKLaunchOptionsDirectionsModeKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCLLocationCoordinate2DIsValidSymbolLoc_block_invoke_9000(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_9016)
  {
    v5[1] = (void *)MEMORY[0x263EF8330];
    v5[2] = (void *)3221225472;
    v5[3] = __CoreLocationLibraryCore_block_invoke_9017;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_264287740;
    uint64_t v7 = 0;
    CoreLocationLibraryCore_frameworkLibrary_9016 = _sl_dlopen();
  }
  size_t v2 = (void *)CoreLocationLibraryCore_frameworkLibrary_9016;
  if (!CoreLocationLibraryCore_frameworkLibrary_9016)
  {
    a1 = [MEMORY[0x263F08690] currentHandler];
    size_t v2 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"DCMapsLink+MKDirections.m", 36, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  size_t v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "CLLocationCoordinate2DIsValid");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getCLLocationCoordinate2DIsValidSymbolLoc_ptr_8999 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

void *__getMKLaunchOptionsMapCenterKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MapKitLibrary_8993();
  uint64_t result = dlsym(v2, "MKLaunchOptionsMapCenterKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKLaunchOptionsMapCenterKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id getMKMapItemClass_9004()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getMKMapItemClass_softClass_9012;
  uint64_t v7 = getMKMapItemClass_softClass_9012;
  if (!getMKMapItemClass_softClass_9012)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMKMapItemClass_block_invoke_9013;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getMKMapItemClass_block_invoke_9013((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21656DEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getMKPlacemarkClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getMKPlacemarkClass_softClass_9005;
  uint64_t v7 = getMKPlacemarkClass_softClass_9005;
  if (!getMKPlacemarkClass_softClass_9005)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMKPlacemarkClass_block_invoke_9006;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getMKPlacemarkClass_block_invoke_9006((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21656DFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKPlacemarkClass_block_invoke_9006(uint64_t a1)
{
  MapKitLibrary_8993();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKPlacemark");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKPlacemarkClass_softClass_9005 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"Class getMKPlacemarkClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"DCMapsLink+MKDirections.m", 23, @"Unable to find class %s", "MKPlacemark");

    __break(1u);
  }
}

void __getMKMapItemClass_block_invoke_9013(uint64_t a1)
{
  MapKitLibrary_8993();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKMapItemClass_softClass_9012 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"Class getMKMapItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"DCMapsLink+MKDirections.m", 22, @"Unable to find class %s", "MKMapItem");

    __break(1u);
  }
}

uint64_t __CoreLocationLibraryCore_block_invoke_9017()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_9016 = result;
  return result;
}

uint64_t __MapKitLibraryCore_block_invoke_9026()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary_9025 = result;
  return result;
}

void sub_21656E800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMKLaunchOptionsDirectionsModeWalkingSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MapKitLibrary_8993();
  uint64_t result = dlsym(v2, "MKLaunchOptionsDirectionsModeWalking");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKLaunchOptionsDirectionsModeWalkingSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMKLaunchOptionsDirectionsModeTransitSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MapKitLibrary_8993();
  uint64_t result = dlsym(v2, "MKLaunchOptionsDirectionsModeTransit");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKLaunchOptionsDirectionsModeTransitSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMKLaunchOptionsDirectionsModeDrivingSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MapKitLibrary_8993();
  uint64_t result = dlsym(v2, "MKLaunchOptionsDirectionsModeDriving");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKLaunchOptionsDirectionsModeDrivingSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMKLaunchOptionsDirectionsModeCyclingSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MapKitLibrary_8993();
  uint64_t result = dlsym(v2, "MKLaunchOptionsDirectionsModeCycling");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKLaunchOptionsDirectionsModeCyclingSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMKLaunchOptionsDirectionsModeDefaultSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MapKitLibrary_8993();
  uint64_t result = dlsym(v2, "MKLaunchOptionsDirectionsModeDefault");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKLaunchOptionsDirectionsModeDefaultSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_21656ED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKDirectionsRequestClass_block_invoke(uint64_t a1)
{
  MapKitLibrary_8993();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKDirectionsRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKDirectionsRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"Class getMKDirectionsRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"DCMapsLink+MKDirections.m", 20, @"Unable to find class %s", "MKDirectionsRequest");

    __break(1u);
  }
}

void __getMKDirectionsClass_block_invoke(uint64_t a1)
{
  MapKitLibrary_8993();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKDirections");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKDirectionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"Class getMKDirectionsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"DCMapsLink+MKDirections.m", 21, @"Unable to find class %s", "MKDirections");

    __break(1u);
  }
}

uint64_t WFUIImageOrientationFromCGImagePropertyOrientation(int a1)
{
  if ((a1 - 2) > 6) {
    return 0;
  }
  else {
    return qword_216612A38[a1 - 2];
  }
}

uint64_t WFCGImagePropertyOrientationFromUIImageOrientation(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6) {
    return 1;
  }
  else {
    return dword_216612A70[a1 - 1];
  }
}

void sub_216571758(_Unwind_Exception *a1)
{
}

id getEKReminderClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getEKReminderClass_softClass;
  uint64_t v7 = getEKReminderClass_softClass;
  if (!getEKReminderClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getEKReminderClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getEKReminderClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_216571964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEKEventClass_block_invoke_9372(uint64_t a1)
{
  EventKitLibrary_9412();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EKEvent");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEKEventClass_softClass_9371 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"Class getEKEventClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFVCalendarFormatter.m", 16, @"Unable to find class %s", "EKEvent");

    __break(1u);
  }
}

void EventKitLibrary_9412()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!EventKitLibraryCore_frameworkLibrary_9422)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __EventKitLibraryCore_block_invoke_9423;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_2642877C8;
    uint64_t v5 = 0;
    EventKitLibraryCore_frameworkLibrary_9422 = _sl_dlopen();
  }
  if (!EventKitLibraryCore_frameworkLibrary_9422)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    size_t v2 = [NSString stringWithUTF8String:"void *EventKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFVCalendarFormatter.m", 14, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  int v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __EventKitLibraryCore_block_invoke_9423()
{
  uint64_t result = _sl_dlopen();
  EventKitLibraryCore_frameworkLibrary_9422 = result;
  return result;
}

void __getEKReminderClass_block_invoke(uint64_t a1)
{
  EventKitLibrary_9412();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EKReminder");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEKReminderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"Class getEKReminderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFVCalendarFormatter.m", 15, @"Unable to find class %s", "EKReminder");

    __break(1u);
  }
}

id getWFApplicationContextLogObject()
{
  if (getWFApplicationContextLogObject_onceToken != -1) {
    dispatch_once(&getWFApplicationContextLogObject_onceToken, &__block_literal_global_9622);
  }
  int v0 = (void *)getWFApplicationContextLogObject_log;
  return v0;
}

uint64_t __getWFApplicationContextLogObject_block_invoke()
{
  getWFApplicationContextLogObject_log = (uint64_t)os_log_create((const char *)*MEMORY[0x263F85748], "ApplicationContext");
  return MEMORY[0x270F9A758]();
}

id getAVAssetClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getAVAssetClass_softClass_9728;
  uint64_t v7 = getAVAssetClass_softClass_9728;
  if (!getAVAssetClass_softClass_9728)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAVAssetClass_block_invoke_9729;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getAVAssetClass_block_invoke_9729((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_216572BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVMutableMovieClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getAVMutableMovieClass_softClass;
  uint64_t v7 = getAVMutableMovieClass_softClass;
  if (!getAVMutableMovieClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAVMutableMovieClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getAVMutableMovieClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_216572CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVMutableMovieClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_9711();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVMutableMovie");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVMutableMovieClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"Class getAVMutableMovieClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAVAssetContentItem.m", 36, @"Unable to find class %s", "AVMutableMovie");

    __break(1u);
  }
}

void *AVFoundationLibrary_9711()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_9720)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_9721;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264287940;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_9720 = _sl_dlopen();
  }
  int v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_9720;
  if (!AVFoundationLibraryCore_frameworkLibrary_9720)
  {
    int v0 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAVAssetContentItem.m", 29, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __AVFoundationLibraryCore_block_invoke_9721()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_9720 = result;
  return result;
}

void __getAVAssetClass_block_invoke_9729(uint64_t a1)
{
  AVFoundationLibrary_9711();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetClass_softClass_9728 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"Class getAVAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAVAssetContentItem.m", 30, @"Unable to find class %s", "AVAsset");

    __break(1u);
  }
}

id getAVURLAssetClass_9736()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getAVURLAssetClass_softClass_9742;
  uint64_t v7 = getAVURLAssetClass_softClass_9742;
  if (!getAVURLAssetClass_softClass_9742)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAVURLAssetClass_block_invoke_9743;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getAVURLAssetClass_block_invoke_9743((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_216573498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVURLAssetClass_block_invoke_9743(uint64_t a1)
{
  AVFoundationLibrary_9711();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVURLAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVURLAssetClass_softClass_9742 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"Class getAVURLAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAVAssetContentItem.m", 31, @"Unable to find class %s", "AVURLAsset");

    __break(1u);
  }
}

void sub_216575034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
}

void sub_216575810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVAssetExportPresetPassthroughSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_9711();
  uint64_t result = dlsym(v2, "AVAssetExportPresetPassthrough");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPresetPassthroughSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getAVAssetExportSessionClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_9711();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetExportSession");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetExportSessionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    size_t v3 = [NSString stringWithUTF8String:"Class getAVAssetExportSessionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAVAssetContentItem.m", 33, @"Unable to find class %s", "AVAssetExportSession");

    __break(1u);
  }
}

void *__getAVAssetExportPresetAppleM4ASymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_9711();
  uint64_t result = dlsym(v2, "AVAssetExportPresetAppleM4A");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPresetAppleM4ASymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVFileTypeAppleM4ASymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_9711();
  uint64_t result = dlsym(v2, "AVFileTypeAppleM4A");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVFileTypeAppleM4ASymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_216575F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVMetadataItemClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getAVMetadataItemClass_softClass;
  uint64_t v7 = getAVMetadataItemClass_softClass;
  if (!getAVMetadataItemClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAVMetadataItemClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getAVMetadataItemClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_216576010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVMetadataCommonKeyLocationSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_9711();
  uint64_t result = dlsym(v2, "AVMetadataCommonKeyLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataCommonKeyLocationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void getAVMetadataKeySpaceCommon()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v0 = (void **)getAVMetadataKeySpaceCommonSymbolLoc_ptr;
  uint64_t v9 = getAVMetadataKeySpaceCommonSymbolLoc_ptr;
  if (!getAVMetadataKeySpaceCommonSymbolLoc_ptr)
  {
    id v1 = AVFoundationLibrary_9711();
    v7[3] = (uint64_t)dlsym(v1, "AVMetadataKeySpaceCommon");
    getAVMetadataKeySpaceCommonSymbolLoc_ptr = v7[3];
    int v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"AVMetadataKeySpace getAVMetadataKeySpaceCommon(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAVAssetContentItem.m", 40, @"%s", dlerror());

    __break(1u);
  }
}

void sub_2165761C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCLLocationClass_block_invoke_9767(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_9768)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreLocationLibraryCore_block_invoke_9769;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264287970;
    uint64_t v8 = 0;
    CoreLocationLibraryCore_frameworkLibrary_9768 = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary_9768)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFAVAssetContentItem.m", 26, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CLLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFAVAssetContentItem.m", 27, @"Unable to find class %s", "CLLocation");

LABEL_10:
    __break(1u);
  }
  getCLLocationClass_softClass_9766 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke_9769()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_9768 = result;
  return result;
}

void *__getAVMetadataKeySpaceCommonSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_9711();
  uint64_t result = dlsym(v2, "AVMetadataKeySpaceCommon");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataKeySpaceCommonSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getAVMetadataItemClass_block_invoke(uint64_t a1)
{
  AVFoundationLibrary_9711();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVMetadataItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVMetadataItemClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVMetadataItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAVAssetContentItem.m", 32, @"Unable to find class %s", "AVMetadataItem");

    __break(1u);
  }
}

void sub_2165767D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCMTimeGetSecondsSymbolLoc_block_invoke_9777(uint64_t a1)
{
  size_t v2 = CoreMediaLibrary_9778();
  uint64_t result = dlsym(v2, "CMTimeGetSeconds");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMTimeGetSecondsSymbolLoc_ptr_9776 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CoreMediaLibrary_9778()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreMediaLibraryCore_frameworkLibrary_9784)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreMediaLibraryCore_block_invoke_9785;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264287958;
    uint64_t v6 = 0;
    CoreMediaLibraryCore_frameworkLibrary_9784 = _sl_dlopen();
  }
  int v0 = (void *)CoreMediaLibraryCore_frameworkLibrary_9784;
  if (!CoreMediaLibraryCore_frameworkLibrary_9784)
  {
    int v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreMediaLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFAVAssetContentItem.m", 21, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CoreMediaLibraryCore_block_invoke_9785()
{
  uint64_t result = _sl_dlopen();
  CoreMediaLibraryCore_frameworkLibrary_9784 = result;
  return result;
}

void sub_216576D80(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void *__getkCMTimeZeroSymbolLoc_block_invoke_9790(uint64_t a1)
{
  size_t v2 = CoreMediaLibrary_9778();
  uint64_t result = dlsym(v2, "kCMTimeZero");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkCMTimeZeroSymbolLoc_ptr_9789 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCMTimeRangeMakeSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = CoreMediaLibrary_9778();
  uint64_t result = dlsym(v2, "CMTimeRangeMake");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMTimeRangeMakeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_216576FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVMediaTypeVideoSymbolLoc_block_invoke_9794(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_9711();
  uint64_t result = dlsym(v2, "AVMediaTypeVideo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMediaTypeVideoSymbolLoc_ptr_9793 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_216577B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void *__getAVMetadataCommonKeyTitleSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_9711();
  uint64_t result = dlsym(v2, "AVMetadataCommonKeyTitle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataCommonKeyTitleSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVMetadataCommonKeyArtistSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_9711();
  uint64_t result = dlsym(v2, "AVMetadataCommonKeyArtist");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataCommonKeyArtistSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getAVMetadataCommonKeyAlbumNameSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_9711();
  uint64_t result = dlsym(v2, "AVMetadataCommonKeyAlbumName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataCommonKeyAlbumNameSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_216577F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVMetadataCommonKeyArtworkSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_9711();
  uint64_t result = dlsym(v2, "AVMetadataCommonKeyArtwork");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataCommonKeyArtworkSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_216579374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getREMSaveRequestClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!ReminderKitLibraryCore_frameworkLibrary_10055)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __ReminderKitLibraryCore_block_invoke_10056;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_2642879D8;
    uint64_t v8 = 0;
    ReminderKitLibraryCore_frameworkLibrary_10055 = _sl_dlopen();
  }
  if (!ReminderKitLibraryCore_frameworkLibrary_10055)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *ReminderKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFReminderContentItemChangeTransaction.m", 17, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("REMSaveRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getREMSaveRequestClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFReminderContentItemChangeTransaction.m", 18, @"Unable to find class %s", "REMSaveRequest");

LABEL_10:
    __break(1u);
  }
  getREMSaveRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ReminderKitLibraryCore_block_invoke_10056()
{
  uint64_t result = _sl_dlopen();
  ReminderKitLibraryCore_frameworkLibrary_10055 = result;
  return result;
}

void WFRegisterClassesFromClassVendingMethodsIfNeeded(void *a1, void *a2, os_unfair_lock_s *a3, atomic_uchar *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a5;
  id v13 = a6;
  os_unfair_lock_lock(a3);
  int v14 = 1;
  atomic_compare_exchange_strong(a4, (unsigned __int8 *)&v14, 0);
  if (v14 == 1)
  {
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 3221225472;
    v15[2] = __WFRegisterClassesFromClassVendingMethodsIfNeeded_block_invoke;
    v15[3] = &unk_2642879F8;
    id v16 = v12;
    uint64_t v18 = a1;
    id v17 = v13;
    objc_msgSend(a1, "wf_enumerateClassMethodsWithPrefix:usingBlock:", v11, v15);
  }
  os_unfair_lock_unlock(a3);
}

void __WFRegisterClassesFromClassVendingMethodsIfNeeded_block_invoke(uint64_t a1, objc_method *a2, SEL aSelector)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v6 = NSStringFromSelector(aSelector);
  if (([*(id *)(a1 + 32) containsObject:v6] & 1) == 0
    && method_getNumberOfArguments(a2) <= 2
    && WFMethodReturnsObject(a2))
  {
    [*(id *)(a1 + 32) addObject:v6];
    long long v7 = [*(id *)(a1 + 48) aSelector];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      id v8 = v7;
      uint64_t v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v14;
        do
        {
          uint64_t v12 = 0;
          do
          {
            if (*(void *)v14 != v11) {
              objc_enumerationMutation(v8);
            }
            if (object_isClass(*(id *)(*((void *)&v13 + 1) + 8 * v12))) {
              (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
            }
            ++v12;
          }
          while (v10 != v12);
          uint64_t v10 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
        }
        while (v10);
      }
    }
  }
}

void getMPMediaItemPropertyArtwork()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v0 = (void **)getMPMediaItemPropertyArtworkSymbolLoc_ptr;
  uint64_t v9 = getMPMediaItemPropertyArtworkSymbolLoc_ptr;
  if (!getMPMediaItemPropertyArtworkSymbolLoc_ptr)
  {
    uint64_t v1 = MediaPlayerLibrary();
    v7[3] = (uint64_t)dlsym(v1, "MPMediaItemPropertyArtwork");
    getMPMediaItemPropertyArtworkSymbolLoc_ptr = v7[3];
    int v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getMPMediaItemPropertyArtwork(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFMPMediaContentItem.m", 48, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21657A414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getMPMediaItemPropertyAlbumTitle()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v0 = (void **)getMPMediaItemPropertyAlbumTitleSymbolLoc_ptr;
  uint64_t v9 = getMPMediaItemPropertyAlbumTitleSymbolLoc_ptr;
  if (!getMPMediaItemPropertyAlbumTitleSymbolLoc_ptr)
  {
    uint64_t v1 = MediaPlayerLibrary();
    v7[3] = (uint64_t)dlsym(v1, "MPMediaItemPropertyAlbumTitle");
    getMPMediaItemPropertyAlbumTitleSymbolLoc_ptr = v7[3];
    int v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getMPMediaItemPropertyAlbumTitle(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFMPMediaContentItem.m", 37, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21657A57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAVURLAssetClass_10305()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getAVURLAssetClass_softClass_10310;
  uint64_t v7 = getAVURLAssetClass_softClass_10310;
  if (!getAVURLAssetClass_softClass_10310)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getAVURLAssetClass_block_invoke_10311;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getAVURLAssetClass_block_invoke_10311((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21657A660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVURLAssetClass_block_invoke_10311(uint64_t a1)
{
  AVFoundationLibrary_10312();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVURLAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVURLAssetClass_softClass_10310 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVURLAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMPMediaContentItem.m", 28, @"Unable to find class %s", "AVURLAsset");

    __break(1u);
  }
}

void *AVFoundationLibrary_10312()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_10321)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_10322;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264287B88;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_10321 = _sl_dlopen();
  }
  int v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_10321;
  if (!AVFoundationLibraryCore_frameworkLibrary_10321)
  {
    int v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMPMediaContentItem.m", 27, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __AVFoundationLibraryCore_block_invoke_10322()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_10321 = result;
  return result;
}

void *__getMPMediaItemPropertyAlbumTitleSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyAlbumTitle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyAlbumTitleSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *MediaPlayerLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_10342)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __MediaPlayerLibraryCore_block_invoke_10343;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264287B70;
    uint64_t v6 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_10342 = _sl_dlopen();
  }
  int v0 = (void *)MediaPlayerLibraryCore_frameworkLibrary_10342;
  if (!MediaPlayerLibraryCore_frameworkLibrary_10342)
  {
    int v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMPMediaContentItem.m", 32, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_10343()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_10342 = result;
  return result;
}

void *__getMPMediaItemPropertyArtworkSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyArtwork");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyArtworkSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_21657B20C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void __getAVAssetExportSessionClass_block_invoke_10351(uint64_t a1)
{
  AVFoundationLibrary_10312();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVAssetExportSession");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVAssetExportSessionClass_softClass_10350 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVAssetExportSessionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMPMediaContentItem.m", 29, @"Unable to find class %s", "AVAssetExportSession");

    __break(1u);
  }
}

void *__getAVAssetExportPresetAppleM4ASymbolLoc_block_invoke_10353(uint64_t a1)
{
  size_t v2 = AVFoundationLibrary_10312();
  uint64_t result = dlsym(v2, "AVAssetExportPresetAppleM4A");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVAssetExportPresetAppleM4ASymbolLoc_ptr_10352 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkCMTimeZeroSymbolLoc_block_invoke_10357(uint64_t a1)
{
  size_t v2 = CoreMediaLibrary_10358();
  uint64_t result = dlsym(v2, "kCMTimeZero");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkCMTimeZeroSymbolLoc_ptr_10356 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CoreMediaLibrary_10358()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreMediaLibraryCore_frameworkLibrary_10365)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreMediaLibraryCore_block_invoke_10366;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264287BA0;
    uint64_t v6 = 0;
    CoreMediaLibraryCore_frameworkLibrary_10365 = _sl_dlopen();
  }
  int v0 = (void *)CoreMediaLibraryCore_frameworkLibrary_10365;
  if (!CoreMediaLibraryCore_frameworkLibrary_10365)
  {
    int v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreMediaLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMPMediaContentItem.m", 23, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getCMTimeRangeMakeSymbolLoc_block_invoke_10362(uint64_t a1)
{
  size_t v2 = CoreMediaLibrary_10358();
  uint64_t result = dlsym(v2, "CMTimeRangeMake");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMTimeRangeMakeSymbolLoc_ptr_10361 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreMediaLibraryCore_block_invoke_10366()
{
  uint64_t result = _sl_dlopen();
  CoreMediaLibraryCore_frameworkLibrary_10365 = result;
  return result;
}

void sub_21657B954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMPMediaItemPropertyAssetURLSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyAssetURL");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyAssetURLSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_21657BA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaItemClass_block_invoke_10380(uint64_t a1)
{
  MediaPlayerLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaItemClass_softClass_10379 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMPMediaContentItem.m", 33, @"Unable to find class %s", "MPMediaItem");

    __break(1u);
  }
}

void getMPMediaItemPropertyDiscNumber()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v0 = (void **)getMPMediaItemPropertyDiscNumberSymbolLoc_ptr;
  uint64_t v9 = getMPMediaItemPropertyDiscNumberSymbolLoc_ptr;
  if (!getMPMediaItemPropertyDiscNumberSymbolLoc_ptr)
  {
    uint64_t v1 = MediaPlayerLibrary();
    v7[3] = (uint64_t)dlsym(v1, "MPMediaItemPropertyDiscNumber");
    getMPMediaItemPropertyDiscNumberSymbolLoc_ptr = v7[3];
    int v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getMPMediaItemPropertyDiscNumber(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFMPMediaContentItem.m", 47, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21657C364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getMPMediaItemPropertyAlbumTrackNumber()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v0 = (void **)getMPMediaItemPropertyAlbumTrackNumberSymbolLoc_ptr;
  uint64_t v9 = getMPMediaItemPropertyAlbumTrackNumberSymbolLoc_ptr;
  if (!getMPMediaItemPropertyAlbumTrackNumberSymbolLoc_ptr)
  {
    uint64_t v1 = MediaPlayerLibrary();
    v7[3] = (uint64_t)dlsym(v1, "MPMediaItemPropertyAlbumTrackNumber");
    getMPMediaItemPropertyAlbumTrackNumberSymbolLoc_ptr = v7[3];
    int v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getMPMediaItemPropertyAlbumTrackNumber(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFMPMediaContentItem.m", 46, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21657C4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void WFInsertSortDescriptorAroundDescriptorMatchingUserInfo(void *a1, void *a2, int a3, unsigned int a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a5;
  uint64_t v12 = [v9 sortDescriptors];
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 3221225472;
  v20[2] = __WFInsertSortDescriptorAroundDescriptorMatchingUserInfo_block_invoke;
  void v20[3] = &unk_264287BC0;
  id v13 = v11;
  id v21 = v13;
  uint64_t v14 = [v12 indexOfObjectPassingTest:v20];
  if (v14 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v15 = v14;
    long long v16 = [v12 objectAtIndex:v14];
    id v17 = (void *)[v12 mutableCopy];
    if (a3) {
      uint64_t v18 = [v16 ascending];
    }
    else {
      uint64_t v18 = 1;
    }
    uint64_t v19 = +[WFContentSortDescriptor sortDescriptorWithProperty:v10 ascending:v18 comparator:0];
    [v17 insertObject:v19 atIndex:v15 + a4];
    [v9 setSortDescriptors:v17];
  }
}

void sub_21657C828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaQueryClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaQuery");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaQueryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaQueryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMPMediaContentItem.m", 34, @"Unable to find class %s", "MPMediaQuery");

    __break(1u);
  }
}

uint64_t __WFInsertSortDescriptorAroundDescriptorMatchingUserInfo_block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 property];
  uint64_t v4 = [v3 userInfo];
  uint64_t v5 = [v4 isEqual:*(void *)(a1 + 32)];

  return v5;
}

void *__getMPMediaItemPropertyAlbumTrackNumberSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyAlbumTrackNumber");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyAlbumTrackNumberSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyDiscNumberSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyDiscNumber");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyDiscNumberSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_21657F084(_Unwind_Exception *a1)
{
}

void *__getMPMediaItemPropertyTitleSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyTitle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyTitleSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyArtistSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyArtist");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyArtistSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyAlbumArtistSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyAlbumArtist");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyAlbumArtistSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyGenreSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyGenre");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyGenreSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyComposerSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyComposer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyComposerSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyDateAddedSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyDateAdded");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyDateAddedSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyMediaTypeSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyMediaType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyMediaTypeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyPlaybackDurationSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyPlaybackDuration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyPlaybackDurationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyPlayCountSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyPlayCount");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyPlayCountSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyIsExplicitSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyIsExplicit");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyIsExplicitSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyLyricsSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyLyrics");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyLyricsSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyReleaseDateSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyReleaseDate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyReleaseDateSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyCommentsSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyComments");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyCommentsSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyIsCloudItemSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyIsCloudItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyIsCloudItemSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertySkipCountSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertySkipCount");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertySkipCountSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyLastPlayedDateSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyLastPlayedDate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyLastPlayedDateSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMPMediaItemPropertyRatingSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = MediaPlayerLibrary();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyRating");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyRatingSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_216580A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBKSProcessAssertionClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!AssertionServicesLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __AssertionServicesLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264287BF0;
    uint64_t v8 = 0;
    AssertionServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AssertionServicesLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *AssertionServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFBKSBackgroundAssertion.m", 14, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("BKSProcessAssertion");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getBKSProcessAssertionClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFBKSBackgroundAssertion.m", 16, @"Unable to find class %s", "BKSProcessAssertion");

LABEL_10:
    __break(1u);
  }
  getBKSProcessAssertionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getRBSProcessHandleClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!RunningBoardServicesLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __RunningBoardServicesLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264287C08;
    uint64_t v8 = 0;
    RunningBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!RunningBoardServicesLibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *RunningBoardServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFBKSBackgroundAssertion.m", 15, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("RBSProcessHandle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getRBSProcessHandleClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFBKSBackgroundAssertion.m", 17, @"Unable to find class %s", "RBSProcessHandle");

LABEL_10:
    __break(1u);
  }
  getRBSProcessHandleClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __RunningBoardServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  RunningBoardServicesLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t __AssertionServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AssertionServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_216582D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t __Block_byref_object_copy__10932(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10933(uint64_t a1)
{
}

id getWFBackgroundAssertionLogObject()
{
  if (getWFBackgroundAssertionLogObject_onceToken != -1) {
    dispatch_once(&getWFBackgroundAssertionLogObject_onceToken, &__block_literal_global_10978);
  }
  int v0 = (void *)getWFBackgroundAssertionLogObject_log;
  return v0;
}

uint64_t __getWFBackgroundAssertionLogObject_block_invoke()
{
  getWFBackgroundAssertionLogObject_log = (uint64_t)os_log_create((const char *)*MEMORY[0x263F85748], "BackgroundAssertion");
  return MEMORY[0x270F9A758]();
}

void sub_216584198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11102(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11103(uint64_t a1)
{
}

id getWFPhotoLibraryFilteringLogObject()
{
  if (getWFPhotoLibraryFilteringLogObject_onceToken != -1) {
    dispatch_once(&getWFPhotoLibraryFilteringLogObject_onceToken, &__block_literal_global_11131);
  }
  int v0 = (void *)getWFPhotoLibraryFilteringLogObject_log;
  return v0;
}

id getPHAssetClass_11110()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getPHAssetClass_softClass_11111;
  uint64_t v7 = getPHAssetClass_softClass_11111;
  if (!getPHAssetClass_softClass_11111)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getPHAssetClass_block_invoke_11112;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getPHAssetClass_block_invoke_11112((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_216584580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPHAssetClass_block_invoke_11112(uint64_t a1)
{
  PhotosLibrary_11113();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetClass_softClass_11111 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoLibraryFiltering.m", 23, @"Unable to find class %s", "PHAsset");

    __break(1u);
  }
}

void PhotosLibrary_11113()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_11123)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __PhotosLibraryCore_block_invoke_11124;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264287E48;
    uint64_t v5 = 0;
    PhotosLibraryCore_frameworkLibrary_11123 = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary_11123)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    size_t v2 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFPhotoLibraryFiltering.m", 21, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  int v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __PhotosLibraryCore_block_invoke_11124()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_11123 = result;
  return result;
}

uint64_t __getWFPhotoLibraryFilteringLogObject_block_invoke()
{
  getWFPhotoLibraryFilteringLogObject_log = (uint64_t)os_log_create((const char *)*MEMORY[0x263F85748], "PhotoLibraryFiltering");
  return MEMORY[0x270F9A758]();
}

id WFPHAssetPredicateFromContentPredicate(void *a1, void *a2)
{
  v91[3] = *(id *)MEMORY[0x263EF8340];
  id v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v19 = objc_alloc(MEMORY[0x263F08730]);
        id v11 = (void *)[v19 initWithType:1 subpredicates:MEMORY[0x263EFFA68]];
      }
      else
      {
        id v11 = 0;
      }
      goto LABEL_71;
    }
    id v12 = v3;
    id v13 = [v12 value];
    if (!v13)
    {
      id v11 = 0;
LABEL_70:

      goto LABEL_71;
    }
    uint64_t v14 = [v12 property];
    uint64_t v15 = [v12 comparisonType];
    long long v16 = [v14 name];
    id v17 = WFLocalizedContentPropertyNameMarkerWithContext(@"Album", @"Image Content Item");
    int v18 = [v16 isEqualToString:v17];

    if (v18)
    {
      if ((unint64_t)(v15 - 6) < 0xFFFFFFFFFFFFFFFELL)
      {
        id v11 = 0;
LABEL_69:

        goto LABEL_70;
      }
      long long v32 = +[WFPhotoMediaContentItem photoAlbums];
      id v25 = [v32 objectMatchingKey:@"wfName" value:v13];

      if (v25)
      {
        id v33 = [[WFPHAssetCollectionPredicate alloc] initForAssetsInCollection:v25];
        uint64_t v34 = v33;
        if (v15 == 5)
        {
          id v35 = [MEMORY[0x263F08730] notPredicateWithSubpredicate:v33];
        }
        else
        {
          id v35 = v33;
        }
        id v11 = v35;

        goto LABEL_68;
      }
      uint64_t v57 = WFLocalizedString(@"Photo Album Not Found");
      uint64_t v58 = WFLocalizedString(@"The “Find Photos” action couldn’t find the album “%@”.");
      uint64_t v59 = objc_msgSend(NSString, "localizedStringWithFormat:", v58, v13);
      uint64_t v60 = *MEMORY[0x263F08320];
      *(void *)&long long v86 = *MEMORY[0x263F08338];
      *((void *)&v86 + 1) = v60;
      *(void *)buf = v57;
      *(void *)&buf[8] = v59;
      id v61 = [NSDictionary dictionaryWithObjects:buf forKeys:&v86 count:2];
      *a2 = [MEMORY[0x263F087E8] errorWithDomain:@"WFPhotoLibraryFilteringErrorDomain" code:0 userInfo:v61];

      id v25 = 0;
      goto LABEL_67;
    }
    int v20 = [v14 name];
    id v21 = WFLocalizedContentPropertyNameMarker(@"Is a Screenshot");
    int v22 = [v20 isEqualToString:v21];

    if (v22)
    {
      uint64_t v23 = +[WFSharedPhotoLibrary sharedLibrary];
      v91[0] = 0;
      uint64_t v24 = [v23 fetchOptionsWithError:v91];
      id v25 = v91[0];

      if (v24)
      {
        [v24 setWantsIncrementalChangeDetails:0];
        *(void *)&long long v86 = 0;
        *((void *)&v86 + 1) = &v86;
        *(void *)&long long v87 = 0x2050000000;
        uint64_t v26 = (void *)getPHAssetCollectionClass_softClass_11169;
        *((void *)&v87 + 1) = getPHAssetCollectionClass_softClass_11169;
        if (!getPHAssetCollectionClass_softClass_11169)
        {
          *(void *)buf = MEMORY[0x263EF8330];
          *(void *)&buf[8] = 3221225472;
          *(void *)&buf[16] = __getPHAssetCollectionClass_block_invoke_11170;
          id v84 = &unk_26428AC60;
          uint64_t v85 = &v86;
          __getPHAssetCollectionClass_block_invoke_11170((uint64_t)buf);
          uint64_t v26 = *(void **)(*((void *)&v86 + 1) + 24);
        }
        id v27 = v26;
        _Block_object_dispose(&v86, 8);
        BOOL v28 = [v27 fetchAssetCollectionsWithType:2 subtype:211 options:v24];
        uint64_t v29 = [v28 firstObject];

        if (v29)
        {
          id v30 = [[WFPHAssetCollectionPredicate alloc] initForAssetsInCollection:v29];
          if (v15 == 5)
          {
            if ([v13 BOOLValue])
            {
LABEL_30:
              id v31 = [MEMORY[0x263F08730] notPredicateWithSubpredicate:v30];
LABEL_54:
              id v11 = v31;
LABEL_56:

              goto LABEL_57;
            }
          }
          else
          {
            if (v15 != 4)
            {
              id v11 = 0;
              goto LABEL_56;
            }
            if (([v13 BOOLValue] & 1) == 0) {
              goto LABEL_30;
            }
          }
          id v31 = v30;
          goto LABEL_54;
        }
      }
      else
      {
        uint64_t v29 = getWFGeneralLogObject();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "WFPHAssetPredicateFromContentComparisonPredicate";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v25;
          _os_log_impl(&dword_216505000, v29, OS_LOG_TYPE_ERROR, "%s Unable to get fetch options for photo library: %@", buf, 0x16u);
        }
      }
      id v11 = 0;
LABEL_57:

      goto LABEL_68;
    }
    long long v36 = [v14 name];
    long long v37 = WFLocalizedContentPropertyNameMarker(@"Photo Type");
    int v38 = [v36 isEqualToString:v37];

    if (v38)
    {
      long long v39 = WFLocalizedContentPropertyPossibleValueMarker(@"HDR");
      v90[0] = v39;
      v91[0] = &unk_26C741F20;
      id v40 = WFLocalizedContentPropertyPossibleValueMarker(@"Panorama");
      v90[1] = v40;
      v91[1] = &unk_26C741F38;
      uint64_t v41 = WFLocalizedContentPropertyPossibleValueMarker(@"Live Photo");
      v90[2] = v41;
      v91[2] = &unk_26C741F50;
      id v25 = [NSDictionary dictionaryWithObjects:v91 forKeys:v90 count:3];

      id v82 = [v25 objectForKey:v13];
      if (v82)
      {
        int v81 = [MEMORY[0x263F087F0] expressionForKeyPath:@"mediaSubtype"];
        int v42 = [MEMORY[0x263F087F0] expressionForConstantValue:v82];
        uint64_t v43 = (void *)MEMORY[0x263F08720];
        unint64_t v44 = (void *)MEMORY[0x263F087F0];
        *(void *)buf = v81;
        *(void *)&buf[8] = v42;
        uint64_t v45 = [MEMORY[0x263EFF8C0] arrayWithObjects:buf count:2];
        CFURLRef v46 = [v44 expressionForFunction:@"bitwiseAnd:with:" arguments:v45];
        id v11 = [v43 predicateWithLeftExpression:v46 rightExpression:v42 modifier:0 type:v15 options:0];

LABEL_51:
LABEL_68:

        goto LABEL_69;
      }
      uint64_t v62 = WFLocalizedContentPropertyPossibleValueMarker(@"Burst");
      int v63 = [v13 isEqual:v62];

      if (v63)
      {
        if (v15 == 4) {
          uint64_t v64 = 5;
        }
        else {
          uint64_t v64 = 4;
        }
        uint64_t v65 = (void *)MEMORY[0x263F08720];
        int v81 = [MEMORY[0x263F087F0] expressionForKeyPath:@"burstIdentifier"];
        int v42 = [MEMORY[0x263F087F0] expressionForConstantValue:0];
        id v11 = [v65 predicateWithLeftExpression:v81 rightExpression:v42 modifier:0 type:v64 options:0];
        goto LABEL_51;
      }
    }
    else
    {
      double v47 = [v14 name];
      CFDictionaryRef v48 = WFLocalizedContentPropertyNameMarker(@"Is a Screen Recording");
      int v49 = [v47 isEqualToString:v48];

      if (v49)
      {
        id v25 = [MEMORY[0x263F087F0] expressionForKeyPath:@"mediaSubtype"];
        double v50 = [MEMORY[0x263F087F0] expressionForConstantValue:&unk_26C741F68];
        uint64_t v51 = (void *)MEMORY[0x263F08720];
        CFURLRef v52 = (void *)MEMORY[0x263F087F0];
        *(void *)buf = v25;
        *(void *)&buf[8] = v50;
        size_t v53 = [MEMORY[0x263EFF8C0] arrayWithObjects:buf count:2];
        uint64_t v54 = [v52 expressionForFunction:@"bitwiseAnd:with:" arguments:v53];
        id v55 = [v51 predicateWithLeftExpression:v54 rightExpression:v50 modifier:0 type:v15 options:0];

        if ([v13 BOOLValue])
        {
          id v56 = v55;
        }
        else
        {
          id v56 = [MEMORY[0x263F08730] notPredicateWithSubpredicate:v55];
        }
        id v11 = v56;

        goto LABEL_68;
      }
    }
    WFPHAssetKeyPathForContentProperty(v14);
    id v25 = (id)objc_claimAutoreleasedReturnValue();
    if (v25)
    {
      uint64_t v66 = [v14 name];
      uint64_t v67 = WFLocalizedContentPropertyNameMarker(@"Media Type");
      int v68 = [v66 isEqualToString:v67];

      if (v68)
      {
        id v69 = v13;
        id v70 = WFLocalizedContentPropertyPossibleValueMarker(@"Image");
        *(void *)&long long v86 = v70;
        *(void *)buf = &unk_26C741F98;
        int v71 = WFLocalizedContentPropertyPossibleValueMarker(@"Video");
        *((void *)&v86 + 1) = v71;
        *(void *)&buf[8] = &unk_26C741FB0;
        int v72 = WFLocalizedContentPropertyPossibleValueMarker(@"Audio");
        *(void *)&long long v87 = v72;
        *(void *)&buf[16] = &unk_26C741FC8;
        BOOL v73 = [NSDictionary dictionaryWithObjects:buf forKeys:&v86 count:3];

        int v74 = [v73 objectForKey:v69];

        off_t v75 = &unk_26C741F80;
        if (v74) {
          off_t v75 = v74;
        }
        id v13 = v75;
      }
      uint64_t v76 = (void *)MEMORY[0x263F08720];
      uint64_t v77 = [MEMORY[0x263F087F0] expressionForKeyPath:v25];
      uint64_t v78 = [MEMORY[0x263F087F0] expressionForConstantValue:v13];
      uint64_t v79 = [v12 property];
      id v11 = objc_msgSend(v76, "predicateWithLeftExpression:rightExpression:modifier:type:options:", v77, v78, 0, v15, objc_msgSend(v79, "caseInsensitive"));

      goto LABEL_68;
    }
LABEL_67:
    id v11 = 0;
    goto LABEL_68;
  }
  id v4 = v3;
  uint64_t v5 = objc_opt_new();
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  uint64_t v6 = [v4 subpredicates];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v86 objects:buf count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v87;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v87 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = WFPHAssetPredicateFromContentPredicate(*(void *)(*((void *)&v86 + 1) + 8 * i), a2);
        if (!v10)
        {

          id v11 = 0;
          goto LABEL_17;
        }
        [v5 addObject:v10];
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v86 objects:buf count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  id v11 = objc_msgSend(objc_alloc(MEMORY[0x263F08730]), "initWithType:subpredicates:", objc_msgSend(v4, "compoundPredicateType"), v5);
LABEL_17:

LABEL_71:
  return v11;
}

void sub_216585EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

id WFPHAssetKeyPathForContentProperty(void *a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v1 = a1;
  size_t v2 = [v1 name];
  WFLocalizedContentPropertyNameMarker(@"Width");
  id v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = v3;
  id v21 = @"pixelWidth";
  WFLocalizedContentPropertyNameMarker(@"Height");
  id v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  long long v16 = v4;
  int v22 = @"pixelHeight";
  uint64_t v5 = WFLocalizedContentPropertyNameMarker(@"Date Taken");
  id v17 = v5;
  uint64_t v23 = @"creationDate";
  uint64_t v6 = WFLocalizedContentPropertyNameMarker(@"Time Taken");
  int v18 = v6;
  uint64_t v24 = @"creationDate";
  uint64_t v7 = WFLocalizedContentPropertyNameMarker(@"Is Favorite");
  id v19 = v7;
  id v25 = @"isFavorite";
  uint64_t v8 = WFLocalizedContentPropertyNameMarker(@"Media Type");
  int v20 = v8;
  uint64_t v26 = @"mediaType";
  uint64_t v9 = [NSDictionary dictionaryWithObjects:&v21 forKeys:&v15 count:6];

  id v10 = [v9 objectForKey:v2];

  if (v10)
  {
    id v11 = v10;
  }
  else
  {
    uint64_t v15 = @"WFFileModificationDate";
    long long v16 = @"WFFileCreationDate";
    id v21 = @"modificationDate";
    int v22 = @"creationDate";
    id v12 = [NSDictionary dictionaryWithObjects:&v21 forKeys:&v15 count:2];
    id v13 = [v1 userInfo];
    id v11 = [v12 objectForKey:v13];
  }
  return v11;
}

void __getPHAssetCollectionClass_block_invoke_11170(uint64_t a1)
{
  PhotosLibrary_11113();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PHAssetCollection");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPHAssetCollectionClass_softClass_11169 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getPHAssetCollectionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFPhotoLibraryFiltering.m", 24, @"Unable to find class %s", "PHAssetCollection");

    __break(1u);
  }
}

void sub_2165866A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNSaveRequestClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_11241();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNSaveRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNSaveRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class  _Nonnull getCNSaveRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCNContact.m", 37, @"Unable to find class %s", "CNSaveRequest");

    __break(1u);
  }
}

void *ContactsLibrary_11241()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary_11248)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __ContactsLibraryCore_block_invoke_11249;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264287FE0;
    uint64_t v6 = 0;
    ContactsLibraryCore_frameworkLibrary_11248 = _sl_dlopen();
  }
  int v0 = (void *)ContactsLibraryCore_frameworkLibrary_11248;
  if (!ContactsLibraryCore_frameworkLibrary_11248)
  {
    int v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void * _Nonnull ContactsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCNContact.m", 31, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __ContactsLibraryCore_block_invoke_11249()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary_11248 = result;
  return result;
}

void sub_216587194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCNContactStoreClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getCNContactStoreClass_softClass;
  uint64_t v7 = getCNContactStoreClass_softClass;
  if (!getCNContactStoreClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCNContactStoreClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getCNContactStoreClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21658727C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNContainerClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_11241();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNContainer");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNContainerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class  _Nonnull getCNContainerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCNContact.m", 40, @"Unable to find class %s", "CNContainer");

    __break(1u);
  }
}

void __getCNAccountClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_11241();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNAccount");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNAccountClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class  _Nonnull getCNAccountClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCNContact.m", 39, @"Unable to find class %s", "CNAccount");

    __break(1u);
  }
}

void __getCNContactStoreClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_11241();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNContactStore");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNContactStoreClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class  _Nonnull getCNContactStoreClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCNContact.m", 34, @"Unable to find class %s", "CNContactStore");

    __break(1u);
  }
}

id getCNLabeledValueClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getCNLabeledValueClass_softClass_11339;
  uint64_t v7 = getCNLabeledValueClass_softClass_11339;
  if (!getCNLabeledValueClass_softClass_11339)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCNLabeledValueClass_block_invoke_11340;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getCNLabeledValueClass_block_invoke_11340((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_216587854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNLabeledValueClass_block_invoke_11340(uint64_t a1)
{
  ContactsLibrary_11241();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNLabeledValue");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNLabeledValueClass_softClass_11339 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class  _Nonnull getCNLabeledValueClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCNContact.m", 38, @"Unable to find class %s", "CNLabeledValue");

    __break(1u);
  }
}

void sub_216588BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCNContactClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getCNContactClass_softClass;
  uint64_t v7 = getCNContactClass_softClass;
  if (!getCNContactClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCNContactClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getCNContactClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_216588CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCNContactBirthdayKeySymbolLoc_block_invoke_11350(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11241();
  uint64_t result = dlsym(v2, "CNContactBirthdayKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactBirthdayKeySymbolLoc_ptr_11349 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getCNContactClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_11241();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNContact");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNContactClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class  _Nonnull getCNContactClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCNContact.m", 35, @"Unable to find class %s", "CNContact");

    __break(1u);
  }
}

id getCNContactFormatterClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getCNContactFormatterClass_softClass;
  uint64_t v7 = getCNContactFormatterClass_softClass;
  if (!getCNContactFormatterClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCNContactFormatterClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getCNContactFormatterClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_216589684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNContactEmailAddressesKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v0 = (void **)getCNContactEmailAddressesKeySymbolLoc_ptr_11364;
  uint64_t v9 = getCNContactEmailAddressesKeySymbolLoc_ptr_11364;
  if (!getCNContactEmailAddressesKeySymbolLoc_ptr_11364)
  {
    id v1 = ContactsLibrary_11241();
    v7[3] = (uint64_t)dlsym(v1, "CNContactEmailAddressesKey");
    getCNContactEmailAddressesKeySymbolLoc_ptr_11364 = v7[3];
    int v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString * _Nonnull getCNContactEmailAddressesKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFCNContact.m", 51, @"%s", dlerror());

    __break(1u);
  }
}

void sub_2165897EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNContactPhoneNumbersKey()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v0 = (void **)getCNContactPhoneNumbersKeySymbolLoc_ptr_11360;
  uint64_t v9 = getCNContactPhoneNumbersKeySymbolLoc_ptr_11360;
  if (!getCNContactPhoneNumbersKeySymbolLoc_ptr_11360)
  {
    id v1 = ContactsLibrary_11241();
    v7[3] = (uint64_t)dlsym(v1, "CNContactPhoneNumbersKey");
    getCNContactPhoneNumbersKeySymbolLoc_ptr_11360 = v7[3];
    int v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString * _Nonnull getCNContactPhoneNumbersKey(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFCNContact.m", 50, @"%s", dlerror());

    __break(1u);
  }
}

void sub_216589954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCNContactPhoneNumbersKeySymbolLoc_block_invoke_11361(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11241();
  uint64_t result = dlsym(v2, "CNContactPhoneNumbersKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactPhoneNumbersKeySymbolLoc_ptr_11360 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactEmailAddressesKeySymbolLoc_block_invoke_11365(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11241();
  uint64_t result = dlsym(v2, "CNContactEmailAddressesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactEmailAddressesKeySymbolLoc_ptr_11364 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getCNContactFormatterClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_11241();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNContactFormatter");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNContactFormatterClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class  _Nonnull getCNContactFormatterClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCNContact.m", 33, @"Unable to find class %s", "CNContactFormatter");

    __break(1u);
  }
}

void sub_216589FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCNContactVCardSerializationClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getCNContactVCardSerializationClass_softClass;
  uint64_t v7 = getCNContactVCardSerializationClass_softClass;
  if (!getCNContactVCardSerializationClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCNContactVCardSerializationClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getCNContactVCardSerializationClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21658A0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t WFCNContactAuthorizationStatus()
{
  int v0 = [MEMORY[0x263F85258] currentDevice];
  int v1 = [v0 isChineseRegionDevice];

  if (!v1) {
    return 3;
  }
  if (VCIsInternalBuild()
    && (WFCNContactSystemShortcutsUserDefaults(),
        size_t v2 = objc_claimAutoreleasedReturnValue(),
        int v3 = [v2 BOOLForKey:*MEMORY[0x263F856C8]],
        v2,
        v3))
  {
    uint64_t v4 = WFCNContactSystemShortcutsUserDefaults();
    uint64_t v5 = [v4 integerForKey:*MEMORY[0x263F856C0]];

    return v5;
  }
  else
  {
    id CNContactStoreClass = getCNContactStoreClass();
    return [CNContactStoreClass authorizationStatusForEntityType:0];
  }
}

void *__getCNContactIdentifierKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11241();
  uint64_t result = dlsym(v2, "CNContactIdentifierKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactIdentifierKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCNVCardWritingOptionsClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!vCardLibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __vCardLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264287FF8;
    uint64_t v8 = 0;
    vCardLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!vCardLibraryCore_frameworkLibrary)
  {
    int v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void * _Nonnull vCardLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFCNContact.m", 56, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CNVCardWritingOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class  _Nonnull getCNVCardWritingOptionsClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFCNContact.m", 57, @"Unable to find class %s", "CNVCardWritingOptions");

LABEL_10:
    __break(1u);
  }
  getCNVCardWritingOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __vCardLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  vCardLibraryCore_frameworkLibrary = result;
  return result;
}

id WFCNContactSystemShortcutsUserDefaults()
{
  if (WFCNContactSystemShortcutsUserDefaults_onceToken != -1) {
    dispatch_once(&WFCNContactSystemShortcutsUserDefaults_onceToken, &__block_literal_global_11375);
  }
  int v0 = (void *)WFCNContactSystemShortcutsUserDefaults_systemShortcutsUserDefaults;
  return v0;
}

uint64_t __WFCNContactSystemShortcutsUserDefaults_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x263EFFA40]);
  WFCNContactSystemShortcutsUserDefaults_systemShortcutsUserDefaults = [v0 initWithSuiteName:*MEMORY[0x263F85618]];
  return MEMORY[0x270F9A758]();
}

void __getCNContactVCardSerializationClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_11241();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNContactVCardSerialization");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNContactVCardSerializationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    int v3 = [NSString stringWithUTF8String:"Class  _Nonnull getCNContactVCardSerializationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCNContact.m", 32, @"Unable to find class %s", "CNContactVCardSerialization");

    __break(1u);
  }
}

void sub_21658A98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11379(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11380(uint64_t a1)
{
}

id getCNContactFetchRequestClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getCNContactFetchRequestClass_softClass;
  uint64_t v7 = getCNContactFetchRequestClass_softClass;
  if (!getCNContactFetchRequestClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCNContactFetchRequestClass_block_invoke;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getCNContactFetchRequestClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21658AB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNContactFetchRequestClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_11241();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNContactFetchRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNContactFetchRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    int v3 = [NSString stringWithUTF8String:"Class  _Nonnull getCNContactFetchRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCNContact.m", 36, @"Unable to find class %s", "CNContactFetchRequest");

    __break(1u);
  }
}

void getCNContactStoreDidChangeNotification()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getCNContactStoreDidChangeNotificationSymbolLoc_ptr;
  uint64_t v9 = getCNContactStoreDidChangeNotificationSymbolLoc_ptr;
  if (!getCNContactStoreDidChangeNotificationSymbolLoc_ptr)
  {
    id v1 = ContactsLibrary_11241();
    v7[3] = (uint64_t)dlsym(v1, "CNContactStoreDidChangeNotification");
    getCNContactStoreDidChangeNotificationSymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSNotificationName  _Nonnull getCNContactStoreDidChangeNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFCNContact.m", 54, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21658B58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCNContactStoreDidChangeNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11241();
  uint64_t result = dlsym(v2, "CNContactStoreDidChangeNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactStoreDidChangeNotificationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_21658C1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCNContactImageDataAvailableKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11241();
  uint64_t result = dlsym(v2, "CNContactImageDataAvailableKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactImageDataAvailableKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactImageDataKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11241();
  uint64_t result = dlsym(v2, "CNContactImageDataKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactImageDataKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactThumbnailImageDataKeySymbolLoc_block_invoke(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11241();
  uint64_t result = dlsym(v2, "CNContactThumbnailImageDataKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactThumbnailImageDataKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactModificationDateKeySymbolLoc_block_invoke_11417(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11241();
  uint64_t result = dlsym(v2, "CNContactModificationDateKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactModificationDateKeySymbolLoc_ptr_11416 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactCreationDateKeySymbolLoc_block_invoke_11421(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11241();
  uint64_t result = dlsym(v2, "CNContactCreationDateKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactCreationDateKeySymbolLoc_ptr_11420 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactNicknameKeySymbolLoc_block_invoke_11425(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11241();
  uint64_t result = dlsym(v2, "CNContactNicknameKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactNicknameKeySymbolLoc_ptr_11424 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_21658C7C8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __getCNPhoneNumberClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_11241();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNPhoneNumber");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNPhoneNumberClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class  _Nonnull getCNPhoneNumberClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFCNContact.m", 41, @"Unable to find class %s", "CNPhoneNumber");

    __break(1u);
  }
}

BOOL WFCNContactIsAuthorizedToAccessContact()
{
  return WFCNContactAuthorizationStatus() == 3;
}

void INPersonHandleLabelForContactLabel(void *a1)
{
  id v1 = a1;
  size_t v2 = getCNLabelHome();
  int v3 = [v1 isEqualToString:v2];

  if (v3)
  {
    uint64_t v4 = (id *)MEMORY[0x263F0F7A8];
    goto LABEL_12;
  }
  uint64_t v5 = getCNLabelWork();
  int v6 = [v1 isEqualToString:v5];

  if (v6)
  {
    uint64_t v4 = (id *)MEMORY[0x263F0F7E0];
    goto LABEL_12;
  }
  uint64_t v7 = getCNLabelOther();
  if ([v1 isEqualToString:v7])
  {

LABEL_11:
    uint64_t v4 = (id *)MEMORY[0x263F0F7C8];
    goto LABEL_12;
  }
  uint64_t v28 = 0;
  uint64_t v29 = &v28;
  uint64_t v30 = 0x2020000000;
  uint64_t v8 = (void *)getCNLabelPhoneNumberOtherFaxSymbolLoc_ptr_11488;
  uint64_t v31 = getCNLabelPhoneNumberOtherFaxSymbolLoc_ptr_11488;
  if (!getCNLabelPhoneNumberOtherFaxSymbolLoc_ptr_11488)
  {
    uint64_t v9 = ContactsLibrary_11490();
    v29[3] = (uint64_t)dlsym(v9, "CNLabelPhoneNumberOtherFax");
    getCNLabelPhoneNumberOtherFaxSymbolLoc_ptr_11488 = v29[3];
    uint64_t v8 = (void *)v29[3];
  }
  _Block_object_dispose(&v28, 8);
  if (!v8)
  {
    uint64_t v26 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v27 = [NSString stringWithUTF8String:"NSString *getCNLabelPhoneNumberOtherFax(void)"];
    objc_msgSend(v26, "handleFailureInFunction:file:lineNumber:description:", v27, @"WFContact+INPerson.m", 24, @"%s", dlerror());

    __break(1u);
    return;
  }
  int v10 = [v1 isEqualToString:*v8];

  if (v10) {
    goto LABEL_11;
  }
  uint64_t v14 = getCNLabelPhoneNumberiPhone();
  int v15 = [v1 isEqualToString:v14];

  if (v15)
  {
    uint64_t v4 = (id *)MEMORY[0x263F0F7F0];
    goto LABEL_12;
  }
  long long v16 = getCNLabelPhoneNumberMobile();
  if ([v1 isEqualToString:v16])
  {

LABEL_21:
    uint64_t v4 = (id *)MEMORY[0x263F0F7C0];
    goto LABEL_12;
  }
  char v17 = [v1 localizedCaseInsensitiveContainsString:@"mobile"];

  if (v17) {
    goto LABEL_21;
  }
  int v18 = getCNLabelPhoneNumberMain();
  int v19 = [v1 isEqualToString:v18];

  if (v19)
  {
    uint64_t v4 = (id *)MEMORY[0x263F0F7B8];
  }
  else
  {
    int v20 = getCNLabelPhoneNumberHomeFax();
    int v21 = [v1 isEqualToString:v20];

    if (v21)
    {
      uint64_t v4 = (id *)MEMORY[0x263F0F7B0];
    }
    else
    {
      int v22 = getCNLabelPhoneNumberWorkFax();
      int v23 = [v1 isEqualToString:v22];

      if (v23)
      {
        uint64_t v4 = (id *)MEMORY[0x263F0F7E8];
      }
      else
      {
        uint64_t v24 = getCNLabelPhoneNumberPager();
        int v25 = [v1 isEqualToString:v24];

        if (!v25)
        {
          id v11 = +[WFContactLabeledValue localizedStringForLabel:v1];
          goto LABEL_13;
        }
        uint64_t v4 = (id *)MEMORY[0x263F0F7D0];
      }
    }
  }
LABEL_12:
  id v11 = *v4;
LABEL_13:
  id v12 = v11;

  id v13 = v12;
}

void sub_21658E084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelHome()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getCNLabelHomeSymbolLoc_ptr_11539;
  uint64_t v9 = getCNLabelHomeSymbolLoc_ptr_11539;
  if (!getCNLabelHomeSymbolLoc_ptr_11539)
  {
    id v1 = ContactsLibrary_11490();
    v7[3] = (uint64_t)dlsym(v1, "CNLabelHome");
    getCNLabelHomeSymbolLoc_ptr_11539 = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *getCNLabelHome(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFContact+INPerson.m", 21, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21658E1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelWork()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getCNLabelWorkSymbolLoc_ptr_11535;
  uint64_t v9 = getCNLabelWorkSymbolLoc_ptr_11535;
  if (!getCNLabelWorkSymbolLoc_ptr_11535)
  {
    id v1 = ContactsLibrary_11490();
    v7[3] = (uint64_t)dlsym(v1, "CNLabelWork");
    getCNLabelWorkSymbolLoc_ptr_11535 = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *getCNLabelWork(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFContact+INPerson.m", 22, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21658E354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelOther()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getCNLabelOtherSymbolLoc_ptr_11531;
  uint64_t v9 = getCNLabelOtherSymbolLoc_ptr_11531;
  if (!getCNLabelOtherSymbolLoc_ptr_11531)
  {
    id v1 = ContactsLibrary_11490();
    v7[3] = (uint64_t)dlsym(v1, "CNLabelOther");
    getCNLabelOtherSymbolLoc_ptr_11531 = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *getCNLabelOther(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFContact+INPerson.m", 23, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21658E4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCNLabelPhoneNumberOtherFaxSymbolLoc_block_invoke_11489(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11490();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberOtherFax");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberOtherFaxSymbolLoc_ptr_11488 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *ContactsLibrary_11490()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary_11526)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __ContactsLibraryCore_block_invoke_11527;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264288010;
    uint64_t v6 = 0;
    ContactsLibraryCore_frameworkLibrary_11526 = _sl_dlopen();
  }
  id v0 = (void *)ContactsLibraryCore_frameworkLibrary_11526;
  if (!ContactsLibraryCore_frameworkLibrary_11526)
  {
    id v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *ContactsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContact+INPerson.m", 14, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void getCNLabelPhoneNumberiPhone()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getCNLabelPhoneNumberiPhoneSymbolLoc_ptr_11518;
  uint64_t v9 = getCNLabelPhoneNumberiPhoneSymbolLoc_ptr_11518;
  if (!getCNLabelPhoneNumberiPhoneSymbolLoc_ptr_11518)
  {
    id v1 = ContactsLibrary_11490();
    v7[3] = (uint64_t)dlsym(v1, "CNLabelPhoneNumberiPhone");
    getCNLabelPhoneNumberiPhoneSymbolLoc_ptr_11518 = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getCNLabelPhoneNumberiPhone(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFContact+INPerson.m", 25, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21658E7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelPhoneNumberMobile()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getCNLabelPhoneNumberMobileSymbolLoc_ptr_11514;
  uint64_t v9 = getCNLabelPhoneNumberMobileSymbolLoc_ptr_11514;
  if (!getCNLabelPhoneNumberMobileSymbolLoc_ptr_11514)
  {
    id v1 = ContactsLibrary_11490();
    v7[3] = (uint64_t)dlsym(v1, "CNLabelPhoneNumberMobile");
    getCNLabelPhoneNumberMobileSymbolLoc_ptr_11514 = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getCNLabelPhoneNumberMobile(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFContact+INPerson.m", 26, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21658E930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelPhoneNumberMain()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getCNLabelPhoneNumberMainSymbolLoc_ptr_11508;
  uint64_t v9 = getCNLabelPhoneNumberMainSymbolLoc_ptr_11508;
  if (!getCNLabelPhoneNumberMainSymbolLoc_ptr_11508)
  {
    id v1 = ContactsLibrary_11490();
    v7[3] = (uint64_t)dlsym(v1, "CNLabelPhoneNumberMain");
    getCNLabelPhoneNumberMainSymbolLoc_ptr_11508 = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getCNLabelPhoneNumberMain(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFContact+INPerson.m", 27, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21658EA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelPhoneNumberHomeFax()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr_11504;
  uint64_t v9 = getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr_11504;
  if (!getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr_11504)
  {
    id v1 = ContactsLibrary_11490();
    v7[3] = (uint64_t)dlsym(v1, "CNLabelPhoneNumberHomeFax");
    getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr_11504 = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getCNLabelPhoneNumberHomeFax(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFContact+INPerson.m", 28, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21658EC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelPhoneNumberWorkFax()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr_11500;
  uint64_t v9 = getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr_11500;
  if (!getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr_11500)
  {
    id v1 = ContactsLibrary_11490();
    v7[3] = (uint64_t)dlsym(v1, "CNLabelPhoneNumberWorkFax");
    getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr_11500 = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getCNLabelPhoneNumberWorkFax(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFContact+INPerson.m", 29, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21658ED68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCNLabelPhoneNumberPager()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getCNLabelPhoneNumberPagerSymbolLoc_ptr_11496;
  uint64_t v9 = getCNLabelPhoneNumberPagerSymbolLoc_ptr_11496;
  if (!getCNLabelPhoneNumberPagerSymbolLoc_ptr_11496)
  {
    id v1 = ContactsLibrary_11490();
    v7[3] = (uint64_t)dlsym(v1, "CNLabelPhoneNumberPager");
    getCNLabelPhoneNumberPagerSymbolLoc_ptr_11496 = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    size_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"NSString *getCNLabelPhoneNumberPager(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFContact+INPerson.m", 30, @"%s", dlerror());

    __break(1u);
  }
}

void sub_21658EED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCNLabelPhoneNumberPagerSymbolLoc_block_invoke_11497(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11490();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberPager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberPagerSymbolLoc_ptr_11496 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelPhoneNumberWorkFaxSymbolLoc_block_invoke_11501(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11490();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberWorkFax");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberWorkFaxSymbolLoc_ptr_11500 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelPhoneNumberHomeFaxSymbolLoc_block_invoke_11505(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11490();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberHomeFax");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberHomeFaxSymbolLoc_ptr_11504 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelPhoneNumberMainSymbolLoc_block_invoke_11509(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11490();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberMain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberMainSymbolLoc_ptr_11508 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelPhoneNumberMobileSymbolLoc_block_invoke_11515(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11490();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberMobile");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberMobileSymbolLoc_ptr_11514 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelPhoneNumberiPhoneSymbolLoc_block_invoke_11519(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11490();
  uint64_t result = dlsym(v2, "CNLabelPhoneNumberiPhone");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelPhoneNumberiPhoneSymbolLoc_ptr_11518 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ContactsLibraryCore_block_invoke_11527()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary_11526 = result;
  return result;
}

void *__getCNLabelOtherSymbolLoc_block_invoke_11532(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11490();
  uint64_t result = dlsym(v2, "CNLabelOther");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelOtherSymbolLoc_ptr_11531 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelWorkSymbolLoc_block_invoke_11536(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11490();
  uint64_t result = dlsym(v2, "CNLabelWork");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelWorkSymbolLoc_ptr_11535 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNLabelHomeSymbolLoc_block_invoke_11540(uint64_t a1)
{
  size_t v2 = ContactsLibrary_11490();
  uint64_t result = dlsym(v2, "CNLabelHome");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNLabelHomeSymbolLoc_ptr_11539 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_21658F92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void __getCNMutableContactClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_11490();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNMutableContact");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNMutableContactClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCNMutableContactClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContact+INPerson.m", 18, @"Unable to find class %s", "CNMutableContact");

    __break(1u);
  }
}

id getCNLabeledValueClass_11543()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getCNLabeledValueClass_softClass_11551;
  uint64_t v7 = getCNLabeledValueClass_softClass_11551;
  if (!getCNLabeledValueClass_softClass_11551)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCNLabeledValueClass_block_invoke_11552;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getCNLabeledValueClass_block_invoke_11552((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21658FAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNPhoneNumberClass_block_invoke_11545(uint64_t a1)
{
  ContactsLibrary_11490();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNPhoneNumber");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNPhoneNumberClass_softClass_11544 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCNPhoneNumberClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContact+INPerson.m", 19, @"Unable to find class %s", "CNPhoneNumber");

    __break(1u);
  }
}

void __getCNLabeledValueClass_block_invoke_11552(uint64_t a1)
{
  ContactsLibrary_11490();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNLabeledValue");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNLabeledValueClass_softClass_11551 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    size_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCNLabeledValueClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContact+INPerson.m", 20, @"Unable to find class %s", "CNLabeledValue");

    __break(1u);
  }
}

id getWFPageRendererClass()
{
  if (getWFPageRendererClass_onceToken != -1) {
    dispatch_once(&getWFPageRendererClass_onceToken, &__block_literal_global_77);
  }
  id v0 = (void *)getWFPageRendererClass_dynamicSubclass;
  return v0;
}

void __getWFPageRendererClass_block_invoke()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  UIPrintPageRendererClass = getUIPrintPageRendererClass();
  getWFPageRendererClass_dynamicSubclass = (uint64_t)objc_allocateClassPair(UIPrintPageRendererClass, "_WFPageRenderer", 0);
  class_addIvar((Class)getWFPageRendererClass_dynamicSubclass, "_wf_inputSize", 8uLL, 3u, "@");
  class_addIvar((Class)getWFPageRendererClass_dynamicSubclass, "_wf_margin", 8uLL, 3u, "@");
  snprintf(__str, 0x200uLL, "%s@:", "{CGRect={CGPoint=dd}{CGSize=dd}}");
  class_addMethod((Class)getWFPageRendererClass_dynamicSubclass, sel_paperRect, (IMP)WFGetPaperRect, __str);
  class_addMethod((Class)getWFPageRendererClass_dynamicSubclass, sel_printableRect, (IMP)WFGetPrintableRect, __str);
  objc_registerClassPair((Class)getWFPageRendererClass_dynamicSubclass);
}

double WFGetPrintableRect(void *a1)
{
  id v1 = a1;
  WFPageRendererClass = (objc_class *)getWFPageRendererClass();
  InstanceVariable = class_getInstanceVariable(WFPageRendererClass, "_wf_margin");
  uint64_t v4 = object_getIvar(v1, InstanceVariable);
  [v4 floatValue];
  CGFloat v6 = v5;
  [v1 paperRect];
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGFloat v14 = v13;

  v17.origin.x = v8;
  v17.origin.y = v10;
  v17.size.width = v12;
  v17.size.height = v14;
  *(void *)&double v15 = (unint64_t)CGRectInset(v17, v6, v6);

  return v15;
}

double WFGetPaperRect(void *a1)
{
  id v1 = a1;
  WFPageRendererClass = (objc_class *)getWFPageRendererClass();
  InstanceVariable = class_getInstanceVariable(WFPageRendererClass, "_wf_inputSize");
  uint64_t v4 = object_getIvar(v1, InstanceVariable);

  [v4 CGSizeValue];
  return 0.0;
}

Class initUIPrintPageRenderer()
{
  if (UIKitLibrary_sOnce_11615 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11615, &__block_literal_global_53_11616);
  }
  Class result = objc_getClass("UIPrintPageRenderer");
  classUIPrintPageRenderer = (uint64_t)result;
  getUIPrintPageRendererClass = (uint64_t (*)())UIPrintPageRendererFunction;
  return result;
}

id UIPrintPageRendererFunction()
{
  return (id)classUIPrintPageRenderer;
}

void *__UIKitLibrary_block_invoke_11620()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib_11622 = (uint64_t)result;
  return result;
}

uint64_t (*initUIGraphicsEndImageContext())()
{
  if (UIKitLibrary_sOnce_11615 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11615, &__block_literal_global_53_11616);
  }
  Class result = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_11622, "UIGraphicsEndImageContext");
  softLinkUIGraphicsEndImageContext = result;
  if (result)
  {
    return (uint64_t (*)())result();
  }
  return result;
}

uint64_t (*initUIGraphicsGetImageFromCurrentImageContext())()
{
  if (UIKitLibrary_sOnce_11615 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11615, &__block_literal_global_53_11616);
  }
  id v0 = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_11622, "UIGraphicsGetImageFromCurrentImageContext");
  softLinkUIGraphicsGetImageFromCurrentImageContext = v0;
  if (v0)
  {
    v0();
    id v0 = (uint64_t (*)())objc_claimAutoreleasedReturnValue();
  }
  return v0;
}

uint64_t (*initUIGraphicsBeginImageContextWithOptions(uint64_t a1, double a2, double a3, double a4))()
{
  if (UIKitLibrary_sOnce_11615 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11615, &__block_literal_global_53_11616);
  }
  Class result = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_11622, "UIGraphicsBeginImageContextWithOptions");
  softLinkUIGraphicsBeginImageContextWithOptions = result;
  if (result)
  {
    v9.n128_f64[0] = a2;
    v10.n128_f64[0] = a3;
    v11.n128_f64[0] = a4;
    return (uint64_t (*)())((uint64_t (*)(uint64_t, __n128, __n128, __n128))result)(a1, v9, v10, v11);
  }
  return result;
}

void sub_216590FB4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

Class __getWKWebViewClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!WebKitLibraryCore_frameworkLibrary_11632)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __WebKitLibraryCore_block_invoke_11633;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264288110;
    uint64_t v8 = 0;
    WebKitLibraryCore_frameworkLibrary_11632 = _sl_dlopen();
  }
  if (!WebKitLibraryCore_frameworkLibrary_11632)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *WebKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFPageRenderer.m", 26, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("WKWebView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    float v5 = [NSString stringWithUTF8String:"Class getWKWebViewClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFPageRenderer.m", 27, @"Unable to find class %s", "WKWebView");

LABEL_10:
    __break(1u);
  }
  getWKWebViewClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t (*initUIGraphicsGetCurrentContext())()
{
  if (UIKitLibrary_sOnce_11615 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11615, &__block_literal_global_53_11616);
  }
  Class result = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_11622, "UIGraphicsGetCurrentContext");
  softLinkUIGraphicsGetCurrentContext = result;
  if (result)
  {
    return (uint64_t (*)())result();
  }
  return result;
}

uint64_t __WebKitLibraryCore_block_invoke_11633()
{
  uint64_t result = _sl_dlopen();
  WebKitLibraryCore_frameworkLibrary_11632 = result;
  return result;
}

Class initUIViewPrintFormatter()
{
  if (UIKitLibrary_sOnce_11615 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11615, &__block_literal_global_53_11616);
  }
  Class result = objc_getClass("UIViewPrintFormatter");
  classUIViewPrintFormatter = (uint64_t)result;
  getUIViewPrintFormatterClass = (uint64_t (*)())UIViewPrintFormatterFunction;
  return result;
}

id UIViewPrintFormatterFunction()
{
  return (id)classUIViewPrintFormatter;
}

uint64_t (*initUIGraphicsPopContext())()
{
  if (UIKitLibrary_sOnce_11615 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11615, &__block_literal_global_53_11616);
  }
  Class result = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_11622, "UIGraphicsPopContext");
  softLinkUIGraphicsPopContext = result;
  if (result)
  {
    return (uint64_t (*)())result();
  }
  return result;
}

Class initUITraitCollection()
{
  if (UIKitLibrary_sOnce_11615 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11615, &__block_literal_global_53_11616);
  }
  Class result = objc_getClass("UITraitCollection");
  classUITraitCollection = (uint64_t)result;
  getUITraitCollectionClass = (uint64_t (*)())UITraitCollectionFunction;
  return result;
}

id UITraitCollectionFunction()
{
  return (id)classUITraitCollection;
}

uint64_t (*initUIGraphicsPushContext(uint64_t a1))()
{
  if (UIKitLibrary_sOnce_11615 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11615, &__block_literal_global_53_11616);
  }
  Class result = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_11622, "UIGraphicsPushContext");
  softLinkUIGraphicsPushContext = result;
  if (result)
  {
    return (uint64_t (*)())((uint64_t (*)(uint64_t))result)(a1);
  }
  return result;
}

void initUIGraphicsBeginPDFPageWithInfo(void *a1, double a2, double a3, double a4, double a5)
{
  id v11 = a1;
  if (UIKitLibrary_sOnce_11615 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11615, &__block_literal_global_53_11616);
  }
  uint64_t v9 = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_11622, "UIGraphicsBeginPDFPageWithInfo");
  softLinkUIGraphicsBeginPDFPageWithInfo = v9;
  __n128 v10 = v11;
  if (v9)
  {
    ((void (*)(id, double, double, double, double))v9)(v11, a2, a3, a4, a5);
    __n128 v10 = v11;
  }
}

uint64_t (*initUIGraphicsEndPDFContext())()
{
  if (UIKitLibrary_sOnce_11615 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11615, &__block_literal_global_53_11616);
  }
  Class result = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_11622, "UIGraphicsEndPDFContext");
  softLinkUIGraphicsEndPDFContext = result;
  if (result)
  {
    return (uint64_t (*)())result();
  }
  return result;
}

uint64_t initUIGraphicsBeginPDFContextToFile(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11 = a1;
  id v12 = a2;
  if (UIKitLibrary_sOnce_11615 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11615, &__block_literal_global_53_11616);
  }
  double v13 = (uint64_t (*)())dlsym((void *)UIKitLibrary_sLib_11622, "UIGraphicsBeginPDFContextToFile");
  softLinkUIGraphicsBeginPDFContextToFile = v13;
  if (v13) {
    uint64_t v14 = ((uint64_t (*)(id, id, double, double, double, double))v13)(v11, v12, a3, a4, a5, a6);
  }
  else {
    uint64_t v14 = 0;
  }

  return v14;
}

id getWKWebViewClass()
{
  uint64_t v4 = 0;
  float v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getWKWebViewClass_softClass_11889;
  uint64_t v7 = getWKWebViewClass_softClass_11889;
  if (!getWKWebViewClass_softClass_11889)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getWKWebViewClass_block_invoke_11890;
    v3[3] = &unk_26428AC60;
    v3[4] = &v4;
    __getWKWebViewClass_block_invoke_11890((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165934A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __WFGetPasteboardRepresentationFromWKWebView_block_invoke(uint64_t a1)
{
  uint64_t v2 = [(objc_class *)getUIPasteboardClass() generalPasteboard];
  id v3 = [v2 items];
  [v2 setItems:MEMORY[0x263EFFA68]];
  uint64_t v4 = *(void **)(a1 + 32);
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = __WFGetPasteboardRepresentationFromWKWebView_block_invoke_2;
  v7[3] = &unk_264288210;
  id v8 = v4;
  id v9 = v2;
  id v10 = *(id *)(a1 + 40);
  id v11 = v3;
  id v12 = *(id *)(a1 + 48);
  id v5 = v3;
  id v6 = v2;
  [v8 _executeEditCommand:@"copy" argument:0 completion:v7];
}

void __WFGetPasteboardRepresentationFromWKWebView_block_invoke_2(uint64_t a1)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = __WFGetPasteboardRepresentationFromWKWebView_block_invoke_3;
  v3[3] = &unk_2642881E8;
  uint64_t v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  [v2 _doAfterNextPresentationUpdateWithoutWaitingForPainting:v3];
}

void __WFGetPasteboardRepresentationFromWKWebView_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) string];
  id v6 = [v2 dataForPasteboardType:v3 inItemSet:0];

  [*(id *)(a1 + 32) setItems:*(void *)(a1 + 48)];
  uint64_t v4 = *(void *)(a1 + 56);
  id v5 = [v6 firstObject];
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
}

Class initUIPasteboard()
{
  if (UIKitLibrary_sOnce_11876 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_11876, &__block_literal_global_11877);
  }
  Class result = objc_getClass("UIPasteboard");
  classUIPasteboard = (uint64_t)result;
  getUIPasteboardClass = (uint64_t (*)())UIPasteboardFunction;
  return result;
}

id UIPasteboardFunction()
{
  return (id)classUIPasteboard;
}

void *__UIKitLibrary_block_invoke_11881()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib_11883 = (uint64_t)result;
  return result;
}

Class __getWKWebViewClass_block_invoke_11890(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!WebKitLibraryCore_frameworkLibrary_11891)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __WebKitLibraryCore_block_invoke_11892;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_2642881C8;
    uint64_t v8 = 0;
    WebKitLibraryCore_frameworkLibrary_11891 = _sl_dlopen();
  }
  if (!WebKitLibraryCore_frameworkLibrary_11891)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *WebKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFWebResourceCapturer.m", 23, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("WKWebView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getWKWebViewClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFWebResourceCapturer.m", 24, @"Unable to find class %s", "WKWebView");

LABEL_10:
    __break(1u);
  }
  getWKWebViewClass_softClass_11889 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __WebKitLibraryCore_block_invoke_11892()
{
  uint64_t result = _sl_dlopen();
  WebKitLibraryCore_frameworkLibrary_11891 = result;
  return result;
}

uint64_t file_checkfield(uint64_t result, const char *a2, unsigned __int8 **a3)
{
  id v3 = *a3;
  int v4 = **a3;
  if ((v4 - 48) > 9) {
    return 1;
  }
  int v5 = 0;
  do
  {
    int v6 = 10 * v5 + (char)v4;
    int v7 = *++v3;
    LOBYTE(v4) = v7;
    int v5 = v6 - 48;
  }
  while ((v7 - 48) < 0xA);
  *a3 = v3;
  if (v5 < 1024) {
    return 1;
  }
  if (result)
  {
    snprintf((char *)result, 0x400uLL, "field %s too large: %d", a2, v5);
    return 0;
  }
  return result;
}

uint64_t file_vprintf(uint64_t a1, char *a2, va_list a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v6 = MEMORY[0x263EF8318];
  for (uint64_t i = (unsigned __int8 *)a2; ; ++i)
  {
    uint64_t v30 = i;
    if (*i != 37) {
      break;
    }
    uint64_t v8 = i + 1;
    uint64_t v30 = i + 1;
    int v9 = *++i;
    if (v9 != 37)
    {
      while (memchr("0.'+- ", (char)v9, 7uLL))
      {
        char v10 = *++v8;
        LOBYTE(v9) = v10;
      }
      uint64_t v30 = v8;
      if (v9 == 42)
      {
        strcpy(__str, "* not allowed in format");
        goto LABEL_25;
      }
      if (!file_checkfield((uint64_t)__str, "width", &v30)) {
        goto LABEL_25;
      }
      uint64_t i = v30;
      unsigned int v11 = *v30;
      if (v11 == 46)
      {
        ++v30;
        if (!file_checkfield((uint64_t)__str, "precision", &v30)) {
          goto LABEL_25;
        }
        uint64_t i = v30;
        unsigned int v11 = *v30;
      }
      if ((v11 & 0x80) != 0)
      {
        if (!__maskrune(v11, 0x100uLL))
        {
LABEL_24:
          snprintf(__str, 0x400uLL, "bad format char: %c", (char)v11);
LABEL_25:
          free(*(void **)(a1 + 32));
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
          char v27 = (char)a2;
LABEL_26:
          int v21 = a1;
          int v22 = 0;
LABEL_27:
          file_error(v21, v22, v20, v15, v16, v17, v18, v19, v27);
          return 0xFFFFFFFFLL;
        }
      }
      else if ((*(_DWORD *)(v6 + 4 * v11 + 60) & 0x100) == 0)
      {
        goto LABEL_24;
      }
    }
LABEL_18:
    ;
  }
  if (*i) {
    goto LABEL_18;
  }
  unsigned int v13 = vasprintf(&v29, a2, a3);
  char v14 = v13;
  if (v13 >= 0x401 || *(void *)(a1 + 40) + (unint64_t)v13 > 0x100000)
  {
    free(v29);
    free(*(void **)(a1 + 32));
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    char v27 = v14;
    int v20 = "Output buffer space exceeded %d+%zu";
    goto LABEL_26;
  }
  int v23 = (void **)(a1 + 32);
  uint64_t v24 = v29;
  if (*(void *)(a1 + 32))
  {
    unsigned int v25 = asprintf(&v28, "%s%s", *(const char **)(a1 + 32), v29);
    free(v24);
    free(*v23);
    if ((v25 & 0x80000000) != 0)
    {
      *int v23 = 0;
      *(void *)(a1 + 40) = 0;
      int v22 = *__error();
      int v20 = "vasprintf failed";
      int v21 = a1;
      goto LABEL_27;
    }
    uint64_t v24 = v28;
    uint64_t v26 = v25;
  }
  else
  {
    uint64_t v26 = v13;
  }
  uint64_t result = 0;
  *(void *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = v26;
  return result;
}

uint64_t file_error(int a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return file_error_core(a1, a2, a3, &a9);
}

uint64_t file_error_core(uint64_t result, int a2, char *a3, va_list a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(unsigned char *)(result + 72) & 1) == 0)
  {
    char v8 = a5;
    uint64_t v12 = result;
    if (a5)
    {
      free(*(void **)(result + 32));
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      file_printf(v12, "line %zu:", v13, v14, v15, v16, v17, v18, v8);
    }
    uint64_t v19 = *(unsigned char **)(v12 + 32);
    if (v19 && *v19) {
      file_printf(v12, " ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v27);
    }
    uint64_t result = file_vprintf(v12, a3, a4);
    if (a2 >= 1)
    {
      char v20 = strerror(a2);
      uint64_t result = file_printf(v12, " (%s)", v21, v22, v23, v24, v25, v26, v20);
    }
    *(_DWORD *)(v12 + 72) |= 1u;
    *(_DWORD *)(v12 + 64) = a2;
  }
  return result;
}

uint64_t file_printf(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return file_vprintf(a1, a2, &a9);
}

uint64_t file_magerror(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  return file_error_core(a1, 0, a2, va, *(void *)(a1 + 88), a6, a7, a8);
}

uint64_t file_oomem(int a1, char a2)
{
  int v4 = __error();
  return file_error(a1, *v4, "cannot allocate %zu bytes", v5, v6, v7, v8, v9, a2);
}

uint64_t file_badseek(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10 = *__error();
  return file_error(a1, v10, "error seeking", v11, v12, v13, v14, v15, a9);
}

uint64_t file_badread(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10 = *__error();
  return file_error(a1, v10, "error reading", v11, v12, v13, v14, v15, a9);
}

uint64_t file_buffer(uint64_t a1, int a2, long long *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = a5;
  uint64_t v346 = *MEMORY[0x263EF8340];
  v326 = "binary";
  v327 = 0;
  uint64_t v325 = 0;
  long long v323 = 0u;
  *(_OWORD *)v324 = 0u;
  memset(v322, 0, sizeof(v322));
  LODWORD(v322[0]) = a2;
  if (a3)
  {
    long long v12 = a3[4];
    *(_OWORD *)&v322[11] = a3[5];
    long long v13 = a3[7];
    *(_OWORD *)&v322[13] = a3[6];
    *(_OWORD *)&v322[15] = v13;
    *(_OWORD *)&v322[17] = a3[8];
    long long v14 = *a3;
    *(_OWORD *)&v322[3] = a3[1];
    long long v15 = a3[3];
    *(_OWORD *)&v322[5] = a3[2];
    *(_OWORD *)&v322[7] = v15;
    *(_OWORD *)&v322[9] = v12;
    *(_OWORD *)&v322[1] = v14;
  }
  else if (a2 == -1 || fstat(a2, (stat *)&v322[1]) == -1)
  {
    memset(&v322[1], 0, 144);
  }
  v322[19] = a4;
  long long v323 = v8;
  v324[0] = 0;
  v324[1] = 0;
  *(_WORD *)(a1 + 96) = WORD2(v322[1]);
  if (!v8)
  {
    uint64_t v16 = 0;
    uint64_t v17 = "empty";
    goto LABEL_10;
  }
  if (v8 == 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = "very short file (no magic)";
    goto LABEL_10;
  }
  int v21 = *(_DWORD *)(a1 + 68);
  if ((v21 & 0x200000) != 0)
  {
    unsigned int v22 = 0;
  }
  else
  {
    unsigned int v22 = file_encoding(a1, a4, v8, 0, 0, &v327, &v326, &v325);
    int v21 = *(_DWORD *)(a1 + 68);
  }
  if ((v21 & 0x2000) != 0)
  {
    unsigned int v20 = 0;
    int v23 = 0;
    if ((v21 & 0x400000) != 0) {
      goto LABEL_57;
    }
LABEL_48:
    *(void *)&v342[0] = v322[19];
    if ((v21 & 0x1000800) != 0
      || (memset(__buf, 0, 48),
          !json_parse((unsigned __int8 **)v342, (unsigned __int8 *)(v322[19] + v323), (uint64_t)__buf, 0)))
    {
      int v23 = 0;
    }
    else if ((v21 & 0x410) == 0x400)
    {
      int v23 = 1;
    }
    else
    {
      if ((v21 & 0x410) != 0) {
        int v38 = "application/json";
      }
      else {
        int v38 = "JSON data";
      }
      if (file_printf(a1, v38, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1) {
        int v23 = -1;
      }
      else {
        int v23 = 1;
      }
    }
    int v21 = *(_DWORD *)(a1 + 68);
    if (v21)
    {
      fprintf((FILE *)*MEMORY[0x263EF8348], "[try json %d]\n", v23);
      int v21 = *(_DWORD *)(a1 + 68);
    }
    if (v23)
    {
      if ((v21 & 0x20) == 0) {
        goto LABEL_127;
      }
      if (file_printf(a1, "\n- ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1) {
        unsigned int v20 = -1;
      }
      int v21 = *(_DWORD *)(a1 + 68);
    }
    goto LABEL_57;
  }
  if ((v21 & 0x1000800) != 0 || (unint64_t)v323 < 0x200)
  {
    int v23 = 0;
    goto LABEL_28;
  }
  unsigned int v39 = v22;
  int v313 = v21 & 0x410;
  uint64_t v40 = v322[19];
  uint64_t v41 = v322[19] + 148;
  uint64_t v42 = 8;
  uint64_t v43 = MEMORY[0x263EF8318];
  unint64_t v44 = (char *)(v322[19] + 148);
  while (1)
  {
    uint64_t v45 = *v44;
    if ((*v44 & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(v43 + 4 * v45 + 60) & 0x4000) == 0) {
        break;
      }
      goto LABEL_104;
    }
    if (!__maskrune(v45, 0x4000uLL)) {
      break;
    }
LABEL_104:
    ++v44;
    if (--v42 == -1) {
      goto LABEL_105;
    }
  }
  if (v42)
  {
    uint64_t v47 = 0;
    int v46 = 0;
    while (1)
    {
      uint64_t v48 = v44[v47];
      if ((v48 & 0xF8) != 0x30) {
        break;
      }
      int v46 = (v48 - 48) | (8 * v46);
      if (v42 == ++v47) {
        goto LABEL_206;
      }
    }
    if (v44[v47])
    {
      if (!((v48 & 0x80) != 0 ? __maskrune(v48, 0x4000uLL) : *(_DWORD *)(v43 + 4 * v48 + 60) & 0x4000)) {
LABEL_105:
      }
        int v46 = -1;
    }
  }
  else
  {
    int v46 = 0;
  }
LABEL_206:
  uint64_t v91 = 0;
  int32x4_t v92 = 0uLL;
  int32x4_t v93 = 0uLL;
  int32x4_t v94 = 0uLL;
  int32x4_t v95 = 0uLL;
  unsigned int v22 = v39;
  do
  {
    uint8x16_t v96 = *(uint8x16_t *)(v40 + v91);
    uint16x8_t v97 = vmovl_u8(*(uint8x8_t *)v96.i8);
    uint16x8_t v98 = vmovl_high_u8(v96);
    int32x4_t v95 = (int32x4_t)vaddw_high_u16((uint32x4_t)v95, v98);
    int32x4_t v94 = (int32x4_t)vaddw_u16((uint32x4_t)v94, *(uint16x4_t *)v98.i8);
    int32x4_t v93 = (int32x4_t)vaddw_high_u16((uint32x4_t)v93, v97);
    int32x4_t v92 = (int32x4_t)vaddw_u16((uint32x4_t)v92, *(uint16x4_t *)v97.i8);
    v91 += 16;
  }
  while (v91 != 512);
  uint64_t v99 = 0;
  int v100 = vaddvq_s32(vaddq_s32(vaddq_s32(v92, v94), vaddq_s32(v93, v95)));
  do
    v100 -= *(char *)(v41 + v99++);
  while (v99 != 8);
  if (v100 + 256 == v46)
  {
    if (!strncmp((const char *)(v40 + 257), "ustar  ", 8uLL)) {
      uint64_t v101 = 2;
    }
    else {
      uint64_t v101 = strncmp((const char *)(v40 + 257), "ustar", 8uLL) == 0;
    }
    if (v313 == 1024)
    {
      int v23 = 1;
    }
    else
    {
      uint64_t v102 = &tartype[32 * v101];
      if (v313) {
        uint64_t v102 = "application/x-tar";
      }
      if (file_printf(a1, "%s", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)v102) == -1) {
        int v23 = -1;
      }
      else {
        int v23 = 1;
      }
    }
  }
  else
  {
    int v23 = 0;
  }
LABEL_28:
  int v21 = *(_DWORD *)(a1 + 68);
  if (v21)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "[try tar %d]\n", v23);
    int v21 = *(_DWORD *)(a1 + 68);
  }
  if (!v23)
  {
    unsigned int v20 = 0;
    if ((v21 & 0x400000) != 0) {
      goto LABEL_57;
    }
    goto LABEL_48;
  }
  if ((v21 & 0x20) == 0)
  {
    unsigned int v20 = 0;
    goto LABEL_127;
  }
  if (file_printf(a1, "\n- ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1) {
    unsigned int v20 = -1;
  }
  else {
    unsigned int v20 = 0;
  }
  int v21 = *(_DWORD *)(a1 + 68);
  if ((v21 & 0x400000) == 0) {
    goto LABEL_48;
  }
LABEL_57:
  if ((v21 & 0x80000) != 0) {
    goto LABEL_120;
  }
  int v23 = 0;
  if (!v22 || (v21 & 0x1000800) != 0 || (uint64_t)v323 < 1) {
    goto LABEL_113;
  }
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = (unsigned __int8 *)v322[19];
  unint64_t v29 = v322[19] + v323;
  while (2)
  {
    int v31 = *v28++;
    int v30 = v31;
    if (v31 != 10)
    {
      if (v30 == 44)
      {
        uint64_t v36 = v27 + 1;
      }
      else
      {
        if (v30 == 34)
        {
          if ((unint64_t)v28 < v29)
          {
            BOOL v32 = 0;
            unint64_t v33 = v29 - (void)v28;
            uint64_t v34 = v28;
            do
            {
              int v35 = *v34++;
              if (v35 == 34)
              {
                BOOL v32 = !v32;
              }
              else if (v32)
              {
                goto LABEL_72;
              }
              uint64_t v28 = v34;
              --v33;
            }
            while (v33);
          }
LABEL_81:
          int v23 = 0;
          if (!v26 || v25 <= 2) {
            goto LABEL_113;
          }
          goto LABEL_83;
        }
LABEL_72:
        uint64_t v36 = v27;
      }
      goto LABEL_80;
    }
    if (++v25 != 10)
    {
      if (v26)
      {
        if (v26 != v27)
        {
LABEL_203:
          int v23 = 0;
          goto LABEL_113;
        }
        uint64_t v36 = 0;
      }
      else
      {
        if (!v27) {
          goto LABEL_203;
        }
        uint64_t v36 = 0;
        uint64_t v26 = v27;
      }
LABEL_80:
      uint64_t v27 = v36;
      if ((unint64_t)v28 >= v29) {
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  int v23 = 0;
  if (!v26 || v26 != v27) {
    goto LABEL_113;
  }
LABEL_83:
  if ((v21 & 0x410) == 0x400)
  {
    int v23 = 1;
  }
  else
  {
    if ((v21 & 0x410) != 0) {
      long long v37 = "application/csv";
    }
    else {
      long long v37 = "CSV text";
    }
    if (file_printf(a1, v37, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1) {
      int v23 = -1;
    }
    else {
      int v23 = 1;
    }
    int v21 = *(_DWORD *)(a1 + 68);
  }
LABEL_113:
  if (v21)
  {
    fprintf((FILE *)*MEMORY[0x263EF8348], "[try csv %d]\n", v23);
    int v21 = *(_DWORD *)(a1 + 68);
  }
  if (!v23)
  {
LABEL_120:
    if ((v21 & 0x40000) != 0) {
      goto LABEL_150;
    }
    v328 = "";
    v331 = 0;
    v341[1] = (const char *)v322[19];
    v341[0] = (const char *)LODWORD(v322[0]);
    v341[2] = (const char *)v323;
    if ((v21 & 0x1000800) == 0)
    {
      memset((char *)&v342[4] + 8, 0, 440);
      v339 = 0;
      unint64_t v340 = 0;
      v337 = 0;
      size_t v338 = 0;
      *(_OWORD *)v335 = 0u;
      long long v336 = 0u;
      uint64_t v333 = 0;
      uint64_t v334 = 0;
      uint64_t v332 = 0;
      v329 = 0;
      size_t v330 = 0;
      if (cdf_read((uint64_t)v341, 0, __buf, 0x200uLL) != -1)
      {
        uint64_t v49 = *(void *)__buf;
        *(void *)&v342[0] = *(void *)__buf;
        *(_OWORD *)((char *)v342 + _Block_object_dispose(&STACK[0x500], 8) = *(_OWORD *)&__buf[8];
        unsigned __int16 v50 = *(_WORD *)&__buf[30];
        *((void *)&v342[1] + 1) = *(void *)&__buf[24];
        unsigned int v51 = *(unsigned __int16 *)&__buf[32];
        LOWORD(v342[2]) = *(_WORD *)&__buf[32];
        *(void *)((char *)&v342[2] + 2) = *(void *)&__buf[34];
        WORD5(v342[2]) = *(_WORD *)&__buf[42];
        unsigned int v52 = *(_DWORD *)&__buf[48];
        *(_OWORD *)((char *)&v342[2] + 12) = *(_OWORD *)&__buf[44];
        unsigned int v53 = *(_DWORD *)&__buf[60];
        *(_OWORD *)((char *)&v342[3] + 12) = *(_OWORD *)&__buf[60];
        int v54 = *(_DWORD *)&__buf[68];
        unint64_t v55 = *(unsigned int *)&__buf[72];
        for (uint64_t i = 76; i != 512; i += 4)
          *(_DWORD *)((char *)v342 + i) = *(_DWORD *)&__buf[i];
        if (v49 == 0xE11AB1A1E011CFD0)
        {
          unsigned __int16 v57 = v50;
          if (v50 <= 0x14u && v51 < 0x15)
          {
            unint64_t v59 = 0;
            size_t v60 = 1 << v50;
            unint64_t v61 = (v60 >> 2) - 1;
            do
            {
              if (*((_DWORD *)&v342[4] + v59 + 3) == -1) {
                break;
              }
              ++v59;
            }
            while (v59 != 109);
            unint64_t v62 = 0xFFFFFFFF / (v60 << 6);
            if (v60 >> 2 != 1 && v62 / v61 < v55 || v59 > v62)
            {
              *__error() = 79;
LABEL_143:
              v328 = "Can't read SAT";
              goto LABEL_144;
            }
            unsigned int v292 = v53;
            unsigned int v307 = v52;
            size_t v289 = v59 + v61 * v55;
            v339 = malloc_type_calloc(v289, 1 << v50, 0x9D4F84DDuLL);
            v314 = v339;
            if (!v339) {
              goto LABEL_143;
            }
            unsigned __int16 v308 = v57;
            unint64_t v296 = v8;
            uint64_t v81 = 0;
            for (unint64_t j = 0; j != 109; ++j)
            {
              int v83 = *((_DWORD *)&v342[4] + j + 3);
              if (v83 < 0) {
                break;
              }
              if (cdf_read_sector((uint64_t)v341, (uint64_t)v314, v81, v60, v57, v83) != v60) {
                goto LABEL_411;
              }
              v81 += v60;
            }
            v299 = malloc_type_calloc(1uLL, v60, 0x9D4F84DDuLL);
            if (!v299)
            {
LABEL_411:
              free(v314);
              unint64_t v8 = v296;
              goto LABEL_143;
            }
            unsigned int v319 = v22;
            if (v55)
            {
              if (v54 < 0) {
                goto LABEL_223;
              }
              uint64_t v84 = 0;
              while (1)
              {
                uint64_t v285 = v84;
                if (v84 == 10000)
                {
LABEL_409:
                  *__error() = 79;
LABEL_410:
                  free(v299);
                  unsigned int v22 = v319;
                  goto LABEL_411;
                }
                if (cdf_read_sector((uint64_t)v341, (uint64_t)v299, 0, v60, v308, v54) != v60) {
                  goto LABEL_410;
                }
                uint64_t v85 = (v60 >> 2) - 1;
                if (v60 >> 2 != 1) {
                  break;
                }
LABEL_196:
                uint64_t v84 = v285 + 1;
                LOBYTE(v57) = v308;
                if (v285 + 1 < v55)
                {
                  int v54 = *((_DWORD *)v299 + (v60 >> 2) - 1);
                  if ((v54 & 0x80000000) == 0) {
                    continue;
                  }
                }
                goto LABEL_223;
              }
              if (v289 >= j) {
                size_t v86 = v289 - j;
              }
              else {
                size_t v86 = 0;
              }
              uint64_t v87 = v60 * j;
              long long v88 = (int *)v299;
              while (1)
              {
                int v90 = *v88++;
                int v89 = v90;
                if (v90 < 0) {
                  break;
                }
                if (!v86) {
                  goto LABEL_409;
                }
                if (cdf_read_sector((uint64_t)v341, (uint64_t)v314, v87, v60, v308, v89) != v60) {
                  goto LABEL_410;
                }
                ++j;
                --v86;
                v87 += v60;
                if (!--v85) {
                  goto LABEL_196;
                }
              }
            }
            LOBYTE(v57) = v308;
LABEL_223:
            unint64_t v340 = j;
            free(v299);
            v337 = 0;
            unsigned int v103 = v292;
            size_t v104 = cdf_count_chain(&v339, v292, v60);
            size_t v338 = v104;
            if (v104 == -1)
            {
              id v106 = 0;
LABEL_403:
              unint64_t v8 = v296;
              unsigned int v22 = v319;
              *__error() = 79;
LABEL_408:
              free(v106);
              v328 = "Can't read SSAT";
              free(v339);
              goto LABEL_144;
            }
            size_t v105 = v104;
            id v106 = malloc_type_calloc(v104, v60, 0x9D4F84DDuLL);
            v337 = (const char *)v106;
            if (!v106)
            {
LABEL_407:
              unint64_t v8 = v296;
              unsigned int v22 = v319;
              goto LABEL_408;
            }
            unsigned int v107 = v307;
            if ((v292 & 0x80000000) == 0)
            {
              uint64_t v108 = 0;
              uint64_t v109 = 10000;
              while (v109 && v105)
              {
                if (cdf_read_sector((uint64_t)v341, (uint64_t)v106, v108, v60, v57, v103) != v60) {
                  goto LABEL_407;
                }
                unsigned int v103 = *((_DWORD *)v314 + v103);
                --v105;
                v108 += v60;
                --v109;
                unsigned int v107 = v307;
                if ((v103 & 0x80000000) != 0) {
                  goto LABEL_231;
                }
              }
              goto LABEL_403;
            }
LABEL_231:
            int v110 = v107;
            uint64_t v111 = cdf_count_chain(&v339, v107, v60);
            if (v111 != -1)
            {
              uint64_t v112 = v111;
              unint64_t v113 = v60 >> 7;
              size_t v330 = (v60 >> 7) * v111;
              size_t v290 = v330;
              v329 = (unsigned __int8 *)malloc_type_calloc(v330, 0x88uLL, 0x9D4F84DDuLL);
              v293 = v329;
              if (v329)
              {
                v286 = v106;
                uint64_t v114 = (char *)malloc_type_malloc(v60, 0xF5397DBuLL);
                if (v114)
                {
                  uint64_t v115 = v114;
                  if (v112)
                  {
                    unint64_t v116 = 0;
                    uint64_t v117 = 0;
                    if (v113 <= 1) {
                      uint64_t v118 = 1;
                    }
                    else {
                      uint64_t v118 = v60 >> 7;
                    }
                    v287 = v114 + 124;
                    uint64_t v119 = v293 + 128;
                    uint64_t v302 = v118;
                    do
                    {
                      if (v116 >> 4 > 0x270
                        || cdf_read_sector((uint64_t)v341, (uint64_t)v115, 0, v60, v308, v110) != v60)
                      {
                        free(v293);
                        free(v115);
                        *__error() = 79;
                        goto LABEL_510;
                      }
                      if (v308 >= 7u)
                      {
                        uint64_t v121 = v119;
                        uint64_t v122 = v287;
                        uint64_t v123 = v302;
                        do
                        {
                          long long v124 = *(_OWORD *)(v122 - 31);
                          long long v125 = *(_OWORD *)(v122 - 27);
                          long long v126 = *(_OWORD *)(v122 - 19);
                          *((_OWORD *)v121 - 6) = *(_OWORD *)(v122 - 23);
                          *((_OWORD *)v121 - 5) = v126;
                          *((_OWORD *)v121 - _Block_object_dispose(&STACK[0x500], 8) = v124;
                          *((_OWORD *)v121 - 7) = v125;
                          *((_WORD *)v121 - 32) = *((_WORD *)v122 - 30);
                          *((unsigned char *)v121 - 62) = *((unsigned char *)v122 - 58);
                          *((unsigned char *)v121 - 61) = *((unsigned char *)v122 - 57);
                          *(v121 - 15) = *(v122 - 14);
                          *(v121 - 14) = *(v122 - 13);
                          *(v121 - 13) = *(v122 - 12);
                          *((_OWORD *)v121 - 3) = *(_OWORD *)(v122 - 11);
                          *(v121 - _Block_object_dispose(&STACK[0x500], 8) = *(v122 - 7);
                          *((void *)v121 - 3) = *((void *)v122 - 3);
                          *((void *)v121 - 2) = *((void *)v122 - 2);
                          *(v121 - 2) = *(v122 - 2);
                          *(v121 - 1) = *(v122 - 1);
                          int v127 = *v122;
                          v122 += 32;
                          *uint64_t v121 = v127;
                          v121 += 34;
                          --v123;
                        }
                        while (v123);
                        uint64_t v120 = v302;
                      }
                      else
                      {
                        uint64_t v120 = 0;
                      }
                      int v110 = *((_DWORD *)v314 + v110);
                      ++v117;
                      unint64_t v116 = v120 + 1;
                      v119 += 34 * v113;
                    }
                    while (v117 != v112);
                    free(v115);
                    size_t v128 = v290;
                    if (v290)
                    {
                      size_t v128 = 0;
                      id v129 = v293 + 66;
                      while (1)
                      {
                        int v130 = *v129;
                        v129 += 136;
                        if (v130 == 5) {
                          break;
                        }
                        if (v290 == ++v128) {
                          goto LABEL_552;
                        }
                      }
                    }
                  }
                  else
                  {
                    free(v114);
                    size_t v128 = 0;
                  }
                  if (v128 == v290)
                  {
LABEL_552:
                    uint64_t v272 = 0;
                  }
                  else
                  {
                    uint64_t v272 = (uint64_t)&v293[136 * v128];
                    unsigned int v273 = *(_DWORD *)(v272 + 120);
                    if ((v273 & 0x80000000) == 0)
                    {
                      if (cdf_read_long_sector_chain((uint64_t)v341, (uint64_t)v342, &v339, v273, *(unsigned int *)&v293[136 * v128 + 124], (uint64_t)v335) == -1)
                      {
                        v328 = "Cannot read short stream";
                        int v23 = -1;
LABEL_590:
                        free(v293);
                        id v106 = v286;
LABEL_512:
                        free(v106);
                        free(v314);
                        unint64_t v8 = v296;
                        unsigned int v22 = v319;
                        if (v23 == -1)
                        {
LABEL_144:
                          int v63 = *(_DWORD *)(a1 + 68);
                          if ((v63 & 0x410) != 0)
                          {
                            if ((v63 & 0x10) != 0)
                            {
                              uint64_t v64 = "application/CDFV2";
                              goto LABEL_174;
                            }
                          }
                          else
                          {
                            if (file_printf(a1, "Composite Document File V2 Document", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)
                            {
LABEL_199:
                              int v23 = -1;
                              goto LABEL_123;
                            }
                            if (*v328)
                            {
                              char v284 = (char)v328;
                              uint64_t v64 = ", %s";
LABEL_174:
                              if (file_printf(a1, v64, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) != -1) {
                                goto LABEL_175;
                              }
                              goto LABEL_199;
                            }
                          }
LABEL_175:
                          int v23 = 1;
                        }
LABEL_123:
                        int v21 = *(_DWORD *)(a1 + 68);
                        if (v21)
                        {
                          fprintf((FILE *)*MEMORY[0x263EF8348], "[try cdf %d]\n", v23);
                          int v21 = *(_DWORD *)(a1 + 68);
                        }
                        if (v23)
                        {
                          if ((v21 & 0x20) == 0) {
                            goto LABEL_127;
                          }
                          if (file_printf(a1, "\n- ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1) {
                            unsigned int v20 = -1;
                          }
                          int v21 = *(_DWORD *)(a1 + 68);
                        }
LABEL_150:
                        uint64_t v16 = 0;
                        if (a2 == -1 || v8 < 6 || (v21 & 0x10000) != 0) {
                          goto LABEL_266;
                        }
                        uint64_t v65 = (void **)file_push_buffer(a1);
                        if (!v65) {
                          return 0xFFFFFFFFLL;
                        }
                        uint64_t v66 = v65;
                        unsigned int v318 = v22;
                        unsigned int v20 = 0;
                        uint64_t v67 = LODWORD(v322[0]);
                        uint64_t v68 = v322[19];
                        unint64_t v69 = v323;
                        LODWORD(v342[0]) = 0;
                        if ((*(_DWORD *)(a1 + 68) & 0x1000800) != 0) {
                          goto LABEL_263;
                        }
                        memset(__buf, 0, 144);
                        if (*(unsigned char *)v322[19] != 127) {
                          goto LABEL_262;
                        }
                        int v70 = *(unsigned __int8 *)(v322[19] + 1);
                        if (v70 != 79 && v70 != 69) {
                          goto LABEL_262;
                        }
                        if (__PAIR64__(*(unsigned __int8 *)(v322[19] + 3), *(unsigned __int8 *)(v322[19] + 2)) != 0x460000004CLL) {
                          goto LABEL_262;
                        }
                        if (lseek(v322[0], 0, 0) == -1 && *__error() == 29) {
                          uint64_t v67 = file_pipe2file();
                        }
                        if (v67 != -1)
                        {
                          if (v322[13])
                          {
                            uint64_t v78 = &v322[1];
                            goto LABEL_253;
                          }
                          uint64_t v78 = __buf;
                          if (fstat(v67, (stat *)__buf) != -1)
                          {
LABEL_253:
                            if (*((void *)v78 + 12)) {
                              BOOL v131 = 1;
                            }
                            else {
                              BOOL v131 = (*((_WORD *)v78 + 2) & 0xF000) == 0x8000;
                            }
                            if (v131) {
                              uint64_t v132 = *((void *)v78 + 12);
                            }
                            else {
                              uint64_t v132 = -1;
                            }
                            int v133 = *(unsigned __int8 *)(v68 + 4);
                            if (v133 != 2)
                            {
                              if (v133 != 1)
                              {
                                int v200 = file_printf(a1, ", unknown class %d", v72, v73, v74, v75, v76, v77, *(unsigned char *)(v68 + 4));
                                uint64_t v16 = (void *)file_pop_buffer(a1, v66);
                                if (v200 == -1) {
                                  unsigned int v20 = -1;
                                }
                                else {
                                  unsigned int v20 = 0;
                                }
                                if (v200 != -1)
                                {
LABEL_264:
                                  int v21 = *(_DWORD *)(a1 + 68);
                                  unsigned int v22 = v318;
                                  if (v21)
                                  {
                                    fprintf((FILE *)*MEMORY[0x263EF8348], "[try elf %d]\n", v23);
                                    int v21 = *(_DWORD *)(a1 + 68);
                                  }
LABEL_266:
                                  if ((v21 & 0x4000) == 0)
                                  {
                                    int v23 = file_softmagic((uint64_t *)a1, (long long *)v322, 0, 0, 0x20u, v22);
                                    if (*(unsigned char *)(a1 + 68)) {
                                      fprintf((FILE *)*MEMORY[0x263EF8348], "[try softmagic %d]\n", v23);
                                    }
                                    if (v23 == 1 && v16)
                                    {
                                      if (file_printf(a1, "%s", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)v16) == -1)
                                      {
LABEL_41:
                                        int v23 = 1;
                                        goto LABEL_329;
                                      }
                                      int v134 = *(_DWORD *)(a1 + 68);
                                    }
                                    else
                                    {
                                      int v134 = *(_DWORD *)(a1 + 68);
                                      if (!v23)
                                      {
                                        if ((v134 & 0x20000) != 0)
                                        {
LABEL_338:
                                          uint64_t v17 = "data";
LABEL_10:
                                          int v18 = *(_DWORD *)(a1 + 68);
                                          if ((v18 & 0x410) != 0)
                                          {
                                            if ((v18 & 0x10) != 0)
                                            {
                                              uint64_t v19 = "octet-stream";
                                              if (!v8) {
                                                uint64_t v19 = "x-empty";
                                              }
                                              if (file_printf(a1, "application/%s", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)v19) == -1)
                                              {
                                                int v23 = 1;
                                                unsigned int v20 = -1;
                                                goto LABEL_329;
                                              }
                                            }
                                            unsigned int v20 = 1;
                                            goto LABEL_41;
                                          }
                                          if ((v18 & 0x800) != 0)
                                          {
                                            uint64_t v24 = "UNKNUNKN";
                                          }
                                          else
                                          {
                                            if ((v18 & 0x1000000) == 0)
                                            {
                                              if (file_printf(a1, "%s", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)v17) == -1)unsigned int v20 = -1; {
                                              else
                                              }
                                                unsigned int v20 = 0;
                                              goto LABEL_41;
                                            }
                                            uint64_t v24 = "???";
                                          }
                                          if (file_printf(a1, v24, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)unsigned int v20 = -1; {
                                          else
                                          }
                                            unsigned int v20 = 1;
                                          goto LABEL_41;
                                        }
                                        goto LABEL_279;
                                      }
                                    }
                                    if ((v134 & 0x20) == 0) {
                                      goto LABEL_329;
                                    }
                                    if (file_printf(a1, "\n- ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)unsigned int v20 = -1; {
                                    int v21 = *(_DWORD *)(a1 + 68);
                                    }
                                  }
                                  if ((v21 & 0x20000) != 0) {
                                    goto LABEL_328;
                                  }
LABEL_279:
                                  unsigned int v320 = v22;
                                  v335[0] = 0;
                                  v331 = 0;
                                  v341[0] = 0;
                                  v339 = 0;
                                  v337 = 0;
                                  int v135 = v322[0];
                                  v342[6] = *(_OWORD *)((char *)&v322[12] + 4);
                                  v342[7] = *(_OWORD *)((char *)&v322[14] + 4);
                                  v342[8] = *(_OWORD *)((char *)&v322[16] + 4);
                                  LODWORD(v342[9]) = HIDWORD(v322[18]);
                                  v342[2] = *(_OWORD *)((char *)&v322[4] + 4);
                                  v342[3] = *(_OWORD *)((char *)&v322[6] + 4);
                                  v342[4] = *(_OWORD *)((char *)&v322[8] + 4);
                                  v342[5] = *(_OWORD *)((char *)&v322[10] + 4);
                                  uint64_t v136 = v322[19];
                                  unint64_t v137 = v323;
                                  v342[0] = *(_OWORD *)((char *)v322 + 4);
                                  v342[1] = *(_OWORD *)((char *)&v322[2] + 4);
                                  while (v137 >= 2)
                                  {
                                    unint64_t v138 = v137--;
                                    if (*(unsigned char *)(v322[19] + v138 - 1)) {
                                      goto LABEL_284;
                                    }
                                  }
                                  unint64_t v138 = v323 != 0;
LABEL_284:
                                  unint64_t v139 = v138 + (v138 & ((v323 & 1) == 0));
                                  if (!file_encoding(a1, (unsigned __int8 *)v322[19], v139, v335, (uint64_t *)&v331, v341, (const char **)&v339, &v337))
                                  {
                                    int v23 = 0;
                                    goto LABEL_326;
                                  }
                                  v140 = (unint64_t *)v335[0];
                                  uint64_t v141 = v331;
                                  char v142 = (char)v341[0];
                                  uint64_t v143 = v337;
                                  *(_OWORD *)v345 = 0u;
                                  long long v344 = 0u;
                                  int v144 = *(_DWORD *)(a1 + 68);
                                  int v145 = v144 & 0x410;
                                  memset(__buf, 0, sizeof(__buf));
                                  do
                                  {
                                    if (v139 < 2)
                                    {
                                      uint64_t v148 = 0;
                                      goto LABEL_324;
                                    }
                                    unint64_t v146 = v139--;
                                  }
                                  while (!*(unsigned char *)(v136 - 1 + v146));
                                  BOOL v147 = 0;
                                  uint64_t v148 = 0;
                                  int v23 = -1;
                                  int v149 = v144;
                                  if (!v331 || (v144 & 0x4000) != 0) {
                                    goto LABEL_323;
                                  }
                                  v309 = (unint64_t *)v335[0];
                                  int v315 = v144 & 0x410;
                                  char v303 = v144;
                                  v297 = v337;
                                  char v300 = (char)v341[0];
                                  uint64_t v150 = 6 * (void)v331;
                                  uint64_t v151 = (char *)v331;
                                  uint64_t v152 = (char *)malloc_type_malloc(6 * (void)v331, 0x14BAA315uLL);
                                  uint64_t v148 = v152;
                                  if (!v152)
                                  {
                                    uint64_t v159 = __error();
                                    file_error(a1, *v159, "cannot allocate %zu bytes", v160, v161, v162, v163, v164, v150);
LABEL_321:
                                    int v23 = -1;
                                    goto LABEL_325;
                                  }
                                  uint64_t v153 = &v152[v150];
                                  v154 = v309;
                                  uint64_t v155 = v151;
                                  uint64_t v156 = v152;
                                  do
                                  {
                                    unint64_t v157 = *v154;
                                    if (*v154 > 0x7F)
                                    {
                                      if (v157 > 0x7FF)
                                      {
                                        if (v157 >> 16)
                                        {
                                          if (v157 >> 21)
                                          {
                                            if (v157 >> 26)
                                            {
                                              int v23 = -1;
                                              if (v157 >> 31 || v153 - v156 < 6) {
                                                goto LABEL_325;
                                              }
                                              *uint64_t v156 = (v157 >> 30) - 4;
                                              v156[1] = *((unsigned char *)v154 + 3) & 0x3F | 0x80;
                                              v156[2] = (*(_DWORD *)v154 >> 18) & 0x3F | 0x80;
                                              v156[3] = (*(_DWORD *)v154 >> 12) & 0x3F | 0x80;
                                              v156[4] = (*(_DWORD *)v154 >> 6) & 0x3F | 0x80;
                                              v156[5] = *(unsigned char *)v154 & 0x3F | 0x80;
                                              v156 += 6;
                                            }
                                            else
                                            {
                                              if (v153 - v156 < 5) {
                                                goto LABEL_321;
                                              }
                                              *uint64_t v156 = BYTE3(v157) - 8;
                                              v156[1] = (*(_DWORD *)v154 >> 18) & 0x3F | 0x80;
                                              v156[2] = (*(_DWORD *)v154 >> 12) & 0x3F | 0x80;
                                              v156[3] = (*(_DWORD *)v154 >> 6) & 0x3F | 0x80;
                                              v156[4] = *(unsigned char *)v154 & 0x3F | 0x80;
                                              v156 += 5;
                                            }
                                          }
                                          else
                                          {
                                            if (v153 - v156 < 4) {
                                              goto LABEL_321;
                                            }
                                            *uint64_t v156 = (v157 >> 18) - 16;
                                            v156[1] = (*(_DWORD *)v154 >> 12) & 0x3F | 0x80;
                                            v156[2] = (*(_DWORD *)v154 >> 6) & 0x3F | 0x80;
                                            v156[3] = *(unsigned char *)v154 & 0x3F | 0x80;
                                            v156 += 4;
                                          }
                                        }
                                        else
                                        {
                                          if (v153 - v156 < 3) {
                                            goto LABEL_321;
                                          }
                                          *uint64_t v156 = (v157 >> 12) - 32;
                                          v156[1] = (*(_DWORD *)v154 >> 6) & 0x3F | 0x80;
                                          v156[2] = *(unsigned char *)v154 & 0x3F | 0x80;
                                          v156 += 3;
                                        }
                                      }
                                      else
                                      {
                                        if (v153 - v156 < 2) {
                                          goto LABEL_321;
                                        }
                                        *uint64_t v156 = (v157 >> 6) - 64;
                                        v156[1] = *(unsigned char *)v154 & 0x3F | 0x80;
                                        v156 += 2;
                                      }
                                    }
                                    else
                                    {
                                      if (v153 - v156 < 1) {
                                        goto LABEL_321;
                                      }
                                      *v156++ = v157;
                                    }
                                    ++v154;
                                    --v155;
                                  }
                                  while (v155);
                                  v294 = v151;
                                  *(_DWORD *)__buf = v135;
                                  *(_OWORD *)&__buf[88] = *(_OWORD *)((char *)&v342[5] + 4);
                                  *(_OWORD *)&__buf[104] = *(_OWORD *)((char *)&v342[6] + 4);
                                  *(_OWORD *)&__buf[120] = *(_OWORD *)((char *)&v342[7] + 4);
                                  *(_OWORD *)&__buf[136] = *(_OWORD *)((char *)&v342[8] + 4);
                                  *(_OWORD *)&__unsigned char buf[24] = *(_OWORD *)((char *)&v342[1] + 4);
                                  *(_OWORD *)&__buf[40] = *(_OWORD *)((char *)&v342[2] + 4);
                                  *(_OWORD *)&__buf[56] = *(_OWORD *)((char *)&v342[3] + 4);
                                  *(_OWORD *)&__buf[72] = *(_OWORD *)((char *)&v342[4] + 4);
                                  *(_OWORD *)&__buf[8] = *(_OWORD *)((char *)v342 + 4);
                                  *(void *)&__buf[152] = v152;
                                  long long v344 = (unint64_t)(v156 - v152);
                                  v345[1] = 0;
                                  v345[0] = 0;
                                  int v158 = file_softmagic((uint64_t *)a1, (long long *)__buf, 0, 0, 0x40u, v320);
                                  BOOL v147 = v158 != 0;
                                  if (v158) {
                                    int v23 = v158;
                                  }
                                  else {
                                    int v23 = -1;
                                  }
                                  free(v345[0]);
                                  int v149 = *(_DWORD *)(a1 + 68);
                                  if ((v149 & 0x1000800) != 0)
                                  {
                                    int v23 = v23 != -1;
                                    goto LABEL_325;
                                  }
                                  uint64_t v143 = v297;
                                  char v142 = v300;
                                  LOBYTE(v144) = v303;
                                  int v145 = v315;
                                  v140 = v309;
                                  uint64_t v141 = v294;
LABEL_323:
                                  if ((v149 & 0x1000800) != 0)
                                  {
LABEL_324:
                                    int v23 = 0;
                                    goto LABEL_325;
                                  }
                                  BOOL v295 = v147;
                                  v321 = v148;
                                  unint64_t v298 = v8;
                                  char v301 = v142;
                                  char v304 = v144;
                                  int v316 = v145;
                                  char v310 = v149;
                                  int v166 = 0;
                                  int v167 = 0;
                                  if (v141)
                                  {
                                    int v168 = 0;
                                    int v169 = 0;
                                    int v170 = 0;
                                    BOOL v171 = 0;
                                    int v172 = 0;
                                    int v173 = 0;
                                    unint64_t v174 = 0;
                                    uint64_t v175 = -1;
                                    do
                                    {
                                      unint64_t v176 = v140[v174];
                                      int v177 = v168 + v171;
                                      int v178 = v170 + v171;
                                      int v179 = v169 + !v171;
                                      if (v176 == 10)
                                      {
                                        int v170 = v178;
                                        int v169 = v179;
                                        uint64_t v175 = v174;
                                      }
                                      else
                                      {
                                        int v168 = v177;
                                      }
                                      BOOL v180 = v176 == 133;
                                      if (v176 == 133) {
                                        ++v167;
                                      }
                                      BOOL v171 = v176 == 13;
                                      if (v176 == 13) {
                                        BOOL v180 = 1;
                                      }
                                      if (v180) {
                                        uint64_t v175 = v174;
                                      }
                                      if (v174 > v175 + 300) {
                                        int v166 = 1;
                                      }
                                      if (v176 == 27) {
                                        int v173 = 1;
                                      }
                                      if (v176 == 8) {
                                        int v172 = 1;
                                      }
                                      ++v174;
                                    }
                                    while (v141 != (void *)v174);
                                    int v288 = v172;
                                    int v291 = v173;
                                    if (v176 == 13 && v146 < *(void *)(a1 + 280)) {
                                      ++v168;
                                    }
                                  }
                                  else
                                  {
                                    int v169 = 0;
                                    int v170 = 0;
                                    int v288 = 0;
                                    int v291 = 0;
                                    int v168 = 0;
                                  }
                                  char v181 = (char)v143;
                                  if (!strcmp(v143, "binary"))
                                  {
                                    int v23 = 0;
                                    goto LABEL_370;
                                  }
                                  uint64_t v188 = *(void *)(a1 + 40);
                                  if (v316)
                                  {
                                    unint64_t v8 = v298;
                                    uint64_t v148 = v321;
                                    if ((v304 & 0x10) != 0)
                                    {
                                      if (v188)
                                      {
                                        if ((v310 & 0x20) == 0 || !v295) {
                                          goto LABEL_406;
                                        }
                                        v189 = "\n- ";
                                      }
                                      else
                                      {
                                        v189 = "text/plain";
                                      }
LABEL_405:
                                      if (file_printf(a1, v189, v182, v183, v184, v185, v186, v187, v284) != -1) {
                                        goto LABEL_406;
                                      }
LABEL_325:
                                      free(v148);
LABEL_326:
                                      free(v335[0]);
                                      if (*(unsigned char *)(a1 + 68)) {
                                        fprintf((FILE *)*MEMORY[0x263EF8348], "[try ascmagic %d]\n", v23);
                                      }
LABEL_328:
                                      if (v23) {
                                        goto LABEL_329;
                                      }
                                      goto LABEL_338;
                                    }
                                    goto LABEL_406;
                                  }
                                  if (v188)
                                  {
                                    int v190 = file_replace(a1, " text$");
                                    if (v190 == -1) {
                                      goto LABEL_370;
                                    }
                                    if (!v190)
                                    {
                                      int v191 = file_replace(a1, " text executable$");
                                      if (v191 == -1) {
                                        goto LABEL_370;
                                      }
                                      if (v191)
                                      {
                                        char v317 = 0;
LABEL_378:
                                        if (file_printf(a1, "%s", v182, v183, v184, v185, v186, v187, v301) == -1|| file_printf(a1, " %s", v192, v193, v194, v195, v196, v197, v181) == -1
                                          || (v317 & 1) == 0
                                          && file_printf(a1, " executable", v182, v183, v184, v185, v186, v187, v284) == -1|| v166&& file_printf(a1, ", with very long lines", v182, v183, v184, v185, v186, v187,
                                                             v284) == -1)
                                        {
                                          goto LABEL_370;
                                        }
                                        int v198 = v170 | v168 | v167 | v169;
                                        BOOL v199 = v198 == 0;
                                        if (v198 && !v170 && !v168 && !v167)
                                        {
LABEL_388:
                                          if (!v291
                                            || file_printf(a1, ", with escape sequences", v182, v183, v184, v185, v186, v187, v284) != -1)
                                          {
                                            unint64_t v8 = v298;
                                            uint64_t v148 = v321;
                                            if (v288)
                                            {
                                              v189 = ", with overstriking";
                                              goto LABEL_405;
                                            }
LABEL_406:
                                            int v23 = 1;
                                            goto LABEL_325;
                                          }
LABEL_370:
                                          unint64_t v8 = v298;
                                          uint64_t v148 = v321;
                                          goto LABEL_325;
                                        }
                                        if (file_printf(a1, ", with", v182, v183, v184, v185, v186, v187, v284) == -1)goto LABEL_370; {
                                        if (v199)
                                        }
                                        {
                                          v233 = " no";
                                        }
                                        else
                                        {
                                          if (v170)
                                          {
                                            if (file_printf(a1, " CRLF", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370; {
                                            if (!v168 && !v169 && !v167)
                                            }
                                              goto LABEL_584;
                                            if (file_printf(a1, ",", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370; {
                                          }
                                            }
                                          if (v168)
                                          {
                                            if (file_printf(a1, " CR", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370; {
                                            if (!(v169 | v167))
                                            }
                                              goto LABEL_584;
                                            if (file_printf(a1, ",", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370; {
                                          }
                                            }
                                          if (v169)
                                          {
                                            if (file_printf(a1, " LF", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370; {
                                            if (!v167)
                                            }
                                              goto LABEL_584;
                                            if (file_printf(a1, ",", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370; {
                                          }
                                            }
                                          else if (!v167)
                                          {
LABEL_584:
                                            if (file_printf(a1, " line terminators", v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370; {
                                            goto LABEL_388;
                                            }
                                          }
                                          v233 = " NEL";
                                        }
                                        if (file_printf(a1, v233, v227, v228, v229, v230, v231, v232, v284) == -1)goto LABEL_370; {
                                        goto LABEL_584;
                                        }
                                      }
                                      if (file_printf(a1, ", ", v182, v183, v184, v185, v186, v187, v284) == -1) {
                                        goto LABEL_370;
                                      }
                                    }
                                  }
                                  char v317 = 1;
                                  goto LABEL_378;
                                }
LABEL_394:
                                free(v16);
                                uint64_t v16 = 0;
                                goto LABEL_264;
                              }
                              if (v69 < 0x35)
                              {
LABEL_262:
                                unsigned int v20 = 0;
LABEL_263:
                                uint64_t v16 = (void *)file_pop_buffer(a1, v66);
                                goto LABEL_264;
                              }
                              int v201 = *(unsigned __int8 *)(v68 + 5);
                              unsigned int v202 = *(unsigned __int16 *)(v68 + 18);
                              unsigned int v203 = *(_DWORD *)(v68 + 28);
                              unsigned int v204 = *(_DWORD *)(v68 + 32);
                              unsigned int v205 = *(unsigned __int16 *)(v68 + 42);
                              unsigned int v206 = *(unsigned __int16 *)(v68 + 44);
                              unsigned int v207 = *(unsigned __int16 *)(v68 + 46);
                              unsigned int v208 = *(unsigned __int16 *)(v68 + 48);
                              unsigned int v209 = *(unsigned __int16 *)(v68 + 50);
                              unsigned int v210 = bswap32(*(unsigned __int16 *)(v68 + 16)) >> 16;
                              if (v201 == 1) {
                                LOWORD(v210) = *(_WORD *)(v68 + 16);
                              }
                              int v211 = *(unsigned __int16 *)(a1 + 272);
                              LOWORD(v335[0]) = *(_WORD *)(a1 + 272);
                              unsigned int v311 = v209;
                              if ((unsigned __int16)v210 - 2 >= 2)
                              {
                                if ((unsigned __int16)v210 != 4)
                                {
                                  if ((unsigned __int16)v210 != 1) {
                                    goto LABEL_544;
                                  }
                                  unsigned int v212 = v202;
                                  LODWORD(v213) = __rev16(v208);
                                  if (v201 == 1) {
                                    uint64_t v213 = v208;
                                  }
                                  else {
                                    uint64_t v213 = v213;
                                  }
                                  uint64_t v305 = v213;
                                  goto LABEL_450;
                                }
                                unsigned int v249 = __rev16(v206);
                                if (v201 == 1) {
                                  uint64_t v75 = v206;
                                }
                                else {
                                  uint64_t v75 = v249;
                                }
                                if (v75 <= *(unsigned __int16 *)(a1 + 270))
                                {
                                  LODWORD(v342[0]) = 2048;
                                  unsigned int v250 = bswap32(v203);
                                  if (v201 == 1) {
                                    off_t v251 = v203;
                                  }
                                  else {
                                    off_t v251 = v250;
                                  }
                                  unsigned int v252 = __rev16(v205);
                                  if (v201 == 1) {
                                    uint64_t v253 = v205;
                                  }
                                  else {
                                    uint64_t v253 = v252;
                                  }
                                  int v246 = dophn_core(a1, 1, v201 != 1, v67, v251, v75, v253, v132, (int *)v342, v335);
                                  goto LABEL_542;
                                }
                                goto LABEL_484;
                              }
                              unsigned int v234 = __rev16(v206);
                              if (v201 == 1) {
                                uint64_t v75 = v206;
                              }
                              else {
                                uint64_t v75 = v234;
                              }
                              if (v75 <= *(unsigned __int16 *)(a1 + 270))
                              {
                                LODWORD(v235) = __rev16(v208);
                                if (v201 == 1) {
                                  uint64_t v235 = v208;
                                }
                                else {
                                  uint64_t v235 = v235;
                                }
                                uint64_t v305 = v235;
                                if (v235 <= *(unsigned __int16 *)(a1 + 268))
                                {
                                  unsigned int v212 = v202;
                                  unsigned int v236 = bswap32(v203);
                                  if (v201 == 1) {
                                    off_t v237 = v203;
                                  }
                                  else {
                                    off_t v237 = v236;
                                  }
                                  unsigned int v238 = __rev16(v205);
                                  if (v201 == 1) {
                                    uint64_t v239 = v205;
                                  }
                                  else {
                                    uint64_t v239 = v238;
                                  }
                                  if (dophn_exec(a1, 1, v201 != 1, v67, v237, v75, v239, v132, v235, (int *)v342, v335) == -1)goto LABEL_393; {
LABEL_450:
                                  }
                                  if (v305 <= *(unsigned __int16 *)(a1 + 268))
                                  {
                                    unsigned int v240 = bswap32(v204);
                                    if (v201 == 1) {
                                      uint64_t v241 = v204;
                                    }
                                    else {
                                      uint64_t v241 = v240;
                                    }
                                    unsigned int v242 = __rev16(v207);
                                    if (v201 == 1) {
                                      uint64_t v243 = v207;
                                    }
                                    else {
                                      uint64_t v243 = v242;
                                    }
                                    unsigned int v244 = __rev16(v212);
                                    if (v201 == 1) {
                                      unsigned int v244 = v212;
                                    }
                                    unsigned int v245 = __rev16(v311);
                                    if (v201 == 1) {
                                      unsigned int v245 = v311;
                                    }
                                    int v246 = doshn(a1, 1, v201 != 1, v67, v241, v305, v243, v132, v244, v245, (int *)v342, v335);
                                    goto LABEL_542;
                                  }
LABEL_529:
                                  if ((*(_WORD *)(a1 + 68) & 0x410) == 0)
                                  {
                                    int v255 = file_printf(a1, ", too many %s (%u)", v72, v73, v74, v75, v76, v77, (char)"section headers");
                                    goto LABEL_548;
                                  }
                                  goto LABEL_549;
                                }
LABEL_491:
                                if ((*(_WORD *)(a1 + 68) & 0x410) == 0)
                                {
                                  v257 = "section";
LABEL_547:
                                  int v255 = file_printf(a1, ", too many %s (%u)", v72, v73, v74, v75, v76, v77, (char)v257);
LABEL_548:
                                  if (v255 != -1) {
                                    goto LABEL_549;
                                  }
                                  goto LABEL_393;
                                }
LABEL_549:
                                unsigned int v20 = 1;
                                goto LABEL_263;
                              }
LABEL_466:
                              if ((*(_WORD *)(a1 + 68) & 0x410) != 0) {
                                goto LABEL_549;
                              }
                              v248 = "program";
LABEL_486:
                              int v255 = file_printf(a1, ", too many %s (%u)", v72, v73, v74, v75, v76, v77, (char)v248);
                              goto LABEL_548;
                            }
                            if (v69 < 0x41)
                            {
                              unsigned int v20 = 0;
                              goto LABEL_263;
                            }
                            int v214 = *(unsigned __int8 *)(v68 + 5);
                            unsigned int v215 = *(unsigned __int16 *)(v68 + 18);
                            unint64_t v216 = *(void *)(v68 + 32);
                            unint64_t v217 = *(void *)(v68 + 40);
                            unsigned int v218 = *(unsigned __int16 *)(v68 + 54);
                            unsigned int v219 = *(unsigned __int16 *)(v68 + 56);
                            unsigned int v220 = *(unsigned __int16 *)(v68 + 58);
                            unsigned int v221 = *(unsigned __int16 *)(v68 + 60);
                            unsigned int v222 = *(unsigned __int16 *)(v68 + 62);
                            unsigned int v223 = bswap32(*(unsigned __int16 *)(v68 + 16)) >> 16;
                            if (v214 == 1) {
                              LOWORD(v223) = *(_WORD *)(v68 + 16);
                            }
                            int v211 = *(unsigned __int16 *)(a1 + 272);
                            LOWORD(v335[0]) = *(_WORD *)(a1 + 272);
                            unsigned int v312 = v222;
                            if ((unsigned __int16)v223 - 2 < 2)
                            {
                              unsigned int v247 = __rev16(v219);
                              if (v214 == 1) {
                                uint64_t v75 = v219;
                              }
                              else {
                                uint64_t v75 = v247;
                              }
                              if (v75 > *(unsigned __int16 *)(a1 + 270)) {
                                goto LABEL_466;
                              }
                              LODWORD(v256) = __rev16(v221);
                              if (v214 == 1) {
                                uint64_t v256 = v221;
                              }
                              else {
                                uint64_t v256 = v256;
                              }
                              uint64_t v306 = v256;
                              if (v256 > *(unsigned __int16 *)(a1 + 268)) {
                                goto LABEL_491;
                              }
                              unsigned int v224 = v220;
                              unsigned int v225 = v215;
                              unint64_t v262 = bswap64(v216);
                              if (v214 == 1) {
                                off_t v263 = v216;
                              }
                              else {
                                off_t v263 = v262;
                              }
                              unsigned int v264 = __rev16(v218);
                              if (v214 == 1) {
                                uint64_t v265 = v218;
                              }
                              else {
                                uint64_t v265 = v264;
                              }
                              if (dophn_exec(a1, 2, v214 != 1, v67, v263, v75, v265, v132, v256, (int *)v342, v335) == -1)goto LABEL_393; {
                            }
                              }
                            else
                            {
                              if ((unsigned __int16)v223 == 4)
                              {
                                unsigned int v254 = __rev16(v219);
                                if (v214 == 1) {
                                  uint64_t v75 = v219;
                                }
                                else {
                                  uint64_t v75 = v254;
                                }
                                if (v75 <= *(unsigned __int16 *)(a1 + 270))
                                {
                                  LODWORD(v342[0]) = 2048;
                                  unint64_t v258 = bswap64(v216);
                                  if (v214 == 1) {
                                    off_t v259 = v216;
                                  }
                                  else {
                                    off_t v259 = v258;
                                  }
                                  unsigned int v260 = __rev16(v218);
                                  if (v214 == 1) {
                                    uint64_t v261 = v218;
                                  }
                                  else {
                                    uint64_t v261 = v260;
                                  }
                                  int v246 = dophn_core(a1, 2, v214 != 1, v67, v259, v75, v261, v132, (int *)v342, v335);
                                  goto LABEL_542;
                                }
LABEL_484:
                                if ((*(_WORD *)(a1 + 68) & 0x410) != 0) {
                                  goto LABEL_549;
                                }
                                v248 = "program headers";
                                goto LABEL_486;
                              }
                              if ((unsigned __int16)v223 != 1) {
                                goto LABEL_544;
                              }
                              unsigned int v224 = v220;
                              unsigned int v225 = v215;
                              LODWORD(v226) = __rev16(v221);
                              if (v214 == 1) {
                                uint64_t v226 = v221;
                              }
                              else {
                                uint64_t v226 = v226;
                              }
                              uint64_t v306 = v226;
                            }
                            if (v306 <= *(unsigned __int16 *)(a1 + 268))
                            {
                              unint64_t v266 = bswap64(v217);
                              if (v214 == 1) {
                                uint64_t v267 = v217;
                              }
                              else {
                                uint64_t v267 = v266;
                              }
                              unsigned int v268 = __rev16(v224);
                              if (v214 == 1) {
                                uint64_t v269 = v224;
                              }
                              else {
                                uint64_t v269 = v268;
                              }
                              unsigned int v270 = __rev16(v225);
                              if (v214 == 1) {
                                unsigned int v270 = v225;
                              }
                              unsigned int v271 = __rev16(v312);
                              if (v214 == 1) {
                                unsigned int v271 = v312;
                              }
                              int v246 = doshn(a1, 2, v214 != 1, v67, v267, v306, v269, v132, v270, v271, (int *)v342, v335);
LABEL_542:
                              if (v246 != -1)
                              {
                                int v211 = LOWORD(v335[0]);
LABEL_544:
                                if (v211 || (*(_WORD *)(a1 + 68) & 0x410) != 0) {
                                  goto LABEL_549;
                                }
                                v257 = "notes";
                                goto LABEL_547;
                              }
LABEL_393:
                              uint64_t v16 = (void *)file_pop_buffer(a1, v66);
                              unsigned int v20 = -1;
                              goto LABEL_394;
                            }
                            goto LABEL_529;
                          }
                        }
                        file_badread(a1, v71, v72, v73, v74, v75, v76, v77, v284);
                        goto LABEL_393;
                      }
LABEL_557:
                      if (cdf_read_user_stream((uint64_t)v341, (uint64_t)v342, &v339, &v337, v335, (uint64_t *)&v329, "FileHeader", (uint64_t)&v331) == -1)goto LABEL_567; {
                      if ((unint64_t)(v334 * v332) < 0x11
                      }
                        || (*(void *)v331 == 0x75636F4420505748
                          ? (BOOL v280 = *((void *)v331 + 1) == 0x6C694620746E656DLL)
                          : (BOOL v280 = 0),
                            v280 ? (BOOL v281 = *((unsigned char *)v331 + 16) == 101) : (BOOL v281 = 0),
                            !v281))
                      {
                        uint64_t v332 = 0;
                        uint64_t v333 = 0;
                        uint64_t v334 = 0;
                        free(v331);
                        v331 = 0;
LABEL_567:
                        if (cdf_read_user_stream((uint64_t)v341, (uint64_t)v342, &v339, &v337, v335, (uint64_t *)&v329, "\x05SummaryInformation", (uint64_t)&v331) == -1)
                        {
                          if (*__error() != 3) {
                            v328 = "Cannot read summary info";
                          }
                        }
                        else
                        {
                          int v23 = cdf_check_summary_info(a1, (uint64_t)v341, (uint64_t)v342, &v339, &v337, v335, (uint64_t *)&v329, (unint64_t *)&v331, v272, &v328);
                          uint64_t v333 = 0;
                          uint64_t v334 = 0;
                          uint64_t v332 = 0;
                          free(v331);
                          v331 = 0;
                          if (v23 > 0) {
                            goto LABEL_589;
                          }
                        }
                        if (cdf_read_user_stream((uint64_t)v341, (uint64_t)v342, &v339, &v337, v335, (uint64_t *)&v329, "\x05DocumentSummaryInformation", (uint64_t)&v331) == -1)
                        {
                          if (*__error() != 3) {
                            v328 = "Cannot read summary info";
                          }
                          goto LABEL_577;
                        }
                        int v23 = cdf_check_summary_info(a1, (uint64_t)v341, (uint64_t)v342, &v339, &v337, v335, (uint64_t *)&v329, (unint64_t *)&v331, v272, &v328);
                        if (v23 <= 0)
                        {
LABEL_577:
                          int v23 = cdf_file_dir_info(a1, (uint64_t *)&v329);
                          if (v23 < 0) {
                            v328 = "Cannot read section info";
                          }
                        }
LABEL_589:
                        uint64_t v332 = 0;
                        uint64_t v333 = 0;
                        uint64_t v334 = 0;
                        free(v331);
                        v331 = 0;
                        long long v336 = 0uLL;
                        v335[1] = 0;
                        free(v335[0]);
                        v335[0] = 0;
                        goto LABEL_590;
                      }
                      int v282 = *(_DWORD *)(a1 + 68);
                      if ((v282 & 0x410) != 0)
                      {
                        if ((v282 & 0x10) == 0)
                        {
LABEL_588:
                          int v23 = 1;
                          goto LABEL_589;
                        }
                        v283 = "application/x-hwp";
                      }
                      else
                      {
                        v283 = "Hangul (Korean) Word Processor File 5.x";
                      }
                      if (file_printf(a1, v283, v274, v275, v276, v277, v278, v279, v284) == -1)
                      {
                        int v23 = -1;
                        unint64_t v8 = v296;
                        unsigned int v22 = v319;
                        goto LABEL_123;
                      }
                      goto LABEL_588;
                    }
                  }
                  *(_OWORD *)v335 = 0u;
                  long long v336 = 0u;
                  goto LABEL_557;
                }
                free(v293);
LABEL_510:
                id v106 = v286;
              }
            }
            v328 = "Can't read directory";
            int v23 = -1;
            goto LABEL_512;
          }
        }
        *__error() = 79;
      }
    }
    int v23 = 0;
    goto LABEL_123;
  }
  if ((v21 & 0x20) != 0)
  {
    if (file_printf(a1, "\n- ", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1) {
      unsigned int v20 = -1;
    }
    int v21 = *(_DWORD *)(a1 + 68);
    goto LABEL_120;
  }
LABEL_127:
  uint64_t v16 = 0;
LABEL_329:
  int v165 = *(_DWORD *)(a1 + 68);
  if ((v165 & 0x400) != 0)
  {
    if ((v165 & 0x10) != 0
      && file_printf(a1, "; charset=", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v284) == -1)
    {
      unsigned int v20 = -1;
    }
    if (file_printf(a1, "%s", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)v326) == -1) {
      unsigned int v20 = -1;
    }
  }
  free(v16);
  free(v324[0]);
  if (v20) {
    return v20;
  }
  else {
    return v23;
  }
}

void *file_push_buffer(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  uint64_t result = malloc_type_malloc(0x18uLL, 0x1010040E2407E0AuLL);
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    *uint64_t result = *(void *)(a1 + 32);
    result[1] = v3;
    *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  return result;
}

uint64_t file_pop_buffer(uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    free(*a2);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = a2[1];
    *(void *)(a1 + 32) = *a2;
    *(void *)(a1 + 40) = v4;
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 4);
  }
  free(a2);
  return v3;
}

uint64_t file_reset(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 && !*(void *)a1)
  {
    file_error(a1, 0, "no magic files loaded", a4, a5, a6, a7, a8, v11);
    return 0xFFFFFFFFLL;
  }
  else
  {
    free(*(void **)(a1 + 32));
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    uint64_t v9 = *(void **)(a1 + 48);
    if (v9)
    {
      free(v9);
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x500], 8) = 0;
    }
    uint64_t result = 0;
    *(_DWORD *)(a1 + 72) &= ~1u;
    *(_DWORD *)(a1 + 64) = -1;
  }
  return result;
}

const char *file_getbuffer(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  uint64_t result = *(const char **)(a1 + 32);
  if ((*(unsigned char *)(a1 + 69) & 1) == 0 && result)
  {
    size_t v3 = strlen(result);
    if (v3 >> 62)
    {
      int v4 = *__error();
      file_error(a1, v4, "cannot allocate %zu bytes", v5, v6, v7, v8, v9, v3);
      return 0;
    }
    int v10 = malloc_type_realloc(*(void **)(a1 + 48), (4 * v3) | 1, 0xDFA9823EuLL);
    if (!v10)
    {
      int v19 = *__error();
      file_error(a1, v19, "cannot allocate %zu bytes", v20, v21, v22, v23, v24, (4 * v3) | 1);
      return 0;
    }
    char v11 = v10;
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x500], 8) = v10;
    __darwin_ct_rune_t v29 = 0;
    memset(&v30, 0, sizeof(v30));
    if (v3)
    {
      long long v12 = *(const char **)(a1 + 32);
      long long v13 = &v12[v3];
      uint64_t v14 = MEMORY[0x263EF8318];
      while (1)
      {
        size_t v15 = mbrtowc(&v29, v12, v13 - v12, &v30);
        if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
          break;
        }
        size_t v16 = v15;
        if (v29 > 0x7F)
        {
          if (!__maskrune(v29, 0x40000uLL))
          {
LABEL_14:
            for (uint64_t i = v11; v16; --v16)
            {
              *char v11 = 92;
              v11[1] = (*v12 >> 6) | 0x30;
              v11[2] = (*v12 >> 3) & 7 | 0x30;
              char v18 = *v12++;
              uint64_t i = v11 + 4;
              v11[3] = v18 & 7 | 0x30;
              v11 += 4;
            }
            goto LABEL_16;
          }
        }
        else if ((*(_DWORD *)(v14 + 4 * v29 + 60) & 0x40000) == 0)
        {
          goto LABEL_14;
        }
        memcpy(v11, v12, v16);
        v12 += v16;
        uint64_t i = &v11[v16];
LABEL_16:
        char v11 = i;
        if (v12 >= v13) {
          goto LABEL_22;
        }
      }
      *char v11 = 0;
      unint64_t v25 = *(unsigned char **)(a1 + 48);
      uint64_t v26 = *(unsigned char **)(a1 + 32);
      unsigned int v27 = *v26;
      if (*v26)
      {
        do
        {
          if ((v27 & 0x80) != 0)
          {
            if (!__maskrune(v27, 0x40000uLL))
            {
LABEL_28:
              *unint64_t v25 = 92;
              v25[1] = (*v26 >> 6) | 0x30;
              v25[2] = (*v26 >> 3) & 7 | 0x30;
              v25[3] = *v26 & 7 | 0x30;
              v25 += 4;
              goto LABEL_29;
            }
          }
          else if ((*(_DWORD *)(v14 + 4 * v27 + 60) & 0x40000) == 0)
          {
            goto LABEL_28;
          }
          *v25++ = v27;
LABEL_29:
          unsigned int v28 = *++v26;
          unsigned int v27 = v28;
        }
        while (v28);
      }
      *unint64_t v25 = 0;
    }
    else
    {
      uint64_t i = v10;
LABEL_22:
      *uint64_t i = 0;
    }
    return *(const char **)(a1 + 48);
  }
  return result;
}

uint64_t file_check_mem(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 16) <= (unint64_t)a2)
  {
    *(void *)(a1 + 16) = a2 + 20;
    uint64_t v5 = *(void **)(a1 + 24);
    if (v5) {
      int v4 = (char *)malloc_type_realloc(v5, 16 * (a2 + 20), 0x66DD4FFAuLL);
    }
    else {
      int v4 = (char *)malloc_type_malloc(16 * (a2 + 20), 0xFB63A30BuLL);
    }
    *(void *)(a1 + 24) = v4;
    if (!v4)
    {
      uint64_t v8 = __error();
      file_error(a1, *v8, "cannot allocate %zu bytes", v9, v10, v11, v12, v13, 16 * (a2 + 20));
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    int v4 = *(char **)(a1 + 24);
  }
  uint64_t v6 = 0;
  uint64_t v7 = &v4[16 * a2];
  *((void *)v7 + 1) = 0;
  *((_DWORD *)v7 + 1) = 0;
  return v6;
}

uint64_t file_replace(uint64_t a1, const char *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  memset(&v19, 0, sizeof(v19));
  memset(v18, 0, sizeof(v18));
  uint64_t v3 = file_regcomp((uint64_t)v18, a2, 1);
  uint64_t v4 = v3;
  if (v3)
  {
    regerror(v3, &v19, (char *)v20, 0x200uLL);
LABEL_7:
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  else
  {
    v20[0].regoff_t rm_so = 0;
    v20[0].regoff_t rm_eo = 0;
    while (!file_regexec((uint64_t)v18, *(const char **)(a1 + 32), 1uLL, v20))
    {
      *(unsigned char *)(*(void *)(a1 + 32) + v20[0].rm_so) = 0;
      if (file_printf(a1, "%s%s", v5, v6, v7, v8, v9, v10, (char)", ") == -1) {
        goto LABEL_7;
      }
      uint64_t v4 = (v4 + 1);
    }
  }
  file_regfree((uint64_t)v18);
  return v4;
}

uint64_t file_regcomp(uint64_t a1, const char *a2, int a3)
{
  uint64_t v6 = newlocale(2, "C", 0);
  *(void *)(a1 + 16) = v6;
  if (!v6) {
    __assert_rtn("file_regcomp", "funcs.c", 638, "rx->c_lc_ctype != NULL");
  }
  locale_t v7 = uselocale(v6);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x500], 8) = v7;
  if (!v7) {
    __assert_rtn("file_regcomp", "funcs.c", 640, "rx->old_lc_ctype != NULL");
  }
  *(void *)a1 = a2;
  uint64_t result = regcomp((regex_t *)(a1 + 32), a2, a3);
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t file_regexec(uint64_t a1, const char *a2, size_t a3, regmatch_t *a4)
{
  if (*(_DWORD *)(a1 + 24)) {
    __assert_rtn("file_regexec", "funcs.c", 657, "rx->rc == 0");
  }
  if (a3)
  {
    a4->regoff_t rm_so = 0;
    a4->regoff_t rm_eo = 0;
  }
  uint64_t v4 = (const regex_t *)(a1 + 32);
  return regexec(v4, a2, a3, a4, 0);
}

uint64_t file_regfree(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 24)) {
    MEMORY[0x2166CFE40](a1 + 32);
  }
  uselocale(*(locale_t *)(a1 + 8));
  uint64_t v2 = *(_xlocale **)(a1 + 16);
  return freelocale(v2);
}

uint64_t file_regerror(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  regerror(a2, (const regex_t *)(a1 + 32), v13, 0x200uLL);
}

unsigned char *file_printable(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (unint64_t)&a1[a2 - 1];
  BOOL v6 = v5 <= (unint64_t)a1 || a4 < 1;
  uint64_t v7 = a1;
  if (!v6)
  {
    unint64_t v8 = a3 + a4;
    unint64_t v9 = (unint64_t)&a1[a2 - 4];
    unint64_t v10 = a3 + 1;
    uint64_t v11 = MEMORY[0x263EF8318];
    uint64_t v7 = a1;
    do
    {
      uint64_t v12 = *(unsigned __int8 *)(v10 - 1);
      if (!*(unsigned char *)(v10 - 1)) {
        break;
      }
      char v13 = *(unsigned char *)(v10 - 1);
      if ((char)v12 < 0)
      {
        if (!__maskrune(v12, 0x40000uLL))
        {
LABEL_11:
          if ((unint64_t)v7 >= v9) {
            break;
          }
          *uint64_t v7 = 92;
          v7[1] = (*(unsigned char *)(v10 - 1) >> 6) | 0x30;
          v7[2] = (*(unsigned char *)(v10 - 1) >> 3) & 7 | 0x30;
          v7[3] = *(unsigned char *)(v10 - 1) & 7 | 0x30;
          v7 += 4;
          continue;
        }
      }
      else if ((*(_DWORD *)(v11 + 4 * v12 + 60) & 0x40000) == 0)
      {
        goto LABEL_11;
      }
      *v7++ = v13;
    }
    while ((unint64_t)v7 < v5 && v10++ < v8);
  }
  *uint64_t v7 = 0;
  return a1;
}

uint64_t file_parse_guid(const char *a1, uint64_t a2)
{
  if (sscanf(a1, "%8x-%4hx-%4hx-%2hhx%2hhx-%2hhx%2hhx%2hhx%2hhx%2hhx%2hhx", a2, a2 + 4, a2 + 6, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15) == 11)return 0; {
  else
  }
    return 0xFFFFFFFFLL;
}

uint64_t file_print_guid(char *a1, size_t a2, uint64_t a3)
{
  return snprintf(a1, a2, "%.8X-%.4hX-%.4hX-%.2hhX%.2hhX-%.2hhX%.2hhX%.2hhX%.2hhX%.2hhX%.2hhX", *(_DWORD *)a3, *(unsigned __int16 *)(a3 + 4), *(unsigned __int16 *)(a3 + 6), *(unsigned __int8 *)(a3 + 8), *(unsigned __int8 *)(a3 + 9), *(unsigned __int8 *)(a3 + 10), *(unsigned __int8 *)(a3 + 11), *(unsigned __int8 *)(a3 + 12), *(unsigned __int8 *)(a3 + 13), *(unsigned __int8 *)(a3 + 14), *(unsigned __int8 *)(a3 + 15));
}

Class initUIPrintFormatter_12089()
{
  if (UIKitLibrary_sOnce_12090 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_12090, &__block_literal_global_267);
  }
  Class result = objc_getClass("UIPrintFormatter");
  classUIPrintFormatter_12092 = (uint64_t)result;
  getUIPrintFormatterClass_12083 = (uint64_t (*)())UIPrintFormatterFunction_12094;
  return result;
}

id UIPrintFormatterFunction_12094()
{
  return (id)classUIPrintFormatter_12092;
}

void *__UIKitLibrary_block_invoke_12096()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib_12098 = (uint64_t)result;
  return result;
}

void sub_216599480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t file_encoding(int a1, unsigned __int8 *a2, unint64_t a3, void **a4, uint64_t *a5, const char **a6, const char **a7, void *a8)
{
  uint64_t v82 = 0;
  int v83 = 0;
  if (a4) {
    uint64_t v14 = a4;
  }
  else {
    uint64_t v14 = &v83;
  }
  if (a5) {
    uint64_t v15 = a5;
  }
  else {
    uint64_t v15 = &v82;
  }
  *a8 = "text";
  *uint64_t v15 = 0;
  *a6 = "unknown";
  *a7 = "binary";
  size_t v16 = a3 + 1;
  char v17 = 8 * (a3 + 1);
  char v18 = malloc_type_calloc(1uLL, 8 * (a3 + 1), 0xB515E13AuLL);
  void *v14 = v18;
  if (!v18)
  {
    uint64_t v26 = __error();
    file_error(a1, *v26, "cannot allocate %zu bytes", v27, v28, v29, v30, v31, v17);
    regex_t v19 = 0;
    goto LABEL_24;
  }
  regex_t v19 = malloc_type_calloc(1uLL, v16, 0x5AAA6E6AuLL);
  if (!v19)
  {
    BOOL v32 = __error();
    file_error(a1, *v32, "cannot allocate %zu bytes", v33, v34, v35, v36, v37, v16);
    goto LABEL_24;
  }
  uint64_t v20 = (uint64_t)*v14;
  *uint64_t v15 = 0;
  if (!a3) {
    goto LABEL_21;
  }
  uint64_t v21 = 0;
  do
  {
    uint64_t v22 = a2[v21];
    if (text_chars[v22] != 1)
    {
      if (a3 >= 4 && *a2 == 239 && a2[1] == 187 && a2[2] == 191)
      {
        if ((int)file_looks_utf8((uint64_t)(a2 + 3), a3 - 3, v20, v15) > 0)
        {
          uint64_t v40 = "UTF-8 Unicode (with BOM)";
LABEL_37:
          *a6 = v40;
          unint64_t v25 = "utf-8";
          goto LABEL_22;
        }
        uint64_t v20 = (uint64_t)*v14;
      }
      if ((int)file_looks_utf8((uint64_t)a2, a3, v20, v15) >= 2)
      {
        uint64_t v40 = "UTF-8 Unicode";
        goto LABEL_37;
      }
      uint64_t v41 = *v14;
      if (a3 >= 4)
      {
        int v42 = *a2;
        if (*a2)
        {
          if (v42 != 255)
          {
LABEL_47:
            if (v42 == 254)
            {
              if (a2[1] == 255)
              {
                int v44 = 0;
                int v45 = 2;
                goto LABEL_104;
              }
LABEL_74:
              uint64_t v58 = 0;
              *uint64_t v15 = 0;
              while (1)
              {
                unint64_t v59 = a2[v58];
                if (v59 <= 0x9F && text_chars[v59] != 1) {
                  break;
                }
                uint64_t v61 = (*v15)++;
                v41[v61] = v59;
                if (a3 == ++v58)
                {
                  *a6 = "ISO-8859";
                  unint64_t v25 = "iso-8859-1";
                  goto LABEL_22;
                }
              }
              uint64_t v62 = 0;
              *uint64_t v15 = 0;
              while (1)
              {
                unint64_t v63 = a2[v62];
                if (v63 <= 0x9F && (text_chars[v63] & 0xFD) != 1) {
                  break;
                }
                uint64_t v65 = (*v15)++;
                v41[v65] = v63;
                if (a3 == ++v62)
                {
                  *a6 = "Non-ISO extended-ASCII";
                  unint64_t v25 = "unknown-8bit";
                  goto LABEL_22;
                }
              }
              uint64_t v66 = 0;
              do
              {
                v19[v66] = ebcdic_to_ascii[a2[v66]];
                ++v66;
              }
              while (a3 != v66);
              uint64_t v67 = 0;
              uint64_t v68 = *v14;
              *uint64_t v15 = 0;
              while (1)
              {
                uint64_t v69 = v19[v67];
                if (text_chars[v69] != 1) {
                  break;
                }
                uint64_t v70 = (*v15)++;
                v68[v70] = v69;
                if (a3 == ++v67)
                {
                  uint64_t v71 = "EBCDIC";
                  goto LABEL_102;
                }
              }
              uint64_t v72 = 0;
              *uint64_t v15 = 0;
              do
              {
                unint64_t v73 = v19[v72];
                if (v73 <= 0x9F && text_chars[v73] != 1)
                {
                  uint64_t v38 = 0;
                  *a8 = "binary";
                  goto LABEL_25;
                }
                uint64_t v75 = (*v15)++;
                v68[v75] = v73;
                ++v72;
              }
              while (a3 != v72);
              uint64_t v71 = "International EBCDIC";
LABEL_102:
              *a6 = v71;
              unint64_t v25 = "ebcdic";
              goto LABEL_22;
            }
            if (v42 != 255) {
              goto LABEL_74;
            }
LABEL_49:
            if (a2[1] == 254)
            {
              int v44 = 1;
              int v45 = 1;
LABEL_104:
              *uint64_t v15 = 0;
              if (a3 < 4)
              {
LABEL_115:
                if (v45 == 1)
                {
                  *a6 = "Little-endian UTF-16 Unicode";
                  unint64_t v25 = "utf-16le";
                }
                else
                {
                  *a6 = "Big-endian UTF-16 Unicode";
                  unint64_t v25 = "utf-16be";
                }
                goto LABEL_22;
              }
              uint64_t v76 = 0;
              unint64_t v77 = 3;
              while (1)
              {
                unint64_t v78 = v77 - 1;
                if (v44) {
                  unint64_t v79 = v77 - 1;
                }
                else {
                  unint64_t v79 = v77;
                }
                if (v44) {
                  unint64_t v78 = v77;
                }
                unint64_t v80 = a2[v79] | ((unint64_t)a2[v78] << 8);
                *uint64_t v15 = v76 + 1;
                v41[v76] = v80;
                uint64_t v76 = *v15;
                unint64_t v81 = v41[*v15 - 1];
                if (v81 == 65534 || v81 <= 0x7F && text_chars[v81] != 1) {
                  goto LABEL_74;
                }
                v77 += 2;
                if (v77 >= a3) {
                  goto LABEL_115;
                }
              }
            }
            goto LABEL_74;
          }
          if (a2[1] != 254) {
            goto LABEL_74;
          }
          if (a2[2] || a2[3]) {
            goto LABEL_49;
          }
          int v43 = 1;
        }
        else
        {
          if (a2[1] || a2[2] != 254 || a2[3] != 255) {
            goto LABEL_74;
          }
          int v43 = 0;
        }
        *uint64_t v15 = 0;
        if (a3 < 8)
        {
LABEL_71:
          if (v43)
          {
            *a6 = "Little-endian UTF-32 Unicode";
            unint64_t v25 = "utf-32le";
          }
          else
          {
            *a6 = "Big-endian UTF-32 Unicode";
            unint64_t v25 = "utf-32be";
          }
          goto LABEL_22;
        }
        uint64_t v46 = 0;
        uint64_t v47 = 1;
        if (v43) {
          uint64_t v48 = 1;
        }
        else {
          uint64_t v48 = 2;
        }
        if (v43) {
          uint64_t v47 = 2;
        }
        uint64_t v49 = &a2[v47];
        unsigned __int16 v50 = &a2[v48];
        uint64_t v51 = 4;
        while (1)
        {
          uint64_t v52 = v51 + 3;
          if (v43) {
            uint64_t v53 = v51;
          }
          else {
            uint64_t v53 = v51 + 3;
          }
          unint64_t v54 = a2[v53] | ((unint64_t)v50[v51] << 8);
          if (!v43) {
            uint64_t v52 = v51;
          }
          unint64_t v55 = v54 | ((unint64_t)v49[v51] << 16) | ((unint64_t)a2[v52] << 24);
          *uint64_t v15 = v46 + 1;
          v41[v46] = v55;
          uint64_t v46 = *v15;
          unint64_t v56 = v41[*v15 - 1];
          if (v56 == 65534 || v56 <= 0x7F && text_chars[v56] != 1) {
            break;
          }
          unint64_t v57 = v51 + 7;
          v51 += 4;
          if (v57 >= a3) {
            goto LABEL_71;
          }
        }
      }
      if (a3 < 2) {
        goto LABEL_74;
      }
      int v42 = *a2;
      goto LABEL_47;
    }
    uint64_t v23 = (*v15)++;
    *(void *)(v20 + 8 * v23) = v22;
    ++v21;
  }
  while (a3 != v21);
  if (a3 >= 5 && *a2 == 43 && a2[1] == 47 && a2[2] == 118)
  {
    unsigned int v24 = a2[3];
    if (v24 <= 0x39 && ((1 << v24) & 0x300880000000000) != 0)
    {
      *uint64_t v15 = 0;
      *a6 = "UTF-7 Unicode";
      unint64_t v25 = "utf-7";
      goto LABEL_22;
    }
  }
LABEL_21:
  *a6 = "ASCII";
  unint64_t v25 = "us-ascii";
LABEL_22:
  *a7 = v25;
LABEL_24:
  uint64_t v38 = 1;
LABEL_25:
  free(v19);
  if (v14 == &v83) {
    free(v83);
  }
  return v38;
}

uint64_t file_looks_utf8(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  if (a3) {
    *a4 = 0;
  }
  if (!a2)
  {
    BOOL v13 = 1;
LABEL_33:
    unsigned int v14 = 1;
    goto LABEL_34;
  }
  int v4 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  while (1)
  {
    unint64_t v7 = *(unsigned __int8 *)(a1 + v6);
    if (*(char *)(a1 + v6) < 0) {
      break;
    }
    if (text_chars[*(unsigned __int8 *)(a1 + v6)] != 1) {
      int v4 = 1;
    }
    if (a3)
    {
LABEL_9:
      uint64_t v8 = (*a4)++;
      *(void *)(a3 + 8 * v_Block_object_dispose(&STACK[0x500], 8) = v7;
    }
LABEL_10:
    if (++v6 >= a2) {
      goto LABEL_31;
    }
  }
  if ((v7 & 0x40) == 0) {
    return 0xFFFFFFFFLL;
  }
  if ((v7 & 0x20) != 0)
  {
    if ((v7 & 0x10) == 0)
    {
      int v9 = 2;
      int v10 = 15;
      goto LABEL_23;
    }
    if ((v7 & 8) == 0)
    {
      int v9 = 3;
      int v10 = 7;
      goto LABEL_23;
    }
    if ((v7 & 4) == 0)
    {
      int v9 = 4;
      int v10 = 3;
      goto LABEL_23;
    }
    if ((v7 & 2) == 0)
    {
      int v9 = 5;
      int v10 = 1;
      goto LABEL_23;
    }
    return 0xFFFFFFFFLL;
  }
  int v9 = 1;
  int v10 = 31;
LABEL_23:
  unint64_t v7 = v10 & v7;
  unint64_t v11 = v6 + 1;
  v6 += 1 + (v9 - 1);
  while (v11 < a2)
  {
    uint64_t v12 = 0xFFFFFFFFLL;
    if ((*(unsigned char *)(a1 + v11) & 0x80) == 0 || (*(unsigned char *)(a1 + v11) & 0x40) != 0) {
      return v12;
    }
    unint64_t v7 = *(unsigned char *)(a1 + v11++) & 0x3F | (v7 << 6);
    if (!--v9)
    {
      int v5 = 1;
      if (a3) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
  }
LABEL_31:
  BOOL v13 = v4 == 0;
  if (!v5) {
    goto LABEL_33;
  }
  unsigned int v14 = 2;
LABEL_34:
  if (v13) {
    return v14;
  }
  else {
    return 0;
  }
}

uint64_t WFInstalledAppsEnumerator()
{
  +[WFGreenTeaLogger log:@"Reading installed app list"];
  id v0 = (void *)MEMORY[0x263F01878];
  return [v0 enumeratorWithOptions:0];
}

id WFCreateTestingEventStore(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)[objc_alloc((Class)getEKEventStoreClass()) initWithEKOptions:12 path:v1 changeTrackingClientId:0 enablePropertyModificationLogging:1 allowDelegateSources:0];

  [v2 _setIsUnitTesting:1];
  return v2;
}

id getEKEventStoreClass()
{
  uint64_t v4 = 0;
  int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getEKEventStoreClass_softClass;
  uint64_t v7 = getEKEventStoreClass_softClass;
  if (!getEKEventStoreClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getEKEventStoreClass_block_invoke;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getEKEventStoreClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21659BA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getEKEventStoreClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!EventKitLibraryCore_frameworkLibrary_12500)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __EventKitLibraryCore_block_invoke_12501;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264288430;
    uint64_t v8 = 0;
    EventKitLibraryCore_frameworkLibrary_12500 = _sl_dlopen();
  }
  if (!EventKitLibraryCore_frameworkLibrary_12500)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *EventKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFEventKitUtilities.m", 15, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("EKEventStore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    int v5 = [NSString stringWithUTF8String:"Class getEKEventStoreClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFEventKitUtilities.m", 16, @"Unable to find class %s", "EKEventStore");

LABEL_10:
    __break(1u);
  }
  getEKEventStoreClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __EventKitLibraryCore_block_invoke_12501()
{
  uint64_t result = _sl_dlopen();
  EventKitLibraryCore_frameworkLibrary_12500 = result;
  return result;
}

id WFGetWorkflowEventStore()
{
  if (WFGetWorkflowEventStore_onceToken != -1) {
    dispatch_once(&WFGetWorkflowEventStore_onceToken, &__block_literal_global_12517);
  }
  id v0 = (void *)workflowEventStore;
  return v0;
}

uint64_t __WFGetWorkflowEventStore_block_invoke()
{
  workflowEventStore = WFRecreateEventStore();
  return MEMORY[0x270F9A758]();
}

id WFRecreateEventStore()
{
  if (testingEventStorePath)
  {
    id v0 = WFCreateTestingEventStore((void *)testingEventStorePath);
  }
  else
  {
    getEKEventStoreClass();
    id v0 = objc_opt_new();
  }
  return v0;
}

id WFGetWorkflowTestingEventStore()
{
  if (!testingEventStorePath)
  {
    id v0 = +[WFTemporaryFileManager createTemporaryDirectoryWithFilename:@"ShortcutsTestCalendarDatabase"];
    uint64_t v1 = [v0 path];
    uint64_t v2 = (void *)testingEventStorePath;
    testingEventStorePath = v1;

    if (workflowEventStore)
    {
      uint64_t v3 = WFRecreateEventStore();
      uint64_t v4 = (void *)workflowEventStore;
      workflowEventStore = v3;
    }
  }
  return WFGetWorkflowEventStore();
}

id WFSetWorkflowTestingEventStorePath(id obj)
{
  objc_storeStrong((id *)&testingEventStorePath, obj);
  return WFRecreateEventStore();
}

uint64_t WFClearWorkflowEventStore()
{
  [(id)workflowEventStore reset];
  workflowEventStore = WFRecreateEventStore();
  return MEMORY[0x270F9A758]();
}

id WFGetDeserializingEventStore(void *a1)
{
  return objc_getAssociatedObject(a1, &WFDeserializingEventStoreKey);
}

void WFSetDeserializingEventStore(void *a1, id value)
{
}

void sub_21659C3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNSAttachmentAttributeNameSymbolLoc_block_invoke_12541(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!UIFoundationLibraryCore_frameworkLibrary_12552)
  {
    v5[1] = (void *)MEMORY[0x263EF8330];
    v5[2] = (void *)3221225472;
    v5[3] = __UIFoundationLibraryCore_block_invoke_12553;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_264288470;
    uint64_t v7 = 0;
    UIFoundationLibraryCore_frameworkLibrary_12552 = _sl_dlopen();
  }
  uint64_t v2 = (void *)UIFoundationLibraryCore_frameworkLibrary_12552;
  if (!UIFoundationLibraryCore_frameworkLibrary_12552)
  {
    a1 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *UIFoundationLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"NSAttributedString+TextAttachmentExtraction.m", 15, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "NSAttachmentAttributeName");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getNSAttachmentAttributeNameSymbolLoc_ptr_12540 = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __UIFoundationLibraryCore_block_invoke_12553()
{
  uint64_t result = _sl_dlopen();
  UIFoundationLibraryCore_frameworkLibrary_12552 = result;
  return result;
}

id get_MKLocationShifterClass()
{
  uint64_t v4 = 0;
  int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)get_MKLocationShifterClass_softClass;
  uint64_t v7 = get_MKLocationShifterClass_softClass;
  if (!get_MKLocationShifterClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __get_MKLocationShifterClass_block_invoke;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __get_MKLocationShifterClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_21659D0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __MapKitLibraryCore_block_invoke_12733()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary_12732 = result;
  return result;
}

void sub_21659D718(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id WFAvailableArchiveFilename(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v3;
  uint64_t v6 = v5;
  if ([v4 containsObject:v5])
  {
    uint64_t v7 = 2;
    uint64_t v8 = v5;
    do
    {
      id v9 = v5;
      int v10 = [v9 pathExtension];
      if ([v10 length])
      {
        uint64_t v11 = [v9 stringByDeletingPathExtension];

        id v9 = (id)v11;
      }
      uint64_t v6 = objc_msgSend(v9, "stringByAppendingFormat:", @"-%lu", v7);

      if ([v10 length])
      {
        uint64_t v12 = [v6 stringByAppendingPathExtension:v10];

        uint64_t v6 = (void *)v12;
      }

      ++v7;
      uint64_t v8 = v6;
    }
    while (([v4 containsObject:v6] & 1) != 0);
  }
  [v4 addObject:v6];

  return v6;
}

id WFLastArchiveError()
{
  v7[1] = *MEMORY[0x263EF8340];
  int v0 = archive_errno();
  uint64_t v1 = archive_error_string();
  if (v1)
  {
    uint64_t v6 = *MEMORY[0x263F08320];
    uint64_t v2 = [NSString stringWithUTF8String:v1];
    v7[0] = v2;
    id v3 = [NSDictionary dictionaryWithObjects:v7 forKeys:&v6 count:1];
  }
  else
  {
    id v3 = 0;
  }
  id v4 = [MEMORY[0x263F087E8] errorWithDomain:@"WFLibArchiveErrorDomain" code:v0 userInfo:v3];

  return v4;
}

id getWFLibArchiveLogObject()
{
  if (getWFLibArchiveLogObject_onceToken != -1) {
    dispatch_once(&getWFLibArchiveLogObject_onceToken, &__block_literal_global_12938);
  }
  int v0 = (void *)getWFLibArchiveLogObject_log;
  return v0;
}

id WFPathFromArchiveEntry()
{
  uint64_t v0 = archive_entry_pathname();
  if (v0)
  {
    uint64_t v1 = (const char *)v0;
    uint64_t v2 = (void *)[[NSString alloc] initWithUTF8String:v0];
    if (v2) {
      goto LABEL_8;
    }
    id v3 = (const __int32 *)archive_entry_pathname_w();
    if (!v3)
    {
      id v4 = (void *)[objc_alloc(MEMORY[0x263EFF8F8]) initWithBytes:v1 length:strlen(v1)];
      uint64_t v2 = objc_msgSend(NSString, "wf_stringWithData:", v4);

      goto LABEL_8;
    }
    goto LABEL_6;
  }
  id v3 = (const __int32 *)archive_entry_pathname_w();
  if (v3)
  {
LABEL_6:
    uint64_t v2 = (void *)[[NSString alloc] initWithBytes:v3 length:4 * wcslen(v3) encoding:2617245952];
    goto LABEL_8;
  }
  uint64_t v2 = 0;
LABEL_8:
  return v2;
}

uint64_t __getWFLibArchiveLogObject_block_invoke()
{
  getWFLibArchiveLogObject_log = (uint64_t)os_log_create((const char *)*MEMORY[0x263F85748], "LibArchive");
  return MEMORY[0x270F9A758]();
}

void sub_2165A110C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getWKContentRuleListStoreClass_block_invoke(uint64_t a1)
{
  WebKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("WKContentRuleListStore");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getWKContentRuleListStoreClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getWKContentRuleListStoreClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFWKWebViewCapturer.m", 25, @"Unable to find class %s", "WKContentRuleListStore");

    __break(1u);
  }
}

void WebKitLibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!WebKitLibraryCore_frameworkLibrary_13516)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __WebKitLibraryCore_block_invoke_13517;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_2642885C8;
    uint64_t v5 = 0;
    WebKitLibraryCore_frameworkLibrary_13516 = _sl_dlopen();
  }
  if (!WebKitLibraryCore_frameworkLibrary_13516)
  {
    uint64_t v1 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *WebKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFWKWebViewCapturer.m", 22, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __WebKitLibraryCore_block_invoke_13517()
{
  uint64_t result = _sl_dlopen();
  WebKitLibraryCore_frameworkLibrary_13516 = result;
  return result;
}

void sub_2165A1C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getWKWebViewConfigurationClass_block_invoke_13562(uint64_t a1)
{
  WebKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebViewConfiguration");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getWKWebViewConfigurationClass_softClass_13561 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getWKWebViewConfigurationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFWKWebViewCapturer.m", 24, @"Unable to find class %s", "WKWebViewConfiguration");

    __break(1u);
  }
}

void __getWKWebViewClass_block_invoke_13564(uint64_t a1)
{
  WebKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("WKWebView");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getWKWebViewClass_softClass_13563 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getWKWebViewClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFWKWebViewCapturer.m", 23, @"Unable to find class %s", "WKWebView");

    __break(1u);
  }
}

id __WFCNLabeledURLAddressesFromNSURLs_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id CNLabeledValueClass_13658 = getCNLabeledValueClass_13658();
  long long v4 = [v2 absoluteString];

  uint64_t v5 = [CNLabeledValueClass_13658 labeledValueWithLabel:0 value:v4];

  return v5;
}

id getCNLabeledValueClass_13658()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCNLabeledValueClass_softClass_13659;
  uint64_t v7 = getCNLabeledValueClass_softClass_13659;
  if (!getCNLabeledValueClass_softClass_13659)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCNLabeledValueClass_block_invoke_13660;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getCNLabeledValueClass_block_invoke_13660((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165A2564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNLabeledValueClass_block_invoke_13660(uint64_t a1)
{
  ContactsLibrary_13661();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNLabeledValue");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNLabeledValueClass_softClass_13659 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCNLabeledValueClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContactContentItemChangeTransaction.m", 17, @"Unable to find class %s", "CNLabeledValue");

    __break(1u);
  }
}

void ContactsLibrary_13661()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary_13672)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __ContactsLibraryCore_block_invoke_13673;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264288608;
    uint64_t v5 = 0;
    ContactsLibraryCore_frameworkLibrary_13672 = _sl_dlopen();
  }
  if (!ContactsLibraryCore_frameworkLibrary_13672)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *ContactsLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFContactContentItemChangeTransaction.m", 14, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __ContactsLibraryCore_block_invoke_13673()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary_13672 = result;
  return result;
}

id __WFCNLabeledPostalAddressesFromWFPostalAddresses_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id CNLabeledValueClass_13658 = getCNLabeledValueClass_13658();
  long long v4 = [v2 label];
  uint64_t v5 = [v2 postalAddress];

  uint64_t v6 = [CNLabeledValueClass_13658 labeledValueWithLabel:v4 value:v5];

  return v6;
}

id __WFCNLabeledEmailAddressesFromWFEmailAddresses_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id CNLabeledValueClass_13658 = getCNLabeledValueClass_13658();
  long long v4 = [v2 label];
  uint64_t v5 = [v2 address];

  uint64_t v6 = [CNLabeledValueClass_13658 labeledValueWithLabel:v4 value:v5];

  return v6;
}

id __WFCNLabeledPhoneNumbersFromWFPhoneNumbers_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id CNLabeledValueClass_13658 = getCNLabeledValueClass_13658();
  long long v4 = [v2 label];
  uint64_t v12 = 0;
  BOOL v13 = &v12;
  uint64_t v14 = 0x2050000000;
  uint64_t v5 = (void *)getCNPhoneNumberClass_softClass_13694;
  uint64_t v15 = getCNPhoneNumberClass_softClass_13694;
  if (!getCNPhoneNumberClass_softClass_13694)
  {
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 3221225472;
    v11[2] = __getCNPhoneNumberClass_block_invoke_13695;
    v11[3] = &unk_26428AC60;
    void v11[4] = &v12;
    __getCNPhoneNumberClass_block_invoke_13695((uint64_t)v11);
    uint64_t v5 = (void *)v13[3];
  }
  id v6 = v5;
  _Block_object_dispose(&v12, 8);
  uint64_t v7 = [v2 string];
  uint64_t v8 = [v6 phoneNumberWithStringValue:v7];
  id v9 = [CNLabeledValueClass_13658 labeledValueWithLabel:v4 value:v8];

  return v9;
}

void sub_2165A32C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNPhoneNumberClass_block_invoke_13695(uint64_t a1)
{
  ContactsLibrary_13661();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNPhoneNumber");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNPhoneNumberClass_softClass_13694 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCNPhoneNumberClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContactContentItemChangeTransaction.m", 18, @"Unable to find class %s", "CNPhoneNumber");

    __break(1u);
  }
}

void sub_2165A37D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void __getCNSaveRequestClass_block_invoke_13699(uint64_t a1)
{
  ContactsLibrary_13661();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNSaveRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNSaveRequestClass_softClass_13698 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCNSaveRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContactContentItemChangeTransaction.m", 16, @"Unable to find class %s", "CNSaveRequest");

    __break(1u);
  }
}

id getCNContactStoreClass_13700()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCNContactStoreClass_softClass_13704;
  uint64_t v7 = getCNContactStoreClass_softClass_13704;
  if (!getCNContactStoreClass_softClass_13704)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCNContactStoreClass_block_invoke_13705;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getCNContactStoreClass_block_invoke_13705((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165A3984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNContactStoreClass_block_invoke_13705(uint64_t a1)
{
  ContactsLibrary_13661();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNContactStore");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNContactStoreClass_softClass_13704 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCNContactStoreClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContactContentItemChangeTransaction.m", 15, @"Unable to find class %s", "CNContactStore");

    __break(1u);
  }
}

void sub_2165A4464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void __getMKLocalSearchRequestClass_block_invoke(uint64_t a1)
{
  MapKitLibrary_13828();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKLocalSearchRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKLocalSearchRequestClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKLocalSearchRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDCMapsLinkContentItem.m", 18, @"Unable to find class %s", "MKLocalSearchRequest");

    __break(1u);
  }
}

void __getMKLocalSearchClass_block_invoke(uint64_t a1)
{
  MapKitLibrary_13828();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKLocalSearch");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKLocalSearchClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKLocalSearchClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDCMapsLinkContentItem.m", 17, @"Unable to find class %s", "MKLocalSearch");

    __break(1u);
  }
}

void getMKErrorDomain()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getMKErrorDomainSymbolLoc_ptr;
  uint64_t v9 = getMKErrorDomainSymbolLoc_ptr;
  if (!getMKErrorDomainSymbolLoc_ptr)
  {
    id v1 = MapKitLibrary_13828();
    v7[3] = (uint64_t)dlsym(v1, "MKErrorDomain");
    getMKErrorDomainSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"NSString *getMKErrorDomain(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFDCMapsLinkContentItem.m", 19, @"%s", dlerror());

    __break(1u);
  }
}

void sub_2165A49B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMKErrorDomainSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MapKitLibrary_13828();
  uint64_t result = dlsym(v2, "MKErrorDomain");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKErrorDomainSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *MapKitLibrary_13828()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary_13837)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __MapKitLibraryCore_block_invoke_13838;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_2642886E8;
    uint64_t v6 = 0;
    MapKitLibraryCore_frameworkLibrary_13837 = _sl_dlopen();
  }
  uint64_t v0 = (void *)MapKitLibraryCore_frameworkLibrary_13837;
  if (!MapKitLibraryCore_frameworkLibrary_13837)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *MapKitLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFDCMapsLinkContentItem.m", 16, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MapKitLibraryCore_block_invoke_13838()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary_13837 = result;
  return result;
}

void WFCLPlacemarkFromSerializedPlacemark(void *a1)
{
  id v1 = a1;
  id v2 = [v1 objectForKey:@"location"];
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = WFEnforceClass(v2, v3);

  if (v4)
  {
    long long v5 = WFCLLocationFromSerializedLocation(v4);
  }
  else
  {
    long long v5 = 0;
  }
  uint64_t v6 = [v1 objectForKey:@"region"];
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = WFEnforceClass(v6, v7);

  uint64_t v9 = &off_216612000;
  if (v8)
  {
    id v10 = v8;
    uint64_t v11 = [v10 objectForKey:@"radius"];
    uint64_t v12 = objc_opt_class();
    BOOL v13 = WFEnforceClass(v11, v12);
    [v13 doubleValue];

    uint64_t v14 = [v10 objectForKey:@"identifier"];
    uint64_t v15 = objc_opt_class();
    size_t v16 = WFEnforceClass(v14, v15);

    char v17 = [v10 objectForKey:@"center"];
    uint64_t v18 = objc_opt_class();
    regex_t v19 = WFEnforceClass(v17, v18);

    uint64_t v20 = [v19 objectForKey:@"latitude"];
    uint64_t v21 = objc_opt_class();
    uint64_t v22 = WFEnforceClass(v20, v21);
    [v22 doubleValue];
    double v24 = v23;

    unint64_t v25 = [v19 objectForKey:@"longitude"];
    uint64_t v26 = objc_opt_class();
    uint64_t v27 = WFEnforceClass(v25, v26);
    [v27 doubleValue];
    double v29 = v28;

    uint64_t v54 = 0;
    unint64_t v55 = &v54;
    uint64_t v56 = 0x2050000000;
    uint64_t v30 = (void *)getCLCircularRegionClass_softClass;
    unint64_t v57 = (void *)getCLCircularRegionClass_softClass;
    if (!getCLCircularRegionClass_softClass)
    {
      uint64_t v49 = MEMORY[0x263EF8330];
      uint64_t v50 = 3221225472;
      uint64_t v51 = __getCLCircularRegionClass_block_invoke;
      uint64_t v52 = &unk_26428AC60;
      uint64_t v53 = &v54;
      __getCLCircularRegionClass_block_invoke((uint64_t)&v49);
      uint64_t v30 = (void *)v55[3];
    }
    uint64_t v48 = v8;
    uint64_t v31 = v4;
    BOOL v32 = v5;
    uint64_t v33 = v30;
    _Block_object_dispose(&v54, 8);
    id v34 = [v33 alloc];
    uint64_t v54 = 0;
    unint64_t v55 = &v54;
    uint64_t v56 = 0x2020000000;
    uint64_t v35 = (void (*)(double, double))getCLLocationCoordinate2DMakeSymbolLoc_ptr_1778;
    unint64_t v57 = getCLLocationCoordinate2DMakeSymbolLoc_ptr_1778;
    if (!getCLLocationCoordinate2DMakeSymbolLoc_ptr_1778)
    {
      uint64_t v49 = MEMORY[0x263EF8330];
      uint64_t v50 = 3221225472;
      uint64_t v51 = __getCLLocationCoordinate2DMakeSymbolLoc_block_invoke_1779;
      uint64_t v52 = &unk_26428AC60;
      uint64_t v53 = &v54;
      uint64_t v36 = CoreLocationLibrary_1780();
      uint64_t v37 = dlsym(v36, "CLLocationCoordinate2DMake");
      *(void *)(v53[1] + 24) = v37;
      getCLLocationCoordinate2DMakeSymbolLoc_ptr_1778 = *(_UNKNOWN **)(v53[1] + 24);
      uint64_t v35 = (void (*)(double, double))v55[3];
    }
    _Block_object_dispose(&v54, 8);
    if (!v35)
    {
      uint64_t v46 = [MEMORY[0x263F08690] currentHandler];
      uint64_t v47 = objc_msgSend(NSString, "stringWithUTF8String:", "CLLocationCoordinate2D WFCLLocationCoordinate2DMake(CLLocationDegrees, CLLocationDegrees)");
      objc_msgSend(v46, "handleFailureInFunction:file:lineNumber:description:", v47, @"CLCircularRegion+WFSerialization.m", 17, @"%s", dlerror());

      __break(1u);
      return;
    }
    v35(v24, v29);
    uint64_t v38 = objc_msgSend(v34, "initWithCenter:radius:identifier:", v16);

    long long v5 = v32;
    uint64_t v9 = &off_216612000;
    uint64_t v4 = v31;
    uint64_t v8 = v48;
  }
  else
  {
    uint64_t v38 = 0;
  }
  unsigned int v39 = [v1 objectForKey:@"addressDictionary"];
  uint64_t v40 = objc_opt_class();
  uint64_t v41 = WFEnforceClass(v39, v40);

  uint64_t v54 = 0;
  unint64_t v55 = &v54;
  uint64_t v56 = *((void *)v9 + 177);
  int v42 = (void *)getCLPlacemarkClass_softClass_14152;
  unint64_t v57 = (void *)getCLPlacemarkClass_softClass_14152;
  if (!getCLPlacemarkClass_softClass_14152)
  {
    uint64_t v49 = MEMORY[0x263EF8330];
    uint64_t v50 = 3221225472;
    uint64_t v51 = __getCLPlacemarkClass_block_invoke_14153;
    uint64_t v52 = &unk_26428AC60;
    uint64_t v53 = &v54;
    __getCLPlacemarkClass_block_invoke_14153((uint64_t)&v49);
    int v42 = (void *)v55[3];
  }
  int v43 = v42;
  _Block_object_dispose(&v54, 8);
  int v44 = (void *)[[v43 alloc] initWithLocation:v5 addressDictionary:v41 region:v38 areasOfInterest:0];

  id v45 = v44;
}

void sub_2165A5B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLPlacemarkClass_block_invoke_14153(uint64_t a1)
{
  CoreLocationLibrary_14154();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLPlacemark");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLPlacemarkClass_softClass_14152 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getCLPlacemarkClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"CLPlacemark+WFSerialization.m", 21, @"Unable to find class %s", "CLPlacemark");

    __break(1u);
  }
}

void CoreLocationLibrary_14154()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_14163)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __CoreLocationLibraryCore_block_invoke_14164;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264288728;
    uint64_t v5 = 0;
    CoreLocationLibraryCore_frameworkLibrary_14163 = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary_14163)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"CLPlacemark+WFSerialization.m", 18, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __CoreLocationLibraryCore_block_invoke_14164()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_14163 = result;
  return result;
}

id WFSerializedPlacemarkFromCLPlacemark(void *a1)
{
  v30[2] = *MEMORY[0x263EF8340];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_opt_new();
    uint64_t v3 = [v1 location];
    long long v4 = WFSerializedLocationFromCLLocation(v3);
    [v2 setValue:v4 forKey:@"location"];

    uint64_t v5 = [v1 addressDictionary];
    [v2 setValue:v5 forKey:@"addressDictionary"];

    uint64_t v6 = [v1 region];
    uint64_t v26 = 0;
    uint64_t v27 = &v26;
    uint64_t v28 = 0x2050000000;
    uint64_t v7 = (__CFString *)getCLCircularRegionClass_softClass_14179;
    uint64_t v29 = getCLCircularRegionClass_softClass_14179;
    if (!getCLCircularRegionClass_softClass_14179)
    {
      uint64_t v21 = MEMORY[0x263EF8330];
      uint64_t v22 = 3221225472;
      double v23 = __getCLCircularRegionClass_block_invoke_14180;
      double v24 = &unk_26428AC60;
      unint64_t v25 = &v26;
      __getCLCircularRegionClass_block_invoke_14180((uint64_t)&v21);
      uint64_t v7 = v27[3];
    }
    uint64_t v8 = v7;
    _Block_object_dispose(&v26, 8);
    uint64_t v9 = WFEnforceClass(v6, (uint64_t)v8);

    if (v9)
    {
      id v10 = v9;
      uint64_t v26 = @"center";
      [v10 center];
      double v12 = v11;
      v30[0] = @"latitude";
      BOOL v13 = objc_msgSend(NSNumber, "numberWithDouble:");
      v30[1] = @"longitude";
      uint64_t v14 = objc_msgSend(NSNumber, "numberWithDouble:", v12, v13);
      uint64_t v22 = (uint64_t)v14;
      uint64_t v15 = [NSDictionary dictionaryWithObjects:&v21 forKeys:v30 count:2];

      uint64_t v27 = (__CFString **)@"radius";
      size_t v16 = NSNumber;
      objc_msgSend(v10, "radius", v15);
      char v17 = objc_msgSend(v16, "numberWithDouble:");
      uint64_t v22 = (uint64_t)v17;
      uint64_t v28 = @"identifier";
      uint64_t v18 = [v10 identifier];
      double v23 = v18;
      regex_t v19 = [NSDictionary dictionaryWithObjects:&v21 forKeys:&v26 count:3];

      [v2 setValue:v19 forKey:@"region"];
    }
    else
    {
      [v2 setValue:0 forKey:@"region"];
    }
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void sub_2165A6140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLCircularRegionClass_block_invoke_14180(uint64_t a1)
{
  CoreLocationLibrary_14154();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLCircularRegion");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLCircularRegionClass_softClass_14179 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getCLCircularRegionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"CLPlacemark+WFSerialization.m", 20, @"Unable to find class %s", "CLCircularRegion");

    __break(1u);
  }
}

id WFGetWorkflowReminderStore()
{
  if (WFGetWorkflowReminderStore_onceToken != -1) {
    dispatch_once(&WFGetWorkflowReminderStore_onceToken, &__block_literal_global_14331);
  }
  uint64_t v0 = (void *)workflowReminderStore;
  return v0;
}

uint64_t __WFGetWorkflowReminderStore_block_invoke()
{
  getREMStoreClass();
  workflowReminderStore = objc_opt_new();
  return MEMORY[0x270F9A758]();
}

id getREMStoreClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getREMStoreClass_softClass;
  uint64_t v7 = getREMStoreClass_softClass;
  if (!getREMStoreClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getREMStoreClass_block_invoke;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getREMStoreClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165A7480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getREMStoreClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!ReminderKitLibraryCore_frameworkLibrary_14333)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __ReminderKitLibraryCore_block_invoke_14334;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264288740;
    uint64_t v8 = 0;
    ReminderKitLibraryCore_frameworkLibrary_14333 = _sl_dlopen();
  }
  if (!ReminderKitLibraryCore_frameworkLibrary_14333)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *ReminderKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFReminderKitUtilities.m", 21, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("REMStore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getREMStoreClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFReminderKitUtilities.m", 22, @"Unable to find class %s", "REMStore");

LABEL_10:
    __break(1u);
  }
  getREMStoreClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ReminderKitLibraryCore_block_invoke_14334()
{
  uint64_t result = _sl_dlopen();
  ReminderKitLibraryCore_frameworkLibrary_14333 = result;
  return result;
}

uint64_t WFClearWorkflowReminderStore()
{
  getREMStoreClass();
  workflowReminderStore = objc_opt_new();
  return MEMORY[0x270F9A758]();
}

id WFMakeContentAttributionSetForRemindersAccount(void *a1, void *a2)
{
  uint64_t v3 = (objc_class *)MEMORY[0x263F0F988];
  id v4 = a2;
  id v5 = a1;
  id v6 = [v3 alloc];
  long long v7 = (void *)[v6 initWithBundleIdentifier:*MEMORY[0x263F85570]];
  uint64_t v8 = [MEMORY[0x263F0F9B0] sharedResolver];
  uint64_t v9 = [v8 resolvedAppMatchingDescriptor:v7];

  id v10 = [v5 objectID];

  double v11 = [v10 uuid];
  double v12 = [v11 UUIDString];
  BOOL v13 = +[WFContentAttributionSet attributionSetWithAccountBasedAppDescriptor:v9 accountIdentifier:v12 disclosureLevel:1 originalItemIdentifier:v4];

  return v13;
}

id WFMakeContentLocationForRemindersAccount(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x263F0F988];
  id v2 = a1;
  id v3 = [v1 alloc];
  id v4 = (void *)[v3 initWithBundleIdentifier:*MEMORY[0x263F85570]];
  id v5 = [MEMORY[0x263F0F9B0] sharedResolver];
  id v6 = [v5 resolvedAppMatchingDescriptor:v4];

  long long v7 = [v2 objectID];

  uint64_t v8 = [v7 uuid];
  uint64_t v9 = [v8 UUIDString];
  id v10 = +[WFAccountContentLocation locationWithAccountIdentifier:v9 appDescriptor:v6];

  return v10;
}

id WFChooseFromListFormatPlaybackDuration(double a1)
{
  unint64_t v1 = vcvtad_u64_f64(a1);
  unint64_t v2 = v1 / 0x3C - 60 * ((unint64_t)((v1 / 0x3C * (unsigned __int128)0x888888888888889uLL) >> 64) >> 1);
  unint64_t v3 = v1 % 0x3C;
  if (v1 >= 0xE10) {
    objc_msgSend(NSString, "stringWithFormat:", @"%ld:%02ld:%02ld", v1 / 0xE10, v2, v3);
  }
  else {
  id v4 = objc_msgSend(NSString, "stringWithFormat:", @"%ld:%02ld", v2, v3, v6);
  }
  return v4;
}

void sub_2165A89D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMKDistanceFormatterClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary_14494)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MapKitLibraryCore_block_invoke_14495;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264288850;
    uint64_t v8 = 0;
    MapKitLibraryCore_frameworkLibrary_14494 = _sl_dlopen();
  }
  if (!MapKitLibraryCore_frameworkLibrary_14494)
  {
    unint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *MapKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFContentItem+ChooseFromList.m", 38, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MKDistanceFormatter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    unint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getMKDistanceFormatterClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFContentItem+ChooseFromList.m", 39, @"Unable to find class %s", "MKDistanceFormatter");

LABEL_10:
    __break(1u);
  }
  getMKDistanceFormatterClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MapKitLibraryCore_block_invoke_14495()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary_14494 = result;
  return result;
}

void sub_2165AA274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCNAvatarImageRenderingScopeClass_block_invoke(uint64_t a1)
{
  ContactsUILibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNAvatarImageRenderingScope");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNAvatarImageRenderingScopeClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"Class getCNAvatarImageRenderingScopeClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContentItem+ChooseFromList.m", 46, @"Unable to find class %s", "CNAvatarImageRenderingScope");

    __break(1u);
  }
}

void __getCNAvatarImageRendererSettingsClass_block_invoke(uint64_t a1)
{
  ContactsUILibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNAvatarImageRendererSettings");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNAvatarImageRendererSettingsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"Class getCNAvatarImageRendererSettingsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContentItem+ChooseFromList.m", 50, @"Unable to find class %s", "CNAvatarImageRendererSettings");

    __break(1u);
  }
}

void __getCNAvatarImageRendererClass_block_invoke(uint64_t a1)
{
  ContactsUILibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNAvatarImageRenderer");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNAvatarImageRendererClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"Class getCNAvatarImageRendererClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContentItem+ChooseFromList.m", 45, @"Unable to find class %s", "CNAvatarImageRenderer");

    __break(1u);
  }
}

void ContactsUILibrary()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!ContactsUILibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __ContactsUILibraryCore_block_invoke;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264288868;
    uint64_t v5 = 0;
    ContactsUILibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ContactsUILibraryCore_frameworkLibrary)
  {
    unint64_t v1 = [MEMORY[0x263F08690] currentHandler];
    unint64_t v2 = [NSString stringWithUTF8String:"void *ContactsUILibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFContentItem+ChooseFromList.m", 42, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __ContactsUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ContactsUILibraryCore_frameworkLibrary = result;
  return result;
}

void sub_2165AAB74(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void *__getCMTimeGetSecondsSymbolLoc_block_invoke_14523(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!CoreMediaLibraryCore_frameworkLibrary_14525)
  {
    v5[1] = (void *)MEMORY[0x263EF8330];
    v5[2] = (void *)3221225472;
    v5[3] = __CoreMediaLibraryCore_block_invoke_14526;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_264288838;
    uint64_t v7 = 0;
    CoreMediaLibraryCore_frameworkLibrary_14525 = _sl_dlopen();
  }
  unint64_t v2 = (void *)CoreMediaLibraryCore_frameworkLibrary_14525;
  if (!CoreMediaLibraryCore_frameworkLibrary_14525)
  {
    a1 = [MEMORY[0x263F08690] currentHandler];
    unint64_t v2 = [NSString stringWithUTF8String:"void *CoreMediaLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFContentItem+ChooseFromList.m", 30, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  unint64_t v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "CMTimeGetSeconds");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getCMTimeGetSecondsSymbolLoc_ptr_14522 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __CoreMediaLibraryCore_block_invoke_14526()
{
  uint64_t result = _sl_dlopen();
  CoreMediaLibraryCore_frameworkLibrary_14525 = result;
  return result;
}

void sub_2165AB148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAVMetadataItemClass_block_invoke_14531(uint64_t a1)
{
  AVFoundationLibrary_14534();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVMetadataItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVMetadataItemClass_softClass_14530 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"Class getAVMetadataItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContentItem+ChooseFromList.m", 34, @"Unable to find class %s", "AVMetadataItem");

    __break(1u);
  }
}

void *__getAVMetadataCommonKeyArtistSymbolLoc_block_invoke_14533(uint64_t a1)
{
  unint64_t v2 = AVFoundationLibrary_14534();
  uint64_t result = dlsym(v2, "AVMetadataCommonKeyArtist");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataCommonKeyArtistSymbolLoc_ptr_14532 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *AVFoundationLibrary_14534()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_14541)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_14542;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264288820;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_14541 = _sl_dlopen();
  }
  uint64_t v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_14541;
  if (!AVFoundationLibraryCore_frameworkLibrary_14541)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    unint64_t v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContentItem+ChooseFromList.m", 33, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getAVMetadataKeySpaceCommonSymbolLoc_block_invoke_14538(uint64_t a1)
{
  unint64_t v2 = AVFoundationLibrary_14534();
  uint64_t result = dlsym(v2, "AVMetadataKeySpaceCommon");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataKeySpaceCommonSymbolLoc_ptr_14537 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AVFoundationLibraryCore_block_invoke_14542()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_14541 = result;
  return result;
}

void mlist_free(void *a1)
{
  if (a1)
  {
    unint64_t v2 = (void *)a1[3];
    if (v2 != a1)
    {
      do
      {
        unint64_t v3 = (void *)v2[3];
        mlist_free_one(v2);
        unint64_t v2 = v3;
      }
      while (v3 != a1);
    }
    mlist_free_one(a1);
  }
}

void mlist_free_one(void *a1)
{
  unint64_t v2 = (_DWORD *)a1[2];
  if (v2) {
    apprentice_unmap(v2);
  }
  free(a1);
}

void apprentice_unmap(_DWORD *a1)
{
  if (a1)
  {
    int v2 = a1[4];
    if (v2)
    {
      if (v2 != 1) {
        abort();
      }
      uint64_t v3 = 0;
      char v4 = 1;
      do
      {
        char v5 = v4;
        uint64_t v6 = *(void **)&a1[2 * v3 + 6];
        if ((unint64_t)v6 < *(void *)a1 || (unint64_t)v6 > *(void *)a1 + *((void *)a1 + 1)) {
          free(v6);
        }
        char v4 = 0;
        uint64_t v3 = 1;
      }
      while ((v5 & 1) != 0);
      free(*(void **)a1);
    }
    free(a1);
  }
}

uint64_t apprentice_magic_strength(unsigned __int8 *a1)
{
  uint64_t v1 = a1[6] - 1;
  uint64_t v2 = 20;
  switch(a1[6])
  {
    case 1u:
    case 2u:
    case 4u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x31u:
    case 0x32u:
      if v1 > 0x31 || ((0xF1C0000F1014uLL >> (a1[6] - 1))) {
        goto LABEL_23;
      }
      uint64_t v2 = 10 * qword_2166135A8[v1] + 20;
      goto LABEL_5;
    case 3u:
      if (a1[11]) {
LABEL_23:
      }
        abort();
      return 0;
    case 5u:
    case 0xDu:
      uint64_t v6 = 10 * a1[5];
      goto LABEL_71;
    case 0x11u:
      uint64_t v7 = a1 + 32;
      signed __int8 v8 = a1[32];
      if (v8)
      {
        unint64_t v9 = 0;
        while (1)
        {
          uint64_t v10 = (v8 - 36);
          if (v10 > 0x3A) {
            goto LABEL_49;
          }
          if (((1 << (v8 - 36)) & 0x4000000080004C1) == 0) {
            break;
          }
LABEL_55:
          int v13 = *++v7;
          signed __int8 v8 = v13;
          if (!v13) {
            goto LABEL_62;
          }
        }
        if (v10 == 55)
        {
          while (v8 && v8 != 93)
          {
            signed __int8 v11 = *++v7;
            signed __int8 v8 = v11;
          }
          --v7;
          goto LABEL_55;
        }
        if (v10 == 56)
        {
          if (v7[1]) {
            ++v7;
          }
        }
        else
        {
LABEL_49:
          if (v8 == 123)
          {
            while (v8 && v8 != 125)
            {
              signed __int8 v12 = *++v7;
              signed __int8 v8 = v12;
            }
            v7 -= v8 == 0;
            goto LABEL_55;
          }
        }
        ++v9;
        goto LABEL_55;
      }
      unint64_t v9 = 0;
LABEL_62:
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      if (v9 > 5) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = 0xAu / v9;
      }
      uint64_t v2 = v16 * v9 + 20;
LABEL_5:
      uint64_t v3 = 0;
      unsigned int v4 = a1[4];
      if (v4 <= 0x3C)
      {
        if (v4 == 33) {
          goto LABEL_20;
        }
        if (v4 != 38)
        {
          if (v4 == 60)
          {
LABEL_13:
            uint64_t v3 = v2 - 20;
            goto LABEL_20;
          }
          goto LABEL_16;
        }
LABEL_18:
        uint64_t v3 = v2 - 10;
        goto LABEL_20;
      }
      if (a1[4] > 0x5Du)
      {
        if (v4 != 94)
        {
          if (v4 == 120) {
            goto LABEL_20;
          }
LABEL_16:
          fprintf((FILE *)*MEMORY[0x263EF8348], "Bad relation %c\n");
LABEL_17:
          abort();
        }
        goto LABEL_18;
      }
      if (v4 != 61)
      {
        if (v4 != 62) {
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      uint64_t v3 = v2 + 10;
LABEL_20:
      switch(a1[11])
      {
        case '*':
          v3 *= a1[3];
          goto LABEL_27;
        case '+':
          v3 += a1[3];
          goto LABEL_27;
        case ',':
        case '.':
          goto LABEL_23;
        case '-':
          v3 -= a1[3];
          goto LABEL_27;
        case '/':
          v3 /= (uint64_t)a1[3];
          goto LABEL_27;
        default:
          if (a1[11]) {
            goto LABEL_23;
          }
LABEL_27:
          if (v3 <= 1) {
            uint64_t v3 = 1;
          }
          if (a1[160]) {
            uint64_t result = v3;
          }
          else {
            uint64_t result = v3 + 1;
          }
          break;
      }
      return result;
    case 0x12u:
    case 0x13u:
      uint64_t v6 = 5 * a1[5];
      goto LABEL_71;
    case 0x14u:
      unsigned int v14 = a1[5];
      if (a1[5])
      {
        if (v14 > 5) {
          unsigned int v15 = 1;
        }
        else {
          unsigned int v15 = 0xA / v14;
        }
        uint64_t v6 = v15 * (unint64_t)a1[5];
LABEL_71:
        uint64_t v2 = v6 + 20;
      }
      else
      {
        uint64_t v2 = 20;
      }
      goto LABEL_5;
    case 0x29u:
    case 0x2Du:
    case 0x2Eu:
      goto LABEL_5;
    case 0x30u:
      uint64_t v2 = 30;
      goto LABEL_5;
    default:
      fprintf((FILE *)*MEMORY[0x263EF8348], "Bad type %d\n");
      goto LABEL_17;
  }
}

_DWORD *load_1(uint64_t a1, char *__filename, _DWORD *a3, uint64_t a4)
{
  char v6 = (char)__filename;
  __linep = 0;
  size_t __linecapp = 0;
  *(void *)(a1 + 80) = __filename;
  signed __int8 v8 = fopen(__filename, "r");
  if (v8)
  {
    unint64_t v9 = v8;
    uint64_t v10 = 0;
    ptr = 0;
    uint64_t v265 = 0;
    signed __int8 v11 = &classUIPrintFormatter;
    uint64_t v12 = 1;
    uint64_t v261 = a3;
    uint64_t v262 = a4;
    off_t v263 = v8;
    while (1)
    {
      *(void *)(a1 + 8_Block_object_dispose(&STACK[0x500], 8) = v12;
      ssize_t v13 = getline(&__linep, &__linecapp, v9);
      if (!v13) {
        goto LABEL_293;
      }
      if (v13 == -1)
      {
        if (ptr) {
          addentry(a1, &ptr, a4);
        }
        free(__linep);
        return (_DWORD *)fclose(v9);
      }
      uint64_t v20 = __linep;
      if (__linep[v13 - 1] == 10)
      {
        uint64_t v10 = (v10 + 1);
        __linep[v13 - 1] = 0;
        uint64_t v20 = __linep;
      }
      int v21 = *v20;
      if (*v20) {
        break;
      }
LABEL_293:
      uint64_t v12 = *(void *)(a1 + 88) + 1;
    }
    if (v21 != 33)
    {
      if (v21 == 35) {
        goto LABEL_293;
      }
      while (1)
      {
LABEL_17:
        __s1 = v20;
        if (*v20 == 62)
        {
          uint64_t v30 = 0;
          do
            int v31 = v20[++v30];
          while (v31 == 62);
          v20 += v30;
          __s1 = v20;
        }
        else
        {
          LODWORD(v30) = 0;
        }
        __endptr = 0;
        if ((v30 - 1) < *((_DWORD *)v11 + 652))
        {
          *((_DWORD *)v11 + 652) = v30;
LABEL_28:
          BOOL v32 = ptr;
          if (ptr)
          {
            unsigned int v33 = v265;
            if (v265)
            {
              if ((int)(v30 - *((unsigned __int16 *)ptr + 188 * (v265 - 1))) >= 2)
              {
                file_magwarn(a1, "New continuation level %u is more than one larger than current level %u", v14, v15, v16, v17, v18, v19, v30);
                unsigned int v33 = v265;
                BOOL v32 = ptr;
              }
              if (v33 == HIDWORD(v265))
              {
                uint64_t v34 = v33 + 10;
                BOOL v32 = malloc_type_realloc(v32, 376 * v34, 0x1000040E4699127uLL);
                if (!v32)
                {
                  uint64_t v68 = __error();
                  file_error(a1, *v68, "cannot allocate %zu bytes", v69, v70, v71, v72, v73, 120 * v34);
                  a3 = v261;
                  goto LABEL_292;
                }
                ptr = v32;
                HIDWORD(v265) = v34;
                unsigned int v33 = v265;
                a3 = v261;
              }
              LODWORD(v265) = v33 + 1;
              uint64_t v35 = (uint64_t)v32 + 376 * v33;
              *(_OWORD *)(v35 + 1_Block_object_dispose(&STACK[0x500], 8) = 0u;
              *(_OWORD *)(v35 + 34) = 0u;
              *(_OWORD *)(v35 + 50) = 0u;
              *(_OWORD *)(v35 + 66) = 0u;
              *(_OWORD *)(v35 + 82) = 0u;
              *(_OWORD *)(v35 + 9_Block_object_dispose(&STACK[0x500], 8) = 0u;
              *(_OWORD *)(v35 + 114) = 0u;
              *(_OWORD *)(v35 + 130) = 0u;
              *(_OWORD *)(v35 + 146) = 0u;
              *(_OWORD *)(v35 + 162) = 0u;
              *(_OWORD *)(v35 + 17_Block_object_dispose(&STACK[0x500], 8) = 0u;
              *(_OWORD *)(v35 + 194) = 0u;
              *(_OWORD *)(v35 + 210) = 0u;
              *(_OWORD *)(v35 + 226) = 0u;
              *(_OWORD *)(v35 + 242) = 0u;
              *(void *)(v35 + 36_Block_object_dispose(&STACK[0x500], 8) = 0;
              *(_OWORD *)(v35 + 2) = 0u;
              *(_OWORD *)(v35 + 25_Block_object_dispose(&STACK[0x500], 8) = 0u;
              *(_OWORD *)(v35 + 274) = 0u;
              *(_OWORD *)(v35 + 290) = 0u;
              *(_OWORD *)(v35 + 306) = 0u;
              *(_OWORD *)(v35 + 322) = 0u;
              *(_OWORD *)(v35 + 33_Block_object_dispose(&STACK[0x500], 8) = 0u;
              *(_OWORD *)(v35 + 354) = 0u;
              int v36 = (unsigned __int16)v30;
              *(_WORD *)uint64_t v35 = v30;
              goto LABEL_38;
            }
            uint64_t v42 = a1;
            int v43 = "Continuations present with 0 count";
          }
          else
          {
            uint64_t v42 = a1;
            int v43 = "No current entry for continuation";
          }
          file_magerror(v42, v43, v14, v15, v16, v17, v18, v19);
          goto LABEL_292;
        }
        if (file_check_mem(a1, v30) == -1) {
          goto LABEL_292;
        }
        *((_DWORD *)v11 + 652) = v30;
        if (v30) {
          goto LABEL_28;
        }
        if (!ptr) {
          break;
        }
        addentry(a1, &ptr, a4);
        uint64_t v20 = __linep;
      }
      uint64_t v37 = malloc_type_malloc(0xEB0uLL, 0xD446BB41uLL);
      if (!v37)
      {
        unint64_t v59 = __error();
        file_error(a1, *v59, "cannot allocate %zu bytes", v60, v61, v62, v63, v64, 176);
        goto LABEL_292;
      }
      uint64_t v35 = (uint64_t)v37;
      LODWORD(v30) = 0;
      int v36 = 0;
      ptr = v37;
      *uint64_t v37 = 0u;
      v37[1] = 0u;
      long long v37[2] = 0u;
      v37[3] = 0u;
      void v37[4] = 0u;
      v37[5] = 0u;
      v37[6] = 0u;
      v37[7] = 0u;
      v37[8] = 0u;
      v37[9] = 0u;
      v37[10] = 0u;
      v37[11] = 0u;
      v37[12] = 0u;
      v37[13] = 0u;
      v37[14] = 0u;
      v37[15] = 0u;
      v37[16] = 0u;
      v37[17] = 0u;
      v37[18] = 0u;
      v37[19] = 0u;
      v37[20] = 0u;
      v37[21] = 0u;
      v37[22] = 0u;
      *((void *)v37 + 46) = 0;
      uint64_t v265 = 0xA00000001;
LABEL_38:
      *(_DWORD *)(v35 + 20) = v10;
      int v38 = *v20;
      if (v38 == 38)
      {
        __s1 = v20 + 1;
        *(unsigned char *)(v35 + 2) |= 2u;
        int v38 = *++v20;
      }
      if (v38 == 40)
      {
        unsigned int v39 = v20 + 1;
        __s1 = v20 + 1;
        char v40 = *(unsigned char *)(v35 + 2);
        if ((v40 & 2) != 0) {
          char v41 = v40 & 0xF8 | 5;
        }
        else {
          char v41 = v40 | 1;
        }
        *(unsigned char *)(v35 + 2) = v41;
        if (v20[1] == 38)
        {
          unsigned int v39 = v20 + 2;
          __s1 = v20 + 2;
          *(unsigned char *)(v35 + 2) = v41 | 2;
        }
        if (!v36)
        {
LABEL_50:
          if ((*(unsigned char *)(v35 + 2) & 6) != 0)
          {
            if ((*(unsigned char *)(a1 + 68) & 0x40) != 0)
            {
              uint64_t v44 = a1;
              id v45 = "relative offset at level 0";
              goto LABEL_291;
            }
            goto LABEL_292;
          }
        }
      }
      else
      {
        unsigned int v39 = v20;
        if (!v36) {
          goto LABEL_50;
        }
      }
      if (*v39 == 45)
      {
        __s1 = (char *)++v39;
        *(unsigned char *)(v35 + 2) |= 0x80u;
      }
      *(_DWORD *)(v35 + 12) = strtol(v39, &__endptr, 0);
      uint64_t v52 = __endptr;
      if (__s1 == __endptr)
      {
        if ((*(unsigned char *)(a1 + 68) & 0x40) != 0) {
        goto LABEL_292;
        }
      }
      __s1 = __endptr;
      if ((*(unsigned char *)(v35 + 2) & 1) == 0)
      {
        uint64_t v53 = __endptr;
        uint64_t v54 = MEMORY[0x263EF8318];
LABEL_58:
        if (*v53 < 0)
        {
          uint64_t v58 = v10;
        }
        else
        {
          uint64_t v55 = *v53;
          uint64_t v56 = v53 + 1;
          do
          {
            if ((*(_DWORD *)(v54 + 4 * v55 + 60) & 0x4000) == 0) {
              break;
            }
            __s1 = v56;
            int v57 = *v56++;
            uint64_t v55 = v57;
          }
          while ((v57 & 0x80000000) == 0);
          uint64_t v58 = v10;
          uint64_t v53 = v56 - 1;
        }
        size_t v74 = 2;
        uint64_t v75 = (char *)&get_cond_cond_tbl;
        while (1)
        {
          if (strncmp(v53, v75, v74)) {
            goto LABEL_90;
          }
          uint64_t v76 = v53[v74];
          if (v53[v74] < 0) {
            break;
          }
          if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v76 + 60) & 0x4000) != 0) {
            goto LABEL_92;
          }
LABEL_90:
          unint64_t v77 = v75 + 24;
          size_t v74 = *((void *)v75 + 4);
          v75 += 24;
          if (!v74)
          {
            uint64_t v75 = v77;
            goto LABEL_93;
          }
        }
        if (!__maskrune(v76, 0x4000uLL)) {
          goto LABEL_90;
        }
LABEL_92:
        v53 += v74;
        __s1 = v53;
LABEL_93:
        int v78 = v75[16];
        *(unsigned char *)(v35 + 10) = v78;
        uint64_t v79 = *(void *)(a1 + 24) + 16 * v30;
        int v82 = *(_DWORD *)(v79 + 12);
        unint64_t v80 = (int *)(v79 + 12);
        int v81 = v82;
        uint64_t v10 = v58;
        uint64_t v83 = MEMORY[0x263EF8318];
        signed __int8 v11 = &classUIPrintFormatter;
        switch(v78)
        {
          case 0:
            goto LABEL_103;
          case 1:
            if ((v81 & 0xFFFFFFFD) == 0)
            {
              int v81 = 1;
              goto LABEL_124;
            }
            if ((*(unsigned char *)(a1 + 68) & 0x40) == 0) {
              goto LABEL_292;
            }
            uint64_t v44 = a1;
            goto LABEL_291;
          case 2:
            if ((v81 - 3) > 0xFFFFFFFD)
            {
              int v81 = 2;
              goto LABEL_124;
            }
            if ((*(unsigned char *)(a1 + 68) & 0x40) == 0) {
              goto LABEL_292;
            }
            uint64_t v44 = a1;
            goto LABEL_291;
          case 3:
            if ((v81 - 3) <= 0xFFFFFFFD)
            {
              if ((*(unsigned char *)(a1 + 68) & 0x40) == 0) {
                goto LABEL_292;
              }
              uint64_t v44 = a1;
              goto LABEL_291;
            }
LABEL_103:
            int v81 = 0;
LABEL_124:
            *unint64_t v80 = v81;
            unsigned int v260 = v10;
            if (*v53 < 0) {
              goto LABEL_134;
            }
            uint64_t v85 = *v53;
            size_t v86 = v53 + 1;
            break;
          default:
            goto LABEL_124;
        }
        while ((*(_DWORD *)(v83 + 4 * v85 + 60) & 0x4000) != 0)
        {
          __s1 = v86;
          int v87 = *v86++;
          uint64_t v85 = v87;
          if (v87 < 0)
          {
            uint64_t v53 = v86 - 1;
LABEL_134:
            size_t v97 = 7;
            uint16x8_t v98 = "invalid";
            while (strncmp(v53, v98, v97))
            {
              size_t v97 = *((void *)v98 + 6);
              v98 += 32;
              if (!v97)
              {
                uint16x8_t v98 = (const char *)&unk_216613470;
                goto LABEL_139;
              }
            }
            v53 += v97;
            __s1 = v53;
LABEL_139:
            int v99 = *((_DWORD *)v98 + 6);
            *(unsigned char *)(v35 + 6) = v99;
            int v100 = (unsigned __int8 *)(v35 + 6);
            unsigned int v101 = v99;
            if ((_BYTE)v99)
            {
LABEL_140:
              uint64_t v102 = __s1;
              if (v101) {
                goto LABEL_164;
              }
              goto LABEL_141;
            }
            int v105 = *v53;
            if (v105 != 115)
            {
              if (v105 == 100)
              {
                unsigned __int8 standard_integer_type = get_standard_integer_type((uint64_t)v53, &__s1);
                unsigned int v101 = standard_integer_type;
                *int v100 = standard_integer_type;
              }
              goto LABEL_140;
            }
            int v107 = v53[1];
            uint64_t v102 = v53 + 1;
            uint64_t v108 = v107;
            if (v107 < 0)
            {
              if (__maskrune(v108, 0x100uLL)) {
                goto LABEL_154;
              }
            }
            else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v108 + 60) & 0x100) != 0)
            {
LABEL_154:
              unsigned int v101 = *v100;
              goto LABEL_140;
            }
            unsigned int v101 = 5;
            *int v100 = 5;
            __s1 = v102;
LABEL_163:
            int v100 = (unsigned __int8 *)(v35 + 6);
            goto LABEL_164;
          }
        }
        uint64_t v53 = v86 - 1;
        if (v85 != 117) {
          goto LABEL_134;
        }
        long long v88 = v86;
        size_t v89 = 7;
        int v90 = "invalid";
        while (strncmp(v53 + 1, v90, v89))
        {
          size_t v89 = *((void *)v90 + 6);
          v90 += 32;
          if (!v89)
          {
            int v90 = (const char *)&unk_216613470;
            goto LABEL_156;
          }
        }
        uint64_t v53 = &v88[v89];
        __s1 = &v88[v89];
LABEL_156:
        int v109 = *((_DWORD *)v90 + 6);
        *(unsigned char *)(v35 + 6) = v109;
        int v100 = (unsigned __int8 *)(v35 + 6);
        unsigned int v101 = v109;
        if (!(_BYTE)v109)
        {
          unsigned __int8 v110 = get_standard_integer_type((uint64_t)v53, &__s1);
          unsigned int v101 = v110;
          *int v100 = v110;
        }
        if (v101)
        {
          *(unsigned char *)(v35 + 2) |= 8u;
          uint64_t v102 = __s1;
          goto LABEL_163;
        }
        uint64_t v102 = __s1;
LABEL_141:
        size_t v103 = 3;
        size_t v104 = (const char *)&special_tbl;
        while (strncmp(v102, v104, v103))
        {
          size_t v103 = *((void *)v104 + 6);
          v104 += 32;
          if (!v103)
          {
            size_t v104 = (const char *)&unk_2166134F0;
            goto LABEL_149;
          }
        }
        v102 += v103;
        __s1 = v102;
LABEL_149:
        unsigned int v101 = *((unsigned __int8 *)v104 + 24);
        *int v100 = v101;
        if (!v101)
        {
          a4 = v262;
          uint64_t v10 = v260;
          if ((*(unsigned char *)(a1 + 68) & 0x40) != 0) {
          goto LABEL_292;
          }
        }
LABEL_164:
        *(unsigned char *)(v35 + 9) = 0;
        if (*v102 == 126)
        {
          if (v101 > 0x2E || ((1 << v101) & 0x6200001E2020) == 0)
          {
            *(unsigned char *)(v35 + 9) = 64;
          }
          else if ((*(unsigned char *)(a1 + 68) & 0x40) != 0)
          {
            file_magwarn(a1, "'~' invalid for string types", v91, v92, v93, v94, v95, v96, v257);
            uint64_t v102 = __s1;
            unsigned int v101 = *v100;
          }
          __s1 = ++v102;
        }
        *(_DWORD *)(v35 + 24) = 0;
        *(_DWORD *)(v35 + 2_Block_object_dispose(&STACK[0x500], 8) = (v101 == 13) << 7;
        char v112 = *v102;
        int op = get_op(*v102);
        if (op == -1)
        {
          char v115 = v112;
          a4 = v262;
          uint64_t v10 = v260;
          goto LABEL_280;
        }
        uint64_t v10 = v260;
        if (v101 > 0x2E || ((1 << v101) & 0x6200001E2020) == 0)
        {
          v274[0] = 0;
          *(unsigned char *)(v35 + 9) |= op;
          unint64_t v127 = strtoull(v102 + 1, v274, 0);
          v270[0] = v274[0];
          *(void *)(v35 + 24) = file_signextend(a1, v35, v127, v128, v129, v130, v131, v132);
          eatsize((unsigned __int8 **)v270);
          uint64_t v102 = v270[0];
          __s1 = v270[0];
          a4 = v262;
          goto LABEL_279;
        }
        if (op != 6)
        {
          a4 = v262;
          if ((*(unsigned char *)(a1 + 68) & 0x40) != 0) {
          goto LABEL_292;
          }
        }
        if (v101 != 41)
        {
          int v116 = 0;
          v270[0] = 0;
          while (1)
          {
            int v118 = *++v102;
            int v117 = v118;
            uint64_t v119 = v118;
            int v120 = v118 < 0 ? __maskrune(v119, 0x4000uLL) : *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v119 + 60) & 0x4000;
            unint64_t v9 = v263;
            if (v120) {
              break;
            }
            if (v117 > 97)
            {
              if (v117 <= 107)
              {
                if (v117 == 98)
                {
                  unsigned int v122 = *(_DWORD *)(v35 + 28) | 0x40;
                }
                else if (v117 == 99)
                {
                  unsigned int v122 = *(_DWORD *)(v35 + 28) | 4;
                }
                else
                {
                  if (v117 != 104 || *(unsigned char *)(v35 + 6) != 13)
                  {
LABEL_252:
                    a4 = v262;
                    if ((*(unsigned char *)(a1 + 68) & 0x40) != 0) {
                    int v126 = -1;
                    }
                    goto LABEL_255;
                  }
                  unsigned int v122 = *(_DWORD *)(v35 + 28) & 0xFFFFF07F | 0x200;
                }
              }
              else if (v117 > 115)
              {
                if (v117 == 116)
                {
                  unsigned int v122 = *(_DWORD *)(v35 + 28) | 0x20;
                }
                else
                {
                  if (v117 != 119) {
                    goto LABEL_252;
                  }
                  unsigned int v122 = *(_DWORD *)(v35 + 28) | 2;
                }
              }
              else if (v117 == 108)
              {
                int v123 = *(unsigned __int8 *)(v35 + 6);
                if (v123 != 17 && v123 != 13) {
                  goto LABEL_252;
                }
                unsigned int v122 = *(_DWORD *)(v35 + 28) & 0xFFFFF07F | 0x800;
              }
              else
              {
                if (v117 != 115) {
                  goto LABEL_252;
                }
                unsigned int v122 = *(_DWORD *)(v35 + 28) | 0x10;
              }
            }
            else
            {
              switch(v117)
              {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                  if (v116 && (*(unsigned char *)(a1 + 68) & 0x40) != 0) {
                    file_magwarn(a1, "multiple ranges", v14, v15, v16, v17, v18, v19, v257);
                  }
                  int v121 = strtoul(v102, v270, 0);
                  *(_DWORD *)(v35 + 24) = v121;
                  if (!v121) {
                    file_magwarn(a1, "zero range", v14, v15, v16, v17, v18, v19, v257);
                  }
                  uint64_t v102 = v270[0] - 1;
                  int v116 = 1;
                  goto LABEL_231;
                case 'B':
                  if (*(unsigned char *)(v35 + 6) != 13) {
                    goto LABEL_252;
                  }
                  unsigned int v122 = *(_DWORD *)(v35 + 28) & 0xFFFFF07F | 0x80;
                  break;
                case 'C':
                  unsigned int v122 = *(_DWORD *)(v35 + 28) | 8;
                  break;
                case 'H':
                  if (*(unsigned char *)(v35 + 6) != 13) {
                    goto LABEL_252;
                  }
                  unsigned int v122 = *(_DWORD *)(v35 + 28) & 0xFFFFF07F | 0x100;
                  break;
                case 'J':
                  if (*(unsigned char *)(v35 + 6) != 13) {
                    goto LABEL_252;
                  }
                  unsigned int v122 = *(_DWORD *)(v35 + 28) | 0x1000;
                  break;
                case 'L':
                  if (*(unsigned char *)(v35 + 6) != 13) {
                    goto LABEL_252;
                  }
                  unsigned int v122 = *(_DWORD *)(v35 + 28) & 0xFFFFF07F | 0x400;
                  break;
                case 'T':
                  unsigned int v122 = *(_DWORD *)(v35 + 28) | 0x2000;
                  break;
                case 'W':
                  unsigned int v122 = *(_DWORD *)(v35 + 28) | 1;
                  break;
                default:
                  goto LABEL_252;
              }
            }
            *(_DWORD *)(v35 + 2_Block_object_dispose(&STACK[0x500], 8) = v122;
LABEL_231:
            if (v102[1] == 47)
            {
              uint64_t v124 = v102[2];
              if (!(v102[2] < 0
                   ? __maskrune(v124, 0x4000uLL)
                   : *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v124 + 60) & 0x4000))
                ++v102;
            }
          }
          if ((*(unsigned char *)(a1 + 68) & 0x40) == 0)
          {
            int v126 = 0;
            a4 = v262;
LABEL_255:
            uint64_t v10 = v260;
            goto LABEL_277;
          }
          int v133 = *(unsigned __int8 *)(v35 + 6);
          a4 = v262;
          uint64_t v10 = v260;
          if (v133 == 17)
          {
            int v134 = *(_DWORD *)(v35 + 28);
            if ((v134 & 0x800) == 0) {
              goto LABEL_261;
            }
          }
          else
          {
            if (v133 == 13)
            {
              int v134 = *(_DWORD *)(v35 + 28);
              goto LABEL_249;
            }
            int v134 = *(_DWORD *)(v35 + 28);
LABEL_261:
            if ((v134 & 0xF80) != 0)
            {
              uint64_t v136 = a1;
              unint64_t v137 = "'/BHhLl' modifiers are only allowed for pascal strings\n";
              goto LABEL_269;
            }
            if (*(unsigned __int8 *)(v35 + 6) > 0x11u)
            {
              if ((v133 - 18) < 2)
              {
                if (v134)
                {
                  uint64_t v136 = a1;
                  unint64_t v137 = "no modifiers allowed for 16-bit strings\n";
                  goto LABEL_269;
                }
LABEL_276:
                int v126 = 0;
LABEL_277:
                __s1 = v102;
                goto LABEL_278;
              }
              if (v133 == 20)
              {
                if (*(_DWORD *)(v35 + 24)) {
                  goto LABEL_276;
                }
                file_magwarn(a1, "missing range; defaulting to %d\n", v14, v15, v16, v17, v18, v19, 100);
                *(_DWORD *)(v35 + 24) = 100;
                goto LABEL_270;
              }
LABEL_391:
              file_magwarn(a1, "coding error: m->type=%d\n", v14, v15, v16, v17, v18, v19, *(unsigned char *)(v35 + 6));
LABEL_270:
              int v126 = -1;
              goto LABEL_277;
            }
            if (v133 == 5)
            {
LABEL_249:
              if ((v134 & 0x10) == 0) {
                goto LABEL_276;
              }
              file_magwarn(a1, "'/%c' only allowed on regex and search\n", v14, v15, v16, v17, v18, v19, 115);
              goto LABEL_270;
            }
            if (v133 != 17) {
              goto LABEL_391;
            }
          }
          if (v134)
          {
            char v135 = 87;
          }
          else
          {
            if ((v134 & 2) == 0) {
              goto LABEL_276;
            }
            char v135 = 119;
          }
          char v257 = v135;
          uint64_t v136 = a1;
          unint64_t v137 = "'/%c' not allowed on regex\n";
LABEL_269:
          file_magwarn(v136, v137, v14, v15, v16, v17, v18, v19, v257);
          goto LABEL_270;
        }
        ++v102;
        a4 = v262;
        while (1)
        {
          int v114 = *v102;
          if (v114 < 0)
          {
            if (__maskrune(*v102, 0x4000uLL))
            {
LABEL_240:
              int v126 = 0;
              goto LABEL_244;
            }
          }
          else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * *v102 + 60) & 0x4000) != 0)
          {
            goto LABEL_240;
          }
          if (v114 != 114) {
            break;
          }
          *(_DWORD *)(v35 + 28) |= 1u;
          ++v102;
        }
        if ((*(unsigned char *)(a1 + 68) & 0x40) != 0) {
        int v126 = -1;
        }
LABEL_244:
        __s1 = v102;
        unint64_t v9 = v263;
LABEL_278:
        if (v126 == -1) {
          goto LABEL_292;
        }
LABEL_279:
        char v115 = *v102;
LABEL_280:
        uint64_t v138 = MEMORY[0x263EF8318];
        if ((v115 & 0x80) == 0)
        {
          unint64_t v139 = v102 + 1;
          do
          {
            if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v115 + 60) & 0x4000) == 0) {
              break;
            }
            __s1 = v139;
            int v140 = *v139++;
            char v115 = v140;
          }
          while ((v140 & 0x80000000) == 0);
          uint64_t v102 = v139 - 1;
        }
        unsigned int v141 = v115 - 33;
        if (v141 <= 0x3D)
        {
          if (((1 << v141) & 0x2000000010000020) != 0)
          {
            *(unsigned char *)(v35 + 4) = v115;
            char v142 = v102 + 1;
            __s1 = v102 + 1;
            if (v102[1] == 61) {
              goto LABEL_295;
            }
            goto LABEL_299;
          }
          if (((1 << v141) & 0x28000000) != 0)
          {
            *(unsigned char *)(v35 + 4) = v115;
            char v142 = v102 + 1;
            __s1 = v102 + 1;
            if (v102[1] == 61)
            {
              if ((*(unsigned char *)(a1 + 68) & 0x40) != 0)
              {
                char v257 = v115;
                uint64_t v44 = a1;
                id v45 = "%c= not supported";
                goto LABEL_291;
              }
LABEL_295:
              char v142 = v102 + 2;
LABEL_298:
              __s1 = v142;
            }
LABEL_299:
            uint64_t v102 = v142;
            if (v115 != 120)
            {
LABEL_300:
              v274[0] = 0;
              unsigned int v143 = *(unsigned __int8 *)(v35 + 6);
              if (v143 <= 0x30 && ((1 << v143) & 0x16000001E2020) != 0)
              {
                int v144 = (unsigned char *)(v35 + 32);
                LOBYTE(v145) = *v102;
                unint64_t v258 = (const char *)(v35 + 32);
                if (!*v102)
                {
                  uint64_t v150 = v102;
                  goto LABEL_363;
                }
                unint64_t v146 = v35 + 159;
                BOOL v147 = v102;
                while (2)
                {
                  if ((v145 & 0x80) != 0)
                  {
                    unint64_t v148 = v146;
                    int v149 = __maskrune(v145, 0x4000uLL);
                    unint64_t v146 = v148;
                    if (v149)
                    {
LABEL_362:
                      uint64_t v150 = v147;
                      uint64_t v138 = MEMORY[0x263EF8318];
LABEL_363:
                      *int v144 = 0;
                      char v163 = v35 + 32;
                      *(unsigned char *)(v35 + 5) = (_BYTE)v144 - (_BYTE)v258;
                      int v164 = *(unsigned __int8 *)(v35 + 6);
                      uint64_t v10 = v260;
                      if (v164 == 13)
                      {
                        uint64_t v165 = file_pstring_length_size(a1, *(_DWORD *)(v35 + 28), v14, v15, v16, v17, v18, v19);
                        if (v165 != -1)
                        {
                          *(unsigned char *)(v35 + 5) += v165;
                          int v164 = *(unsigned __int8 *)(v35 + 6);
                          uint64_t v138 = MEMORY[0x263EF8318];
                          goto LABEL_366;
                        }
LABEL_372:
                        __s1 = 0;
                        if ((*(unsigned char *)(a1 + 68) & 0x40) != 0) {
LABEL_374:
                        }
                        a4 = v262;
                        goto LABEL_292;
                      }
LABEL_366:
                      __s1 = v150;
                      if (v164 == 17)
                      {
                        long long v272 = 0u;
                        long long v273 = 0u;
                        *(_OWORD *)unsigned int v270 = 0u;
                        long long v271 = 0u;
                        uint64_t v166 = file_regcomp((uint64_t)v270, v258, 1);
                        if (v166)
                        {
                          if ((*(unsigned char *)(a1 + 68) & 0x40) != 0) {
                            file_regerror((uint64_t)v270, v166, a1);
                          }
                          file_regfree((uint64_t)v270);
                          goto LABEL_374;
                        }
                        file_regfree((uint64_t)v270);
                        goto LABEL_376;
                      }
                      goto LABEL_408;
                    }
                  }
                  else if ((*(_DWORD *)(v138 + 4 * v145 + 60) & 0x4000) != 0)
                  {
                    goto LABEL_362;
                  }
                  if ((unint64_t)v144 >= v146)
                  {
                    uint64_t v10 = v260;
                    char v163 = v35 + 32;
                    goto LABEL_372;
                  }
                  if (v145 != 92)
                  {
                    uint64_t v150 = v147 + 1;
                    uint64_t v138 = MEMORY[0x263EF8318];
                    goto LABEL_321;
                  }
                  uint64_t v150 = v147 + 2;
                  int v151 = v147[1];
                  LOBYTE(v145) = v147[1];
                  uint64_t v138 = MEMORY[0x263EF8318];
                  if (v151 <= 97)
                  {
                    char v152 = v151 - 48;
                    if ((v151 - 48) >= 8)
                    {
                      if (v151 == 97)
                      {
                        LOBYTE(v145) = 7;
                      }
                      else if (!v147[1])
                      {
                        uint64_t v150 = v147 + 1;
                        goto LABEL_363;
                      }
                    }
                    else
                    {
                      if ((*v150 & 0xF8) == 0x30)
                      {
                        uint64_t v153 = v147 + 4;
                        char v155 = v147[3];
                        v154 = v147 + 3;
                        char v156 = (*v150 - 48) | (8 * v152);
                        int v157 = v155 & 0xF8;
                        char v158 = (v155 - 48) | (8 * v156);
                        if (v157 == 48) {
                          uint64_t v150 = v153;
                        }
                        else {
                          uint64_t v150 = v154;
                        }
                        if (v157 == 48) {
                          char v152 = v158;
                        }
                        else {
                          char v152 = v156;
                        }
                      }
                      LOBYTE(v145) = v152;
                    }
                    goto LABEL_321;
                  }
                  switch(v147[1])
                  {
                    case 'n':
                      LOBYTE(v145) = 10;
                      goto LABEL_321;
                    case 'o':
                    case 'p':
                    case 'q':
                    case 's':
                    case 'u':
                    case 'w':
                      goto LABEL_321;
                    case 'r':
                      LOBYTE(v145) = 13;
                      goto LABEL_321;
                    case 't':
                      LOBYTE(v145) = 9;
                      goto LABEL_321;
                    case 'v':
                      LOBYTE(v145) = 11;
                      goto LABEL_321;
                    case 'x':
                      unsigned int v160 = *v150;
                      if (v160 > 0x7F) {
                        goto LABEL_349;
                      }
                      if (v160 - 48 > 9)
                      {
                        if (((char)v160 - 97) <= 5)
                        {
                          LOBYTE(v145) = v160 - 87;
                          goto LABEL_346;
                        }
                        if (((char)v160 - 65) > 5)
                        {
LABEL_349:
                          LOBYTE(v145) = 120;
                          goto LABEL_321;
                        }
                        int v145 = (char)v160 - 55;
                      }
                      else
                      {
                        int v145 = (char)v160 - 48;
                      }
                      if ((v145 & 0x80000000) == 0)
                      {
LABEL_346:
                        uint64_t v150 = v147 + 3;
                        unsigned int v161 = v147[3];
                        if (v161 > 0x7F) {
                          goto LABEL_321;
                        }
                        if (v161 - 48 > 9)
                        {
                          if (((char)v161 - 97) <= 5)
                          {
                            LOBYTE(v162) = v161 - 87;
LABEL_355:
                            uint64_t v150 = v147 + 4;
                            LOBYTE(v145) = v162 + 16 * v145;
LABEL_321:
                            *v144++ = v145;
                            LOBYTE(v145) = *v150;
                            BOOL v147 = v150;
                            if (!*v150) {
                              goto LABEL_363;
                            }
                            continue;
                          }
                          if (((char)v161 - 65) > 5) {
                            goto LABEL_321;
                          }
                          int v162 = (char)v161 - 55;
                        }
                        else
                        {
                          int v162 = (char)v161 - 48;
                        }
                        if (v162 < 0) {
                          goto LABEL_321;
                        }
                        goto LABEL_355;
                      }
                      goto LABEL_349;
                    default:
                      if (v151 == 102) {
                        char v159 = 12;
                      }
                      else {
                        char v159 = v147[1];
                      }
                      if (v151 == 98) {
                        LOBYTE(v145) = 8;
                      }
                      else {
                        LOBYTE(v145) = v159;
                      }
                      goto LABEL_321;
                  }
                }
              }
              if (*(unsigned char *)(v35 + 4) == 120) {
                goto LABEL_408;
              }
              if (v143 - 33 < 3)
              {
                *__error() = 0;
                *(float *)(v35 + 32) = strtof(__s1, v274);
LABEL_382:
                int v167 = __error();
                uint64_t v138 = MEMORY[0x263EF8318];
                if (!*v167) {
                  __s1 = v274[0];
                }
                goto LABEL_408;
              }
              if (v143 - 36 < 3)
              {
                *__error() = 0;
                *(double *)(v35 + 32) = strtod(__s1, v274);
                goto LABEL_382;
              }
              if (v143 == 49)
              {
                if (file_parse_guid(v102, v35 + 32) == -1) {
                  goto LABEL_374;
                }
                __s1 += 36;
LABEL_376:
                uint64_t v138 = MEMORY[0x263EF8318];
              }
              else
              {
                *__error() = 0;
                unint64_t v168 = strtoull(__s1, v274, 0);
                *(void *)(v35 + 32) = file_signextend(a1, v35, v168, v169, v170, v171, v172, v173);
                BOOL v180 = __s1;
                char v181 = v274[0];
                if (__s1 == v274[0])
                {
                }
                else
                {
                  uint64_t v182 = *(unsigned __int8 *)(v35 + 6);
                  unsigned int v183 = v182 - 1;
                  if (v182 - 1) > 0x31 || ((0xF1C0000F1014uLL >> v183))
                  {
                    uint64_t v184 = v10;
                    uint64_t v185 = -1;
                    BOOL v180 = __s1;
                  }
                  else
                  {
                    uint64_t v184 = v10;
                    uint64_t v185 = qword_2166135A8[v183];
                  }
                  do
                  {
                    int v186 = *v180;
                    if (*v180 < 0) {
                      int v187 = __maskrune(*v180, 0x4000uLL);
                    }
                    else {
                      int v187 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * *v180 + 60) & 0x4000;
                    }
                    ++v180;
                  }
                  while (v187);
                  if (v186 == 45) {
                    unint64_t v188 = -(uint64_t)v168;
                  }
                  else {
                    unint64_t v188 = v168;
                  }
                  uint64_t v10 = v184;
                  signed __int8 v11 = &classUIPrintFormatter;
                  unint64_t v189 = -256;
                  switch(v185)
                  {
                    case 1:
                      goto LABEL_405;
                    case 2:
                      unint64_t v189 = -65536;
                      goto LABEL_405;
                    case 4:
                      unint64_t v189 = 0xFFFFFFFF00000000;
LABEL_405:
                      if ((v189 & v188) != 0) {
                      break;
                      }
                    case 8:
                      break;
                    default:
LABEL_518:
                      abort();
                  }
                }
                int v190 = __error();
                uint64_t v138 = MEMORY[0x263EF8318];
                if (!*v190)
                {
                  __s1 = v181;
                  eatsize((unsigned __int8 **)&__s1);
                  goto LABEL_376;
                }
              }
LABEL_408:
              char v142 = __s1;
              a4 = v262;
            }
LABEL_409:
            uint64_t v191 = *v142;
            if ((*v142 & 0x80000000) == 0)
            {
              uint64_t v192 = v142 + 1;
              do
              {
                if ((*(_DWORD *)(v138 + 4 * v191 + 60) & 0x4000) == 0) {
                  break;
                }
                __s1 = v192;
                int v193 = *v192++;
                uint64_t v191 = v193;
              }
              while ((v193 & 0x80000000) == 0);
              char v142 = v192 - 1;
            }
            if (v191 == 8)
            {
              uint64_t v194 = 1;
LABEL_419:
              __s1 = &v142[v194];
              *(unsigned char *)(v35 + 2) |= 0x10u;
            }
            else if (v191 == 92 && v142[1] == 98)
            {
              uint64_t v194 = 2;
              goto LABEL_419;
            }
            unint64_t v195 = 0;
            do
            {
              uint64_t v196 = __s1++;
              int v197 = *v196;
              unint64_t v198 = v195 + 1;
              *(unsigned char *)(v35 + 160 + v195) = v197;
              if (v195 > 0x3E) {
                break;
              }
              ++v195;
            }
            while (v197);
            if (v198 == 64)
            {
              *(unsigned char *)(v35 + 223) = 0;
              if ((*(unsigned char *)(a1 + 68) & 0x40) != 0) {
            }
              }
            if ((*(unsigned char *)(a1 + 68) & 0x40) != 0)
            {
              uint64_t v199 = v35 + 161;
              uint64_t v200 = v35;
              for (uint64_t i = (unsigned char *)(v35 + 160); *i; ++i)
              {
                if (*i == 37)
                {
                  unint64_t v202 = *(unsigned __int8 *)(v35 + 6);
                  if (v202 >= 0x33)
                  {
                    uint64_t v44 = a1;
                    id v45 = "Internal error inconsistency between m->type and format strings";
                    goto LABEL_291;
                  }
                  LODWORD(v203) = file_formats[v202];
                  if (v203)
                  {
                    int v206 = i[1];
                    unsigned int v205 = i + 1;
                    int v204 = v206;
                    if (v206)
                    {
                      int v207 = v203 - 1;
                      char v208 = 0;
                      LOBYTE(v203) = 0;
                      switch(v207)
                      {
                        case 0:
                          char v230 = v202 - 1;
                          if ((v202 - 1) >= 0x29u || ((0x1C0004006CBuLL >> v230) & 1) == 0) {
                            goto LABEL_518;
                          }
                          unint64_t v203 = (0x3FFFBFF935uLL >> v230) & 1;
                          char v208 = 1;
LABEL_468:
                          if (v204 == 45) {
                            uint64_t v231 = v205 + 1;
                          }
                          else {
                            uint64_t v231 = v205;
                          }
                          BOOL v232 = *v231 == 46;
                          if (*v231 == 46) {
                            ++v231;
                          }
                          v233 = v231 + 1;
                          int v234 = *v231;
                          BOOL v235 = v234 == 35;
                          if (v234 != 35) {
                            v233 = v231;
                          }
                          int v236 = *v233;
                          if ((v236 - 48) > 9) {
                            goto LABEL_481;
                          }
                          unint64_t v237 = 0;
                          unint64_t v238 = 0;
                          uint64_t v239 = v200 + v232 + (v204 == 45) + v235;
                          do
                          {
                            unint64_t v238 = 10 * v238 + (char)v236 - 48;
                            unint64_t v240 = v239 + v237++;
                            int v236 = *(unsigned __int8 *)(v240 + 162);
                          }
                          while ((v236 - 48) < 0xA);
                          if (v237 > 5) {
                            goto LABEL_499;
                          }
                          unsigned int v218 = "too long";
                          if (v238 > 0x400) {
                            goto LABEL_509;
                          }
                          v233 = (unsigned __int8 *)(v239 + v237 + 161);
LABEL_481:
                          if (v236 == 46) {
                            uint64_t v241 = v233 + 1;
                          }
                          else {
                            uint64_t v241 = v233;
                          }
                          int v242 = *v241;
                          if ((v242 - 48) > 9) {
                            goto LABEL_490;
                          }
                          unint64_t v243 = 0;
                          unint64_t v244 = 0;
                          do
                          {
                            unint64_t v244 = 10 * v244 + (char)v242 - 48;
                            unsigned int v245 = &v241[v243++];
                            int v242 = v245[1];
                          }
                          while ((v242 - 48) < 0xA);
                          if (v243 > 5) {
                            goto LABEL_499;
                          }
                          unsigned int v218 = "too long";
                          if (v244 > 0x400) {
                            goto LABEL_509;
                          }
                          v241 += v243;
LABEL_490:
                          if (v208) {
                            goto LABEL_494;
                          }
                          unsigned int v218 = "too long";
                          if (v242 != 108 || v241[1] != 108) {
                            goto LABEL_509;
                          }
                          LOBYTE(v242) = v241[2];
LABEL_494:
                          uint64_t v246 = ((char)v242 - 88);
                          if (v246 > 0x20)
                          {
LABEL_499:
                            unsigned int v218 = "too long";
                            goto LABEL_509;
                          }
                          if (((1 << (v242 - 88)) & 0x120821001) == 0)
                          {
                            unsigned int v218 = "too long";
                            if (v246 != 11 || (v203 & 1) == 0) {
                              goto LABEL_509;
                            }
                          }
LABEL_505:
                          uint64_t v249 = 162;
                          if (!v204) {
                            goto LABEL_427;
                          }
                          break;
                        case 1:
                          uint64_t v247 = v204 == 45;
                          do
                          {
                            int v248 = *(unsigned __int8 *)(v199 + v247);
                            ++v199;
                          }
                          while ((v248 - 48) < 0xA);
                          if (v248 == 46)
                          {
                            do
                              int v248 = *(unsigned __int8 *)(v199 + v247++);
                            while ((v248 - 48) < 0xA);
                          }
                          unsigned int v218 = "too long";
                          if (v248 == 115) {
                            goto LABEL_505;
                          }
                          goto LABEL_509;
                        case 2:
                          goto LABEL_468;
                        case 3:
                        case 4:
                          if (v204 == 45) {
                            unsigned int v209 = v205 + 1;
                          }
                          else {
                            unsigned int v209 = v205;
                          }
                          int v210 = *v209;
                          BOOL v211 = v210 == 46;
                          if (v210 == 46) {
                            unsigned int v212 = v209 + 1;
                          }
                          else {
                            unsigned int v212 = v209;
                          }
                          int v213 = *v212;
                          if ((v213 - 48) > 9) {
                            goto LABEL_449;
                          }
                          unint64_t v214 = 0;
                          unint64_t v215 = 0;
                          uint64_t v216 = v200 + (v204 == 45) + v211;
                          do
                          {
                            unint64_t v215 = 10 * v215 + (char)v213 - 48;
                            unint64_t v217 = v216 + v214++;
                            int v213 = *(unsigned __int8 *)(v217 + 162);
                          }
                          while ((v213 - 48) < 0xA);
                          if (v214 > 5) {
                            goto LABEL_499;
                          }
                          unsigned int v218 = "too long";
                          if (v215 > 0x400) {
                            goto LABEL_509;
                          }
                          unsigned int v212 = (unsigned __int8 *)(v216 + v214 + 161);
LABEL_449:
                          BOOL v219 = v213 == 46;
                          if (v213 == 46) {
                            unsigned int v220 = v212 + 1;
                          }
                          else {
                            unsigned int v220 = v212;
                          }
                          int v221 = *v220;
                          if ((v221 - 48) > 9) {
                            goto LABEL_457;
                          }
                          uint64_t v222 = 0;
                          unint64_t v223 = 0;
                          uint64_t v224 = (uint64_t)&v212[v219 + 1];
                          do
                          {
                            unint64_t v223 = 10 * v223 + (char)v221 - 48;
                            unint64_t v225 = v222 + 1;
                            int v221 = *(unsigned __int8 *)(v224 + v222++);
                          }
                          while ((v221 - 48) < 0xA);
                          if (v225 > 5) {
                            goto LABEL_499;
                          }
                          unsigned int v218 = "too long";
                          if (v223 > 0x400) {
                            goto LABEL_509;
                          }
LABEL_457:
                          unsigned int v226 = (char)v221 - 69;
                          BOOL v227 = v226 > 0x22;
                          uint64_t v228 = (1 << v226) & 0x700000007;
                          if (!v227 && v228 != 0) {
                            goto LABEL_505;
                          }
                          goto LABEL_499;
                        default:
                          goto LABEL_518;
                      }
                      while (v204 != 37)
                      {
                        int v204 = *(unsigned __int8 *)(v200 + v249++);
                        if (!v204) {
                          goto LABEL_427;
                        }
                      }
                    }
                    else
                    {
                      unsigned int v218 = "missing format spec";
LABEL_509:
                    }
                  }
                  else
                  {
                  }
                  goto LABEL_292;
                }
                ++v199;
                ++v200;
              }
            }
LABEL_427:
            *(unsigned char *)(v35 + 224) = 0;
            goto LABEL_293;
          }
          if (v115 == 33)
          {
            *(unsigned char *)(v35 + 4) = v115;
            char v142 = v102 + 1;
            goto LABEL_298;
          }
        }
        *(unsigned char *)(v35 + 4) = 61;
        if (*v102 != 120) {
          goto LABEL_300;
        }
        char v142 = v102 + 1;
        if (v102[1] < 0 || v102[1] && (*(_DWORD *)(v138 + 4 * v102[1] + 60) & 0x4000) == 0) {
          goto LABEL_300;
        }
        *(unsigned char *)(v35 + 4) = 120;
        __s1 = v102 + 1;
        goto LABEL_409;
      }
      unsigned int v259 = v10;
      char v65 = 0;
      *(_WORD *)(v35 + 7) = 4;
      *(_DWORD *)(v35 + 16) = 0;
      int v66 = *v52;
      switch(v66)
      {
        case '.':
LABEL_74:
          __s1 = v52 + 1;
          uint64_t v67 = (v52[1] - 66);
          uint64_t v10 = v259;
          if (v67 >= 0x32 || ((0x28CFB000284FBuLL >> (v52[1] - 66)) & 1) == 0)
          {
            a4 = v262;
            if ((*(unsigned char *)(a1 + 68) & 0x40) != 0) {
LABEL_292:
            }
            ++*a3;
            goto LABEL_293;
          }
          *(unsigned char *)(v35 + 7) = byte_216613575[v67];
          __s1 = v52 + 2;
          int v66 = v52[2];
          v52 += 2;
          break;
        case ',':
          char v65 = 32;
          *(unsigned char *)(v35 + _Block_object_dispose(&STACK[0x500], 8) = 32;
          goto LABEL_74;
        case '~':
          v65 |= 0x40u;
          *(unsigned char *)(v35 + _Block_object_dispose(&STACK[0x500], 8) = v65;
          __s1 = v52 + 1;
          int v66 = *++v52;
          break;
      }
      int v84 = get_op((char)v66);
      if (v84 != -1)
      {
        v65 |= v84;
        *(unsigned char *)(v35 + _Block_object_dispose(&STACK[0x500], 8) = v65;
        __s1 = v52 + 1;
        int v66 = *++v52;
      }
      if (v66 == 40)
      {
        *(unsigned char *)(v35 + _Block_object_dispose(&STACK[0x500], 8) = v65 | 0x80;
        __s1 = v52 + 1;
        int v66 = *++v52;
      }
      a4 = v262;
      if (v66 == 45 || (v66 - 48) <= 9)
      {
        *(_DWORD *)(v35 + 16) = strtol(v52, &__endptr, 0);
        uint64_t v52 = __endptr;
        uint64_t v54 = MEMORY[0x263EF8318];
        if (__s1 == __endptr)
        {
          uint64_t v10 = v259;
          if ((*(unsigned char *)(a1 + 68) & 0x40) != 0) {
          goto LABEL_292;
          }
        }
      }
      else
      {
        uint64_t v54 = MEMORY[0x263EF8318];
      }
      uint64_t v53 = v52 + 1;
      __s1 = v52 + 1;
      uint64_t v10 = v259;
      if (*v52 != 41 || *(char *)(v35 + 8) < 0 && (uint64_t v53 = v52 + 2, __s1 = v52 + 2, v52[1] != 41))
      {
        if ((*(unsigned char *)(a1 + 68) & 0x40) != 0)
        {
          uint64_t v44 = a1;
          id v45 = "missing ')' in indirect offset";
LABEL_291:
          file_magwarn(v44, v45, v14, v15, v16, v17, v18, v19, v257);
        }
        goto LABEL_292;
      }
      goto LABEL_58;
    }
    if (v20[1] != 58) {
      goto LABEL_17;
    }
    uint64_t v22 = v10;
    uint64_t v23 = 0;
    unint64_t v24 = v13 - 2;
    unint64_t v25 = &off_26C71BEA8;
    uint64_t v26 = "mime";
    while (1)
    {
      unint64_t v27 = (unint64_t)*(v25 - 2);
      uint64_t v28 = v24 - v27;
      if (v24 > v27 && !memcmp(v26, v20 + 2, (size_t)*(v25 - 2))) {
        break;
      }
      ++v23;
      uint64_t v29 = *v25;
      v25 += 3;
      uint64_t v26 = v29;
      if (v23 == 4)
      {
        a3 = v261;
        a4 = v262;
        ++*v261;
        unint64_t v9 = v263;
        goto LABEL_81;
      }
    }
    unint64_t v9 = v263;
    if (ptr)
    {
      a3 = v261;
      if (!((unsigned int (*)(uint64_t, void **, char *, uint64_t))(&bang)[3 * v23 + 2])(a1, &ptr, &v20[v27 + 2], v28))
      {
LABEL_80:
        a4 = v262;
LABEL_81:
        uint64_t v10 = v22;
        signed __int8 v11 = &classUIPrintFormatter;
        goto LABEL_293;
      }
    }
    else
    {
      file_error(a1, 0, "No current entry for :!%s type", v15, v16, v17, v18, v19, (char)v26);
      a3 = v261;
    }
    ++*a3;
    goto LABEL_80;
  }
  uint64_t result = __error();
  if (*result != 2)
  {
    off_t v251 = __error();
  }
  ++*a3;
  return result;
}

uint64_t apprentice_sort(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unint64_t v3 = apprentice_magic_strength(*a1);
  unint64_t v4 = apprentice_magic_strength(*a2);
  if (v3 > v4) {
    unsigned int v5 = -1;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v3 == v4) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t get_op(int a1)
{
  int v1 = a1 - 37;
  uint64_t result = 0;
  switch(v1)
  {
    case 0:
      uint64_t result = 7;
      break;
    case 1:
      return result;
    case 5:
      uint64_t result = 5;
      break;
    case 6:
      uint64_t result = 3;
      break;
    case 8:
      uint64_t result = 4;
      break;
    case 10:
      uint64_t result = 6;
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t get_standard_integer_type(uint64_t a1, void *a2)
{
  uint64_t v5 = a1 + 1;
  int v4 = *(char *)(a1 + 1);
  int v6 = *(unsigned __int8 *)(a1 + 1);
  if (v4 < 0)
  {
    if (__maskrune(*(unsigned __int8 *)(a1 + 1), 0x100uLL))
    {
LABEL_3:
      uint64_t result = 0;
      if (v4 <= 75)
      {
        if (v4 == 67)
        {
          uint64_t v8 = 1;
          goto LABEL_18;
        }
        if (v4 != 73) {
          return result;
        }
      }
      else if (v4 != 76)
      {
        if (v4 == 81)
        {
          uint64_t v8 = 24;
        }
        else
        {
          if (v4 != 83) {
            return result;
          }
          uint64_t v8 = 2;
        }
        goto LABEL_18;
      }
      uint64_t v8 = 4;
LABEL_18:
      uint64_t v9 = a1 + 2;
      goto LABEL_19;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * *(unsigned __int8 *)(a1 + 1) + 60) & 0x100) != 0)
  {
    goto LABEL_3;
  }
  if ((v6 - 48) > 9)
  {
    uint64_t v8 = 4;
    uint64_t v9 = v5;
LABEL_19:
    if (a2) {
      *a2 = v9;
    }
    return v8;
  }
  int v10 = *(unsigned __int8 *)(a1 + 2);
  uint64_t v9 = a1 + 2;
  if ((v10 - 48) < 0xA) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v8 = 1;
  switch(v4)
  {
    case '1':
      goto LABEL_19;
    case '2':
      uint64_t v8 = 2;
      goto LABEL_19;
    case '4':
      uint64_t v8 = 4;
      goto LABEL_19;
    case '8':
      uint64_t v8 = 24;
      goto LABEL_19;
    default:
      return result;
  }
  return result;
}

uint64_t file_signextend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(unsigned char *)(a2 + 2) & 8) == 0)
  {
    switch(*(unsigned char *)(a2 + 6))
    {
      case 1:
        a3 = (char)a3;
        break;
      case 2:
      case 7:
      case 0xA:
        a3 = (__int16)a3;
        break;
      case 3:
      case 5:
      case 0xD:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
        return a3;
      case 4:
      case 6:
      case 8:
      case 9:
      case 0xB:
      case 0xC:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x21:
      case 0x22:
      case 0x23:
        a3 = (int)a3;
        break;
      default:
        if ((*(unsigned char *)(a1 + 68) & 0x40) != 0) {
          file_magwarn(a1, "cannot happen: m->type=%d\n", a3, a4, a5, a6, a7, a8, *(unsigned char *)(a2 + 6));
        }
        a3 = -1;
        break;
    }
  }
  return a3;
}

uint64_t eatsize(unsigned __int8 **a1)
{
  uint64_t v2 = *a1;
  __darwin_ct_rune_t v3 = (char)**a1;
  __darwin_ct_rune_t v4 = **a1;
  uint64_t v5 = MEMORY[0x263EF8318];
  if ((v3 & 0x80000000) == 0)
  {
    if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * **a1 + 60) & 0x8000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (__maskrune(**a1, 0x8000uLL)) {
LABEL_3:
  }
    __darwin_ct_rune_t v3 = __tolower(v4);
LABEL_4:
  if (v3 == 117) {
    ++v2;
  }
  int v6 = (char)*v2;
  __darwin_ct_rune_t v7 = *v2;
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t result = *(_DWORD *)(v5 + 4 * *v2 + 60) & 0x8000;
    if (!result) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t result = __maskrune(*v2, 0x8000uLL);
  if (result)
  {
LABEL_8:
    uint64_t result = __tolower(v7);
    int v6 = result;
  }
LABEL_9:
  if ((v6 - 98) <= 0x11 && ((1 << (v6 - 98)) & 0x20443) != 0) {
    ++v2;
  }
  *a1 = v2;
  return result;
}

uint64_t file_pstring_length_size(int a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a2 & 0xF80;
  if (v8 <= 0x1FF)
  {
    if (v8 != 128)
    {
      if (v8 == 256) {
        return 2;
      }
LABEL_8:
      file_error(a1, 0, "corrupt magic file (bad pascal string length %d)", a4, a5, a6, a7, a8, a2 & 0x80);
      return -1;
    }
    return 1;
  }
  else
  {
    if (v8 != 2048 && v8 != 1024)
    {
      if (v8 == 512) {
        return 2;
      }
      goto LABEL_8;
    }
    return 4;
  }
}

void addentry(int a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16 * (*(unsigned char *)(*a2 + 6) == 45);
  int v6 = (unsigned int *)(v4 + 8);
  unsigned int v5 = *(_DWORD *)(v4 + 8);
  __darwin_ct_rune_t v7 = (unsigned int *)(v4 + 12);
  unsigned int v8 = *(void **)v4;
  if (v5 != *(_DWORD *)(v4 + 12)) {
    goto LABEL_4;
  }
  unsigned int v10 = v5 + 200;
  *__darwin_ct_rune_t v7 = v10;
  signed __int8 v11 = (char *)malloc_type_realloc(v8, 16 * v10, 0x1020040EDED9539uLL);
  if (v11)
  {
    unsigned int v8 = v11;
    bzero(&v11[16 * *v6], 0xC80uLL);
    *(void *)uint64_t v4 = v8;
    unsigned int v5 = *v6;
LABEL_4:
    *int v6 = v5 + 1;
    *((_OWORD *)v8 + v5) = *(_OWORD *)a2;
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  int v12 = 16 * *v7;
  ssize_t v13 = __error();
  file_error(a1, *v13, "cannot allocate %zu bytes", v14, v15, v16, v17, v18, v12);
}

uint64_t parse_strength(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(unsigned char **)a2;
  if (!*(unsigned char *)(*(void *)a2 + 11))
  {
    if (v9[6] == 45)
    {
      file_magwarn(a1, "%s: Strength setting is not supported in \"name\" magic entries", (uint64_t)a3, a4, a5, a6, a7, a8, (_BYTE)v9 + 32);
      return 0xFFFFFFFFLL;
    }
    int v11 = *a3;
    if ((v11 & 0x80000000) == 0)
    {
      do
      {
        if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v11 + 60) & 0x4000) == 0) {
          break;
        }
        int v12 = *++a3;
        LOBYTE(v11) = v12;
      }
      while ((v12 & 0x80000000) == 0);
    }
    if ((char)v11 > 0x2F || ((1 << v11) & 0xAC0000000001) == 0)
    {
      return 0xFFFFFFFFLL;
    }
    __endptr = 0;
    v9[11] = v11;
    ssize_t v13 = a3 + 1;
    uint64_t v14 = MEMORY[0x263EF8318];
    do
    {
      uint64_t v15 = v13;
      int v16 = *v13;
      if (v16 < 0) {
        break;
      }
      int v17 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v16 + 60);
      ssize_t v13 = v15 + 1;
    }
    while ((v17 & 0x4000) != 0);
    unint64_t v18 = strtoul(v15, &__endptr, 0);
    unint64_t v25 = v18;
    if (v18 >= 0x100)
    {
LABEL_17:
      v9[11] = 0;
      v9[3] = 0;
      return 0xFFFFFFFFLL;
    }
    uint64_t v26 = *__endptr;
    if (*__endptr)
    {
      if ((v26 & 0x80) == 0)
      {
        if ((*(_DWORD *)(v14 + 4 * v26 + 60) & 0x4000) != 0) {
          goto LABEL_21;
        }
LABEL_27:
        goto LABEL_17;
      }
      if (!__maskrune(v26, 0x4000uLL)) {
        goto LABEL_27;
      }
    }
LABEL_21:
    v9[3] = v25;
    if (v25 || v9[11] != 47) {
      return 0;
    }
    goto LABEL_17;
  }
  file_magwarn(a1, "Current entry already has a strength type: %c %d", (uint64_t)a3, a4, a5, a6, a7, a8, *(unsigned char *)(*(void *)a2 + 11));
  return 0xFFFFFFFFLL;
}

uint64_t parse_ext(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  return parse_extra(a1, *(void *)a2, *(unsigned int *)(a2 + 8), a3, a4, 312, 0x40uLL, (uint64_t)"EXTENSION", ",!+-/@?_$", 0);
}

uint64_t parse_extra(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, char *__s, int a10)
{
  char v10 = a8;
  uint64_t v13 = a1;
  unsigned int v14 = a3 - 1;
  if (!a3) {
    unsigned int v14 = 0;
  }
  uint64_t v15 = (unsigned char *)(a2 + 376 * v14 + a6);
  if (*v15)
  {
    if (a10) {
      strlen((const char *)(a2 + 376 * v14 + a6));
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(unsigned char *)(a2 + 376 * v14 + 160))
  {
    file_magwarn(a1, "Current entry does not yet have a description for adding a %s type", a3, (uint64_t)a4, a5, a6, a7, a8, a8);
    return 0xFFFFFFFFLL;
  }
  int v18 = *a4;
  if (v18 < 0)
  {
    uint64_t v19 = a4;
  }
  else
  {
    uint64_t v19 = a4;
    do
    {
      if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v18 + 60) & 0x4000) == 0) {
        break;
      }
      int v20 = *++v19;
      LOBYTE(v1_Block_object_dispose(&STACK[0x500], 8) = v20;
    }
    while ((v20 & 0x80000000) == 0);
  }
  char v27 = a8;
  unint64_t v21 = 0;
  if ((_BYTE)v18 && a5)
  {
    unint64_t v22 = 0;
    while (goodchar(v18, __s))
    {
      unint64_t v21 = v22 + 1;
      v15[v22] = v18;
      LOBYTE(v1_Block_object_dispose(&STACK[0x500], 8) = v19[v22 + 1];
      if ((_BYTE)v18) {
        BOOL v23 = v21 >= a5;
      }
      else {
        BOOL v23 = 1;
      }
      BOOL v24 = v23 || v21 >= a7;
      ++v22;
      if (v24) {
        goto LABEL_30;
      }
    }
    unint64_t v21 = v22;
LABEL_30:
    uint64_t v13 = a1;
  }
  if (v21 == a7)
  {
    if ((_BYTE)v18)
    {
      if (a10) {
        v15[a7 - 1] = 0;
      }
      if ((*(unsigned char *)(v13 + 68) & 0x40) != 0) {
      goto LABEL_46;
      }
    }
    unsigned int v25 = 0;
LABEL_41:
    if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v25 + 60) & 0x4000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_44;
  }
  unsigned int v25 = v18;
  if ((v18 & 0x80) == 0) {
    goto LABEL_41;
  }
  if (!__maskrune(v18, 0x4000uLL))
  {
LABEL_42:
    if (!goodchar(v18, __s)) {
  }
    }
LABEL_44:
  if (a10) {
    v15[v21] = 0;
  }
LABEL_46:
  if (!v21)
  {
    file_magerror(v13, "Bad magic entry '%s'", a3, (uint64_t)a4, a5, a6, a7, a8, a4);
    return 0xFFFFFFFFLL;
  }
  return 0;
}

BOOL goodchar(unsigned int __c, char *__s)
{
  return (__c & 0x80) == 0 && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * __c + 60) & 0x500) != 0
      || strchr(__s, __c) != 0;
}

uint64_t parse_apple(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  return parse_extra(a1, *(void *)a2, *(unsigned int *)(a2 + 8), a3, a4, 304, 8uLL, (uint64_t)"APPLE", "!+-./?", 0);
}

uint64_t parse_mime(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  return parse_extra(a1, *(void *)a2, *(unsigned int *)(a2 + 8), a3, a4, 224, 0x50uLL, (uint64_t)"MIME", "+-/.$?:{}", 1);
}

uint64_t cmpstrp(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

FILE *file_showstr(FILE *result, unsigned char *a2, uint64_t a3)
{
  unsigned int v5 = result;
  while (a3 != -1)
  {
    if (!a3) {
      return result;
    }
    --a3;
    int v6 = *a2;
LABEL_7:
    ++a2;
    int v7 = (char)v6;
    if ((v6 - 32) > 0x5E)
    {
      fputc(92, v5);
      switch(v7)
      {
        case 7:
          int v8 = 97;
          goto LABEL_9;
        case 8:
          int v8 = 98;
          goto LABEL_9;
        case 9:
          int v8 = 116;
          goto LABEL_9;
        case 10:
          int v8 = 110;
          goto LABEL_9;
        case 11:
          int v8 = 118;
          goto LABEL_9;
        case 12:
          int v8 = 102;
          goto LABEL_9;
        case 13:
          int v8 = 114;
          goto LABEL_9;
        default:
          uint64_t result = (FILE *)fprintf(v5, "%.3o", v7);
          break;
      }
    }
    else
    {
      int v8 = (char)v6;
LABEL_9:
      uint64_t result = (FILE *)fputc(v8, v5);
    }
  }
  int v6 = *a2;
  if (*a2)
  {
    a3 = -1;
    goto LABEL_7;
  }
  return result;
}

uint64_t file_pstring_get_length(int a1, __int16 a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a2 & 0xF80;
  if (v8 > 0x1FF)
  {
    switch(v8)
    {
      case 0x200u:
        uint64_t v9 = *(unsigned __int16 *)a3;
        if ((a2 & 0x1000) == 0) {
          return v9;
        }
        goto LABEL_16;
      case 0x400u:
        uint64_t v9 = bswap32(*a3);
        if ((a2 & 0x1000) == 0) {
          return v9;
        }
        goto LABEL_16;
      case 0x800u:
        uint64_t v9 = *a3;
        if ((a2 & 0x1000) == 0) {
          return v9;
        }
LABEL_16:
        uint64_t v10 = file_pstring_length_size(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (v10 != -1)
        {
          v9 -= v10;
          return v9;
        }
        return -1;
    }
    goto LABEL_18;
  }
  if (v8 != 128)
  {
    if (v8 == 256)
    {
      uint64_t v9 = __rev16(*(unsigned __int16 *)a3);
      if ((a2 & 0x1000) == 0) {
        return v9;
      }
      goto LABEL_16;
    }
LABEL_18:
    file_error(a1, 0, "corrupt magic file (bad pascal string length %d)", a4, a5, a6, a7, a8, a2 & 0x80);
    return -1;
  }
  uint64_t v9 = *(unsigned __int8 *)a3;
  if ((a2 & 0x1000) != 0) {
    goto LABEL_16;
  }
  return v9;
}

uint64_t file_magicfind(uint64_t *a1, char *__s2, uint64_t a3)
{
  __darwin_ct_rune_t v3 = (uint64_t *)a1[3];
  if (v3 == a1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    unint64_t v7 = *((unsigned int *)v3 + 2);
    if (v7) {
      break;
    }
LABEL_7:
    __darwin_ct_rune_t v3 = (uint64_t *)v3[3];
    if (v3 == a1) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v8 = 0;
  uint64_t v9 = *v3;
  uint64_t v10 = *v3;
  while (1)
  {
    uint64_t v11 = v8 + 1;
    if (*(unsigned char *)(v10 + 6) == 45 && !strcmp((const char *)(v10 + 32), __s2)) {
      break;
    }
    v10 += 376;
    ++v8;
    if (v7 == v11) {
      goto LABEL_7;
    }
  }
  *(void *)a3 = v9 + 376 * v8;
  if (v7 <= v11) {
    int v13 = v8 + 1;
  }
  else {
    int v13 = v7;
  }
  unsigned int v14 = (unsigned __int16 *)(v10 + 376);
  uint64_t v15 = v8;
  while (++v15 < v7)
  {
    int v16 = *v14;
    v14 += 188;
    if (!v16)
    {
      int v13 = v15;
      break;
    }
  }
  uint64_t result = 0;
  *(_DWORD *)(a3 + _Block_object_dispose(&STACK[0x500], 8) = v13 - v8;
  return result;
}

size_t cdf_read(uint64_t a1, off_t a2, void *__buf, size_t __nbyte)
{
  size_t v4 = __nbyte;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5 && *(void *)(a1 + 16) >= __nbyte + a2)
  {
    memcpy(__buf, (const void *)(v5 + a2), __nbyte);
  }
  else
  {
    int v6 = *(_DWORD *)a1;
    if (v6 == -1)
    {
      *__error() = 22;
      return -1;
    }
    else if (pread(v6, __buf, __nbyte, a2) != __nbyte)
    {
      return -1;
    }
  }
  return v4;
}

size_t cdf_read_sector(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, char a5, int a6)
{
  unint64_t v7 = 1 << a5;
  if (!is_mul_ok(v7, a6)) {
    return -1;
  }
  if (v7 != a4) {
    __assert_rtn("cdf_read_sector", "cdf.c", 418, "ss == len");
  }
  uint64_t v9 = (void *)(a2 + a3);
  return cdf_read(a1, a4 + a4 * a6, v9, a4);
}

uint64_t cdf_count_chain(void *a1, unsigned int a2, uint64_t a3)
{
  if (a2 == -2) {
    return 0;
  }
  uint64_t v4 = a2;
  if ((a2 & 0x80000000) == 0)
  {
    unint64_t v3 = 0;
    while (v3 >> 4 <= 0x270 && (int)v4 < (int)((unint64_t)(a1[1] * a3) >> 2))
    {
      LODWORD(v4) = *(_DWORD *)(*a1 + 4 * v4);
      ++v3;
      if ((v4 & 0x80000000) != 0) {
        return v3;
      }
    }
  }
  *__error() = 79;
  return -1;
}

uint64_t cdf_read_long_sector_chain(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unint64_t a5, uint64_t a6)
{
  unsigned int v8 = a4;
  size_t v12 = 1 << *(_WORD *)(a2 + 30);
  *(void *)a6 = 0;
  size_t v13 = cdf_count_chain(a3, a4, v12);
  *(void *)(a6 + _Block_object_dispose(&STACK[0x500], 8) = v13;
  unsigned int v14 = (unint64_t *)(a6 + 8);
  unint64_t v15 = *(unsigned int *)(a2 + 56);
  if (v15 <= a5) {
    unint64_t v15 = a5;
  }
  *(void *)(a6 + 16) = v15;
  *(void *)(a6 + 24) = v12;
  if (v8 == -2 || !a5)
  {
    unint64_t *v14 = 0;
    *(void *)(a6 + 16) = 0;
    *(void *)(a6 + 24) = 0;
LABEL_21:
    free(*(void **)a6);
    *(void *)a6 = 0;
    return 0xFFFFFFFFLL;
  }
  if (v13 == -1)
  {
LABEL_20:
    *__error() = 79;
    *(void *)(a6 + 16) = 0;
    *(void *)(a6 + 24) = 0;
    unint64_t *v14 = 0;
    goto LABEL_21;
  }
  int v16 = malloc_type_calloc(v13, v12, 0x9D4F84DDuLL);
  *(void *)a6 = v16;
  if (!v16)
  {
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return 0xFFFFFFFFLL;
  }
  if ((v8 & 0x80000000) == 0)
  {
    uint64_t v17 = 0;
    for (unint64_t i = 0; i != 10000 && i < *v14; ++i)
    {
      int64_t sector = cdf_read_sector(a1, *(void *)a6, v17, v12, *(_WORD *)(a2 + 30), v8);
      if (sector != v12)
      {
        if (sector >= 1 && i == *v14 - 1) {
          return 0;
        }
        goto LABEL_20;
      }
      unsigned int v8 = *(_DWORD *)(*a3 + 4 * v8);
      v17 += v12;
      if ((v8 & 0x80000000) != 0) {
        return 0;
      }
    }
    goto LABEL_20;
  }
  return 0;
}

uint64_t cdf_read_user_stream(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t *a6, char *__s, uint64_t a8)
{
  int stream = cdf_find_stream(a6, __s, 2);
  if (stream <= 0) {
    goto LABEL_18;
  }
  uint64_t v16 = *a6 + 136 * (stream - 1);
  unsigned int v17 = *(_DWORD *)(v16 + 120);
  uint64_t v18 = *(unsigned int *)(v16 + 124);
  if (*(_DWORD *)(a2 + 56) > v18 && *a5)
  {
    size_t v19 = 1 << *(_WORD *)(a2 + 32);
    *(void *)a8 = 0;
    size_t v20 = cdf_count_chain(a4, v17, 1 << *(_WORD *)(a2 + 30));
    *(void *)(a8 + _Block_object_dispose(&STACK[0x500], 8) = v20;
    *(void *)(a8 + 16) = v18;
    unint64_t v21 = (unint64_t *)(a8 + 8);
    *(void *)(a8 + 24) = v19;
    if (v20 == -1)
    {
LABEL_21:
      *__error() = 79;
      *(void *)(a8 + 16) = 0;
      *(void *)(a8 + 24) = 0;
      *unint64_t v21 = 0;
      free(*(void **)a8);
      *(void *)a8 = 0;
      return 0xFFFFFFFFLL;
    }
    unint64_t v22 = malloc_type_calloc(v20, v19, 0x9D4F84DDuLL);
    *(void *)a8 = v22;
    if (v22)
    {
      if ((v17 & 0x80000000) != 0) {
        return 0;
      }
      size_t v23 = 0;
      unint64_t v24 = 0;
      while (v24 != 10000)
      {
        if (v24 >= *v21) {
          break;
        }
        unint64_t v25 = 1 << *(_WORD *)(a2 + 32);
        if (!is_mul_ok(v25, v17)) {
          break;
        }
        if (v25 != v19) {
          __assert_rtn("cdf_read_short_sector", "cdf.c", 433, "ss == len");
        }
        unint64_t v26 = v25 * v17;
        if (v26 + v19 > a5[1] * (1 << *(_WORD *)(a2 + 30)))
        {
          *__error() = 79;
          goto LABEL_21;
        }
        size_t v27 = v23 + v19;
        ++v24;
        memcpy((void *)(*(void *)a8 + v23), (const void *)(*a5 + v26), v19);
        uint64_t result = 0;
        unsigned int v17 = *(_DWORD *)(*a4 + 4 * v17);
        size_t v23 = v27;
        if ((v17 & 0x80000000) != 0) {
          return result;
        }
      }
      goto LABEL_21;
    }
LABEL_18:
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    return 0xFFFFFFFFLL;
  }
  unint64_t v29 = *(unsigned int *)(v16 + 124);
  return cdf_read_long_sector_chain(a1, a2, a3, v17, v29, a8);
}

uint64_t cdf_find_stream(uint64_t *a1, char *__s, int a3)
{
  size_t v6 = strlen(__s);
  uint64_t result = a1[1];
  if (result)
  {
    size_t v8 = v6 + 1;
    uint64_t v9 = *a1;
    do
    {
      uint64_t v10 = result - 1;
      if (*(unsigned __int8 *)(v9 + 136 * (result - 1) + 66) == a3)
      {
        if (!v8) {
          return result;
        }
        uint64_t v11 = (unsigned __int16 *)(v9 + 136 * v10);
        size_t v12 = v8;
        for (unint64_t i = __s; *i == *v11; ++i)
        {
          ++v11;
          if (!--v12) {
            return result;
          }
        }
      }
      --result;
    }
    while (v10);
  }
  unsigned int v14 = __error();
  uint64_t result = 0;
  int *v14 = 3;
  return result;
}

uint64_t cdf_check_stream_offset(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *a1;
  unint64_t v6 = a3 + a4;
  uint64_t v7 = cdf_check_stream(a1[2], a1[3], a2);
  if (v6 >= v5 && v6 - v5 <= a1[1] * v7) {
    return 0;
  }
  *__error() = 79;
  return 0xFFFFFFFFLL;
}

void *cdf_grow_info(void **a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v5 = *a2 + a3;
  if (v5 <= 0x2AAAAA && (uint64_t result = malloc_type_realloc(*a1, 24 * v5, 0x66132A66uLL)) != 0)
  {
    *a1 = result;
    *a2 = v5;
  }
  else
  {
    free(*a1);
    uint64_t result = 0;
    *a2 = 0;
    *a1 = 0;
  }
  return result;
}

uint64_t cdf_check_stream(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 30;
  if (*(unsigned int *)(a3 + 56) > a1) {
    uint64_t v3 = 32;
  }
  if (1 << *(_WORD *)(a3 + v3) != a2) {
    __assert_rtn("cdf_check_stream", "cdf.c", 327, "ss == sst->sst_ss");
  }
  return a2;
}

uint64_t cdf_unpack_catalog(uint64_t a1, unsigned __int16 **a2, void *a3)
{
  uint64_t v5 = cdf_check_stream((unint64_t)a2[2], (uint64_t)a2[3], a1);
  unint64_t v6 = *a2;
  unsigned int v7 = **a2;
  if (!**a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = 0;
  unint64_t v9 = (unint64_t)v6 + (void)a2[1] * v5;
  do
  {
    unint64_t v6 = (_WORD *)((char *)v6 + v7);
    if ((unint64_t)v6 > v9) {
      break;
    }
    ++v8;
    unsigned int v7 = (unsigned __int16)*v6;
  }
  while (*v6);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v10 = v8 - 1;
  size_t v11 = 528 * (v8 - 1);
  size_t v12 = (char *)malloc_type_malloc(v11 + 536, 0xF5397DBuLL);
  *a3 = v12;
  if (!v12) {
    return 0xFFFFFFFFLL;
  }
  size_t v13 = v12;
  unsigned int v14 = v12 + 8;
  bzero(v12 + 8, v11);
  uint64_t v15 = 0;
  if (v10)
  {
    unint64_t v16 = 0;
    unsigned int v17 = *a2;
    while (1)
    {
      uint64_t v18 = &v14[528 * v15];
      if ((unint64_t)(v17 + 1) > v9) {
        break;
      }
      __int16 v19 = *v17;
      *(_WORD *)uint64_t v18 = *v17;
      *(_WORD *)&v14[528 * v16] = v19;
      if ((unint64_t)(v17 + 4) > v9) {
        break;
      }
      int v20 = *((_DWORD *)v17 + 1);
      *(_DWORD *)&v14[528 * v15 + 4] = v20;
      *(_DWORD *)&v14[528 * v16 + 4] = (unsigned __int16)v20;
      unint64_t v21 = v17 + 8;
      if ((unint64_t)(v17 + 8) > v9) {
        break;
      }
      uint64_t v22 = *((void *)v17 + 1);
      *(void *)&v14[528 * v15 + 8] = v22;
      *(void *)&v14[528 * v16 + 8] = v22;
      unint64_t v23 = *(unsigned __int16 *)v18;
      if (v23 > 0xD)
      {
        if ((unsigned __int16)(v23 - 14) >= 0xFFu) {
          uint64_t v25 = 255;
        }
        else {
          uint64_t v25 = (unsigned __int16)(v23 - 14);
        }
        *(_WORD *)uint64_t v18 = v25;
        if ((unint64_t)&v21[v25] > v9) {
          break;
        }
        if (v25)
        {
          unint64_t v26 = &v13[528 * v15 + 24];
          uint64_t v27 = v25;
          do
          {
            __int16 v28 = *v21++;
            *(_WORD *)unint64_t v26 = v28;
            v26 += 2;
            --v27;
          }
          while (v27);
        }
        *(_WORD *)&v14[528 * v15 + 16 + 2 * v25] = 0;
        unint64_t v24 = v16 + 1;
        uint64_t v15 = v16++;
      }
      else
      {
        *(_WORD *)uint64_t v18 = 0;
        unint64_t v24 = v16;
      }
      unsigned int v17 = (_WORD *)((char *)v17 + v23);
      if (v24 >= v10) {
        goto LABEL_26;
      }
    }
    *(_WORD *)uint64_t v18 = 0;
  }
LABEL_26:
  uint64_t result = 0;
  *(void *)*a3 = v15;
  return result;
}

void WFCNPostalAddressFromCLPlacemark(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  uint64_t v3 = [v1 fullThoroughfare];
  uint64_t v38 = 0;
  unsigned int v39 = &v38;
  uint64_t v40 = 0x2020000000;
  uint64_t v4 = (void *)getCNPostalAddressStreetKeySymbolLoc_ptr;
  uint64_t v41 = getCNPostalAddressStreetKeySymbolLoc_ptr;
  if (!getCNPostalAddressStreetKeySymbolLoc_ptr)
  {
    uint64_t v33 = MEMORY[0x263EF8330];
    uint64_t v34 = 3221225472;
    uint64_t v35 = __getCNPostalAddressStreetKeySymbolLoc_block_invoke;
    int v36 = &unk_26428AC60;
    uint64_t v37 = &v38;
    uint64_t v5 = ContactsLibrary_14959();
    v39[3] = (uint64_t)dlsym(v5, "CNPostalAddressStreetKey");
    getCNPostalAddressStreetKeySymbolLoc_ptr = *(void *)(v37[1] + 24);
    uint64_t v4 = (void *)v39[3];
  }
  _Block_object_dispose(&v38, 8);
  if (!v4)
  {
    int v31 = [MEMORY[0x263F08690] currentHandler];
    BOOL v32 = [NSString stringWithUTF8String:"NSString * _Nonnull getCNPostalAddressStreetKey(void)"];
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, @"CLPlacemark+WFCompatibility.m", 20, @"%s", dlerror(), v33, v34, v35, v36);
LABEL_38:

    __break(1u);
    return;
  }
  [v2 setObject:v3 forKeyedSubscript:*v4];

  unint64_t v6 = [v1 subLocality];
  uint64_t v38 = 0;
  unsigned int v39 = &v38;
  uint64_t v40 = 0x2020000000;
  unsigned int v7 = (void *)getCNPostalAddressSubLocalityKeySymbolLoc_ptr;
  uint64_t v41 = getCNPostalAddressSubLocalityKeySymbolLoc_ptr;
  if (!getCNPostalAddressSubLocalityKeySymbolLoc_ptr)
  {
    uint64_t v33 = MEMORY[0x263EF8330];
    uint64_t v34 = 3221225472;
    uint64_t v35 = __getCNPostalAddressSubLocalityKeySymbolLoc_block_invoke;
    int v36 = &unk_26428AC60;
    uint64_t v37 = &v38;
    uint64_t v8 = ContactsLibrary_14959();
    v39[3] = (uint64_t)dlsym(v8, "CNPostalAddressSubLocalityKey");
    getCNPostalAddressSubLocalityKeySymbolLoc_ptr = *(void *)(v37[1] + 24);
    unsigned int v7 = (void *)v39[3];
  }
  _Block_object_dispose(&v38, 8);
  if (!v7)
  {
    int v31 = [MEMORY[0x263F08690] currentHandler];
    BOOL v32 = [NSString stringWithUTF8String:"NSString * _Nonnull getCNPostalAddressSubLocalityKey(void)"];
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, @"CLPlacemark+WFCompatibility.m", 21, @"%s", dlerror(), v33, v34, v35, v36);
    goto LABEL_38;
  }
  [v2 setObject:v6 forKeyedSubscript:*v7];

  unint64_t v9 = [v1 locality];
  uint64_t v38 = 0;
  unsigned int v39 = &v38;
  uint64_t v40 = 0x2020000000;
  unint64_t v10 = (void *)getCNPostalAddressCityKeySymbolLoc_ptr;
  uint64_t v41 = getCNPostalAddressCityKeySymbolLoc_ptr;
  if (!getCNPostalAddressCityKeySymbolLoc_ptr)
  {
    uint64_t v33 = MEMORY[0x263EF8330];
    uint64_t v34 = 3221225472;
    uint64_t v35 = __getCNPostalAddressCityKeySymbolLoc_block_invoke;
    int v36 = &unk_26428AC60;
    uint64_t v37 = &v38;
    size_t v11 = ContactsLibrary_14959();
    v39[3] = (uint64_t)dlsym(v11, "CNPostalAddressCityKey");
    getCNPostalAddressCityKeySymbolLoc_ptr = *(void *)(v37[1] + 24);
    unint64_t v10 = (void *)v39[3];
  }
  _Block_object_dispose(&v38, 8);
  if (!v10)
  {
    int v31 = [MEMORY[0x263F08690] currentHandler];
    BOOL v32 = [NSString stringWithUTF8String:"NSString * _Nonnull getCNPostalAddressCityKey(void)"];
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, @"CLPlacemark+WFCompatibility.m", 22, @"%s", dlerror(), v33, v34, v35, v36);
    goto LABEL_38;
  }
  [v2 setObject:v9 forKeyedSubscript:*v10];

  size_t v12 = [v1 subAdministrativeArea];
  uint64_t v38 = 0;
  unsigned int v39 = &v38;
  uint64_t v40 = 0x2020000000;
  size_t v13 = (void *)getCNPostalAddressSubAdministrativeAreaKeySymbolLoc_ptr;
  uint64_t v41 = getCNPostalAddressSubAdministrativeAreaKeySymbolLoc_ptr;
  if (!getCNPostalAddressSubAdministrativeAreaKeySymbolLoc_ptr)
  {
    uint64_t v33 = MEMORY[0x263EF8330];
    uint64_t v34 = 3221225472;
    uint64_t v35 = __getCNPostalAddressSubAdministrativeAreaKeySymbolLoc_block_invoke;
    int v36 = &unk_26428AC60;
    uint64_t v37 = &v38;
    unsigned int v14 = ContactsLibrary_14959();
    v39[3] = (uint64_t)dlsym(v14, "CNPostalAddressSubAdministrativeAreaKey");
    getCNPostalAddressSubAdministrativeAreaKeySymbolLoc_ptr = *(void *)(v37[1] + 24);
    size_t v13 = (void *)v39[3];
  }
  _Block_object_dispose(&v38, 8);
  if (!v13)
  {
    int v31 = [MEMORY[0x263F08690] currentHandler];
    BOOL v32 = [NSString stringWithUTF8String:"NSString * _Nonnull getCNPostalAddressSubAdministrativeAreaKey(void)"];
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, @"CLPlacemark+WFCompatibility.m", 23, @"%s", dlerror(), v33, v34, v35, v36);
    goto LABEL_38;
  }
  [v2 setObject:v12 forKeyedSubscript:*v13];

  uint64_t v15 = [v1 administrativeArea];
  uint64_t v38 = 0;
  unsigned int v39 = &v38;
  uint64_t v40 = 0x2020000000;
  unint64_t v16 = (void *)getCNPostalAddressStateKeySymbolLoc_ptr;
  uint64_t v41 = getCNPostalAddressStateKeySymbolLoc_ptr;
  if (!getCNPostalAddressStateKeySymbolLoc_ptr)
  {
    uint64_t v33 = MEMORY[0x263EF8330];
    uint64_t v34 = 3221225472;
    uint64_t v35 = __getCNPostalAddressStateKeySymbolLoc_block_invoke;
    int v36 = &unk_26428AC60;
    uint64_t v37 = &v38;
    unsigned int v17 = ContactsLibrary_14959();
    v39[3] = (uint64_t)dlsym(v17, "CNPostalAddressStateKey");
    getCNPostalAddressStateKeySymbolLoc_ptr = *(void *)(v37[1] + 24);
    unint64_t v16 = (void *)v39[3];
  }
  _Block_object_dispose(&v38, 8);
  if (!v16)
  {
    int v31 = [MEMORY[0x263F08690] currentHandler];
    BOOL v32 = [NSString stringWithUTF8String:"NSString * _Nonnull getCNPostalAddressStateKey(void)"];
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, @"CLPlacemark+WFCompatibility.m", 24, @"%s", dlerror(), v33, v34, v35, v36);
    goto LABEL_38;
  }
  [v2 setObject:v15 forKeyedSubscript:*v16];

  uint64_t v18 = [v1 postalCode];
  uint64_t v38 = 0;
  unsigned int v39 = &v38;
  uint64_t v40 = 0x2020000000;
  __int16 v19 = (void *)getCNPostalAddressPostalCodeKeySymbolLoc_ptr;
  uint64_t v41 = getCNPostalAddressPostalCodeKeySymbolLoc_ptr;
  if (!getCNPostalAddressPostalCodeKeySymbolLoc_ptr)
  {
    uint64_t v33 = MEMORY[0x263EF8330];
    uint64_t v34 = 3221225472;
    uint64_t v35 = __getCNPostalAddressPostalCodeKeySymbolLoc_block_invoke;
    int v36 = &unk_26428AC60;
    uint64_t v37 = &v38;
    int v20 = ContactsLibrary_14959();
    v39[3] = (uint64_t)dlsym(v20, "CNPostalAddressPostalCodeKey");
    getCNPostalAddressPostalCodeKeySymbolLoc_ptr = *(void *)(v37[1] + 24);
    __int16 v19 = (void *)v39[3];
  }
  _Block_object_dispose(&v38, 8);
  if (!v19)
  {
    int v31 = [MEMORY[0x263F08690] currentHandler];
    BOOL v32 = [NSString stringWithUTF8String:"NSString * _Nonnull getCNPostalAddressPostalCodeKey(void)"];
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, @"CLPlacemark+WFCompatibility.m", 25, @"%s", dlerror(), v33, v34, v35, v36);
    goto LABEL_38;
  }
  [v2 setObject:v18 forKeyedSubscript:*v19];

  unint64_t v21 = [v1 country];
  uint64_t v38 = 0;
  unsigned int v39 = &v38;
  uint64_t v40 = 0x2020000000;
  uint64_t v22 = (void *)getCNPostalAddressCountryKeySymbolLoc_ptr;
  uint64_t v41 = getCNPostalAddressCountryKeySymbolLoc_ptr;
  if (!getCNPostalAddressCountryKeySymbolLoc_ptr)
  {
    uint64_t v33 = MEMORY[0x263EF8330];
    uint64_t v34 = 3221225472;
    uint64_t v35 = __getCNPostalAddressCountryKeySymbolLoc_block_invoke;
    int v36 = &unk_26428AC60;
    uint64_t v37 = &v38;
    unint64_t v23 = ContactsLibrary_14959();
    v39[3] = (uint64_t)dlsym(v23, "CNPostalAddressCountryKey");
    getCNPostalAddressCountryKeySymbolLoc_ptr = *(void *)(v37[1] + 24);
    uint64_t v22 = (void *)v39[3];
  }
  _Block_object_dispose(&v38, 8);
  if (!v22)
  {
    int v31 = [MEMORY[0x263F08690] currentHandler];
    BOOL v32 = [NSString stringWithUTF8String:"NSString * _Nonnull getCNPostalAddressCountryKey(void)"];
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, @"CLPlacemark+WFCompatibility.m", 26, @"%s", dlerror(), v33, v34, v35, v36);
    goto LABEL_38;
  }
  [v2 setObject:v21 forKeyedSubscript:*v22];

  unint64_t v24 = [v1 ISOcountryCode];
  uint64_t v38 = 0;
  unsigned int v39 = &v38;
  uint64_t v40 = 0x2020000000;
  uint64_t v25 = (void *)getCNPostalAddressISOCountryCodeKeySymbolLoc_ptr;
  uint64_t v41 = getCNPostalAddressISOCountryCodeKeySymbolLoc_ptr;
  if (!getCNPostalAddressISOCountryCodeKeySymbolLoc_ptr)
  {
    uint64_t v33 = MEMORY[0x263EF8330];
    uint64_t v34 = 3221225472;
    uint64_t v35 = __getCNPostalAddressISOCountryCodeKeySymbolLoc_block_invoke;
    int v36 = &unk_26428AC60;
    uint64_t v37 = &v38;
    unint64_t v26 = ContactsLibrary_14959();
    v39[3] = (uint64_t)dlsym(v26, "CNPostalAddressISOCountryCodeKey");
    getCNPostalAddressISOCountryCodeKeySymbolLoc_ptr = *(void *)(v37[1] + 24);
    uint64_t v25 = (void *)v39[3];
  }
  _Block_object_dispose(&v38, 8);
  if (!v25)
  {
    int v31 = [MEMORY[0x263F08690] currentHandler];
    BOOL v32 = [NSString stringWithUTF8String:"NSString * _Nonnull getCNPostalAddressISOCountryCodeKey(void)"];
    objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, @"CLPlacemark+WFCompatibility.m", 27, @"%s", dlerror(), v33, v34, v35, v36);
    goto LABEL_38;
  }
  [v2 setObject:v24 forKeyedSubscript:*v25];

  uint64_t v38 = 0;
  unsigned int v39 = &v38;
  uint64_t v40 = 0x2050000000;
  uint64_t v27 = (void *)getCNPostalAddressClass_softClass;
  uint64_t v41 = getCNPostalAddressClass_softClass;
  if (!getCNPostalAddressClass_softClass)
  {
    uint64_t v33 = MEMORY[0x263EF8330];
    uint64_t v34 = 3221225472;
    uint64_t v35 = __getCNPostalAddressClass_block_invoke;
    int v36 = &unk_26428AC60;
    uint64_t v37 = &v38;
    __getCNPostalAddressClass_block_invoke((uint64_t)&v33);
    uint64_t v27 = (void *)v39[3];
  }
  id v28 = v27;
  _Block_object_dispose(&v38, 8);
  unint64_t v29 = [v28 postalAddressWithDictionaryRepresentation:v2];

  id v30 = v29;
}

void sub_2165B0998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCNPostalAddressStreetKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_14959();
  uint64_t result = dlsym(v2, "CNPostalAddressStreetKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNPostalAddressStreetKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *ContactsLibrary_14959()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary_14978)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __ContactsLibraryCore_block_invoke_14979;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264288A10;
    uint64_t v6 = 0;
    ContactsLibraryCore_frameworkLibrary_14978 = _sl_dlopen();
  }
  uint64_t v0 = (void *)ContactsLibraryCore_frameworkLibrary_14978;
  if (!ContactsLibraryCore_frameworkLibrary_14978)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void * _Nonnull ContactsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"CLPlacemark+WFCompatibility.m", 18, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getCNPostalAddressSubLocalityKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_14959();
  uint64_t result = dlsym(v2, "CNPostalAddressSubLocalityKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNPostalAddressSubLocalityKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNPostalAddressCityKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_14959();
  uint64_t result = dlsym(v2, "CNPostalAddressCityKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNPostalAddressCityKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNPostalAddressSubAdministrativeAreaKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_14959();
  uint64_t result = dlsym(v2, "CNPostalAddressSubAdministrativeAreaKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNPostalAddressSubAdministrativeAreaKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNPostalAddressStateKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_14959();
  uint64_t result = dlsym(v2, "CNPostalAddressStateKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNPostalAddressStateKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNPostalAddressPostalCodeKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_14959();
  uint64_t result = dlsym(v2, "CNPostalAddressPostalCodeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNPostalAddressPostalCodeKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNPostalAddressCountryKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_14959();
  uint64_t result = dlsym(v2, "CNPostalAddressCountryKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNPostalAddressCountryKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNPostalAddressISOCountryCodeKeySymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = ContactsLibrary_14959();
  uint64_t result = dlsym(v2, "CNPostalAddressISOCountryCodeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNPostalAddressISOCountryCodeKeySymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getCNPostalAddressClass_block_invoke(uint64_t a1)
{
  ContactsLibrary_14959();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CNPostalAddress");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCNPostalAddressClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class  _Nonnull getCNPostalAddressClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"CLPlacemark+WFCompatibility.m", 19, @"Unable to find class %s", "CNPostalAddress");

    __break(1u);
  }
}

uint64_t __ContactsLibraryCore_block_invoke_14979()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary_14978 = result;
  return result;
}

uint64_t file_mdump(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v2 = (FILE **)MEMORY[0x263EF8348];
  fprintf((FILE *)*MEMORY[0x263EF8348], "%u: %.*s %u", *(_DWORD *)(a1 + 20), (*(_WORD *)a1 & 7) + 1, ">>>>>>>>", *(_DWORD *)(a1 + 12));
  char v3 = *(unsigned char *)(a1 + 2);
  if (v3)
  {
    unint64_t v4 = *(unsigned __int8 *)(a1 + 7);
    if (v4 > 0x32) {
      long long v5 = "*bad in_type*";
    }
    else {
      long long v5 = (const char *)file_names[v4];
    }
    fprintf(*v2, "(%s,", v5);
    char v6 = *(unsigned char *)(a1 + 8);
    if ((v6 & 0x40) != 0)
    {
      fputc(126, *v2);
      char v6 = *(unsigned char *)(a1 + 8);
    }
    fprintf(*v2, "%c%u),", file_mdump_optyp[v6 & 7], *(_DWORD *)(a1 + 16));
    char v3 = *(unsigned char *)(a1 + 2);
  }
  if ((v3 & 8) != 0) {
    uint64_t v7 = "u";
  }
  else {
    uint64_t v7 = "";
  }
  unint64_t v8 = *(unsigned __int8 *)(a1 + 6);
  if (v8 > 0x32) {
    unint64_t v9 = "*bad type";
  }
  else {
    unint64_t v9 = (const char *)file_names[v8];
  }
  fprintf(*v2, " %s%s", v7, v9);
  if ((*(unsigned char *)(a1 + 9) & 0x40) != 0) {
    fputc(126, *v2);
  }
  unsigned int v10 = *(unsigned __int8 *)(a1 + 6);
  if (v10 <= 0x2E && ((1 << v10) & 0x6200001E2020) != 0)
  {
    if (!*(_DWORD *)(a1 + 28)) {
      goto LABEL_33;
    }
    fputc(47, *v2);
    int v11 = *(_DWORD *)(a1 + 28);
    if (v11)
    {
      fputc(87, *v2);
      int v11 = *(_DWORD *)(a1 + 28);
      if ((v11 & 2) == 0)
      {
LABEL_21:
        if ((v11 & 4) == 0) {
          goto LABEL_22;
        }
        goto LABEL_40;
      }
    }
    else if ((v11 & 2) == 0)
    {
      goto LABEL_21;
    }
    fputc(119, *v2);
    int v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 4) == 0)
    {
LABEL_22:
      if ((v11 & 8) == 0) {
        goto LABEL_23;
      }
      goto LABEL_41;
    }
LABEL_40:
    fputc(99, *v2);
    int v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 8) == 0)
    {
LABEL_23:
      if ((v11 & 0x10) == 0) {
        goto LABEL_24;
      }
      goto LABEL_42;
    }
LABEL_41:
    fputc(67, *v2);
    int v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x10) == 0)
    {
LABEL_24:
      if ((v11 & 0x20) == 0) {
        goto LABEL_25;
      }
      goto LABEL_43;
    }
LABEL_42:
    fputc(115, *v2);
    int v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x20) == 0)
    {
LABEL_25:
      if ((v11 & 0x40) == 0) {
        goto LABEL_26;
      }
      goto LABEL_44;
    }
LABEL_43:
    fputc(116, *v2);
    int v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x40) == 0)
    {
LABEL_26:
      if ((v11 & 0x80) == 0) {
        goto LABEL_27;
      }
      goto LABEL_45;
    }
LABEL_44:
    fputc(98, *v2);
    int v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x80) == 0)
    {
LABEL_27:
      if ((v11 & 0x100) == 0) {
        goto LABEL_28;
      }
      goto LABEL_46;
    }
LABEL_45:
    fputc(66, *v2);
    int v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x100) == 0)
    {
LABEL_28:
      if ((v11 & 0x200) == 0) {
        goto LABEL_29;
      }
      goto LABEL_47;
    }
LABEL_46:
    fputc(72, *v2);
    int v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x200) == 0)
    {
LABEL_29:
      if ((v11 & 0x400) == 0) {
        goto LABEL_30;
      }
      goto LABEL_48;
    }
LABEL_47:
    fputc(104, *v2);
    int v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x400) == 0)
    {
LABEL_30:
      if ((v11 & 0x800) == 0) {
        goto LABEL_31;
      }
      goto LABEL_49;
    }
LABEL_48:
    fputc(76, *v2);
    int v11 = *(_DWORD *)(a1 + 28);
    if ((v11 & 0x800) == 0)
    {
LABEL_31:
      if ((v11 & 0x1000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
LABEL_49:
    fputc(108, *v2);
    if ((*(_DWORD *)(a1 + 28) & 0x1000) == 0)
    {
LABEL_33:
      if (*(_DWORD *)(a1 + 24)) {
        fprintf(*v2, "/%u");
      }
      goto LABEL_35;
    }
LABEL_32:
    fputc(74, *v2);
    goto LABEL_33;
  }
  fputc(file_mdump_optyp[*(unsigned char *)(a1 + 9) & 7], *v2);
  if (*(void *)(a1 + 24)) {
    fprintf(*v2, "%.8llx");
  }
LABEL_35:
  fprintf(*v2, ",%c", *(unsigned __int8 *)(a1 + 4));
  if (*(unsigned char *)(a1 + 4) != 120)
  {
    switch(*(unsigned char *)(a1 + 6))
    {
      case 1:
      case 2:
      case 4:
      case 7:
      case 8:
      case 0xA:
      case 0xB:
      case 0x17:
      case 0x29:
        fprintf(*v2, "%d");
        return fprintf(*v2, ",\"%s\"]\n", (const char *)(a1 + 160));
      case 3:
        return fprintf(*v2, ",\"%s\"]\n", (const char *)(a1 + 160));
      case 5:
      case 0xD:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
        file_showstr(*v2, (unsigned char *)(a1 + 32), *(unsigned __int8 *)(a1 + 5));
        return fprintf(*v2, ",\"%s\"]\n", (const char *)(a1 + 160));
      case 6:
      case 9:
      case 0xC:
      case 0x15:
        size_t v12 = *v2;
        uint64_t v13 = *(unsigned int *)(a1 + 32);
        goto LABEL_58;
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x16:
        size_t v12 = *v2;
        uint64_t v13 = *(unsigned int *)(a1 + 32);
        goto LABEL_60;
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x32:
        fprintf(*v2, "%lld");
        return fprintf(*v2, ",\"%s\"]\n", (const char *)(a1 + 160));
      case 0x1B:
      case 0x1C:
      case 0x1D:
        size_t v12 = *v2;
        uint64_t v13 = *(void *)(a1 + 32);
LABEL_58:
        char v14 = 0;
        goto LABEL_65;
      case 0x1E:
      case 0x1F:
      case 0x20:
        size_t v12 = *v2;
        uint64_t v13 = *(void *)(a1 + 32);
LABEL_60:
        char v14 = 1;
        goto LABEL_65;
      case 0x21:
      case 0x22:
      case 0x23:
        uint64_t v15 = *v2;
        goto LABEL_63;
      case 0x24:
      case 0x25:
      case 0x26:
        uint64_t v15 = *v2;
LABEL_63:
        fprintf(v15, "%G");
        break;
      case 0x2A:
      case 0x2B:
      case 0x2C:
        size_t v12 = *v2;
        uint64_t v13 = *(void *)(a1 + 32);
        char v14 = 2;
LABEL_65:
        file_fmttime(v17, 0x100uLL, v13, v14);
        fprintf(v12, "%s,");
        break;
      case 0x2D:
      case 0x2E:
      case 0x30:
        fprintf(*v2, "'%s'");
        break;
      case 0x31:
        file_print_guid(v17, 0x100uLL, a1 + 32);
        fputs(v17, *v2);
        break;
      default:
        fprintf(*v2, "*bad type %d*");
        break;
    }
  }
  return fprintf(*v2, ",\"%s\"]\n", (const char *)(a1 + 160));
}

char *file_fmttime(char *a1, size_t a2, uint64_t a3, char a4)
{
  memset(&v12, 0, sizeof(v12));
  if ((a4 & 2) != 0)
  {
    v11[0] = 0;
    v11[1] = 0;
    cdf_timestamp_to_timespec(v11, a3);
    a3 = v11[0];
  }
  v11[0] = a3;
  if (a4)
  {
    uint64_t v7 = localtime_r(v11, &v12);
    if (!v7)
    {
LABEL_9:
      strlcpy(a1, "*Invalid time*", a2);
      return a1;
    }
  }
  else
  {
    uint64_t v7 = gmtime_r(v11, &v12);
    if (!v7) {
      goto LABEL_9;
    }
  }
  unint64_t v8 = asctime_r(v7, a1);
  if (!v8) {
    goto LABEL_9;
  }
  unint64_t v9 = v8;
  v8[strcspn(v8, "\n")] = 0;
  return v9;
}

uint64_t file_magwarn(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  fflush((FILE *)*MEMORY[0x263EF8358]);
  int v11 = (FILE **)MEMORY[0x263EF8348];
  if (*(void *)(a1 + 80)) {
    fprintf((FILE *)*MEMORY[0x263EF8348], "%s, %lu: ", *(const char **)(a1 + 80), *(void *)(a1 + 88));
  }
  fwrite("Warning: ", 9uLL, 1uLL, *v11);
  vfprintf(*v11, a2, &a9);
  return fputc(10, *v11);
}

void sub_2165B3494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getFPItemManagerClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getFPItemManagerClass_softClass;
  uint64_t v7 = getFPItemManagerClass_softClass;
  if (!getFPItemManagerClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getFPItemManagerClass_block_invoke;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getFPItemManagerClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165B3584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15282(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15283(uint64_t a1)
{
}

void sub_2165B38A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNSFileProviderRootContainerItemIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = FileProviderLibrary();
  uint64_t result = dlsym(v2, "NSFileProviderRootContainerItemIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSFileProviderRootContainerItemIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *FileProviderLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!FileProviderLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __FileProviderLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264288A88;
    uint64_t v6 = 0;
    FileProviderLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)FileProviderLibraryCore_frameworkLibrary;
  if (!FileProviderLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    char v3 = [NSString stringWithUTF8String:"void *FileProviderLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"NSURL+WFFilePathDisplay.m", 19, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __FileProviderLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  FileProviderLibraryCore_frameworkLibrary = result;
  return result;
}

void __getFPItemManagerClass_block_invoke(uint64_t a1)
{
  FileProviderLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FPItemManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getFPItemManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    char v3 = [NSString stringWithUTF8String:"Class getFPItemManagerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"NSURL+WFFilePathDisplay.m", 20, @"Unable to find class %s", "FPItemManager");

    __break(1u);
  }
}

id WFContentPropertyGetPossibleValuesSynchronouslyWithSemaphore(void *a1)
{
  id v1 = a1;
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x3032000000;
  uint64_t v13 = __Block_byref_object_copy__15631;
  char v14 = __Block_byref_object_dispose__15632;
  id v15 = 0;
  if ([v1 isAsynchronous])
  {
    dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 3221225472;
    void v7[2] = __WFContentPropertyGetPossibleValuesSynchronouslyWithSemaphore_block_invoke;
    v7[3] = &unk_264288B68;
    unint64_t v9 = &v10;
    char v3 = v2;
    unint64_t v8 = v3;
    [v1 getValuesWithCompletionBlock:v7];
    dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = __WFContentPropertyGetPossibleValuesSynchronouslyWithSemaphore_block_invoke_2;
    v6[3] = &unk_264288B90;
    v6[4] = &v10;
    [v1 getValuesWithCompletionBlock:v6];
  }
  id v4 = (id)v11[5];
  _Block_object_dispose(&v10, 8);

  return v4;
}

void sub_2165B69E4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15631(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15632(uint64_t a1)
{
}

void __WFContentPropertyGetPossibleValuesSynchronouslyWithSemaphore_block_invoke(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void __WFContentPropertyGetPossibleValuesSynchronouslyWithSemaphore_block_invoke_2(uint64_t a1, void *a2)
{
}

uint64_t WFContentObjectsHaveProperties(void *a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = a3;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v8 = v5;
  uint64_t v21 = [v8 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v21)
  {
    uint64_t v9 = *(void *)v28;
    id v22 = v6;
    uint64_t v20 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        if (*(void *)v28 != v9) {
          objc_enumerationMutation(v8);
        }
        uint64_t v11 = *(void *)(*((void *)&v27 + 1) + 8 * i);
        long long v23 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        id v12 = v6;
        uint64_t v13 = [v12 countByEnumeratingWithState:&v23 objects:v31 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)v24;
          while (2)
          {
            for (uint64_t j = 0; j != v14; ++j)
            {
              if (*(void *)v24 != v15) {
                objc_enumerationMutation(v12);
              }
              unsigned int v17 = v7[2](v7, v11, *(void *)(*((void *)&v23 + 1) + 8 * j));

              if (!v17)
              {

                uint64_t v18 = 0;
                id v6 = v22;
                goto LABEL_19;
              }
            }
            uint64_t v14 = [v12 countByEnumeratingWithState:&v23 objects:v31 count:16];
            if (v14) {
              continue;
            }
            break;
          }
        }

        id v6 = v22;
        uint64_t v9 = v20;
      }
      uint64_t v18 = 1;
      uint64_t v21 = [v8 countByEnumeratingWithState:&v27 objects:v32 count:16];
    }
    while (v21);
  }
  else
  {
    uint64_t v18 = 1;
  }
LABEL_19:

  return v18;
}

id initACAccountIdentifierKey()
{
  if (AccountsLibrary_sOnce != -1) {
    dispatch_once(&AccountsLibrary_sOnce, &__block_literal_global_93);
  }
  uint64_t v0 = (id *)dlsym((void *)AccountsLibrary_sLib, "ACAccountIdentifierKey");
  if (!v0) {
    __assert_rtn("initACAccountIdentifierKey", "WFManagedConfigurationProfile.m", 31, "constant");
  }
  objc_storeStrong((id *)&constantACAccountIdentifierKey, *v0);
  getACAccountIdentifierKey[0] = (uint64_t (*)())ACAccountIdentifierKeyFunction;
  uint64_t v1 = (void *)constantACAccountIdentifierKey;
  return v1;
}

id ACAccountIdentifierKeyFunction()
{
  return (id)constantACAccountIdentifierKey;
}

void *__AccountsLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/Frameworks/Accounts.framework/Accounts", 2);
  AccountsLibrary_sLib = (uint64_t)result;
  return result;
}

void sub_2165B72E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__15690(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__15691(uint64_t a1)
{
}

void sub_2165B74A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id initACDAccountStoreDidChangeNotification()
{
  if (AccountsLibrary_sOnce != -1) {
    dispatch_once(&AccountsLibrary_sOnce, &__block_literal_global_93);
  }
  uint64_t v0 = (id *)dlsym((void *)AccountsLibrary_sLib, "ACDAccountStoreDidChangeNotification");
  if (!v0) {
    __assert_rtn("initACDAccountStoreDidChangeNotification", "WFManagedConfigurationProfile.m", 30, "constant");
  }
  objc_storeStrong((id *)&constantACDAccountStoreDidChangeNotification, *v0);
  getACDAccountStoreDidChangeNotification[0] = (uint64_t (*)())ACDAccountStoreDidChangeNotificationFunction;
  uint64_t v1 = (void *)constantACDAccountStoreDidChangeNotification;
  return v1;
}

id ACDAccountStoreDidChangeNotificationFunction()
{
  return (id)constantACDAccountStoreDidChangeNotification;
}

id initMCManagedAppsChangedNotification()
{
  if (ManagedConfigurationLibrary_sOnce != -1) {
    dispatch_once(&ManagedConfigurationLibrary_sOnce, &__block_literal_global_89);
  }
  uint64_t v0 = (id *)dlsym((void *)ManagedConfigurationLibrary_sLib, "MCManagedAppsChangedNotification");
  if (!v0) {
    __assert_rtn("initMCManagedAppsChangedNotification", "WFManagedConfigurationProfile.m", 23, "constant");
  }
  objc_storeStrong((id *)&constantMCManagedAppsChangedNotification, *v0);
  getMCManagedAppsChangedNotification = (uint64_t (*)())MCManagedAppsChangedNotificationFunction;
  uint64_t v1 = (void *)constantMCManagedAppsChangedNotification;
  return v1;
}

id MCManagedAppsChangedNotificationFunction()
{
  return (id)constantMCManagedAppsChangedNotification;
}

void *__ManagedConfigurationLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration", 2);
  ManagedConfigurationLibrary_sLib = (uint64_t)result;
  return result;
}

Class initACAccountStore()
{
  if (AccountsLibrary_sOnce != -1) {
    dispatch_once(&AccountsLibrary_sOnce, &__block_literal_global_93);
  }
  Class result = objc_getClass("ACAccountStore");
  classACAccountStore = (uint64_t)result;
  getACAccountStoreClass = (uint64_t (*)())ACAccountStoreFunction;
  return result;
}

id ACAccountStoreFunction()
{
  return (id)classACAccountStore;
}

Class initMCProfileConnection()
{
  if (ManagedConfigurationLibrary_sOnce != -1) {
    dispatch_once(&ManagedConfigurationLibrary_sOnce, &__block_literal_global_89);
  }
  Class result = objc_getClass("MCProfileConnection");
  classMCProfileConnection = (uint64_t)result;
  getMCProfileConnectionClass = (uint64_t (*)())MCProfileConnectionFunction;
  return result;
}

id MCProfileConnectionFunction()
{
  return (id)classMCProfileConnection;
}

uint64_t initMCIsAppAccountBasedSourceForOpenIn(void *a1)
{
  id v1 = a1;
  if (ManagedConfigurationLibrary_sOnce != -1) {
    dispatch_once(&ManagedConfigurationLibrary_sOnce, &__block_literal_global_89);
  }
  dispatch_semaphore_t v2 = (uint64_t (*)())dlsym((void *)ManagedConfigurationLibrary_sLib, "MCIsAppAccountBasedSourceForOpenIn");
  softLinkMCIsAppAccountBasedSourceForOpenIn = v2;
  if (v2) {
    uint64_t v3 = ((uint64_t (*)(id))v2)(v1);
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_2165B8094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2165B82D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id WFSupportedArchiveFormats()
{
  v2[8] = *MEMORY[0x263EF8340];
  v2[0] = @"zip";
  v2[1] = @"tar.gz";
  v2[2] = @"tar.bz2";
  v2[3] = @"tar.xz";
  v2[4] = @"tar";
  v2[5] = @"gz";
  v2[6] = @"cpio";
  v2[7] = @"iso";
  uint64_t v0 = [MEMORY[0x263EFF8C0] arrayWithObjects:v2 count:8];
  return v0;
}

id WFArchiveFormatFileExtension(void *a1)
{
  id v1 = a1;
  return v1;
}

uint64_t WFArchiveFormatSupportsMultipleFiles(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"gz"]) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = [v1 isEqualToString:@"xz"] ^ 1;
  }

  return v2;
}

uint64_t WFCoercionPathContainsPath(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t matched = [v3 count];
  if (matched)
  {
    if ([v4 count])
    {
      uint64_t v6 = 0;
      uint64_t v7 = matched - 1;
      do
      {
        uint64_t matched = WFCoercionPathFollowingNodesMatchInnerToEnd(v3, v4, v6, 0);
        if (matched) {
          break;
        }
      }
      while (v7 != v6++);
    }
    else
    {
      uint64_t matched = 0;
    }
  }

  return matched;
}

uint64_t WFCoercionPathFollowingNodesMatchInnerToEnd(void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  id v7 = a1;
  id v8 = a2;
  if ([v8 count] <= a4)
  {
    uint64_t matched = 1;
  }
  else if ([v7 count] != a3 {
         && ([v7 objectAtIndex:a3],
  }
             uint64_t v9 = objc_opt_class(),
             [v8 objectAtIndex:a4],
             v9 == objc_opt_class()))
  {
    uint64_t matched = WFCoercionPathFollowingNodesMatchInnerToEnd(v7, v8, a3 + 1, a4 + 1);
  }
  else
  {
    uint64_t matched = 0;
  }

  return matched;
}

void sub_2165BB878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

Class __getWKWebViewClass_block_invoke_16468(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!WebKitLibraryCore_frameworkLibrary_16471)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __WebKitLibraryCore_block_invoke_16472;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264288DD8;
    uint64_t v8 = 0;
    WebKitLibraryCore_frameworkLibrary_16471 = _sl_dlopen();
  }
  if (!WebKitLibraryCore_frameworkLibrary_16471)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *WebKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFPDFContentItem.m", 29, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("WKWebView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getWKWebViewClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFPDFContentItem.m", 30, @"Unable to find class %s", "WKWebView");

LABEL_10:
    __break(1u);
  }
  getWKWebViewClass_softClass_16467 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __WebKitLibraryCore_block_invoke_16472()
{
  uint64_t result = _sl_dlopen();
  WebKitLibraryCore_frameworkLibrary_16471 = result;
  return result;
}

Class initUIViewPrintFormatter_16489()
{
  if (UIKitLibrary_sOnce_16490 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_16490, &__block_literal_global_16491);
  }
  Class result = objc_getClass("UIViewPrintFormatter");
  classUIViewPrintFormatter_16493 = (uint64_t)result;
  getUIViewPrintFormatterClass_16466 = (uint64_t (*)())UIViewPrintFormatterFunction_16495;
  return result;
}

id UIViewPrintFormatterFunction_16495()
{
  return (id)classUIViewPrintFormatter_16493;
}

void *__UIKitLibrary_block_invoke_16498()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib_16500 = (uint64_t)result;
  return result;
}

Class initUIPrintFormatter_16502()
{
  if (UIKitLibrary_sOnce_16490 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_16490, &__block_literal_global_16491);
  }
  Class result = objc_getClass("UIPrintFormatter");
  classUIPrintFormatter_16504 = (uint64_t)result;
  getUIPrintFormatterClass_16465 = (uint64_t (*)())UIPrintFormatterFunction_16506;
  return result;
}

id UIPrintFormatterFunction_16506()
{
  return (id)classUIPrintFormatter_16504;
}

Class initPDFDocument()
{
  if (PDFKitLibrary_sOnce != -1) {
    dispatch_once(&PDFKitLibrary_sOnce, &__block_literal_global_233);
  }
  Class result = objc_getClass("PDFDocument");
  classPDFDocument = (uint64_t)result;
  getPDFDocumentClass = (uint64_t (*)())PDFDocumentFunction;
  return result;
}

id PDFDocumentFunction()
{
  return (id)classPDFDocument;
}

void *__PDFKitLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/PDFKit.framework/PDFKit", 2);
  PDFKitLibrary_sLib = (uint64_t)result;
  return result;
}

id WFSerializeNSMeasurement(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x263EFF9A0];
  id v2 = a1;
  id v3 = objc_alloc_init(v1);
  id v4 = NSNumber;
  [v2 doubleValue];
  id v5 = objc_msgSend(v4, "numberWithDouble:");
  [v3 setObject:v5 forKey:@"link.contentkit.value"];

  uint64_t v6 = [v2 unit];
  long long v7 = [v6 symbol];
  [v3 setObject:v7 forKey:@"link.contentkit.unit"];

  uint64_t v8 = objc_msgSend(v2, "wf_preferredValueRounding");

  objc_msgSend(v3, "if_setObjectIfNonNil:forKey:", v8, @"link.contentkit.preferredValueRounding");
  return v3;
}

id WFDeserializeNSMeasurement(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = [v1 objectForKeyedSubscript:@"link.contentkit.value"];
    if (v3)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v4 = v3;
      }
      else {
        id v4 = 0;
      }
    }
    else
    {
      id v4 = 0;
    }
    id v6 = v4;

    long long v7 = [v2 objectForKeyedSubscript:@"link.contentkit.unit"];
    if (v7)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    id v9 = v8;

    uint64_t v10 = [v2 objectForKeyedSubscript:@"link.contentkit.preferredValueRounding"];
    if (v10)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    id v12 = v11;

    id v5 = 0;
    if (v6 && v9)
    {
      uint64_t v13 = [MEMORY[0x263F85370] unitFromString:v9];
      if (v13)
      {
        id v14 = objc_alloc(MEMORY[0x263F08980]);
        [v6 doubleValue];
        id v5 = objc_msgSend(v14, "initWithDoubleValue:unit:", v13);
        objc_msgSend(v5, "setWf_preferredValueRounding:", v12);
      }
      else
      {
        id v5 = 0;
      }
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void WFMKCoordinateRegionMake(double a1, double a2, double a3, double a4)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v8 = (void (*)(double, double, double, double))getMKCoordinateRegionMakeSymbolLoc_ptr;
  uint64_t v15 = getMKCoordinateRegionMakeSymbolLoc_ptr;
  if (!getMKCoordinateRegionMakeSymbolLoc_ptr)
  {
    id v9 = MapKitLibrary_16882();
    v13[3] = (uint64_t)dlsym(v9, "MKCoordinateRegionMake");
    getMKCoordinateRegionMakeSymbolLoc_ptr = (_UNKNOWN *)v13[3];
    uint64_t v8 = (void (*)(double, double, double, double))v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (v8)
  {
    v8(a1, a2, a3, a4);
  }
  else
  {
    uint64_t v10 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "MKCoordinateRegion WFMKCoordinateRegionMake(CLLocationCoordinate2D, MKCoordinateSpan)");
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, @"DCMapsLink+MKGeometry.m", 20, @"%s", dlerror());

    __break(1u);
  }
}

void sub_2165BE61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMKCoordinateRegionMakeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MapKitLibrary_16882();
  Class result = dlsym(v2, "MKCoordinateRegionMake");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKCoordinateRegionMakeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *MapKitLibrary_16882()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary_16890)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __MapKitLibraryCore_block_invoke_16891;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264288E78;
    uint64_t v6 = 0;
    MapKitLibraryCore_frameworkLibrary_16890 = _sl_dlopen();
  }
  uint64_t v0 = (void *)MapKitLibraryCore_frameworkLibrary_16890;
  if (!MapKitLibraryCore_frameworkLibrary_16890)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *MapKitLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"DCMapsLink+MKGeometry.m", 19, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MapKitLibraryCore_block_invoke_16891()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary_16890 = result;
  return result;
}

void WFCLLocationCoordinate2DIsValid(double a1, double a2)
{
  uint64_t v8 = 0;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000;
  id v4 = (void (*)(double, double))getCLLocationCoordinate2DIsValidSymbolLoc_ptr_16901;
  uint64_t v11 = getCLLocationCoordinate2DIsValidSymbolLoc_ptr_16901;
  if (!getCLLocationCoordinate2DIsValidSymbolLoc_ptr_16901)
  {
    long long v5 = CoreLocationLibrary_16894();
    v9[3] = (uint64_t)dlsym(v5, "CLLocationCoordinate2DIsValid");
    getCLLocationCoordinate2DIsValidSymbolLoc_ptr_16901 = (_UNKNOWN *)v9[3];
    id v4 = (void (*)(double, double))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (v4)
  {
    v4(a1, a2);
  }
  else
  {
    uint64_t v6 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v7 = [NSString stringWithUTF8String:"BOOL WFCLLocationCoordinate2DIsValid(CLLocationCoordinate2D)"];
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, @"DCMapsLink+MKGeometry.m", 15, @"%s", dlerror());

    __break(1u);
  }
}

void sub_2165BEAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getkCLLocationCoordinate2DInvalid()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = getkCLLocationCoordinate2DInvalidSymbolLoc_ptr;
  uint64_t v7 = getkCLLocationCoordinate2DInvalidSymbolLoc_ptr;
  if (!getkCLLocationCoordinate2DInvalidSymbolLoc_ptr)
  {
    id v1 = CoreLocationLibrary_16894();
    v5[3] = (uint64_t)dlsym(v1, "kCLLocationCoordinate2DInvalid");
    getkCLLocationCoordinate2DInvalidSymbolLoc_ptr = v5[3];
    uint64_t v0 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"CLLocationCoordinate2D getkCLLocationCoordinate2DInvalid(void)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"DCMapsLink+MKGeometry.m", 17, @"%s", dlerror());

    __break(1u);
  }
}

void sub_2165BEC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getkCLLocationCoordinate2DInvalidSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = CoreLocationLibrary_16894();
  uint64_t result = dlsym(v2, "kCLLocationCoordinate2DInvalid");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkCLLocationCoordinate2DInvalidSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CoreLocationLibrary_16894()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_16896)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreLocationLibraryCore_block_invoke_16897;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264288E60;
    uint64_t v6 = 0;
    CoreLocationLibraryCore_frameworkLibrary_16896 = _sl_dlopen();
  }
  uint64_t v0 = (void *)CoreLocationLibraryCore_frameworkLibrary_16896;
  if (!CoreLocationLibraryCore_frameworkLibrary_16896)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"DCMapsLink+MKGeometry.m", 14, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CoreLocationLibraryCore_block_invoke_16897()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_16896 = result;
  return result;
}

void *__getCLLocationCoordinate2DIsValidSymbolLoc_block_invoke_16902(uint64_t a1)
{
  id v2 = CoreLocationLibrary_16894();
  uint64_t result = dlsym(v2, "CLLocationCoordinate2DIsValid");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCLLocationCoordinate2DIsValidSymbolLoc_ptr_16901 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_2165BF18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCLLocationCoordinate2DMakeSymbolLoc_block_invoke_16907(uint64_t a1)
{
  id v2 = CoreLocationLibrary_16894();
  uint64_t result = dlsym(v2, "CLLocationCoordinate2DMake");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCLLocationCoordinate2DMakeSymbolLoc_ptr_16906 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_2165BF43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMKCoordinateSpanMakeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MapKitLibrary_16882();
  uint64_t result = dlsym(v2, "MKCoordinateSpanMake");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKCoordinateSpanMakeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id WFExistingFileFromURL(void *a1)
{
  id v1 = (void *)[a1 copy];
  while (1)
  {
    id v2 = [v1 pathComponents];
    if ((unint64_t)[v2 count] < 2) {
      break;
    }
    char v3 = objc_msgSend(v1, "wf_fileExists");

    if (v3) {
      goto LABEL_7;
    }
    uint64_t v4 = [v1 URLByDeletingLastPathComponent];

    long long v5 = [v4 path];
    unint64_t v6 = [v5 length];

    id v1 = v4;
    if (v6 > 0x400)
    {
      id v7 = 0;
      goto LABEL_8;
    }
  }

LABEL_7:
  id v7 = v1;
  uint64_t v4 = v7;
LABEL_8:

  return v7;
}

id WFJavaScriptRunnerHostProtocolXPCInterface()
{
  uint64_t v0 = [MEMORY[0x263F08D80] interfaceWithProtocol:&unk_26C755520];
  id v1 = (void *)MEMORY[0x263EFFA08];
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  id v7 = objc_msgSend(v1, "setWithObjects:", v2, v3, v4, v5, v6, objc_opt_class(), 0);
  [v0 setClasses:v7 forSelector:sel_runJavaScript_completionHandler_ argumentIndex:0 ofReply:1];

  return v0;
}

void sub_2165C0C54(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__17134(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__17135(uint64_t a1)
{
}

id WFCollapseANDCompoundPredicatesInsidePredicate(void *a1)
{
  v16[1] = *MEMORY[0x263EF8340];
  id v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v1 compoundPredicateType] == 1)
  {
    uint64_t v2 = objc_opt_new();
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v3 = objc_msgSend(v1, "subpredicates", 0);
    uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void *)(*((void *)&v11 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [v2 addObject:v8];
          }
          else
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v9 = WFCollapseANDCompoundPredicatesInsidePredicate(v8);
              [v2 addObjectsFromArray:v9];
            }
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }
  }
  else
  {
    v16[0] = v1;
    uint64_t v2 = [MEMORY[0x263EFF8C0] arrayWithObjects:v16 count:1];
  }

  return v2;
}

void sub_2165C1AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

Class __getPHAssetClass_block_invoke_17204(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_17205)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __PhotosLibraryCore_block_invoke_17206;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264288FC8;
    uint64_t v8 = 0;
    PhotosLibraryCore_frameworkLibrary_17205 = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary_17205)
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFPhotoItemProviderContentItem.m", 15, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PHAsset");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getPHAssetClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFPhotoItemProviderContentItem.m", 16, @"Unable to find class %s", "PHAsset");

LABEL_10:
    __break(1u);
  }
  getPHAssetClass_softClass_17203 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PhotosLibraryCore_block_invoke_17206()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_17205 = result;
  return result;
}

id WFAppTransportSecuredURL(void *a1)
{
  v38[1] = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    id v21 = 0;
    goto LABEL_15;
  }
  uint64_t v3 = [v1 scheme];
  char v4 = [v3 isEqualToString:@"http"];

  if ((v4 & 1) == 0)
  {
    id v21 = v2;
    goto LABEL_15;
  }
  uint64_t v5 = [v2 host];
  uint64_t v6 = [v5 lowercaseString];

  long long v7 = [MEMORY[0x263F08708] characterSetWithCharactersInString:@"."];
  uint64_t v8 = [v6 componentsSeparatedByCharactersInSet:v7];
  uint64_t v9 = [MEMORY[0x263F086E0] mainBundle];
  uint64_t v10 = [v9 objectForInfoDictionaryKey:@"NSAppTransportSecurity"];

  if (v10)
  {
    long long v11 = [v10 objectForKeyedSubscript:@"NSExceptionDomains"];
    uint64_t v31 = MEMORY[0x263EF8330];
    uint64_t v32 = 3221225472;
    uint64_t v33 = __WFAppTransportSecuredURL_block_invoke;
    uint64_t v34 = &unk_264289008;
    id v35 = v6;
    id v36 = v7;
    long long v30 = v8;
    id v37 = v8;
    long long v12 = [v11 keysOfEntriesPassingTest:&v31];
    long long v13 = [MEMORY[0x263F08B30] sortDescriptorWithKey:@"length" ascending:0];
    v38[0] = v13;
    long long v14 = [MEMORY[0x263EFF8C0] arrayWithObjects:v38 count:1];
    uint64_t v15 = [v12 sortedArrayUsingDescriptors:v14];
    unint64_t v16 = [v15 firstObject];

    unsigned int v17 = [v11 objectForKeyedSubscript:v16];
    uint64_t v18 = [v17 objectForKeyedSubscript:@"NSExceptionAllowsInsecureHTTPLoads"];
    if (v18)
    {
      __int16 v19 = v18;
      char v20 = [v18 BOOLValue];

      if (v20)
      {
LABEL_6:
        id v21 = v2;
LABEL_13:
        uint64_t v8 = v30;

        goto LABEL_14;
      }
    }
    else
    {
      id v22 = [v11 objectForKeyedSubscript:v16];
      long long v23 = [v22 objectForKeyedSubscript:@"NSThirdPartyExceptionAllowsInsecureHTTPLoads"];
      if (v23)
      {
        long long v24 = v23;
        int v25 = [v23 BOOLValue];

        if (v25) {
          goto LABEL_6;
        }
      }
      else
      {
        long long v28 = [v10 objectForKeyedSubscript:@"NSAllowsArbitraryLoads"];
        char v29 = [v28 BOOLValue];

        if (v29) {
          goto LABEL_6;
        }
      }
    }
    long long v26 = objc_msgSend(MEMORY[0x263F08BA0], "componentsWithURL:resolvingAgainstBaseURL:", v2, 0, v30, v31, v32, v33, v34, v35, v36);
    [v26 setScheme:@"https"];
    id v21 = [v26 URL];

    goto LABEL_13;
  }
  id v21 = v2;
LABEL_14:

LABEL_15:
  return v21;
}

uint64_t __WFAppTransportSecuredURL_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = [a3 objectForKeyedSubscript:@"NSIncludesSubdomains"];
  char v7 = [v6 BOOLValue];

  if (v7)
  {
    uint64_t v8 = [v5 componentsSeparatedByCharactersInSet:*(void *)(a1 + 40)];

    unint64_t v9 = [v8 count];
    if (v9 <= [*(id *)(a1 + 48) count])
    {
      long long v11 = objc_msgSend(*(id *)(a1 + 48), "subarrayWithRange:", objc_msgSend(*(id *)(a1 + 48), "count") - objc_msgSend(v8, "count"), objc_msgSend(v8, "count"));
      uint64_t v10 = [v11 isEqualToArray:v8];
    }
    else
    {
      uint64_t v10 = 0;
    }
    id v5 = v8;
  }
  else
  {
    uint64_t v10 = [*(id *)(a1 + 32) isEqualToString:v5];
  }

  return v10;
}

Class initCNContact()
{
  if (ContactsLibrary_sOnce != -1) {
    dispatch_once(&ContactsLibrary_sOnce, &__block_literal_global_344);
  }
  Class result = objc_getClass("CNContact");
  classCNContact = (uint64_t)result;
  getCNContactClass_17765 = (uint64_t (*)())CNContactFunction;
  return result;
}

id CNContactFunction()
{
  return (id)classCNContact;
}

void *__ContactsLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/Contacts.framework/Contacts", 2);
  ContactsLibrary_sLib = (uint64_t)result;
  return result;
}

Class initEKAttendee()
{
  if (EventKitLibrary_sOnce != -1) {
    dispatch_once(&EventKitLibrary_sOnce, &__block_literal_global_17772);
  }
  Class result = objc_getClass("EKAttendee");
  classEKAttendee = (uint64_t)result;
  getEKAttendeeClass = (uint64_t (*)())EKAttendeeFunction;
  return result;
}

id EKAttendeeFunction()
{
  return (id)classEKAttendee;
}

void *__EventKitLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/Frameworks/EventKit.framework/EventKit", 2);
  EventKitLibrary_sLib = (uint64_t)result;
  return result;
}

WFTimeInterval *WFTimeIntervalFromExpectedTravelTime(double a1)
{
  if (a1 >= 60.0) {
    uint64_t v1 = 124;
  }
  else {
    uint64_t v1 = 128;
  }
  uint64_t v2 = [[WFTimeInterval alloc] initWithTimeInterval:v1 allowedUnits:3 unitsStyle:1 zeroFormattingBehavior:a1];
  return v2;
}

void sub_2165C48C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18152(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18153(uint64_t a1)
{
}

id WFIndexSetFromContentSlice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (a3 & (a1 >> 63)) + a1;
  if (a1 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v4 = 0;
  }
  if (a2 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = (a3 & (a2 >> 63)) + a2;
  }
  if (v4 >= a3) {
    uint64_t v4 = a3;
  }
  if (v5 < a3) {
    uint64_t v3 = v5;
  }
  if ((v3 & (unint64_t)~(v3 >> 63)) >= (v4 & (unint64_t)~(v4 >> 63))) {
    objc_msgSend(MEMORY[0x263F088D0], "indexSetWithIndexesInRange:");
  }
  else {
  uint64_t v6 = [MEMORY[0x263F088D0] indexSet];
  }
  return v6;
}

id WFRequiredContentComparisonPredicatesFromPredicate(void *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = v1;
    uint64_t v3 = objc_opt_new();
    if ([v2 compoundPredicateType] == 1)
    {
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      uint64_t v4 = objc_msgSend(v2, "subpredicates", 0);
      uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v16 count:16];
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)v12;
        do
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            if (*(void *)v12 != v7) {
              objc_enumerationMutation(v4);
            }
            unint64_t v9 = WFRequiredContentComparisonPredicatesFromPredicate(*(void *)(*((void *)&v11 + 1) + 8 * i));
            [v3 addObjectsFromArray:v9];
          }
          uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v16 count:16];
        }
        while (v6);
      }
    }
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v15 = v1;
      uint64_t v3 = [MEMORY[0x263EFF8C0] arrayWithObjects:&v15 count:1];
    }
    else
    {
      uint64_t v3 = (void *)MEMORY[0x263EFFA68];
    }
  }

  return v3;
}

id WFEKCalendarMatchesContentPredicate(void *a1, void *a2)
{
  v19[1] = *MEMORY[0x263EF8340];
  id v3 = a1;
  id v4 = a2;
  if (!v4)
  {
    uint64_t v6 = (void *)MEMORY[0x263EFFA80];
    goto LABEL_18;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = v3;
    uint64_t v6 = [v5 subpredicates];
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 3221225472;
    void v17[2] = __WFEKCalendarMatchesContentPredicate_block_invoke;
    v17[3] = &unk_264289270;
    id v18 = v4;
    uint64_t v7 = objc_msgSend(v6, "if_compactMap:", v17);

    if (![v7 count])
    {
      char v15 = 0;
      uint64_t v6 = 0;
      goto LABEL_16;
    }
    if ([v5 compoundPredicateType] == 1)
    {
      uint64_t v8 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v7, "containsObject:", MEMORY[0x263EFFA80]) ^ 1);
    }
    else
    {
      if ([v5 compoundPredicateType] != 2)
      {
        char v15 = 1;
LABEL_16:

        if ((v15 & 1) == 0) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      uint64_t v8 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v7, "containsObject:", MEMORY[0x263EFFA88]));
    }
    uint64_t v6 = (void *)v8;
    char v15 = 0;
    goto LABEL_16;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = v3;
    uint64_t v10 = [v9 property];
    long long v11 = [v10 keyPath];
    int v12 = [v11 isEqualToString:@"event.calendar.title"];

    if (v12)
    {
      long long v13 = NSNumber;
      v19[0] = v4;
      long long v14 = [MEMORY[0x263EFF8C0] arrayWithObjects:v19 count:1];
      uint64_t v6 = objc_msgSend(v13, "numberWithBool:", objc_msgSend(v9, "evaluateWithValues:", v14));

      goto LABEL_18;
    }
  }
LABEL_17:
  uint64_t v6 = 0;
LABEL_18:

  return v6;
}

uint64_t __WFEKCalendarMatchesContentPredicate_block_invoke(uint64_t a1, uint64_t a2)
{
  return WFEKCalendarMatchesContentPredicate(a2, *(void *)(a1 + 32));
}

void sub_2165C9494(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void *__getNSAttachmentAttributeNameSymbolLoc_block_invoke_18987(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!UIFoundationLibraryCore_frameworkLibrary_18999)
  {
    v5[1] = (void *)MEMORY[0x263EF8330];
    v5[2] = (void *)3221225472;
    v5[3] = __UIFoundationLibraryCore_block_invoke_19000;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_2642892C0;
    uint64_t v7 = 0;
    UIFoundationLibraryCore_frameworkLibrary_18999 = _sl_dlopen();
  }
  id v2 = (void *)UIFoundationLibraryCore_frameworkLibrary_18999;
  if (!UIFoundationLibraryCore_frameworkLibrary_18999)
  {
    a1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *UIFoundationLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFWebArchive+ImageExtraction.m", 15, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  Class result = dlsym(v2, "NSAttachmentAttributeName");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getNSAttachmentAttributeNameSymbolLoc_ptr_18986 = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __UIFoundationLibraryCore_block_invoke_19000()
{
  uint64_t result = _sl_dlopen();
  UIFoundationLibraryCore_frameworkLibrary_18999 = result;
  return result;
}

void WFDyldBulkImageLoadCallback_19085()
{
}

id getREMReminderClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getREMReminderClass_softClass_19127;
  uint64_t v7 = getREMReminderClass_softClass_19127;
  if (!getREMReminderClass_softClass_19127)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getREMReminderClass_block_invoke_19128;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getREMReminderClass_block_invoke_19128((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165C9F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getREMReminderClass_block_invoke_19128(uint64_t a1)
{
  ReminderKitLibrary_19129();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMReminder");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMReminderClass_softClass_19127 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getREMReminderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFReminderContentItem.m", 32, @"Unable to find class %s", "REMReminder");

    __break(1u);
  }
}

void ReminderKitLibrary_19129()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!ReminderKitLibraryCore_frameworkLibrary_19140)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __ReminderKitLibraryCore_block_invoke_19141;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_264289520;
    uint64_t v5 = 0;
    ReminderKitLibraryCore_frameworkLibrary_19140 = _sl_dlopen();
  }
  if (!ReminderKitLibraryCore_frameworkLibrary_19140)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *ReminderKitLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFReminderContentItem.m", 31, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __ReminderKitLibraryCore_block_invoke_19141()
{
  uint64_t result = _sl_dlopen();
  ReminderKitLibraryCore_frameworkLibrary_19140 = result;
  return result;
}

void sub_2165CAA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getREMExportingClass_block_invoke(uint64_t a1)
{
  ReminderKitLibrary_19129();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMExporting");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMExportingClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getREMExportingClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFReminderContentItem.m", 33, @"Unable to find class %s", "REMExporting");

    __break(1u);
  }
}

void sub_2165CB124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getREMContactRepresentationClass_block_invoke(uint64_t a1)
{
  ReminderKitLibrary_19129();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMContactRepresentation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMContactRepresentationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getREMContactRepresentationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFReminderContentItem.m", 36, @"Unable to find class %s", "REMContactRepresentation");

    __break(1u);
  }
}

id getCLLocationClass_19292()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCLLocationClass_softClass_19303;
  uint64_t v7 = getCLLocationClass_softClass_19303;
  if (!getCLLocationClass_softClass_19303)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCLLocationClass_block_invoke_19304;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getCLLocationClass_block_invoke_19304((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165CCE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2165CD168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void __getREMAlarmLocationTriggerClass_block_invoke(uint64_t a1)
{
  ReminderKitLibrary_19129();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("REMAlarmLocationTrigger");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getREMAlarmLocationTriggerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getREMAlarmLocationTriggerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFReminderContentItem.m", 34, @"Unable to find class %s", "REMAlarmLocationTrigger");

    __break(1u);
  }
}

Class __getCLLocationClass_block_invoke_19304(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_19305)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __CoreLocationLibraryCore_block_invoke_19306;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264289538;
    uint64_t v8 = 0;
    CoreLocationLibraryCore_frameworkLibrary_19305 = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary_19305)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFReminderContentItem.m", 38, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CLLocation");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFReminderContentItem.m", 39, @"Unable to find class %s", "CLLocation");

LABEL_10:
    __break(1u);
  }
  getCLLocationClass_softClass_19303 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreLocationLibraryCore_block_invoke_19306()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_19305 = result;
  return result;
}

id WFReminderPropertyNameTitle()
{
  return WFLocalizedContentPropertyNameMarker(@"Title");
}

id WFReminderPropertyNameCreationDate()
{
  return WFLocalizedContentPropertyNameMarker(@"Creation Date");
}

id WFReminderPropertyNameDueDate()
{
  return WFLocalizedContentPropertyNameMarker(@"Due Date");
}

id WFReminderPropertyNamePriority()
{
  return WFLocalizedContentPropertyNameMarker(@"Priority");
}

id WFReminderPropertyNameList()
{
  return WFLocalizedContentPropertyNameMarker(@"List");
}

id WFReminderPropertyNameTags()
{
  return WFLocalizedContentPropertyNameMarker(@"Tags");
}

id WFReminderPropertyNameIsCompleted()
{
  return WFLocalizedContentPropertyNameMarker(@"Is Completed");
}

uint64_t cdf_check_summary_info(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, uint64_t *a7, unint64_t *a8, uint64_t a9, void *a10)
{
  uint64_t v154 = *MEMORY[0x263EF8340];
  id v18 = (unsigned __int16 *)*a8;
  if (cdf_check_stream_offset(a8, a3, *a8, 28) == -1
    || cdf_check_stream_offset(a8, a3, (uint64_t)(v18 + 14), 20) == -1)
  {
    goto LABEL_8;
  }
  unint64_t v146 = a4;
  BOOL v147 = a5;
  unint64_t v148 = a6;
  uint64_t v149 = a1;
  int v19 = *v18;
  unsigned __int16 v20 = v18[2];
  int v21 = v18[3];
  uint64_t v22 = *((unsigned int *)v18 + 11);
  *(void *)__s = 0;
  uint64_t v150 = 0;
  if (v22 >> 30) {
    goto LABEL_6;
  }
  long long v23 = (unsigned int *)(*a8 + v22);
  if (cdf_check_stream_offset(a8, a3, (uint64_t)v23, 8) == -1)
  {
LABEL_7:
    free(v150);
    *__error() = 79;
LABEL_8:
    uint64_t v25 = 0xFFFFFFFFLL;
LABEL_9:
    *a10 = "Can't expand summary_info";
    return v25;
  }
  uint64_t v24 = *v23;
  if (v24 >> 26)
  {
LABEL_6:
    *__error() = 79;
    goto LABEL_7;
  }
  if (cdf_check_stream_offset(a8, a3, (uint64_t)v23, *v23) == -1) {
    goto LABEL_7;
  }
  unint64_t v145 = v23[1];
  if (v145 > 0x2AAAAA) {
    goto LABEL_7;
  }
  long long v27 = (char *)cdf_grow_info(&v150, (unint64_t *)__s, v145);
  if (!v27) {
    goto LABEL_7;
  }
  if (v22 + *a8 + 8 >= (unint64_t)v23 + v24) {
    goto LABEL_7;
  }
  int v140 = (char *)v23 + v24;
  uint64_t v143 = v22 + *a8 + 8;
  long long v28 = v27;
  if (cdf_check_stream_offset(a8, a3, (uint64_t)v23 + v24, 0) == -1) {
    goto LABEL_7;
  }
  if (v145)
  {
    id v35 = v28;
    unint64_t v36 = 0;
    while (1)
    {
      uint64_t v37 = 8 * v36;
      uint64_t v38 = v35;
      unint64_t v39 = v36;
      if (cdf_check_stream_offset(a8, a3, v143, 8 * v36 + 8) == -1) {
        goto LABEL_7;
      }
      uint64_t v40 = *(unsigned int *)(v143 + (v37 | 4));
      if (v40 < 8) {
        goto LABEL_7;
      }
      uint64_t v41 = (char *)(v40 + v143 - 8);
      if (v41 >= v140) {
        goto LABEL_7;
      }
      unint64_t v42 = v39;
      id v35 = v38;
      *(_DWORD *)&v38[24 * v39] = *(_DWORD *)(v143 + v37);
      unint64_t v43 = v140 - v41;
      if ((unint64_t)(v140 - v41) < 4) {
        goto LABEL_7;
      }
      int v44 = *(_DWORD *)v41;
      *(_DWORD *)&v38[24 * v39 + 4] = *(_DWORD *)v41;
      if ((v44 & 0x1000) != 0)
      {
        if (v43 < 8) {
          goto LABEL_7;
        }
        unint64_t v29 = *((unsigned int *)v41 + 1);
        if ((v29 - 100001) < 0xFFFE7960) {
          goto LABEL_7;
        }
        uint64_t v45 = 2;
      }
      else
      {
        unint64_t v29 = 1;
        uint64_t v45 = 1;
      }
      if ((v44 & 0xE000) != 0) {
        goto LABEL_28;
      }
      uint64_t v47 = 4 * v45;
      unsigned int v48 = v44 & 0xFFF;
      if (v48 <= 0x1D)
      {
        switch(v44 & 0xFFF)
        {
          case 0:
          case 1:
            goto LABEL_29;
          case 2:
            if ((unint64_t)(v140 - &v41[v47]) < 2 || (v44 & 0x1000) != 0) {
              goto LABEL_28;
            }
            *(_WORD *)&v38[24 * v39 + 8] = *(_WORD *)&v41[4 * v45];
            break;
          case 3:
          case 4:
          case 0xB:
          case 0x13:
            if ((unint64_t)(v140 - &v41[v47]) < 4 || (v44 & 0x1000) != 0) {
              goto LABEL_28;
            }
            *(_DWORD *)&v38[24 * v39 + 8] = *(_DWORD *)&v41[4 * v45];
            break;
          case 5:
          case 0x14:
          case 0x15:
            goto LABEL_41;
          default:
            goto LABEL_28;
        }
        goto LABEL_29;
      }
      if (v48 - 30 >= 2) {
        break;
      }
      if (v29 >= 2)
      {
        uint64_t v133 = 4 * v45;
        uint64_t v134 = v45;
        uint64_t v49 = v150;
        uint64_t v136 = v41;
        unint64_t v138 = v29;
        unint64_t v135 = v140 - v41;
        uint64_t v50 = (char *)cdf_grow_info(&v150, (unint64_t *)__s, v29);
        uint64_t v45 = v134;
        unint64_t v43 = v135;
        uint64_t v41 = v136;
        unint64_t v29 = v138;
        if (!v50) {
          goto LABEL_7;
        }
        unint64_t v42 = v39;
        id v35 = &v50[v38 - v49];
        uint64_t v47 = v133;
      }
      if (v42 < v145)
      {
        uint64_t v51 = &v35[24 * v42 + 16];
        unint64_t v52 = 1;
        do
        {
          uint64_t v53 = v47 + 4;
          if (v47 + 4 > v43) {
            goto LABEL_7;
          }
          uint64_t v54 = *(unsigned int *)&v41[4 * v45];
          if (v53 + v54 > v43) {
            goto LABEL_7;
          }
          *((_DWORD *)v51 - 2) = v54;
          *(void *)uint64_t v51 = &v41[v53];
          unint64_t v55 = v52 + 1;
          if (v52 >= v29) {
            break;
          }
          v45 += ((v54 & 1) + v54) >> 1;
          uint64_t v47 = 4 * v45;
          unint64_t v56 = v42 + v52;
          v51 += 24;
          ++v52;
        }
        while (v56 < v145);
        unint64_t v42 = v42 + v55 - 1;
      }
      --v42;
LABEL_29:
      unint64_t v36 = v42 + 1;
      if (v36 >= v145) {
        goto LABEL_58;
      }
    }
    if (v48 == 64)
    {
LABEL_41:
      if ((unint64_t)(v140 - &v41[v47]) >= 8 && (v44 & 0x1000) == 0)
      {
        *(void *)&v38[24 * v39 + 8] = *(void *)&v41[4 * v45];
        goto LABEL_29;
      }
    }
    else if (v48 == 71 && (v44 & 0x1000) == 0)
    {
      goto LABEL_29;
    }
LABEL_28:
    uint64_t v46 = &v38[24 * v39];
    *((void *)v46 + 1) = 0;
    *((void *)v46 + 2) = 0;
    goto LABEL_29;
  }
LABEL_58:
  uint64_t v57 = v149;
  if ((*(_WORD *)(v149 + 68) & 0x410) != 0) {
    goto LABEL_59;
  }
  if (file_printf(v149, "Composite Document File V2 Document", v29, v30, v31, v32, v33, v34, v132) == -1) {
    goto LABEL_8;
  }
  uint64_t v67 = "Big";
  if (v19 == 65534) {
    uint64_t v67 = "Little";
  }
  if (file_printf(v149, ", %s Endian", v61, v62, v63, v64, v65, v66, (char)v67) == -1
    || (v21 == 1
      ? (int v74 = file_printf(v149, ", Os: MacOS, Version %d.%d", v68, v69, v70, v71, v72, v73, SHIBYTE(v20)))
      : v21 != 2
      ? (int v74 = file_printf(v149, ", Os %d, Version: %d.%d", v68, v69, v70, v71, v72, v73, v21))
      : (int v74 = file_printf(v149, ", Os: Windows, Version %d.%d", v68, v69, v70, v71, v72, v73, v20)),
        v74 == -1))
  {
LABEL_182:
    uint64_t v25 = 4294967294;
    goto LABEL_9;
  }
  if (a9)
  {
    if (*(void *)(a9 + 80) != 790660
      || *(void *)(a9 + 88) != 0x46000000000000C0
      || file_printf(v149, ", %s", v29, v30, v31, v32, v33, v34, (char)"MSI Installer") != -1)
    {
LABEL_59:
      uint64_t v58 = 0;
      unint64_t v59 = v150;
      int v60 = *(_DWORD *)(v149 + 68);
      if (a9 && (v60 & 0x410) != 0)
      {
        if (*(void *)(a9 + 80) == 790660 && *(void *)(a9 + 88) == 0x46000000000000C0) {
          uint64_t v58 = "x-msi";
        }
        else {
          uint64_t v58 = 0;
        }
      }
      goto LABEL_72;
    }
    goto LABEL_182;
  }
  uint64_t v58 = 0;
  unint64_t v59 = v150;
  int v60 = *(_DWORD *)(v149 + 68);
LABEL_72:
  v151[0] = 0;
  v151[1] = 0;
  if (!v145) {
    goto LABEL_143;
  }
  uint64_t v75 = 0;
  unint64_t v137 = v59;
  do
  {
    uint64_t v76 = 0;
    int v144 = &v59[6 * v75];
    unint64_t v77 = &vn;
    while (1)
    {
      int v78 = *v77;
      v77 += 4;
      if (v78 == *v144) {
        break;
      }
      if (++v76 == 20)
      {
        snprintf(__str, 0x40uLL, "%#x");
        goto LABEL_79;
      }
    }
    snprintf(__str, 0x40uLL, "%s");
LABEL_79:
    int v79 = v59[6 * v75 + 1];
    unsigned int v80 = -1;
    if (v79 <= 29)
    {
      switch(v79)
      {
        case 1:
          goto LABEL_141;
        case 2:
          if ((*(_WORD *)(v57 + 68) & 0x410) != 0) {
            goto LABEL_141;
          }
          int v81 = file_printf(v57, ", %s: %hd", v29, v30, v31, v32, v33, v34, (char)__str);
          goto LABEL_121;
        case 3:
          if ((*(_WORD *)(v57 + 68) & 0x410) != 0) {
            goto LABEL_141;
          }
          int v81 = file_printf(v57, ", %s: %d", v29, v30, v31, v32, v33, v34, (char)__str);
          goto LABEL_121;
        case 4:
          if ((*(_WORD *)(v57 + 68) & 0x410) != 0) {
            goto LABEL_141;
          }
          goto LABEL_120;
        case 5:
          if ((*(_WORD *)(v57 + 68) & 0x410) != 0) {
            goto LABEL_141;
          }
LABEL_120:
          int v81 = file_printf(v57, ", %s: %g", v29, v30, v31, v32, v33, v34, (char)__str);
          goto LABEL_121;
        default:
          if (v79 != 19) {
            goto LABEL_149;
          }
          if ((*(_WORD *)(v57 + 68) & 0x410) == 0)
          {
            int v81 = file_printf(v57, ", %s: %u", v29, v30, v31, v32, v33, v34, (char)__str);
LABEL_121:
            if (v81 == -1) {
              goto LABEL_149;
            }
          }
          goto LABEL_141;
      }
    }
    if ((v79 - 30) < 2)
    {
      int v82 = (char *)&v59[6 * v75];
      int v85 = *((_DWORD *)v82 + 2);
      int v84 = v82 + 8;
      uint64_t v83 = v85;
      if (v85 < 2) {
        goto LABEL_141;
      }
      unint64_t v139 = v58;
      uint64_t v141 = v75;
      unint64_t v86 = 0;
      if (v79 == 31) {
        uint64_t v87 = 2;
      }
      else {
        uint64_t v87 = 1;
      }
      long long v88 = (char *)*((void *)v84 + 1);
      size_t v89 = &v88[v83];
      int v90 = v83 + 1;
      do
      {
        if (!--v90) {
          break;
        }
        uint64_t v91 = *v88;
        if (!*v88) {
          break;
        }
        char v92 = *v88;
        if ((char)v91 < 0) {
          int v93 = __maskrune(v91, 0x40000uLL);
        }
        else {
          int v93 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v91 + 60) & 0x40000;
        }
        if (v93) {
          __s[v86++] = v92;
        }
        v88 += v87;
        if (v88 >= v89) {
          break;
        }
      }
      while (v86 < 0x400);
      uint64_t v94 = 1023;
      if (v86 != 1024) {
        uint64_t v94 = v86;
      }
      __s[v94] = 0;
      uint64_t v57 = v149;
      if ((*(_WORD *)(v149 + 68) & 0x410) != 0)
      {
        unint64_t v59 = v137;
        uint64_t v58 = v139;
        uint64_t v75 = v141;
        if (!v139)
        {
          if (*v144 == 18) {
            uint64_t v58 = cdf_app_to_mime(__s, (const char **)app2mime);
          }
          else {
            uint64_t v58 = 0;
          }
        }
        goto LABEL_141;
      }
      unint64_t v59 = v137;
      uint64_t v58 = v139;
      uint64_t v75 = v141;
      if (!__s[0]) {
        goto LABEL_141;
      }
      goto LABEL_140;
    }
    if (v79 != 64)
    {
      if (v79 != 71) {
        goto LABEL_149;
      }
      goto LABEL_141;
    }
    uint64_t v95 = *(void *)&v59[6 * v75 + 2];
    if (!v95) {
      goto LABEL_141;
    }
    if (v95 > 0x38D7EA4C67FFFLL)
    {
      cdf_timestamp_to_timespec(v151, *(void *)&v59[6 * v75 + 2]);
      if (!ctime_r(v151, __s)) {
        snprintf(__s, 0x1AuLL, "*Bad* %#16.16llx\n", v151[0]);
      }
      size_t v97 = strchr(__s, 10);
      if (v97) {
        *size_t v97 = 0;
      }
      if ((*(_WORD *)(v57 + 68) & 0x410) != 0) {
        goto LABEL_141;
      }
      goto LABEL_140;
    }
    uint64_t v142 = v75;
    if ((int)v95 / 711573504)
    {
      unsigned int v96 = snprintf(__s, 0x40uLL, "%dd+", (int)v95 / 711573504);
      if (v96 > 0x3F) {
        goto LABEL_139;
      }
    }
    else
    {
      unsigned int v96 = 0;
    }
    uint64_t v98 = v96;
    if (((int)v95 / 1640261632 % 24) | ((int)v95 / 711573504))
    {
      unsigned int v99 = snprintf(&__s[v96], 64 - v96, "%.2d:", (int)v95 / 1640261632 % 24) + v96;
      if (v99 > 0x3F) {
        goto LABEL_139;
      }
      uint64_t v98 = (int)v99;
      uint64_t v100 = v95;
    }
    else
    {
      uint64_t v100 = v95;
      unsigned int v99 = v96;
    }
    unsigned int v101 = snprintf(&__s[v98], 64 - v98, "%.2d:", (int)(v100 / 600000000) % 60) + v99;
    if (v101 <= 0x3F) {
      snprintf(&__s[v101], 64 - (int)v101, "%.2d", (int)(v95 / 10000000) % 60);
    }
LABEL_139:
    uint64_t v75 = v142;
    if ((*(_WORD *)(v57 + 68) & 0x410) != 0) {
      goto LABEL_141;
    }
LABEL_140:
    if (file_printf(v57, ", %s: %s", v29, v30, v31, v32, v33, v34, (char)__str) == -1) {
      goto LABEL_148;
    }
LABEL_141:
    ++v75;
  }
  while (v75 != v145);
  int v60 = *(_DWORD *)(v57 + 68);
LABEL_143:
  if ((v60 & 0x10) != 0)
  {
    if (v58)
    {
      if (file_printf(v57, "application/%s", v29, v30, v31, v32, v33, v34, (char)v58) != -1) {
        goto LABEL_146;
      }
LABEL_148:
      unsigned int v80 = -1;
    }
    else
    {
      unsigned int v80 = 0;
    }
  }
  else
  {
LABEL_146:
    unsigned int v80 = 1;
  }
LABEL_149:
  free(v150);
  if (v80 >= 0xFFFFFFFE) {
    uint64_t v25 = 4294967294;
  }
  else {
    uint64_t v25 = v80;
  }
  if ((v25 & 0x80000000) != 0) {
    goto LABEL_9;
  }
  if (v25 != 1)
  {
    uint64_t v108 = 0;
    unint64_t v109 = 0;
    while (v109 < a7[1])
    {
      uint64_t v110 = 0;
      uint64_t v111 = *a7 + v108;
      do
      {
        __str[v110] = *(_WORD *)(v111 + 2 * v110);
        ++v110;
      }
      while (v110 != 32);
      if ((*(_DWORD *)(v149 + 68) & 0x410) != 0) {
        char v112 = name2mime;
      }
      else {
        char v112 = name2desc;
      }
      unint64_t v113 = cdf_app_to_mime(__str, (const char **)v112);
      ++v109;
      v108 += 136;
      if (v113)
      {
        uint64_t v114 = v149;
        int v115 = *(_DWORD *)(v149 + 68);
        if ((v115 & 0x410) == 0)
        {
          char v132 = (char)v113;
          int v116 = "%s";
          goto LABEL_172;
        }
LABEL_166:
        if ((v115 & 0x10) == 0) {
          goto LABEL_167;
        }
        char v132 = (char)v113;
        int v116 = "application/%s";
LABEL_172:
        uint64_t v118 = v114;
LABEL_173:
        if (file_printf(v118, v116, v102, v103, v104, v105, v106, v107, v132) != -1) {
          return 1;
        }
        return 0xFFFFFFFFLL;
      }
    }
    uint64_t v114 = v149;
    int v115 = *(_DWORD *)(v149 + 68);
    if ((v115 & 0x410) != 0)
    {
      unint64_t v113 = "vnd.ms-office";
      goto LABEL_166;
    }
LABEL_167:
    if (cdf_read_user_stream(a2, a3, v146, v147, v148, a7, "Catalog", (uint64_t)a8) != -1)
    {
      int v117 = *(_DWORD *)(v149 + 68);
      if ((v117 & 0x410) != 0)
      {
        if ((v117 & 0x10) != 0)
        {
          int v116 = "application/CDFV2";
          uint64_t v118 = v149;
          goto LABEL_173;
        }
        return 1;
      }
      if (file_printf(v149, "Microsoft Thumbs.db [", v102, v103, v104, v105, v106, v107, v132) != -1)
      {
        v151[0] = 0;
        if (cdf_unpack_catalog(a3, (unsigned __int16 **)a8, v151) != -1)
        {
          long long v125 = (unint64_t *)v151[0];
          time_t v126 = v151[0] + 8;
          if (*(void *)v151[0] < 2uLL)
          {
LABEL_196:
            free(v125);
            return 1;
          }
          time_t v127 = v151[0] + 552;
          unint64_t v128 = 1;
          while (1)
          {
            uint64_t v129 = *(unsigned __int16 *)(v126 + 528 * v128);
            if (*(_WORD *)(v126 + 528 * v128))
            {
              uint64_t v130 = 0;
              while (1)
              {
                __int16 v131 = *(_WORD *)(v127 + 2 * v130);
                if (!v131) {
                  break;
                }
                __s[v130++] = v131;
                if (v129 == v130)
                {
                  uint64_t v130 = v129;
                  break;
                }
              }
            }
            else
            {
              uint64_t v130 = 0;
            }
            __s[v130] = 0;
            if (file_printf(v149, "%s%s", v119, v120, v121, v122, v123, v124, (char)__s) == -1) {
              break;
            }
            ++v128;
            v127 += 528;
            if (v128 >= *v125) {
              goto LABEL_196;
            }
          }
          free(v125);
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return v25;
}

uint64_t cdf_file_dir_info(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = &off_2642896C8;
  uint64_t v6 = &dword_2642896E8;
  while (2)
  {
    long long v7 = sectioninfo[10 * v4 + 2];
    uint64_t v8 = v5;
    uint64_t v9 = v6;
    do
    {
      int v10 = *v9++;
      if ((int)cdf_find_stream(a2, v7, v10) >= 1)
      {
        int v19 = *(_DWORD *)(a1 + 68);
        if ((v19 & 0x410) != 0)
        {
          if ((v19 & 0x10) == 0) {
            return 1;
          }
          uint64_t result = file_printf(a1, "application/%s", v11, v12, v13, v14, v15, v16, (char)sectioninfo[10 * v4 + 1]);
        }
        else
        {
          uint64_t result = file_printf(a1, "CDFV2 %s", v11, v12, v13, v14, v15, v16, (char)sectioninfo[10 * v4]);
        }
        if (result == -1) {
          return result;
        }
        return 1;
      }
      uint64_t v17 = *v8++;
      long long v7 = v17;
    }
    while (v17);
    ++v4;
    v6 += 20;
    v5 += 10;
    if (v4 != 6) {
      continue;
    }
    break;
  }
  return 0xFFFFFFFFLL;
}

const char *cdf_app_to_mime(const char *a1, const char **a2)
{
  uint64_t v4 = newlocale(2, "C", 0);
  if (!v4) {
    __assert_rtn("cdf_app_to_mime", "readcdf.c", 119, "c_lc_ctype != NULL");
  }
  uint64_t v5 = v4;
  locale_t v6 = uselocale(v4);
  if (!v6) {
    __assert_rtn("cdf_app_to_mime", "readcdf.c", 121, "old_lc_ctype != NULL");
  }
  long long v7 = v6;
  uint64_t v8 = *a2;
  if (*a2)
  {
    uint64_t v9 = 0;
    int v10 = a2 + 2;
    while (!strcasestr(a1, v8))
    {
      ++v9;
      uint64_t v11 = *v10;
      v10 += 2;
      uint64_t v8 = v11;
      if (!v11) {
        goto LABEL_7;
      }
    }
    uint64_t v12 = a2[2 * v9 + 1];
  }
  else
  {
LABEL_7:
    uint64_t v12 = 0;
  }
  uselocale(v7);
  freelocale(v5);
  return v12;
}

id WFTypeCheckObject(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = a1;
  if (!v3 || (objc_opt_isKindOfClass() & 1) != 0)
  {
    id v4 = v3;
LABEL_4:
    id v5 = v4;
    goto LABEL_5;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (objc_opt_class() == a2 || objc_opt_class() == a2 || objc_opt_class() == a2 || objc_opt_class() == a2)
    {
      id v7 = [MEMORY[0x263F08AC0] propertyListWithData:v3 options:0 format:0 error:0];
      if (v7 && (objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v8 = getWFGeneralLogObject();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        {
          int v15 = 136315906;
          uint64_t v16 = "WFEnforceClass";
          __int16 v17 = 2114;
          id v18 = v7;
          __int16 v19 = 2114;
          id v20 = (id)objc_opt_class();
          __int16 v21 = 2114;
          uint64_t v22 = a2;
          id v9 = v20;
          _os_log_impl(&dword_216505000, v8, OS_LOG_TYPE_FAULT, "%s Warning: %{public}@ is of type %{public}@, not %{public}@! Falling back to nil.", (uint8_t *)&v15, 0x2Au);
        }
        id v5 = 0;
      }
      else
      {
        id v5 = v7;
      }
    }
    else
    {
      if (objc_opt_class() == a2)
      {
        objc_msgSend(NSString, "wf_stringWithData:", v3);
        id v4 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_4;
      }
      if (objc_opt_class() != a2) {
        goto LABEL_15;
      }
      uint64_t v14 = NSURL;
      id v7 = (id)[[NSString alloc] initWithData:v3 encoding:4];
      id v5 = [v14 URLWithString:v7];
    }

    goto LABEL_5;
  }
LABEL_15:
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (objc_opt_class() == a2)
    {
      int v10 = (void *)MEMORY[0x263F087B0];
      uint64_t v11 = [MEMORY[0x263EFF960] currentLocale];
      id v5 = [v10 decimalNumberWithString:v3 locale:v11];

      if (v5)
      {
        uint64_t v12 = [MEMORY[0x263F087B0] notANumber];
        char v13 = [v5 isEqual:v12];

        if ((v13 & 1) == 0) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      if (objc_opt_class() == a2)
      {
        id v4 = [v3 dataUsingEncoding:4];
        goto LABEL_4;
      }
      if (objc_opt_class() == a2)
      {
        id v4 = [NSURL URLWithString:v3];
        goto LABEL_4;
      }
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_opt_class() == a2)
  {
    id v4 = [v3 description];
    goto LABEL_4;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_opt_class() == a2)
  {
    id v4 = [v3 absoluteString];
    goto LABEL_4;
  }
  id v5 = 0;
LABEL_5:

  return v5;
}

id WFLocalizedString(void *a1)
{
  id v1 = a1;
  id v2 = WFCurrentBundle();
  id v3 = [v2 localizedStringForKey:v1 value:v1 table:0];

  return v3;
}

id WFCurrentBundle()
{
  if (WFCurrentBundle_onceToken != -1) {
    dispatch_once(&WFCurrentBundle_onceToken, &__block_literal_global_19672);
  }
  uint64_t v0 = (void *)WFCurrentBundle_bundle;
  return v0;
}

void __WFCurrentBundle_block_invoke()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  memset(&v4, 0, sizeof(v4));
  if (dladdr(WFCurrentBundle, &v4) && v4.dli_fname)
  {
    uint64_t v0 = [objc_alloc(NSURL) initFileURLWithFileSystemRepresentation:v4.dli_fname isDirectory:0 relativeToURL:0];
    id v1 = (void *)_CFBundleCopyBundleURLForExecutableURL();
    uint64_t v2 = [MEMORY[0x263F086E0] bundleWithURL:v1];
    id v3 = (void *)WFCurrentBundle_bundle;
    WFCurrentBundle_bundle = v2;
  }
  else
  {
    uint64_t v0 = getWFGeneralLogObject();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      locale_t v6 = "WFCurrentBundle_block_invoke";
      _os_log_impl(&dword_216505000, v0, OS_LOG_TYPE_ERROR, "%s WFLocalizedString failed to locate current bundle", buf, 0xCu);
    }
  }
}

id WFLocalizedStringWithKey(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = WFCurrentBundle();
  locale_t v6 = [v5 localizedStringForKey:v4 value:v3 table:0];

  return v6;
}

id WFLocalizedPluralString(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    uint64_t v2 = NSString;
    id v3 = [v1 stringByReplacingOccurrencesOfString:@"\n" withString:@" "];
    id v4 = [v2 stringWithFormat:@"%@ (Pluralization)", v3];

    id v5 = WFCurrentBundle();
    id v6 = [v5 localizedStringForKey:v4 value:v1 table:0];
  }
  else
  {
    id v6 = v1;
  }

  return v6;
}

id WFLocalizedContentPropertyNameMarker(void *a1)
{
  id v1 = NSString;
  id v2 = a1;
  id v3 = [v1 stringWithFormat:@"%@ (Content Property Name)", v2];
  id v4 = WFDeferrableLocalizedStringWithKey(v3, v2);

  return v4;
}

id WFDeferrableLocalizedStringWithKey(void *a1, void *a2)
{
  id v3 = (objc_class *)MEMORY[0x263F85250];
  id v4 = a2;
  id v5 = a1;
  id v6 = (void *)[[v3 alloc] initWithString:v4];
  uint64_t v7 = WFCurrentBundle();
  uint64_t v8 = [v7 localizedStringForKey:v5 value:v4 table:0];
  [v6 setLocalizedValue:v8];

  id v9 = WFLocalizedStringResourceWithKey(v5, v4);

  [v6 setStringResource:v9];
  return v6;
}

id WFLocalizedStringResourceWithKey(void *a1, void *a2)
{
  id v3 = (objc_class *)MEMORY[0x263F08DB0];
  id v4 = a2;
  id v5 = a1;
  id v6 = [v3 alloc];
  uint64_t v7 = [MEMORY[0x263EFF960] autoupdatingCurrentLocale];
  uint64_t v8 = WFCurrentBundle();
  id v9 = [v8 bundleURL];
  int v10 = (void *)[v6 initWithKey:v5 defaultValue:v4 table:0 locale:v7 bundleURL:v9];

  return v10;
}

id WFLocalizedContentPropertyNameMarkerWithContext(void *a1, uint64_t a2)
{
  id v3 = NSString;
  id v4 = a1;
  id v5 = [v3 stringWithFormat:@"%@ (%@) (Content Property Name)", v4, a2];
  id v6 = WFDeferrableLocalizedStringWithKey(v5, v4);

  return v6;
}

id WFLocalizedContentPropertyPossibleValueMarker(void *a1)
{
  id v1 = NSString;
  id v2 = a1;
  id v3 = [v1 stringWithFormat:@"%@ (Content Property Possible Value)", v2];
  id v4 = WFDeferrableLocalizedStringWithKey(v3, v2);

  return v4;
}

id WFLocalizedContentPropertyName(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = [v1 localizedValue];
  }
  else
  {
    id v3 = [NSString stringWithFormat:@"%@ (Content Property Name)", v1];
    id v2 = WFLocalizedStringWithKey(v3, v1);
  }
  return v2;
}

uint64_t dophn_core(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t __fd, off_t a5, uint64_t a6, uint64_t __nbyte, uint64_t a8, int *a9, _WORD *a10)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  if ((*(_WORD *)(a1 + 68) & 0x410) != 0) {
    return 0;
  }
  int v11 = a6;
  if (!a6)
  {
    unsigned int v48 = ", no program header";
    goto LABEL_50;
  }
  ssize_t v13 = __nbyte;
  uint64_t v15 = 56;
  if (a2 == 1) {
    uint64_t v15 = 32;
  }
  if (v15 != __nbyte)
  {
    unsigned int v48 = ", corrupted program header size";
LABEL_50:
    if (file_printf(a1, v48, a3, __fd, a5, a6, __nbyte, a8, v55) == -1) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
  int v17 = __fd;
  long long v61 = 0u;
  long long v62 = 0u;
  memset(v58, 0, sizeof(v58));
  __int16 v19 = v58;
  if (a2 == 1) {
    __int16 v19 = &v61;
  }
  __buf = v19;
  long long v59 = 0uLL;
  off_t v21 = a5;
  int v22 = a6;
  uint64_t v60 = 0;
  while (1)
  {
    if (pread(v17, __buf, v13, v21) < v13)
    {
      uint64_t v49 = __error();
      file_error(a1, *v49, "error reading", v50, v51, v52, v53, v54, v55);
      return 0xFFFFFFFFLL;
    }
    if (a8 == -1) {
      break;
    }
    if (a2 == 1)
    {
      unsigned int v23 = bswap32(DWORD1(v61));
      int64_t v24 = a3 ? v23 : DWORD1(v61);
    }
    else
    {
      int64_t v24 = *((void *)&v58[0] + 1);
      unint64_t v25 = bswap64(*((unint64_t *)&v58[0] + 1));
      if (a3) {
        int64_t v24 = v25;
      }
    }
    if (v24 <= a8) {
      break;
    }
LABEL_46:
    ssize_t v13 = __nbyte;
    v21 += __nbyte;
    if (!--v22) {
      return 0;
    }
  }
  if (a2 == 1)
  {
    unsigned int v26 = v61;
    unsigned int v27 = bswap32(v61);
    if (a3) {
      unsigned int v26 = v27;
    }
    if (v26 != 4) {
      goto LABEL_46;
    }
    unsigned int v28 = v62;
    unsigned int v29 = bswap32(v62);
    if (a3) {
      unsigned int v28 = v29;
    }
    unsigned int v30 = bswap32(DWORD1(v61));
    if (a3) {
      off_t v31 = v30;
    }
    else {
      off_t v31 = DWORD1(v61);
    }
    if (v28 >= 0x400) {
      size_t v32 = 1024;
    }
    else {
      size_t v32 = v28;
    }
  }
  else
  {
    unsigned int v33 = v58[0];
    unsigned int v34 = bswap32(v58[0]);
    if (a3) {
      unsigned int v33 = v34;
    }
    if (v33 != 4) {
      goto LABEL_46;
    }
    unint64_t v35 = v59;
    unint64_t v36 = bswap64(v59);
    if (a3) {
      unint64_t v35 = v36;
    }
    unint64_t v37 = bswap64(*((unint64_t *)&v58[0] + 1));
    if (a3) {
      off_t v31 = v37;
    }
    else {
      off_t v31 = *((void *)&v58[0] + 1);
    }
    if (v35 >= 0x400) {
      size_t v32 = 1024;
    }
    else {
      size_t v32 = v35;
    }
  }
  ssize_t v38 = pread(v17, v63, v32, v31);
  if (v38 != -1)
  {
    unint64_t v46 = v38;
    unint64_t v47 = 0;
    do
    {
      if (v47 >= v46) {
        break;
      }
      unint64_t v47 = donote(a1, (uint64_t)v63, v47, v46, a2, a3, 4uLL, a9, a10, v17, a5, v11, a8);
    }
    while (v47);
    goto LABEL_46;
  }
  file_badread(a1, v39, v40, v41, v42, v43, v44, v45, v55);
  return 0xFFFFFFFFLL;
}

uint64_t dophn_exec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t __fd, off_t a5, uint64_t a6, uint64_t __nbyte, uint64_t a8, int a9, int *a10, _WORD *a11)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  if (!a6)
  {
    uint64_t v63 = ", no program header";
    goto LABEL_108;
  }
  ssize_t v12 = __nbyte;
  uint64_t v14 = 56;
  if (a2 == 1) {
    uint64_t v14 = 32;
  }
  if (v14 != __nbyte)
  {
    uint64_t v63 = ", corrupted program header size";
LABEL_108:
    if (file_printf(a1, v63, a3, __fd, a5, a6, __nbyte, a8, v76) == -1) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
  uint64_t v15 = a8;
  int v16 = a6;
  off_t v17 = a5;
  int v18 = __fd;
  id v20 = v81;
  if (a2 == 1) {
    id v20 = &v84;
  }
  __buf = v20;
  if (a2 == 1) {
    uint64_t v21 = 8;
  }
  else {
    uint64_t v21 = 16;
  }
  long long v84 = 0uLL;
  long long v85 = 0uLL;
  int v78 = "statically";
  memset(v81, 0, sizeof(v81));
  long long v82 = 0uLL;
  unint64_t v83 = 0;
  v87[0] = 0;
  do
  {
    if (pread(v18, __buf, v12, v17) < v12)
    {
LABEL_111:
      uint64_t v64 = __error();
      file_error(a1, *v64, "error reading", v65, v66, v67, v68, v69, v76);
      return 0xFFFFFFFFLL;
    }
    unsigned int v28 = (unsigned int *)v81;
    if (a2 == 1) {
      unsigned int v28 = (unsigned int *)&v84;
    }
    unsigned int v29 = *v28;
    unsigned int v30 = bswap32(v29);
    if (a3) {
      unsigned int v31 = v30;
    }
    else {
      unsigned int v31 = v29;
    }
    if (v31 == 2)
    {
      int v78 = "dynamically";
      goto LABEL_28;
    }
    unint64_t v32 = 4;
    if (v31 == 3) {
      goto LABEL_29;
    }
    if (v31 == 4)
    {
      if (a9) {
        goto LABEL_99;
      }
      if (a2 == 1)
      {
        unsigned int v33 = bswap32(HIDWORD(v85));
        if (!a3) {
          unsigned int v33 = HIDWORD(v85);
        }
        if (HIDWORD(v85)) {
          unint64_t v32 = v33;
        }
        else {
          unint64_t v32 = 4;
        }
      }
      else if (v83)
      {
        unint64_t v61 = bswap64(v83);
        if (a3) {
          unint64_t v32 = v61;
        }
        else {
          unint64_t v32 = v83;
        }
      }
      else
      {
        unint64_t v32 = 4;
      }
      if (v32 < 4 || (v32 & 0x80000000) != 0)
      {
        uint64_t result = file_printf(a1, ", invalid note alignment %#lx", v22, v23, v24, v25, v26, v27, v32);
        if (result == -1) {
          return result;
        }
LABEL_28:
        unint64_t v32 = 4;
      }
LABEL_29:
      if (a2 == 1)
      {
        unsigned int v34 = v85;
        unsigned int v35 = bswap32(v85);
        if (a3) {
          unsigned int v34 = v35;
        }
        unsigned int v36 = bswap32(DWORD1(v84));
        if (a3) {
          off_t v37 = v36;
        }
        else {
          off_t v37 = DWORD1(v84);
        }
        if (v34 >= 0x400) {
          size_t v38 = 1024;
        }
        else {
          size_t v38 = v34;
        }
      }
      else
      {
        unint64_t v39 = v82;
        unint64_t v40 = bswap64(v82);
        if (a3) {
          unint64_t v39 = v40;
        }
        unint64_t v41 = bswap64(*((unint64_t *)&v81[0] + 1));
        if (a3) {
          off_t v37 = v41;
        }
        else {
          off_t v37 = *((void *)&v81[0] + 1);
        }
        if (v39 >= 0x400) {
          size_t v38 = 1024;
        }
        else {
          size_t v38 = v39;
        }
      }
      ssize_t v42 = pread(v18, v90, v38, v37);
      if (v42 == -1) {
        goto LABEL_111;
      }
      unint64_t v43 = v42;
      uint64_t v44 = (unsigned int *)v81;
      if (a2 == 1) {
        uint64_t v44 = (unsigned int *)&v84;
      }
      unsigned int v29 = *v44;
      unsigned int v30 = bswap32(v29);
      goto LABEL_59;
    }
    if (v15 != -1)
    {
      if (a2 == 1)
      {
        unsigned int v45 = bswap32(DWORD1(v84));
        int64_t v46 = a3 ? v45 : DWORD1(v84);
      }
      else
      {
        int64_t v46 = *((void *)&v81[0] + 1);
        unint64_t v47 = bswap64(*((unint64_t *)&v81[0] + 1));
        if (a3) {
          int64_t v46 = v47;
        }
      }
      if (v46 > v15) {
        goto LABEL_99;
      }
    }
    unint64_t v43 = 0;
    unint64_t v32 = 4;
LABEL_59:
    if (a3) {
      unsigned int v29 = v30;
    }
    switch(v29)
    {
      case 4u:
        if ((*(_WORD *)(a1 + 68) & 0x410) != 0) {
          return 0;
        }
        unint64_t v22 = 0;
        do
        {
          if (v22 >= v43) {
            break;
          }
          unint64_t v22 = donote(a1, (uint64_t)v90, v22, v43, a2, a3, v32, a10, a11, v18, 0, 0, 0);
        }
        while (v22);
        break;
      case 3u:
        if ((*(_WORD *)(a1 + 68) & 0x410) == 0)
        {
          if (v43 && v90[0])
          {
            v90[v43 - 1] = 0;
            __memcpy_chk();
          }
          else
          {
            __strlcpy_chk();
          }
        }
        break;
      case 2u:
        unint64_t v48 = 0;
        int v49 = *(unsigned __int16 *)(a1 + 96);
        unsigned int v50 = v49 & 0xFFFFFFB6;
        *(_WORD *)(a1 + 96) = v49 & 0xFFB6;
        while (1)
        {
          if (v48 >= v43)
          {
LABEL_83:
            uint64_t v15 = a8;
            goto LABEL_98;
          }
          unint64_t v51 = v48 + v21;
          if (v48 + v21 <= v43)
          {
            uint64_t v86 = 0;
            unint64_t v89 = 0;
            unint64_t v88 = 0;
            __memcpy_chk();
            if (a2 == 1)
            {
              unsigned int v52 = v86;
              unsigned int v53 = bswap32(v86);
              if (a3) {
                unsigned int v52 = v53;
              }
              if (v52 != 1879048187) {
                goto LABEL_82;
              }
              unsigned int v54 = HIDWORD(v86);
              unsigned int v55 = bswap32(HIDWORD(v86));
              if (a3) {
                unsigned int v54 = v55;
              }
            }
            else
            {
              unint64_t v56 = v88;
              unint64_t v57 = bswap64(v88);
              if (a3) {
                unint64_t v56 = v57;
              }
              if (v56 != 1879048187) {
                goto LABEL_82;
              }
              unsigned int v54 = v89;
              unsigned int v58 = bswap64(v89);
              if (a3) {
                unsigned int v54 = v58;
              }
            }
            unsigned int v59 = v50 & 0xFFFFFFB6;
            if ((v54 & 0x8000000) != 0) {
              int v60 = 73;
            }
            else {
              int v60 = 0;
            }
            unsigned int v50 = v60 | v59;
            *(_WORD *)(a1 + 96) = v60 | v59;
          }
LABEL_82:
          unint64_t v48 = v51;
          if (!v51) {
            goto LABEL_83;
          }
        }
      default:
        break;
    }
LABEL_98:
    ssize_t v12 = __nbyte;
LABEL_99:
    v17 += v12;
    --v16;
  }
  while (v16);
  if ((*(_WORD *)(a1 + 68) & 0x410) != 0) {
    return 0;
  }
  uint64_t result = file_printf(a1, ", %s linked", v22, v23, v24, v25, v26, v27, (char)v78);
  if (result != -1)
  {
    if (!v87[0]) {
      return 0;
    }
    file_printable(&v88, 1024, (uint64_t)v87, 1024);
    uint64_t result = file_printf(a1, ", interpreter %s", v70, v71, v72, v73, v74, v75, (char)&v88);
    if (result != -1) {
      return 0;
    }
  }
  return result;
}

uint64_t doshn(uint64_t a1, int a2, uint64_t a3, uint64_t __fd, uint64_t a5, uint64_t a6, uint64_t __nbyte, uint64_t a8, unsigned int a9, unsigned int a10, int *a11, _WORD *a12)
{
  uint64_t v153 = *MEMORY[0x263EF8340];
  if ((*(_WORD *)(a1 + 68) & 0x410) != 0) {
    return 0;
  }
  int v13 = a6;
  if (!a6)
  {
    uint64_t v23 = ", no section header";
    goto LABEL_14;
  }
  uint64_t v17 = 64;
  if (a2 == 1) {
    uint64_t v17 = 40;
  }
  if (v17 != __nbyte)
  {
    uint64_t v23 = ", corrupted section header size";
    goto LABEL_14;
  }
  off_t v19 = a5;
  int v20 = __fd;
  uint64_t v149 = 0;
  long long v147 = 0u;
  long long v148 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  long long v145 = 0u;
  long long v146 = 0u;
  if (a2 == 1) {
    unint64_t v22 = &v147;
  }
  else {
    unint64_t v22 = &v143;
  }
  if (pread(__fd, v22, __nbyte, a5 + a10 * __nbyte) < __nbyte)
  {
    uint64_t v23 = ", missing section headers";
LABEL_14:
    int v24 = file_printf(a1, v23, a3, __fd, a5, a6, __nbyte, a8, v133);
    goto LABEL_15;
  }
  if (a2 == 1)
  {
    unsigned int v25 = bswap32(v148);
    if (a3) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = v148;
    }
  }
  else
  {
    uint64_t v26 = *((void *)&v144 + 1);
    unint64_t v27 = bswap64(*((unint64_t *)&v144 + 1));
    if (a3) {
      uint64_t v26 = v27;
    }
  }
  uint64_t v140 = v26;
  if (a8 != -1 && v26 > a8)
  {
    int v24 = file_printf(a1, ", too large section header offset %jd", a3, __fd, a5, a6, __nbyte, a8, v26);
    goto LABEL_15;
  }
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  unint64_t v139 = 0;
  int v142 = 0;
  uint64_t v136 = v22;
  uint64_t v28 = 16;
  if (a2 == 1) {
    uint64_t v28 = 8;
  }
  size_t v141 = v28;
  int32x2_t v29 = vdup_n_s32(a3 == 0);
  int8x8_t v30 = (int8x8_t)vcltz_s32(vshl_n_s32(v29, 0x1FuLL));
  v31.i64[0] = v29.u32[0];
  v31.i64[1] = v29.u32[1];
  int8x16_t v135 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v31, 0x3FuLL));
  int v32 = 1;
  do
  {
    int64_t v33 = (int64_t)&v143;
    if (a2 == 1) {
      int64_t v33 = (int64_t)&v147;
    }
    LODWORD(v33) = *(_DWORD *)v33;
    unsigned int v34 = bswap32(v33);
    if (a3) {
      int64_t v33 = v34;
    }
    else {
      int64_t v33 = v33;
    }
    ssize_t v35 = pread(v20, &__buf, 0x31uLL, v140 + v33);
    if (v35 == -1) {
      goto LABEL_178;
    }
    *((unsigned char *)&__buf + v35) = 0;
    uint64_t v43 = __buf ^ 0x695F67756265642ELL | v152 ^ 0x6F666ELL;
    BOOL v44 = v43 == 0;
    if (!v43) {
      int v32 = 0;
    }
    int v45 = v142;
    if (v44) {
      int v45 = 1;
    }
    int v142 = v45;
    if (pread(v20, v22, __nbyte, v19) < __nbyte)
    {
LABEL_178:
      file_badread(a1, v36, v37, v38, v39, v40, v41, v42, v133);
      return 0xFFFFFFFFLL;
    }
    if (a2 == 1)
    {
      unsigned int v46 = DWORD1(v147);
      unsigned int v47 = bswap32(DWORD1(v147));
      if (a3) {
        unsigned int v46 = v47;
      }
      if (v46 == 2) {
        int v48 = 0;
      }
      else {
        int v48 = v32;
      }
      if (a8 == -1 || v46 == 2) {
        goto LABEL_65;
      }
      unsigned int v49 = bswap32(v148);
      if (a3) {
        uint64_t v50 = v49;
      }
      else {
        uint64_t v50 = v148;
      }
    }
    else
    {
      unsigned int v46 = DWORD1(v143);
      unsigned int v51 = bswap32(DWORD1(v143));
      if (a3) {
        unsigned int v46 = v51;
      }
      if (v46 == 2) {
        int v48 = 0;
      }
      else {
        int v48 = v32;
      }
      if (a8 == -1 || v46 == 2)
      {
LABEL_65:
        int v32 = v48;
        goto LABEL_66;
      }
      uint64_t v50 = *((void *)&v144 + 1);
      unint64_t v52 = bswap64(*((unint64_t *)&v144 + 1));
      if (a3) {
        uint64_t v50 = v52;
      }
    }
    if (v50 > a8) {
      goto LABEL_124;
    }
LABEL_66:
    if (v46 != 1879048181)
    {
      if (v46 != 7) {
        goto LABEL_124;
      }
      if (a2 == 1)
      {
        unsigned int v53 = bswap32(DWORD1(v148));
        if (a3) {
          size_t v54 = v53;
        }
        else {
          size_t v54 = DWORD1(v148);
        }
        LODWORD(v55) = bswap32(v148);
        if (a3) {
          unint64_t v55 = v55;
        }
        else {
          unint64_t v55 = v148;
        }
        if (v55 + v54 <= a8)
        {
          unint64_t v56 = malloc_type_malloc(v54, 0x7F7EC93EuLL);
          if (v56)
          {
            unint64_t v57 = v56;
            unsigned int v58 = bswap32(DWORD1(v148));
            if (a3) {
              size_t v59 = v58;
            }
            else {
              size_t v59 = DWORD1(v148);
            }
            unsigned int v60 = bswap32(v148);
            if (a3) {
              off_t v61 = v60;
            }
            else {
              off_t v61 = v148;
            }
            ssize_t v62 = pread(v20, v56, v59, v61);
            unsigned int v70 = bswap32(DWORD1(v148));
            if (a3) {
              ssize_t v71 = v70;
            }
            else {
              ssize_t v71 = DWORD1(v148);
            }
LABEL_108:
            if (v62 >= v71)
            {
              uint64_t v82 = 0;
              while (1)
              {
                if (a2 == 1)
                {
                  unsigned int v83 = bswap32(DWORD1(v148));
                  if (a3) {
                    int64_t v84 = v83;
                  }
                  else {
                    int64_t v84 = DWORD1(v148);
                  }
                  if (v82 >= v84) {
                    goto LABEL_122;
                  }
                  unint64_t v85 = donote(a1, (uint64_t)v57, v82, v84, 1, a3, 4uLL, a11, a12, v20, 0, 0, 0);
                }
                else
                {
                  unint64_t v86 = bswap64(v145);
                  if (a3) {
                    int64_t v87 = v86;
                  }
                  else {
                    int64_t v87 = v145;
                  }
                  if (v82 >= v87)
                  {
LABEL_122:
                    free(v57);
                    goto LABEL_123;
                  }
                  unint64_t v85 = donote(a1, (uint64_t)v57, v82, v87, 2, a3, 4uLL, a11, a12, v20, 0, 0, 0);
                }
                uint64_t v82 = v85;
                if (!v85) {
                  goto LABEL_122;
                }
              }
            }
            file_badread(a1, v63, v64, v65, v66, v67, v68, v69, v133);
            free(v57);
            return 0xFFFFFFFFLL;
          }
LABEL_191:
          uint64_t v118 = __error();
          file_error(a1, *v118, "Cannot allocate memory for note", v119, v120, v121, v122, v123, v133);
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        unint64_t v74 = bswap64(v145);
        if (a3) {
          size_t v75 = v74;
        }
        else {
          size_t v75 = v145;
        }
        unint64_t v55 = bswap64(*((unint64_t *)&v144 + 1));
        if (!a3) {
          unint64_t v55 = *((void *)&v144 + 1);
        }
        if (v55 + v75 <= a8)
        {
          char v76 = malloc_type_malloc(v75, 0x7F7EC93EuLL);
          if (v76)
          {
            unint64_t v57 = v76;
            unint64_t v77 = bswap64(v145);
            if (a3) {
              size_t v78 = v77;
            }
            else {
              size_t v78 = v145;
            }
            unint64_t v79 = bswap64(*((unint64_t *)&v144 + 1));
            if (a3) {
              off_t v80 = v79;
            }
            else {
              off_t v80 = *((void *)&v144 + 1);
            }
            ssize_t v62 = pread(v20, v76, v78, v80);
            ssize_t v71 = v145;
            unint64_t v81 = bswap64(v145);
            if (a3) {
              ssize_t v71 = v81;
            }
            goto LABEL_108;
          }
          goto LABEL_191;
        }
      }
      int v24 = file_printf(a1, ", note offset/size %#jx+%#jx exceeds file size %#jx", v37, v38, v39, v40, v41, v42, v55);
LABEL_15:
      if (v24 == -1) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 0;
      }
    }
    if (a9 <= 0x3E && ((1 << a9) & 0x400408000000000CLL) != 0 && v139 <= 5)
    {
      if (a2 == 1)
      {
        unsigned int v72 = bswap32(v148);
        if (a3) {
          off_t v73 = v72;
        }
        else {
          off_t v73 = v148;
        }
      }
      else
      {
        unint64_t v88 = bswap64(*((unint64_t *)&v144 + 1));
        if (a3) {
          off_t v73 = v88;
        }
        else {
          off_t v73 = *((void *)&v144 + 1);
        }
      }
      if (lseek(v20, v73, 0) != -1)
      {
        int64_t v91 = 0;
        while (1)
        {
          if (a2 == 1)
          {
            unsigned int v92 = bswap32(DWORD1(v148));
            if (a3) {
              int64_t v93 = v92;
            }
            else {
              int64_t v93 = DWORD1(v148);
            }
          }
          else
          {
            int64_t v93 = v145;
            unint64_t v94 = bswap64(v145);
            if (a3) {
              int64_t v93 = v94;
            }
          }
          uint64_t v37 = v141;
          v91 += v141;
          if (v91 > v93) {
            goto LABEL_123;
          }
          ssize_t v95 = read(v20, v150, v141);
          uint64_t v37 = v141;
          if (v95 != v141) {
            goto LABEL_178;
          }
          if (v150[0] == 65)
          {
LABEL_123:
            unint64_t v22 = v136;
            goto LABEL_124;
          }
          __memcpy_chk();
          if (a2 == 1)
          {
            unsigned int v97 = bswap32(0);
            if (a3) {
              unint64_t v98 = v97;
            }
            else {
              unint64_t v98 = 0;
            }
            if (!v98) {
              continue;
            }
          }
          else
          {
            unint64_t v98 = 0;
            unint64_t v99 = bswap64(0);
            if (a3) {
              unint64_t v98 = v99;
            }
            if (!v98) {
              continue;
            }
          }
          if (v98 == 2)
          {
            if (a2 == 1)
            {
              unsigned int v102 = bswap32(0);
              if (a3) {
                unint64_t v103 = v102;
              }
              else {
                unint64_t v103 = 0;
              }
            }
            else
            {
              unint64_t v103 = 0;
              unint64_t v106 = bswap64(0);
              if (a3) {
                unint64_t v103 = v106;
              }
            }
            v138 |= v103;
          }
          else if (v98 == 1)
          {
            if (a2 == 1)
            {
              unsigned int v100 = bswap32(0);
              if (a3) {
                unint64_t v101 = v100;
              }
              else {
                unint64_t v101 = 0;
              }
            }
            else
            {
              unint64_t v101 = 0;
              unint64_t v105 = bswap64(0);
              if (a3) {
                unint64_t v101 = v105;
              }
            }
            v137 |= v101;
          }
          else
          {
            if (a2 == 1) {
              char v104 = vbsl_s8(v30, 0, vrev32_s8(0)).u8[0];
            }
            else {
              char v104 = vbslq_s8(v135, (int8x16_t)0, vrev64q_s8((int8x16_t)0)).u8[0];
            }
            if (file_printf(a1, ", with unknown capability %#llx = %#llx", v96, v38, v39, v40, v41, v42, v104) == -1)return 0xFFFFFFFFLL; {
            if (v139 >= 3)
            }
            {
              if (a2 == 1)
              {
                unsigned int v107 = bswap32(DWORD1(v148));
                if (a3) {
                  int64_t v91 = v107;
                }
                else {
                  int64_t v91 = DWORD1(v148);
                }
              }
              else
              {
                unint64_t v108 = bswap64(v145);
                if (a3) {
                  int64_t v91 = v108;
                }
                else {
                  int64_t v91 = v145;
                }
              }
            }
            ++v139;
          }
        }
      }
      file_badseek(a1, v89, v90, v38, v39, v40, v41, v42, v133);
      return 0xFFFFFFFFLL;
    }
LABEL_124:
    v19 += __nbyte;
    --v13;
  }
  while (v13);
  if (v142)
  {
    uint64_t result = file_printf(a1, ", with debug_info", v37, v38, v39, v40, v41, v42, v133);
    if (result == -1) {
      return result;
    }
  }
  unint64_t v109 = "";
  if (!v32) {
    unint64_t v109 = "not ";
  }
  uint64_t result = file_printf(a1, ", %sstripped", v37, v38, v39, v40, v41, v42, (char)v109);
  if (result == -1) {
    return result;
  }
  uint64_t v116 = v137;
  if (!v137) {
    goto LABEL_206;
  }
  if (a9 > 0x3E) {
    goto LABEL_203;
  }
  if (((1 << a9) & 0x80000040004) == 0)
  {
    if (((1 << a9) & 0x4004000000000008) != 0)
    {
      int v117 = &cap_desc_386;
      goto LABEL_194;
    }
LABEL_203:
    uint64_t result = file_printf(a1, ", uses", v110, v111, v112, v113, v114, v115, v134);
    if (result != -1)
    {
      uint64_t result = file_printf(a1, " hardware capability %#llx", v126, v127, v128, v129, v130, v131, v137);
LABEL_205:
      if (result != -1) {
        goto LABEL_206;
      }
    }
    return result;
  }
  int v117 = &cap_desc_sparc;
LABEL_194:
  uint64_t result = file_printf(a1, ", uses", v110, v111, v112, v113, v114, v115, v134);
  if (result != -1)
  {
    uint64_t v124 = v117[1];
    if (!v124) {
      goto LABEL_201;
    }
    do
    {
      uint64_t v125 = *v117;
      if ((*v117 & v116) != 0)
      {
        uint64_t result = file_printf(a1, " %s", v110, v111, v112, v113, v114, v115, v124);
        if (result == -1) {
          return result;
        }
        v116 &= ~v125;
      }
      uint64_t v124 = v117[3];
      v117 += 2;
    }
    while (v124);
    if (v116)
    {
LABEL_201:
      uint64_t result = file_printf(a1, " unknown hardware capability %#llx", v110, v111, v112, v113, v114, v115, v116);
      goto LABEL_205;
    }
LABEL_206:
    if (!v138) {
      return 0;
    }
    if ((v138 & 2) == 0
      || ((v138 & 1) != 0 ? (char v132 = ", uses frame pointer") : (char v132 = ", not known to use frame pointer"),
          uint64_t result = file_printf(a1, v132, v110, v111, v112, v113, v114, v115, v134),
          result != -1))
    {
      if ((v138 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
        return 0;
      }
      uint64_t result = file_printf(a1, ", with unknown software capability %#llx", v110, v111, v112, v113, v114, v115, v138 & 0xFC);
      if (result != -1) {
        return 0;
      }
    }
  }
  return result;
}

unint64_t donote(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, int *a8, _WORD *a9, int a10, off_t a11, int a12, int64_t a13)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  if (!*a9) {
    return 0;
  }
  --*a9;
  unint64_t v14 = a3 + 12;
  if (a3 + 12 > a4) {
    return a3 + 12;
  }
  int v16 = a6;
  int v17 = a5;
  int v79 = 0;
  uint64_t v78 = 0;
  uint64_t v76 = 0;
  int v77 = 0;
  off_t v19 = &v76;
  if (a5 == 1) {
    off_t v19 = &v78;
  }
  uint64_t v20 = *(void *)(a2 + a3);
  *off_t v19 = v20;
  *((_DWORD *)v19 + 2) = *(_DWORD *)(a2 + a3 + 8);
  unsigned int v21 = bswap32(v20);
  if (a6) {
    unsigned int v22 = v21;
  }
  else {
    unsigned int v22 = v20;
  }
  unsigned int v23 = bswap32(HIDWORD(v20));
  if (a6) {
    unsigned int v24 = v23;
  }
  else {
    unsigned int v24 = HIDWORD(v20);
  }
  if (!(v22 | v24))
  {
    if (v14 <= a4) {
      return a4;
    }
    else {
      return a3 + 12;
    }
  }
  if ((v22 & 0x80000000) != 0)
  {
    int v29 = file_printf(a1, ", bad note name size %#lx", a3, a4, a5, a6, a7, (uint64_t)a8, v22);
    goto LABEL_23;
  }
  if ((v24 & 0x80000000) != 0)
  {
    int v29 = file_printf(a1, ", bad note description size %#lx", a3, a4, a5, a6, a7, (uint64_t)a8, v24);
LABEL_23:
    if (v29 == -1) {
      return -1;
    }
    else {
      return 0;
    }
  }
  unint64_t v27 = v14 + v22;
  uint64_t v28 = (a7 - 1 + v27) / a7 * a7;
  if (v27 > a4) {
    return (a7 - 1 + v27) / a7 * a7;
  }
  unint64_t v30 = v28 + v24;
  unint64_t v15 = (a7 - 1 + v30) / a7 * a7;
  if (v30 <= a4)
  {
    int v32 = *a8;
    uint64_t v75 = v28;
    if ((*a8 & 8) == 0)
    {
      int64_t v33 = (unsigned int *)&v77;
      if (a5 == 1) {
        int64_t v33 = (unsigned int *)&v79;
      }
      unsigned int v34 = *v33;
      unsigned int v35 = bswap32(v34);
      if (a6) {
        int v36 = v35;
      }
      else {
        int v36 = v34;
      }
      if (do_os_note(a1, a2, v36, a6, v22, v24, v14, v28, a8)) {
        return v15;
      }
      int v32 = *a8;
      uint64_t v28 = v75;
    }
    if ((v32 & 0x10) == 0)
    {
      uint64_t v37 = (unsigned int *)&v77;
      if (v17 == 1) {
        uint64_t v37 = (unsigned int *)&v79;
      }
      unsigned int v38 = *v37;
      unsigned int v39 = bswap32(v38);
      if (v16) {
        int v40 = v39;
      }
      else {
        int v40 = v38;
      }
      if (do_bid_note(a1, a2, v40, v22, v24, v14, v28, a8)) {
        return v15;
      }
      int v32 = *a8;
      uint64_t v28 = v75;
    }
    if ((v32 & 0x40) == 0)
    {
      uint64_t v41 = (unsigned int *)&v77;
      if (v17 == 1) {
        uint64_t v41 = (unsigned int *)&v79;
      }
      unsigned int v42 = *v41;
      unsigned int v43 = bswap32(v42);
      if (v16) {
        int v44 = v43;
      }
      else {
        int v44 = v42;
      }
      if (do_pax_note(a1, a2, v44, v16, v22, v24, v14, v28, a8)) {
        return v15;
      }
      int v32 = *a8;
      uint64_t v28 = v75;
    }
    if ((v32 & 4) == 0)
    {
      int v45 = (unsigned int *)&v77;
      if (v17 == 1) {
        int v45 = (unsigned int *)&v79;
      }
      unsigned int v46 = *v45;
      unsigned int v47 = bswap32(v46);
      if (v16) {
        int v48 = v47;
      }
      else {
        int v48 = v46;
      }
      unint64_t v74 = a4;
      uint64_t v49 = v28;
      if (do_core_note(a1, a2, v48, v16, v22, v24, v14, v28, (uint64_t)a8, v74, v17)) {
        return v15;
      }
      int v32 = *a8;
      uint64_t v28 = v49;
    }
    if ((v32 & 0x1000) != 0)
    {
      uint64_t v54 = v28;
      if (v22 != 7) {
        return v15;
      }
    }
    else
    {
      uint64_t v50 = (unsigned int *)&v77;
      if (v17 == 1) {
        uint64_t v50 = (unsigned int *)&v79;
      }
      unsigned int v51 = *v50;
      unsigned int v52 = bswap32(v51);
      if (v16) {
        int v53 = v52;
      }
      else {
        int v53 = v51;
      }
      uint64_t v54 = v28;
      int v55 = do_auxv_note(a1, a2, v53, v16, v24, v28, a8, v17, a10, a11, a12, a13);
      if (v22 != 7 || v55) {
        return v15;
      }
    }
    if (!strcmp((const char *)(a2 + v14), "NetBSD"))
    {
      if (v24 >= 0x64) {
        int v62 = 100;
      }
      else {
        int v62 = v24;
      }
      uint64_t v63 = (unsigned int *)&v77;
      if (v17 == 1) {
        uint64_t v63 = (unsigned int *)&v79;
      }
      unsigned int v64 = *v63;
      unsigned int v65 = bswap32(v64);
      if (!v16) {
        unsigned int v65 = v64;
      }
      uint64_t v66 = "compiled for";
      int v67 = 128;
      switch(v65)
      {
        case 1u:
          return v15;
        case 2u:
          uint64_t v66 = "emulation:";
          int v67 = 512;
          goto LABEL_86;
        case 5u:
          goto LABEL_86;
        case 6u:
          uint64_t v66 = "compiler model";
          int v67 = 256;
LABEL_86:
          if ((*a8 & v67) == 0)
          {
            *a8 |= v67;
            strlcpy(__dst, (const char *)(a2 + v54), (v62 + 1));
            file_printf(a1, ", %s: %s", v68, v69, v70, v71, v72, v73, (char)v66);
          }
          break;
        default:
          if ((*a8 & 0x400) == 0)
          {
            *a8 |= 0x400u;
            file_printf(a1, ", note=%u", v56, v57, v58, v59, v60, v61, v65);
          }
          break;
      }
    }
    return v15;
  }
  if (v15 <= a4) {
    return a4;
  }
  else {
    return (a7 - 1 + v30) / a7 * a7;
  }
}

uint64_t do_os_note(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v9 = 0;
  int v16 = (const char *)(a2 + a7);
  switch(a5)
  {
    case 4:
      int v17 = strcmp(v16, "GNU");
      uint64_t v9 = 0;
      if (a6 == 16 && a3 == 1 && !v17)
      {
        unsigned int v25 = *(_DWORD *)(a2 + a8);
        unsigned int v24 = *(_DWORD *)(a2 + a8 + 4);
        *a9 |= 8u;
        if (file_printf(a1, ", for GNU/", v18, v19, v20, v21, v22, v23, v111) != -1)
        {
          unsigned int v32 = bswap32(v25);
          unsigned int v33 = a4 ? v32 : v25;
          switch(v33)
          {
            case 0u:
              unsigned int v34 = "Linux";
              break;
            case 1u:
              unsigned int v34 = "Hurd";
              break;
            case 2u:
              unsigned int v34 = "Solaris";
              break;
            case 3u:
              unsigned int v34 = "kFreeBSD";
              break;
            case 4u:
              unsigned int v34 = "kNetBSD";
              break;
            default:
              unsigned int v34 = "<unknown>";
              break;
          }
          if (file_printf(a1, v34, v26, v27, v28, v29, v30, v31, v112) != -1)
          {
            char v104 = bswap32(v24);
            if (!a4) {
              char v104 = v24;
            }
            char v111 = v104;
            uint64_t v78 = " %d.%d.%d";
            goto LABEL_72;
          }
        }
        return 0xFFFFFFFFLL;
      }
      return v9;
    case 5:
      int v35 = strcmp(v16, "SuSE");
      uint64_t v9 = 0;
      if (a6 == 2 && a3 == 1 && !v35)
      {
        *a9 |= 8u;
        int v42 = file_printf(a1, ", for SuSE %d.%d", v36, v37, v38, v39, v40, v41, *(unsigned char *)(a2 + a8));
        goto LABEL_73;
      }
      return v9;
    case 7:
      uint64_t v9 = 0;
      if (!strcmp(v16, "NetBSD") && a3 == 1 && a6 == 4)
      {
        *a9 |= 8u;
        unsigned int v49 = bswap32(*(_DWORD *)(a2 + a8));
        if (a4) {
          unsigned int v50 = v49;
        }
        else {
          unsigned int v50 = *(_DWORD *)(a2 + a8);
        }
        if (file_printf(a1, ", for NetBSD", v43, v44, v45, v46, v47, v48, v111) == -1) {
          return 0xFFFFFFFFLL;
        }
        if (v50 <= 0x5F5E100) {
          return 1;
        }
        if (file_printf(a1, " %u.%u", v51, v52, v53, v54, v55, v56, v50 / 0x5F5E100) == -1) {
          return 0xFFFFFFFFLL;
        }
        unsigned int v63 = v50 / 0x2710 - 100 * ((42949673 * (unint64_t)(v50 / 0x2710)) >> 32);
        if (v63) {
          BOOL v64 = 1;
        }
        else {
          BOOL v64 = v50 / 0x64 == 100 * ((42949673 * (unint64_t)(v50 / 0x64)) >> 32);
        }
        if (!v64)
        {
          int v107 = file_printf(a1, ".%u", v57, v58, v59, v60, v61, v62, (v50 / 0x64)- 100 * ((42949673 * (unint64_t)(v50 / 0x64)) >> 32));
          goto LABEL_88;
        }
        if (v63)
        {
          if (v63 >= 0x1B)
          {
            do
            {
              if (file_printf(a1, "Z", v57, v58, v59, v60, v61, v62, v113) == -1) {
                return 0xFFFFFFFFLL;
              }
              v63 -= 26;
            }
            while (v63 > 0x1A);
          }
          int v107 = file_printf(a1, "%c", v57, v58, v59, v60, v61, v62, v63 + 64);
          goto LABEL_88;
        }
        return 1;
      }
      return v9;
    case 8:
      if (!strcmp(v16, "FreeBSD") && a3 == 1 && a6 == 4)
      {
        *a9 |= 8u;
        unsigned int v94 = bswap32(*(_DWORD *)(a2 + a8));
        if (a4) {
          unsigned int v95 = v94;
        }
        else {
          unsigned int v95 = *(_DWORD *)(a2 + a8);
        }
        if (file_printf(a1, ", for FreeBSD", v65, v66, v67, v68, v69, v70, v111) == -1) {
          return 0xFFFFFFFFLL;
        }
        if (v95 == 460002)
        {
          unsigned int v102 = " 4.6.2";
LABEL_87:
          int v107 = file_printf(a1, v102, v96, v97, v98, v99, v100, v101, v114);
LABEL_88:
          if (v107 != -1) {
            return 1;
          }
          return 0xFFFFFFFFLL;
        }
        if (v95 < 0x70544)
        {
          if (file_printf(a1, " %d.%d", v96, v97, v98, v99, v100, v101, v95 / 0x186A0) != -1
            && (!((unsigned __int16)(v95 / 0x3E8) % 0xAu)
             || file_printf(a1, ".%d", v96, v97, v98, v99, v100, v101, (unsigned __int16)(v95 / 0x3E8) % 0xAu) != -1))
          {
            HIDWORD(v103) = 652835029 * v95;
            LODWORD(v103) = 652835029 * v95;
            if ((v103 >> 3) <= 0x418937 && v95 % 0x186A0) {
              return 1;
            }
            goto LABEL_86;
          }
          return 0xFFFFFFFFLL;
        }
        if (v95 > 0x7A11F)
        {
          if (file_printf(a1, " %d.%d", v96, v97, v98, v99, v100, v101, v95 / 0x186A0) == -1) {
            return 0xFFFFFFFFLL;
          }
          HIDWORD(v10_Block_object_dispose(&a9, 8) = -858993459 * (v95 / 0x64);
          LODWORD(v10_Block_object_dispose(&a9, 8) = HIDWORD(v108);
          if ((v108 >> 1) <= 0x19999999 && v95 % 0x186A0 > 0x63)
          {
            unsigned int v106 = v95 / 0xA;
            goto LABEL_84;
          }
        }
        else
        {
          if (file_printf(a1, " %d.%d", v96, v97, v98, v99, v100, v101, 4) == -1) {
            return 0xFFFFFFFFLL;
          }
          HIDWORD(v105) = -858993459 * (unsigned __int16)(v95 / 0x64);
          LODWORD(v105) = HIDWORD(v105);
          if ((v105 >> 1) < 0x1999999A)
          {
            unsigned int v106 = (unsigned __int16)(v95 / 0xA);
LABEL_84:
            int v109 = v106 - 10 * ((429496730 * (unint64_t)v106) >> 32);
            if (!v109) {
              return 1;
            }
            int v107 = file_printf(a1, ".%d", v96, v97, v98, v99, v100, v101, v109);
            goto LABEL_88;
          }
        }
LABEL_86:
        char v114 = v95;
        unsigned int v102 = " (%d)";
        goto LABEL_87;
      }
      int v71 = strcmp(v16, "OpenBSD");
      uint64_t v9 = 0;
      if (a6 == 4 && a3 == 1 && !v71)
      {
        *a9 |= 8u;
        uint64_t v78 = ", for OpenBSD";
LABEL_72:
        int v42 = file_printf(a1, v78, v72, v73, v74, v75, v76, v77, v111);
LABEL_73:
        if (v42 == -1) {
          return 0xFFFFFFFFLL;
        }
        else {
          return 1;
        }
      }
      return v9;
    case 10:
      int v79 = strcmp(v16, "DragonFly");
      uint64_t v9 = 0;
      if (a6 == 4 && a3 == 1 && !v79)
      {
        *a9 |= 8u;
        uint64_t v9 = 0xFFFFFFFFLL;
        if (file_printf(a1, ", for DragonFly", v80, v81, v82, v83, v84, v85, v111) != -1)
        {
          unsigned int v92 = *(_DWORD *)(a2 + a8);
          unsigned int v93 = bswap32(v92);
          if (a4) {
            unsigned int v92 = v93;
          }
          if (file_printf(a1, " %d.%d.%d", v86, v87, v88, v89, v90, v91, v92 / 0x186A0) == -1) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 1;
          }
        }
      }
      return v9;
    default:
      return v9;
  }
}

uint64_t do_bid_note(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (a4 != 4) {
    return 0;
  }
  unint64_t v14 = (const char *)(a2 + a6);
  int v15 = strcmp((const char *)(a2 + a6), "GNU");
  if (a5 - 4 > 0x10 || a3 != 3 || v15)
  {
    int v24 = strcmp(v14, "Go");
    uint64_t result = 0;
    if (a5 <= 0x7F && a3 == 4 && !v24)
    {
      strlcpy(__dst, (const char *)(a2 + a7), a5 + 1);
      if (file_printf(a1, ", Go BuildID=%s", v25, v26, v27, v28, v29, v30, (char)__dst) == -1) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 1;
      }
    }
  }
  else
  {
    *a8 |= 0x10u;
    switch(a5)
    {
      case 8u:
        uint64_t v22 = "xxHash";
        break;
      case 0x14u:
        uint64_t v22 = "sha1";
        break;
      case 0x10u:
        uint64_t v22 = "md5/uuid";
        break;
      default:
        uint64_t v22 = "unknown";
        break;
    }
    uint64_t result = file_printf(a1, ", BuildID[%s]=", v16, v17, v18, v19, v20, v21, (char)v22);
    if (result != -1)
    {
      uint64_t v31 = a5;
      unsigned int v32 = __dst;
      __memcpy_chk();
      while (1)
      {
        char v39 = *v32++;
        uint64_t result = file_printf(a1, "%02x", v33, v34, v35, v36, v37, v38, v39);
        if (result == -1) {
          break;
        }
        if (!--v31) {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t do_pax_note(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  if (a5 != 4) {
    return 0;
  }
  int v21 = strcmp((const char *)(a2 + a7), "PaX");
  uint64_t result = 0;
  if (a6 == 4 && a3 == 3 && !v21)
  {
    *a9 |= 0x40u;
    unsigned int v23 = bswap32(*(_DWORD *)(a2 + a8));
    unsigned int v24 = a4 ? v23 : *(_DWORD *)(a2 + a8);
    if (!v24 || (uint64_t result = file_printf(a1, ", PaX: ", v15, v16, v17, v18, v19, v20, v28), result != -1))
    {
      int v25 = 0;
      for (uint64_t i = 0; i != 6; ++i)
      {
        if ((v24 >> i))
        {
          if (v25) {
            uint64_t v27 = ",";
          }
          else {
            uint64_t v27 = "";
          }
          uint64_t result = file_printf(a1, "%s%s", v15, v16, v17, v18, v19, v20, (char)v27);
          if (result == -1) {
            return result;
          }
          ++v25;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t do_core_note(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, int a11)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  uint64_t v17 = (const char *)(a2 + a7);
  switch(a5)
  {
    case 8u:
      if (strcmp(v17, "FreeBSD")) {
        goto LABEL_20;
      }
      int v24 = 1;
      goto LABEL_10;
    case 5u:
      if (strcmp(v17, "CORE")) {
        goto LABEL_20;
      }
LABEL_9:
      int v24 = 0;
      goto LABEL_10;
    case 4u:
      if (strncmp(v17, "CORE", 4uLL)) {
        goto LABEL_20;
      }
      goto LABEL_9;
  }
  if (a5 < 0xB || strncmp(v17, "NetBSD-CORE", 0xBuLL)) {
    goto LABEL_20;
  }
  int v24 = 2;
LABEL_10:
  int v25 = *(_DWORD *)a9;
  if ((*(_DWORD *)a9 & 0x20) == 0)
  {
    uint64_t result = file_printf(a1, ", %s-style", v18, v19, v20, v21, v22, v23, (char)&os_style_names[8 * v24]);
    if (result == -1) {
      return result;
    }
    int v25 = v24 | *(_DWORD *)a9 | 0x20;
    *(_DWORD *)a9 = v25;
  }
  if (v24 == 1)
  {
    uint64_t result = 0;
    if (a3 == 3 && (v25 & 0x800) != 0)
    {
      uint64_t v58 = a11 == 1 ? 25 : 33;
      uint64_t result = file_printf(a1, ", from '%.80s'", v18, v19, v20, v21, v22, v23, a2 + a8 + v58);
      if (result != -1)
      {
        if (a8 + v58 + 83 + 4 > a10) {
          goto LABEL_76;
        }
        unsigned int v65 = *(_DWORD *)(a2 + a8 + v58 + 83);
        char v66 = bswap32(v65);
        if (a4) {
          LOBYTE(v65) = v66;
        }
        uint64_t result = file_printf(a1, ", pid=%u", v59, v60, v61, v62, v63, v64, v65);
        if (result != -1)
        {
LABEL_76:
          uint64_t result = 0;
          *(_DWORD *)a9 |= 4u;
        }
      }
    }
    return result;
  }
  if (v24 == 2)
  {
    if (a3 == 1)
    {
      memset(v87, 0, sizeof(v87));
      __memcpy_chk();
      file_printable(__dst, 512, (uint64_t)v87 + 12, 32);
      uint64_t result = file_printf(a1, ", from '%.31s', pid=%u, uid=%u, gid=%u, nlwps=%u, lwp=%u (signal %u/code %u)", v27, v28, v29, v30, v31, v32, (char)__dst);
      if (result != -1)
      {
        *(_DWORD *)a9 |= 4u;
        return 1;
      }
      return result;
    }
    return 0;
  }
LABEL_20:
  if (a3 != 3 || (*(unsigned char *)(a9 + 1) & 8) == 0) {
    return 0;
  }
  uint64_t v82 = a1;
  uint64_t v33 = 0;
  uint64_t v34 = 5;
  if (a11 == 1) {
    uint64_t v34 = 7;
  }
  unint64_t v35 = a6;
  uint64_t v83 = a2;
  uint64_t v84 = a2 + a8;
  uint64_t v36 = MEMORY[0x263EF8318];
  uint64_t v85 = a8;
  unint64_t v86 = v34;
  while (2)
  {
    uint64_t v37 = 0;
    uint64_t v38 = &prpsoffsets64;
    if (a11 == 1) {
      uint64_t v38 = &prpsoffsets32;
    }
    uint64_t v39 = v38[v33];
    uint64_t v40 = v39 + a8;
    uint64_t v41 = v84 + v39;
    while (1)
    {
      if (v40 + v37 >= a10 || v39 + v37 >= v35) {
        goto LABEL_43;
      }
      int v43 = *(unsigned __int8 *)(v41 + v37);
      if (!*(unsigned char *)(v41 + v37)) {
        break;
      }
      if ((v43 & 0x80) != 0)
      {
        if (!__maskrune(*(unsigned __int8 *)(v41 + v37), 0x40000uLL)) {
          goto LABEL_43;
        }
      }
      else if ((*(_DWORD *)(v36 + 4 * *(unsigned __int8 *)(v41 + v37) + 60) & 0x40000) == 0)
      {
        goto LABEL_43;
      }
        goto LABEL_43;
      if (++v37 == 16) {
        goto LABEL_45;
      }
    }
    if (!v37)
    {
LABEL_43:
      uint64_t result = 0;
      ++v33;
      a8 = v85;
      if (v33 != v86) {
        continue;
      }
      return result;
    }
    break;
  }
LABEL_45:
  uint64_t v44 = v33 + 1;
  unint64_t v45 = v86;
  if (v33 + 1 >= v86)
  {
    uint64_t v53 = v33;
    uint64_t v46 = v85;
    int v47 = a11;
  }
  else
  {
    uint64_t v46 = v85;
    int v47 = a11;
    do
    {
      if (a11 == 1) {
        uint64_t v48 = &prpsoffsets32;
      }
      else {
        uint64_t v48 = &prpsoffsets64;
      }
      unint64_t v49 = v48[v44];
      unint64_t v50 = v48[v33];
      unint64_t v51 = v50 - v49;
      if (v50 <= v49)
      {
        uint64_t v53 = v33;
      }
      else
      {
        unint64_t v52 = v50 + v85;
        uint64_t v53 = v44;
        if (v49 + v85 < v52)
        {
          uint64_t v54 = (char *)(v83 + v85 + v49);
          BOOL v55 = 1;
          do
          {
            if (v55)
            {
              uint64_t v56 = *v54;
              if (*v54 < 0) {
                int v57 = __maskrune(v56, 0x40000uLL);
              }
              else {
                int v57 = *(_DWORD *)(v36 + 4 * v56 + 60) & 0x40000;
              }
              BOOL v55 = v57 != 0;
            }
            ++v54;
            --v51;
          }
          while (v51);
          if (v55) {
            uint64_t v53 = v44;
          }
          else {
            uint64_t v53 = v33;
          }
          unint64_t v45 = v86;
        }
      }
      ++v44;
      uint64_t v33 = v53;
    }
    while (v44 != v45);
  }
  if (v47 == 1) {
    uint64_t v67 = &prpsoffsets32;
  }
  else {
    uint64_t v67 = &prpsoffsets64;
  }
  int64_t v68 = v67[v53] + v46;
  uint64_t v69 = (const char *)(v83 + v68);
  uint64_t i = (unsigned char *)(v83 + v68);
  if (v68 < (uint64_t)a10)
  {
    for (uint64_t i = (unsigned char *)(v83 + v68); (unint64_t)i < v83 + a10; ++i)
    {
      uint64_t v71 = *i;
      if (!*i) {
        break;
      }
      if ((v71 & 0x80) != 0)
      {
        if (!__maskrune(v71, 0x40000uLL)) {
          break;
        }
      }
      else if ((*(_DWORD *)(v36 + 4 * v71 + 60) & 0x40000) == 0)
      {
        break;
      }
    }
  }
  while (1)
  {
    uint64_t v72 = i - v69;
    if (i <= v69) {
      break;
    }
    int v73 = (char)*--i;
    uint64_t v74 = v73;
    if (v73 < 0)
    {
      if (!__maskrune(v74, 0x4000uLL)) {
        break;
      }
    }
    else if ((*(_DWORD *)(v36 + 4 * v74 + 60) & 0x4000) == 0)
    {
      break;
    }
  }
  if ((unint64_t)(v72 + 1) < 0x100) {
    size_t v75 = v72 + 1;
  }
  else {
    size_t v75 = 256;
  }
  strlcpy(__dst, v69, v75);
  uint64_t result = file_printf(v82, ", from '%s'", v76, v77, v78, v79, v80, v81, (char)__dst);
  if (result != -1)
  {
    *(_DWORD *)a9 |= 4u;
    return 1;
  }
  return result;
}

uint64_t do_auxv_note(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6, _DWORD *a7, int a8, int a9, off_t a10, int a11, int64_t a12)
{
  uint64_t result = 0;
  uint64_t v88 = *MEMORY[0x263EF8340];
  if (a8 == 1) {
    unint64_t v14 = 8;
  }
  else {
    unint64_t v14 = 16;
  }
  if (a3 != 6 || (*a7 & 0x823) != 0x820) {
    return result;
  }
  *a7 |= 0x1000u;
  if (v14 > a5) {
    return 1;
  }
  uint64_t v17 = 0;
  unint64_t v18 = v14;
  unint64_t v79 = a5;
  uint64_t v19 = &v81;
  if (a8 == 1) {
    uint64_t v19 = &v85;
  }
  uint64_t __buf = v19;
  if (a8 == 1) {
    ssize_t v20 = 32;
  }
  else {
    ssize_t v20 = 56;
  }
  unint64_t v21 = v14;
  uint64_t v77 = a1;
  while (1)
  {
    unint64_t v22 = v21;
    unint64_t v23 = v18;
    __memcpy_chk();
    if (v17 == 50)
    {
      file_error(a1, 0, "Too many ELF Auxv elements", v25, v26, v27, v28, v29, v76);
      return 1;
    }
    if (a8 == 1)
    {
      unsigned int v30 = bswap32(0);
      unint64_t v31 = a4 ? v30 : 0;
    }
    else
    {
      unint64_t v31 = 0;
      unint64_t v32 = bswap64(0);
      if (a4) {
        unint64_t v31 = v32;
      }
    }
    unint64_t v33 = v31 - 11;
    uint64_t v34 = "real uid";
    switch(v33)
    {
      case 0uLL:
        goto LABEL_26;
      case 1uLL:
        uint64_t v34 = "effective uid";
        goto LABEL_26;
      case 2uLL:
        uint64_t v34 = "real gid";
        goto LABEL_26;
      case 3uLL:
        uint64_t v34 = "effective gid";
LABEL_26:
        uint64_t result = file_printf(a1, ", %s: %d", v24, v25, v26, v27, v28, v29, (char)v34);
        if (result == -1) {
          return result;
        }
        goto LABEL_80;
      case 4uLL:
        uint64_t v78 = "platform";
        goto LABEL_29;
      default:
        uint64_t v78 = "execfn";
        if ("real uid" != (char *)31) {
          goto LABEL_80;
        }
LABEL_29:
        if (a8 == 1)
        {
          unsigned int v35 = bswap32(0);
          if (a4) {
            unint64_t v36 = v35;
          }
          else {
            unint64_t v36 = 0;
          }
        }
        else
        {
          unint64_t v37 = bswap64(0);
          if (a4) {
            unint64_t v36 = v37;
          }
          else {
            unint64_t v36 = 0;
          }
        }
        if (!a11) {
          goto LABEL_68;
        }
        long long v85 = 0u;
        long long v86 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        off_t v38 = a10;
        int v39 = a11;
        uint64_t v84 = 0;
        break;
    }
    while (1)
    {
      if (pread(a9, __buf, v20, v38) < v20)
      {
        uint64_t v61 = __error();
        a1 = v77;
        file_error(v77, *v61, "error reading", v62, v63, v64, v65, v66, v76);
        goto LABEL_79;
      }
      if (a12 != -1)
      {
        if (a8 == 1)
        {
          unsigned int v40 = bswap32(DWORD1(v85));
          int64_t v41 = a4 ? v40 : DWORD1(v85);
        }
        else
        {
          int64_t v41 = *((void *)&v81 + 1);
          unint64_t v42 = bswap64(*((unint64_t *)&v81 + 1));
          if (a4) {
            int64_t v41 = v42;
          }
        }
        if (v41 > a12) {
          goto LABEL_67;
        }
      }
      if (a8 == 1)
      {
        unsigned int v43 = bswap32(DWORD2(v85));
        if (!a4) {
          unsigned int v43 = DWORD2(v85);
        }
        if (DWORD2(v85)) {
          unint64_t v44 = v43;
        }
        else {
          unint64_t v44 = 4;
        }
        if (v36 >= v44)
        {
          unsigned int v45 = bswap32(v86);
          uint64_t v46 = a4 ? v45 : v86;
          if (v46 + v44 > v36)
          {
            unsigned int v73 = bswap32(DWORD1(v85));
            if (a4) {
              unint64_t v74 = v73;
            }
            else {
              unint64_t v74 = DWORD1(v85);
            }
            goto LABEL_91;
          }
        }
        goto LABEL_67;
      }
      unint64_t v47 = bswap64(v82);
      if (!a4) {
        unint64_t v47 = v82;
      }
      unint64_t v44 = 4;
      if ((void)v82) {
        unint64_t v44 = v47;
      }
      if (v44 <= v36)
      {
        unint64_t v48 = v83;
        unint64_t v49 = bswap64(v83);
        if (a4) {
          unint64_t v48 = v49;
        }
        if (v48 + v44 > v36) {
          break;
        }
      }
LABEL_67:
      v38 += v20;
      if (!--v39)
      {
LABEL_68:
        off_t v50 = 0;
        a1 = v77;
        goto LABEL_69;
      }
    }
    unint64_t v74 = *((void *)&v81 + 1);
    unint64_t v75 = bswap64(*((unint64_t *)&v81 + 1));
    if (a4) {
      unint64_t v74 = v75;
    }
LABEL_91:
    off_t v50 = v74 + v36 - v44;
    a1 = v77;
    if (v50 < 0)
    {
LABEL_79:
      uint64_t v67 = __error();
      file_error(a1, *v67, "error reading", v68, v69, v70, v71, v72, v76);
      goto LABEL_80;
    }
LABEL_69:
    ssize_t v51 = pread(a9, v87, 0x100uLL, v50);
    if (v51 <= 0) {
      goto LABEL_79;
    }
    v87[v51 - 1] = 0;
    unsigned int v58 = v87[0];
    if (v87[0])
    {
      uint64_t v59 = (__darwin_ct_rune_t *)v87;
      while ((v58 & 0x80) == 0)
      {
        if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v58 + 60) & 0x40000) == 0) {
          goto LABEL_82;
        }
LABEL_76:
        unsigned int v60 = *((unsigned __int8 *)v59 + 1);
        uint64_t v59 = (__darwin_ct_rune_t *)((char *)v59 + 1);
        unsigned int v58 = v60;
        if (!v60) {
          goto LABEL_83;
        }
      }
      if (__maskrune(v58, 0x40000uLL)) {
        goto LABEL_76;
      }
LABEL_82:
      if (*(unsigned char *)v59) {
        goto LABEL_80;
      }
LABEL_83:
      if (v59 != (__darwin_ct_rune_t *)v87)
      {
        uint64_t result = file_printf(a1, ", %s: '%s'", v52, v53, v54, v55, v56, v57, (char)v78);
        if (result == -1) {
          return result;
        }
      }
    }
LABEL_80:
    ++v17;
    unint64_t v18 = v23;
    unint64_t v21 = v22 + v23;
    if (v22 + v23 > v79) {
      return 1;
    }
  }
}

id getCNPhoneNumberClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCNPhoneNumberClass_softClass_20076;
  uint64_t v7 = getCNPhoneNumberClass_softClass_20076;
  if (!getCNPhoneNumberClass_softClass_20076)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCNPhoneNumberClass_block_invoke_20077;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getCNPhoneNumberClass_block_invoke_20077((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165D34EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNPhoneNumberClass_block_invoke_20077(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary_20078)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __ContactsLibraryCore_block_invoke_20079;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264289B48;
    uint64_t v8 = 0;
    ContactsLibraryCore_frameworkLibrary_20078 = _sl_dlopen();
  }
  if (!ContactsLibraryCore_frameworkLibrary_20078)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *ContactsLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFPhoneNumber.m", 16, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CNPhoneNumber");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getCNPhoneNumberClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFPhoneNumber.m", 17, @"Unable to find class %s", "CNPhoneNumber");

LABEL_10:
    __break(1u);
  }
  getCNPhoneNumberClass_softClass_20076 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ContactsLibraryCore_block_invoke_20079()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary_20078 = result;
  return result;
}

void sub_2165D4ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2165D5054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2165D5334(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_2165D5B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void get_SFReaderExtractorErrorDomain()
{
  uint64_t v6 = 0;
  long long v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)get_SFReaderExtractorErrorDomainSymbolLoc_ptr;
  uint64_t v9 = get_SFReaderExtractorErrorDomainSymbolLoc_ptr;
  if (!get_SFReaderExtractorErrorDomainSymbolLoc_ptr)
  {
    uint64_t v1 = SafariServicesLibrary();
    v7[3] = (uint64_t)dlsym(v1, "_SFReaderExtractorErrorDomain");
    get_SFReaderExtractorErrorDomainSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"NSString *get_SFReaderExtractorErrorDomain(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFArticle.m", 60, @"%s", dlerror());

    __break(1u);
  }
}

void sub_2165D5CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNSDocumentTypeDocumentOptionSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = UIFoundationLibrary_20296();
  uint64_t result = dlsym(v2, "NSDocumentTypeDocumentOption");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSDocumentTypeDocumentOptionSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *UIFoundationLibrary_20296()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!UIFoundationLibraryCore_frameworkLibrary_20314)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __UIFoundationLibraryCore_block_invoke_20315;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264289C18;
    uint64_t v6 = 0;
    UIFoundationLibraryCore_frameworkLibrary_20314 = _sl_dlopen();
  }
  uint64_t v0 = (void *)UIFoundationLibraryCore_frameworkLibrary_20314;
  if (!UIFoundationLibraryCore_frameworkLibrary_20314)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *UIFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFArticle.m", 25, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getNSHTMLTextDocumentTypeSymbolLoc_block_invoke_20300(uint64_t a1)
{
  id v2 = UIFoundationLibrary_20296();
  uint64_t result = dlsym(v2, "NSHTMLTextDocumentType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSHTMLTextDocumentTypeSymbolLoc_ptr_20299 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getNSCharacterEncodingDocumentAttributeSymbolLoc_block_invoke_20304(uint64_t a1)
{
  id v2 = UIFoundationLibrary_20296();
  uint64_t result = dlsym(v2, "NSCharacterEncodingDocumentAttribute");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSCharacterEncodingDocumentAttributeSymbolLoc_ptr_20303 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __UIFoundationLibraryCore_block_invoke_20315()
{
  uint64_t result = _sl_dlopen();
  UIFoundationLibraryCore_frameworkLibrary_20314 = result;
  return result;
}

void *SafariServicesLibrary()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!SafariServicesLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __SafariServicesLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264289C00;
    uint64_t v6 = 0;
    SafariServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = (void *)SafariServicesLibraryCore_frameworkLibrary;
  if (!SafariServicesLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *SafariServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFArticle.m", 58, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __SafariServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SafariServicesLibraryCore_frameworkLibrary = result;
  return result;
}

id WFNumberFromString(void *a1)
{
  id v1 = a1;
  id v2 = [MEMORY[0x263EFF960] currentLocale];
  id v3 = [v2 objectForKey:*MEMORY[0x263EFF4F8]];
  uint64_t v4 = [v1 stringByReplacingOccurrencesOfString:v3 withString:&stru_26C71CE08];

  long long v5 = [MEMORY[0x263F08B08] scannerWithString:v4];
  uint64_t v6 = [MEMORY[0x263EFF960] currentLocale];
  [v5 setLocale:v6];

  double v18 = 0.0;
  if ([v5 scanDouble:&v18])
  {
    uint64_t v7 = (void *)MEMORY[0x263F087B0];
    uint64_t v8 = [NSNumber numberWithDouble:v18];
    id v9 = v8;
    if (v8)
    {
      [v8 decimalValue];
    }
    else
    {
      v16[0] = 0;
      v16[1] = 0;
      int v17 = 0;
    }
    int v13 = [v7 decimalNumberWithDecimal:v16];
  }
  else
  {
    id v9 = objc_alloc_init(MEMORY[0x263F08A30]);
    [v9 setNumberStyle:5];
    int v10 = [v1 lowercaseString];
    int v11 = [v9 numberFromString:v10];

    if (v11)
    {
      ssize_t v12 = (void *)MEMORY[0x263F087B0];
      [v11 decimalValue];
      int v13 = [v12 decimalNumberWithDecimal:v15];
    }
    else
    {
      int v13 = 0;
    }
  }
  return v13;
}

id WFDictionariesFromString(void *a1, void *a2)
{
  v20[1] = *MEMORY[0x263EF8340];
  id v3 = a1;
  uint64_t v4 = [MEMORY[0x263F08708] whitespaceAndNewlineCharacterSet];
  long long v5 = [v4 invertedSet];
  uint64_t v6 = [v3 rangeOfCharacterFromSet:v5];

  if (v6 == 0x7FFFFFFFFFFFFFFFLL || ([v3 characterAtIndex:v6] & 0xFFFFFFDF) != 0x5B)
  {
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x263F08900];
    uint64_t v8 = [v3 dataUsingEncoding:4];
    id v9 = [v7 JSONObjectWithData:v8 options:0 error:0];

    int v10 = WFDictionariesFromObject(v9);

    if (v10)
    {
      if (!a2) {
        goto LABEL_20;
      }
      int v11 = [MEMORY[0x263F852B8] typeFromMIMEType:@"application/json"];
LABEL_11:
      *a2 = v11;
      goto LABEL_20;
    }
  }
  id v12 = v3;
  if ([v12 hasPrefix:@"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"])
  {
    int v13 = (void *)MEMORY[0x263F08AC0];
    unint64_t v14 = [v12 dataUsingEncoding:4];
    uint64_t v15 = [v13 propertyListWithData:v14 options:0 format:0 error:0];

    int v10 = WFDictionariesFromObject(v15);

    if (v10)
    {
      if (!a2) {
        goto LABEL_20;
      }
      int v11 = [MEMORY[0x263F852B8] typeWithUTType:*MEMORY[0x263F1DC40]];
      goto LABEL_11;
    }
  }
  else
  {
  }
  id v16 = v12;
  if ([v16 rangeOfString:@"="] == 0x7FFFFFFFFFFFFFFFLL)
  {

LABEL_19:
    int v10 = 0;
    goto LABEL_20;
  }
  int v17 = objc_msgSend(NSURL, "dc_queryItemsFromQueryString:", v16);
  double v18 = [[WFOrderedDictionary alloc] initWithQueryItems:v17];

  if (!v18) {
    goto LABEL_19;
  }
  if (a2)
  {
    *a2 = [MEMORY[0x263F852B8] typeFromMIMEType:@"application/x-www-form-urlencoded"];
  }
  v20[0] = v18;
  int v10 = [MEMORY[0x263EFF8C0] arrayWithObjects:v20 count:1];

LABEL_20:
  return v10;
}

id WFDictionariesFromObject(void *a1)
{
  v5[1] = *MEMORY[0x263EF8340];
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v5[0] = v1;
    uint64_t v2 = [MEMORY[0x263EFF8C0] arrayWithObjects:v5 count:1];
LABEL_5:
    id v3 = (void *)v2;
    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = [v1 objectsMatchingClass:objc_opt_class()];
    goto LABEL_5;
  }
  id v3 = 0;
LABEL_7:

  return v3;
}

id initEMContentRepresentationTypeHTML()
{
  if (EmailLibrary_sOnce != -1) {
    dispatch_once(&EmailLibrary_sOnce, &__block_literal_global_112_20594);
  }
  uint64_t v0 = (id *)dlsym((void *)EmailLibrary_sLib, "EMContentRepresentationTypeHTML");
  if (!v0) {
    __assert_rtn("initEMContentRepresentationTypeHTML", "WFEmail.m", 28, "constant");
  }
  objc_storeStrong((id *)&constantEMContentRepresentationTypeHTML, *v0);
  getEMContentRepresentationTypeHTML = (uint64_t (*)())EMContentRepresentationTypeHTMLFunction;
  id v1 = (void *)constantEMContentRepresentationTypeHTML;
  return v1;
}

id EMContentRepresentationTypeHTMLFunction()
{
  return (id)constantEMContentRepresentationTypeHTML;
}

void *__EmailLibrary_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/Email.framework/Email", 2);
  EmailLibrary_sLib = (uint64_t)result;
  return result;
}

Class initEMContentRequestOptions()
{
  if (EmailLibrary_sOnce != -1) {
    dispatch_once(&EmailLibrary_sOnce, &__block_literal_global_112_20594);
  }
  Class result = objc_getClass("EMContentRequestOptions");
  classEMContentRequestOptions = (uint64_t)result;
  getEMContentRequestOptionsClass = (uint64_t (*)())EMContentRequestOptionsFunction;
  return result;
}

id EMContentRequestOptionsFunction()
{
  return (id)classEMContentRequestOptions;
}

Class initEMObjectID()
{
  if (EmailLibrary_sOnce != -1) {
    dispatch_once(&EmailLibrary_sOnce, &__block_literal_global_112_20594);
  }
  Class result = objc_getClass("EMObjectID");
  classEMObjectID = (uint64_t)result;
  getEMObjectIDClass = (uint64_t (*)())EMObjectIDFunction;
  return result;
}

id EMObjectIDFunction()
{
  return (id)classEMObjectID;
}

id initEMContentRepresentationTypeRaw()
{
  if (EmailLibrary_sOnce != -1) {
    dispatch_once(&EmailLibrary_sOnce, &__block_literal_global_112_20594);
  }
  uint64_t v0 = (id *)dlsym((void *)EmailLibrary_sLib, "EMContentRepresentationTypeRaw");
  if (!v0) {
    __assert_rtn("initEMContentRepresentationTypeRaw", "WFEmail.m", 29, "constant");
  }
  objc_storeStrong((id *)&constantEMContentRepresentationTypeRaw, *v0);
  getEMContentRepresentationTypeRaw = (uint64_t (*)())EMContentRepresentationTypeRawFunction;
  id v1 = (void *)constantEMContentRepresentationTypeRaw;
  return v1;
}

id EMContentRepresentationTypeRawFunction()
{
  return (id)constantEMContentRepresentationTypeRaw;
}

Class initEMDaemonInterface()
{
  if (EmailLibrary_sOnce != -1) {
    dispatch_once(&EmailLibrary_sOnce, &__block_literal_global_112_20594);
  }
  Class result = objc_getClass("EMDaemonInterface");
  classEMDaemonInterface = (uint64_t)result;
  getEMDaemonInterfaceClass = (uint64_t (*)())EMDaemonInterfaceFunction;
  return result;
}

id EMDaemonInterfaceFunction()
{
  return (id)classEMDaemonInterface;
}

void sub_2165D8AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getEKAttachmentClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!EventKitLibraryCore_frameworkLibrary_20674)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __EventKitLibraryCore_block_invoke_20675;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264289E20;
    uint64_t v8 = 0;
    EventKitLibraryCore_frameworkLibrary_20674 = _sl_dlopen();
  }
  if (!EventKitLibraryCore_frameworkLibrary_20674)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *EventKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFCalendarEventContentItemChangeTransaction.m", 13, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("EKAttachment");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getEKAttachmentClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFCalendarEventContentItemChangeTransaction.m", 14, @"Unable to find class %s", "EKAttachment");

LABEL_10:
    __break(1u);
  }
  getEKAttachmentClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __EventKitLibraryCore_block_invoke_20675()
{
  uint64_t result = _sl_dlopen();
  EventKitLibraryCore_frameworkLibrary_20674 = result;
  return result;
}

Class initNSTextAttachment()
{
  if (UIKitLibrary_sOnce_20721 != -1) {
    dispatch_once(&UIKitLibrary_sOnce_20721, &__block_literal_global_20722);
  }
  Class result = objc_getClass("NSTextAttachment");
  classNSTextAttachment = (uint64_t)result;
  getNSTextAttachmentClass = (uint64_t (*)())NSTextAttachmentFunction;
  return result;
}

id NSTextAttachmentFunction()
{
  return (id)classNSTextAttachment;
}

void *__UIKitLibrary_block_invoke_20726()
{
  Class result = dlopen("/System/Library/Frameworks/UIKit.framework/UIKit", 2);
  UIKitLibrary_sLib_20728 = (uint64_t)result;
  return result;
}

void sub_2165D9BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getAVMetadataCommonKeyTitleSymbolLoc_block_invoke_20757(uint64_t a1)
{
  uint64_t v2 = AVFoundationLibrary_20758();
  Class result = dlsym(v2, "AVMetadataCommonKeyTitle");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAVMetadataCommonKeyTitleSymbolLoc_ptr_20756 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *AVFoundationLibrary_20758()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!AVFoundationLibraryCore_frameworkLibrary_20776)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __AVFoundationLibraryCore_block_invoke_20777;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_264289FE0;
    uint64_t v6 = 0;
    AVFoundationLibraryCore_frameworkLibrary_20776 = _sl_dlopen();
  }
  uint64_t v0 = (void *)AVFoundationLibraryCore_frameworkLibrary_20776;
  if (!AVFoundationLibraryCore_frameworkLibrary_20776)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *AVFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFObjectNameProvider.m", 38, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void __getAVURLAssetClass_block_invoke_20766(uint64_t a1)
{
  AVFoundationLibrary_20758();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVURLAsset");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVURLAssetClass_softClass_20765 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVURLAssetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFObjectNameProvider.m", 39, @"Unable to find class %s", "AVURLAsset");

    __break(1u);
  }
}

uint64_t __AVFoundationLibraryCore_block_invoke_20777()
{
  uint64_t result = _sl_dlopen();
  AVFoundationLibraryCore_frameworkLibrary_20776 = result;
  return result;
}

void sub_2165DA020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMPMediaItemPropertyTitleSymbolLoc_block_invoke_20784(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  v5[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_20786)
  {
    v5[1] = (void *)MEMORY[0x263EF8330];
    void v5[2] = (void *)3221225472;
    v5[3] = __MediaPlayerLibraryCore_block_invoke_20787;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_264289FC8;
    uint64_t v7 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_20786 = _sl_dlopen();
  }
  uint64_t v2 = (void *)MediaPlayerLibraryCore_frameworkLibrary_20786;
  if (!MediaPlayerLibraryCore_frameworkLibrary_20786)
  {
    a1 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFObjectNameProvider.m", 34, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "MPMediaItemPropertyTitle");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  getMPMediaItemPropertyTitleSymbolLoc_ptr_20783 = *(void *)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_20787()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_20786 = result;
  return result;
}

void sub_2165DA448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPHImportSessionClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!PhotosLibraryCore_frameworkLibrary_20814)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __PhotosLibraryCore_block_invoke_20815;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_264289FB0;
    uint64_t v8 = 0;
    PhotosLibraryCore_frameworkLibrary_20814 = _sl_dlopen();
  }
  if (!PhotosLibraryCore_frameworkLibrary_20814)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *PhotosLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFObjectNameProvider.m", 25, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PHImportSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getPHImportSessionClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFObjectNameProvider.m", 26, @"Unable to find class %s", "PHImportSession");

LABEL_10:
    __break(1u);
  }
  getPHImportSessionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PhotosLibraryCore_block_invoke_20815()
{
  uint64_t result = _sl_dlopen();
  PhotosLibraryCore_frameworkLibrary_20814 = result;
  return result;
}

id WFPageTitleFromHTMLFile(uint64_t a1)
{
  id v1 = [MEMORY[0x263EFF8F8] dataWithContentsOfURL:a1 options:8 error:0];
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = WFPageTitleFromHTMLData(v1);
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

id WFPageTitleFromHTMLData(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 length];
  id v3 = v1;
  uint64_t v4 = (const char *)[v3 bytes];

  long long v5 = &v4[v2];
  uint64_t v6 = WFCaseInsensitiveRangeOfStringInData(v4, v2, @"<title");
  uint64_t v8 = &v4[v6 + v7];
  BOOL v9 = v6 == 0x7FFFFFFFFFFFFFFFLL || v8 >= v5;
  if (v9
    || ((uint64_t v10 = WFCaseInsensitiveRangeOfStringInData(v8, v2 - (v6 + v7), @">"),
         id v12 = &v8[v10 + v11],
         v10 != 0x7FFFFFFFFFFFFFFFLL)
      ? (BOOL v13 = v12 >= v5)
      : (BOOL v13 = 1),
        v13
     || ((uint64_t v14 = WFCaseInsensitiveRangeOfStringInData(v12, &v4[v2] - v12, @"</title"), v14 != 0x7FFFFFFFFFFFFFFFLL)
       ? (BOOL v15 = &v12[v14] >= v5)
       : (BOOL v15 = 1),
         v15)))
  {
    double v18 = 0;
  }
  else
  {
    int v17 = [MEMORY[0x263EFF8F8] dataWithBytes:v12 length:v14];
    double v18 = objc_msgSend(NSString, "wf_stringWithData:", v17);
  }
  return v18;
}

uint64_t WFCaseInsensitiveRangeOfStringInData(const char *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (unsigned __int8 *)[v5 UTF8String];
  uint64_t v8 = (const char *)(v6 + 1);
  __darwin_ct_rune_t v7 = *v6;
  uint64_t i = a1;
  if (v7)
  {
    unsigned __int8 v10 = __tolower(v7);
    size_t v11 = strlen(v8);
    size_t v12 = a2 - 1;
    for (uint64_t i = a1; v12 != -1 && *i; ++i)
    {
      if (__tolower(*(unsigned __int8 *)i) == v10)
      {
        if (v11 > v12) {
          break;
        }
        if (!strncasecmp(i + 1, v8, v11)) {
          goto LABEL_10;
        }
      }
      --v12;
    }
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
LABEL_10:
    uint64_t v13 = i - a1;
    [v5 lengthOfBytesUsingEncoding:4];
  }

  return v13;
}

void *WFAllPossibleContentOperators()
{
  return &unk_26C743B40;
}

id WFDefaultLocalizedLabelForContentOperator(uint64_t a1)
{
  id v3 = 0;
  if (a1 > 99)
  {
    switch(a1)
    {
      case 999:
        uint64_t v4 = @"does not contain";
        break;
      case 1000:
        uint64_t v4 = @"is in the next";
        break;
      case 1001:
        uint64_t v4 = @"is in the last";
        break;
      case 1002:
        uint64_t v4 = @"is today";
        break;
      case 1003:
        uint64_t v4 = @"is between";
        break;
      default:
        if (a1 == 100)
        {
          uint64_t v4 = @"has any value";
        }
        else
        {
          if (a1 != 101) {
            goto LABEL_24;
          }
          uint64_t v4 = @"does not have any value";
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        uint64_t v4 = @"is less than";
        break;
      case 1:
        uint64_t v4 = @"is less than or equal to";
        break;
      case 2:
        uint64_t v4 = @"is greater than";
        break;
      case 3:
        uint64_t v4 = @"is greater than or equal to";
        break;
      case 4:
        uint64_t v4 = @"is";
        break;
      case 5:
        uint64_t v4 = @"is not";
        break;
      case 6:
      case 7:
        goto LABEL_24;
      case 8:
        uint64_t v4 = @"begins with";
        break;
      case 9:
        uint64_t v4 = @"ends with";
        break;
      default:
        if (a1 != 99) {
          goto LABEL_24;
        }
        uint64_t v4 = @"contains";
        break;
    }
  }
  id v3 = WFLocalizedString(v4);
LABEL_24:
  return v3;
}

id WFSupportedItemClassesForItemClass(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x263EFF9B0]), "initWithCapacity:", objc_msgSend(v3, "count"));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        size_t v11 = +[WFContentItemRegistry sharedRegistry];
        uint64_t v12 = [v11 contentItemClassForType:v10];

        if (v12) {
          BOOL v13 = v12 == a1;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13) {
          [v4 addObject:v12];
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v7);
  }

  return v4;
}

id WFCachedRecursivelySupportedTypes(void *a1)
{
  id v1 = a1;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 3221225472;
  uint64_t v6 = __WFCachedRecursivelySupportedTypes_block_invoke;
  uint64_t v7 = &unk_26428A358;
  id v2 = v1;
  id v8 = v2;
  id v3 = objc_getAssociatedObject(v2, &WFCachedRecursivelySupportedTypes_cachedValue);
  if (!v3)
  {
    id v3 = v6((uint64_t)v5);
    objc_setAssociatedObject(v2, &WFCachedRecursivelySupportedTypes_cachedValue, v3, (void *)0x303);
  }

  return v3;
}

id __WFCachedRecursivelySupportedTypes_block_invoke(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  uint64_t v2 = objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x263EFF9B0]) initWithObject:v2];
  id v5 = WFRecursivelySupportedTypesExcludingTraversedClasses(v1, isKindOfClass & 1, 0, v4);

  return v5;
}

id WFRecursivelySupportedTypesExcludingTraversedClasses(void *a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  id v7 = a1;
  id v8 = a4;
  if (a3) {
    [(id)objc_opt_class() supportedTypesExcludingInstanceSpecificTypes];
  }
  else {
  unsigned int v30 = [v7 supportedTypes];
  }
  BOOL v9 = (void *)[v30 mutableCopy];
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v10 = [v7 supportedItemClasses];
  uint64_t v11 = [v10 countByEnumeratingWithState:&v39 objects:v44 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v40;
    id v33 = v7;
    uint64_t v34 = *(void *)v40;
    unsigned int v32 = a2;
    unint64_t v31 = v10;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v40 != v13) {
          objc_enumerationMutation(v10);
        }
        long long v15 = *(void **)(*((void *)&v39 + 1) + 8 * i);
        if (([v8 containsObject:v15] & 1) == 0)
        {
          [v8 addObject:v15];
          if ([v15 supportedTypesMustBeDeterminedByInstance]) {
            BOOL v16 = a2 == 0;
          }
          else {
            BOOL v16 = 1;
          }
          if (v16)
          {
            long long v17 = v15;
            uint64_t v18 = a2;
            uint64_t v19 = 0;
          }
          else
          {
            objc_opt_class();
            char isKindOfClass = objc_opt_isKindOfClass();
            if (isKindOfClass)
            {
              unint64_t v21 = +[WFCoercionOptions new];
              unint64_t v22 = [v7 itemsByCoercingToItemClass:v15 options:v21 error:0];

              if ([v22 count])
              {
                long long v37 = 0u;
                long long v38 = 0u;
                long long v35 = 0u;
                long long v36 = 0u;
                id v23 = v22;
                uint64_t v24 = [v23 countByEnumeratingWithState:&v35 objects:v43 count:16];
                if (v24)
                {
                  uint64_t v25 = v24;
                  uint64_t v26 = *(void *)v36;
                  do
                  {
                    for (uint64_t j = 0; j != v25; ++j)
                    {
                      if (*(void *)v36 != v26) {
                        objc_enumerationMutation(v23);
                      }
                      uint64_t v28 = WFRecursivelySupportedTypesExcludingTraversedClasses(*(void *)(*((void *)&v35 + 1) + 8 * j), 1, 0, v8);
                      [v9 unionOrderedSet:v28];
                    }
                    uint64_t v25 = [v23 countByEnumeratingWithState:&v35 objects:v43 count:16];
                  }
                  while (v25);
                  id v7 = v33;
                  a2 = v32;
                  uint64_t v10 = v31;
                }
              }
              else
              {
                id v23 = [v15 supportedTypesExcludingInstanceSpecificTypes];
                [v9 unionOrderedSet:v23];
              }

              uint64_t v13 = v34;
              goto LABEL_30;
            }
            long long v17 = v15;
            uint64_t v18 = 1;
            uint64_t v19 = 1;
          }
          unint64_t v22 = WFRecursivelySupportedTypesExcludingTraversedClasses(v17, v18, v19, v8);
          [v9 unionOrderedSet:v22];
LABEL_30:

          continue;
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v39 objects:v44 count:16];
    }
    while (v12);
  }

  return v9;
}

id __WFInvokeObjectRepresentationsResultHandlerWithRepresentations_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 object];
  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = [v3 wfName];
    if (v6)
    {
      [v5 addObject:v6];
    }
    else
    {
      id v7 = [MEMORY[0x263EFF9D0] null];
      [v5 addObject:v7];
    }
    id v8 = v4;
  }

  return v4;
}

void sub_2165E0A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__243(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__244(uint64_t a1)
{
}

void sub_2165E1364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__21461(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__21462(uint64_t a1)
{
}

uint64_t WFAnyInTypesConformsToType(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v3 = a1;
  id v4 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v15;
    uint64_t v9 = *MEMORY[0x263F1DA48];
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if (objc_msgSend(v11, "isEqualToUTType:", v9, (void)v14)
          && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
          || ([v11 conformsToType:v4] & 1) != 0)
        {
          uint64_t v12 = 1;
          goto LABEL_13;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
  uint64_t v12 = 0;
LABEL_13:

  return v12;
}

id WFPopStringForKey(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = [v4 wfObjectOfClass:objc_opt_class() forKey:v3];
  [v4 removeObjectForKey:v3];

  return v5;
}

id WFMakeContentAttributionSetFromOrigin(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  if (v7)
  {
    if (a4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = [MEMORY[0x263F08690] currentHandler];
    long long v14 = objc_msgSend(NSString, "stringWithUTF8String:", "WFContentAttributionSet * _Nonnull WFMakeContentAttributionSetFromOrigin(WFContentLocation * _Nonnull __strong, WFDisclosureLevel, NSArray<WFDisclosureWarning *> * _Nonnull __strong, NSUUID *__autoreleasing *)");
    [v13 handleFailureInFunction:v14, @"WFContentItem.m", 47, @"Invalid parameter not satisfying: %@", @"origin" file lineNumber description];

    if (a4) {
      goto LABEL_3;
    }
  }
  long long v15 = [MEMORY[0x263F08690] currentHandler];
  long long v16 = objc_msgSend(NSString, "stringWithUTF8String:", "WFContentAttributionSet * _Nonnull WFMakeContentAttributionSetFromOrigin(WFContentLocation * _Nonnull __strong, WFDisclosureLevel, NSArray<WFDisclosureWarning *> * _Nonnull __strong, NSUUID *__autoreleasing *)");
  [v15 handleFailureInFunction:v16, @"WFContentItem.m", 48, @"Invalid parameter not satisfying: %@", @"cachingIdentifier" file lineNumber description];

LABEL_3:
  uint64_t v9 = [MEMORY[0x263F08C38] UUID];
  uint64_t v10 = +[WFContentAttributionSet attributionSetWithOrigin:v7 disclosureLevel:a2 disclosureWarnings:v8 originalItemIdentifier:v9];
  id v11 = v9;
  *a4 = v11;

  return v10;
}

void WFContactFromCNContactProperty(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 key];
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2020000000;
  id v3 = (void *)getCNContactPhoneNumbersKeySymbolLoc_ptr_22080;
  uint64_t v27 = getCNContactPhoneNumbersKeySymbolLoc_ptr_22080;
  if (!getCNContactPhoneNumbersKeySymbolLoc_ptr_22080)
  {
    uint64_t v20 = MEMORY[0x263EF8330];
    uint64_t v21 = 3221225472;
    unint64_t v22 = __getCNContactPhoneNumbersKeySymbolLoc_block_invoke_22081;
    id v23 = &unk_26428AC60;
    id v4 = ContactsLibrary_22082();
    v25[3] = (uint64_t)dlsym(v4, "CNContactPhoneNumbersKey");
    getCNContactPhoneNumbersKeySymbolLoc_ptr_22080 = v25[3];
    id v3 = (void *)v25[3];
  }
  _Block_object_dispose(&v24, 8);
  if (!v3)
  {
    uint64_t v18 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v19 = [NSString stringWithUTF8String:"NSString *getCNContactPhoneNumbersKey(void)"];
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, @"WFContactsUtilities.m", 15, @"%s", dlerror(), v20, v21, v22, v23);
LABEL_23:

    __break(1u);
    return;
  }
  if ([v2 isEqualToString:*v3])
  {
    uint64_t v5 = 3;
    goto LABEL_17;
  }
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2020000000;
  uint64_t v6 = (void *)getCNContactEmailAddressesKeySymbolLoc_ptr_22087;
  uint64_t v27 = getCNContactEmailAddressesKeySymbolLoc_ptr_22087;
  if (!getCNContactEmailAddressesKeySymbolLoc_ptr_22087)
  {
    uint64_t v20 = MEMORY[0x263EF8330];
    uint64_t v21 = 3221225472;
    unint64_t v22 = __getCNContactEmailAddressesKeySymbolLoc_block_invoke_22088;
    id v23 = &unk_26428AC60;
    id v7 = ContactsLibrary_22082();
    v25[3] = (uint64_t)dlsym(v7, "CNContactEmailAddressesKey");
    getCNContactEmailAddressesKeySymbolLoc_ptr_22087 = v25[3];
    uint64_t v6 = (void *)v25[3];
  }
  _Block_object_dispose(&v24, 8);
  if (!v6)
  {
    uint64_t v18 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v19 = [NSString stringWithUTF8String:"NSString *getCNContactEmailAddressesKey(void)"];
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, @"WFContactsUtilities.m", 16, @"%s", dlerror(), v20, v21, v22, v23);
    goto LABEL_23;
  }
  if ([v2 isEqualToString:*v6])
  {
    uint64_t v5 = 4;
    goto LABEL_17;
  }
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2020000000;
  id v8 = (void *)getCNContactUrlAddressesKeySymbolLoc_ptr_22091;
  uint64_t v27 = getCNContactUrlAddressesKeySymbolLoc_ptr_22091;
  if (!getCNContactUrlAddressesKeySymbolLoc_ptr_22091)
  {
    uint64_t v20 = MEMORY[0x263EF8330];
    uint64_t v21 = 3221225472;
    unint64_t v22 = __getCNContactUrlAddressesKeySymbolLoc_block_invoke_22092;
    id v23 = &unk_26428AC60;
    uint64_t v9 = ContactsLibrary_22082();
    v25[3] = (uint64_t)dlsym(v9, "CNContactUrlAddressesKey");
    getCNContactUrlAddressesKeySymbolLoc_ptr_22091 = v25[3];
    id v8 = (void *)v25[3];
  }
  _Block_object_dispose(&v24, 8);
  if (!v8)
  {
    uint64_t v18 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v19 = [NSString stringWithUTF8String:"NSString *getCNContactUrlAddressesKey(void)"];
    objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, @"WFContactsUtilities.m", 17, @"%s", dlerror(), v20, v21, v22, v23);
    goto LABEL_23;
  }
  if ([v2 isEqualToString:*v8]) {
    uint64_t v5 = 22;
  }
  else {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
LABEL_17:
  uint64_t v10 = [v1 contact];
  id v11 = [v10 valueForKey:v2];
  uint64_t v12 = [v11 valueForKey:@"identifier"];
  uint64_t v13 = [v1 identifier];
  uint64_t v14 = [v12 indexOfObject:v13];

  long long v15 = [v1 contact];
  long long v16 = +[WFCNContact contactWithCNContact:v15 propertyID:v5 multivalueIndex:v14];

  id v17 = v16;
}

void sub_2165E957C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCNContactPhoneNumbersKeySymbolLoc_block_invoke_22081(uint64_t a1)
{
  uint64_t v2 = ContactsLibrary_22082();
  uint64_t result = dlsym(v2, "CNContactPhoneNumbersKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactPhoneNumbersKeySymbolLoc_ptr_22080 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *ContactsLibrary_22082()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary_22102)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __ContactsLibraryCore_block_invoke_22103;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_26428A4A8;
    uint64_t v6 = 0;
    ContactsLibraryCore_frameworkLibrary_22102 = _sl_dlopen();
  }
  uint64_t v0 = (void *)ContactsLibraryCore_frameworkLibrary_22102;
  if (!ContactsLibraryCore_frameworkLibrary_22102)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *ContactsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFContactsUtilities.m", 14, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getCNContactEmailAddressesKeySymbolLoc_block_invoke_22088(uint64_t a1)
{
  uint64_t v2 = ContactsLibrary_22082();
  uint64_t result = dlsym(v2, "CNContactEmailAddressesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactEmailAddressesKeySymbolLoc_ptr_22087 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCNContactUrlAddressesKeySymbolLoc_block_invoke_22092(uint64_t a1)
{
  uint64_t v2 = ContactsLibrary_22082();
  uint64_t result = dlsym(v2, "CNContactUrlAddressesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCNContactUrlAddressesKeySymbolLoc_ptr_22091 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ContactsLibraryCore_block_invoke_22103()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrary_22102 = result;
  return result;
}

id WFPredicateForEnablingPerson(void *a1)
{
  id v1 = a1;
  if ([v1 count])
  {
    uint64_t v2 = objc_msgSend(v1, "if_map:", &__block_literal_global_22107);
    id v3 = [MEMORY[0x263F08730] orPredicateWithSubpredicates:v2];
  }
  else
  {
    id v3 = [MEMORY[0x263F08A98] predicateWithValue:1];
  }

  return v3;
}

uint64_t __WFPredicateForEnablingPerson_block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x263F08A98], "predicateWithFormat:", @"%K.@count > 0", a2);
}

id WFPredicateForSelectionOfPerson(void *a1)
{
  id v1 = a1;
  if ([v1 count])
  {
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    void v5[2] = __WFPredicateForSelectionOfPerson_block_invoke;
    v5[3] = &unk_26428AD10;
    id v6 = v1;
    uint64_t v2 = objc_msgSend(v6, "if_map:", v5);
    id v3 = [MEMORY[0x263F08730] orPredicateWithSubpredicates:v2];
  }
  else
  {
    id v3 = [MEMORY[0x263F08A98] predicateWithValue:1];
  }

  return v3;
}

id __WFPredicateForSelectionOfPerson_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 3221225472;
  void v9[2] = __WFPredicateForSelectionOfPerson_block_invoke_2;
  v9[3] = &unk_26428AD10;
  id v10 = v3;
  id v5 = v3;
  id v6 = objc_msgSend(v4, "if_map:", v9);
  uint64_t v7 = [MEMORY[0x263F08730] andPredicateWithSubpredicates:v6];

  return v7;
}

id __WFPredicateForSelectionOfPerson_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) isEqualToString:v3]) {
    objc_msgSend(MEMORY[0x263F08A98], "predicateWithFormat:", @"%K.@count == 1", *(void *)(a1 + 32));
  }
  else {
  id v4 = objc_msgSend(MEMORY[0x263F08A98], "predicateWithFormat:", @"%K.@count == 0", v3);
  }

  return v4;
}

id getFPSandboxingURLWrapperClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getFPSandboxingURLWrapperClass_softClass;
  uint64_t v7 = getFPSandboxingURLWrapperClass_softClass;
  if (!getFPSandboxingURLWrapperClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getFPSandboxingURLWrapperClass_block_invoke;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getFPSandboxingURLWrapperClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165EA27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFPSandboxingURLWrapperClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!FileProviderLibraryCore_frameworkLibrary_22170)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __FileProviderLibraryCore_block_invoke_22171;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_26428A4C0;
    uint64_t v8 = 0;
    FileProviderLibraryCore_frameworkLibrary_22170 = _sl_dlopen();
  }
  if (!FileProviderLibraryCore_frameworkLibrary_22170)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *FileProviderLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFSecurityScopedFileCoder.m", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("FPSandboxingURLWrapper");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getFPSandboxingURLWrapperClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFSecurityScopedFileCoder.m", 19, @"Unable to find class %s", "FPSandboxingURLWrapper");

LABEL_10:
    __break(1u);
  }
  getFPSandboxingURLWrapperClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __FileProviderLibraryCore_block_invoke_22171()
{
  uint64_t result = _sl_dlopen();
  FileProviderLibraryCore_frameworkLibrary_22170 = result;
  return result;
}

uint64_t handle_mime(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 & 0x10) != 0)
  {
    uint64_t result = file_printf(a1, "inode/%s", a3, a4, a5, a6, a7, a8, a3);
    if (result == -1) {
      return result;
    }
    if ((a2 & 0x400) == 0) {
      return 0;
    }
    uint64_t result = file_printf(a1, "; charset=", v11, v12, v13, v14, v15, v16, v18);
    if (result == -1) {
      return result;
    }
LABEL_7:
    uint64_t result = file_printf(a1, "binary", a3, a4, a5, a6, a7, a8, v17);
    if (result == -1) {
      return result;
    }
    return 0;
  }
  if ((a2 & 0x400) != 0) {
    goto LABEL_7;
  }
  return 0;
}

uint64_t bad_link(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a3;
  int v11 = *(_DWORD *)(a1 + 68);
  if ((v11 & 0x10) == 0
    || (uint64_t result = file_printf(a1, "inode/symlink", a3, a4, a5, a6, a7, a8, v13), result != -1))
  {
    if ((v11 & 0x410) != 0) {
      return 1;
    }
    if ((*(unsigned char *)(a1 + 69) & 2) != 0)
    {
      file_error(a1, a2, "broken symbolic link to %s", a4, a5, a6, a7, a8, v8);
      return 0xFFFFFFFFLL;
    }
    else
    {
      uint64_t result = file_printf(a1, "broken symbolic link to %s", a3, a4, a5, a6, a7, a8, v8);
      if (result != -1) {
        return 1;
      }
    }
  }
  return result;
}

id WFURLSchemesInBundle(void *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v2 = objc_opt_new();
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = objc_msgSend(v1, "objectForInfoDictionaryKey:", @"CFBundleURLTypes", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = [*(id *)(*((void *)&v10 + 1) + 8 * i) objectForKey:@"CFBundleURLSchemes"];
        [v2 addObjectsFromArray:v8];
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  return v2;
}

id getMKMapItemClass_23716()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMKMapItemClass_softClass_23717;
  uint64_t v7 = getMKMapItemClass_softClass_23717;
  if (!getMKMapItemClass_softClass_23717)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMKMapItemClass_block_invoke_23718;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getMKMapItemClass_block_invoke_23718((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165F2408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKMapItemClass_block_invoke_23718(uint64_t a1)
{
  MapKitLibrary_23719();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKMapItemClass_softClass_23717 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKMapItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFLocationContentItem.m", 34, @"Unable to find class %s", "MKMapItem");

    __break(1u);
  }
}

void *MapKitLibrary_23719()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MapKitLibraryCore_frameworkLibrary_23728)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __MapKitLibraryCore_block_invoke_23729;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_26428A878;
    uint64_t v6 = 0;
    MapKitLibraryCore_frameworkLibrary_23728 = _sl_dlopen();
  }
  uint64_t v0 = (void *)MapKitLibraryCore_frameworkLibrary_23728;
  if (!MapKitLibraryCore_frameworkLibrary_23728)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *MapKitLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFLocationContentItem.m", 31, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MapKitLibraryCore_block_invoke_23729()
{
  uint64_t result = _sl_dlopen();
  MapKitLibraryCore_frameworkLibrary_23728 = result;
  return result;
}

id getCLLocationClass_23762()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCLLocationClass_softClass_23763;
  uint64_t v7 = getCLLocationClass_softClass_23763;
  if (!getCLLocationClass_softClass_23763)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCLLocationClass_block_invoke_23764;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getCLLocationClass_block_invoke_23764((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165F29BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCLLocationClass_block_invoke_23764(uint64_t a1)
{
  CoreLocationLibrary_23765();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLLocation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLLocationClass_softClass_23763 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLLocationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFLocationContentItem.m", 27, @"Unable to find class %s", "CLLocation");

    __break(1u);
  }
}

void CoreLocationLibrary_23765()
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!CoreLocationLibraryCore_frameworkLibrary_23768)
  {
    v3[1] = (void *)MEMORY[0x263EF8330];
    v3[2] = (void *)3221225472;
    v3[3] = __CoreLocationLibraryCore_block_invoke_23769;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_26428A860;
    uint64_t v5 = 0;
    CoreLocationLibraryCore_frameworkLibrary_23768 = _sl_dlopen();
  }
  if (!CoreLocationLibraryCore_frameworkLibrary_23768)
  {
    id v1 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *CoreLocationLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"WFLocationContentItem.m", 26, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __CoreLocationLibraryCore_block_invoke_23769()
{
  uint64_t result = _sl_dlopen();
  CoreLocationLibraryCore_frameworkLibrary_23768 = result;
  return result;
}

id getCLPlacemarkClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCLPlacemarkClass_softClass_23846;
  uint64_t v7 = getCLPlacemarkClass_softClass_23846;
  if (!getCLPlacemarkClass_softClass_23846)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCLPlacemarkClass_block_invoke_23847;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getCLPlacemarkClass_block_invoke_23847((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165F3A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCLGeocoderClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCLGeocoderClass_softClass_23842;
  uint64_t v7 = getCLGeocoderClass_softClass_23842;
  if (!getCLGeocoderClass_softClass_23842)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getCLGeocoderClass_block_invoke_23843;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getCLGeocoderClass_block_invoke_23843((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165F3B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_2165F4168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKLocalSearchRequestClass_block_invoke_23830(uint64_t a1)
{
  MapKitLibrary_23719();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKLocalSearchRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKLocalSearchRequestClass_softClass_23829 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKLocalSearchRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFLocationContentItem.m", 32, @"Unable to find class %s", "MKLocalSearchRequest");

    __break(1u);
  }
}

void __getMKLocalSearchClass_block_invoke_23832(uint64_t a1)
{
  MapKitLibrary_23719();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKLocalSearch");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKLocalSearchClass_softClass_23831 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKLocalSearchClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFLocationContentItem.m", 33, @"Unable to find class %s", "MKLocalSearch");

    __break(1u);
  }
}

id getMKPlacemarkClass_23837()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getMKPlacemarkClass_softClass_23838;
  uint64_t v7 = getMKPlacemarkClass_softClass_23838;
  if (!getMKPlacemarkClass_softClass_23838)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getMKPlacemarkClass_block_invoke_23839;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getMKPlacemarkClass_block_invoke_23839((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165F49CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKPlacemarkClass_block_invoke_23839(uint64_t a1)
{
  MapKitLibrary_23719();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKPlacemark");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKPlacemarkClass_softClass_23838 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKPlacemarkClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFLocationContentItem.m", 39, @"Unable to find class %s", "MKPlacemark");

    __break(1u);
  }
}

void __getCLGeocoderClass_block_invoke_23843(uint64_t a1)
{
  CoreLocationLibrary_23765();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLGeocoder");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLGeocoderClass_softClass_23842 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLGeocoderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFLocationContentItem.m", 29, @"Unable to find class %s", "CLGeocoder");

    __break(1u);
  }
}

void __getCLPlacemarkClass_block_invoke_23847(uint64_t a1)
{
  CoreLocationLibrary_23765();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CLPlacemark");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCLPlacemarkClass_softClass_23846 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCLPlacemarkClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFLocationContentItem.m", 28, @"Unable to find class %s", "CLPlacemark");

    __break(1u);
  }
}

void sub_2165F5300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMKMapSnapshotOptionsClass_block_invoke(uint64_t a1)
{
  MapKitLibrary_23719();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapSnapshotOptions");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKMapSnapshotOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKMapSnapshotOptionsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFLocationContentItem.m", 36, @"Unable to find class %s", "MKMapSnapshotOptions");

    __break(1u);
  }
}

void *__getMKCoordinateRegionMakeWithDistanceSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = MapKitLibrary_23719();
  uint64_t result = dlsym(v2, "MKCoordinateRegionMakeWithDistance");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMKCoordinateRegionMakeWithDistanceSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getMKMapSnapshotCustomFeatureAnnotationClass_block_invoke(uint64_t a1)
{
  MapKitLibrary_23719();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapSnapshotCustomFeatureAnnotation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKMapSnapshotCustomFeatureAnnotationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKMapSnapshotCustomFeatureAnnotationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFLocationContentItem.m", 35, @"Unable to find class %s", "MKMapSnapshotCustomFeatureAnnotation");

    __break(1u);
  }
}

void __getMKMapSnapshotterClass_block_invoke(uint64_t a1)
{
  MapKitLibrary_23719();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MKMapSnapshotter");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMKMapSnapshotterClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMKMapSnapshotterClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFLocationContentItem.m", 37, @"Unable to find class %s", "MKMapSnapshotter");

    __break(1u);
  }
}

void *WFAllWalletTransactionMerchantTypes()
{
  return &unk_26C743B58;
}

void sub_2165F74F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getNSDocumentTypeDocumentAttributeSymbolLoc_block_invoke_24252(uint64_t a1)
{
  uint64_t v2 = UIFoundationLibrary_24253();
  uint64_t result = dlsym(v2, "NSDocumentTypeDocumentAttribute");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSDocumentTypeDocumentAttributeSymbolLoc_ptr_24251 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *UIFoundationLibrary_24253()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!UIFoundationLibraryCore_frameworkLibrary_24269)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __UIFoundationLibraryCore_block_invoke_24270;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_26428AA20;
    uint64_t v6 = 0;
    UIFoundationLibraryCore_frameworkLibrary_24269 = _sl_dlopen();
  }
  uint64_t v0 = (void *)UIFoundationLibraryCore_frameworkLibrary_24269;
  if (!UIFoundationLibraryCore_frameworkLibrary_24269)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *UIFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFNSItemProviderContentItem.m", 20, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *__getNSHTMLTextDocumentTypeSymbolLoc_block_invoke_24260(uint64_t a1)
{
  uint64_t v2 = UIFoundationLibrary_24253();
  uint64_t result = dlsym(v2, "NSHTMLTextDocumentType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNSHTMLTextDocumentTypeSymbolLoc_ptr_24259 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __UIFoundationLibraryCore_block_invoke_24270()
{
  uint64_t result = _sl_dlopen();
  UIFoundationLibraryCore_frameworkLibrary_24269 = result;
  return result;
}

void sub_2165F811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24289(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24290(uint64_t a1)
{
}

void sub_2165FAF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __UIKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  UIKitLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_2165FB5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMPMediaItemCollectionClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_24988)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __MediaPlayerLibraryCore_block_invoke_24989;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_26428ABE8;
    uint64_t v8 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_24988 = _sl_dlopen();
  }
  if (!MediaPlayerLibraryCore_frameworkLibrary_24988)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFMediaCollectionContentItem.m", 14, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MPMediaItemCollection");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getMPMediaItemCollectionClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFMediaCollectionContentItem.m", 15, @"Unable to find class %s", "MPMediaItemCollection");

LABEL_10:
    __break(1u);
  }
  getMPMediaItemCollectionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_24989()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_24988 = result;
  return result;
}

id getFIUIWorkoutActivityTypeClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getFIUIWorkoutActivityTypeClass_softClass;
  uint64_t v7 = getFIUIWorkoutActivityTypeClass_softClass;
  if (!getFIUIWorkoutActivityTypeClass_softClass)
  {
    v3[0] = MEMORY[0x263EF8330];
    v3[1] = 3221225472;
    v3[2] = __getFIUIWorkoutActivityTypeClass_block_invoke;
    v3[3] = &unk_26428AC60;
    void v3[4] = &v4;
    __getFIUIWorkoutActivityTypeClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2165FBA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFIUIWorkoutActivityTypeClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v6[0] = 0;
  if (!FitnessUILibraryCore_frameworkLibrary)
  {
    v6[1] = (void *)MEMORY[0x263EF8330];
    v6[2] = (void *)3221225472;
    v6[3] = __FitnessUILibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_26428AC00;
    uint64_t v8 = 0;
    FitnessUILibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!FitnessUILibraryCore_frameworkLibrary)
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *FitnessUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"WFFitnessWorkoutActivityTypeContentItem.m", 14, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("FIUIWorkoutActivityType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x263F08690] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getFIUIWorkoutActivityTypeClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"WFFitnessWorkoutActivityTypeContentItem.m", 15, @"Unable to find class %s", "FIUIWorkoutActivityType");

LABEL_10:
    __break(1u);
  }
  getFIUIWorkoutActivityTypeClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __FitnessUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  FitnessUILibraryCore_frameworkLibrary = result;
  return result;
}

void sub_2165FEC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPMediaItemClass_block_invoke_25559(uint64_t a1)
{
  MediaPlayerLibrary_25560();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaItemClass_softClass_25558 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMPMediaLibraryFiltering.m", 18, @"Unable to find class %s", "MPMediaItem");

    __break(1u);
  }
}

void *MediaPlayerLibrary_25560()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v4[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary_25571)
  {
    v4[1] = (void *)MEMORY[0x263EF8330];
    v4[2] = (void *)3221225472;
    v4[3] = __MediaPlayerLibraryCore_block_invoke_25572;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_26428AC80;
    uint64_t v6 = 0;
    MediaPlayerLibraryCore_frameworkLibrary_25571 = _sl_dlopen();
  }
  uint64_t v0 = (void *)MediaPlayerLibraryCore_frameworkLibrary_25571;
  if (!MediaPlayerLibraryCore_frameworkLibrary_25571)
  {
    uint64_t v0 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMPMediaLibraryFiltering.m", 15, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MediaPlayerLibraryCore_block_invoke_25572()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrary_25571 = result;
  return result;
}

void sub_2165FF5CC(_Unwind_Exception *a1)
{
}

void sub_2165FF5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void *__getMPMediaItemPropertyMediaTypeSymbolLoc_block_invoke_25582(uint64_t a1)
{
  uint64_t v2 = MediaPlayerLibrary_25560();
  uint64_t result = dlsym(v2, "MPMediaItemPropertyMediaType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMPMediaItemPropertyMediaTypeSymbolLoc_ptr_25581 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id WFMPMediaTypeMapping()
{
  v10[7] = *MEMORY[0x263EF8340];
  v9[0] = &unk_26C743A50;
  uint64_t v0 = WFLocalizedContentPropertyPossibleValueMarker(@"Music");
  v10[0] = v0;
  v9[1] = &unk_26C743A68;
  id v1 = WFLocalizedContentPropertyPossibleValueMarker(@"Podcast");
  v10[1] = v1;
  void v9[2] = &unk_26C743A80;
  uint64_t v2 = WFLocalizedContentPropertyPossibleValueMarker(@"Audiobook");
  v10[2] = v2;
  v9[3] = &unk_26C743A98;
  id v3 = WFLocalizedContentPropertyPossibleValueMarker(@"iTunes U");
  void v10[3] = v3;
  void v9[4] = &unk_26C743AB0;
  uint64_t v4 = WFLocalizedContentPropertyPossibleValueMarker(@"Movie");
  void v10[4] = v4;
  v9[5] = &unk_26C743AC8;
  long long v5 = WFLocalizedContentPropertyPossibleValueMarker(@"TV Show");
  v10[5] = v5;
  v9[6] = &unk_26C743AE0;
  uint64_t v6 = WFLocalizedContentPropertyPossibleValueMarker(@"Music Video");
  v10[6] = v6;
  uint64_t v7 = [NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:7];

  return v7;
}

void __getMPMediaPropertyPredicateClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary_25560();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaPropertyPredicate");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaPropertyPredicateClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaPropertyPredicateClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMPMediaLibraryFiltering.m", 16, @"Unable to find class %s", "MPMediaPropertyPredicate");

    __break(1u);
  }
}

id getWFMediaLibraryFilteringLogObject()
{
  if (getWFMediaLibraryFilteringLogObject_onceToken != -1) {
    dispatch_once(&getWFMediaLibraryFilteringLogObject_onceToken, &__block_literal_global_25593);
  }
  uint64_t v0 = (void *)getWFMediaLibraryFilteringLogObject_log;
  return v0;
}

void __getMPMediaQueryClass_block_invoke_25589(uint64_t a1)
{
  MediaPlayerLibrary_25560();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPMediaQuery");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPMediaQueryClass_softClass_25588 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x263F08690] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getMPMediaQueryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"WFMPMediaLibraryFiltering.m", 17, @"Unable to find class %s", "MPMediaQuery");

    __break(1u);
  }
}

uint64_t __getWFMediaLibraryFilteringLogObject_block_invoke()
{
  getWFMediaLibraryFilteringLogObject_log = (uint64_t)os_log_create((const char *)*MEMORY[0x263F85748], "MediaLibraryFiltering");
  return MEMORY[0x270F9A758]();
}

void sub_2165FFBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__25648(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__25649(uint64_t a1)
{
}

void sub_216600268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id WFEntitlementsForExecutableAtPath(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  SecStaticCodeRef staticCode = 0;
  id v1 = 0;
  if (!SecStaticCodeCreateWithPath((CFURLRef)[NSURL fileURLWithPath:a1], 0, &staticCode))
  {
    CFDictionaryRef v5 = 0;
    SecCodeCopySigningInformation(staticCode, 4u, &v5);
    CFRelease(staticCode);
    CFDictionaryRef v2 = v5;
    id v1 = [(__CFDictionary *)v5 objectForKey:*MEMORY[0x263F17238]];
    if (!v1)
    {
      id v3 = getWFGeneralLogObject();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v8 = "WFEntitlementsForExecutableAtPath";
        _os_log_impl(&dword_216505000, v3, OS_LOG_TYPE_FAULT, "%s Failed to retrieve entitlements of executable", buf, 0xCu);
      }
    }
  }
  return v1;
}

void WFGetContentLocationFromURLActionInput(void *a1, void *a2)
{
  id v3 = a2;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = __WFGetContentLocationFromURLActionInput_block_invoke;
  v6[3] = &unk_26428AFB0;
  id v7 = v3;
  id v4 = v3;
  id v5 = a1;
  [v5 getObjectRepresentations:v6 forClass:objc_opt_class()];
}

void __WFGetContentLocationFromURLActionInput_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  id v6 = a2;
  id v7 = v6;
  if (a4)
  {
    uint64_t v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_3:
    v8();
    goto LABEL_25;
  }
  if (![v6 count])
  {
    uint64_t v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    goto LABEL_3;
  }
  uint64_t v29 = a1;
  uint64_t v9 = objc_msgSend(v7, "if_map:", &__block_literal_global_25758);

  id v30 = 0;
  id v10 = v9;
  long long v11 = [MEMORY[0x263EFF9C0] set];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v7 = v10;
  uint64_t v12 = [v7 countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v32;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v32 != v14) {
          objc_enumerationMutation(v7);
        }
        uint64_t v16 = *(void *)(*((void *)&v31 + 1) + 8 * i);
        char v17 = [MEMORY[0x263F01880] defaultWorkspace];
        char v18 = [v17 applicationsAvailableForOpeningURL:v16];
        uint64_t v19 = [v18 firstObject];
        uint64_t v20 = [v19 correspondingApplicationRecord];

        if (v20)
        {
          uint64_t v21 = [v20 bundleIdentifier];
          [v11 addObject:v21];
        }
      }
      uint64_t v13 = [v7 countByEnumeratingWithState:&v31 objects:v35 count:16];
    }
    while (v13);
  }

  if ([v11 count]
    && (unint64_t)[v11 count] < 2
    && ![v11 containsObject:*MEMORY[0x263F85578]])
  {
    id v25 = objc_alloc(MEMORY[0x263F0F988]);
    uint64_t v26 = [v11 anyObject];
    unint64_t v22 = (void *)[v25 initWithBundleIdentifier:v26];

    uint64_t v27 = [MEMORY[0x263F0F9B0] sharedResolver];
    uint64_t v28 = [v27 resolvedAppMatchingDescriptor:v22];

    id v23 = +[WFAppContentLocation locationWithAppDescriptor:v28];
  }
  else
  {
    unint64_t v22 = [MEMORY[0x263EFFA08] setWithArray:v7];
    id v23 = +[WFURLContentLocation locationWithURLs:v22 error:&v30];
  }

  id v24 = v30;
  if (!v23)
  {
    if ([v7 count])
    {
      id v23 = +[WFContentLocation webpagesLocation];
    }
    else
    {
      id v23 = 0;
    }
  }
  (*(void (**)(void))(*(void *)(v29 + 32) + 16))();

LABEL_25:
}

id __WFGetContentLocationFromURLActionInput_block_invoke_2(uint64_t a1, void *a2)
{
  return WFAppTransportSecuredURL(a2);
}

id WFRepresentationsFromCoercionHandlerResult(void *a1)
{
  v5[1] = *MEMORY[0x263EF8340];
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    CFDictionaryRef v2 = objc_msgSend(v1, "if_map:", &__block_literal_global_26150);
  }
  else if (v1)
  {
    id v3 = WFRepresentationFromCoercionHandlerResultObject(v1);
    v5[0] = v3;
    CFDictionaryRef v2 = [MEMORY[0x263EFF8C0] arrayWithObjects:v5 count:1];
  }
  else
  {
    CFDictionaryRef v2 = 0;
  }

  return v2;
}

id WFRepresentationFromCoercionHandlerResultObject(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = [MEMORY[0x263F08690] currentHandler];
    id v6 = [NSString stringWithUTF8String:"WFRepresentation * _Nonnull WFRepresentationFromCoercionHandlerResultObject(id  _Nonnull __strong)"];
    [v5 handleFailureInFunction:v6, @"WFCoercion.m", 127, @"The result of a coercion must be a representation, not a WFContentItem." file lineNumber description];
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = v1;
  }
  else
  {
    id v2 = +[WFObjectRepresentation object:v1];
  }
  id v3 = v2;

  return v3;
}

id __WFRepresentationsFromCoercionHandlerResult_block_invoke(uint64_t a1, void *a2)
{
  return WFRepresentationFromCoercionHandlerResultObject(a2);
}

uint64_t WFCatalystHelperXPCInterface()
{
  return [MEMORY[0x263F08D80] interfaceWithProtocol:&unk_26C7681A0];
}

void sub_216605CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26273(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26274(uint64_t a1)
{
}

void *__Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

uint64_t sub_216605F00()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_216605F10()
{
  return MEMORY[0x270F9D6B0]();
}

uint64_t sub_216605F20()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t sub_216605F30()
{
  return MEMORY[0x270EF1CC0]();
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x270EE51A0](theString);
}

uint64_t CFUniCharIsMemberOf()
{
  return MEMORY[0x270EE54B0]();
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x270EE5978](retstr, t);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x270EE5980](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59A8](retstr, sx, sy);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x270EE59E8](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x270EE59F8](context);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C68]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetRenderingIntent(CGContextRef c, CGColorRenderingIntent intent)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x270EE62D0](data);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

void CGImageDestinationAddImageFromSource(CGImageDestinationRef idst, CGImageSourceRef isrc, size_t index, CFDictionaryRef properties)
{
}

BOOL CGImageDestinationCopyImageSource(CGImageDestinationRef idst, CGImageSourceRef isrc, CFDictionaryRef options, CFErrorRef *err)
{
  return MEMORY[0x270EF4F10](idst, isrc, options, err);
}

CFArrayRef CGImageDestinationCopyTypeIdentifiers(void)
{
  return (CFArrayRef)MEMORY[0x270EF4F18]();
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F20](data, type, count, options);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F38](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x270EF4F48](idst);
}

void CGImageDestinationSetProperties(CGImageDestinationRef idst, CFDictionaryRef properties)
{
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x270EE6800](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x270EE6868](image);
}

void CGImageRelease(CGImageRef image)
{
}

CFDictionaryRef CGImageSourceCopyProperties(CGImageSourceRef isrc, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x270EF4FF8](isrc, options);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x270EF5000](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageRef CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5028](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5030](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5040](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x270EF5048](isrc);
}

void CGPDFContextSetURLForRect(CGContextRef context, CFURLRef url, CGRect rect)
{
}

CGPDFDocumentRef CGPDFDocumentCreateWithProvider(CGDataProviderRef provider)
{
  return (CGPDFDocumentRef)MEMORY[0x270EE6B90](provider);
}

CGPDFDocumentRef CGPDFDocumentCreateWithURL(CFURLRef url)
{
  return (CGPDFDocumentRef)MEMORY[0x270EE6B98](url);
}

size_t CGPDFDocumentGetNumberOfPages(CGPDFDocumentRef document)
{
  return MEMORY[0x270EE6BF8](document);
}

CGPDFPageRef CGPDFDocumentGetPage(CGPDFDocumentRef document, size_t pageNumber)
{
  return (CGPDFPageRef)MEMORY[0x270EE6C00](document, pageNumber);
}

void CGPDFDocumentRelease(CGPDFDocumentRef document)
{
}

CGRect CGPDFPageGetBoxRect(CGPDFPageRef page, CGPDFBox box)
{
  MEMORY[0x270EE6D80](page, *(void *)&box);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGAffineTransform *__cdecl CGPDFPageGetDrawingTransform(CGAffineTransform *__return_ptr retstr, CGPDFPageRef page, CGPDFBox box, CGRect rect, int rotate, BOOL preserveAspectRatio)
{
  return (CGAffineTransform *)MEMORY[0x270EE6D98](retstr, page, *(void *)&box, *(void *)&rotate, preserveAspectRatio, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x270EE7168](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x270EE71A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x270EE7228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

uint64_t CPSharedResourcesDirectory()
{
  return MEMORY[0x270F0CDD0]();
}

uint64_t INFileURLAuditTokenEquals()
{
  return MEMORY[0x270EF51C0]();
}

uint64_t INFileURLHasAssociatedAuditToken()
{
  return MEMORY[0x270EF51C8]();
}

uint64_t INFileURLSetMarkedForDeletionOnDeallocation()
{
  return MEMORY[0x270EF51D0]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x270EF2A50](aClassName);
}

NSZone *NSDefaultMallocZone(void)
{
  return (NSZone *)MEMORY[0x270EF2A70]();
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2AD0]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x270EF2C38](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

OSStatus SecCodeCopySigningInformation(SecStaticCodeRef code, SecCSFlags flags, CFDictionaryRef *information)
{
  return MEMORY[0x270EFD8D0](code, *(void *)&flags, information);
}

OSStatus SecStaticCodeCreateWithPath(CFURLRef path, SecCSFlags flags, SecStaticCodeRef *staticCode)
{
  return MEMORY[0x270EFDC88](path, *(void *)&flags, staticCode);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x270EFDCB0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x270EFDCD0](allocator);
}

CFDictionaryRef UTTypeCopyDeclaration(CFStringRef inUTI)
{
  return (CFDictionaryRef)MEMORY[0x270EE8550](inUTI);
}

CFStringRef UTTypeCreatePreferredIdentifierForTag(CFStringRef inTagClass, CFStringRef inTag, CFStringRef inConformingToUTI)
{
  return (CFStringRef)MEMORY[0x270EE8580](inTagClass, inTag, inConformingToUTI);
}

uint64_t VCIsInternalBuild()
{
  return MEMORY[0x270F84820]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFBundleCopyBundleURLForExecutableURL()
{
  return MEMORY[0x270EE55A0]();
}

uint64_t _CFMZEnabled()
{
  return MEMORY[0x270EE5648]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x270ED7DA8](*(void *)&a1, a2, *(void *)&a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x270ED7E38]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x270ED7ED8]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x270ED7EE0]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F08](*(void *)&a1);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sandbox_in_a_container()
{
  return MEMORY[0x270ED8148]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x270F76310]();
}

void abort(void)
{
}

int access(const char *a1, int a2)
{
  return MEMORY[0x270ED8480](a1, *(void *)&a2);
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x270ED85F8](*(void *)&__upper_bound);
}

uint64_t archive_entry_free()
{
  return MEMORY[0x270F97D48]();
}

uint64_t archive_entry_new()
{
  return MEMORY[0x270F97D78]();
}

uint64_t archive_entry_pathname()
{
  return MEMORY[0x270F97D88]();
}

uint64_t archive_entry_pathname_w()
{
  return MEMORY[0x270F97D98]();
}

uint64_t archive_entry_set_ctime()
{
  return MEMORY[0x270F97DB0]();
}

uint64_t archive_entry_set_filetype()
{
  return MEMORY[0x270F97DC0]();
}

uint64_t archive_entry_set_mtime()
{
  return MEMORY[0x270F97DE0]();
}

uint64_t archive_entry_set_pathname()
{
  return MEMORY[0x270F97DF0]();
}

uint64_t archive_entry_set_perm()
{
  return MEMORY[0x270F97E00]();
}

uint64_t archive_entry_set_size()
{
  return MEMORY[0x270F97E08]();
}

uint64_t archive_entry_size()
{
  return MEMORY[0x270F97E20]();
}

uint64_t archive_errno()
{
  return MEMORY[0x270F97E50]();
}

uint64_t archive_error_string()
{
  return MEMORY[0x270F97E58]();
}

uint64_t archive_read_data_skip()
{
  return MEMORY[0x270F97E98]();
}

uint64_t archive_read_extract()
{
  return MEMORY[0x270F97ED0]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x270F97EF0]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x270F97EF8]();
}

uint64_t archive_read_open_filename()
{
  return MEMORY[0x270F97F20]();
}

uint64_t archive_read_open_memory()
{
  return MEMORY[0x270F97F28]();
}

uint64_t archive_read_support_compression_all()
{
  return MEMORY[0x270F97F48]();
}

uint64_t archive_read_support_format_all()
{
  return MEMORY[0x270F97F68]();
}

uint64_t archive_read_support_format_raw()
{
  return MEMORY[0x270F97F70]();
}

uint64_t archive_write_close()
{
  return MEMORY[0x270F97FA8]();
}

uint64_t archive_write_data()
{
  return MEMORY[0x270F97FB0]();
}

uint64_t archive_write_finish()
{
  return MEMORY[0x270F97FD8]();
}

uint64_t archive_write_header()
{
  return MEMORY[0x270F97FF0]();
}

uint64_t archive_write_new()
{
  return MEMORY[0x270F97FF8]();
}

uint64_t archive_write_open_filename()
{
  return MEMORY[0x270F98018]();
}

uint64_t archive_write_set_compression_bzip2()
{
  return MEMORY[0x270F98028]();
}

uint64_t archive_write_set_compression_gzip()
{
  return MEMORY[0x270F98030]();
}

uint64_t archive_write_set_compression_xz()
{
  return MEMORY[0x270F98040]();
}

uint64_t archive_write_set_format()
{
  return MEMORY[0x270F98050]();
}

char *__cdecl asctime_r(const tm *a1, char *a2)
{
  return (char *)MEMORY[0x270ED8608](a1, a2);
}

long double atan(long double __x)
{
  MEMORY[0x270ED86A0](__x);
  return result;
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x270ED8798](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

BOOL class_addIvar(Class cls, const char *name, size_t size, uint8_t alignment, const char *types)
{
  return MEMORY[0x270F9A3F8](cls, name, size, alignment, types);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x270F9A400](cls, name, imp, types);
}

Method *__cdecl class_copyMethodList(Class cls, unsigned int *outCount)
{
  return (Method *)MEMORY[0x270F9A430](cls, outCount);
}

Ivar class_getInstanceVariable(Class cls, const char *name)
{
  return (Ivar)MEMORY[0x270F9A470](cls, name);
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x270ED8F30](a1);
}

uint64_t container_create_or_lookup_path_for_current_user()
{
  return MEMORY[0x270ED8F98]();
}

uint64_t ct_green_tea_logger_create()
{
  return MEMORY[0x270F91820]();
}

uint64_t ct_green_tea_logger_destroy()
{
  return MEMORY[0x270F91838]();
}

char *__cdecl ctime_r(const time_t *a1, char *a2)
{
  return (char *)MEMORY[0x270ED9170](a1, a2);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x270F9C698](strm, *(void *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x270F9C6A8](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x270F9C6B0](strm, *(void *)&level, *(void *)&method, *(void *)&windowBits, *(void *)&memLevel, *(void *)&strategy, version, *(void *)&stream_size);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9448](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9458](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x270ED9610](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x270ED9620]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

int dup2(int a1, int a2)
{
  return MEMORY[0x270ED9680](*(void *)&a1, *(void *)&a2);
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x270ED9860](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x270ED9938](a1);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x270ED9940](*(void *)&a1, a2, a3, *(void *)&a4);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

const char *__cdecl fmtcheck(const char *a1, const char *a2)
{
  return (const char *)MEMORY[0x270ED99E0](a1, a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x270ED9A18](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x270ED9A20](a1, a2);
}

void free(void *a1)
{
}

int freelocale(locale_t a1)
{
  return MEMORY[0x270ED9A58](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x270ED9AF0](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

uint64_t getCTGreenTeaOsLogHandle()
{
  return MEMORY[0x270F91848]();
}

uint64_t getWFActionsLogObject()
{
  return MEMORY[0x270F848C0]();
}

uint64_t getWFAppIntentsLogObject()
{
  return MEMORY[0x270F848C8]();
}

uint64_t getWFContentGraphLogObject()
{
  return MEMORY[0x270F848D8]();
}

uint64_t getWFContentItemLogObject()
{
  return MEMORY[0x270F848E0]();
}

uint64_t getWFFilesLogObject()
{
  return MEMORY[0x270F848F8]();
}

uint64_t getWFGeneralLogObject()
{
  return MEMORY[0x270F84900]();
}

uint64_t getWFSecurityLogObject()
{
  return MEMORY[0x270F84918]();
}

uint64_t getWFWorkflowExecutionLogObject()
{
  return MEMORY[0x270F84948]();
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

ssize_t getline(char **__linep, size_t *__linecapp, FILE *__stream)
{
  return MEMORY[0x270ED9C80](__linep, __linecapp, __stream);
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x270ED9DC0](path, name, value, size, *(void *)&position, *(void *)&options);
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x270ED9DE0](a1, a2);
}

htmlDocPtr htmlReadMemory(const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  return (htmlDocPtr)MEMORY[0x270F9BAC0](buffer, *(void *)&size, URL, encoding, *(void *)&options);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x270ED9ED8](*(void *)&a1, a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x270EDA0A0](a1, a2);
}

long double log2(long double __x)
{
  MEMORY[0x270EDA0D8](__x);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x270EDA118](*(void *)&a1, a2, *(void *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDA120](a1, a2);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

size_t mbrtowc(__int32 *a1, const char *a2, size_t a3, mbstate_t *a4)
{
  return MEMORY[0x270EDA438](a1, a2, a3, a4);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmem(const void *__big, size_t __big_len, const void *__little, size_t __little_len)
{
  return (void *)MEMORY[0x270EDA480](__big, __big_len, __little, __little_len);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

char *__cdecl method_copyReturnType(Method m)
{
  return (char *)MEMORY[0x270F9A4E0](m);
}

SEL method_getName(Method m)
{
  return (SEL)MEMORY[0x270F9A4F8](m);
}

unsigned int method_getNumberOfArguments(Method m)
{
  return MEMORY[0x270F9A500](m);
}

int mkstemp(char *a1)
{
  return MEMORY[0x270EDA560](a1);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x270EDA588](a1);
}

locale_t newlocale(int a1, const char *a2, locale_t a3)
{
  return (locale_t)MEMORY[0x270EDA708](*(void *)&a1, a2, a3);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x270EDA760](name);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x270F9A550](superclass, name, extraBytes);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x270F9A598](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x270F9A648](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x270F9A658](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_registerClassPair(Class cls)
{
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9AA38](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x270F9AA40](a1);
}

id object_getIvar(id a1, Ivar a2)
{
  return (id)MEMORY[0x270F9AA60](a1, a2);
}

BOOL object_isClass(id obj)
{
  return MEMORY[0x270F9AA68](obj);
}

void object_setIvarWithStrongDefault(id obj, Ivar ivar, id value)
{
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x270EDA858](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x270EDAD10](*(void *)&__fd, __buf, __nbyte, a4);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x270EDB120](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x270EDB128](a1);
}

ssize_t readlink(const char *a1, char *a2, size_t a3)
{
  return MEMORY[0x270EDB138](a1, a2, a3);
}

int regcomp(regex_t *a1, const char *a2, int a3)
{
  return MEMORY[0x270EDB1A8](a1, a2, *(void *)&a3);
}

size_t regerror(int a1, const regex_t *a2, char *a3, size_t a4)
{
  return MEMORY[0x270EDB1B0](*(void *)&a1, a2, a3, a4);
}

int regexec(const regex_t *a1, const char *a2, size_t a3, regmatch_t __pmatch[], int a5)
{
  return MEMORY[0x270EDB1B8](a1, a2, a3, __pmatch, *(void *)&a5);
}

void regfree(regex_t *a1)
{
}

int removexattr(const char *path, const char *name, int options)
{
  return MEMORY[0x270EDB218](path, name, *(void *)&options);
}

uint64_t sandbox_check()
{
  return MEMORY[0x270EDB290]();
}

uint64_t sandbox_check_by_audit_token()
{
  return MEMORY[0x270EDB298]();
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x270EDB328](*(void *)&a1, a2, a3, a4, a5);
}

float sinf(float a1)
{
  MEMORY[0x270EDB4F0](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB530](a1, a2);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x270EDB598](__big, __little);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strcspn(const char *__s, const char *__charset)
{
  return MEMORY[0x270EDB5C8](__s, __charset);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB600](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x270EDB620](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x270EDB650](__s1, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB680](__s, *(void *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB6A0](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x270EDB6A8](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  MEMORY[0x270EDB6B8](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB708](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB718](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x270FA23F8]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x270FA2408]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x270FA0278]();
}

uint64_t swift_dynamicCastMetatypeUnconditional()
{
  return MEMORY[0x270FA0280]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x270FA0490]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

mode_t umask(mode_t a1)
{
  return MEMORY[0x270EDB988](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x270EDB9A8](a1);
}

locale_t uselocale(locale_t a1)
{
  return (locale_t)MEMORY[0x270EDB9D8](a1);
}

int utimes(const char *a1, const timeval *a2)
{
  return MEMORY[0x270EDB9F8](a1, a2);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x270EDBA70](a1, a2, a3);
}

int vsprintf(char *a1, const char *a2, va_list a3)
{
  return MEMORY[0x270EDBB28](a1, a2, a3);
}

size_t wcslen(const __int32 *a1)
{
  return MEMORY[0x270EDBBA0](a1);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x270EDBC30](*(void *)&__fd, __buf, __nbyte);
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x270F9BC50](doc);
}

void xmlFreeDoc(xmlDocPtr cur)
{
}

xmlChar *__cdecl xmlGetProp(const xmlNode *node, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x270F9BD30](node, name);
}

void xmlXPathFreeContext(xmlXPathContextPtr ctxt)
{
}

void xmlXPathFreeObject(xmlXPathObjectPtr obj)
{
}

xmlXPathContextPtr xmlXPathNewContext(xmlDocPtr doc)
{
  return (xmlXPathContextPtr)MEMORY[0x270F9C458](doc);
}

xmlXPathObjectPtr xmlXPathNodeEval(xmlNodePtr node, const xmlChar *str, xmlXPathContextPtr ctx)
{
  return (xmlXPathObjectPtr)MEMORY[0x270F9C498](node, str, ctx);
}