uint64_t OpenAppOnTVPreflightClient.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t OpenAppOnTVPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t OpenAppOnTVPreflightClient.init()()
{
  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance OpenAppOnTVPreflightClient()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance OpenAppOnTVPreflightClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    v18 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    void *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for OpenAppOnTVPreflightClient()
{
  return self;
}

uint64_t method lookup function for OpenAppOnTVPreflightClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for OpenAppOnTVPreflightClient);
}

uint64_t dispatch thunk of OpenAppOnTVPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of OpenAppOnTVPreflightClient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (beginIndex: Int, parenOpen: Character));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, identifier: String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, AppData));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AnyDataProvider.__allocating_init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnyDataProvider.__allocating_init<A>(provider:)(a1, a2, a3, (uint64_t (*)(void))specialized AnyDataProvider.__allocating_init<A>(provider:));
}

BOOL static DataProviderError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void DataProviderError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int DataProviderError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DataProviderError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t AnyDataProvider.oneTimeInit.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t AnyDataProvider.oneTimeInit.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 88) = a1;
  return result;
}

uint64_t (*AnyDataProvider.oneTimeInit.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t AnyDataProvider.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AnyDataProvider.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnyDataProvider.__allocating_init<A>(provider:)(a1, a2, a3, (uint64_t (*)(void))specialized AnyDataProvider.init<A>(provider:));
}

uint64_t AnyDataProvider.__allocating_init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v6;
}

uint64_t (*implicit closure #1 in AnyDataProvider.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (char *)swift_allocObject();
  *((void *)v11 + 2) = a2;
  *((void *)v11 + 3) = a3;
  *((void *)v11 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, a3);
  return partial apply for implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
}

uint64_t (*implicit closure #3 in AnyDataProvider.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (char *)swift_allocObject();
  *((void *)v11 + 2) = a2;
  *((void *)v11 + 3) = a3;
  *((void *)v11 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, a3);
  return partial apply for implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
}

uint64_t (*implicit closure #5 in AnyDataProvider.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (char *)swift_allocObject();
  *((void *)v11 + 2) = a2;
  *((void *)v11 + 3) = a3;
  *((void *)v11 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, a3);
  return partial apply for implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
}

uint64_t (*implicit closure #7 in AnyDataProvider.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (char *)swift_allocObject();
  *((void *)v11 + 2) = a2;
  *((void *)v11 + 3) = a3;
  *((void *)v11 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, a3);
  return partial apply for implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AnyDataProvider.prepare()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
  swift_retain();
  v36 = (uint8_t *)v8;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v37 = v6;
    v38[0] = v12;
    uint64_t v13 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v35 = v1;
    uint64_t v15 = *(void *)(v3 + 96);
    unint64_t v14 = *(void *)(v3 + 104);
    swift_bridgeObjectRetain();
    uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, v38);
    uint64_t v2 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v9, v10, "%s preparing ...", v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v16 = v13;
    uint64_t v6 = v37;
    MEMORY[0x1CB77E470](v16, -1, -1);
    MEMORY[0x1CB77E470](v11, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v18 = *(void *)(v3 + 96);
  unint64_t v17 = *(void *)(v3 + 104);
  v38[0] = v18;
  v38[1] = v17;
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = 0x7261706572705F20;
  v19._object = (void *)0xEB00000000292865;
  String.append(_:)(v19);
  uint64_t v20 = v38[0];
  Date.init()();
  uint64_t v21 = &v6[v4[5]];
  *(void *)uint64_t v21 = "SiriInformationSearch/DataProvider.swift";
  *((void *)v21 + 1) = 40;
  v21[16] = 2;
  *(void *)&v6[v4[6]] = 53;
  unint64_t v22 = &v6[v4[7]];
  *(void *)unint64_t v22 = "prepare()";
  *((void *)v22 + 1) = 9;
  v22[16] = 2;
  uint64_t v23 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v20);
  uint64_t v25 = v24;
  uint64_t v26 = swift_bridgeObjectRelease();
  v27 = (uint64_t *)&v6[v4[8]];
  uint64_t *v27 = v23;
  v27[1] = v25;
  (*(void (**)(uint64_t))(v3 + 16))(v26);
  if (!v2)
  {
    swift_retain();
    v28 = Logger.logObject.getter();
    uint64_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, (os_log_type_t)v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      v37 = v6;
      v38[0] = v31;
      uint64_t v32 = v31;
      *(_DWORD *)v30 = 136315138;
      v36 = v30 + 4;
      swift_bridgeObjectRetain();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v28, (os_log_type_t)v29, "%s prepare complete", v30, 0xCu);
      swift_arrayDestroy();
      uint64_t v33 = v32;
      uint64_t v6 = v37;
      MEMORY[0x1CB77E470](v33, -1, -1);
      MEMORY[0x1CB77E470](v30, -1, -1);
    }
    else
    {

      swift_release();
    }
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v6, 0);
  outlined destroy of PerformanceUtil.Ticket((uint64_t)v6);
}

void AnyDataProvider.prepare(dispatchQueue:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (*((unsigned char *)v1 + 89))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
    swift_retain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      aBlock[0] = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      uint64_t v8 = v2[12];
      unint64_t v9 = v2[13];
      swift_bridgeObjectRetain();
      uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v4, v5, "%s skipping prepared", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v7, -1, -1);
      MEMORY[0x1CB77E470](v6, -1, -1);
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    uint64_t v10 = *v1;
    dispatch_group_t v23 = (dispatch_group_t)v2[10];
    uint64_t v24 = a1;
    dispatch_group_enter(v23);
    uint64_t v11 = swift_allocObject();
    swift_weakInit();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = *(void *)(v10 + 80);
    *(void *)(v12 + 24) = v11;
    aBlock[4] = (uint64_t)partial apply for closure #1 in AnyDataProvider.prepare(dispatchQueue:);
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_6;
    uint64_t v13 = _Block_copy(aBlock);
    uint64_t v14 = type metadata accessor for DispatchQoS();
    v22[2] = v22;
    uint64_t v15 = *(void *)(v14 - 8);
    MEMORY[0x1F4188790](v14);
    unint64_t v17 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v18 = type metadata accessor for DispatchWorkItemFlags();
    v22[1] = v22;
    uint64_t v19 = *(void *)(v18 - 8);
    MEMORY[0x1F4188790](v18);
    uint64_t v21 = (char *)v22 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v25 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1CB77D180](v23, v17, v21, v13);
    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_release();
    swift_release();
  }
}

uint64_t closure #1 in AnyDataProvider.prepare(dispatchQueue:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (*(uint64_t (**)(void))(*(void *)result + 208))();
    if ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 152))(v2))
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
      swift_retain();
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        uint64_t v7 = swift_slowAlloc();
        uint64_t v10 = v7;
        *(_DWORD *)uint64_t v6 = 136315138;
        uint64_t v8 = *(void *)(v1 + 96);
        unint64_t v9 = *(void *)(v1 + 104);
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v10);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v4, v5, "%s set isPrepared", v6, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v7, -1, -1);
        MEMORY[0x1CB77E470](v6, -1, -1);
      }
      else
      {

        swift_release();
      }
      *(unsigned char *)(v1 + 89) = 1;
    }
    dispatch_group_leave(*(dispatch_group_t *)(v1 + 80));
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall AnyDataProvider.reset()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  swift_retain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v35 = v6;
  if (v9)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    v37[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v34 = v4;
    uint64_t v13 = *(void *)(v1 + 96);
    unint64_t v12 = *(void *)(v1 + 104);
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, v37);
    uint64_t v4 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v7, v8, "%s reseting ...", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v11, -1, -1);
    MEMORY[0x1CB77E470](v10, -1, -1);
  }
  else
  {

    swift_release();
  }
  unint64_t v14 = *(void *)(v1 + 104);
  uint64_t v34 = *(char **)(v1 + 96);
  v37[0] = (uint64_t)v34;
  v37[1] = v14;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 0x2874657365725F20;
  v15._object = (void *)0xE900000000000029;
  String.append(_:)(v15);
  uint64_t v16 = v37[0];
  Date.init()();
  unint64_t v17 = &v4[v2[5]];
  *(void *)unint64_t v17 = "SiriInformationSearch/DataProvider.swift";
  *((void *)v17 + 1) = 40;
  v17[16] = 2;
  *(void *)&v4[v2[6]] = 125;
  uint64_t v18 = &v4[v2[7]];
  *(void *)uint64_t v18 = "reset()";
  *((void *)v18 + 1) = 7;
  v18[16] = 2;
  uint64_t v19 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v16);
  uint64_t v21 = v20;
  uint64_t v22 = swift_bridgeObjectRelease();
  dispatch_group_t v23 = (uint64_t *)&v4[v2[8]];
  *dispatch_group_t v23 = v19;
  v23[1] = v21;
  (*(void (**)(uint64_t))(v1 + 64))(v22);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v24 = (*(uint64_t (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v4, 0);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 152))(v24))
  {
    swift_retain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      v37[0] = v28;
      *(_DWORD *)v27 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v34, v14, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v25, v26, "%s reset isPrepared", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v28, -1, -1);
      MEMORY[0x1CB77E470](v27, -1, -1);
    }
    else
    {

      swift_release();
    }
    *(unsigned char *)(v1 + 89) = 0;
  }
  swift_retain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    v37[0] = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v34, v14, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v29, v30, "%s reset complete", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v32, -1, -1);
    MEMORY[0x1CB77E470](v31, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  outlined destroy of PerformanceUtil.Ticket((uint64_t)v4);
}

uint64_t AnyDataProvider.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AnyDataProvider.__deallocating_deinit()
{
  AnyDataProvider.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance AnyDataProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance AnyDataProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance AnyDataProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))();
}

uint64_t protocol witness for DataProvider.reset() in conformance AnyDataProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

uint64_t AnyDataProvider.waitForPrepare(timeout:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unsigned __int8 v24 = 1;
  ContinuousClock.init()();
  uint64_t v19 = &v24;
  uint64_t v20 = v2;
  uint64_t v21 = a1;
  lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock();
  Clock.measure(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  swift_retain_n();
  BOOL v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v13 = Duration.description.getter();
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v15 = *(void *)(v2 + 96);
    unint64_t v16 = *(void *)(v2 + 104);
    swift_bridgeObjectRetain();
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v9, v10, "Waited %s for %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v12, -1, -1);
    MEMORY[0x1CB77E470](v11, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return v24;
}

uint64_t *specialized AnyDataProvider.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  v3[10] = (uint64_t)dispatch_group_create();
  *((_WORD *)v3 + 44) = 0;
  uint64_t v8 = *(void *)(v7 + 80);
  v3[2] = (uint64_t)implicit closure #1 in AnyDataProvider.init<A>(provider:)(a1, v8, a2, a3);
  v3[3] = v9;
  v3[4] = (uint64_t)implicit closure #3 in AnyDataProvider.init<A>(provider:)(a1, v8, a2, a3);
  v3[5] = v10;
  v3[6] = (uint64_t)implicit closure #5 in AnyDataProvider.init<A>(provider:)(a1, v8, a2, a3);
  v3[7] = v11;
  v3[8] = (uint64_t)implicit closure #7 in AnyDataProvider.init<A>(provider:)(a1, v8, a2, a3);
  v3[9] = v12;
  swift_getMetatypeMetadata();
  v3[12] = String.init<A>(describing:)();
  v3[13] = v13;
  return v3;
}

uint64_t *specialized AnyDataProvider.__allocating_init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized AnyDataProvider.init<A>(provider:)(a1, a2, a3);
}

uint64_t sub_1C90371E8()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C9037220()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in AnyDataProvider.prepare(dispatchQueue:)()
{
  return closure #1 in AnyDataProvider.prepare(dispatchQueue:)();
}

uint64_t partial apply for closure #1 in AnyDataProvider.waitForPrepare(timeout:)()
{
  uint64_t v1 = *(unsigned char **)(v0 + 16);
  uint64_t result = MEMORY[0x1CB77D100](*(void *)(v0 + 32));
  *uint64_t v1 = result & 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock()
{
  unint64_t result = lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock;
  if (!lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock)
  {
    type metadata accessor for ContinuousClock();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock);
  }
  return result;
}

uint64_t sub_1C9037354@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C90373A4(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 160))(*a1);
}

uint64_t sub_1C90373EC()
{
  return 8;
}

void *sub_1C90373F8(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for DataProviderError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C90374D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataProviderError()
{
  return &type metadata for DataProviderError;
}

uint64_t dispatch thunk of DataProvider.prepare()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DataProvider.wait(timeout:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))() & 1;
}

uint64_t dispatch thunk of DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 80);
  __int16 v7 = *(_WORD *)(a2 + 88);
  uint64_t v8 = *(uint64_t (**)(uint64_t, _OWORD *))(a6 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  v12[2] = *(_OWORD *)(a2 + 32);
  v12[3] = v10;
  v12[4] = *(_OWORD *)(a2 + 64);
  uint64_t v13 = v6;
  __int16 v14 = v7;
  return v8(a1, v12);
}

uint64_t dispatch thunk of DataProvider.reset()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t type metadata instantiation function for AnyDataProvider()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t type metadata completion function for AnyDataProvider()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AnyDataProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for AnyDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AnyDataProvider);
}

uint64_t dispatch thunk of AnyDataProvider.oneTimeInit.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of AnyDataProvider.oneTimeInit.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of AnyDataProvider.oneTimeInit.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of AnyDataProvider.__allocating_init<A>(provider:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of AnyDataProvider.prepare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of AnyDataProvider.prepare(dispatchQueue:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of AnyDataProvider.wait(timeout:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))() & 1;
}

uint64_t dispatch thunk of AnyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  __int16 v4 = *(_WORD *)(a2 + 88);
  uint64_t v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 232);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = v3;
  __int16 v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of AnyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:timeout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  __int16 v4 = *(_WORD *)(a2 + 88);
  uint64_t v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 240);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = v3;
  __int16 v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of AnyDataProvider.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t partial apply for implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 40))();
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 32))();
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 24))() & 1;
}

uint64_t objectdestroy_9Tm()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 16))();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

BOOL UsoTask.isSmartPlayTask.getter()
{
  unint64_t v1 = v0;
  static UsoTask_CodegenConverter.convert(task:)();
  if (v42[3])
  {
    type metadata accessor for UsoTask_play_uso_NoEntity();
    if (swift_dynamicCast())
    {
      unint64_t v2 = 0xEC00000073656974;
      uint64_t v3 = 0x69746E4572657375;
      swift_release();
      uint64_t v4 = byte_1F236ED58;
      uint64_t v5 = UsoTask.arguments.getter();
      uint64_t v6 = 0x69746E4572657375;
      uint64_t v7 = 0xEC00000073656974;
      switch(v4)
      {
        case 1:
          uint64_t v7 = 0xE600000000000000;
          uint64_t v6 = 0x746567726174;
          if (*(void *)(v5 + 16)) {
            goto LABEL_9;
          }
          goto LABEL_23;
        case 2:
          uint64_t v6 = 0x636E657265666572;
          uint64_t v7 = 0xE900000000000065;
          goto LABEL_8;
        case 3:
          uint64_t v7 = 0xE700000000000000;
          uint64_t v6 = 0x72656767697274;
          if (!*(void *)(v5 + 16)) {
            goto LABEL_23;
          }
          goto LABEL_9;
        default:
LABEL_8:
          if (!*(void *)(v5 + 16)) {
            goto LABEL_23;
          }
LABEL_9:
          unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
          if ((v9 & 1) == 0)
          {
LABEL_23:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v15 = MEMORY[0x1E4FBC860];
            if (MEMORY[0x1E4FBC860] >> 62)
            {
LABEL_76:
              swift_bridgeObjectRetain();
              uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_25;
            }
LABEL_24:
            uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_25:
            swift_bridgeObjectRelease();
            if (v16) {
              return 0;
            }
            uint64_t v17 = byte_1F236ED80;
            uint64_t v18 = 0xEC00000073656974;
            uint64_t v19 = UsoTask.arguments.getter();
            uint64_t v20 = 0x69746E4572657375;
            switch(v17)
            {
              case 1:
                uint64_t v18 = 0xE600000000000000;
                uint64_t v20 = 0x746567726174;
                if (*(void *)(v19 + 16)) {
                  goto LABEL_34;
                }
                goto LABEL_47;
              case 2:
                uint64_t v20 = 0x636E657265666572;
                uint64_t v18 = 0xE900000000000065;
                goto LABEL_31;
              case 3:
                uint64_t v18 = 0xE700000000000000;
                uint64_t v20 = 0x72656767697274;
                if (*(void *)(v19 + 16)) {
                  goto LABEL_34;
                }
                goto LABEL_47;
              default:
LABEL_31:
                if (!*(void *)(v19 + 16)) {
                  goto LABEL_47;
                }
LABEL_34:
                unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v18);
                if ((v23 & 1) == 0)
                {
LABEL_47:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v27 = MEMORY[0x1E4FBC860];
                  if (MEMORY[0x1E4FBC860] >> 62) {
                    goto LABEL_81;
                  }
                  goto LABEL_48;
                }
                unint64_t v10 = *(void *)(*(void *)(v19 + 56) + 8 * v22);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v11 = MEMORY[0x1E4FBC860];
                v42[0] = MEMORY[0x1E4FBC860];
                if (v10 >> 62) {
                  goto LABEL_78;
                }
                uint64_t v24 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                if (!v24) {
                  goto LABEL_79;
                }
                break;
            }
            goto LABEL_37;
          }
          unint64_t v10 = *(void *)(*(void *)(v5 + 56) + 8 * v8);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v11 = MEMORY[0x1E4FBC860];
          v42[0] = MEMORY[0x1E4FBC860];
          if (v10 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
            if (v12) {
              goto LABEL_12;
            }
          }
          else
          {
            uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v12)
            {
LABEL_12:
              type metadata accessor for UsoEntity_common_UserEntity();
              if (v12 < 1)
              {
                __break(1u);
LABEL_78:
                swift_bridgeObjectRetain();
                uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
                if (!v24)
                {
LABEL_79:
                  swift_bridgeObjectRelease();
                  unint64_t v33 = MEMORY[0x1E4FBC860];
                  goto LABEL_80;
                }
LABEL_37:
                type metadata accessor for UsoEntity_uso_NoEntity();
                if (v24 < 1)
                {
                  __break(1u);
                  goto LABEL_83;
                }
                for (uint64_t i = 0; i != v24; ++i)
                {
                  if ((v10 & 0xC000000000000001) != 0) {
                    MEMORY[0x1CB77D510](i, v10);
                  }
                  else {
                    swift_retain();
                  }
                  dispatch thunk of UsoValue.getAsEntity()();
                  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
                  swift_release();
                  uint64_t v26 = swift_release();
                  if (v41)
                  {
                    MEMORY[0x1CB77CD90](v26);
                    if (*(void *)((v42[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42[0] & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                  }
                }
                swift_bridgeObjectRelease();
                unint64_t v33 = v42[0];
                unint64_t v2 = 0xEC00000073656974;
                uint64_t v3 = 0x69746E4572657375;
LABEL_80:
                swift_bridgeObjectRelease();
                v42[0] = v11;
                swift_bridgeObjectRetain();
                specialized Array.append<A>(contentsOf:)(v33);
                swift_bridgeObjectRelease();
                unint64_t v27 = v11;
                if (v11 >> 62)
                {
LABEL_81:
                  swift_bridgeObjectRetain();
                  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                }
                else
                {
LABEL_48:
                  uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
                }
                swift_bridgeObjectRelease();
                if (v28) {
                  return 0;
                }
                uint64_t v30 = byte_1F236EDA8;
                uint64_t v31 = UsoTask.arguments.getter();
                uint64_t v32 = v31;
                switch(v30)
                {
                  case 1:
                    unint64_t v2 = 0xE600000000000000;
                    uint64_t v3 = 0x746567726174;
                    break;
                  case 2:
                    uint64_t v3 = 0x636E657265666572;
                    unint64_t v2 = 0xE900000000000065;
                    break;
                  case 3:
                    unint64_t v2 = 0xE700000000000000;
                    uint64_t v3 = 0x72656767697274;
                    break;
                  default:
                    break;
                }
                if (!*(void *)(v31 + 16)
                  || (unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2), (v35 & 1) == 0))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v2 = MEMORY[0x1E4FBC860];
LABEL_86:
                  if (v2 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    uint64_t v40 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  }
                  swift_bridgeObjectRelease();
                  return v40 == 0;
                }
                unint64_t v1 = *(void *)(*(void *)(v32 + 56) + 8 * v34);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v2 = MEMORY[0x1E4FBC860];
                v42[0] = MEMORY[0x1E4FBC860];
                if (!(v1 >> 62))
                {
                  uint64_t v36 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  swift_bridgeObjectRetain();
                  if (v36)
                  {
LABEL_61:
                    type metadata accessor for UsoEntity_common_EventTrigger();
                    if (v36 < 1)
                    {
                      __break(1u);
                      JUMPOUT(0x1C90383F8);
                    }
                    for (uint64_t j = 0; j != v36; ++j)
                    {
                      if ((v1 & 0xC000000000000001) != 0) {
                        MEMORY[0x1CB77D510](j, v1);
                      }
                      else {
                        swift_retain();
                      }
                      dispatch thunk of UsoValue.getAsEntity()();
                      static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
                      swift_release();
                      uint64_t v38 = swift_release();
                      if (v41)
                      {
                        MEMORY[0x1CB77CD90](v38);
                        if (*(void *)((v42[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42[0] & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
                          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                        specialized Array._endMutation()();
                      }
                    }
                    swift_bridgeObjectRelease();
                    unint64_t v39 = v42[0];
                    goto LABEL_85;
                  }
LABEL_84:
                  swift_bridgeObjectRelease();
                  unint64_t v39 = MEMORY[0x1E4FBC860];
LABEL_85:
                  swift_bridgeObjectRelease();
                  v42[0] = v2;
                  swift_bridgeObjectRetain();
                  specialized Array.append<A>(contentsOf:)(v39);
                  swift_bridgeObjectRelease();
                  goto LABEL_86;
                }
LABEL_83:
                swift_bridgeObjectRetain();
                uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
                if (v36) {
                  goto LABEL_61;
                }
                goto LABEL_84;
              }
              for (uint64_t k = 0; k != v12; ++k)
              {
                if ((v10 & 0xC000000000000001) != 0) {
                  MEMORY[0x1CB77D510](k, v10);
                }
                else {
                  swift_retain();
                }
                dispatch thunk of UsoValue.getAsEntity()();
                static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
                swift_release();
                uint64_t v14 = swift_release();
                if (v41)
                {
                  MEMORY[0x1CB77CD90](v14);
                  if (*(void *)((v42[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42[0] & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                }
              }
              swift_bridgeObjectRelease();
              unint64_t v21 = v42[0];
              unint64_t v2 = 0xEC00000073656974;
              uint64_t v3 = 0x69746E4572657375;
LABEL_75:
              swift_bridgeObjectRelease();
              v42[0] = v11;
              swift_bridgeObjectRetain();
              specialized Array.append<A>(contentsOf:)(v21);
              swift_bridgeObjectRelease();
              unint64_t v15 = v11;
              if (v11 >> 62) {
                goto LABEL_76;
              }
              goto LABEL_24;
            }
          }
          swift_bridgeObjectRelease();
          unint64_t v21 = MEMORY[0x1E4FBC860];
          goto LABEL_75;
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v42);
  }
  return 0;
}

uint64_t UsoTask.isOfflineSupportedPlayTask.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v4, (uint64_t)v2);
  if (!v3)
  {
    outlined destroy of Any?((uint64_t)v2);
    goto LABEL_6;
  }
  type metadata accessor for UsoTask_play_uso_NoEntity();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    outlined init with take of Any?((uint64_t)v4, (uint64_t)v2);
    goto LABEL_7;
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v2);
  if (v1[0])
  {
    swift_release();
    outlined destroy of Any?((uint64_t)v2);
    return 1;
  }
LABEL_7:
  outlined init with take of Any?((uint64_t)v2, (uint64_t)v1);
  if (v1[3])
  {
    type metadata accessor for UsoTask_play_common_MediaItem();
    if (swift_dynamicCast())
    {
      swift_release();
      return 1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v1);
  }
  return 0;
}

BOOL UsoTask.isSummarizeMediaTask.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)v4);
    goto LABEL_5;
  }
  type metadata accessor for UsoTask_summarise_common_MediaItem();
  if (!swift_dynamicCast())
  {
LABEL_5:
    uint64_t v0 = 0;
    goto LABEL_6;
  }
  uint64_t v0 = v3;
LABEL_6:
  BOOL v1 = v0 != 0;
  swift_release();
  return v1;
}

void (*Siri_Nlu_External_UserParse.firstSmartPlayTask()())(char *, unint64_t, uint64_t)
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v63 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = Siri_Nlu_External_Span.matcherNames.getter();
  unint64_t v5 = MEMORY[0x1E4FBC860];
  v69[0] = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    unint64_t v8 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    uint64_t v7 = v1 + 16;
    uint64_t v66 = v4;
    v67 = v8;
    unint64_t v9 = v4 + ((*(unsigned __int8 *)(v7 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 64));
    unint64_t v10 = (void (**)(char *, uint64_t))(v7 - 8);
    uint64_t v11 = *(void *)(v7 + 56);
    do
    {
      uint64_t v12 = v7;
      v67(v3, v9, v0);
      uint64_t v13 = v68;
      uint64_t v14 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
      uint64_t v68 = v13;
      if (v13)
      {
        (*v10)(v3, v0);
        v61 = (void (*)(char *, unint64_t, uint64_t))v69[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v61;
      }
      unint64_t v15 = v14;
      (*v10)(v3, v0);
      specialized Array.append<A>(contentsOf:)(v15);
      v9 += v11;
      --v6;
      uint64_t v7 = v12;
    }
    while (v6);
    swift_bridgeObjectRelease();
    unint64_t v16 = v69[0];
    unint64_t v5 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v16 = MEMORY[0x1E4FBC860];
  }
  if (v16 >> 62)
  {
LABEL_103:
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    if (v17) {
      goto LABEL_9;
    }
LABEL_104:
    v61 = 0;
    goto LABEL_105;
  }
  uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v17) {
    goto LABEL_104;
  }
LABEL_9:
  unint64_t v18 = 0;
  unint64_t v63 = v16;
  unint64_t v19 = v16 + 32;
  uint64_t v20 = (unsigned __int8 *)&unk_1F236F000;
  uint64_t v65 = v17;
  uint64_t v66 = MEMORY[0x1E4FBC840] + 8;
  unint64_t v64 = v16 + 32;
  while (1)
  {
    unint64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    unint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 8 * v18);
    swift_retain();
    static UsoTask_CodegenConverter.convert(task:)();
    if (v69[3]) {
      break;
    }
    outlined destroy of Any?((uint64_t)v69);
LABEL_11:
    swift_release();
    unint64_t v18 = v16;
    if (v16 == v17)
    {
      v61 = 0;
      goto LABEL_105;
    }
  }
  type metadata accessor for UsoTask_play_uso_NoEntity();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }
  swift_release();
  uint64_t v22 = v20[2496];
  v67 = v21;
  uint64_t v23 = 0xEC00000073656974;
  uint64_t v24 = UsoTask.arguments.getter();
  uint64_t v25 = 0x69746E4572657375;
  switch(v22)
  {
    case 1:
      uint64_t v23 = 0xE600000000000000;
      uint64_t v25 = 0x746567726174;
      if (!*(void *)(v24 + 16)) {
        goto LABEL_34;
      }
      goto LABEL_20;
    case 2:
      uint64_t v25 = 0x636E657265666572;
      uint64_t v23 = 0xE900000000000065;
      goto LABEL_19;
    case 3:
      uint64_t v23 = 0xE700000000000000;
      uint64_t v25 = 0x72656767697274;
      if (!*(void *)(v24 + 16)) {
        goto LABEL_34;
      }
      goto LABEL_20;
    default:
LABEL_19:
      if (!*(void *)(v24 + 16)) {
        goto LABEL_34;
      }
LABEL_20:
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v23);
      if ((v27 & 1) == 0)
      {
LABEL_34:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v32 = v5;
        if (!(v5 >> 62)) {
          goto LABEL_35;
        }
        goto LABEL_89;
      }
      unint64_t v28 = *(void *)(*(void *)(v24 + 56) + 8 * v26);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v69[0] = v5;
      if (v28 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
        if (!v29)
        {
LABEL_87:
          swift_bridgeObjectRelease();
          unint64_t v38 = v5;
          goto LABEL_88;
        }
      }
      else
      {
        uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v29) {
          goto LABEL_87;
        }
      }
      type metadata accessor for UsoEntity_common_UserEntity();
      if (v29 < 1) {
        goto LABEL_102;
      }
      for (uint64_t i = 0; i != v29; ++i)
      {
        if ((v28 & 0xC000000000000001) != 0) {
          MEMORY[0x1CB77D510](i, v28);
        }
        else {
          swift_retain();
        }
        dispatch thunk of UsoValue.getAsEntity()();
        static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
        swift_release();
        uint64_t v31 = swift_release();
        if (v70)
        {
          MEMORY[0x1CB77CD90](v31);
          if (*(void *)((v69[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v69[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v38 = v69[0];
      unint64_t v5 = MEMORY[0x1E4FBC860];
      unint64_t v19 = v64;
      uint64_t v17 = v65;
LABEL_88:
      swift_bridgeObjectRelease();
      v69[0] = v5;
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v38);
      swift_bridgeObjectRelease();
      unint64_t v32 = v69[0];
      uint64_t v20 = (unsigned char *)&unk_1F236F000;
      if (!(v69[0] >> 62))
      {
LABEL_35:
        uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_36;
      }
LABEL_89:
      swift_bridgeObjectRetain();
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_36:
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_11;
      }
      break;
  }
  uint64_t v34 = byte_1F236F9E8;
  uint64_t v35 = 0xEC00000073656974;
  uint64_t v36 = UsoTask.arguments.getter();
  uint64_t v37 = 0x69746E4572657375;
  switch(v34)
  {
    case 1:
      uint64_t v35 = 0xE600000000000000;
      uint64_t v37 = 0x746567726174;
      if (!*(void *)(v36 + 16)) {
        goto LABEL_58;
      }
      goto LABEL_45;
    case 2:
      uint64_t v37 = 0x636E657265666572;
      uint64_t v35 = 0xE900000000000065;
      goto LABEL_42;
    case 3:
      uint64_t v35 = 0xE700000000000000;
      uint64_t v37 = 0x72656767697274;
      if (*(void *)(v36 + 16)) {
        goto LABEL_45;
      }
      goto LABEL_58;
    default:
LABEL_42:
      if (!*(void *)(v36 + 16)) {
        goto LABEL_58;
      }
LABEL_45:
      unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v35);
      if ((v40 & 1) == 0)
      {
LABEL_58:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v45 = v5;
        if (!(v5 >> 62)) {
          goto LABEL_59;
        }
        goto LABEL_93;
      }
      unint64_t v41 = *(void *)(*(void *)(v36 + 56) + 8 * v39);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v69[0] = v5;
      if (v41 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
        if (!v42)
        {
LABEL_91:
          swift_bridgeObjectRelease();
          unint64_t v51 = v5;
          goto LABEL_92;
        }
      }
      else
      {
        uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v42) {
          goto LABEL_91;
        }
      }
      type metadata accessor for UsoEntity_uso_NoEntity();
      if (v42 < 1)
      {
        __break(1u);
LABEL_108:
        __break(1u);
        JUMPOUT(0x1C9039074);
      }
      for (uint64_t j = 0; j != v42; ++j)
      {
        if ((v41 & 0xC000000000000001) != 0) {
          MEMORY[0x1CB77D510](j, v41);
        }
        else {
          swift_retain();
        }
        dispatch thunk of UsoValue.getAsEntity()();
        static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
        swift_release();
        uint64_t v44 = swift_release();
        if (v70)
        {
          MEMORY[0x1CB77CD90](v44);
          if (*(void *)((v69[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v69[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v51 = v69[0];
      unint64_t v5 = MEMORY[0x1E4FBC860];
      unint64_t v19 = v64;
      uint64_t v17 = v65;
LABEL_92:
      swift_bridgeObjectRelease();
      v69[0] = v5;
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v51);
      swift_bridgeObjectRelease();
      unint64_t v45 = v69[0];
      uint64_t v20 = (unsigned char *)&unk_1F236F000;
      if (!(v69[0] >> 62))
      {
LABEL_59:
        uint64_t v46 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_60;
      }
LABEL_93:
      swift_bridgeObjectRetain();
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_60:
      swift_bridgeObjectRelease();
      if (v46) {
        goto LABEL_11;
      }
      break;
  }
  uint64_t v47 = byte_1F236FA10;
  uint64_t v48 = 0xEC00000073656974;
  uint64_t v49 = UsoTask.arguments.getter();
  uint64_t v50 = 0x69746E4572657375;
  switch(v47)
  {
    case 1:
      uint64_t v48 = 0xE600000000000000;
      uint64_t v50 = 0x746567726174;
      if (!*(void *)(v49 + 16)) {
        goto LABEL_81;
      }
      goto LABEL_67;
    case 2:
      uint64_t v50 = 0x636E657265666572;
      uint64_t v48 = 0xE900000000000065;
      goto LABEL_66;
    case 3:
      uint64_t v48 = 0xE700000000000000;
      uint64_t v50 = 0x72656767697274;
      if (!*(void *)(v49 + 16)) {
        goto LABEL_81;
      }
      goto LABEL_67;
    default:
LABEL_66:
      if (!*(void *)(v49 + 16)) {
        goto LABEL_81;
      }
LABEL_67:
      unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v48);
      if ((v53 & 1) == 0)
      {
LABEL_81:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v58 = v5;
        if (!(v5 >> 62)) {
          goto LABEL_82;
        }
        goto LABEL_97;
      }
      unint64_t v54 = *(void *)(*(void *)(v49 + 56) + 8 * v52);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v69[0] = v5;
      if (v54 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
        if (!v55)
        {
LABEL_95:
          swift_bridgeObjectRelease();
          unint64_t v60 = v5;
          goto LABEL_96;
        }
      }
      else
      {
        uint64_t v55 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v55) {
          goto LABEL_95;
        }
      }
      type metadata accessor for UsoEntity_common_EventTrigger();
      if (v55 < 1) {
        goto LABEL_108;
      }
      for (uint64_t k = 0; k != v55; ++k)
      {
        if ((v54 & 0xC000000000000001) != 0) {
          MEMORY[0x1CB77D510](k, v54);
        }
        else {
          swift_retain();
        }
        dispatch thunk of UsoValue.getAsEntity()();
        static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
        swift_release();
        uint64_t v57 = swift_release();
        if (v70)
        {
          MEMORY[0x1CB77CD90](v57);
          if (*(void *)((v69[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v69[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v60 = v69[0];
      unint64_t v5 = MEMORY[0x1E4FBC860];
      unint64_t v19 = v64;
      uint64_t v17 = v65;
LABEL_96:
      swift_bridgeObjectRelease();
      v69[0] = v5;
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v60);
      swift_bridgeObjectRelease();
      unint64_t v58 = v69[0];
      uint64_t v20 = (unsigned char *)&unk_1F236F000;
      if (!(v69[0] >> 62))
      {
LABEL_82:
        uint64_t v59 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_83;
      }
LABEL_97:
      swift_bridgeObjectRetain();
      uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_83:
      swift_bridgeObjectRelease();
      if (v59) {
        goto LABEL_11;
      }
      v61 = v67;
      break;
  }
LABEL_105:
  swift_bridgeObjectRelease_n();
  return v61;
}

uint64_t Siri_Nlu_External_UserParse.firstOfflineSupportedPlayTask()()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = Siri_Nlu_External_Span.matcherNames.getter();
  v27[0] = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    unint64_t v15 = MEMORY[0x1E4FBC860];
LABEL_7:
    if (v15 >> 62) {
      goto LABEL_24;
    }
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v16)
    {
LABEL_25:
      swift_bridgeObjectRelease_n();
      return 0;
    }
LABEL_9:
    uint64_t v17 = 0;
    while (1)
    {
      uint64_t v18 = v17 + 1;
      if (__OFADD__(v17, 1))
      {
        __break(1u);
LABEL_24:
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
        if (!v16) {
          goto LABEL_25;
        }
        goto LABEL_9;
      }
      uint64_t v12 = *(void *)(v15 + 8 * v17 + 32);
      swift_retain();
      static UsoTask_CodegenConverter.convert(task:)();
      outlined init with copy of Any?((uint64_t)v27, (uint64_t)v25);
      if (!v26) {
        break;
      }
      type metadata accessor for UsoTask_play_uso_NoEntity();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v19 = v24[0];
      outlined init with take of Any?((uint64_t)v27, (uint64_t)v25);
      if (v19)
      {
        swift_release();
        outlined destroy of Any?((uint64_t)v25);
        swift_bridgeObjectRelease_n();
        return v12;
      }
LABEL_19:
      outlined init with take of Any?((uint64_t)v25, (uint64_t)v24);
      if (v24[3])
      {
        type metadata accessor for UsoTask_play_common_MediaItem();
        if (swift_dynamicCast())
        {
          swift_bridgeObjectRelease_n();
          swift_release();
          return v12;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)v24);
      }
      swift_release();
      ++v17;
      if (v18 == v16) {
        goto LABEL_25;
      }
    }
    outlined destroy of Any?((uint64_t)v25);
LABEL_18:
    outlined init with take of Any?((uint64_t)v27, (uint64_t)v25);
    goto LABEL_19;
  }
  unint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  uint64_t v7 = v2 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
  v21[1] = v5;
  uint64_t v10 = v5 + ((v9 + 32) & ~v9);
  uint64_t v11 = (void (**)(char *, uint64_t))(v7 - 8);
  uint64_t v22 = *(void *)(v7 + 56);
  uint64_t v23 = v8;
  while (1)
  {
    uint64_t v12 = v7;
    v23(v4, v10, v1);
    uint64_t v13 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    if (v0) {
      break;
    }
    unint64_t v14 = v13;
    (*v11)(v4, v1);
    specialized Array.append<A>(contentsOf:)(v14);
    v10 += v22;
    --v6;
    uint64_t v7 = v12;
    if (!v6)
    {
      swift_bridgeObjectRelease();
      unint64_t v15 = v27[0];
      goto LABEL_7;
    }
  }
  (*v11)(v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

char *Siri_Nlu_External_UserParse.firstSummarizeMediaTask()()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = Siri_Nlu_External_Span.matcherNames.getter();
  v23[0] = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    unint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    uint64_t v7 = v2 + 16;
    uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
    v20[1] = v5;
    uint64_t v10 = v5 + ((v9 + 32) & ~v9);
    uint64_t v11 = (void (**)(char *, uint64_t))(v7 - 8);
    uint64_t v21 = *(void *)(v7 + 56);
    uint64_t v22 = v8;
    while (1)
    {
      uint64_t v12 = v7;
      v22(v4, v10, v1);
      uint64_t v13 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
      if (v0) {
        break;
      }
      unint64_t v14 = v13;
      (*v11)(v4, v1);
      specialized Array.append<A>(contentsOf:)(v14);
      v10 += v21;
      --v6;
      uint64_t v7 = v12;
      if (!v6)
      {
        swift_bridgeObjectRelease();
        unint64_t v15 = v23[0];
        goto LABEL_7;
      }
    }
    (*v11)(v4, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v15 = MEMORY[0x1E4FBC860];
LABEL_7:
    if (v15 >> 62) {
      goto LABEL_18;
    }
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v16; uint64_t v16 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v17 = 0;
      while (1)
      {
        uint64_t v18 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          break;
        }
        uint64_t v4 = *(char **)(v15 + 8 * v17 + 32);
        swift_retain();
        static UsoTask_CodegenConverter.convert(task:)();
        if (v23[3])
        {
          type metadata accessor for UsoTask_summarise_common_MediaItem();
          if (swift_dynamicCast())
          {
            swift_bridgeObjectRelease_n();
            swift_release();
            return v4;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)v23);
        }
        swift_release();
        ++v17;
        if (v18 == v16) {
          goto LABEL_19;
        }
      }
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
    }
LABEL_19:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  return v4;
}

void closure #1 in RunningBoardForegroundAppProvider.getForegroundAppId()(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  if (objc_msgSend(*a1, sel_taskState) == 4)
  {
    id v4 = objc_msgSend(v3, sel_endowmentNamespaces);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v5) = specialized Set.contains(_:)(0xD00000000000001FLL, 0x80000001C919C090, v6);
      swift_bridgeObjectRelease();
      if (v5)
      {
        id v7 = objc_msgSend(v3, sel_process);
        if (v7)
        {
          unint64_t v8 = v7;
          id v9 = objc_msgSend(v7, sel_bundle);

          if (v9)
          {
            id v10 = objc_msgSend(v9, sel_identifier);

            if (v10)
            {
              uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v13 = v12;

              id v14 = objc_allocWithZone(MEMORY[0x1E4F223C8]);
              swift_bridgeObjectRetain();
              id v15 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v11, v13, 0);
              uint64_t v16 = v15;
              if (v15)
              {
                unsigned int v17 = objc_msgSend(v15, sel_developerType);

                if (v17 == 3)
                {
                  *a2 = v11;
                  a2[1] = v13;
                  return;
                }
              }
              swift_bridgeObjectRelease();
            }
          }
        }
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
}

void specialized RunningBoardForegroundAppProvider.getForegroundAppId()()
{
  v41[2] = *(id *)MEMORY[0x1E4F143B8];
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96448]), sel_init);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, sel_setEndowmentNamespaces_, isa);

  objc_msgSend(v0, sel_setValues_, 1);
  id v2 = objc_msgSend(self, sel_predicateMatchingProcessTypeApplication);
  v41[0] = 0;
  id v3 = objc_msgSend(self, sel_statesForPredicate_withDescriptor_error_, v2, v0, v41);
  id v4 = v41[0];
  if (v3)
  {
    uint64_t v5 = v3;
    type metadata accessor for RBSProcessState();
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v7 = v4;

    if (!(v6 >> 62)) {
      goto LABEL_3;
    }
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (!v8) {
      goto LABEL_30;
    }
    goto LABEL_4;
  }
  id v35 = v41[0];
  uint64_t v36 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  unint64_t v6 = MEMORY[0x1E4FBC860];
  if (MEMORY[0x1E4FBC860] >> 62) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_30;
  }
LABEL_4:
  id v38 = v0;
  id v39 = v2;
  unint64_t v9 = 0;
  unint64_t v10 = v6 & 0xC000000000000001;
  uint64_t v11 = &selRef_init;
  uint64_t v12 = MEMORY[0x1E4FBB1A0];
  while (1)
  {
    if (v10)
    {
      swift_bridgeObjectRetain();
      id v13 = (id)MEMORY[0x1CB77D510](v9, v6);
    }
    else
    {
      id v14 = *(void **)(v6 + 8 * v9 + 32);
      swift_bridgeObjectRetain();
      id v13 = v14;
    }
    id v15 = v13;
    if ([v13 v11[99]] != 4
      || (id v16 = objc_msgSend(v15, sel_endowmentNamespaces)) == 0
      || (unsigned int v17 = v16,
          uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)(),
          v17,
          LOBYTE(v17) = specialized Set.contains(_:)(0xD00000000000001FLL, 0x80000001C919C090, v18),
          swift_bridgeObjectRelease(),
          (v17 & 1) == 0))
    {
      swift_bridgeObjectRelease();

      unint64_t v32 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      goto LABEL_18;
    }
    uint64_t v19 = v12;
    id v20 = objc_msgSend(v15, sel_process);
    if (v20
      && (uint64_t v21 = v20, v22 = objc_msgSend(v20, sel_bundle), v21, v22)
      && (id v23 = objc_msgSend(v22, sel_identifier), v22, v23))
    {
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v26 = v25;

      id v27 = objc_allocWithZone(MEMORY[0x1E4F223C8]);
      swift_bridgeObjectRetain();
      unint64_t v28 = (void *)MEMORY[0x1CB77CA90](v24, v26);
      swift_bridgeObjectRelease();
      v41[0] = 0;
      id v29 = objc_msgSend(v27, sel_initWithBundleIdentifier_allowPlaceholder_error_, v28, 0, v41);

      if (v29)
      {
        id v30 = v41[0];
        unsigned int v31 = objc_msgSend(v29, sel_developerType);

        if (v31 == 3)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if (v8 != v9) {
            goto LABEL_32;
          }
LABEL_29:
          id v0 = v38;
          id v2 = v39;
          goto LABEL_30;
        }
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
      }
      else
      {
        id v33 = v41[0];
        uint64_t v34 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = v19;
    uint64_t v11 = &selRef_init;
    unint64_t v32 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
LABEL_18:
    ++v9;
    if (v32 == v8) {
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_32:
  if (v10)
  {
    id v37 = (id)MEMORY[0x1CB77D510](v9, v6);
    id v2 = v39;
    goto LABEL_37;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_40:
    __break(1u);
  }
  id v2 = v39;
  if (v9 >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_40;
  }
  id v37 = *(id *)(v6 + 8 * v9 + 32);
LABEL_37:
  id v40 = v37;
  closure #1 in RunningBoardForegroundAppProvider.getForegroundAppId()(&v40, (uint64_t *)v41);

  id v0 = v38;
  if (v41[1])
  {
LABEL_30:

    swift_bridgeObjectRelease_n();
  }
  else
  {
    __break(1u);
  }
}

uint64_t dispatch thunk of ForegroundAppProvider.getForegroundAppId()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for RunningBoardForegroundAppProvider()
{
  return &type metadata for RunningBoardForegroundAppProvider;
}

unint64_t type metadata accessor for RBSProcessState()
{
  unint64_t result = lazy cache variable for type metadata for RBSProcessState;
  if (!lazy cache variable for type metadata for RBSProcessState)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBSProcessState);
  }
  return result;
}

uint64_t SportsResolver.makeRecommendation(entities:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<SportsItem>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  unint64_t v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  v76 = (char *)&v72 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Recommendation<SportsItem>, Error>);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  id v14 = (void **)((char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12);
  id v16 = (char *)&v72 - v15;
  uint64_t v17 = type metadata accessor for SportsRecommendationQuery();
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    v73 = v9;
    uint64_t v74 = v6;
    uint64_t v75 = v5;
    uint64_t v78 = v19;
    uint64_t v79 = v18;
    uint64_t v80 = a2;
    swift_bridgeObjectRetain();
    uint64_t v22 = SportsRecommendationQuery.init(sportsPersonalizationEntities:)();
    if (one-time initialization token for shared != -1) {
      uint64_t v22 = swift_once();
    }
    id v23 = static PerformanceUtil.shared;
    MEMORY[0x1F4188790](v22);
    uint64_t v70 = v2;
    v71 = v21;
    v77 = v21;
    uint64_t v24 = type metadata accessor for Date();
    uint64_t v25 = *(void *)(v24 - 8);
    MEMORY[0x1F4188790](v24);
    id v27 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    Date.init()();
    unint64_t v28 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(void *@<X8>)))(*(void *)v23 + 200);
    uint64_t v70 = &v69;
    v71 = (char *)v11;
    LOBYTE(v69) = 2;
    uint64_t v29 = (uint64_t)v16;
    v28(0xD000000000000025, 0x80000001C919E1A0, 0, v27, "SiriInformationSearch/SportsInferenceQuerying.swift", 51, 2, 33, "makeRecommendation(entities:)", 29, v69, partial apply for closure #1 in SportsResolver.makeRecommendation(entities:));
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    outlined init with copy of Result<Recommendation<SportsItem>, Error>((uint64_t)v16, (uint64_t)v14);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      id v30 = *v14;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
      id v32 = v30;
      id v33 = v30;
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        uint64_t v37 = swift_slowAlloc();
        uint64_t v81 = (uint64_t)v30;
        v82[0] = v37;
        *(_DWORD *)uint64_t v36 = 136315138;
        id v38 = v30;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v39 = String.init<A>(describing:)();
        uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C8F83000, v34, v35, "Got error calling inference for sports recommendation: %s", v36, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v37, -1, -1);
        MEMORY[0x1CB77E470](v36, -1, -1);
      }
      else
      {
      }
      outlined destroy of Result<Recommendation<SportsItem>, Error>(v29);
      uint64_t v54 = v80;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v79);
      uint64_t v55 = type metadata accessor for SportsItem();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 1, 1, v55);
    }
    else
    {
      uint64_t v49 = v74;
      uint64_t v48 = v75;
      int v50 = (*(uint64_t (**)(void **, uint64_t))(v74 + 88))(v14, v75);
      uint64_t v51 = v80;
      if (v50 == *MEMORY[0x1E4F9FDA8])
      {
        outlined destroy of Result<Recommendation<SportsItem>, Error>(v29);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v79);
        (*(void (**)(void **, uint64_t))(v49 + 96))(v14, v48);
        uint64_t v52 = type metadata accessor for SportsItem();
        uint64_t v53 = *(void *)(v52 - 8);
        (*(void (**)(uint64_t, void **, uint64_t))(v53 + 32))(v51, v14, v52);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v51, 0, 1, v52);
      }
      else
      {
        v56 = v76;
        (*(void (**)(char *, void **, uint64_t))(v49 + 32))(v76, v14, v48);
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v57 = type metadata accessor for Logger();
        __swift_project_value_buffer(v57, (uint64_t)static Logger.pommes);
        unint64_t v58 = v73;
        (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v73, v56, v48);
        uint64_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v59, v60))
        {
          v61 = (uint8_t *)swift_slowAlloc();
          uint64_t v62 = swift_slowAlloc();
          v82[0] = v62;
          *(_DWORD *)v61 = 136315138;
          v72 = v61 + 4;
          uint64_t v63 = Recommendation.description.getter();
          uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, v82);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v65 = *(void (**)(char *, uint64_t))(v49 + 8);
          v65(v58, v48);
          _os_log_impl(&dword_1C8F83000, v59, v60, "Got non-confident sports recommendation, will not select: '%s'", v61, 0xCu);
          swift_arrayDestroy();
          uint64_t v66 = v62;
          uint64_t v51 = v80;
          MEMORY[0x1CB77E470](v66, -1, -1);
          MEMORY[0x1CB77E470](v61, -1, -1);

          v65(v76, v48);
        }
        else
        {

          v67 = *(void (**)(char *, uint64_t))(v49 + 8);
          v67(v58, v48);
          v67(v56, v48);
        }
        outlined destroy of Result<Recommendation<SportsItem>, Error>(v29);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v79);
        uint64_t v68 = type metadata accessor for SportsItem();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v51, 1, 1, v68);
      }
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.pommes);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl(&dword_1C8F83000, v42, v43, "Got no sports items from the alternative result entities. Nothing to recommend against...", v44, 2u);
      MEMORY[0x1CB77E470](v44, -1, -1);
    }

    uint64_t v45 = type metadata accessor for SportsItem();
    uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56);
    return v46(a2, 1, 1, v45);
  }
}

uint64_t closure #1 in SportsResolver.makeRecommendation(entities:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Recommendation<SportsItem>, Error>);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  SportsResolver.makeRecommendation(query:)();
  if (v1)
  {
    *a1 = v1;
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    return outlined init with take of Result<Recommendation<SportsItem>, Error>((uint64_t)v5, (uint64_t)a1);
  }
}

uint64_t partial apply for closure #1 in SportsResolver.makeRecommendation(entities:)@<X0>(void *a1@<X8>)
{
  return closure #1 in SportsResolver.makeRecommendation(entities:)(a1);
}

uint64_t outlined init with copy of Result<Recommendation<SportsItem>, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Recommendation<SportsItem>, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<Recommendation<SportsItem>, Error>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Recommendation<SportsItem>, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of SportsInferenceQuerying.makeRecommendation(entities:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t outlined init with take of Result<Recommendation<SportsItem>, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Recommendation<SportsItem>, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t FeatureFlag.isOn.getter()
{
  v3[3] = &type metadata for FeatureFlag;
  v3[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v3[0] = swift_allocObject();
  outlined init with take of FeatureFlag(v0, v3[0] + 16);
  outlined retain of FeatureFlag((uint64_t)v0);
  char v1 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return v1 & 1;
}

uint64_t sub_1C903AA84()
{
  outlined consume of FeatureFlag(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x1F4186498](v0, 49, 7);
}

uint64_t outlined retain of FeatureFlag(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of FeatureFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 >= 2u)
  {
    if (a5 != 2) {
      return result;
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

const char *FeatureFlag.domain.getter()
{
  outlined init with take of FeatureFlag(v0, (uint64_t)v4);
  if (v5 != 3) {
    return "Pommes";
  }
  uint64_t v1 = v4[2] | v4[3] | v4[1];
  if (v4[0] == 5 && v1 == 0) {
    return "SiriVideo";
  }
  if (v4[0] == 6 && !v1) {
    return "GenerativeAssistantTools";
  }
  if (v4[0] == 8 && !v1) {
    return "SiriSettings";
  }
  else {
    return "Pommes";
  }
}

const char *specialized FeatureFlag.domainFeature(for:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x73676E6974697277 && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return "writings_search";
  }
  if (a1 == 7300455 && a2 == 0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 1936744813 && a2 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return "geo_search";
  }
  if (a1 == 0x6D6E696174756465 && a2 == 0xEB00000000746E65
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return "edutainment_search";
  }
  if (a1 == 0x74616C736E617274 && a2 == 0xEB000000006E6F69
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return "translation_search";
  }
  if (a1 == 0x636E75616C707061 && a2 == 0xE900000000000068) {
    return "applaunch_search";
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v7 = a1 == 1936748641 && a2 == 0xE400000000000000;
  uint64_t result = "applaunch_search";
  if ((v5 & 1) == 0 && !v7)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      return "applaunch_search";
    }
    uint64_t result = "emergency_search";
    if (a1 != 0x636E656772656D65 || a2 != 0xE900000000000079)
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        return "emergency_search";
      }
      else {
        return "";
      }
    }
  }
  return result;
}

const char *specialized FeatureFlag.domainLocaleFeature(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4) {
    uint64_t v4 = a3;
  }
  else {
    uint64_t v4 = 0;
  }
  if (a4) {
    char v5 = a4;
  }
  else {
    char v5 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 95;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v4;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  BOOL v8 = a1 == 0x7A5F7374726F7073 && a2 == 0xEC0000004E435F68;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return "sports_zh_CN";
  }
  else
  {
    unint64_t v9 = "edutainment_zh_CN";
    if (a1 == 0xD000000000000011 && a2 == 0x80000001C919E3F0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else if (a1 == 0x687A5F636973756DLL && a2 == 0xEB000000004E435FLL)
    {
      swift_bridgeObjectRelease();
      return "music_zh_CN";
    }
    else
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v11) {
        return "music_zh_CN";
      }
      else {
        return "";
      }
    }
  }
  return v9;
}

uint64_t destroy for FeatureFlag(uint64_t a1)
{
  return outlined consume of FeatureFlag(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for FeatureFlag(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of FeatureFlag(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for FeatureFlag(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of FeatureFlag(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of FeatureFlag(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FeatureFlag(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of FeatureFlag(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureFlag(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureFlag(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for FeatureFlag(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 2u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for FeatureFlag(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FeatureFlag()
{
  return &type metadata for FeatureFlag;
}

void *PommesSearchRequestProcessor.__allocating_init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_allocObject();
  unsigned __int8 v12 = specialized PommesSearchRequestProcessor.init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v12;
}

uint64_t PommesSearchRequestProcessor.remoteClient.getter()
{
  return swift_retain();
}

uint64_t PommesSearchRequestProcessor.localClients.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesSearchRequestProcessor.pegasusCacheManager.getter()
{
  return swift_retain();
}

uint64_t PommesSearchRequestProcessor.domainWarmup.getter()
{
  return swift_retain();
}

uint64_t PommesSearchRequestProcessor.onDeviceSearchInstrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t key path setter for PommesSearchRequestProcessor.pommesSearchRequest : PommesSearchRequestProcessor(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_1(a1, (uint64_t)v6, type metadata accessor for PommesSearchRequest);
  uint64_t v7 = *a2 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest;
  swift_beginAccess();
  outlined assign with take of PommesSearchRequest((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t PommesSearchRequestProcessor.muxContextManager.getter()
{
  return swift_retain();
}

void *PommesSearchRequestProcessor.init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = specialized PommesSearchRequestProcessor.init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v6;
}

void CurrentDevice.codename.getter()
{
  uint64_t v0 = (void *)MEMORY[0x1CB77CA90](0x536C65646F4D5748, 0xEA00000000007274);
  uint64_t v1 = (void *)MGGetStringAnswer();

  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(void *a1, char a2, uint64_t a3)
{
  id v37 = a1;
  uint64_t v5 = type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v15 = v14 - 8;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = swift_projectBox();
  (*(void (**)(void))(*(void *)a3 + 152))();
  uint64_t v19 = *(void *)&v17[*(int *)(v15 + 60)];
  swift_retain();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v17, type metadata accessor for PommesSearchRequest);
  if (v19)
  {
    uint64_t v20 = *(void *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
    uint64_t v21 = *(void *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
    swift_bridgeObjectRetain();
    swift_release();
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
  }
  swift_beginAccess();
  outlined init with copy of MediaUserStateCenter?(v18, (uint64_t)v13, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v11, 1, v22) == 1)
  {
    id v23 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?;
LABEL_8:
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, v23);
    goto LABEL_9;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    id v23 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>;
    goto LABEL_8;
  }
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWObTm_0((uint64_t)v11, (uint64_t)v7, type metadata accessor for PegasusSearchResponse);
  if ((a2 & 1) == 0)
  {
    uint64_t v26 = *(void *)(a3 + 32);
    os_log_type_t v35 = &v7[*(int *)(v5 + 20)];
    uint64_t v27 = type metadata accessor for DispatchTimeInterval();
    uint64_t v36 = &v33;
    uint64_t v34 = v27;
    uint64_t v28 = *(void *)(v27 - 8);
    MEMORY[0x1F4188790](v27);
    id v30 = (void (**)(uint64_t, uint64_t, char *, id, void *, void (*)(char), void))((char *)&v33 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
    void *v30 = 5;
    (*(void (**)(void *, void))(v28 + 104))(v30, *MEMORY[0x1E4FBCAE0]);
    id v33 = *(void (**)(uint64_t, uint64_t, char *, id, void *, void (*)(char), void))(*(void *)v26 + 208);
    id v31 = v37;
    id v32 = v37;
    v33(v20, v21, v35, v32, v30, closure #1 in PommesSearchRequestProcessor.handleResponseCaching(siriRequestId:searchResult:pommesResult:), 0);
    outlined consume of Result<PommesResponse, Error>(v31);
    (*(void (**)(void *, uint64_t))(v28 + 8))(v30, v34);
    _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v7, type metadata accessor for PegasusSearchResponse);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v7, type metadata accessor for PegasusSearchResponse);
LABEL_9:
  swift_bridgeObjectRelease();
LABEL_10:
  uint64_t v24 = outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  return (*(uint64_t (**)(uint64_t))(**(void **)(a3 + 40) + 200))(v24);
}

uint64_t closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(void *a1, char a2, uint64_t (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a2 & 1;
  uint64_t v41 = (void *)type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1F4188790](v41);
  uint64_t v43 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v17 = v16 - 8;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_projectBox();
  id v42 = a1;
  uint64_t v21 = a3(a1, v8);
  (*(void (**)(uint64_t))(*(void *)a5 + 152))(v21);
  uint64_t v22 = *(void *)&v19[*(int *)(v17 + 60)];
  swift_retain();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v19, type metadata accessor for PommesSearchRequest);
  if (v22)
  {
    uint64_t v23 = *(void *)(v22 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
    uint64_t v24 = *(void *)(v22 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
    swift_bridgeObjectRetain();
    swift_release();
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  swift_beginAccess();
  outlined init with copy of MediaUserStateCenter?(v20, (uint64_t)v15, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v15, (uint64_t)v13, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v13, 1, v25) == 1)
  {
    uint64_t v26 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?;
LABEL_8:
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, v26);
    goto LABEL_9;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>;
    goto LABEL_8;
  }
  uint64_t v29 = v43;
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWObTm_0((uint64_t)v13, v43, type metadata accessor for PegasusSearchResponse);
  if (!v8)
  {
    uint64_t v30 = *(void *)(a5 + 32);
    uint64_t v40 = v29 + *((int *)v41 + 5);
    uint64_t v31 = type metadata accessor for DispatchTimeInterval();
    uint64_t v41 = &v39;
    uint64_t v39 = v31;
    uint64_t v32 = *(void *)(v31 - 8);
    MEMORY[0x1F4188790](v31);
    uint64_t v34 = (uint64_t *)((char *)&v39 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
    *uint64_t v34 = 5;
    (*(void (**)(void *, void))(v32 + 104))(v34, *MEMORY[0x1E4FBCAE0]);
    os_log_type_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, id, void *, void (*)(char), void))(*(void *)v30 + 208);
    uint64_t v36 = v23;
    id v37 = v42;
    id v38 = v42;
    v35(v36, v24, v40, v38, v34, closure #1 in PommesSearchRequestProcessor.handleResponseCaching(siriRequestId:searchResult:pommesResult:), 0);
    outlined consume of Result<PommesResponse, Error>(v37);
    (*(void (**)(void *, uint64_t))(v32 + 8))(v34, v39);
    _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v43, type metadata accessor for PegasusSearchResponse);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v29, type metadata accessor for PegasusSearchResponse);
LABEL_9:
  swift_bridgeObjectRelease();
LABEL_10:
  uint64_t v27 = outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  return (*(uint64_t (**)(uint64_t))(**(void **)(a5 + 40) + 200))(v27);
}

void closure #1 in PommesSearchRequestProcessor.handleResponseCaching(siriRequestId:searchResult:pommesResult:)(char a1)
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v9 = v5;
    *(_DWORD *)uint64_t v4 = 136315394;
    if (a1) {
      uint64_t v6 = 0x6465726F7473;
    }
    else {
      uint64_t v6 = 0x726F747320746F6ELL;
    }
    if (a1) {
      unint64_t v7 = 0xE600000000000000;
    }
    else {
      unint64_t v7 = 0xEA00000000006465;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, oslog, v3, "PommesSearchRequestProcessor : POMMES response caching complete : %s : %d expired", (uint8_t *)v4, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v5, -1, -1);
    MEMORY[0x1CB77E470](v4, -1, -1);
  }
  else
  {
  }
}

uint64_t PommesSearchRequestProcessor.clientSearch(pegasusResponse:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v52 = &v47[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v50 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v4 = MEMORY[0x1F4188790](v50);
  uint64_t v51 = &v47[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = &v47[-v6];
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v47[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for SignpostToken();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = &v47[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v15, (uint64_t)static Signposter.pommes);
  OSSignposter.begin(name:context:)("search.client", 13, 2u, 0, (uint64_t)v14);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  uint64_t v16 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  uint64_t v18 = v17;
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  if (v16 == 0x616964656DLL && v18 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
LABEL_22:
      uint64_t v37 = MEMORY[0x1E4FBC860];
      goto LABEL_25;
    }
  }
  uint64_t v21 = v53[3];
  if (!*(void *)(v21 + 16)) {
    goto LABEL_22;
  }
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(1);
  if ((v23 & 1) == 0) {
    goto LABEL_22;
  }
  outlined init with copy of AppDataProviding(*(void *)(v21 + 56) + 40 * v22, (uint64_t)&v56);
  outlined init with take of AppDataProviding(&v56, (uint64_t)v59);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  outlined init with copy of AppDataProviding((uint64_t)v59, (uint64_t)&v56);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  int v27 = v26;
  BOOL v28 = os_log_type_enabled(v25, v26);
  uint64_t v49 = a1;
  if (v28)
  {
    int v48 = v27;
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v55 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v31 = v57;
    uint64_t v32 = v58;
    __swift_project_boxed_opaque_existential_1(&v56, v57);
    char v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
    BOOL v34 = (v33 & 1) == 0;
    if (v33) {
      uint64_t v35 = 0x636973756DLL;
    }
    else {
      uint64_t v35 = 1701736302;
    }
    if (v34) {
      unint64_t v36 = 0xE400000000000000;
    }
    else {
      unint64_t v36 = 0xE500000000000000;
    }
    uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
    _os_log_impl(&dword_1C8F83000, v25, (os_log_type_t)v48, "PommesSearchRequestProcessor#clientSearch searching local %s domain", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v30, -1, -1);
    MEMORY[0x1CB77E470](v29, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
  }

  uint64_t v38 = v53[6];
  uint64_t v39 = *(void (**)(void))(*v53 + 152);
  v39();
  uint64_t v40 = (uint64_t *)&v7[*(int *)(v50 + 32)];
  uint64_t v41 = v40[1];
  uint64_t v50 = *v40;
  swift_bridgeObjectRetain();
  uint64_t v42 = _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v7, type metadata accessor for PommesSearchRequest);
  uint64_t v43 = (uint64_t)v51;
  ((void (*)(uint64_t))v39)(v42);
  uint64_t v44 = v52;
  PommesSearchRequest.pommesCandidateId.getter((uint64_t)v52);
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v43, type metadata accessor for PommesSearchRequest);
  uint64_t v45 = type metadata accessor for PommesCandidateId();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v44, 0, 1, v45);
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)v38 + 128))(v50, v41, v44, 1);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?((uint64_t)v44, &demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v37 = PommesSearchRequestProcessor.clientSearchForMusic(_:musicDomainClient:)(v49, v59);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
LABEL_25:
  OSSignposter.end(token:message:)((uint64_t)v14, 0, 0xE000000000000000);
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SignpostToken);
  return v37;
}

uint64_t PommesSearchRequestProcessor.clientSearchForMusic(_:musicDomainClient:)(uint64_t a1, void *a2)
{
  uint64_t v62 = a2;
  uint64_t v66 = a1;
  uint64_t v3 = type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v4 = (int *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PommesCandidateId();
  uint64_t v68 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v63 = v9;
  unint64_t v64 = (char *)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v58 - v10;
  uint64_t v12 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = MEMORY[0x1E4FBC860];
  uint64_t v67 = v16;
  *(void *)(v16 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v65 = v16 + 16;
  uint64_t v74 = v17;
  uint64_t v18 = *(void (**)(void))(*(void *)v2 + 152);
  uint64_t v19 = *(void *)v2 + 152;
  v18();
  char v20 = &v15[*(int *)(v13 + 40)];
  uint64_t v21 = *(void *)v20;
  uint64_t v60 = *((void *)v20 + 1);
  uint64_t v61 = v21;
  swift_bridgeObjectRetain();
  uint64_t v22 = _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v15, type metadata accessor for PommesSearchRequest);
  v58[1] = v19;
  uint64_t v59 = v18;
  ((void (*)(uint64_t))v18)(v22);
  uint64_t v70 = v11;
  PommesSearchRequest.pommesCandidateId.getter((uint64_t)v11);
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v15, type metadata accessor for PommesSearchRequest);
  uint64_t v72 = 0;
  unint64_t v73 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  uint64_t v72 = v2;
  type metadata accessor for PommesSearchRequestProcessor();
  swift_retain();
  uint64_t v23 = String.init<A>(describing:)();
  unint64_t v25 = v24;
  swift_bridgeObjectRelease();
  uint64_t v72 = v23;
  unint64_t v73 = v25;
  v26._object = (void *)0x80000001C919E690;
  v26._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v26);
  uint64_t v27 = v72;
  Date.init()();
  BOOL v28 = &v6[v4[7]];
  *(void *)BOOL v28 = "SiriInformationSearch/PommesSearchRequestProcessor.swift";
  *((void *)v28 + 1) = 56;
  v28[16] = 2;
  *(void *)&v6[v4[8]] = 244;
  uint64_t v29 = &v6[v4[9]];
  *(void *)uint64_t v29 = "clientSearchForMusic(_:musicDomainClient:)";
  *((void *)v29 + 1) = 42;
  v29[16] = 2;
  uint64_t v30 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v27);
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();
  uint64_t v33 = v4[10];
  int v69 = v6;
  BOOL v34 = (uint64_t *)&v6[v33];
  *BOOL v34 = v30;
  v34[1] = v32;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.pommes);
  unint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    uint64_t v72 = v39;
    *(_DWORD *)uint64_t v38 = 136315138;
    uint64_t v40 = MEMORY[0x1CB77CDC0](MEMORY[0x1E4FBC860], MEMORY[0x1E4FBB1A0]);
    uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v36, v37, "PommesSearchRequestProcessor#clientSearchForMusic calling musicDomainClient.search sharedUserIds: %s", v38, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v39, -1, -1);
    MEMORY[0x1CB77E470](v38, -1, -1);
  }

  uint64_t v42 = v70;
  uint64_t v43 = v62[4];
  v58[0] = v62[3];
  uint64_t v62 = __swift_project_boxed_opaque_existential_1(v62, v58[0]);
  v59();
  swift_beginAccess();
  uint64_t v44 = v74;
  uint64_t v45 = swift_allocObject();
  swift_weakInit();
  uint64_t v46 = v68;
  uint64_t v47 = v64;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v64, v42, v7);
  unint64_t v48 = (*(unsigned __int8 *)(v46 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  unint64_t v49 = (v63 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v50 = (char *)swift_allocObject();
  uint64_t v51 = v61;
  *((void *)v50 + 2) = v45;
  *((void *)v50 + 3) = v51;
  *((void *)v50 + 4) = v60;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&v50[v48], v47, v7);
  uint64_t v52 = v67;
  *(void *)&v50[v49] = v67;
  unint64_t v64 = (char *)v7;
  uint64_t v53 = *(void (**)(char *, uint64_t, void, uint64_t, void (*)(void *, char), char *, uint64_t, uint64_t))(v43 + 24);
  swift_retain();
  swift_retain();
  v53(v15, v66, 0, v44, partial apply for closure #1 in PommesSearchRequestProcessor.clientSearchForMusic(_:musicDomainClient:), v50, v58[0], v43);
  swift_bridgeObjectRelease();
  swift_release();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v15, type metadata accessor for PommesSearchRequest);
  swift_release();
  swift_beginAccess();
  uint64_t v54 = *(void *)(v52 + 16);
  uint64_t v55 = one-time initialization token for shared;
  swift_bridgeObjectRetain();
  if (v55 != -1) {
    swift_once();
  }
  uint64_t v56 = (uint64_t)v69;
  (*(void (**)(char *, uint64_t))(*(void *)static PerformanceUtil.shared + 184))(v69, 1);
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v56, type metadata accessor for PerformanceUtil.Ticket);
  (*(void (**)(char *, char *))(v46 + 8))(v70, v64);
  swift_release();
  return v54;
}

void closure #1 in PommesSearchRequestProcessor.clientSearchForMusic(_:musicDomainClient:)(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v37[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v22 = *(void *)(Strong + 48);
      outlined copy of Result<[PommesResult], Error>(a1, 1);
      swift_retain();
      swift_release();
      uint64_t v23 = type metadata accessor for PommesCandidateId();
      uint64_t v24 = *(void *)(v23 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v15, a6, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v15, 0, 1, v23);
      (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v22 + 144))(a4, a5, v15, 1);
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for PommesCandidateId?);
    }
    else
    {
      id v25 = a1;
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
    id v27 = a1;
    id v28 = a1;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      v37[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v38 = (uint64_t)a1;
      id v33 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
      _os_log_impl(&dword_1C8F83000, v29, v30, "PommesSearchRequestProcessor#clientSearchForMusic local client search failed : %s", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v32, -1, -1);
      MEMORY[0x1CB77E470](v31, -1, -1);

      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
    }
    else
    {
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
    }
  }
  else
  {
    uint64_t v16 = (void *)(a7 + 16);
    swift_beginAccess();
    uint64_t v17 = swift_weakLoadStrong();
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + 48);
      swift_retain();
      swift_release();
      uint64_t v19 = type metadata accessor for PommesCandidateId();
      uint64_t v20 = *(void *)(v19 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v15, a6, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v15, 0, 1, v19);
      (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v18 + 136))(a4, a5, v15);
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for PommesCandidateId?);
    }
    swift_beginAccess();
    *uint64_t v16 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
}

uint64_t closure #4 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  uint64_t v13 = type metadata accessor for ClientExperienceSignals();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v10, a3, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v12 + 8))(a2, v10, v11, v12);
  uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  *a4 = v15;
  return result;
}

void closure #5 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v102[1] = a8;
  uint64_t v115 = a7;
  uint64_t v110 = a6;
  uint64_t v121 = a5;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v11 - 8);
  v102[0] = (char *)v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v113 = *(void *)(Context - 8);
  uint64_t v114 = Context;
  MEMORY[0x1F4188790](Context);
  v112 = (char *)v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for PommesSearchReason();
  uint64_t v108 = *(void *)(v109 - 8);
  MEMORY[0x1F4188790](v109);
  v107 = (char *)v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v105 = (uint64_t)v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v18 = MEMORY[0x1F4188790](v118);
  v103 = (char *)v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v111 = (char *)v102 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)v102 - v22;
  uint64_t v122 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusClientEventLog();
  uint64_t v119 = *(void *)(v122 - 8);
  MEMORY[0x1F4188790](v122);
  v117 = (char *)v102 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  v106 = (char *)v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  v104 = (char *)v102 - v30;
  MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)v102 - v31;
  swift_bridgeObjectRetain();
  PommesResponse.Builder.experiences.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.clientResults.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
  PommesResponse.Builder.conversationContext.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  id v33 = *(void (**)(char *, uint64_t))(v26 + 8);
  v33(v32, v25);
  PommesResponse.Builder.metadataDomainName.setter();
  uint64_t v127 = a4;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.isFallbackTriggered.getter();
  v116 = v32;
  uint64_t v125 = v26 + 8;
  uint64_t v126 = v25;
  v123 = v33;
  v33(v32, v25);
  PommesResponse.Builder.metadataFallbackTriggered.setter();
  uint64_t v34 = MEMORY[0x1E4FBC860];
  uint64_t v128 = MEMORY[0x1E4FBC860];
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    v120 = v23;
    if (v35) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    PommesResponse.Builder.renderedTexts.setter();
    goto LABEL_17;
  }
  uint64_t v35 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v120 = v23;
  if (!v35) {
    goto LABEL_16;
  }
LABEL_3:
  if (v35 < 1)
  {
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v36 = 0;
  unint64_t v37 = a2 & 0xC000000000000001;
  do
  {
    if (v37) {
      id v38 = (id)MEMORY[0x1CB77D510](v36, a2);
    }
    else {
      id v38 = *(id *)(a2 + 8 * v36 + 32);
    }
    uint64_t v39 = v38;
    ++v36;
    uint64_t v40 = dispatch thunk of Experience.renderedTexts.getter();

    specialized Array.append<A>(contentsOf:)(v40);
  }
  while (v35 != v36);
  swift_bridgeObjectRelease();
  PommesResponse.Builder.renderedTexts.setter();
  uint64_t v128 = v34;
  swift_bridgeObjectRetain();
  uint64_t v41 = 0;
  do
  {
    if (v37) {
      id v42 = (id)MEMORY[0x1CB77D510](v41, a2);
    }
    else {
      id v42 = *(id *)(a2 + 8 * v41 + 32);
    }
    uint64_t v43 = v42;
    ++v41;
    uint64_t v44 = dispatch thunk of Experience.redactedRenderedTexts.getter();

    specialized Array.append<A>(contentsOf:)(v44);
  }
  while (v35 != v41);
  swift_bridgeObjectRelease();
LABEL_17:
  PommesResponse.Builder.redactedRenderedTexts.setter();
  uint64_t v45 = v116;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  uint64_t v46 = v117;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  uint64_t v47 = v123;
  v123(v45, v126);
  Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
  uint64_t v124 = a1;
  unint64_t v48 = *(void (**)(char *, uint64_t))(v119 + 8);
  uint64_t v49 = v122;
  v48(v46, v122);
  PommesResponse.Builder.pegasusDomainFlowStepLog.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  v47(v45, v126);
  Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
  v48(v46, v49);
  PommesResponse.Builder.pegasusDomainUserSensitiveTier1Log.setter();
  if (v35)
  {
    if ((a2 & 0xC000000000000001) == 0)
    {
      uint64_t v51 = (uint64_t)v120;
      uint64_t v50 = v121;
      if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_49;
      }
      id v52 = *(id *)(a2 + 32);
      goto LABEL_21;
    }
LABEL_47:
    swift_bridgeObjectRetain();
    id v52 = (id)MEMORY[0x1CB77D510](0, a2);
    swift_bridgeObjectRelease();
    uint64_t v51 = (uint64_t)v120;
    uint64_t v50 = v121;
LABEL_21:
    dispatch thunk of Experience.listenAfterSpeaking.getter();

    goto LABEL_23;
  }
  uint64_t v51 = (uint64_t)v120;
  uint64_t v50 = v121;
LABEL_23:
  uint64_t v53 = PommesResponse.Builder.listenAfterSpeaking.setter();
  uint64_t v54 = *(char **)(*(void *)v50 + 152);
  uint64_t v55 = *(void *)v50 + 152;
  ((void (*)(uint64_t))v54)(v53);
  swift_bridgeObjectRetain();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v51, type metadata accessor for PommesSearchRequest);
  uint64_t v56 = PommesResponse.Builder.requestId.setter();
  uint64_t v122 = v55;
  ((void (*)(uint64_t))v54)(v56);
  uint64_t v57 = v105;
  PommesSearchRequest.pommesCandidateId.getter(v105);
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v51, type metadata accessor for PommesSearchRequest);
  uint64_t v58 = type metadata accessor for PommesCandidateId();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v57, 0, 1, v58);
  PommesResponse.Builder.pommesCandidateId.setter();
  PommesResponse.Builder.isHandledByPreflight.setter();
  PommesResponse.Builder.preflightClientHandlerIdentifier.setter();
  uint64_t v59 = v104;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  uint64_t v60 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  v123(v59, v126);
  int64_t v61 = *(void *)(v60 + 16);
  v117 = v54;
  if (v61)
  {
    uint64_t v128 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61, 0);
    uint64_t v62 = v128;
    unint64_t v63 = v60 + ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80));
    uint64_t v64 = *(void *)(v119 + 72);
    do
    {
      uint64_t v65 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
      uint64_t v67 = v66;
      uint64_t v128 = v62;
      unint64_t v69 = *(void *)(v62 + 16);
      unint64_t v68 = *(void *)(v62 + 24);
      if (v69 >= v68 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1);
        uint64_t v62 = v128;
      }
      *(void *)(v62 + 16) = v69 + 1;
      uint64_t v70 = v62 + 16 * v69;
      *(void *)(v70 + 32) = v65;
      *(void *)(v70 + 40) = v67;
      v63 += v64;
      --v61;
    }
    while (v61);
    swift_bridgeObjectRelease();
    uint64_t v51 = (uint64_t)v120;
    uint64_t v50 = v121;
    uint64_t v54 = v117;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  PommesResponse.Builder.taskStepLogs.setter();
  uint64_t v71 = v106;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  uint64_t v72 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  v123(v71, v126);
  int64_t v73 = *(void *)(v72 + 16);
  if (v73)
  {
    uint64_t v128 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v73, 0);
    uint64_t v74 = v128;
    unint64_t v75 = v72 + ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80));
    uint64_t v76 = *(void *)(v119 + 72);
    do
    {
      uint64_t v77 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
      uint64_t v79 = v78;
      uint64_t v128 = v74;
      unint64_t v81 = *(void *)(v74 + 16);
      unint64_t v80 = *(void *)(v74 + 24);
      if (v81 >= v80 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
        uint64_t v74 = v128;
      }
      *(void *)(v74 + 16) = v81 + 1;
      uint64_t v82 = v74 + 16 * v81;
      *(void *)(v82 + 32) = v77;
      *(void *)(v82 + 40) = v79;
      v75 += v76;
      --v73;
    }
    while (v73);
    swift_bridgeObjectRelease();
    uint64_t v51 = (uint64_t)v120;
    uint64_t v50 = v121;
    uint64_t v54 = v117;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  PommesResponse.Builder.userSensitiveTier1Logs.setter();
  swift_bridgeObjectRetain();
  uint64_t v83 = PommesResponse.Builder.componentsWarmedUp.setter();
  ((void (*)(uint64_t))v54)(v83);
  uint64_t v84 = v118;
  int v85 = *(unsigned __int8 *)(v51 + *(int *)(v118 + 80));
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v51, type metadata accessor for PommesSearchRequest);
  v86 = (unsigned int *)MEMORY[0x1E4F9FE90];
  if (!v85) {
    v86 = (unsigned int *)MEMORY[0x1E4F9FE98];
  }
  (*(void (**)(char *, void, uint64_t))(v108 + 104))(v107, *v86, v109);
  uint64_t v87 = PommesResponse.Builder.searchReason.setter();
  ((void (*)(uint64_t))v54)(v87);
  swift_bridgeObjectRetain();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v51, type metadata accessor for PommesSearchRequest);
  PommesResponse.Builder.searchRequestUtterance.setter();
  v88 = v112;
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.getter();
  Apple_Parsec_Search_PegasusQueryContext.countryCode.getter();
  (*(void (**)(char *, uint64_t))(v113 + 8))(v88, v114);
  PommesResponse.Builder.requestCountryCode.setter();
  uint64_t v89 = PommesResponse.Builder.isCachedResponse.setter();
  ((void (*)(uint64_t))v54)(v89);
  swift_bridgeObjectRetain();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v51, type metadata accessor for PommesSearchRequest);
  uint64_t v90 = PommesResponse.Builder.sharedUserId.setter();
  uint64_t v91 = (uint64_t)v111;
  ((void (*)(uint64_t))v54)(v90);
  v92 = *(void **)(v91 + *(int *)(v84 + 72));
  id v93 = v92;
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v91, type metadata accessor for PommesSearchRequest);
  if (!v92) {
    goto LABEL_42;
  }
  id v94 = objc_msgSend(v93, sel_recognition);

  if (!v94)
  {
LABEL_49:
    __break(1u);
    return;
  }
  id v95 = objc_msgSend(v94, sel_aceRecognition);

LABEL_42:
  uint64_t v96 = v102[0];
  PommesResponse.Builder.asrRecognition.setter();
  closure #3 in closure #5 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(v50);
  uint64_t v97 = PommesResponse.Builder.encodedNLUserParses.setter();
  uint64_t v98 = (uint64_t)v103;
  ((void (*)(uint64_t))v54)(v97);
  PommesSearchRequest.fallbackParse.getter(v96);
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v98, type metadata accessor for PommesSearchRequest);
  uint64_t v99 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v100 = *(void *)(v99 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v96, 1, v99) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v96, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  }
  else
  {
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel(&lazy protocol witness table cache variable for type Siri_Nlu_External_DelegatedUserDialogAct and conformance Siri_Nlu_External_DelegatedUserDialogAct, MEMORY[0x1E4FA2990]);
    Message.serializedData(partial:)();
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v96, v99);
    uint64_t v54 = v117;
  }
  uint64_t v101 = PommesResponse.Builder.encodedNLFallbackParse.setter();
  ((void (*)(uint64_t))v54)(v101);
  PommesSearchRequest.responseVariantResult.getter();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v51, type metadata accessor for PommesSearchRequest);
  PommesResponse.Builder.responseVariantResult.setter();
  PommesResponse.Builder.isLowConfidenceKnowledgeResult.setter();
}

uint64_t closure #3 in closure #5 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v9 = JSONEncoder.init()();
  (*(void (**)(void))(*(void *)a1 + 152))();
  uint64_t v10 = PommesSearchRequest.userParses.getter();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v8, type metadata accessor for PommesSearchRequest);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    v27[1] = v10;
    v27[2] = v9;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    uint64_t v12 = v3 + 16;
    unint64_t v14 = v10 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v28 = *(void *)(v12 + 56);
    uint64_t v29 = v13;
    uint64_t v15 = (void (**)(char *, uint64_t))(v12 - 8);
    swift_bridgeObjectRetain();
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    v27[3] = v12;
    do
    {
      v29(v5, v14, v2);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, MEMORY[0x1E4FA2808]);
      uint64_t v17 = Message.serializedData(partial:)();
      uint64_t v19 = v18;
      (*v15)(v5, v2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      }
      uint64_t v20 = v16;
      unint64_t v21 = v16[2];
      uint64_t v22 = v20;
      unint64_t v23 = v20[3];
      if (v21 >= v23 >> 1) {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v21 + 1, 1, v22);
      }
      v22[2] = v21 + 1;
      uint64_t v24 = &v22[2 * v21];
      uint64_t v16 = v22;
      void v24[4] = v17;
      v24[5] = v19;
      v14 += v28;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease_n();
    if (!v16[2]) {
      goto LABEL_13;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    if (!*(void *)(MEMORY[0x1E4FBC860] + 16))
    {
LABEL_13:
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  uint64_t v30 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  lazy protocol witness table accessor for type [Data] and conformance <A> [A]();
  uint64_t v25 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  return v25;
}

uint64_t closure #1 in PommesSearchRequestProcessor.handleFailure(with:completion:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  MEMORY[0x1F4188790](v0);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata, MEMORY[0x1E4F88730]);
  static Message.with(_:)();
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.setter();
}

uint64_t closure #1 in closure #1 in PommesSearchRequestProcessor.handleFailure(with:completion:)()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.setter();
}

uint64_t CurrentDevice.supportsGenerativeModelSystems.getter()
{
  uint64_t v0 = (void *)MEMORY[0x1CB77CA90](0xD000000000000024, 0x80000001C919E560);
  uint64_t v1 = MGGetBoolAnswer();

  return v1;
}

void *specialized PommesSearchRequestProcessor.init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (void *)((char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AnalyticsComponentIdGenerator();
  uint64_t v17 = swift_allocObject();
  type metadata accessor for OnDeviceSearchInstrumentationUtil();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = v17;
  v7[6] = v18;
  *(void *)((char *)v7
            + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_attemptedProfileSliceLabels) = MEMORY[0x1E4FBC870];
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_1(a5, (uint64_t)v7 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest, type metadata accessor for PommesSearchRequest);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v7[5] = a4;
  *(void *)((char *)v7 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_muxContextManager) = a6;
  uint64_t v35 = a5;
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_1(a5, (uint64_t)v16, type metadata accessor for PommesSearchRequest.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    uint64_t v20 = *v16;
    unint64_t v21 = (void *)v16[1];
    if (EnumCaseMultiPayload == 1)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v22 = (uint64_t)v16
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                   + 64);
      unint64_t v23 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v25 = (char *)v16
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                   + 64);
      swift_bridgeObjectRelease();
      unint64_t v23 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
      uint64_t v22 = (uint64_t)v25;
    }
    outlined destroy of MediaUserStateCenter?(v22, v23);
  }
  else
  {
    uint64_t v20 = *v16;
    unint64_t v21 = (void *)v16[1];
    uint64_t v24 = (uint64_t)v16
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v24, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  }
  v34[2] = type metadata accessor for OS_dispatch_queue();
  unint64_t v36 = 0;
  unint64_t v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  unint64_t v36 = 0xD000000000000021;
  unint64_t v37 = 0x80000001C919E730;
  v26._countAndFlagsBits = v20;
  v26._object = v21;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  uint64_t v27 = type metadata accessor for DispatchQoS();
  v34[1] = v34;
  MEMORY[0x1F4188790](v27 - 8);
  static DispatchQoS.userInitiated.getter();
  uint64_t v28 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v28);
  unint64_t v36 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1F41AB0F0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v29 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v29);
  (*(void (**)(char *, void))(v31 + 104))((char *)v34 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  uint64_t v32 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v35, type metadata accessor for PommesSearchRequest);
  *(void *)((char *)v7 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_requestQueue) = v32;
  return v7;
}

uint64_t sub_1C903ECAC()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1C903ECEC()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C903ED24()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C903ED5C()
{
  uint64_t v1 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = (int *)(type metadata accessor for SignpostToken() - 8);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = v2 | v6 | 7;
  unint64_t v9 = (*(void *)(*(void *)v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v0 + v3, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = v0 + v7 + v5[7];
  uint64_t v12 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  swift_release();

  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, ((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v8);
}

uint64_t sub_1C903EF44()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t specialized PommesSearchRequestProcessor.handleSuccess(_:_:_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v86)(unint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  unint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t result;
  id v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  long long v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  void (*v116)(char *, unint64_t, uint64_t);
  char *v117;
  uint64_t v118;
  char v119;
  NSObject *v120;
  os_log_type_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  void (**v130)(uint64_t, uint64_t);
  uint64_t v131;
  char *v132;
  NSObject *v133;
  os_log_type_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  BOOL v149;
  uint64_t v150;
  uint8_t *v151;
  void *v152;
  unsigned char *v153;
  NSObject *v154;
  os_log_type_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  char *v161;
  uint64_t v162;
  char v163;
  NSObject *v164;
  os_log_type_t v165;
  uint8_t *v166;
  char v167;
  char *v168;
  int v169;
  uint64_t v170;
  void *v171;
  id v172;
  NSObject *v173;
  os_log_type_t v174;
  uint8_t *v175;
  uint64_t v176;
  id v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  NSObject *v181;
  os_log_type_t v182;
  uint8_t *v183;
  void *v184;
  unsigned char *v185;
  uint64_t v186;
  id v187;
  void *v188;
  unint64_t v189;
  void v190[2];
  void *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(char *, uint64_t, uint64_t);
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t (*v206)(void *, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  long long v211;
  void (*v212)(char *, uint64_t);
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  char *v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  long long v233;
  long long v234;
  unint64_t v235;
  char v236;
  void v237[5];

  v219 = a3;
  v224 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  v198 = *(void *)(v224 - 8);
  MEMORY[0x1F4188790](v224);
  v228 = (char *)&v195 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v225 = *(void *)(v230 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v230);
  v214 = (char *)&v195 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  v196 = (char *)&v195 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  v226 = (char *)&v195 - v19;
  MEMORY[0x1F4188790](v18);
  v229 = (char *)&v195 - v20;
  v204 = type metadata accessor for ClientExperienceSignals();
  v203 = *(void *)(v204 - 8);
  MEMORY[0x1F4188790](v204);
  v227 = (char *)&v195 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1F4188790](v197);
  v205 = (char *)&v195 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest();
  v218 = *(void *)(v220 - 8);
  MEMORY[0x1F4188790](v220);
  v217 = (char *)&v195 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  *(void *)&v211 = *(void *)(v216 - 8);
  MEMORY[0x1F4188790](v216);
  v223 = (char *)&v195 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  v201 = (char *)&v195 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v195 - v30;
  MEMORY[0x1F4188790](v29);
  id v33 = (char *)&v195 - v32;
  uint64_t v34 = (void *)swift_allocObject();
  v206 = a4;
  v34[2] = a4;
  void v34[3] = a5;
  v34[4] = a6;
  v34[5] = a7;
  v210 = v34;
  v237[3] = &type metadata for CallBusinessNoResultsExperiencesResolver;
  v237[4] = &protocol witness table for CallBusinessNoResultsExperiencesResolver;
  v237[0] = a2;
  uint64_t v35 = *(int *)(type metadata accessor for PegasusSearchResponse(0) + 20);
  v202 = a1;
  uint64_t v36 = a1 + v35;
  v215 = v26;
  uint64_t v37 = v26 + 16;
  id v38 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v38(v33, v36, v25);
  uint64_t v39 = one-time initialization token for pommes;
  v207 = a5;
  swift_retain();
  v208 = a6;
  swift_retain();
  v209 = a7;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v39 != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v41 = __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
  v221 = v33;
  v38(v31, (uint64_t)v33, v25);
  v222 = v41;
  id v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  BOOL v44 = os_log_type_enabled(v42, v43);
  uint64_t v45 = v25;
  v200 = v37;
  v199 = v38;
  if (v44)
  {
    uint64_t v46 = v31;
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    *(void *)&v233 = v48;
    *(_DWORD *)uint64_t v47 = 136315138;
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, MEMORY[0x1E4F88740]);
    Swift::String v49 = Message.textFormatString()();
    v231 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49._countAndFlagsBits, (unint64_t)v49._object, (uint64_t *)&v233);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v212 = *(void (**)(char *, uint64_t))(v215 + 8);
    v212(v46, v25);
    _os_log_impl(&dword_1C8F83000, v42, v43, "PireneResponse: %s", v47, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v48, -1, -1);
    MEMORY[0x1CB77E470](v47, -1, -1);
  }
  else
  {
    v212 = *(void (**)(char *, uint64_t))(v215 + 8);
    v212(v31, v25);
  }

  uint64_t v50 = v220;
  uint64_t v51 = v218;
  id v52 = v217;
  uint64_t v53 = v216;
  uint64_t v54 = v211;
  uint64_t v55 = v223;
  uint64_t v56 = (uint64_t)v221;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
  uint64_t v57 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v55, v53);
  uint64_t v58 = MEMORY[0x1CB779330](v57);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v50);
  char v59 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasSiriInstruction.getter();
  uint64_t v60 = v219;
  v213 = v45;
  if (v59)
  {
    int64_t v61 = *(void *)(v58 + 16);
    if (v61)
    {
      *(void *)&v233 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61, 0);
      v227 = *(char **)(v198 + 16);
      unint64_t v62 = (*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80);
      v205 = (char *)v58;
      unint64_t v63 = v58 + v62;
      v223 = *(char **)(v198 + 72);
      uint64_t v64 = (void (**)(char *, uint64_t))(v198 + 8);
      v204 = v58 + v62;
      do
      {
        uint64_t v65 = v228;
        uint64_t v66 = v224;
        ((void (*)(char *, unint64_t, uint64_t))v227)(v228, v63, v224);
        Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
        (*v64)(v65, v66);
        uint64_t v67 = v233;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v67 + 16) + 1, 1);
          uint64_t v67 = v233;
        }
        unint64_t v69 = *(void *)(v67 + 16);
        unint64_t v68 = *(void *)(v67 + 24);
        if (v69 >= v68 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1);
          uint64_t v67 = v233;
        }
        *(void *)(v67 + 16) = v69 + 1;
        uint64_t v70 = (char *)(v67
                     + ((*(unsigned __int8 *)(v225 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v225 + 80)));
        uint64_t v71 = *(void *)(v225 + 72);
        (*(void (**)(char *, char *, uint64_t))(v225 + 32))(&v70[v71 * v69], v229, v230);
        *(void *)&v233 = v67;
        v63 += (unint64_t)v223;
        --v61;
      }
      while (v61);
      uint64_t v105 = v214;
      v218 = *(void *)(v67 + 16);
      if (v218)
      {
        v106 = (uint64_t)v219
             + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_attemptedProfileSliceLabels;
        swift_bridgeObjectRetain();
        v216 = v106;
        swift_beginAccess();
        v107 = 0;
        v229 = (char *)(v225 + 16);
        v227 = (char *)(v225 + 8);
        *(void *)&uint64_t v108 = 134218240;
        v211 = v108;
        uint64_t v109 = v230;
        v217 = v70;
        while (1)
        {
          uint64_t v110 = &v70[v107 * v71];
          v111 = *(void *)v216;
          if (*(void *)(*(void *)v216 + 16))
          {
            v220 = v107;
            lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
            swift_bridgeObjectRetain();
            v228 = v110;
            v112 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v113 = -1 << *(unsigned char *)(v111 + 32);
            uint64_t v114 = v112 & ~v113;
            if ((*(void *)(v111 + 56 + ((v114 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v114))
            {
              uint64_t v115 = ~v113;
              v116 = *(void (**)(char *, unint64_t, uint64_t))v229;
              do
              {
                v117 = v226;
                uint64_t v118 = v230;
                v116(v226, *(void *)(v111 + 48) + v114 * v71, v230);
                lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
                uint64_t v119 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))v227)(v117, v118);
                if (v119) {
                  break;
                }
                uint64_t v114 = (v114 + 1) & v115;
              }
              while (((*(void *)(v111 + 56 + ((v114 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v114) & 1) != 0);
            }
            else
            {
              uint64_t v119 = 0;
            }
            swift_bridgeObjectRelease();
            uint64_t v109 = v230;
            uint64_t v105 = v214;
            v107 = v220;
            uint64_t v110 = v228;
          }
          else
          {
            uint64_t v119 = 0;
          }
          (*(void (**)(char *, char *, uint64_t))v229)(v105, v110, v109);
          v120 = Logger.logObject.getter();
          uint64_t v121 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v120, v121))
          {
            uint64_t v122 = swift_slowAlloc();
            *(_DWORD *)uint64_t v122 = v211;
            v123 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
            (*(void (**)(char *, uint64_t))v227)(v105, v109);
            *(void *)(v122 + 4) = v123;
            *(_WORD *)(v122 + 12) = 1024;
            *(_DWORD *)(v122 + 14) = v119 & 1;
            _os_log_impl(&dword_1C8F83000, v120, v121, "ProfileSliceLabel %ld previously attempted? %{BOOL}d", (uint8_t *)v122, 0x12u);
            MEMORY[0x1CB77E470](v122, -1, -1);
          }
          else
          {
            (*(void (**)(char *, uint64_t))v227)(v105, v109);
          }

          uint64_t v70 = v217;
          if (v119) {
            break;
          }
          if (++v107 == v218)
          {
            swift_release_n();
            goto LABEL_44;
          }
        }
        swift_bridgeObjectRelease();
        swift_release_n();
        v147 = Logger.logObject.getter();
        v148 = static os_log_type_t.debug.getter();
        v149 = os_log_type_enabled(v147, v148);
        v150 = v213;
        if (v149)
        {
          v151 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v151 = 0;
          _os_log_impl(&dword_1C8F83000, v147, v148, "Already attempted profile slice resolution; yielding error response",
            v151,
            2u);
          MEMORY[0x1CB77E470](v151, -1, -1);
        }

        lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
        v152 = (void *)swift_allocError();
        *v153 = 67;
        closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v152, 1, v206, v207, v208);

        v145 = (uint64_t)v221;
        v146 = v150;
      }
      else
      {
        swift_release();
        uint64_t v109 = v230;
LABEL_44:
        uint64_t v124 = v205;
        uint64_t v125 = *((void *)v205 + 2);
        uint64_t v126 = v219;
        uint64_t v127 = v196;
        uint64_t v128 = (uint64_t)v226;
        if (v125)
        {
          v129 = v109;
          v130 = (void (**)(uint64_t, uint64_t))(v225 + 8);
          swift_bridgeObjectRetain();
          v131 = v204;
          v132 = v223;
          do
          {
            Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
            swift_beginAccess();
            specialized Set._Variant.insert(_:)(v128, v127);
            (*v130)(v128, v129);
            swift_endAccess();
            v131 += (uint64_t)v132;
            --v125;
          }
          while (v125);
          uint64_t v124 = v205;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain_n();
        v133 = Logger.logObject.getter();
        v134 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v133, v134))
        {
          v135 = (uint8_t *)swift_slowAlloc();
          v136 = swift_slowAlloc();
          v231 = v136;
          *(_DWORD *)v135 = 136315138;
          v137 = swift_bridgeObjectRetain();
          v138 = MEMORY[0x1CB77CDC0](v137, v224);
          v140 = v139;
          swift_bridgeObjectRelease();
          v232 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v138, v140, (uint64_t *)&v231);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          uint64_t v124 = v205;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C8F83000, v133, v134, "Adding profile slice resolution requests: %s", v135, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v136, -1, -1);
          MEMORY[0x1CB77E470](v135, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v141 = v213;
        v142 = v210;
        v143 = (uint64_t)v221;
        v144 = (uint64_t)v126 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest;
        swift_beginAccess();
        *(void *)(v144 + *(int *)(v197 + 92)) = v124;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t (*)(), void *))(*v126 + 224))(partial apply for closure #4 in PommesSearchRequestProcessor.search_sync(completion:), v142);
        v145 = v143;
        v146 = v141;
      }
      goto LABEL_73;
    }
  }
  uint64_t v72 = swift_bridgeObjectRelease();
  uint64_t v73 = v60[5];
  uint64_t v74 = *(void (**)(uint64_t))(*v60 + 152);
  uint64_t v75 = (uint64_t)v205;
  v74(v72);
  uint64_t v76 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v73 + 168))(v75, v56);
  uint64_t v77 = _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v75, type metadata accessor for PommesSearchRequest);
  uint64_t v78 = v60[2];
  v74(v77);
  uint64_t v79 = v227;
  (*(void (**)(uint64_t))(*(void *)v78 + 696))(v75);
  uint64_t v80 = _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v75, type metadata accessor for PommesSearchRequest);
  if (one-time initialization token for shared != -1) {
    uint64_t v80 = swift_once();
  }
  unint64_t v81 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v80);
  v191 = v237;
  v192 = v56;
  v193 = v79;
  uint64_t v82 = type metadata accessor for Date();
  uint64_t v83 = *(void *)(v82 - 8);
  MEMORY[0x1F4188790](v82);
  int v85 = (char *)&v195 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  v86 = *(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(void *)v81 + 200);
  v193 = (char *)v190;
  v194 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  LOBYTE(v191) = 2;
  v86(&v231, 0xD00000000000002ALL, 0x80000001C919E6E0, 0, v85, "SiriInformationSearch/PommesSearchRequestProcessor.swift", 56, 2, 348, "handleSuccess(_:_:_:)", 21, v191, closure #4 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)partial apply);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v82);
  uint64_t v87 = v231;
  v88 = PommesSearchRequestProcessor.clientSearch(pegasusResponse:)((uint64_t)v221);
  swift_bridgeObjectRetain_n();
  uint64_t v89 = Logger.logObject.getter();
  uint64_t v90 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v89, v90))
  {
    uint64_t v91 = (uint8_t *)swift_slowAlloc();
    v92 = swift_slowAlloc();
    *(void *)&v233 = v92;
    *(_DWORD *)uint64_t v91 = 136315138;
    id v93 = type metadata accessor for PommesResult();
    id v94 = MEMORY[0x1CB77CDF0](v88, v93);
    v232 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, (uint64_t *)&v233);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v89, v90, "PommesSearchRequestProcessor#handleSuccess clientResults: %s", v91, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v92, -1, -1);
    MEMORY[0x1CB77E470](v91, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (!(v87 >> 62))
  {
    uint64_t v96 = *(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v96) {
      goto LABEL_22;
    }
LABEL_56:
    swift_bridgeObjectRelease();
    uint64_t v101 = 0xE700000000000000;
    uint64_t v99 = 0x6E776F6E6B6E55;
    v104 = 0;
    goto LABEL_57;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_56;
  }
LABEL_22:
  if ((v87 & 0xC000000000000001) != 0)
  {
    v188 = (void *)MEMORY[0x1CB77D510](0, v87);
    swift_bridgeObjectRelease();
    uint64_t v99 = dispatch thunk of Experience.pluginIdentifier.getter();
    uint64_t v101 = v189;

    swift_bridgeObjectRetain();
    v102 = (id)MEMORY[0x1CB77D510](0, v87);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  if (*(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v98 = *(id *)(v87 + 32);
    swift_bridgeObjectRelease();
    uint64_t v99 = dispatch thunk of Experience.pluginIdentifier.getter();
    uint64_t v101 = v100;

    v102 = *(id *)(v87 + 32);
LABEL_25:
    dispatch thunk of Experience.queryConfidence.getter();
    v104 = v103;

LABEL_57:
    swift_bridgeObjectRetain();
    v154 = Logger.logObject.getter();
    v155 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v154, v155))
    {
      v156 = swift_slowAlloc();
      v157 = swift_slowAlloc();
      *(void *)&v233 = v157;
      *(_DWORD *)v156 = 136315394;
      swift_bridgeObjectRetain();
      v232 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v101, (uint64_t *)&v233);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v156 + 12) = 2048;
      v232 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v154, v155, "PommesResponse primaryPluginIdentifier %s     PommesResponse primaryQueryConfidence %f", (uint8_t *)v156, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v157, -1, -1);
      MEMORY[0x1CB77E470](v156, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v158 = v213;
    v159 = (uint64_t)v221;
    v160 = v219;
    v161 = v201;
    v236 = 0;
    *((void *)&v234 + 1) = &type metadata for FeatureFlag;
    v235 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
    v162 = swift_allocObject();
    *(void *)&v233 = v162;
    *(void *)(v162 + 16) = 6;
    *(void *)(v162 + 24) = 0;
    *(void *)(v162 + 32) = 0;
    *(void *)(v162 + 40) = 0;
    *(unsigned char *)(v162 + 48) = 3;
    v163 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v233);
    if (v163)
    {
      v199(v161, v159, v158);
      v164 = Logger.logObject.getter();
      v165 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v164, v165))
      {
        v166 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v166 = 67109120;
        v167 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.isLowConfidenceKnowledgeResult.getter();
        v168 = v161;
        v169 = v167 & 1;
        v212(v168, v158);
        LODWORD(v233) = v169;
        v159 = (uint64_t)v221;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C8F83000, v164, v165, "Low confidence knowledge fallback FF is on, Pegasus returned value is: %{BOOL}d", v166, 8u);
        MEMORY[0x1CB77E470](v166, -1, -1);
      }
      else
      {
        v212(v161, v158);
      }

      v236 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.isLowConfidenceKnowledgeResult.getter() & 1;
      v160 = v219;
    }
    v170 = type metadata accessor for PommesResponse();
    MEMORY[0x1F4188790](v170);
    *(&v195 - 8) = v87;
    *(&v195 - 7) = v88;
    v190[0] = v159;
    v190[1] = v160;
    v191 = (void *)v76;
    v192 = v202;
    v193 = &v236;
    v171 = (void *)PommesResponse.__allocating_init(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v171)
    {
      v172 = v171;
      v173 = Logger.logObject.getter();
      v174 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v173, v174))
      {
        v175 = (uint8_t *)swift_slowAlloc();
        v176 = swift_slowAlloc();
        *(void *)&v233 = v176;
        *(_DWORD *)v175 = 136315138;
        v230 = (uint64_t)(v175 + 4);
        v177 = objc_msgSend(v172, sel_debugDescription);
        v178 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v180 = v179;

        v232 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v178, v180, (uint64_t *)&v233);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        v159 = (uint64_t)v221;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v173, v174, "PommesSearchRequestProcessor#handleSuccess response: %s", v175, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v176, -1, -1);
        MEMORY[0x1CB77E470](v175, -1, -1);
      }
      else
      {
      }
      v186 = v213;
      v235 = 0;
      v233 = 0u;
      v234 = 0u;
      static CurareDonation.donateCurareInfo(for:with:into:)(v159, v172, (uint64_t)&v233);
      outlined destroy of MediaUserStateCenter?((uint64_t)&v233, &demangling cache variable for type metadata for CurareInteractionStream?);
      v187 = v172;
      closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v171, 0, v206, v207, v208);

      (*(void (**)(char *, uint64_t))(v203 + 8))(v227, v204);
      v145 = v159;
      v146 = v186;
    }
    else
    {
      v181 = Logger.logObject.getter();
      v182 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v181, v182))
      {
        v183 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v183 = 0;
        _os_log_impl(&dword_1C8F83000, v181, v182, "PommesSearchRequestProcessor failed to build PommesResponse with given parameters", v183, 2u);
        MEMORY[0x1CB77E470](v183, -1, -1);
      }

      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      v184 = (void *)swift_allocError();
      *v185 = 0x80;
      closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v184, 1, v206, v207, v208);

      (*(void (**)(char *, uint64_t))(v203 + 8))(v227, v204);
      v145 = v159;
      v146 = v213;
    }
LABEL_73:
    v212((char *)v145, v146);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v237);
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t specialized PommesSearchRequestProcessor.handleFailure(with:completion:)(char a1, void *a2, uint64_t (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v88 = a4;
  uint64_t v89 = a6;
  v86 = a3;
  uint64_t v87 = a5;
  int v85 = a2;
  uint64_t v81 = type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1F4188790](v81);
  uint64_t v84 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v8 = *(void *)(v83 - 8);
  MEMORY[0x1F4188790](v83);
  uint64_t v82 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v79 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v80 = (uint64_t)&v75 - v13;
  uint64_t v14 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (uint64_t *)((char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)&v75 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v75 - v30;
  switch(a1)
  {
    case 1:
      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      id v33 = (void *)swift_allocError();
      char v34 = 1;
      goto LABEL_3;
    case 2:
      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      id v33 = (void *)swift_allocError();
      char v34 = -126;
      goto LABEL_3;
    case 8:
      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      id v33 = (void *)swift_allocError();
      char v34 = 3;
      goto LABEL_3;
    case 9:
      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      id v33 = (void *)swift_allocError();
      char v34 = 4;
      goto LABEL_3;
    case 10:
      uint64_t v75 = v16;
      uint64_t v76 = v8;
      uint64_t v36 = *(void (**)(void))(*v85 + 152);
      uint64_t v37 = *v85 + 152;
      swift_retain();
      swift_retain();
      uint64_t v38 = swift_retain();
      uint64_t v77 = v37;
      uint64_t v78 = v36;
      ((void (*)(uint64_t))v36)(v38);
      LOBYTE(v36) = v31[*(int *)(v23 + 80)];
      uint64_t v39 = _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v31, type metadata accessor for PommesSearchRequest);
      if ((v36 & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t v40 = v78;
      ((void (*)(uint64_t))v78)(v39);
      outlined init with copy of MediaUserStateCenter?((uint64_t)&v29[*(int *)(v23 + 40)], (uint64_t)v22, &demangling cache variable for type metadata for PommesContext?);
      _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v29, type metadata accessor for PommesSearchRequest);
      uint64_t v41 = type metadata accessor for PommesContext();
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v22, 1, v41) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v22, &demangling cache variable for type metadata for PommesContext?);
LABEL_26:
        lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
        int64_t v61 = (void *)swift_allocError();
        *unint64_t v62 = -127;
        closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v61, 1, v86, v88, v87);

        swift_release();
        swift_release();
        return swift_release();
      }
      uint64_t v43 = PommesContext.domain.getter();
      uint64_t v45 = v44;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v22, v41);
      if (!v45) {
        goto LABEL_26;
      }
      if (v43 == 0x656E6F6870 && v45 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0) {
          goto LABEL_26;
        }
      }
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      BOOL v50 = os_log_type_enabled(v48, v49);
      uint64_t v51 = v85;
      id v52 = v75;
      if (v50)
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl(&dword_1C8F83000, v48, v49, "Handling no results from fallback request for phone domain as successful", v53, 2u);
        MEMORY[0x1CB77E470](v53, -1, -1);
      }

      v40();
      _s21SiriInformationSearch06PommesC7RequestVWOcTm_1((uint64_t)v26, (uint64_t)v19, type metadata accessor for PommesSearchRequest.ParseState);
      _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v26, type metadata accessor for PommesSearchRequest);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v55 = (uint64_t)&v19[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                                     + 64)];
          uint64_t v56 = v80;
          outlined init with take of TCUMappedNLResponse?(v55, v80);
          uint64_t v57 = v79;
          outlined init with copy of MediaUserStateCenter?(v56, v79, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
          uint64_t v58 = type metadata accessor for TCUMappedNLResponse();
          uint64_t v59 = *(void *)(v58 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v57, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
            uint64_t v60 = MEMORY[0x1E4FBC860];
          }
          else
          {
            uint64_t v67 = (void *)TCUMappedNLResponse.nlResponse.getter();
            (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
            uint64_t v60 = NLParseResponse.userParses.getter();
          }
          uint64_t v65 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
          uint64_t v66 = v56;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v60 = *((void *)v19 + 2);
          uint64_t v64 = &v19[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                            + 64)];
          swift_bridgeObjectRelease();
          uint64_t v65 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
          uint64_t v66 = (uint64_t)v64;
        }
        outlined destroy of MediaUserStateCenter?(v66, v65);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
        _s21SiriInformationSearch15PerformanceUtilC6TicketVWObTm_0((uint64_t)&v19[*(int *)(v63 + 48)], (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
        uint64_t v60 = *v52;
        swift_bridgeObjectRetain();
        _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
      }
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, MEMORY[0x1E4F88740]);
      unint64_t v69 = v82;
      uint64_t v68 = v83;
      static Message.with(_:)();
      uint64_t v70 = (uint64_t)v84;
      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.init()();
      uint64_t v71 = v76;
      (*(void (**)(uint64_t, char *, uint64_t))(v76 + 16))(v70 + *(int *)(v81 + 20), v69, v68);
      uint64_t v72 = v89;
      swift_retain();
      uint64_t v73 = v88;
      swift_retain();
      uint64_t v74 = v87;
      swift_retain();
      specialized PommesSearchRequestProcessor.handleSuccess(_:_:_:)(v70, v60, v51, v86, v73, v74, v72);
      swift_release();
      swift_release();
      swift_release();
      _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v70, type metadata accessor for PegasusSearchResponse);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v69, v68);
      swift_release();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    default:
      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      id v33 = (void *)swift_allocError();
      char v34 = 67;
LABEL_3:
      *uint64_t v32 = v34;
      swift_retain();
      closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v33, 1, v86, v88, v87);

      return swift_release();
  }
}

uint64_t specialized PommesSearchRequestProcessor.handleSuccess(_:_:_:)(char *a1, uint64_t a2, void *a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v83)(unint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  unint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t result;
  id v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  long long v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  void (*v114)(char *, unint64_t, uint64_t);
  char *v115;
  uint64_t v116;
  char v117;
  char *v118;
  NSObject *v119;
  os_log_type_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  void (**v129)(uint64_t, uint64_t);
  char *v130;
  char *v131;
  NSObject *v132;
  os_log_type_t v133;
  uint8_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  void *v140;
  void *v141;
  char *v142;
  uint64_t v143;
  NSObject *v144;
  os_log_type_t v145;
  uint8_t *v146;
  void *v147;
  unsigned char *v148;
  uint64_t v149;
  NSObject *v150;
  os_log_type_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  NSObject *v157;
  os_log_type_t v158;
  uint8_t *v159;
  int v160;
  uint64_t v161;
  void *v162;
  id v163;
  NSObject *v164;
  os_log_type_t v165;
  uint8_t *v166;
  id v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  NSObject *v174;
  os_log_type_t v175;
  uint8_t *v176;
  void *v177;
  unsigned char *v178;
  uint64_t v179;
  id v180;
  void *v181;
  unint64_t v182;
  void v183[2];
  void *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)(char *, char *, uint64_t);
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t (*v198)(void *, uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  long long v204;
  void (*v205)(char *, uint64_t);
  void *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  long long v225;
  long long v226;
  unint64_t v227;
  char v228;
  void v229[5];

  v206 = a3;
  v214 = a2;
  v216 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  v190 = *(void *)(v216 - 8);
  MEMORY[0x1F4188790](v216);
  v220 = (char *)&v188 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v217 = *(void *)(v222 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v222);
  v207 = (char *)&v188 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  v188 = (char *)&v188 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  v218 = (char *)&v188 - v18;
  MEMORY[0x1F4188790](v17);
  v221 = (char *)&v188 - v19;
  v195 = type metadata accessor for ClientExperienceSignals();
  v194 = *(void *)(v195 - 8);
  MEMORY[0x1F4188790](v195);
  v219 = (char *)&v188 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1F4188790](v189);
  v197 = (char *)&v188 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest();
  v212 = *(void *)(v213 - 8);
  MEMORY[0x1F4188790](v213);
  v211 = (char *)&v188 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  *(void *)&v204 = *(void *)(v209 - 8);
  MEMORY[0x1F4188790](v209);
  v215 = (char *)&v188 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  v196 = (char *)&v188 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v188 - v29;
  MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)&v188 - v31;
  id v33 = (void *)swift_allocObject();
  v198 = a4;
  v33[2] = a4;
  v33[3] = a5;
  v33[4] = a6;
  v33[5] = a7;
  v229[3] = &type metadata for DefaultExperiencesResolver;
  v229[4] = &protocol witness table for DefaultExperiencesResolver;
  v229[0] = swift_allocObject();
  outlined init with copy of DefaultExperiencesResolver(v214, v229[0] + 16);
  uint64_t v34 = *(int *)(type metadata accessor for PegasusSearchResponse(0) + 20);
  v193 = a1;
  uint64_t v35 = &a1[v34];
  v208 = v25;
  uint64_t v37 = v25 + 16;
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v36(v32, v35, v24);
  uint64_t v38 = one-time initialization token for pommes;
  v199 = a5;
  swift_retain();
  v200 = a6;
  swift_retain();
  v201 = a7;
  swift_retain();
  if (v38 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  uint64_t v40 = __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
  v36(v30, v32, v24);
  v214 = v40;
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  BOOL v43 = os_log_type_enabled(v41, v42);
  v203 = v24;
  v192 = v37;
  v191 = v36;
  if (v43)
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = v32;
    uint64_t v46 = swift_slowAlloc();
    *(void *)&v225 = v46;
    *(_DWORD *)uint64_t v44 = 136315138;
    v205 = (void (*)(char *, uint64_t))(v44 + 4);
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, MEMORY[0x1E4F88740]);
    Swift::String v47 = Message.textFormatString()();
    v223 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47._countAndFlagsBits, (unint64_t)v47._object, (uint64_t *)&v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v205 = *(void (**)(char *, uint64_t))(v208 + 8);
    v205(v30, v24);
    _os_log_impl(&dword_1C8F83000, v41, v42, "PireneResponse: %s", v44, 0xCu);
    swift_arrayDestroy();
    uint64_t v48 = v46;
    uint64_t v32 = v45;
    MEMORY[0x1CB77E470](v48, -1, -1);
    MEMORY[0x1CB77E470](v44, -1, -1);
  }
  else
  {
    v205 = *(void (**)(char *, uint64_t))(v208 + 8);
    v205(v30, v24);
  }

  uint64_t v49 = v213;
  uint64_t v50 = v212;
  uint64_t v51 = v211;
  uint64_t v52 = v209;
  uint64_t v53 = v204;
  uint64_t v54 = v215;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
  uint64_t v55 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v52);
  uint64_t v56 = MEMORY[0x1CB779330](v55);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v49);
  char v57 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasSiriInstruction.getter();
  v202 = v33;
  v210 = v32;
  if (v57)
  {
    int64_t v58 = *(void *)(v56 + 16);
    if (v58)
    {
      *(void *)&v225 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58, 0);
      v219 = *(char **)(v190 + 16);
      unint64_t v59 = (*(unsigned __int8 *)(v190 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v190 + 80);
      v197 = (char *)v56;
      unint64_t v60 = v56 + v59;
      v215 = *(char **)(v190 + 72);
      int64_t v61 = (void (**)(char *, uint64_t))(v190 + 8);
      v196 = (char *)(v56 + v59);
      do
      {
        unint64_t v62 = v220;
        uint64_t v63 = v216;
        ((void (*)(char *, unint64_t, uint64_t))v219)(v220, v60, v216);
        Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
        (*v61)(v62, v63);
        uint64_t v64 = v225;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v64 + 16) + 1, 1);
          uint64_t v64 = v225;
        }
        unint64_t v66 = *(void *)(v64 + 16);
        unint64_t v65 = *(void *)(v64 + 24);
        if (v66 >= v65 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v66 + 1, 1);
          uint64_t v64 = v225;
        }
        *(void *)(v64 + 16) = v66 + 1;
        uint64_t v67 = v64 + ((*(unsigned __int8 *)(v217 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v217 + 80));
        uint64_t v68 = *(void *)(v217 + 72);
        (*(void (**)(unint64_t, char *, uint64_t))(v217 + 32))(v67 + v68 * v66, v221, v222);
        *(void *)&v225 = v64;
        v60 += (unint64_t)v215;
        --v58;
      }
      while (v58);
      v212 = v67;
      v103 = v207;
      v211 = *(char **)(v64 + 16);
      if (v211)
      {
        v104 = (char *)v206
             + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_attemptedProfileSliceLabels;
        swift_bridgeObjectRetain();
        v209 = (uint64_t)v104;
        swift_beginAccess();
        uint64_t v105 = 0;
        v221 = (char *)(v217 + 16);
        v219 = (char *)(v217 + 8);
        *(void *)&v106 = 134218240;
        v204 = v106;
        v107 = v222;
        while (1)
        {
          uint64_t v108 = (char *)(v212 + v105 * v68);
          uint64_t v109 = *(void *)v209;
          if (*(void *)(*(void *)v209 + 16))
          {
            v213 = v105;
            lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
            swift_bridgeObjectRetain();
            v220 = v108;
            uint64_t v110 = dispatch thunk of Hashable._rawHashValue(seed:)();
            v111 = -1 << *(unsigned char *)(v109 + 32);
            v112 = v110 & ~v111;
            if ((*(void *)(v109 + 56 + ((v112 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v112))
            {
              uint64_t v113 = ~v111;
              uint64_t v114 = *(void (**)(char *, unint64_t, uint64_t))v221;
              do
              {
                uint64_t v115 = v218;
                v116 = v222;
                v114(v218, *(void *)(v109 + 48) + v112 * v68, v222);
                lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
                v117 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))v219)(v115, v116);
                if (v117) {
                  break;
                }
                v112 = (v112 + 1) & v113;
              }
              while (((*(void *)(v109 + 56 + ((v112 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v112) & 1) != 0);
            }
            else
            {
              v117 = 0;
            }
            swift_bridgeObjectRelease();
            v107 = v222;
            v103 = v207;
            uint64_t v105 = v213;
            uint64_t v108 = v220;
          }
          else
          {
            v117 = 0;
          }
          (*(void (**)(char *, char *, uint64_t))v221)(v103, v108, v107);
          uint64_t v118 = v103;
          uint64_t v119 = Logger.logObject.getter();
          v120 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v119, v120))
          {
            uint64_t v121 = swift_slowAlloc();
            *(_DWORD *)uint64_t v121 = v204;
            uint64_t v122 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
            (*(void (**)(char *, uint64_t))v219)(v118, v107);
            *(void *)(v121 + 4) = v122;
            *(_WORD *)(v121 + 12) = 1024;
            *(_DWORD *)(v121 + 14) = v117 & 1;
            _os_log_impl(&dword_1C8F83000, v119, v120, "ProfileSliceLabel %ld previously attempted? %{BOOL}d", (uint8_t *)v121, 0x12u);
            MEMORY[0x1CB77E470](v121, -1, -1);
          }
          else
          {
            (*(void (**)(char *, uint64_t))v219)(v103, v107);
          }
          v103 = v118;

          if (v117) {
            break;
          }
          if ((char *)++v105 == v211)
          {
            swift_release_n();
            goto LABEL_44;
          }
        }
        swift_bridgeObjectRelease();
        swift_release_n();
        v144 = Logger.logObject.getter();
        v145 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v144, v145))
        {
          v146 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v146 = 0;
          _os_log_impl(&dword_1C8F83000, v144, v145, "Already attempted profile slice resolution; yielding error response",
            v146,
            2u);
          MEMORY[0x1CB77E470](v146, -1, -1);
        }

        lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
        v147 = (void *)swift_allocError();
        *v148 = 67;
        closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v147, 1, v198, v199, v200);

        v143 = (uint64_t)v210;
      }
      else
      {
        swift_release();
        v107 = v222;
LABEL_44:
        v123 = v197;
        uint64_t v124 = *((void *)v197 + 2);
        uint64_t v125 = (uint64_t)v210;
        uint64_t v126 = v188;
        uint64_t v127 = (uint64_t)v218;
        if (v124)
        {
          uint64_t v128 = v107;
          v129 = (void (**)(uint64_t, uint64_t))(v217 + 8);
          swift_bridgeObjectRetain();
          v130 = v196;
          v131 = v215;
          do
          {
            Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
            swift_beginAccess();
            specialized Set._Variant.insert(_:)(v127, v126);
            (*v129)(v127, v128);
            swift_endAccess();
            v130 = &v131[(void)v130];
            --v124;
          }
          while (v124);
          v123 = v197;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain_n();
        v132 = Logger.logObject.getter();
        v133 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v132, v133))
        {
          v134 = (uint8_t *)swift_slowAlloc();
          v135 = swift_slowAlloc();
          v223 = v135;
          *(_DWORD *)v134 = 136315138;
          v136 = swift_bridgeObjectRetain();
          v137 = MEMORY[0x1CB77CDC0](v136, v216);
          v139 = v138;
          swift_bridgeObjectRelease();
          v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v137, v139, (uint64_t *)&v223);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          v123 = v197;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C8F83000, v132, v133, "Adding profile slice resolution requests: %s", v134, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v135, -1, -1);
          MEMORY[0x1CB77E470](v134, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v140 = v202;
        v141 = v206;
        v142 = (char *)v206 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest;
        swift_beginAccess();
        *(void *)&v142[*(int *)(v189 + 92)] = v123;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t (*)(), void *))(*v141 + 224))(partial apply for closure #4 in PommesSearchRequestProcessor.search_sync(completion:), v140);
        v143 = v125;
      }
      v149 = v203;
      goto LABEL_75;
    }
  }
  uint64_t v69 = swift_bridgeObjectRelease();
  uint64_t v70 = v206;
  uint64_t v71 = v206[5];
  uint64_t v72 = *(void (**)(uint64_t))(*v206 + 152);
  uint64_t v73 = (uint64_t)v197;
  v72(v69);
  v222 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v71 + 168))(v73, v32);
  uint64_t v74 = _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v73, type metadata accessor for PommesSearchRequest);
  uint64_t v75 = v70[2];
  v72(v74);
  uint64_t v76 = v219;
  (*(void (**)(uint64_t))(*(void *)v75 + 696))(v73);
  uint64_t v77 = _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v73, type metadata accessor for PommesSearchRequest);
  if (one-time initialization token for shared != -1) {
    uint64_t v77 = swift_once();
  }
  uint64_t v78 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v77);
  v184 = v229;
  v185 = v32;
  v186 = v76;
  uint64_t v79 = type metadata accessor for Date();
  uint64_t v80 = *(void *)(v79 - 8);
  MEMORY[0x1F4188790](v79);
  uint64_t v82 = (char *)&v188 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v83 = *(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(void *)v78 + 200);
  v186 = (char *)v183;
  v187 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  LOBYTE(v184) = 2;
  v83(&v223, 0xD00000000000002ALL, 0x80000001C919E6E0, 0, v82, "SiriInformationSearch/PommesSearchRequestProcessor.swift", 56, 2, 348, "handleSuccess(_:_:_:)", 21, v184, closure #4 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)partial apply);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v79);
  uint64_t v84 = v223;
  int v85 = PommesSearchRequestProcessor.clientSearch(pegasusResponse:)((uint64_t)v32);
  swift_bridgeObjectRetain_n();
  v86 = Logger.logObject.getter();
  uint64_t v87 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v86, v87))
  {
    uint64_t v88 = (uint8_t *)swift_slowAlloc();
    uint64_t v89 = swift_slowAlloc();
    *(void *)&v225 = v89;
    *(_DWORD *)uint64_t v88 = 136315138;
    uint64_t v90 = type metadata accessor for PommesResult();
    uint64_t v91 = MEMORY[0x1CB77CDF0](v85, v90);
    v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, (uint64_t *)&v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v86, v87, "PommesSearchRequestProcessor#handleSuccess clientResults: %s", v88, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v89, -1, -1);
    MEMORY[0x1CB77E470](v88, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v93 = v196;
  if (!(v84 >> 62))
  {
    id v94 = *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v94) {
      goto LABEL_22;
    }
LABEL_57:
    swift_bridgeObjectRelease();
    uint64_t v99 = 0xE700000000000000;
    uint64_t v97 = 0x6E776F6E6B6E55;
    v102 = 0;
    goto LABEL_58;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_57;
  }
LABEL_22:
  if ((v84 & 0xC000000000000001) != 0)
  {
    v181 = (void *)MEMORY[0x1CB77D510](0, v84);
    swift_bridgeObjectRelease();
    uint64_t v97 = dispatch thunk of Experience.pluginIdentifier.getter();
    uint64_t v99 = v182;

    swift_bridgeObjectRetain();
    uint64_t v100 = (id)MEMORY[0x1CB77D510](0, v84);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v96 = *(id *)(v84 + 32);
    swift_bridgeObjectRelease();
    uint64_t v97 = dispatch thunk of Experience.pluginIdentifier.getter();
    uint64_t v99 = v98;

    uint64_t v100 = *(id *)(v84 + 32);
LABEL_25:
    dispatch thunk of Experience.queryConfidence.getter();
    v102 = v101;

LABEL_58:
    swift_bridgeObjectRetain();
    v150 = Logger.logObject.getter();
    v151 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v150, v151))
    {
      v152 = swift_slowAlloc();
      v153 = swift_slowAlloc();
      *(void *)&v225 = v153;
      *(_DWORD *)v152 = 136315394;
      swift_bridgeObjectRetain();
      v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v99, (uint64_t *)&v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v152 + 12) = 2048;
      v224 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v150, v151, "PommesResponse primaryPluginIdentifier %s     PommesResponse primaryQueryConfidence %f", (uint8_t *)v152, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v153, -1, -1);
      MEMORY[0x1CB77E470](v152, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v154 = v203;
    v228 = 0;
    *((void *)&v226 + 1) = &type metadata for FeatureFlag;
    v227 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
    v155 = swift_allocObject();
    *(void *)&v225 = v155;
    *(void *)(v155 + 16) = 6;
    *(void *)(v155 + 24) = 0;
    *(void *)(v155 + 32) = 0;
    *(void *)(v155 + 40) = 0;
    *(unsigned char *)(v155 + 48) = 3;
    v156 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v225);
    if (v156)
    {
      v191(v93, v210, v154);
      v157 = Logger.logObject.getter();
      v158 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v157, v158))
      {
        v159 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v159 = 67109120;
        v160 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.isLowConfidenceKnowledgeResult.getter() & 1;
        v205(v93, v154);
        LODWORD(v225) = v160;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C8F83000, v157, v158, "Low confidence knowledge fallback FF is on, Pegasus returned value is: %{BOOL}d", v159, 8u);
        MEMORY[0x1CB77E470](v159, -1, -1);
      }
      else
      {
        v205(v93, v154);
      }

      v228 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.isLowConfidenceKnowledgeResult.getter() & 1;
    }
    v161 = type metadata accessor for PommesResponse();
    MEMORY[0x1F4188790](v161);
    *(&v188 - 8) = (char *)v84;
    *(&v188 - 7) = (char *)v85;
    v183[0] = v210;
    v183[1] = v206;
    v184 = (void *)v222;
    v185 = v193;
    v186 = &v228;
    v162 = (void *)PommesResponse.__allocating_init(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v162)
    {
      v163 = v162;
      v164 = Logger.logObject.getter();
      v165 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v164, v165))
      {
        v166 = (uint8_t *)swift_slowAlloc();
        v222 = swift_slowAlloc();
        *(void *)&v225 = v222;
        *(_DWORD *)v166 = 136315138;
        v221 = (char *)(v166 + 4);
        v167 = objc_msgSend(v163, sel_debugDescription);
        v168 = v154;
        v169 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v171 = v170;

        v172 = v169;
        v154 = v168;
        v224 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v172, v171, (uint64_t *)&v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v164, v165, "PommesSearchRequestProcessor#handleSuccess response: %s", v166, 0xCu);
        v173 = v222;
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v173, -1, -1);
        MEMORY[0x1CB77E470](v166, -1, -1);
      }
      else
      {
      }
      v227 = 0;
      v225 = 0u;
      v226 = 0u;
      v179 = (uint64_t)v210;
      static CurareDonation.donateCurareInfo(for:with:into:)((uint64_t)v210, v163, (uint64_t)&v225);
      outlined destroy of MediaUserStateCenter?((uint64_t)&v225, &demangling cache variable for type metadata for CurareInteractionStream?);
      v180 = v163;
      closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v162, 0, v198, v199, v200);

      (*(void (**)(char *, uint64_t))(v194 + 8))(v219, v195);
      v143 = v179;
    }
    else
    {
      v174 = Logger.logObject.getter();
      v175 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v174, v175))
      {
        v176 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v176 = 0;
        _os_log_impl(&dword_1C8F83000, v174, v175, "PommesSearchRequestProcessor failed to build PommesResponse with given parameters", v176, 2u);
        MEMORY[0x1CB77E470](v176, -1, -1);
      }

      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      v177 = (void *)swift_allocError();
      *v178 = 0x80;
      closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v177, 1, v198, v199, v200);

      (*(void (**)(char *, uint64_t))(v194 + 8))(v219, v195);
      v143 = (uint64_t)v210;
    }
    v149 = v154;
LABEL_75:
    v205((char *)v143, v149);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v229);
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t specialized PommesSearchRequestProcessor.handleSuccess(_:_:_:)(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  void (*v76)(unint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  unint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t result;
  id v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  long long v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void (*v108)(char *, unint64_t, uint64_t);
  char *v109;
  uint64_t v110;
  char v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  void (**v121)(uint64_t, uint64_t);
  char *v122;
  NSObject *v123;
  os_log_type_t v124;
  uint8_t *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  BOOL v139;
  uint64_t v140;
  uint8_t *v141;
  void *v142;
  unsigned char *v143;
  NSObject *v144;
  os_log_type_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  NSObject *v153;
  os_log_type_t v154;
  uint8_t *v155;
  int v156;
  uint64_t v157;
  void *v158;
  id v159;
  NSObject *v160;
  os_log_type_t v161;
  uint8_t *v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  NSObject *v168;
  os_log_type_t v169;
  BOOL v170;
  uint64_t v171;
  uint8_t *v172;
  void *v173;
  unsigned char *v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  void *v178;
  unint64_t v179;
  void v180[2];
  void *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(char *, uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  long long v199;
  void (*v200)(char *, uint64_t);
  uint64_t v201;
  void *v202;
  char *v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  void (*v215)(char *, unint64_t, uint64_t);
  char *v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  long long v221;
  long long v222;
  unint64_t v223;
  char v224;
  void v225[5];

  v202 = a3;
  v211 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  v188 = *(void *)(v211 - 8);
  MEMORY[0x1F4188790](v211);
  v216 = (char *)&v185 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v212 = *(void *)(v218 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v218);
  v203 = (char *)&v185 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  v186 = (char *)&v185 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v214 = (char *)&v185 - v15;
  MEMORY[0x1F4188790](v14);
  v217 = (char *)&v185 - v16;
  uint64_t v17 = type metadata accessor for ClientExperienceSignals();
  v193 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  v215 = (void (*)(char *, unint64_t, uint64_t))((char *)&v185 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v187 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1F4188790](v187);
  v195 = (char *)&v185 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest();
  v209 = *(void *)(v213 - 8);
  MEMORY[0x1F4188790](v213);
  v207 = (char *)&v185 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v205 = *(void **)(v206 - 8);
  MEMORY[0x1F4188790](v206);
  *(void *)&v199 = (char *)&v185 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  v194 = (char *)&v185 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v185 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v185 - v29;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = a4;
  *(void *)(v31 + 24) = a5;
  v198 = v31;
  v225[3] = &type metadata for CallBusinessNoResultsExperiencesResolver;
  v225[4] = &protocol witness table for CallBusinessNoResultsExperiencesResolver;
  v225[0] = a2;
  uint64_t v32 = *(int *)(type metadata accessor for PegasusSearchResponse(0) + 20);
  v192 = a1;
  id v33 = &a1[v32];
  v204 = v23;
  uint64_t v34 = v23 + 16;
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v35(v30, v33, v22);
  uint64_t v36 = one-time initialization token for pommes;
  v196 = a4;
  swift_retain();
  v197 = a5;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v36 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
  v35(v28, v30, v22);
  v210 = v38;
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  BOOL v41 = os_log_type_enabled(v39, v40);
  v201 = v22;
  v191 = v17;
  v190 = v34;
  v189 = (void (*)(char *, uint64_t, uint64_t))v35;
  if (v41)
  {
    uint64_t v42 = v22;
    BOOL v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(void *)&v221 = v44;
    *(_DWORD *)BOOL v43 = 136315138;
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, MEMORY[0x1E4F88740]);
    Swift::String v45 = Message.textFormatString()();
    v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45._countAndFlagsBits, (unint64_t)v45._object, (uint64_t *)&v221);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v200 = *(void (**)(char *, uint64_t))(v204 + 8);
    v200(v28, v42);
    _os_log_impl(&dword_1C8F83000, v39, v40, "PireneResponse: %s", v43, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v44, -1, -1);
    MEMORY[0x1CB77E470](v43, -1, -1);
  }
  else
  {
    v200 = *(void (**)(char *, uint64_t))(v204 + 8);
    v200(v28, v22);
  }

  uint64_t v46 = v199;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Swift::String v47 = v207;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
  uint64_t v48 = ((uint64_t (*)(uint64_t, uint64_t))v205[1])(v46, v206);
  uint64_t v49 = MEMORY[0x1CB779330](v48);
  (*(void (**)(char *, uint64_t))(v209 + 8))(v47, v213);
  char v50 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasSiriInstruction.getter();
  v208 = v30;
  uint64_t v51 = v202;
  if (v50)
  {
    int64_t v52 = *(void *)(v49 + 16);
    if (v52)
    {
      *(void *)&v221 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52, 0);
      v215 = *(void (**)(char *, unint64_t, uint64_t))(v188 + 16);
      unint64_t v53 = (*(unsigned __int8 *)(v188 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80);
      v195 = (char *)v49;
      unint64_t v54 = v49 + v53;
      v213 = *(void *)(v188 + 72);
      uint64_t v55 = (void (**)(char *, uint64_t))(v188 + 8);
      v194 = (char *)(v49 + v53);
      do
      {
        uint64_t v56 = v216;
        uint64_t v57 = v211;
        v215(v216, v54, v211);
        Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
        (*v55)(v56, v57);
        uint64_t v58 = v221;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v58 + 16) + 1, 1);
          uint64_t v58 = v221;
        }
        unint64_t v60 = *(void *)(v58 + 16);
        unint64_t v59 = *(void *)(v58 + 24);
        if (v60 >= v59 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
          uint64_t v58 = v221;
        }
        *(void *)(v58 + 16) = v60 + 1;
        uint64_t v61 = v58 + ((*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80));
        uint64_t v62 = *(void *)(v212 + 72);
        (*(void (**)(unint64_t, char *, uint64_t))(v212 + 32))(v61 + v62 * v60, v217, v218);
        *(void *)&v221 = v58;
        v54 += v213;
        --v52;
      }
      while (v52);
      v207 = *(char **)(v58 + 16);
      if (v207)
      {
        uint64_t v96 = (void *)((char *)v202
                       + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_attemptedProfileSliceLabels);
        swift_bridgeObjectRetain();
        v205 = v96;
        swift_beginAccess();
        uint64_t v97 = 0;
        v217 = (char *)(v212 + 16);
        v215 = (void (*)(char *, unint64_t, uint64_t))(v212 + 8);
        *(void *)&uint64_t v98 = 134218240;
        v199 = v98;
        uint64_t v99 = v218;
        uint64_t v100 = v203;
        uint64_t v101 = v208;
        v206 = v61;
        while (1)
        {
          v209 = v97;
          v102 = (char *)(v61 + v97 * v62);
          v103 = (void *)*v205;
          if (*(void *)(*v205 + 16))
          {
            lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
            swift_bridgeObjectRetain();
            v216 = v102;
            v104 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v105 = -1 << *((unsigned char *)v103 + 32);
            v106 = v104 & ~v105;
            if ((*(void *)((char *)v103 + ((v106 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v106))
            {
              v107 = ~v105;
              uint64_t v108 = *(void (**)(char *, unint64_t, uint64_t))v217;
              do
              {
                uint64_t v109 = v214;
                uint64_t v110 = v218;
                v108(v214, v103[6] + v106 * v62, v218);
                lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
                v111 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))v215)(v109, v110);
                if (v111) {
                  break;
                }
                v106 = (v106 + 1) & v107;
              }
              while (((*(void *)((char *)v103 + ((v106 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v106) & 1) != 0);
            }
            else
            {
              v111 = 0;
            }
            swift_bridgeObjectRelease();
            uint64_t v101 = v208;
            uint64_t v99 = v218;
            uint64_t v100 = v203;
            v102 = v216;
          }
          else
          {
            v111 = 0;
          }
          (*(void (**)(char *, char *, uint64_t))v217)(v100, v102, v99);
          v112 = Logger.logObject.getter();
          uint64_t v113 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v112, v113))
          {
            uint64_t v114 = swift_slowAlloc();
            *(_DWORD *)uint64_t v114 = v199;
            uint64_t v115 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
            (*(void (**)(char *, uint64_t))v215)(v100, v99);
            *(void *)(v114 + 4) = v115;
            *(_WORD *)(v114 + 12) = 1024;
            *(_DWORD *)(v114 + 14) = v111 & 1;
            _os_log_impl(&dword_1C8F83000, v112, v113, "ProfileSliceLabel %ld previously attempted? %{BOOL}d", (uint8_t *)v114, 0x12u);
            MEMORY[0x1CB77E470](v114, -1, -1);
          }
          else
          {
            (*(void (**)(char *, uint64_t))v215)(v100, v99);
          }

          uint64_t v61 = v206;
          if (v111) {
            break;
          }
          uint64_t v97 = v209 + 1;
          if ((char *)(v209 + 1) == v207)
          {
            swift_release_n();
            goto LABEL_44;
          }
        }
        swift_bridgeObjectRelease();
        swift_release_n();
        v137 = Logger.logObject.getter();
        v138 = static os_log_type_t.debug.getter();
        v139 = os_log_type_enabled(v137, v138);
        v140 = v201;
        if (v139)
        {
          v141 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v141 = 0;
          _os_log_impl(&dword_1C8F83000, v137, v138, "Already attempted profile slice resolution; yielding error response",
            v141,
            2u);
          MEMORY[0x1CB77E470](v141, -1, -1);
        }

        lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
        v142 = (void *)swift_allocError();
        *v143 = 67;
        closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v142, 1, v196);

        v135 = (uint64_t)v101;
        v136 = v140;
      }
      else
      {
        swift_release();
        uint64_t v99 = v218;
        uint64_t v101 = v208;
LABEL_44:
        v116 = v195;
        v117 = *((void *)v195 + 2);
        uint64_t v118 = v202;
        uint64_t v119 = v186;
        v120 = (uint64_t)v214;
        if (v117)
        {
          uint64_t v121 = (void (**)(uint64_t, uint64_t))(v212 + 8);
          swift_bridgeObjectRetain();
          uint64_t v122 = v194;
          do
          {
            Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
            swift_beginAccess();
            specialized Set._Variant.insert(_:)(v120, v119);
            (*v121)(v120, v99);
            swift_endAccess();
            v122 += v213;
            --v117;
          }
          while (v117);
          v116 = v195;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain_n();
        v123 = Logger.logObject.getter();
        uint64_t v124 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v123, v124))
        {
          uint64_t v125 = (uint8_t *)swift_slowAlloc();
          uint64_t v126 = v116;
          uint64_t v127 = swift_slowAlloc();
          *(_DWORD *)uint64_t v125 = 136315138;
          v218 = (uint64_t)(v125 + 4);
          v219 = v127;
          uint64_t v128 = swift_bridgeObjectRetain();
          v129 = MEMORY[0x1CB77CDC0](v128, v211);
          v131 = v130;
          swift_bridgeObjectRelease();
          v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v129, v131, (uint64_t *)&v219);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C8F83000, v123, v124, "Adding profile slice resolution requests: %s", v125, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v127, -1, -1);
          MEMORY[0x1CB77E470](v125, -1, -1);

          v132 = v201;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          v132 = v201;
          uint64_t v126 = v116;
        }
        v133 = v198;
        v134 = (uint64_t)v118 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest;
        swift_beginAccess();
        *(void *)(v134 + *(int *)(v187 + 92)) = v126;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t (*)(), uint64_t))(*v118 + 224))(closure #3 in PommesSearchRequestProcessor.search_sync(completion:)partial apply, v133);
        v135 = (uint64_t)v101;
        v136 = v132;
      }
      goto LABEL_73;
    }
  }
  uint64_t v63 = swift_bridgeObjectRelease();
  uint64_t v64 = v51[5];
  unint64_t v65 = *(void (**)(uint64_t))(*v51 + 152);
  uint64_t v66 = (uint64_t)v195;
  v65(v63);
  v218 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v64 + 168))(v66, v30);
  uint64_t v67 = _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v66, type metadata accessor for PommesSearchRequest);
  uint64_t v68 = v51[2];
  v65(v67);
  uint64_t v69 = (char *)v215;
  (*(void (**)(uint64_t))(*(void *)v68 + 696))(v66);
  uint64_t v70 = _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v66, type metadata accessor for PommesSearchRequest);
  if (one-time initialization token for shared != -1) {
    uint64_t v70 = swift_once();
  }
  uint64_t v71 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v70);
  v181 = v225;
  v182 = v30;
  v183 = v69;
  uint64_t v72 = type metadata accessor for Date();
  uint64_t v73 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72);
  uint64_t v75 = (char *)&v185 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v76 = *(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(void *)v71 + 200);
  v183 = (char *)v180;
  v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  LOBYTE(v181) = 2;
  v76(&v219, 0xD00000000000002ALL, 0x80000001C919E6E0, 0, v75, "SiriInformationSearch/PommesSearchRequestProcessor.swift", 56, 2, 348, "handleSuccess(_:_:_:)", 21, v181, closure #4 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)partial apply);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v72);
  uint64_t v77 = v219;
  uint64_t v78 = PommesSearchRequestProcessor.clientSearch(pegasusResponse:)((uint64_t)v30);
  swift_bridgeObjectRetain_n();
  uint64_t v79 = Logger.logObject.getter();
  uint64_t v80 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v79, v80))
  {
    uint64_t v81 = (uint8_t *)swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    *(void *)&v221 = v82;
    *(_DWORD *)uint64_t v81 = 136315138;
    uint64_t v83 = type metadata accessor for PommesResult();
    uint64_t v84 = MEMORY[0x1CB77CDF0](v78, v83);
    v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, (uint64_t *)&v221);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v79, v80, "PommesSearchRequestProcessor#handleSuccess clientResults: %s", v81, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v82, -1, -1);
    MEMORY[0x1CB77E470](v81, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v86 = v194;
  if (!(v77 >> 62))
  {
    uint64_t v87 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v87) {
      goto LABEL_22;
    }
LABEL_56:
    swift_bridgeObjectRelease();
    v92 = 0xE700000000000000;
    uint64_t v90 = 0x6E776F6E6B6E55;
    id v95 = 0;
    goto LABEL_57;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_56;
  }
LABEL_22:
  if ((v77 & 0xC000000000000001) != 0)
  {
    v178 = (void *)MEMORY[0x1CB77D510](0, v77);
    swift_bridgeObjectRelease();
    uint64_t v90 = dispatch thunk of Experience.pluginIdentifier.getter();
    v92 = v179;

    swift_bridgeObjectRetain();
    id v93 = (id)MEMORY[0x1CB77D510](0, v77);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  if (*(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v89 = *(id *)(v77 + 32);
    swift_bridgeObjectRelease();
    uint64_t v90 = dispatch thunk of Experience.pluginIdentifier.getter();
    v92 = v91;

    id v93 = *(id *)(v77 + 32);
LABEL_25:
    dispatch thunk of Experience.queryConfidence.getter();
    id v95 = v94;

LABEL_57:
    swift_bridgeObjectRetain();
    v144 = Logger.logObject.getter();
    v145 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v144, v145))
    {
      v146 = swift_slowAlloc();
      v147 = swift_slowAlloc();
      *(void *)&v221 = v147;
      *(_DWORD *)v146 = 136315394;
      swift_bridgeObjectRetain();
      v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v92, (uint64_t *)&v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v146 + 12) = 2048;
      v220 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v144, v145, "PommesResponse primaryPluginIdentifier %s     PommesResponse primaryQueryConfidence %f", (uint8_t *)v146, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v147, -1, -1);
      MEMORY[0x1CB77E470](v146, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v148 = (uint64_t)v208;
    v149 = (char *)v215;
    v224 = 0;
    *((void *)&v222 + 1) = &type metadata for FeatureFlag;
    v223 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
    v150 = swift_allocObject();
    *(void *)&v221 = v150;
    *(void *)(v150 + 16) = 6;
    *(void *)(v150 + 24) = 0;
    *(void *)(v150 + 32) = 0;
    *(void *)(v150 + 40) = 0;
    *(unsigned char *)(v150 + 48) = 3;
    v151 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v221);
    if (v151)
    {
      v152 = v201;
      v189(v86, v148, v201);
      v153 = Logger.logObject.getter();
      v154 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v153, v154))
      {
        v155 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v155 = 67109120;
        v156 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.isLowConfidenceKnowledgeResult.getter() & 1;
        v200(v86, v152);
        LODWORD(v221) = v156;
        v149 = (char *)v215;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C8F83000, v153, v154, "Low confidence knowledge fallback FF is on, Pegasus returned value is: %{BOOL}d", v155, 8u);
        MEMORY[0x1CB77E470](v155, -1, -1);
      }
      else
      {
        v200(v86, v152);
      }

      v148 = (uint64_t)v208;
      v224 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.isLowConfidenceKnowledgeResult.getter() & 1;
    }
    v157 = type metadata accessor for PommesResponse();
    MEMORY[0x1F4188790](v157);
    *(&v185 - 8) = v77;
    *(&v185 - 7) = v78;
    v180[0] = v148;
    v180[1] = v202;
    v181 = (void *)v218;
    v182 = v192;
    v183 = &v224;
    v158 = (void *)PommesResponse.__allocating_init(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v158)
    {
      v159 = v158;
      v160 = Logger.logObject.getter();
      v161 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v160, v161))
      {
        v162 = (uint8_t *)swift_slowAlloc();
        v163 = swift_slowAlloc();
        *(void *)&v221 = v163;
        *(_DWORD *)v162 = 136315138;
        v218 = (uint64_t)(v162 + 4);
        v164 = objc_msgSend(v159, sel_debugDescription);
        v165 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v167 = v166;

        v148 = (uint64_t)v208;
        v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v165, v167, (uint64_t *)&v221);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        v149 = (char *)v215;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v160, v161, "PommesSearchRequestProcessor#handleSuccess response: %s", v162, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v163, -1, -1);
        MEMORY[0x1CB77E470](v162, -1, -1);
      }
      else
      {
      }
      v175 = v196;
      v176 = v191;
      v223 = 0;
      v221 = 0u;
      v222 = 0u;
      static CurareDonation.donateCurareInfo(for:with:into:)(v148, v159, (uint64_t)&v221);
      outlined destroy of MediaUserStateCenter?((uint64_t)&v221, &demangling cache variable for type metadata for CurareInteractionStream?);
      v177 = v159;
      closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v158, 0, v175);

      (*(void (**)(char *, uint64_t))(v193 + 8))(v149, v176);
      v135 = v148;
      v136 = v201;
    }
    else
    {
      v168 = Logger.logObject.getter();
      v169 = static os_log_type_t.error.getter();
      v170 = os_log_type_enabled(v168, v169);
      v171 = v191;
      if (v170)
      {
        v172 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v172 = 0;
        _os_log_impl(&dword_1C8F83000, v168, v169, "PommesSearchRequestProcessor failed to build PommesResponse with given parameters", v172, 2u);
        MEMORY[0x1CB77E470](v172, -1, -1);
      }

      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      v173 = (void *)swift_allocError();
      *v174 = 0x80;
      closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v173, 1, v196);

      (*(void (**)(char *, uint64_t))(v193 + 8))(v149, v171);
      v135 = v148;
      v136 = v201;
    }
LABEL_73:
    v200((char *)v135, v136);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v225);
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  BOOL v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  void *v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (**v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  void (*v76)(unint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  unint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t result;
  id v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  long long v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void (*v108)(char *, unint64_t, uint64_t);
  char *v109;
  uint64_t v110;
  char v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  void (**v121)(uint64_t, uint64_t);
  char *v122;
  NSObject *v123;
  os_log_type_t v124;
  uint8_t *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  BOOL v139;
  uint64_t v140;
  uint8_t *v141;
  void *v142;
  unsigned char *v143;
  NSObject *v144;
  os_log_type_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  NSObject *v153;
  os_log_type_t v154;
  uint8_t *v155;
  int v156;
  uint64_t v157;
  void *v158;
  id v159;
  NSObject *v160;
  os_log_type_t v161;
  uint8_t *v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  NSObject *v168;
  os_log_type_t v169;
  BOOL v170;
  uint64_t v171;
  uint8_t *v172;
  void *v173;
  unsigned char *v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  void *v178;
  unint64_t v179;
  void v180[2];
  void *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(char *, uint64_t, uint64_t);
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  long long v199;
  void (*v200)(char *, uint64_t);
  uint64_t v201;
  void *v202;
  char *v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  void (*v215)(char *, unint64_t, uint64_t);
  char *v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  long long v221;
  long long v222;
  unint64_t v223;
  char v224;
  void v225[5];

  v202 = a3;
  v211 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  v188 = *(void *)(v211 - 8);
  MEMORY[0x1F4188790](v211);
  v216 = (char *)&v185 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v212 = *(void *)(v218 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v218);
  v203 = (char *)&v185 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  v186 = (char *)&v185 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v214 = (char *)&v185 - v15;
  MEMORY[0x1F4188790](v14);
  v217 = (char *)&v185 - v16;
  uint64_t v17 = type metadata accessor for ClientExperienceSignals();
  v193 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  v215 = (void (*)(char *, unint64_t, uint64_t))((char *)&v185 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v187 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1F4188790](v187);
  v195 = (char *)&v185 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest();
  v209 = *(void *)(v213 - 8);
  MEMORY[0x1F4188790](v213);
  v207 = (char *)&v185 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v205 = *(void **)(v206 - 8);
  MEMORY[0x1F4188790](v206);
  *(void *)&v199 = (char *)&v185 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  v194 = (char *)&v185 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v185 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v185 - v29;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = a4;
  *(void *)(v31 + 24) = a5;
  v198 = v31;
  v225[3] = &type metadata for DefaultExperiencesResolver;
  v225[4] = &protocol witness table for DefaultExperiencesResolver;
  v225[0] = swift_allocObject();
  outlined init with copy of DefaultExperiencesResolver(a2, v225[0] + 16);
  uint64_t v32 = *(int *)(type metadata accessor for PegasusSearchResponse(0) + 20);
  v192 = a1;
  id v33 = &a1[v32];
  v204 = v23;
  uint64_t v34 = v23 + 16;
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v35(v30, v33, v22);
  uint64_t v36 = one-time initialization token for pommes;
  v196 = a4;
  swift_retain();
  v197 = a5;
  swift_retain();
  if (v36 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
  v35(v28, v30, v22);
  v210 = v38;
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  BOOL v41 = os_log_type_enabled(v39, v40);
  v201 = v22;
  v191 = v17;
  v190 = v34;
  v189 = (void (*)(char *, uint64_t, uint64_t))v35;
  if (v41)
  {
    uint64_t v42 = v22;
    BOOL v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(void *)&v221 = v44;
    *(_DWORD *)BOOL v43 = 136315138;
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, MEMORY[0x1E4F88740]);
    Swift::String v45 = Message.textFormatString()();
    v219 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45._countAndFlagsBits, (unint64_t)v45._object, (uint64_t *)&v221);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v200 = *(void (**)(char *, uint64_t))(v204 + 8);
    v200(v28, v42);
    _os_log_impl(&dword_1C8F83000, v39, v40, "PireneResponse: %s", v43, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v44, -1, -1);
    MEMORY[0x1CB77E470](v43, -1, -1);
  }
  else
  {
    v200 = *(void (**)(char *, uint64_t))(v204 + 8);
    v200(v28, v22);
  }

  uint64_t v46 = v199;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Swift::String v47 = v207;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
  uint64_t v48 = ((uint64_t (*)(uint64_t, uint64_t))v205[1])(v46, v206);
  uint64_t v49 = MEMORY[0x1CB779330](v48);
  (*(void (**)(char *, uint64_t))(v209 + 8))(v47, v213);
  char v50 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasSiriInstruction.getter();
  v208 = v30;
  uint64_t v51 = v202;
  if (v50)
  {
    int64_t v52 = *(void *)(v49 + 16);
    if (v52)
    {
      *(void *)&v221 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52, 0);
      v215 = *(void (**)(char *, unint64_t, uint64_t))(v188 + 16);
      unint64_t v53 = (*(unsigned __int8 *)(v188 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80);
      v195 = (char *)v49;
      unint64_t v54 = v49 + v53;
      v213 = *(void *)(v188 + 72);
      uint64_t v55 = (void (**)(char *, uint64_t))(v188 + 8);
      v194 = (char *)(v49 + v53);
      do
      {
        uint64_t v56 = v216;
        uint64_t v57 = v211;
        v215(v216, v54, v211);
        Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
        (*v55)(v56, v57);
        uint64_t v58 = v221;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v58 + 16) + 1, 1);
          uint64_t v58 = v221;
        }
        unint64_t v60 = *(void *)(v58 + 16);
        unint64_t v59 = *(void *)(v58 + 24);
        if (v60 >= v59 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
          uint64_t v58 = v221;
        }
        *(void *)(v58 + 16) = v60 + 1;
        uint64_t v61 = v58 + ((*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80));
        uint64_t v62 = *(void *)(v212 + 72);
        (*(void (**)(unint64_t, char *, uint64_t))(v212 + 32))(v61 + v62 * v60, v217, v218);
        *(void *)&v221 = v58;
        v54 += v213;
        --v52;
      }
      while (v52);
      v207 = *(char **)(v58 + 16);
      if (v207)
      {
        uint64_t v96 = (void *)((char *)v202
                       + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_attemptedProfileSliceLabels);
        swift_bridgeObjectRetain();
        v205 = v96;
        swift_beginAccess();
        uint64_t v97 = 0;
        v217 = (char *)(v212 + 16);
        v215 = (void (*)(char *, unint64_t, uint64_t))(v212 + 8);
        *(void *)&uint64_t v98 = 134218240;
        v199 = v98;
        uint64_t v99 = v218;
        uint64_t v100 = v203;
        uint64_t v101 = v208;
        v206 = v61;
        while (1)
        {
          v209 = v97;
          v102 = (char *)(v61 + v97 * v62);
          v103 = (void *)*v205;
          if (*(void *)(*v205 + 16))
          {
            lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
            swift_bridgeObjectRetain();
            v216 = v102;
            v104 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v105 = -1 << *((unsigned char *)v103 + 32);
            v106 = v104 & ~v105;
            if ((*(void *)((char *)v103 + ((v106 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v106))
            {
              v107 = ~v105;
              uint64_t v108 = *(void (**)(char *, unint64_t, uint64_t))v217;
              do
              {
                uint64_t v109 = v214;
                uint64_t v110 = v218;
                v108(v214, v103[6] + v106 * v62, v218);
                lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
                v111 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))v215)(v109, v110);
                if (v111) {
                  break;
                }
                v106 = (v106 + 1) & v107;
              }
              while (((*(void *)((char *)v103 + ((v106 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v106) & 1) != 0);
            }
            else
            {
              v111 = 0;
            }
            swift_bridgeObjectRelease();
            uint64_t v101 = v208;
            uint64_t v99 = v218;
            uint64_t v100 = v203;
            v102 = v216;
          }
          else
          {
            v111 = 0;
          }
          (*(void (**)(char *, char *, uint64_t))v217)(v100, v102, v99);
          v112 = Logger.logObject.getter();
          uint64_t v113 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v112, v113))
          {
            uint64_t v114 = swift_slowAlloc();
            *(_DWORD *)uint64_t v114 = v199;
            uint64_t v115 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
            (*(void (**)(char *, uint64_t))v215)(v100, v99);
            *(void *)(v114 + 4) = v115;
            *(_WORD *)(v114 + 12) = 1024;
            *(_DWORD *)(v114 + 14) = v111 & 1;
            _os_log_impl(&dword_1C8F83000, v112, v113, "ProfileSliceLabel %ld previously attempted? %{BOOL}d", (uint8_t *)v114, 0x12u);
            MEMORY[0x1CB77E470](v114, -1, -1);
          }
          else
          {
            (*(void (**)(char *, uint64_t))v215)(v100, v99);
          }

          uint64_t v61 = v206;
          if (v111) {
            break;
          }
          uint64_t v97 = v209 + 1;
          if ((char *)(v209 + 1) == v207)
          {
            swift_release_n();
            goto LABEL_44;
          }
        }
        swift_bridgeObjectRelease();
        swift_release_n();
        v137 = Logger.logObject.getter();
        v138 = static os_log_type_t.debug.getter();
        v139 = os_log_type_enabled(v137, v138);
        v140 = v201;
        if (v139)
        {
          v141 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v141 = 0;
          _os_log_impl(&dword_1C8F83000, v137, v138, "Already attempted profile slice resolution; yielding error response",
            v141,
            2u);
          MEMORY[0x1CB77E470](v141, -1, -1);
        }

        lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
        v142 = (void *)swift_allocError();
        *v143 = 67;
        closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v142, 1, v196);

        v135 = (uint64_t)v101;
        v136 = v140;
      }
      else
      {
        swift_release();
        uint64_t v99 = v218;
        uint64_t v101 = v208;
LABEL_44:
        v116 = v195;
        v117 = *((void *)v195 + 2);
        uint64_t v118 = v202;
        uint64_t v119 = v186;
        v120 = (uint64_t)v214;
        if (v117)
        {
          uint64_t v121 = (void (**)(uint64_t, uint64_t))(v212 + 8);
          swift_bridgeObjectRetain();
          uint64_t v122 = v194;
          do
          {
            Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
            swift_beginAccess();
            specialized Set._Variant.insert(_:)(v120, v119);
            (*v121)(v120, v99);
            swift_endAccess();
            v122 += v213;
            --v117;
          }
          while (v117);
          v116 = v195;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain_n();
        v123 = Logger.logObject.getter();
        uint64_t v124 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v123, v124))
        {
          uint64_t v125 = (uint8_t *)swift_slowAlloc();
          uint64_t v126 = v116;
          uint64_t v127 = swift_slowAlloc();
          *(_DWORD *)uint64_t v125 = 136315138;
          v218 = (uint64_t)(v125 + 4);
          v219 = v127;
          uint64_t v128 = swift_bridgeObjectRetain();
          v129 = MEMORY[0x1CB77CDC0](v128, v211);
          v131 = v130;
          swift_bridgeObjectRelease();
          v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v129, v131, (uint64_t *)&v219);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C8F83000, v123, v124, "Adding profile slice resolution requests: %s", v125, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v127, -1, -1);
          MEMORY[0x1CB77E470](v125, -1, -1);

          v132 = v201;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          v132 = v201;
          uint64_t v126 = v116;
        }
        v133 = v198;
        v134 = (uint64_t)v118 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest;
        swift_beginAccess();
        *(void *)(v134 + *(int *)(v187 + 92)) = v126;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t (*)(void *, char), uint64_t))(*v118 + 224))(partial apply for closure #3 in PommesSearchRequestProcessor.search_sync(completion:), v133);
        v135 = (uint64_t)v101;
        v136 = v132;
      }
      goto LABEL_73;
    }
  }
  uint64_t v63 = swift_bridgeObjectRelease();
  uint64_t v64 = v51[5];
  unint64_t v65 = *(void (**)(uint64_t))(*v51 + 152);
  uint64_t v66 = (uint64_t)v195;
  v65(v63);
  v218 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v64 + 168))(v66, v30);
  uint64_t v67 = _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v66, type metadata accessor for PommesSearchRequest);
  uint64_t v68 = v51[2];
  v65(v67);
  uint64_t v69 = (char *)v215;
  (*(void (**)(uint64_t))(*(void *)v68 + 696))(v66);
  uint64_t v70 = _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v66, type metadata accessor for PommesSearchRequest);
  if (one-time initialization token for shared != -1) {
    uint64_t v70 = swift_once();
  }
  uint64_t v71 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v70);
  v181 = v225;
  v182 = v30;
  v183 = v69;
  uint64_t v72 = type metadata accessor for Date();
  uint64_t v73 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72);
  uint64_t v75 = (char *)&v185 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v76 = *(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(void *)v71 + 200);
  v183 = (char *)v180;
  v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  LOBYTE(v181) = 2;
  v76(&v219, 0xD00000000000002ALL, 0x80000001C919E6E0, 0, v75, "SiriInformationSearch/PommesSearchRequestProcessor.swift", 56, 2, 348, "handleSuccess(_:_:_:)", 21, v181, partial apply for closure #4 in PommesSearchRequestProcessor.handleSuccess(_:_:_:));
  (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v72);
  uint64_t v77 = v219;
  uint64_t v78 = PommesSearchRequestProcessor.clientSearch(pegasusResponse:)((uint64_t)v30);
  swift_bridgeObjectRetain_n();
  uint64_t v79 = Logger.logObject.getter();
  uint64_t v80 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v79, v80))
  {
    uint64_t v81 = (uint8_t *)swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    *(void *)&v221 = v82;
    *(_DWORD *)uint64_t v81 = 136315138;
    uint64_t v83 = type metadata accessor for PommesResult();
    uint64_t v84 = MEMORY[0x1CB77CDF0](v78, v83);
    v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, (uint64_t *)&v221);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v79, v80, "PommesSearchRequestProcessor#handleSuccess clientResults: %s", v81, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v82, -1, -1);
    MEMORY[0x1CB77E470](v81, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v86 = v194;
  if (!(v77 >> 62))
  {
    uint64_t v87 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v87) {
      goto LABEL_22;
    }
LABEL_56:
    swift_bridgeObjectRelease();
    v92 = 0xE700000000000000;
    uint64_t v90 = 0x6E776F6E6B6E55;
    id v95 = 0;
    goto LABEL_57;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_56;
  }
LABEL_22:
  if ((v77 & 0xC000000000000001) != 0)
  {
    v178 = (void *)MEMORY[0x1CB77D510](0, v77);
    swift_bridgeObjectRelease();
    uint64_t v90 = dispatch thunk of Experience.pluginIdentifier.getter();
    v92 = v179;

    swift_bridgeObjectRetain();
    id v93 = (id)MEMORY[0x1CB77D510](0, v77);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  if (*(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v89 = *(id *)(v77 + 32);
    swift_bridgeObjectRelease();
    uint64_t v90 = dispatch thunk of Experience.pluginIdentifier.getter();
    v92 = v91;

    id v93 = *(id *)(v77 + 32);
LABEL_25:
    dispatch thunk of Experience.queryConfidence.getter();
    id v95 = v94;

LABEL_57:
    swift_bridgeObjectRetain();
    v144 = Logger.logObject.getter();
    v145 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v144, v145))
    {
      v146 = swift_slowAlloc();
      v147 = swift_slowAlloc();
      *(void *)&v221 = v147;
      *(_DWORD *)v146 = 136315394;
      swift_bridgeObjectRetain();
      v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v92, (uint64_t *)&v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v146 + 12) = 2048;
      v220 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v144, v145, "PommesResponse primaryPluginIdentifier %s     PommesResponse primaryQueryConfidence %f", (uint8_t *)v146, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v147, -1, -1);
      MEMORY[0x1CB77E470](v146, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v148 = (uint64_t)v208;
    v149 = (char *)v215;
    v224 = 0;
    *((void *)&v222 + 1) = &type metadata for FeatureFlag;
    v223 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
    v150 = swift_allocObject();
    *(void *)&v221 = v150;
    *(void *)(v150 + 16) = 6;
    *(void *)(v150 + 24) = 0;
    *(void *)(v150 + 32) = 0;
    *(void *)(v150 + 40) = 0;
    *(unsigned char *)(v150 + 48) = 3;
    v151 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v221);
    if (v151)
    {
      v152 = v201;
      v189(v86, v148, v201);
      v153 = Logger.logObject.getter();
      v154 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v153, v154))
      {
        v155 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v155 = 67109120;
        v156 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.isLowConfidenceKnowledgeResult.getter() & 1;
        v200(v86, v152);
        LODWORD(v221) = v156;
        v149 = (char *)v215;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C8F83000, v153, v154, "Low confidence knowledge fallback FF is on, Pegasus returned value is: %{BOOL}d", v155, 8u);
        MEMORY[0x1CB77E470](v155, -1, -1);
      }
      else
      {
        v200(v86, v152);
      }

      v148 = (uint64_t)v208;
      v224 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.isLowConfidenceKnowledgeResult.getter() & 1;
    }
    v157 = type metadata accessor for PommesResponse();
    MEMORY[0x1F4188790](v157);
    *(&v185 - 8) = v77;
    *(&v185 - 7) = v78;
    v180[0] = v148;
    v180[1] = v202;
    v181 = (void *)v218;
    v182 = v192;
    v183 = &v224;
    v158 = (void *)PommesResponse.__allocating_init(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v158)
    {
      v159 = v158;
      v160 = Logger.logObject.getter();
      v161 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v160, v161))
      {
        v162 = (uint8_t *)swift_slowAlloc();
        v163 = swift_slowAlloc();
        *(void *)&v221 = v163;
        *(_DWORD *)v162 = 136315138;
        v218 = (uint64_t)(v162 + 4);
        v164 = objc_msgSend(v159, sel_debugDescription);
        v165 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v167 = v166;

        v148 = (uint64_t)v208;
        v220 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v165, v167, (uint64_t *)&v221);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        v149 = (char *)v215;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v160, v161, "PommesSearchRequestProcessor#handleSuccess response: %s", v162, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v163, -1, -1);
        MEMORY[0x1CB77E470](v162, -1, -1);
      }
      else
      {
      }
      v175 = v196;
      v176 = v191;
      v223 = 0;
      v221 = 0u;
      v222 = 0u;
      static CurareDonation.donateCurareInfo(for:with:into:)(v148, v159, (uint64_t)&v221);
      outlined destroy of MediaUserStateCenter?((uint64_t)&v221, &demangling cache variable for type metadata for CurareInteractionStream?);
      v177 = v159;
      closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v158, 0, v175);

      (*(void (**)(char *, uint64_t))(v193 + 8))(v149, v176);
      v135 = v148;
      v136 = v201;
    }
    else
    {
      v168 = Logger.logObject.getter();
      v169 = static os_log_type_t.error.getter();
      v170 = os_log_type_enabled(v168, v169);
      v171 = v191;
      if (v170)
      {
        v172 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v172 = 0;
        _os_log_impl(&dword_1C8F83000, v168, v169, "PommesSearchRequestProcessor failed to build PommesResponse with given parameters", v172, 2u);
        MEMORY[0x1CB77E470](v172, -1, -1);
      }

      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      v173 = (void *)swift_allocError();
      *v174 = 0x80;
      closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v173, 1, v196);

      (*(void (**)(char *, uint64_t))(v193 + 8))(v149, v171);
      v135 = v148;
      v136 = v201;
    }
LABEL_73:
    v200((char *)v135, v136);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v225);
    return swift_release();
  }
  __break(1u);
  return result;
}

void specialized PommesSearchRequestProcessor.handleFailure(with:completion:)(char a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v84 = a4;
  uint64_t v85 = a3;
  uint64_t v83 = a2;
  uint64_t v79 = type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1F4188790](v79);
  uint64_t v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v81 = *(void *)(v7 - 8);
  uint64_t v82 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v80 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v77 = (uint64_t)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v78 = (uint64_t)&v73 - v12;
  uint64_t v13 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (uint64_t *)((char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v28 = (char *)&v73 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v73 - v29;
  switch(a1)
  {
    case 1:
      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      uint64_t v31 = (void *)swift_allocError();
      id v33 = v31;
      char v34 = 1;
      goto LABEL_3;
    case 2:
      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      uint64_t v31 = (void *)swift_allocError();
      id v33 = v31;
      char v34 = -126;
      goto LABEL_3;
    case 8:
      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      uint64_t v31 = (void *)swift_allocError();
      id v33 = v31;
      char v34 = 3;
      goto LABEL_3;
    case 9:
      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      uint64_t v31 = (void *)swift_allocError();
      id v33 = v31;
      char v34 = 4;
      goto LABEL_3;
    case 10:
      uint64_t v73 = v15;
      uint64_t v74 = v6;
      uint64_t v35 = *(void (**)(void))(*v83 + 152);
      uint64_t v36 = *v83 + 152;
      swift_retain();
      uint64_t v37 = swift_retain();
      uint64_t v75 = v36;
      uint64_t v76 = v35;
      ((void (*)(uint64_t))v35)(v37);
      LOBYTE(v35) = v30[*(int *)(v22 + 80)];
      uint64_t v38 = _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v30, type metadata accessor for PommesSearchRequest);
      if ((v35 & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t v39 = v76;
      ((void (*)(uint64_t))v76)(v38);
      outlined init with copy of MediaUserStateCenter?((uint64_t)&v28[*(int *)(v22 + 40)], (uint64_t)v21, &demangling cache variable for type metadata for PommesContext?);
      _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v28, type metadata accessor for PommesSearchRequest);
      uint64_t v40 = type metadata accessor for PommesContext();
      uint64_t v41 = *(void *)(v40 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v21, 1, v40) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v21, &demangling cache variable for type metadata for PommesContext?);
LABEL_26:
        lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
        uint64_t v61 = (void *)swift_allocError();
        *uint64_t v62 = -127;
        closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v61, 1, v85);

        swift_release();
        swift_release();
        return;
      }
      uint64_t v42 = PommesContext.domain.getter();
      uint64_t v44 = v43;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v21, v40);
      if (!v44) {
        goto LABEL_26;
      }
      if (v42 == 0x656E6F6870 && v44 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v45 & 1) == 0) {
          goto LABEL_26;
        }
      }
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.pommes);
      Swift::String v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      BOOL v49 = os_log_type_enabled(v47, v48);
      char v50 = v73;
      uint64_t v51 = v74;
      if (v49)
      {
        int64_t v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int64_t v52 = 0;
        _os_log_impl(&dword_1C8F83000, v47, v48, "Handling no results from fallback request for phone domain as successful", v52, 2u);
        MEMORY[0x1CB77E470](v52, -1, -1);
      }

      unint64_t v53 = v83;
      v39();
      _s21SiriInformationSearch06PommesC7RequestVWOcTm_1((uint64_t)v25, (uint64_t)v18, type metadata accessor for PommesSearchRequest.ParseState);
      _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v25, type metadata accessor for PommesSearchRequest);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v55 = (uint64_t)&v18[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                                     + 64)];
          uint64_t v56 = v78;
          outlined init with take of TCUMappedNLResponse?(v55, v78);
          uint64_t v57 = v77;
          outlined init with copy of MediaUserStateCenter?(v56, v77, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
          uint64_t v58 = type metadata accessor for TCUMappedNLResponse();
          uint64_t v59 = *(void *)(v58 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v57, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
            uint64_t v60 = MEMORY[0x1E4FBC860];
          }
          else
          {
            uint64_t v67 = (void *)TCUMappedNLResponse.nlResponse.getter();
            (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
            uint64_t v60 = NLParseResponse.userParses.getter();
          }
          unint64_t v65 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
          uint64_t v66 = v56;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v60 = *((void *)v18 + 2);
          uint64_t v64 = &v18[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                            + 64)];
          swift_bridgeObjectRelease();
          unint64_t v65 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
          uint64_t v66 = (uint64_t)v64;
        }
        outlined destroy of MediaUserStateCenter?(v66, v65);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
        _s21SiriInformationSearch15PerformanceUtilC6TicketVWObTm_0((uint64_t)&v18[*(int *)(v63 + 48)], (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
        uint64_t v60 = *v50;
        swift_bridgeObjectRetain();
        _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
      }
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, MEMORY[0x1E4F88740]);
      uint64_t v68 = v80;
      uint64_t v69 = v82;
      static Message.with(_:)();
      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.init()();
      uint64_t v70 = v81;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(&v51[*(int *)(v79 + 20)], v68, v69);
      uint64_t v71 = v85;
      swift_retain();
      uint64_t v72 = v84;
      swift_retain();
      specialized PommesSearchRequestProcessor.handleSuccess(_:_:_:)(v51, v60, v53, v71, v72);
      swift_release();
      swift_release();
      _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v51, type metadata accessor for PegasusSearchResponse);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v68, v69);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    default:
      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      uint64_t v31 = (void *)swift_allocError();
      id v33 = v31;
      char v34 = 67;
LABEL_3:
      *uint64_t v32 = v34;
      closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v31, 1, v85);

      return;
  }
}

uint64_t sub_1C90476A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 152))();
}

uint64_t ObjC metadata update function for PommesSearchRequestProcessor()
{
  return type metadata accessor for PommesSearchRequestProcessor();
}

uint64_t type metadata completion function for PommesSearchRequestProcessor()
{
  uint64_t result = type metadata accessor for PommesSearchRequest(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for PommesSearchRequestProcessor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesSearchRequestProcessor);
}

uint64_t dispatch thunk of PommesSearchRequestProcessor.pommesSearchRequest.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PommesSearchRequestProcessor.__allocating_init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of PommesSearchRequestProcessor.search(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of PommesSearchRequestProcessor.search(enabled:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PommesSearchRequestProcessor.search_sync(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t sub_1C904787C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C90478B4()
{
  uint64_t v1 = type metadata accessor for PommesCandidateId();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x1F4186498](v0, v6, v5);
}

void partial apply for closure #1 in PommesSearchRequestProcessor.clientSearchForMusic(_:musicDomainClient:)(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for PommesCandidateId() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2[2];
  uint64_t v8 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v10 = *(void *)((char *)v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in PommesSearchRequestProcessor.clientSearchForMusic(_:musicDomainClient:)(a1, v4, v7, v8, v9, (uint64_t)v2 + v6, v10);
}

id outlined copy of Result<[PommesResult], Error>(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

uint64_t outlined assign with take of PommesSearchRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(void *a1, char a2)
{
  return closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(a1, a2 & 1, *(void *)(v2 + 16));
}

uint64_t sub_1C9047AD8()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #4 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #4 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1C9047B30()
{
  outlined consume of FeatureFlag(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x1F4186498](v0, 49, 7);
}

unint64_t lazy protocol witness table accessor for type [Data] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Data] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Data] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    lazy protocol witness table accessor for type Data and conformance Data();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Data] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [Data] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Data] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    lazy protocol witness table accessor for type Data and conformance Data();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Data] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t objectdestroy_32Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t objectdestroy_48Tm()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(void *a1, char a2)
{
  return closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(a1, a2 & 1, *(uint64_t (**)(void *, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

void partial apply for closure #5 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(uint64_t a1)
{
  closure #5 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_1C9047D34()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t closure #4 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #4 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(a1);
}

uint64_t WholeHomeAudioPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static WholeHomeAudioPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t WholeHomeAudioPreflightClient.isPlayEverywhereTask(pommesTask:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = a1;
  uint64_t v75 = type metadata accessor for UsoEntity_common_UserEntity.DefinedValues();
  uint64_t v5 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  uint64_t v60 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_UserEntity.DefinedValues?, UsoEntity_common_UserEntity.DefinedValues?));
  MEMORY[0x1F4188790](v74);
  unint64_t v65 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v56 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v64 = (uint64_t)&v56 - v15;
  if (one-time initialization token for pommes != -1) {
LABEL_48:
  }
    swift_once();
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v63 = v11;
  uint64_t v57 = a2;
  uint64_t v58 = v17;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    v77[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000001C919E780, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v18, v19, "Checking %s...", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v22, -1, -1);
    MEMORY[0x1CB77E470](v21, -1, -1);
  }

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v77[3])
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v77, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for UsoTask_play_common_MediaItem();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  swift_release();
  uint64_t v23 = byte_1F236FAD8;
  uint64_t v24 = UsoTask.arguments.getter();
  uint64_t v25 = 0xEC00000073656974;
  uint64_t v26 = 0x69746E4572657375;
  uint64_t v27 = v64;
  switch(v23)
  {
    case 1:
      uint64_t v25 = 0xE600000000000000;
      uint64_t v26 = 0x746567726174;
      break;
    case 2:
      uint64_t v25 = 0xE900000000000065;
      uint64_t v26 = 0x636E657265666572;
      break;
    case 3:
      uint64_t v25 = 0xE700000000000000;
      uint64_t v26 = 0x72656767697274;
      break;
    default:
      break;
  }
  uint64_t v28 = *(void *)(v24 + 16);
  uint64_t v29 = (uint64_t)v65;
  unint64_t v56 = a3;
  if (!v28 || (unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25), (v31 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = MEMORY[0x1E4FBC860];
    if (MEMORY[0x1E4FBC860] >> 62) {
      goto LABEL_52;
    }
LABEL_26:
    uint64_t v38 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v38)
    {
LABEL_53:
      swift_bridgeObjectRelease_n();
      return 0;
    }
    goto LABEL_27;
  }
  unint64_t v32 = *(void *)(*(void *)(v24 + 56) + 8 * v30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = MEMORY[0x1E4FBC860];
  v77[0] = MEMORY[0x1E4FBC860];
  if (v32 >> 62)
  {
    unint64_t v35 = v32;
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    if (v34) {
      goto LABEL_15;
    }
LABEL_50:
    swift_bridgeObjectRelease();
    unint64_t v49 = MEMORY[0x1E4FBC860];
    goto LABEL_51;
  }
  uint64_t v34 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t v35 = v32;
  swift_bridgeObjectRetain();
  if (!v34) {
    goto LABEL_50;
  }
LABEL_15:
  type metadata accessor for UsoEntity_common_UserEntity();
  if (v34 < 1)
  {
    __break(1u);
    JUMPOUT(0x1C90488C4);
  }
  for (uint64_t i = 0; i != v34; ++i)
  {
    if ((v35 & 0xC000000000000001) != 0) {
      MEMORY[0x1CB77D510](i, v35);
    }
    else {
      swift_retain();
    }
    dispatch thunk of UsoValue.getAsEntity()();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v37 = swift_release();
    if (v76)
    {
      MEMORY[0x1CB77CD90](v37);
      if (*(void *)((v77[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v77[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v29 = (uint64_t)v65;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v49 = v77[0];
  uint64_t v27 = v64;
  uint64_t v33 = MEMORY[0x1E4FBC860];
LABEL_51:
  swift_bridgeObjectRelease();
  v77[0] = v33;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v49);
  swift_bridgeObjectRelease();
  uint64_t v11 = v77[0];
  if (!((unint64_t)v77[0] >> 62)) {
    goto LABEL_26;
  }
LABEL_52:
  swift_bridgeObjectRetain();
  uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
  if (!v38) {
    goto LABEL_53;
  }
LABEL_27:
  unint64_t v73 = v11 & 0xC000000000000001;
  uint64_t v71 = (void (**)(char *, void, uint64_t, uint64_t))(v5 + 56);
  uint64_t v72 = (void (**)(char *, void, uint64_t))(v5 + 104);
  unsigned int v70 = *MEMORY[0x1E4FA2B78];
  uint64_t v69 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v59 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v61 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  a2 = 4;
  uint64_t v67 = v14;
  uint64_t v68 = v11;
  uint64_t v66 = v38;
  while (1)
  {
    uint64_t v39 = a2 - 4;
    if (v73)
    {
      a3 = MEMORY[0x1CB77D510](a2 - 4, v11);
      uint64_t v5 = a2 - 3;
      if (__OFADD__(v39, 1)) {
        goto LABEL_47;
      }
    }
    else
    {
      a3 = *(void *)(v11 + 8 * a2);
      swift_retain();
      uint64_t v5 = a2 - 3;
      if (__OFADD__(v39, 1))
      {
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
    }
    dispatch thunk of UsoEntity_common_UserEntity.definedValue.getter();
    uint64_t v40 = v75;
    (*v72)(v14, v70, v75);
    (*v71)(v14, 0, 1, v40);
    uint64_t v41 = v29 + *(int *)(v74 + 48);
    outlined init with copy of MediaUserStateCenter?(v27, v29, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, v41, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
    uint64_t v42 = *v69;
    if ((*v69)(v29, 1, v40) == 1) {
      break;
    }
    uint64_t v43 = v63;
    outlined init with copy of MediaUserStateCenter?(v29, v63, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
    if (v42(v41, 1, v75) == 1)
    {
      (*v61)(v43, v75);
      uint64_t v27 = v64;
      goto LABEL_29;
    }
    uint64_t v44 = v75;
    char v45 = v60;
    (*v59)(v60, v41, v75);
    lazy protocol witness table accessor for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues, MEMORY[0x1E4FA2B88]);
    char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    Swift::String v47 = *v61;
    (*v61)(v43, v44);
    os_log_type_t v48 = v45;
    uint64_t v29 = (uint64_t)v65;
    v47((uint64_t)v48, v44);
    outlined destroy of MediaUserStateCenter?(v29, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
    uint64_t v14 = v67;
    outlined destroy of MediaUserStateCenter?((uint64_t)v67, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
    uint64_t v27 = v64;
    outlined destroy of MediaUserStateCenter?(v64, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
    swift_release();
    if (v46) {
      goto LABEL_43;
    }
LABEL_30:
    ++a2;
    uint64_t v11 = v68;
    if (v5 == v66) {
      goto LABEL_53;
    }
  }
  if (v42(v41, 1, v75) != 1)
  {
LABEL_29:
    outlined destroy of MediaUserStateCenter?(v29, &demangling cache variable for type metadata for (UsoEntity_common_UserEntity.DefinedValues?, UsoEntity_common_UserEntity.DefinedValues?));
    uint64_t v14 = v67;
    outlined destroy of MediaUserStateCenter?((uint64_t)v67, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v27, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
    swift_release();
    goto LABEL_30;
  }
  outlined destroy of MediaUserStateCenter?(v29, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v67, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v27, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
  swift_release();
LABEL_43:
  swift_bridgeObjectRelease_n();
  swift_retain_n();
  unint64_t v50 = v56;
  swift_bridgeObjectRetain_n();
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    v77[0] = v54;
    *(_DWORD *)uint64_t v53 = 136315394;
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000001C919E780, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v53 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v50, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v51, v52, "Task passed test %s:\n%s", (uint8_t *)v53, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v54, -1, -1);
    MEMORY[0x1CB77E470](v53, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  return 1;
}

uint64_t WholeHomeAudioPreflightClient.isPlayMusicFromTask(pommesTask:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (one-time initialization token for pommes != -1) {
    goto LABEL_49;
  }
LABEL_2:
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  uint64_t v36 = a2;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    v38[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x80000001C919E7B0, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v6, v7, "Checking %s...", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v9, -1, -1);
    MEMORY[0x1CB77E470](v8, -1, -1);
  }

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v38[3])
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v38, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for UsoTask_play_common_MediaItem();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  swift_release();
  uint64_t v10 = byte_1F236FB00;
  uint64_t v11 = UsoTask.arguments.getter();
  uint64_t v12 = 0xEC00000073656974;
  uint64_t v13 = 0x69746E4572657375;
  switch(v10)
  {
    case 1:
      uint64_t v12 = 0xE600000000000000;
      uint64_t v13 = 0x746567726174;
      if (*(void *)(v11 + 16)) {
        goto LABEL_12;
      }
      goto LABEL_26;
    case 2:
      uint64_t v12 = 0xE900000000000065;
      uint64_t v13 = 0x636E657265666572;
      goto LABEL_11;
    case 3:
      uint64_t v12 = 0xE700000000000000;
      uint64_t v13 = 0x72656767697274;
      if (!*(void *)(v11 + 16)) {
        goto LABEL_26;
      }
      goto LABEL_12;
    default:
LABEL_11:
      if (!*(void *)(v11 + 16)) {
        goto LABEL_26;
      }
LABEL_12:
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
      if ((v15 & 1) == 0)
      {
LABEL_26:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v21 = MEMORY[0x1E4FBC860];
        if (!(MEMORY[0x1E4FBC860] >> 62)) {
          goto LABEL_27;
        }
        goto LABEL_53;
      }
      unint64_t v16 = *(void *)(*(void *)(v11 + 56) + 8 * v14);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = MEMORY[0x1E4FBC860];
      v38[0] = MEMORY[0x1E4FBC860];
      if (v16 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
        if (!v18)
        {
LABEL_51:
          swift_bridgeObjectRelease();
          unint64_t v34 = MEMORY[0x1E4FBC860];
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v18 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v18) {
          goto LABEL_51;
        }
      }
      type metadata accessor for UsoEntity_common_UserEntity();
      if (v18 < 1)
      {
        __break(1u);
        JUMPOUT(0x1C9048FF8);
      }
      for (uint64_t i = 0; i != v18; ++i)
      {
        if ((v16 & 0xC000000000000001) != 0) {
          MEMORY[0x1CB77D510](i, v16);
        }
        else {
          swift_retain();
        }
        dispatch thunk of UsoValue.getAsEntity()();
        static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
        swift_release();
        uint64_t v20 = swift_release();
        if (v37)
        {
          MEMORY[0x1CB77CD90](v20);
          if (*(void *)((v38[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v38[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v34 = v38[0];
      uint64_t v17 = MEMORY[0x1E4FBC860];
LABEL_52:
      swift_bridgeObjectRelease();
      v38[0] = v17;
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v34);
      swift_bridgeObjectRelease();
      uint64_t v21 = v38[0];
      if (!((unint64_t)v38[0] >> 62))
      {
LABEL_27:
        uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v22) {
          goto LABEL_54;
        }
        goto LABEL_28;
      }
LABEL_53:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      if (!v22)
      {
LABEL_54:
        swift_bridgeObjectRelease_n();
        return 0;
      }
LABEL_28:
      unint64_t v35 = a3;
      a2 = v21 & 0xC000000000000001;
      uint64_t v23 = 4;
      uint64_t v24 = MEMORY[0x1E4FBC860];
      break;
  }
  while (1)
  {
    uint64_t v25 = v23 - 4;
    if (a2)
    {
      MEMORY[0x1CB77D510](v23 - 4, v21);
      a3 = v23 - 3;
      if (__OFADD__(v25, 1)) {
        goto LABEL_48;
      }
    }
    else
    {
      swift_retain();
      a3 = v23 - 3;
      if (__OFADD__(v25, 1))
      {
LABEL_48:
        __break(1u);
LABEL_49:
        swift_once();
        goto LABEL_2;
      }
    }
    uint64_t v26 = dispatch thunk of UsoEntity_common_UserEntity.associatedUserEntities.getter();
    unint64_t v27 = v26 ? v26 : v24;
    if (v27 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_release();
    }
    swift_bridgeObjectRelease();
    if (v28) {
      break;
    }
    ++v23;
    if (a3 == v22) {
      goto LABEL_54;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    v38[0] = v32;
    *(_DWORD *)uint64_t v31 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x80000001C919E7B0, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v31 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v35, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v29, v30, "Task passed test %s:\n%s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v32, -1, -1);
    MEMORY[0x1CB77E470](v31, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  return 1;
}

uint64_t WholeHomeAudioPreflightClient.isUpdateLocationTask(pommesTask:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = a2;
  uint64_t v5 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unsigned int v70 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v80);
  uint64_t v79 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v81 = (uint64_t)&v63 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v78 = (uint64_t)&v63 - v15;
  if (one-time initialization token for pommes != -1) {
LABEL_50:
  }
    swift_once();
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v68 = __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v77 = v12;
  unint64_t v69 = a3;
  if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    v83[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000001C919E7E0, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v17, v18, "Checking %s...", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v21, -1, -1);
    MEMORY[0x1CB77E470](v20, -1, -1);
  }

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v83[3])
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v83, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for UsoTask_update_common_MediaItem();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9194790;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v23;
  *(void *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 56) = v24;
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v25;
  unint64_t v26 = UsoTask.codeGenUserEntities.getter();
  char v27 = specialized Sequence.contains(where:)(v26, (void *)inited);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_arrayDestroy();
  if ((v27 & 1) == 0) {
    return 0;
  }
  uint64_t v28 = byte_1F236FB28;
  uint64_t v29 = UsoTask.arguments.getter();
  uint64_t v30 = 0xEC00000073656974;
  uint64_t v31 = 0x69746E4572657375;
  switch(v28)
  {
    case 1:
      uint64_t v30 = 0xE600000000000000;
      uint64_t v31 = 0x746567726174;
      break;
    case 2:
      uint64_t v30 = 0xE900000000000065;
      uint64_t v31 = 0x636E657265666572;
      break;
    case 3:
      uint64_t v30 = 0xE700000000000000;
      uint64_t v31 = 0x72656767697274;
      break;
    default:
      break;
  }
  uint64_t v33 = *(void *)(v29 + 16);
  uint64_t v34 = (uint64_t)v79;
  uint64_t v63 = a1;
  if (!v33 || (unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v30), (v36 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v45 = MEMORY[0x1E4FBC860];
    if (MEMORY[0x1E4FBC860] >> 62) {
      goto LABEL_54;
    }
    goto LABEL_28;
  }
  unint64_t v37 = *(void *)(*(void *)(v29 + 56) + 8 * v35);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v38 = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = MEMORY[0x1E4FBC860];
  v83[0] = MEMORY[0x1E4FBC860];
  unint64_t v40 = v38;
  if (v38 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    if (v41) {
      goto LABEL_17;
    }
LABEL_52:
    swift_bridgeObjectRelease();
    unint64_t v57 = MEMORY[0x1E4FBC860];
    goto LABEL_53;
  }
  uint64_t v41 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v41) {
    goto LABEL_52;
  }
LABEL_17:
  type metadata accessor for UsoEntity_common_MediaItem();
  if (v41 < 1)
  {
    __break(1u);
    JUMPOUT(0x1C9049C54);
  }
  uint64_t v42 = 0;
  unint64_t v43 = v38 & 0xC000000000000001;
  do
  {
    if (v43) {
      MEMORY[0x1CB77D510](v42, v38);
    }
    else {
      swift_retain();
    }
    dispatch thunk of UsoValue.getAsEntity()();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v44 = swift_release();
    if (v82)
    {
      MEMORY[0x1CB77CD90](v44);
      if (*(void *)((v83[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v83[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v34 = (uint64_t)v79;
    }
    ++v42;
    unint64_t v38 = v40;
  }
  while (v41 != v42);
  swift_bridgeObjectRelease();
  unint64_t v57 = v83[0];
  uint64_t v39 = MEMORY[0x1E4FBC860];
LABEL_53:
  swift_bridgeObjectRelease();
  v83[0] = v39;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v57);
  swift_bridgeObjectRelease();
  uint64_t v45 = v83[0];
  if ((unint64_t)v83[0] >> 62)
  {
LABEL_54:
    swift_bridgeObjectRetain();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    a1 = v78;
    if (!v46) {
      goto LABEL_55;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v46 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  a1 = v78;
  if (v46)
  {
LABEL_29:
    unint64_t v76 = v45 & 0xC000000000000001;
    Swift::String v47 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    uint64_t v75 = (void (**)(uint64_t, void, uint64_t))(v6 + 104);
    unsigned int v74 = *MEMORY[0x1E4FA35D0];
    uint64_t v12 = (char *)(v6 + 48);
    uint64_t v64 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    uint64_t v66 = (void (**)(uint64_t, uint64_t))(v6 + 8);
    a3 = 4;
    uint64_t v73 = v45;
    uint64_t v72 = v46;
    uint64_t v71 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    while (1)
    {
      uint64_t v49 = a3 - 4;
      if (v76)
      {
        MEMORY[0x1CB77D510](a3 - 4, v45);
        uint64_t v6 = a3 - 3;
        if (__OFADD__(v49, 1)) {
          goto LABEL_49;
        }
      }
      else
      {
        swift_retain();
        uint64_t v6 = a3 - 3;
        if (__OFADD__(v49, 1))
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
      }
      if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
      {
        dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
        swift_release();
      }
      else
      {
        (*v47)(a1, 1, 1, v5);
      }
      uint64_t v50 = v81;
      (*v75)(v81, v74, v5);
      (*v47)(v50, 0, 1, v5);
      uint64_t v51 = v34 + *(int *)(v80 + 48);
      outlined init with copy of MediaUserStateCenter?(a1, v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined init with copy of MediaUserStateCenter?(v50, v51, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      os_log_type_t v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))v12;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v12)(v34, 1, v5) == 1) {
        break;
      }
      uint64_t v53 = (uint64_t)v77;
      outlined init with copy of MediaUserStateCenter?(v34, (uint64_t)v77, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v52(v51, 1, v5) == 1)
      {
        (*v66)(v53, v5);
        a1 = v78;
        uint64_t v45 = v73;
LABEL_31:
        outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
        outlined destroy of MediaUserStateCenter?(v81, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        swift_release();
        goto LABEL_32;
      }
      uint64_t v54 = v70;
      (*v64)(v70, v51, v5);
      lazy protocol witness table accessor for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      int v65 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v55 = *v66;
      (*v66)(v53, v5);
      unint64_t v56 = v54;
      uint64_t v34 = (uint64_t)v79;
      v55((uint64_t)v56, v5);
      outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v81, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      a1 = v78;
      outlined destroy of MediaUserStateCenter?(v78, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      swift_release();
      uint64_t v45 = v73;
      if (v65) {
        goto LABEL_48;
      }
LABEL_32:
      ++a3;
      Swift::String v47 = v71;
      if (v6 == v72) {
        goto LABEL_55;
      }
    }
    unsigned int v48 = v52(v51, 1, v5);
    uint64_t v45 = v73;
    if (v48 == 1)
    {
      outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v81, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      swift_release();
LABEL_48:
      swift_bridgeObjectRelease_n();
      return 0;
    }
    goto LABEL_31;
  }
LABEL_55:
  swift_bridgeObjectRelease_n();
  swift_retain_n();
  unint64_t v58 = v69;
  swift_bridgeObjectRetain_n();
  uint64_t v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v61 = swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    v83[0] = v62;
    *(_DWORD *)uint64_t v61 = 136315394;
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000001C919E7E0, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v61 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v58, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v59, v60, "Task passed test %s:\n%s", (uint8_t *)v61, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v62, -1, -1);
    MEMORY[0x1CB77E470](v61, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  return 1;
}

uint64_t closure #1 in WholeHomeAudioPreflightClient.isUpdateLocationTask(pommesTask:)(uint64_t *a1, void *a2)
{
  uint64_t v78 = a2;
  uint64_t v4 = type metadata accessor for ListOperators();
  uint64_t v81 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v84 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for UsoEntity_common_UserEntity.DefinedValues();
  uint64_t v6 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  unint64_t v76 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_UserEntity.DefinedValues?, UsoEntity_common_UserEntity.DefinedValues?));
  MEMORY[0x1F4188790](v79);
  uint64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v77 = (uint64_t)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v85 = (uint64_t)&v65 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v86 = (uint64_t)&v65 - v15;
  uint64_t v16 = type metadata accessor for UsoIdentifier();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  BOOL v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = *a1;
  uint64_t v20 = dispatch thunk of CodeGenListEntry.entryAsExpression.getter();
  uint64_t v82 = v4;
  uint64_t v83 = v2;
  if (!v20) {
    goto LABEL_32;
  }
  dispatch thunk of CodeGenExpression.operand.getter();
  swift_release();
  if (!v88) {
    goto LABEL_32;
  }
  uint64_t v21 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  swift_release();
  if (!v21) {
    goto LABEL_32;
  }
  uint64_t v70 = *(void *)(v21 + 16);
  if (!v70)
  {
    swift_bridgeObjectRelease();
LABEL_32:
    LODWORD(v78) = 0;
LABEL_33:
    uint64_t v42 = v80;
    if (dispatch thunk of CodeGenListEntry.entryAsExpression.getter()
      && (dispatch thunk of CodeGenExpression.operand.getter(), swift_release(), v88))
    {
      uint64_t v43 = v86;
      dispatch thunk of UsoEntity_common_UserEntity.definedValue.getter();
      swift_release();
    }
    else
    {
      uint64_t v43 = v86;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v86, 1, 1, v42);
    }
    uint64_t v44 = v85;
    uint64_t v45 = v79;
    (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v85, *MEMORY[0x1E4FA2B80], v42);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v44, 0, 1, v42);
    uint64_t v46 = (uint64_t)&v9[*(int *)(v45 + 48)];
    outlined init with copy of MediaUserStateCenter?(v43, (uint64_t)v9, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
    outlined init with copy of MediaUserStateCenter?(v44, v46, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
    Swift::String v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    if (v47((uint64_t)v9, 1, v42) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
      int v48 = v47(v46, 1, v42);
      if (v48 == 1) {
        uint64_t v49 = &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?;
      }
      else {
        uint64_t v49 = &demangling cache variable for type metadata for (UsoEntity_common_UserEntity.DefinedValues?, UsoEntity_common_UserEntity.DefinedValues?);
      }
      if (v48 == 1) {
        char v50 = -1;
      }
      else {
        char v50 = 0;
      }
    }
    else
    {
      uint64_t v51 = v77;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v9, v77, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
      if (v47(v46, 1, v42) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v85, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v86, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v51, v42);
        char v50 = 0;
        uint64_t v49 = &demangling cache variable for type metadata for (UsoEntity_common_UserEntity.DefinedValues?, UsoEntity_common_UserEntity.DefinedValues?);
      }
      else
      {
        os_log_type_t v52 = v76;
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v76, v46, v42);
        lazy protocol witness table accessor for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues, MEMORY[0x1E4FA2B88]);
        char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v53 = *(void (**)(char *, uint64_t))(v6 + 8);
        v53(v52, v42);
        uint64_t v49 = &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?;
        outlined destroy of MediaUserStateCenter?(v85, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v86, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
        v53((char *)v51, v42);
      }
    }
    uint64_t v54 = v82;
    uint64_t v55 = v81;
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, v49);
    if (dispatch thunk of CodeGenListEntry.entryAsExpression.getter())
    {
      uint64_t v56 = dispatch thunk of CodeGenExpression.operatorAsString.getter();
      uint64_t v58 = v57;
      swift_release();
    }
    else
    {
      uint64_t v56 = 0;
      uint64_t v58 = 0;
    }
    uint64_t v59 = v84;
    (*(void (**)(char *, void, uint64_t))(v55 + 104))(v84, *MEMORY[0x1E4FA2C88], v54);
    uint64_t v60 = ListOperators.rawValue.getter();
    uint64_t v62 = v61;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v59, v54);
    if (v58)
    {
      if (v56 == v60 && v58 == v62)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_56:
        char v63 = v78 | v50;
        return v63 & 1;
      }
      char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v63 = 0;
      if (v64) {
        goto LABEL_56;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      char v63 = 0;
    }
    return v63 & 1;
  }
  uint64_t v68 = v6;
  unint64_t v69 = v9;
  unint64_t v75 = v21 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  uint64_t v74 = *(void *)(v17 + 72);
  uint64_t v22 = *MEMORY[0x1E4FA3920];
  uint64_t v72 = (void (**)(char *, unint64_t, uint64_t))(v17 + 16);
  uint64_t v73 = v22;
  uint64_t v71 = (void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v67 = v21;
  swift_bridgeObjectRetain();
  uint64_t v23 = 0;
  uint64_t v66 = v78 + 7;
  while (1)
  {
    unint64_t v24 = v75 + v74 * v23;
    uint64_t v25 = UsoIdentifier.namespace.getter();
    uint64_t v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (!v27)
    {
      swift_bridgeObjectRelease();
      (*v72)(v19, v24, v16);
      goto LABEL_7;
    }
    if (v25 == v28 && v27 == v29) {
      break;
    }
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*v72)(v19, v24, v16);
    if (v31) {
      goto LABEL_16;
    }
LABEL_7:
    ++v23;
    (*v71)(v19, v16);
    if (v23 == v70)
    {
      swift_bridgeObjectRelease_n();
      LODWORD(v78) = 0;
      goto LABEL_59;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*v72)(v19, v24, v16);
LABEL_16:
  uint64_t v32 = UsoIdentifier.value.getter();
  uint64_t v34 = v33;
  uint64_t v35 = v78[2];
  if (!v35) {
    goto LABEL_29;
  }
  uint64_t v36 = v32;
  if (v78[4] == v32 && v78[5] == v33 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
LABEL_30:
    swift_bridgeObjectRelease();
    (*v71)(v19, v16);
    swift_bridgeObjectRelease_n();
    LODWORD(v78) = 1;
LABEL_59:
    uint64_t v6 = v68;
    uint64_t v9 = v69;
    goto LABEL_33;
  }
  if (v35 == 1)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  unint64_t v38 = v66;
  uint64_t v39 = 1;
  while (1)
  {
    uint64_t v40 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (*(v38 - 1) == v36 && *v38 == v34) {
      goto LABEL_30;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_30;
    }
    v38 += 2;
    ++v39;
    if (v40 == v35) {
      goto LABEL_29;
    }
  }
  __break(1u);
  return result;
}

uint64_t WholeHomeAudioPreflightClient.isMultiLocationPlayTask(pommesTask:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v70 = a2;
  uint64_t v5 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  uint64_t v87 = *(char **)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v74 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v88 = (uint64_t)&v69 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v69 - v16;
  if (one-time initialization token for pommes != -1) {
LABEL_73:
  }
    swift_once();
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v71 = __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
  BOOL v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v86 = v9;
  uint64_t v78 = v13;
  if (v21)
  {
    uint64_t v73 = a1;
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v77 = v7;
    uint64_t v24 = v23;
    v90[0] = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x80000001C919E810, v90);
    a1 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v19, v20, "Checking %s...", v22, 0xCu);
    swift_arrayDestroy();
    uint64_t v25 = v24;
    uint64_t v7 = v77;
    uint64_t v9 = v86;
    MEMORY[0x1CB77E470](v25, -1, -1);
    MEMORY[0x1CB77E470](v22, -1, -1);
  }

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v90[3])
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v90, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for UsoTask_play_common_MediaItem();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  swift_release();
  uint64_t v26 = byte_1F236FB78;
  uint64_t v27 = UsoTask.arguments.getter();
  uint64_t v28 = 0x69746E4572657375;
  unint64_t v29 = 0xEC00000073656974;
  switch(v26)
  {
    case 1:
      unint64_t v29 = 0xE600000000000000;
      uint64_t v28 = 0x746567726174;
      break;
    case 2:
      uint64_t v28 = 0x636E657265666572;
      unint64_t v29 = 0xE900000000000065;
      break;
    case 3:
      unint64_t v29 = 0xE700000000000000;
      uint64_t v28 = 0x72656767697274;
      break;
    default:
      break;
  }
  uint64_t v30 = *(void *)(v27 + 16);
  uint64_t v77 = v7;
  if (!v30 || (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v29), (v32 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v37 = MEMORY[0x1E4FBC860];
    if (MEMORY[0x1E4FBC860] >> 62) {
      goto LABEL_77;
    }
    goto LABEL_26;
  }
  unint64_t v33 = *(void *)(*(void *)(v27 + 56) + 8 * v31);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v90[0] = MEMORY[0x1E4FBC860];
  if (!(v33 >> 62))
  {
    uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v34) {
      goto LABEL_15;
    }
LABEL_75:
    swift_bridgeObjectRelease();
    unint64_t v51 = MEMORY[0x1E4FBC860];
    goto LABEL_76;
  }
  swift_bridgeObjectRetain();
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  if (!v34) {
    goto LABEL_75;
  }
LABEL_15:
  uint64_t v73 = a1;
  uint64_t v69 = a3;
  unint64_t v76 = v17;
  type metadata accessor for UsoEntity_common_MediaItem();
  if (v34 >= 1)
  {
    for (uint64_t i = 0; i != v34; ++i)
    {
      if ((v33 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](i, v33);
      }
      else {
        swift_retain();
      }
      dispatch thunk of UsoValue.getAsEntity()();
      static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
      swift_release();
      uint64_t v36 = swift_release();
      if (v89)
      {
        MEMORY[0x1CB77CD90](v36);
        if (*(void *)((v90[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v90[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v51 = v90[0];
    uint64_t v17 = v76;
    a3 = v69;
    a1 = v73;
LABEL_76:
    swift_bridgeObjectRelease();
    v90[0] = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v51);
    swift_bridgeObjectRelease();
    uint64_t v37 = v90[0];
    uint64_t v7 = v77;
    if ((unint64_t)v90[0] >> 62)
    {
LABEL_77:
      swift_bridgeObjectRetain();
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      if (!v38) {
        goto LABEL_78;
      }
LABEL_27:
      uint64_t v73 = a1;
      uint64_t v69 = a3;
      uint64_t v84 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v87 + 56);
      unint64_t v85 = v37 & 0xC000000000000001;
      uint64_t v83 = (void (**)(uint64_t, void, uint64_t))(v87 + 104);
      unsigned int v82 = *MEMORY[0x1E4FA3638];
      uint64_t v81 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
      uint64_t v72 = (void (**)(char *, uint64_t, uint64_t))(v87 + 32);
      unint64_t v75 = (void (**)(uint64_t, uint64_t))(v87 + 8);
      unint64_t v76 = v17;
      a3 = 4;
      uint64_t v79 = v38;
      uint64_t v80 = v37;
      while (1)
      {
        uint64_t v39 = a3 - 4;
        if (v85)
        {
          uint64_t v13 = (char *)MEMORY[0x1CB77D510](a3 - 4, v37);
          uint64_t v40 = a3 - 3;
          if (__OFADD__(v39, 1)) {
            goto LABEL_72;
          }
        }
        else
        {
          uint64_t v13 = *(char **)(v37 + 8 * a3);
          swift_retain();
          uint64_t v40 = a3 - 3;
          if (__OFADD__(v39, 1))
          {
LABEL_72:
            __break(1u);
            goto LABEL_73;
          }
        }
        uint64_t v41 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
        uint64_t v87 = v13;
        if (v41)
        {
          dispatch thunk of UsoEntity_common_ReferenceType.definedValue.getter();
          swift_release();
          uint64_t v42 = (void (**)(uint64_t, void, uint64_t, uint64_t))v84;
        }
        else
        {
          uint64_t v42 = (void (**)(uint64_t, void, uint64_t, uint64_t))v84;
          (*v84)(v17, 1, 1, v5);
        }
        uint64_t v43 = v88;
        (*v83)(v88, v82, v5);
        (*v42)(v43, 0, 1, v5);
        uint64_t v44 = (uint64_t)&v9[*(int *)(v7 + 48)];
        outlined init with copy of MediaUserStateCenter?((uint64_t)v17, (uint64_t)v9, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        outlined init with copy of MediaUserStateCenter?(v43, v44, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        a1 = (uint64_t)v9;
        uint64_t v45 = *v81;
        if ((*v81)(a1, 1, v5) == 1) {
          break;
        }
        uint64_t v46 = (uint64_t)v78;
        outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v78, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        if (v45(v44, 1, v5) == 1)
        {
          (*v75)(v46, v5);
          uint64_t v17 = v76;
LABEL_29:
          uint64_t v9 = v86;
          outlined destroy of MediaUserStateCenter?((uint64_t)v86, &demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
          outlined destroy of MediaUserStateCenter?(v88, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
          swift_release();
          goto LABEL_30;
        }
        Swift::String v47 = v74;
        (*v72)(v74, v44, v5);
        lazy protocol witness table accessor for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues, MEMORY[0x1E4FA3640]);
        char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v49 = *v75;
        (*v75)(v46, v5);
        char v50 = v47;
        uint64_t v7 = v77;
        v49((uint64_t)v50, v5);
        outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v88, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        uint64_t v17 = v76;
        outlined destroy of MediaUserStateCenter?((uint64_t)v76, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        swift_release();
        uint64_t v9 = (char *)a1;
        if (v48) {
          goto LABEL_46;
        }
LABEL_30:
        ++a3;
        uint64_t v37 = v80;
        if (v40 == v79) {
          goto LABEL_78;
        }
      }
      if (v45(v44, 1, v5) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v86, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v88, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        swift_release();
LABEL_46:
        swift_bridgeObjectRelease_n();
        uint64_t v52 = byte_1F236FBA0;
        uint64_t v53 = 0xEC00000073656974;
        uint64_t v54 = UsoTask.arguments.getter();
        unint64_t v33 = v69;
        uint64_t v55 = 0x69746E4572657375;
        switch(v52)
        {
          case 1:
            uint64_t v53 = 0xE600000000000000;
            uint64_t v55 = 0x746567726174;
            break;
          case 2:
            uint64_t v55 = 0x636E657265666572;
            uint64_t v53 = 0xE900000000000065;
            break;
          case 3:
            uint64_t v53 = 0xE700000000000000;
            uint64_t v55 = 0x72656767697274;
            break;
          default:
            break;
        }
        if (*(void *)(v54 + 16))
        {
          unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v55, v53);
          if (v57)
          {
            unint64_t v29 = *(void *)(*(void *)(v54 + 56) + 8 * v56);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a3 = MEMORY[0x1E4FBC860];
            v90[0] = MEMORY[0x1E4FBC860];
            if (v29 >> 62) {
              goto LABEL_81;
            }
            uint64_t v58 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v58) {
              goto LABEL_54;
            }
LABEL_82:
            swift_bridgeObjectRelease();
            unint64_t v68 = MEMORY[0x1E4FBC860];
            goto LABEL_83;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v61 = MEMORY[0x1E4FBC860];
        if (MEMORY[0x1E4FBC860] >> 62) {
          goto LABEL_84;
        }
LABEL_65:
        uint64_t v62 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_66;
      }
      goto LABEL_29;
    }
LABEL_26:
    uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v38)
    {
LABEL_78:
      swift_bridgeObjectRelease_n();
      return 0;
    }
    goto LABEL_27;
  }
  __break(1u);
LABEL_81:
  swift_bridgeObjectRetain();
  uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
  if (!v58) {
    goto LABEL_82;
  }
LABEL_54:
  type metadata accessor for UsoEntity_common_UserEntity();
  if (v58 < 1)
  {
    __break(1u);
    JUMPOUT(0x1C904B39CLL);
  }
  for (uint64_t j = 0; j != v58; ++j)
  {
    if ((v29 & 0xC000000000000001) != 0) {
      MEMORY[0x1CB77D510](j, v29);
    }
    else {
      swift_retain();
    }
    dispatch thunk of UsoValue.getAsEntity()();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v60 = swift_release();
    if (v89)
    {
      MEMORY[0x1CB77CD90](v60);
      if (*(void *)((v90[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v90[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v68 = v90[0];
LABEL_83:
  swift_bridgeObjectRelease();
  v90[0] = a3;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v68);
  swift_bridgeObjectRelease();
  uint64_t v61 = v90[0];
  if (!((unint64_t)v90[0] >> 62)) {
    goto LABEL_65;
  }
LABEL_84:
  swift_bridgeObjectRetain();
  uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_66:
  swift_bridgeObjectRelease();
  if (v62 < 2) {
    return 0;
  }
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  char v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    v90[0] = v66;
    *(_DWORD *)uint64_t v65 = 136315394;
    uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x80000001C919E810, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v65 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v33, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v63, v64, "Task passed test %s:\n%s", (uint8_t *)v65, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v66, -1, -1);
    MEMORY[0x1CB77E470](v65, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  return 1;
}

uint64_t WholeHomeAudioPreflightClient.deinit()
{
  return v0;
}

uint64_t WholeHomeAudioPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t WholeHomeAudioPreflightClient.init()()
{
  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance WholeHomeAudioPreflightClient()
{
  return 0xD00000000000001DLL;
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, void *a2)
{
  if (a1 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      uint64_t v6 = 4;
      do
      {
        uint64_t v7 = v6 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = MEMORY[0x1CB77D510](v6 - 4, a1);
          uint64_t v9 = v6 - 3;
          if (__OFADD__(v7, 1)) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(a1 + 8 * v6);
          swift_retain();
          uint64_t v9 = v6 - 3;
          if (__OFADD__(v7, 1))
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        uint64_t v14 = v8;
        char v10 = closure #1 in WholeHomeAudioPreflightClient.isUpdateLocationTask(pommesTask:)(&v14, a2);
        if (v2)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return v12 & 1;
        }
        char v11 = v10;
        swift_release();
        if (v11)
        {
          swift_bridgeObjectRelease();
          char v12 = 1;
          return v12 & 1;
        }
        ++v6;
      }
      while (v9 != v5);
    }
  }
  swift_bridgeObjectRelease();
  char v12 = 0;
  return v12 & 1;
}

uint64_t lazy protocol witness table accessor for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t sub_1C904B5A4()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t partial apply for implicit closure #8 in implicit closure #7 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PommesUsoTask) -> (@unowned Bool)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(v2 + 16))(*a1, a1[1], a1[2]);
  *a2 = result & 1;
  return result;
}

uint64_t type metadata accessor for WholeHomeAudioPreflightClient()
{
  return self;
}

uint64_t method lookup function for WholeHomeAudioPreflightClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for WholeHomeAudioPreflightClient);
}

uint64_t dispatch thunk of WholeHomeAudioPreflightClient.isPlayEverywhereTask(pommesTask:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of WholeHomeAudioPreflightClient.isPlayMusicFromTask(pommesTask:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of WholeHomeAudioPreflightClient.isUpdateLocationTask(pommesTask:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of WholeHomeAudioPreflightClient.isMultiLocationPlayTask(pommesTask:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of WholeHomeAudioPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of WholeHomeAudioPreflightClient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

const char *CommonAudio.beatsOne.unsafeMutableAddressor()
{
  return "Beats 1";
}

uint64_t static CommonAudio.beatsOne.getter()
{
  return 0x31207374616542;
}

const char *CommonAudio.disambiguationRole.unsafeMutableAddressor()
{
  return "disambiguation";
}

uint64_t static CommonAudio.disambiguationRole.getter()
{
  return 0x6769626D61736964;
}

unint64_t CommonAudio.Verb.rawValue.getter(char a1)
{
  unint64_t result = 2036427888;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6269726373627573;
      break;
    case 2:
      unint64_t result = 0x776F6C6C6F66;
      break;
    case 3:
      unint64_t result = 1701538156;
      break;
    case 4:
      unint64_t result = 0x656C6666756873;
      break;
    case 5:
      unint64_t result = 0x746165706572;
      break;
    case 6:
      unint64_t result = 0x656D75736572;
      break;
    case 7:
      unint64_t result = 0x657461647075;
      break;
    case 8:
      unint64_t result = 0x736972616D6D7573;
      break;
    case 9:
      unint64_t result = 0x7472617473;
      break;
    case 10:
      unint64_t result = 0x656B696C6E75;
      break;
    case 11:
      unint64_t result = 0x74736575716572;
      break;
    case 12:
      unint64_t result = 0x6E696D7265746564;
      break;
    case 13:
      unint64_t result = 0xD000000000000012;
      break;
    case 14:
      unint64_t result = 6579297;
      break;
    case 15:
      unint64_t result = 0x656C62616E65;
      break;
    case 16:
      unint64_t result = 0x656C6261736964;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Verb(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Verb(a1, a2, a3, a4, (uint64_t (*)(uint64_t))CommonAudio.Verb.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Verb(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Verb(a1, a2, (void (*)(uint64_t))CommonAudio.Verb.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Verb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(void))CommonAudio.Verb.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Verb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(uint64_t))CommonAudio.Verb.rawValue.getter);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Verb@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized CommonAudio.Verb.init(rawValue:)();
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Verb@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = CommonAudio.Verb.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

SiriInformationSearch::CommonAudio::UsoEntity_optional __swiftcall CommonAudio.UsoEntity.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of CommonAudio.UsoEntity.init(rawValue:);
  return (SiriInformationSearch::CommonAudio::UsoEntity_optional)CommonAudio.UsoEntity.init(rawValue:)(rawValue, v1);
}

uint64_t CommonAudio.UsoEntity.rawValue.getter(char a1)
{
  if (a1) {
    return 0xD000000000000010;
  }
  else {
    return 0x6E456F4E5F6F7375;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.UsoEntity(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    unint64_t v3 = 0xD000000000000010;
  }
  else {
    unint64_t v3 = 0x6E456F4E5F6F7375;
  }
  if (v2) {
    unint64_t v4 = 0xEC00000079746974;
  }
  else {
    unint64_t v4 = 0x80000001C919BBA0;
  }
  if (*a2) {
    unint64_t v5 = 0xD000000000000010;
  }
  else {
    unint64_t v5 = 0x6E456F4E5F6F7375;
  }
  if (*a2) {
    unint64_t v6 = 0x80000001C919BBA0;
  }
  else {
    unint64_t v6 = 0xEC00000079746974;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.UsoEntity()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.UsoEntity()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.UsoEntity()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.UsoEntity@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of CommonAudio.UsoEntity.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.UsoEntity(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.UsoEntity(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x6E456F4E5F6F7375;
  if (*v1) {
    unint64_t v2 = 0xD000000000000010;
  }
  unint64_t v3 = 0x80000001C919BBA0;
  if (!*v1) {
    unint64_t v3 = 0xEC00000079746974;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t CommonAudio.Attribute.rawValue.getter(char a1)
{
  unint64_t result = 0x697472416D6F7266;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x676E6F536D6F7266;
      break;
    case 2:
      unint64_t result = 0x75626C416D6F7266;
      break;
    case 3:
      unint64_t result = 0x7478654E79616C70;
      break;
    case 4:
      unint64_t result = 0x776F4E79616C70;
      break;
    case 5:
      unint64_t result = 0x7473614C79616C70;
      break;
    case 6:
      unint64_t result = 0x7974696E69666661;
      break;
    case 7:
      unint64_t result = 0x6E656D6D6F636572;
      break;
    case 8:
      unint64_t result = 0x7265766F63736964;
      break;
    case 9:
      unint64_t result = 0xD000000000000018;
      break;
    case 10:
      unint64_t result = 1954047342;
      break;
    case 11:
      unint64_t result = 0x64656D616ELL;
      break;
    case 12:
      unint64_t result = 0x73756F6976657270;
      break;
    case 13:
      unint64_t result = 0x44657361656C6572;
      break;
    case 14:
      unint64_t result = 0x6E6F697461727564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Attribute(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Verb(a1, a2, a3, a4, (uint64_t (*)(uint64_t))CommonAudio.Attribute.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Attribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Verb(a1, a2, (void (*)(uint64_t))CommonAudio.Attribute.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Attribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(void))CommonAudio.Attribute.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Attribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(uint64_t))CommonAudio.Attribute.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Attribute@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CommonAudio.Attribute.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Attribute@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = CommonAudio.Attribute.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

SiriInformationSearch::CommonAudio::Modifier_optional __swiftcall CommonAudio.Modifier.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of CommonAudio.Modifier.init(rawValue:);
  return (SiriInformationSearch::CommonAudio::Modifier_optional)CommonAudio.UsoEntity.init(rawValue:)(rawValue, v1);
}

uint64_t CommonAudio.Modifier.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6E65726566666964;
  }
  else {
    return 0x664F65726F6DLL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Modifier(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    uint64_t v3 = 0x6E65726566666964;
  }
  else {
    uint64_t v3 = 0x664F65726F6DLL;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xED00006E61685474;
  }
  if (*a2) {
    uint64_t v5 = 0x6E65726566666964;
  }
  else {
    uint64_t v5 = 0x664F65726F6DLL;
  }
  if (*a2) {
    unint64_t v6 = 0xED00006E61685474;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Modifier()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Modifier()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Modifier()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Modifier@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of CommonAudio.Modifier.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.UsoEntity(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Modifier(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x664F65726F6DLL;
  if (*v1) {
    uint64_t v2 = 0x6E65726566666964;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xED00006E61685474;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t CommonAudio.Noun.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x7972617262696CLL;
  }
  if (a1 == 1) {
    return 0x317374616562;
  }
  return 0xD000000000000011;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Noun(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0x317374616562;
  unint64_t v5 = 0x80000001C919C250;
  if (v2 != 1)
  {
    unint64_t v4 = 0xD000000000000011;
    unint64_t v3 = 0x80000001C919C250;
  }
  if (*a1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0x7972617262696CLL;
  }
  if (v2) {
    unint64_t v7 = v3;
  }
  else {
    unint64_t v7 = 0xE700000000000000;
  }
  unint64_t v8 = 0x317374616562;
  if (*a2 == 1) {
    unint64_t v5 = 0xE600000000000000;
  }
  else {
    unint64_t v8 = 0xD000000000000011;
  }
  if (*a2) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0x7972617262696CLL;
  }
  if (*a2) {
    unint64_t v10 = v5;
  }
  else {
    unint64_t v10 = 0xE700000000000000;
  }
  if (v6 == v9 && v7 == v10) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Noun()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Noun()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Noun()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Noun@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CommonAudio.Noun.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Noun(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xE600000000000000;
  unint64_t v5 = 0x317374616562;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000011;
    unint64_t v4 = 0x80000001C919C250;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x7972617262696CLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

SiriInformationSearch::CommonAudio::RadioType_optional __swiftcall CommonAudio.RadioType.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of CommonAudio.RadioType.init(rawValue:);
  return (SiriInformationSearch::CommonAudio::RadioType_optional)CommonAudio.UsoEntity.init(rawValue:)(rawValue, v1);
}

uint64_t CommonAudio.RadioType.rawValue.getter(char a1)
{
  if (a1) {
    return 28001;
  }
  else {
    return 28006;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.RadioType(unsigned char *a1, unsigned char *a2)
{
  if (*a1) {
    uint64_t v2 = 28001;
  }
  else {
    uint64_t v2 = 28006;
  }
  if (*a2) {
    uint64_t v3 = 28001;
  }
  else {
    uint64_t v3 = 28006;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.RadioType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.RadioType()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.RadioType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.RadioType@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of CommonAudio.RadioType.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.UsoEntity(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.RadioType(uint64_t *a1@<X8>)
{
  uint64_t v2 = 28006;
  if (*v1) {
    uint64_t v2 = 28001;
  }
  *a1 = v2;
  a1[1] = 0xE200000000000000;
}

uint64_t CommonAudio.Confirmation.rawValue.getter(char a1)
{
  uint64_t result = 7562617;
  switch(a1)
  {
    case 1:
      uint64_t result = 28526;
      break;
    case 2:
      uint64_t result = 0x6C65636E6163;
      break;
    case 3:
      uint64_t result = 0x6F666E4965726F6DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Confirmation(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = 7562617;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE300000000000000;
  uint64_t v5 = 7562617;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0xE200000000000000;
      uint64_t v5 = 28526;
      break;
    case 2:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v5 = 0x6C65636E6163;
      break;
    case 3:
      unint64_t v4 = 0xE800000000000000;
      uint64_t v5 = 0x6F666E4965726F6DLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(*a2)
  {
    case 1:
      unint64_t v6 = 0xE200000000000000;
      if (v5 == 28526) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x6C65636E6163;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE800000000000000;
      if (v5 == 0x6F666E4965726F6DLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Confirmation()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Confirmation()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Confirmation()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Confirmation@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CommonAudio.Confirmation.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Confirmation(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 7562617;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 28526;
      goto LABEL_3;
    case 2:
      *a1 = 0x6C65636E6163;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0x6F666E4965726F6DLL;
      a1[1] = 0xE800000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t one-time initialization function for mappingDecade()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for mappingDecade);
  static CommonAudio.Decade.mappingDecade = result;
  return result;
}

uint64_t *CommonAudio.Decade.mappingDecade.unsafeMutableAddressor()
{
  if (one-time initialization token for mappingDecade != -1) {
    swift_once();
  }
  return &static CommonAudio.Decade.mappingDecade;
}

uint64_t static CommonAudio.Decade.mappingDecade.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for mappingDecade);
}

unint64_t one-time initialization function for mappingToStartYear()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for mappingToStartYear);
  static CommonAudio.Decade.mappingToStartYear = result;
  return result;
}

uint64_t *CommonAudio.Decade.mappingToStartYear.unsafeMutableAddressor()
{
  if (one-time initialization token for mappingToStartYear != -1) {
    swift_once();
  }
  return &static CommonAudio.Decade.mappingToStartYear;
}

uint64_t static CommonAudio.Decade.mappingToStartYear.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for mappingToStartYear);
}

uint64_t CommonAudio.Decade.releaseDate.getter(uint64_t a1)
{
  if (one-time initialization token for mappingToStartYear != -1) {
    swift_once();
  }
  uint64_t v2 = static CommonAudio.Decade.mappingToStartYear;
  if (!*(void *)(static CommonAudio.Decade.mappingToStartYear + 16)) {
    return 0;
  }
  uint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v56 = *(uint64_t **)(*(void *)(v2 + 56) + 8 * v3);
  uint64_t v39 = type metadata accessor for DateComponents();
  uint64_t v40 = &v38;
  uint64_t v38 = *(void *)(v39 - 8);
  uint64_t v55 = *(uint64_t **)(v38 + 64);
  MEMORY[0x1F4188790](v39);
  char v57 = (char *)((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = (char *)((char *)&v38 - v57);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  uint64_t v52 = &v38;
  uint64_t v53 = *(void *)(*(void *)(v6 - 8) + 64);
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v54 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v8 = (char *)&v38 - v54;
  uint64_t v9 = type metadata accessor for Calendar.Identifier();
  unint64_t v10 = *(void **)(v9 - 8);
  uint64_t v43 = v10[8];
  MEMORY[0x1F4188790](v9);
  unint64_t v51 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  char v12 = (char *)&v38 - v51;
  unsigned int v50 = *MEMORY[0x1E4F27B28];
  uint64_t v49 = (void (*)(char *))v10[13];
  v49((char *)&v38 - v51);
  Calendar.init(identifier:)();
  char v48 = (void (*)(char *, uint64_t))v10[1];
  v48(v12, v9);
  uint64_t v46 = type metadata accessor for Calendar();
  uint64_t v13 = *(void *)(v46 - 8);
  uint64_t v45 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
  uint64_t v47 = v13 + 56;
  v45(v8, 0, 1, v46);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v15 = *(void *)(*(void *)(v14 - 8) + 64);
  MEMORY[0x1F4188790](v14 - 8);
  unint64_t v44 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v16 = (char *)&v38 - v44;
  uint64_t v17 = type metadata accessor for TimeZone();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v42 = v18 + 56;
  v41(v16, 1, 1, v17);
  BOOL v19 = v56;
  uint64_t v20 = DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  uint64_t v52 = &v38;
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  char v57 = (char *)((char *)&v38 - v57);
  uint64_t v55 = &v38;
  uint64_t v22 = MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v38 - v54;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v38 - v51;
  ((void (*)(char *, void, uint64_t))v49)((char *)&v38 - v51, v50, v9);
  Calendar.init(identifier:)();
  v48(v24, v9);
  uint64_t v25 = ((uint64_t (*)(char *, void, uint64_t, uint64_t))v45)(v23, 0, 1, v46);
  MEMORY[0x1F4188790](v25);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v41)((char *)&v38 - v44, 1, 1, v17);
  if (!__OFADD__(v19, 9))
  {
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    type metadata accessor for INDateComponentsRange();
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    unint64_t v56 = &v38;
    uint64_t v28 = *(void *)(*(void *)(v27 - 8) + 64);
    MEMORY[0x1F4188790](v27 - 8);
    unint64_t v29 = (char *)&v38 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v30 = v38;
    uint64_t v31 = v39;
    char v32 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
    v32(v29, v58, v39);
    unint64_t v33 = *(uint64_t (**)(char *, void, uint64_t, uint64_t))(v30 + 56);
    uint64_t v34 = v33(v29, 0, 1, v31);
    uint64_t v55 = &v38;
    MEMORY[0x1F4188790](v34);
    uint64_t v35 = v57;
    v32(v29, v57, v31);
    v33(v29, 0, 1, v31);
    id v36 = INDateComponentsRange.__allocating_init(start:end:)((uint64_t)v29, (uint64_t)v29);
    uint64_t v37 = *(void (**)(char *, uint64_t))(v30 + 8);
    v37(v35, v31);
    v37(v58, v31);
    return (uint64_t)v36;
  }
  __break(1u);
  return result;
}

id INDateComponentsRange.__allocating_init(start:end:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DateComponents();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  Class isa = 0;
  if (v6(a1, 1, v4) != 1)
  {
    Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  if (v6(a2, 1, v4) == 1)
  {
    Class v8 = 0;
  }
  else
  {
    Class v8 = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  }
  id v9 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithStartDateComponents_endDateComponents_, isa, v8);

  return v9;
}

uint64_t CommonAudio.Decade.rawValue.getter(char a1)
{
  return *(void *)&a1920s_2[8 * a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Decade(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = CommonAudio.Decade.rawValue.getter(*a1);
  if (v3 == CommonAudio.Decade.rawValue.getter(v2)) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Decade()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  CommonAudio.Decade.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Decade()
{
  CommonAudio.Decade.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Decade()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  CommonAudio.Decade.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Decade@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CommonAudio.Decade.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Decade@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CommonAudio.Decade.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = 0xE600000000000000;
  return result;
}

unint64_t one-time initialization function for mappingMediaSortOrder()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for mappingMediaSortOrder);
  static CommonAudio.Sort.mappingMediaSortOrder = result;
  return result;
}

uint64_t *CommonAudio.Sort.mappingMediaSortOrder.unsafeMutableAddressor()
{
  if (one-time initialization token for mappingMediaSortOrder != -1) {
    swift_once();
  }
  return &static CommonAudio.Sort.mappingMediaSortOrder;
}

uint64_t static CommonAudio.Sort.mappingMediaSortOrder.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for mappingMediaSortOrder);
}

uint64_t CommonAudio.Sort.sortOrder.getter(unsigned __int8 a1)
{
  if (one-time initialization token for mappingMediaSortOrder != -1) {
    swift_once();
  }
  uint64_t v2 = static CommonAudio.Sort.mappingMediaSortOrder;
  if (*(void *)(static CommonAudio.Sort.mappingMediaSortOrder + 16))
  {
    unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v4) {
      return *(void *)(*(void *)(v2 + 56) + 8 * v3);
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v13 = v10;
    *(_DWORD *)id v9 = 136315138;
    uint64_t v11 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v7, v8, "CommonAudio#Sort#sortOrder recieved unregistered decade: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v10, -1, -1);
    MEMORY[0x1CB77E470](v9, -1, -1);
  }

  return 0;
}

uint64_t CommonAudio.Sort.rawValue.getter(char a1)
{
  uint64_t result = 0x72616C75706F70;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x616C75706F706E75;
      break;
    case 2:
      uint64_t result = 1953719650;
      break;
    case 3:
      uint64_t result = 0x7473726F77;
      break;
    case 4:
      uint64_t result = 0x74736577656ELL;
      break;
    case 5:
      uint64_t result = 0x747365646C6FLL;
      break;
    case 6:
      uint64_t result = 0x74736574746F68;
      break;
    case 7:
      uint64_t result = 0x6572636F6964656DLL;
      break;
    case 8:
      uint64_t result = 0x7473657461657267;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Sort(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Verb(a1, a2, a3, a4, (uint64_t (*)(uint64_t))CommonAudio.Sort.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Sort(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Verb(a1, a2, (void (*)(uint64_t))CommonAudio.Sort.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Sort(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(void))CommonAudio.Sort.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Sort(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(uint64_t))CommonAudio.Sort.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Sort@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized CommonAudio.Sort.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Sort@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CommonAudio.Sort.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL CommonAudio.Reference.mediaReference.getter(char a1)
{
  return (a1 & 1) == 0;
}

SiriInformationSearch::CommonAudio::Reference_optional __swiftcall CommonAudio.Reference.init(rawValue:)(Swift::String rawValue)
{
  v1._rawValue = &outlined read-only object #0 of CommonAudio.Reference.init(rawValue:);
  return (SiriInformationSearch::CommonAudio::Reference_optional)CommonAudio.UsoEntity.init(rawValue:)(rawValue, v1);
}

uint64_t CommonAudio.UsoEntity.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 == 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = 2;
  }
  if (v5) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t CommonAudio.Reference.rawValue.getter(char a1)
{
  if (a1) {
    return 0x696E696665646E69;
  }
  else {
    return 0x6574696E69666564;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Reference(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    uint64_t v3 = 0x696E696665646E69;
  }
  else {
    uint64_t v3 = 0x6574696E69666564;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xEA00000000006574;
  }
  if (*a2) {
    uint64_t v5 = 0x696E696665646E69;
  }
  else {
    uint64_t v5 = 0x6574696E69666564;
  }
  if (*a2) {
    unint64_t v6 = 0xEA00000000006574;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Reference()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Reference()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Reference()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Reference@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of CommonAudio.Reference.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.UsoEntity(v2, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.UsoEntity@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Reference(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6574696E69666564;
  if (*v1) {
    uint64_t v2 = 0x696E696665646E69;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xEA00000000006574;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t one-time initialization function for mappingMediaType()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UsoEntity_common_MediaItemType.DefinedValues, CommonAudio.MediaType?)>);
  uint64_t v0 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues, CommonAudio.MediaType?))
             - 8);
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C9196DB0;
  unint64_t v4 = v3 + v2;
  uint64_t v5 = v0[14];
  uint64_t v6 = *MEMORY[0x1E4FA3578];
  uint64_t v7 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  char v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104);
  v8(v4, v6, v7);
  *(unsigned char *)(v4 + v5) = 0;
  uint64_t v9 = v0[14];
  v8(v4 + v1, *MEMORY[0x1E4FA3598], v7);
  *(unsigned char *)(v4 + v1 + v9) = 1;
  uint64_t v10 = v0[14];
  v8(v4 + 2 * v1, *MEMORY[0x1E4FA3590], v7);
  *(unsigned char *)(v4 + 2 * v1 + v10) = 2;
  uint64_t v11 = v0[14];
  v8(v4 + 3 * v1, *MEMORY[0x1E4FA35E8], v7);
  *(unsigned char *)(v4 + 3 * v1 + v11) = 3;
  uint64_t v12 = v0[14];
  v8(v4 + 4 * v1, *MEMORY[0x1E4FA35E0], v7);
  *(unsigned char *)(v4 + 4 * v1 + v12) = 4;
  uint64_t v13 = v0[14];
  v8(v4 + 5 * v1, *MEMORY[0x1E4FA3540], v7);
  *(unsigned char *)(v4 + 5 * v1 + v13) = 5;
  uint64_t v14 = v0[14];
  v8(v4 + 6 * v1, *MEMORY[0x1E4FA3508], v7);
  *(unsigned char *)(v4 + 6 * v1 + v14) = 6;
  uint64_t v15 = v0[14];
  v8(v4 + 7 * v1, *MEMORY[0x1E4FA3568], v7);
  *(unsigned char *)(v4 + 7 * v1 + v15) = 7;
  uint64_t v16 = v0[14];
  v8(v4 + 8 * v1, *MEMORY[0x1E4FA35C8], v7);
  *(unsigned char *)(v4 + 8 * v1 + v16) = 8;
  uint64_t v17 = v0[14];
  v8(v4 + 9 * v1, *MEMORY[0x1E4FA35D8], v7);
  *(unsigned char *)(v4 + 9 * v1 + v17) = 9;
  uint64_t v18 = v0[14];
  v8(v4 + 10 * v1, *MEMORY[0x1E4FA3510], v7);
  *(unsigned char *)(v4 + 10 * v1 + v18) = 10;
  uint64_t v19 = v0[14];
  v8(v4 + 11 * v1, *MEMORY[0x1E4FA3588], v7);
  *(unsigned char *)(v4 + 11 * v1 + v19) = 11;
  uint64_t v20 = v0[14];
  v8(v4 + 12 * v1, *MEMORY[0x1E4FA3558], v7);
  *(unsigned char *)(v4 + 12 * v1 + v20) = 12;
  uint64_t v21 = v0[14];
  v8(v4 + 13 * v1, *MEMORY[0x1E4FA35B0], v7);
  *(unsigned char *)(v4 + 13 * v1 + v21) = 13;
  uint64_t v22 = v0[14];
  v8(v4 + 14 * v1, *MEMORY[0x1E4FA3570], v7);
  *(unsigned char *)(v4 + 14 * v1 + v22) = 14;
  uint64_t v23 = v0[14];
  v8(v4 + 15 * v1, *MEMORY[0x1E4FA35F0], v7);
  *(unsigned char *)(v4 + 15 * v1 + v23) = 15;
  uint64_t v24 = v0[14];
  v8(v4 + 16 * v1, *MEMORY[0x1E4FA3550], v7);
  *(unsigned char *)(v4 + 16 * v1 + v24) = 16;
  uint64_t v25 = v0[14];
  v8(v4 + 17 * v1, *MEMORY[0x1E4FA3560], v7);
  *(unsigned char *)(v4 + 17 * v1 + v25) = 17;
  uint64_t v26 = v0[14];
  v8(v4 + 18 * v1, *MEMORY[0x1E4FA3520], v7);
  *(unsigned char *)(v4 + 18 * v1 + v26) = 18;
  uint64_t v27 = v0[14];
  v8(v4 + 19 * v1, *MEMORY[0x1E4FA3548], v7);
  *(unsigned char *)(v4 + 19 * v1 + v27) = 19;
  uint64_t v28 = v0[14];
  v8(v4 + 20 * v1, *MEMORY[0x1E4FA35A0], v7);
  *(unsigned char *)(v4 + 20 * v1 + v28) = 20;
  uint64_t v29 = v0[14];
  v8(v4 + 21 * v1, *MEMORY[0x1E4FA35C0], v7);
  *(unsigned char *)(v4 + 21 * v1 + v29) = 21;
  uint64_t v30 = v0[14];
  v8(v4 + 22 * v1, *MEMORY[0x1E4FA3530], v7);
  *(unsigned char *)(v4 + 22 * v1 + v30) = 22;
  uint64_t v31 = v0[14];
  v8(v4 + 23 * v1, *MEMORY[0x1E4FA35A8], v7);
  *(unsigned char *)(v4 + 23 * v1 + v31) = 23;
  uint64_t v32 = v0[14];
  v8(v4 + 24 * v1, *MEMORY[0x1E4FA3518], v7);
  *(unsigned char *)(v4 + 24 * v1 + v32) = 24;
  uint64_t v33 = v0[14];
  v8(v4 + 25 * v1, *MEMORY[0x1E4FA3580], v7);
  *(unsigned char *)(v4 + 25 * v1 + v33) = 25;
  uint64_t v34 = v0[14];
  v8(v4 + 26 * v1, *MEMORY[0x1E4FA3500], v7);
  *(unsigned char *)(v4 + 26 * v1 + v34) = 26;
  uint64_t v35 = v0[14];
  v8(v4 + 27 * v1, *MEMORY[0x1E4FA3528], v7);
  *(unsigned char *)(v4 + 27 * v1 + v35) = 27;
  uint64_t v36 = v0[14];
  v8(v4 + 28 * v1, *MEMORY[0x1E4FA35B8], v7);
  *(unsigned char *)(v4 + 28 * v1 + v36) = 28;
  uint64_t v37 = v0[14];
  v8(v4 + 29 * v1, *MEMORY[0x1E4FA35D0], v7);
  *(unsigned char *)(v4 + 29 * v1 + v37) = 28;
  uint64_t v38 = v0[14];
  v8(v4 + 30 * v1, *MEMORY[0x1E4FA3538], v7);
  *(unsigned char *)(v4 + 30 * v1 + v38) = 28;
  unint64_t v39 = v4 + 31 * v1;
  uint64_t v40 = v0[14];
  v8(v39, *MEMORY[0x1E4FA35F8], v7);
  *(unsigned char *)(v39 + v40) = 28;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v3);
  static CommonAudio.MediaType.mappingMediaType = result;
  return result;
}

uint64_t *CommonAudio.MediaType.mappingMediaType.unsafeMutableAddressor()
{
  if (one-time initialization token for mappingMediaType != -1) {
    swift_once();
  }
  return &static CommonAudio.MediaType.mappingMediaType;
}

uint64_t static CommonAudio.MediaType.mappingMediaType.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for mappingMediaType);
}

unint64_t one-time initialization function for mappingMediaItemType()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for mappingMediaItemType);
  static CommonAudio.MediaType.mappingMediaItemType = result;
  return result;
}

uint64_t *CommonAudio.MediaType.mappingMediaItemType.unsafeMutableAddressor()
{
  if (one-time initialization token for mappingMediaItemType != -1) {
    swift_once();
  }
  return &static CommonAudio.MediaType.mappingMediaItemType;
}

uint64_t static CommonAudio.MediaType.mappingMediaItemType.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for mappingMediaItemType);
}

unint64_t one-time initialization function for mappingStationMediaItemType()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for mappingStationMediaItemType);
  static CommonAudio.MediaType.mappingStationMediaItemType = result;
  return result;
}

uint64_t *CommonAudio.MediaType.mappingStationMediaItemType.unsafeMutableAddressor()
{
  if (one-time initialization token for mappingStationMediaItemType != -1) {
    swift_once();
  }
  return &static CommonAudio.MediaType.mappingStationMediaItemType;
}

uint64_t static CommonAudio.MediaType.mappingStationMediaItemType.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for mappingStationMediaItemType);
}

uint64_t static CommonAudio.Decade.mappingDecade.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

Swift::Bool __swiftcall CommonAudio.MediaType.isStation()()
{
  return (v0 < 0x17u) & (0x440010u >> v0);
}

uint64_t CommonAudio.MediaType.stationMediaItemType.getter(uint64_t a1)
{
  return CommonAudio.MediaType.stationMediaItemType.getter(a1, &one-time initialization token for mappingStationMediaItemType, &static CommonAudio.MediaType.mappingStationMediaItemType);
}

uint64_t CommonAudio.MediaType.mediaItemType.getter(uint64_t a1)
{
  return CommonAudio.MediaType.stationMediaItemType.getter(a1, &one-time initialization token for mappingMediaItemType, &static CommonAudio.MediaType.mappingMediaItemType);
}

uint64_t CommonAudio.MediaType.stationMediaItemType.getter(uint64_t a1, void *a2, uint64_t *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v5 = *a3;
  if (*(void *)(v5 + 16) && (uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0)) {
    return *(void *)(*(void *)(v5 + 56) + 8 * v6);
  }
  else {
    return 0;
  }
}

unint64_t CommonAudio.MediaType.rawValue.getter(char a1)
{
  unint64_t result = 0x65726E6567;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x747369747261;
      break;
    case 2:
      unint64_t result = 0x6F65646976;
      break;
    case 3:
      unint64_t result = 0x7473696C79616C70;
      break;
    case 4:
      unint64_t result = 0x6E6F6974617473;
      break;
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0x6F68536F69646172;
      break;
    case 7:
      unint64_t result = 1735290739;
      break;
    case 8:
      unint64_t result = 0x5573656E755469;
      break;
    case 9:
      unint64_t result = 0x74736163646F70;
      break;
    case 10:
      unint64_t result = 0x646956636973756DLL;
      break;
    case 11:
      unint64_t result = 0x636973756DLL;
      break;
    case 12:
      unint64_t result = 1937204590;
      break;
    case 13:
      unint64_t result = 0x776F68537674;
      break;
    case 14:
      unint64_t result = 0x6D75626C61;
      break;
    case 15:
      unint64_t result = 0x656E6F74676E6972;
      break;
    case 16:
      unint64_t result = 28780;
      break;
    case 17:
      unint64_t result = 2003789939;
      break;
    case 18:
      unint64_t result = 0x6174536F69646172;
      break;
    case 19:
      unint64_t result = 28773;
      break;
    case 20:
      unint64_t result = 0x656C676E6973;
      break;
    case 21:
      unint64_t result = 0x65646F73697065;
      break;
    case 22:
      unint64_t result = 0x5374736163646F70;
      break;
    case 23:
      unint64_t result = 0x73646E756F73;
      break;
    case 24:
      unint64_t result = 0x74616C69706D6F63;
      break;
    case 25:
      unint64_t result = 0x6569766F6DLL;
      break;
    case 26:
      unint64_t result = 0x6F6F426F69647561;
      break;
    case 27:
      unint64_t result = 0x616C50636973756DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.MediaType(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Verb(a1, a2, a3, a4, (uint64_t (*)(uint64_t))CommonAudio.MediaType.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Verb(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  if (v7 == a5(v6) && v9 == v10) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.MediaType(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Verb(a1, a2, (void (*)(uint64_t))CommonAudio.MediaType.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Verb(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.MediaType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(void))CommonAudio.MediaType.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Verb(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*v4);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.MediaType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(uint64_t))CommonAudio.MediaType.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Verb(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.MediaType@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized CommonAudio.MediaType.init(rawValue:)();
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.MediaType@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = CommonAudio.MediaType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t specialized CommonAudio.Verb.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x11) {
    return 17;
  }
  else {
    return v0;
  }
}

uint64_t specialized static CommonAudio.Decade.from(_:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = one-time initialization token for mappingDecade;
    swift_bridgeObjectRetain();
    if (v4 != -1) {
      swift_once();
    }
    uint64_t v5 = static CommonAudio.Decade.mappingDecade;
    if (*(void *)(static CommonAudio.Decade.mappingDecade + 16))
    {
      unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if (v7)
      {
        uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 + 56) + v6);
        swift_bridgeObjectRelease();
        return v8;
      }
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    char v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v17 = v13;
    *(_DWORD *)char v12 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v14 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v10, v11, "CommonAudio#Decade#from received unregistered decade: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v13, -1, -1);
    MEMORY[0x1CB77E470](v12, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 11;
}

unint64_t specialized CommonAudio.Attribute.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CommonAudio.Attribute.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xF) {
    return 15;
  }
  else {
    return v3;
  }
}

unint64_t specialized CommonAudio.Noun.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CommonAudio.Noun.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t specialized CommonAudio.Confirmation.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CommonAudio.Confirmation.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t type metadata accessor for INDateComponentsRange()
{
  unint64_t result = lazy cache variable for type metadata for INDateComponentsRange;
  if (!lazy cache variable for type metadata for INDateComponentsRange)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INDateComponentsRange);
  }
  return result;
}

unint64_t specialized CommonAudio.Decade.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CommonAudio.Decade.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return 11;
  }
  else {
    return v3;
  }
}

unint64_t specialized CommonAudio.Sort.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CommonAudio.Sort.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

uint64_t specialized static CommonAudio.MediaType.from(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  uint64_t v8 = (char *)&v27 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UsoEntity_common_MediaItemType.DefinedValues?(a1, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of UsoEntity_common_MediaItemType.DefinedValues?((uint64_t)v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    if (one-time initialization token for mappingMediaType != -1) {
      swift_once();
    }
    uint64_t v15 = static CommonAudio.MediaType.mappingMediaType;
    if (*(void *)(static CommonAudio.MediaType.mappingMediaType + 16))
    {
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14);
      if (v17)
      {
        uint64_t v18 = *(unsigned __int8 *)(*(void *)(v15 + 56) + v16);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
        return v18;
      }
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  outlined init with copy of UsoEntity_common_MediaItemType.DefinedValues?(a1, (uint64_t)v8);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v28 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    outlined init with copy of UsoEntity_common_MediaItemType.DefinedValues?((uint64_t)v8, (uint64_t)v5);
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of UsoEntity_common_MediaItemType.DefinedValues?((uint64_t)v8);
    _os_log_impl(&dword_1C8F83000, v20, v21, "CommonAudio#MediaType#from recieved unregistered type: %s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v23, -1, -1);
    MEMORY[0x1CB77E470](v22, -1, -1);
  }
  else
  {
    outlined destroy of UsoEntity_common_MediaItemType.DefinedValues?((uint64_t)v8);
  }

  return 28;
}

uint64_t specialized CommonAudio.MediaType.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1C) {
    return 28;
  }
  else {
    return v0;
  }
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Verb and conformance CommonAudio.Verb()
{
  unint64_t result = lazy protocol witness table cache variable for type CommonAudio.Verb and conformance CommonAudio.Verb;
  if (!lazy protocol witness table cache variable for type CommonAudio.Verb and conformance CommonAudio.Verb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Verb and conformance CommonAudio.Verb);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.UsoEntity and conformance CommonAudio.UsoEntity()
{
  unint64_t result = lazy protocol witness table cache variable for type CommonAudio.UsoEntity and conformance CommonAudio.UsoEntity;
  if (!lazy protocol witness table cache variable for type CommonAudio.UsoEntity and conformance CommonAudio.UsoEntity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.UsoEntity and conformance CommonAudio.UsoEntity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Attribute and conformance CommonAudio.Attribute()
{
  unint64_t result = lazy protocol witness table cache variable for type CommonAudio.Attribute and conformance CommonAudio.Attribute;
  if (!lazy protocol witness table cache variable for type CommonAudio.Attribute and conformance CommonAudio.Attribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Attribute and conformance CommonAudio.Attribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Modifier and conformance CommonAudio.Modifier()
{
  unint64_t result = lazy protocol witness table cache variable for type CommonAudio.Modifier and conformance CommonAudio.Modifier;
  if (!lazy protocol witness table cache variable for type CommonAudio.Modifier and conformance CommonAudio.Modifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Modifier and conformance CommonAudio.Modifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Noun and conformance CommonAudio.Noun()
{
  unint64_t result = lazy protocol witness table cache variable for type CommonAudio.Noun and conformance CommonAudio.Noun;
  if (!lazy protocol witness table cache variable for type CommonAudio.Noun and conformance CommonAudio.Noun)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Noun and conformance CommonAudio.Noun);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.RadioType and conformance CommonAudio.RadioType()
{
  unint64_t result = lazy protocol witness table cache variable for type CommonAudio.RadioType and conformance CommonAudio.RadioType;
  if (!lazy protocol witness table cache variable for type CommonAudio.RadioType and conformance CommonAudio.RadioType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.RadioType and conformance CommonAudio.RadioType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Confirmation and conformance CommonAudio.Confirmation()
{
  unint64_t result = lazy protocol witness table cache variable for type CommonAudio.Confirmation and conformance CommonAudio.Confirmation;
  if (!lazy protocol witness table cache variable for type CommonAudio.Confirmation and conformance CommonAudio.Confirmation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Confirmation and conformance CommonAudio.Confirmation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Decade and conformance CommonAudio.Decade()
{
  unint64_t result = lazy protocol witness table cache variable for type CommonAudio.Decade and conformance CommonAudio.Decade;
  if (!lazy protocol witness table cache variable for type CommonAudio.Decade and conformance CommonAudio.Decade)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Decade and conformance CommonAudio.Decade);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Sort and conformance CommonAudio.Sort()
{
  unint64_t result = lazy protocol witness table cache variable for type CommonAudio.Sort and conformance CommonAudio.Sort;
  if (!lazy protocol witness table cache variable for type CommonAudio.Sort and conformance CommonAudio.Sort)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Sort and conformance CommonAudio.Sort);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Reference and conformance CommonAudio.Reference()
{
  unint64_t result = lazy protocol witness table cache variable for type CommonAudio.Reference and conformance CommonAudio.Reference;
  if (!lazy protocol witness table cache variable for type CommonAudio.Reference and conformance CommonAudio.Reference)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Reference and conformance CommonAudio.Reference);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.MediaType and conformance CommonAudio.MediaType()
{
  unint64_t result = lazy protocol witness table cache variable for type CommonAudio.MediaType and conformance CommonAudio.MediaType;
  if (!lazy protocol witness table cache variable for type CommonAudio.MediaType and conformance CommonAudio.MediaType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.MediaType and conformance CommonAudio.MediaType);
  }
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio()
{
  return &type metadata for CommonAudio;
}

uint64_t getEnumTagSinglePayload for CommonAudio.Verb(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CommonAudio.Verb(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *unint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C904FDACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Verb()
{
  return &type metadata for CommonAudio.Verb;
}

ValueMetadata *type metadata accessor for CommonAudio.UsoEntity()
{
  return &type metadata for CommonAudio.UsoEntity;
}

uint64_t getEnumTagSinglePayload for CommonAudio.Attribute(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CommonAudio.Attribute(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C904FF58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Attribute()
{
  return &type metadata for CommonAudio.Attribute;
}

ValueMetadata *type metadata accessor for CommonAudio.Modifier()
{
  return &type metadata for CommonAudio.Modifier;
}

unsigned char *storeEnumTagSinglePayload for CommonAudio.Noun(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C905006CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Noun()
{
  return &type metadata for CommonAudio.Noun;
}

ValueMetadata *type metadata accessor for CommonAudio.RadioType()
{
  return &type metadata for CommonAudio.RadioType;
}

unsigned char *storeEnumTagSinglePayload for CommonAudio.Confirmation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9050180);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Confirmation()
{
  return &type metadata for CommonAudio.Confirmation;
}

uint64_t getEnumTagSinglePayload for CommonAudio.Decade(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CommonAudio.Decade(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9050314);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Decade()
{
  return &type metadata for CommonAudio.Decade;
}

unsigned char *storeEnumTagSinglePayload for CommonAudio.Sort(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9050418);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Sort()
{
  return &type metadata for CommonAudio.Sort;
}

unsigned char *storeEnumTagSinglePayload for CommonAudio.UsoEntity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C905051CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Reference()
{
  return &type metadata for CommonAudio.Reference;
}

uint64_t getEnumTagSinglePayload for CommonAudio.MediaType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE5) {
    goto LABEL_17;
  }
  if (a2 + 27 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 27) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 27;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 27;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 27;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1C;
  int v8 = v6 - 28;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CommonAudio.MediaType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 27 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 27) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE4)
  {
    unsigned int v6 = ((a2 - 229) >> 8) + 1;
    *unint64_t result = a2 + 27;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C90506B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 27;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.MediaType()
{
  return &type metadata for CommonAudio.MediaType;
}

uint64_t outlined init with copy of UsoEntity_common_MediaItemType.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UsoEntity_common_MediaItemType.DefinedValues?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MediaItemRankingSignals.artist.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MediaItemRankingSignals.isInLibrary.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t MediaItemRankingSignals.isExplicitContent.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t MediaItemRankingSignals.isDownloaded.getter()
{
  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t MediaItemRankingSignals.isPlayable.getter()
{
  return *(unsigned __int8 *)(v0 + 35);
}

uint64_t MediaItemRankingSignals.__allocating_init(artist:isInLibrary:isExplicitContent:isDownloaded:isPlayable:)(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(unsigned char *)(result + 32) = a3;
  *(unsigned char *)(result + 33) = a4;
  *(unsigned char *)(result + 34) = a5;
  *(unsigned char *)(result + 35) = a6;
  return result;
}

uint64_t MediaItemRankingSignals.init(artist:isInLibrary:isExplicitContent:isDownloaded:isPlayable:)(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6)
{
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(unsigned char *)(v6 + 32) = a3;
  *(unsigned char *)(v6 + 33) = a4;
  *(unsigned char *)(v6 + 34) = a5;
  *(unsigned char *)(v6 + 35) = a6;
  return v6;
}

uint64_t MediaItemRankingSignals.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MediaItemRankingSignals.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t MPMediaLibrary.mediaItemRankingSignals(for:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v6 = (int *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v110 = 0;
  unint64_t v111 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  id v9 = v2;
  id v10 = objc_msgSend(v9, sel_description);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();

  unint64_t v110 = v11;
  unint64_t v111 = v13;
  v14._object = (void *)0x80000001C919E880;
  v14._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v14);
  uint64_t v15 = v110;
  Date.init()();
  unint64_t v16 = &v8[v6[7]];
  *(void *)unint64_t v16 = "SiriInformationSearch/MediaLibrary.swift";
  *((void *)v16 + 1) = 40;
  v16[16] = 2;
  *(void *)&v8[v6[8]] = 45;
  char v17 = &v8[v6[9]];
  *(void *)char v17 = "mediaItemRankingSignals(for:)";
  *((void *)v17 + 1) = 29;
  v17[16] = 2;
  uint64_t v18 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v15);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  os_log_type_t v21 = (uint64_t *)&v8[v6[10]];
  *os_log_type_t v21 = v18;
  v21[1] = v20;
  uint64_t v22 = (void *)MEMORY[0x1CB77CA90](a1, a2);
  id v23 = objc_msgSend(v9, sel_entityWithSiriSyncIdentifier_, v22);

  if (v23)
  {
    self;
    uint64_t v24 = swift_dynamicCastObjCClass();
    uint64_t v105 = v8;
    if (v24)
    {
      unint64_t v25 = (void *)v24;
      uint64_t v26 = *MEMORY[0x1E4F313D8];
      id v27 = v23;
      if (objc_msgSend(v25, sel_valueForProperty_, v26))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v108 = 0u;
        long long v109 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v108, (uint64_t)&v110);
      if (v112)
      {
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if (swift_dynamicCast())
        {
          id v32 = v106;
          unsigned __int8 v33 = objc_msgSend(v106, sel_BOOLValue);

          goto LABEL_14;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v110);
      }
      unsigned __int8 v33 = 1;
LABEL_14:
      if (objc_msgSend(v25, sel_valueForProperty_, *MEMORY[0x1E4F313C0]))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v108 = 0u;
        long long v109 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v108, (uint64_t)&v110);
      if (v112)
      {
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if (swift_dynamicCast())
        {
          id v34 = v106;
          unsigned __int8 v35 = objc_msgSend(v106, sel_BOOLValue);

          goto LABEL_22;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v110);
      }
      unsigned __int8 v35 = 0;
LABEL_22:
      if (objc_msgSend(v25, sel_valueForProperty_, *MEMORY[0x1E4F313B0]))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v108 = 0u;
        long long v109 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v108, (uint64_t)&v110);
      if (v112)
      {
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if (swift_dynamicCast())
        {
          id v36 = v106;
          unsigned __int8 v37 = objc_msgSend(v106, sel_BOOLValue);

          goto LABEL_30;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v110);
      }
      unsigned __int8 v37 = 0;
LABEL_30:
      if (objc_msgSend(v25, sel_valueForProperty_, *MEMORY[0x1E4F313F8]))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v108 = 0u;
        long long v109 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v108, (uint64_t)&v110);
      if (v112)
      {
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if (swift_dynamicCast())
        {
          id v38 = v106;
          unsigned __int8 v39 = objc_msgSend(v106, sel_BOOLValue);

          goto LABEL_38;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v110);
      }
      unsigned __int8 v39 = 1;
LABEL_38:
      id v40 = objc_msgSend(v25, sel_artist);
      if (v40)
      {
        uint64_t v41 = v40;
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v44 = v43;
      }
      else
      {

LABEL_41:
        uint64_t v42 = 0;
        uint64_t v44 = 0;
      }
      goto LABEL_93;
    }
    self;
    uint64_t v28 = swift_dynamicCastObjCClass();
    if (v28)
    {
      uint64_t v29 = (void *)v28;
      uint64_t v30 = *MEMORY[0x1E4F31590];
      id v31 = v23;
      if (objc_msgSend(v29, sel_valueForProperty_, v30))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v108 = 0u;
        long long v109 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v108, (uint64_t)&v110);
      if (v112)
      {
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if (swift_dynamicCast())
        {
          id v68 = v106;
          unsigned __int8 v69 = objc_msgSend(v106, sel_BOOLValue);

          unsigned __int8 v33 = v69 ^ 1;
LABEL_58:
          id v70 = objc_msgSend(v29, sel_items);
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
          unint64_t v71 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v71 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();

            swift_bridgeObjectRelease_n();
          }
          else
          {
            uint64_t v72 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRelease();
          }
          unsigned __int8 v37 = 0;
          unsigned __int8 v35 = 0;
          uint64_t v42 = 0;
          uint64_t v44 = 0;
          unsigned __int8 v39 = v72 != 0;
LABEL_93:
          type metadata accessor for MediaItemRankingSignals();
          uint64_t v65 = swift_allocObject();
          *(void *)(v65 + 16) = v42;
          *(void *)(v65 + 24) = v44;
          *(unsigned char *)(v65 + 32) = v33;
          *(unsigned char *)(v65 + 33) = v35;
          *(unsigned char *)(v65 + 34) = v37;
          *(unsigned char *)(v65 + 35) = v39;
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v83 = type metadata accessor for Logger();
          __swift_project_value_buffer(v83, (uint64_t)static Logger.pommes);
          uint64_t v84 = Logger.logObject.getter();
          os_log_type_t v85 = static os_log_type_t.debug.getter();
          int v86 = v85;
          if (os_log_type_enabled(v84, v85))
          {
            uint64_t v87 = swift_slowAlloc();
            uint64_t v104 = swift_slowAlloc();
            *(void *)&long long v108 = v104;
            *(_DWORD *)uint64_t v87 = 136316162;
            unint64_t v88 = *(void *)(v65 + 24);
            unint64_t v110 = *(void *)(v65 + 16);
            unint64_t v111 = v88;
            swift_bridgeObjectRetain();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            int v103 = v86;
            uint64_t v89 = String.init<A>(describing:)();
            unint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, (uint64_t *)&v108);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_retain();
            swift_bridgeObjectRelease();
            *(_WORD *)(v87 + 12) = 2080;
            int v91 = *(unsigned __int8 *)(v65 + 32);
            if (*(unsigned char *)(v65 + 32)) {
              uint64_t v92 = 1702195828;
            }
            else {
              uint64_t v92 = 0x65736C6166;
            }
            id v102 = v23;
            if (v91) {
              unint64_t v93 = 0xE400000000000000;
            }
            else {
              unint64_t v93 = 0xE500000000000000;
            }
            unint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, (uint64_t *)&v108);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v87 + 22) = 2080;
            if (*(unsigned char *)(v65 + 33)) {
              uint64_t v94 = 1702195828;
            }
            else {
              uint64_t v94 = 0x65736C6166;
            }
            if (*(unsigned char *)(v65 + 33)) {
              unint64_t v95 = 0xE400000000000000;
            }
            else {
              unint64_t v95 = 0xE500000000000000;
            }
            unint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, (uint64_t *)&v108);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v87 + 32) = 2080;
            if (*(unsigned char *)(v65 + 34)) {
              uint64_t v96 = 1702195828;
            }
            else {
              uint64_t v96 = 0x65736C6166;
            }
            if (*(unsigned char *)(v65 + 34)) {
              unint64_t v97 = 0xE400000000000000;
            }
            else {
              unint64_t v97 = 0xE500000000000000;
            }
            unint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, (uint64_t *)&v108);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v87 + 42) = 2080;
            if (*(unsigned char *)(v65 + 35)) {
              uint64_t v98 = 1702195828;
            }
            else {
              uint64_t v98 = 0x65736C6166;
            }
            if (*(unsigned char *)(v65 + 35)) {
              unint64_t v99 = 0xE400000000000000;
            }
            else {
              unint64_t v99 = 0xE500000000000000;
            }
            unint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, (uint64_t *)&v108);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C8F83000, v84, (os_log_type_t)v103, "MPMediaLibrary#mediaItemRankingSignals with siriSyncId mediaItemRankingSignals\n{\n    artist: %s\n    isInLibrary: %s\n    isExplicitContent: %s\n    isDownloaded: %s\n    isPlayable: %s\n}", (uint8_t *)v87, 0x34u);
            uint64_t v100 = v104;
            swift_arrayDestroy();
            MEMORY[0x1CB77E470](v100, -1, -1);
            MEMORY[0x1CB77E470](v87, -1, -1);
          }
          else
          {
          }
          int v8 = v105;
          uint64_t v67 = one-time initialization token for shared;
          uint64_t v66 = v65;
          goto LABEL_123;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v110);
      }
      unsigned __int8 v33 = 1;
      goto LABEL_58;
    }
    self;
    uint64_t v45 = swift_dynamicCastObjCClass();
    if (v45)
    {
      uint64_t v46 = (void *)v45;
      uint64_t v47 = self;
      id v48 = v23;
      id v49 = objc_msgSend(v47, sel_persistentIDPropertyForGroupingType_, objc_msgSend(v46, sel_groupingType));
      uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v52 = v51;

      unint64_t v110 = (unint64_t)objc_msgSend(v46, sel_persistentID);
      uint64_t v53 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      unint64_t v54 = (void *)MEMORY[0x1CB77CA90](v50, v52);
      swift_bridgeObjectRelease();
      id v55 = objc_msgSend(self, sel_predicateWithValue_forProperty_, v53, v54);
      swift_unknownObjectRelease();

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C9195B30;
      *(void *)(inited + 32) = v55;
      unint64_t v110 = inited;
      specialized Array._endMutation()();
      unint64_t v57 = v110;
      if (v110 >> 62)
      {
        id v73 = v55;
        swift_bridgeObjectRetain();
        uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v74)
        {
LABEL_63:
          swift_bridgeObjectRelease();
          id v75 = objc_allocWithZone(MEMORY[0x1E4F31970]);
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
          lazy protocol witness table accessor for type MPMediaPredicate and conformance NSObject();
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v77 = objc_msgSend(v75, sel_initWithFilterPredicates_, isa);

          objc_msgSend(v77, sel_setGroupingType_, objc_msgSend(v46, sel_groupingType));
          id v78 = objc_msgSend(v77, sel_items);
          if (v78)
          {
            type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
            unint64_t v79 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if (v79 >> 62)
            {
              swift_bridgeObjectRetain();
              id v78 = (id)_CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              id v78 = *(id *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            swift_bridgeObjectRelease();
          }
          unsigned __int8 v33 = (uint64_t)v78 > 0;
          if (objc_msgSend(v46, sel_valueForProperty_, *MEMORY[0x1E4F313F8]))
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            long long v108 = 0u;
            long long v109 = 0u;
          }
          outlined init with take of Any?((uint64_t)&v108, (uint64_t)&v110);
          if (v112)
          {
            type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
            if (swift_dynamicCast())
            {
              id v80 = v106;
              unsigned __int8 v39 = objc_msgSend(v106, sel_BOOLValue);

LABEL_75:
              switch((unint64_t)objc_msgSend(v46, sel_groupingType))
              {
                case 1uLL:
                  id v81 = objc_msgSend(v46, sel_valueForProperty_, *MEMORY[0x1E4F312A8]);
                  break;
                case 2uLL:
                  id v81 = objc_msgSend(v46, (SEL)&selRef_setGroupingType_ + 6, *MEMORY[0x1E4F312B8]);
                  break;
                case 3uLL:
                  id v81 = objc_msgSend(v46, (SEL)&selRef_setGroupingType_ + 6, *MEMORY[0x1E4F312A0]);
                  break;
                case 4uLL:
                  id v81 = objc_msgSend(v46, (SEL)&selRef_setGroupingType_ + 6, *MEMORY[0x1E4F312C0]);
                  break;
                default:

                  unsigned __int8 v37 = 0;
                  unsigned __int8 v35 = 0;
                  goto LABEL_41;
              }
              if (v81)
              {
                _bridgeAnyObjectToAny(_:)();

                swift_unknownObjectRelease();
              }
              else
              {

                long long v108 = 0u;
                long long v109 = 0u;
              }
              outlined init with take of Any?((uint64_t)&v108, (uint64_t)&v110);
              if (v112)
              {
                int v82 = swift_dynamicCast();
                if (v82) {
                  uint64_t v42 = (uint64_t)v106;
                }
                else {
                  uint64_t v42 = 0;
                }
                if (v82) {
                  uint64_t v44 = v107;
                }
                else {
                  uint64_t v44 = 0;
                }
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v110);
                uint64_t v42 = 0;
                uint64_t v44 = 0;
              }
              unsigned __int8 v37 = 0;
              unsigned __int8 v35 = 0;
              goto LABEL_93;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v110);
          }
          unsigned __int8 v39 = 1;
          goto LABEL_75;
        }
      }
      else
      {
        uint64_t v58 = *(void *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v59 = v55;
        if (!v58) {
          goto LABEL_63;
        }
      }
      specialized Set.init(_nonEmptyArrayLiteral:)(v57);
      goto LABEL_63;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v60 = type metadata accessor for Logger();
  __swift_project_value_buffer(v60, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    char v63 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    unint64_t v110 = v64;
    *(_DWORD *)char v63 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v61, v62, "MPMediaItem not found for %s", v63, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v64, -1, -1);
    MEMORY[0x1CB77E470](v63, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = one-time initialization token for shared;
LABEL_123:
  if (v67 != -1)
  {
    swift_once();
    uint64_t v66 = v65;
  }
  (*(void (**)(char *, uint64_t))(*(void *)static PerformanceUtil.shared + 184))(v8, 1);
  outlined destroy of PerformanceUtil.Ticket((uint64_t)v8);
  return v66;
}

uint64_t protocol witness for MediaLibrary.mediaItemRankingSignals(for:) in conformance MPMediaLibrary(uint64_t a1, unint64_t a2)
{
  return MPMediaLibrary.mediaItemRankingSignals(for:)(a1, a2);
}

uint64_t protocol witness for MediaLibrary.mediaItemRankingSignals(for:entityType:) in conformance MPMediaLibrary(unint64_t a1)
{
  return specialized MPMediaLibrary.mediaItemRankingSignals(for:entityType:)(a1);
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        unint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      os_log_type_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *os_log_type_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<KVFieldType>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      uint64_t v7 = *(void *)(v6 + 8 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      id v9 = -1 << *(unsigned char *)(v3 + 32);
      uint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      unint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(void *)(v14 + 8 * v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          uint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          unint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(void *)(v14 + 8 * v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(v14 + 8 * v10) = v7;
      unint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  unsigned __int8 v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    unsigned __int8 v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    id v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)(unint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;

  uint64_t v2 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  unsigned __int8 v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Siri_Nlu_External_Span.MatcherName>);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    unsigned __int8 v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    id v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, MEMORY[0x1E4FA2738]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, MEMORY[0x1E4FA2738]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)(unint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;

  uint64_t v2 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  unsigned __int8 v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Siri_Nlu_External_Parser.ParserIdentifier>);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    unsigned __int8 v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    id v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)(unint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;

  uint64_t v2 = type metadata accessor for DeviceClass();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  unsigned __int8 v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<DeviceClass>);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    unsigned __int8 v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    id v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(&lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass, MEMORY[0x1E4FA50C0]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType((unint64_t *)&lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass, MEMORY[0x1E4FA50C0]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
  unint64_t v1 = a1;
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MPMediaPredicate>);
      uint64_t v3 = static _SetStorage.allocate(capacity:)();
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = MEMORY[0x1E4FBC870];
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  uint64_t v7 = v3 + 56;
  uint64_t v44 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    unint64_t v42 = v1;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = MEMORY[0x1CB77D510](v8, v1);
        BOOL v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v11 = v9;
        Swift::Int v12 = NSObject._rawHashValue(seed:)(*(void *)(v3 + 40));
        uint64_t v13 = -1 << *(unsigned char *)(v3 + 32);
        unint64_t v14 = v12 & ~v13;
        unint64_t v15 = v14 >> 6;
        uint64_t v16 = *(void *)(v7 + 8 * (v14 >> 6));
        uint64_t v17 = 1 << v14;
        if (((1 << v14) & v16) != 0) {
          break;
        }
LABEL_20:
        *(void *)(v7 + 8 * v15) = v17 | v16;
        *(void *)(*(void *)(v3 + 48) + 8 * v14) = v11;
        uint64_t v23 = *(void *)(v3 + 16);
        BOOL v10 = __OFADD__(v23, 1);
        uint64_t v24 = v23 + 1;
        if (v10) {
          goto LABEL_37;
        }
        *(void *)(v3 + 16) = v24;
        if (v8 == v5) {
          return;
        }
      }
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
      id v18 = *(id *)(*(void *)(v3 + 48) + 8 * v14);
      char v19 = static NSObject.== infix(_:_:)();

      if ((v19 & 1) == 0)
      {
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)(v7 + 8 * (v14 >> 6));
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(*(void *)(v3 + 48) + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
        unint64_t v1 = v42;
        uint64_t v5 = v44;
        goto LABEL_20;
      }
LABEL_11:
      swift_unknownObjectRelease();
      unint64_t v1 = v42;
      uint64_t v5 = v44;
      if (v8 == v44) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  unint64_t v41 = v1 + 32;
  uint64_t v43 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v43)
  {
    Swift::Int v26 = *(void *)(v3 + 40);
    id v27 = *(id *)(v41 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)(v7 + 8 * (v30 >> 6));
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
      id v34 = *(id *)(*(void *)(v3 + 48) + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35)
      {
LABEL_24:

        goto LABEL_25;
      }
      uint64_t v36 = ~v29;
      while (1)
      {
        unint64_t v30 = (v30 + 1) & v36;
        unint64_t v31 = v30 >> 6;
        uint64_t v32 = *(void *)(v7 + 8 * (v30 >> 6));
        uint64_t v33 = 1 << v30;
        if ((v32 & (1 << v30)) == 0) {
          break;
        }
        id v37 = *(id *)(*(void *)(v3 + 48) + 8 * v30);
        char v38 = static NSObject.== infix(_:_:)();

        if (v38) {
          goto LABEL_24;
        }
      }
    }
    *(void *)(v7 + 8 * v31) = v33 | v32;
    *(void *)(*(void *)(v3 + 48) + 8 * v30) = v27;
    uint64_t v39 = *(void *)(v3 + 16);
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_38;
    }
    *(void *)(v3 + 16) = v40;
LABEL_25:
    if (++v25 == v44) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type MPMediaPredicate and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type MPMediaPredicate and conformance NSObject;
  if (!lazy protocol witness table cache variable for type MPMediaPredicate and conformance NSObject)
  {
    type metadata accessor for CNContactStore(255, &lazy cache variable for type metadata for MPMediaPredicate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MPMediaPredicate and conformance NSObject);
  }
  return result;
}

uint64_t type metadata accessor for MediaItemRankingSignals()
{
  return self;
}

uint64_t specialized MPMediaLibrary.mediaItemRankingSignals(for:entityType:)(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v4 = (int *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v165 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v174 = 0;
  unint64_t v175 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  id v7 = v1;
  id v8 = objc_msgSend(v7, sel_description);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();

  unint64_t v174 = v9;
  unint64_t v175 = v11;
  v12._object = (void *)0x80000001C919E880;
  v12._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v12);
  uint64_t v13 = v174;
  Date.init()();
  unint64_t v14 = &v6[v4[7]];
  *(void *)unint64_t v14 = "SiriInformationSearch/MediaLibrary.swift";
  *((void *)v14 + 1) = 40;
  v14[16] = 2;
  *(void *)&v6[v4[8]] = 138;
  unint64_t v15 = &v6[v4[9]];
  *(void *)unint64_t v15 = "mediaItemRankingSignals(for:entityType:)";
  *((void *)v15 + 1) = 40;
  v15[16] = 2;
  uint64_t v16 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v13);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = v4[10];
  v169 = v6;
  uint64_t v20 = (uint64_t *)&v6[v19];
  *uint64_t v20 = v16;
  v20[1] = v18;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_1C8F83000, v23, v24, "MPMediaLibrary#mediaItemRankingSignals with persistentID reached beginning", v25, 2u);
    MEMORY[0x1CB77E470](v25, -1, -1);
  }

  id v26 = objc_msgSend(v7, sel_itemWithPersistentID_, a1);
  if (v26)
  {
    id v27 = v26;
    Swift::Int v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v168 = v22;
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      unint64_t v174 = v31;
      *(_DWORD *)unint64_t v30 = 136315138;
      v167 = v30 + 4;
      id v32 = v27;
      id v33 = objc_msgSend(v32, sel_description);
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v35 = v27;
      unint64_t v37 = v36;

      *(void *)&long long v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v37, (uint64_t *)&v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      id v27 = v35;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v28, v29, "MPMediaLibrary#mediaItemRankingSignals with PersistentID mpMediaItem: %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v31, -1, -1);
      MEMORY[0x1CB77E470](v30, -1, -1);
    }
    else
    {
    }
    if (objc_msgSend(v27, sel_valueForProperty_, *MEMORY[0x1E4F313D8]))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v172 = 0u;
      long long v173 = 0u;
    }
    outlined init with take of Any?((uint64_t)&v172, (uint64_t)&v174);
    if (v176)
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if (swift_dynamicCast())
      {
        id v40 = v170;
        unsigned int v41 = objc_msgSend(v170, sel_BOOLValue);

        goto LABEL_20;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v174);
    }
    unsigned int v41 = 1;
LABEL_20:
    if (objc_msgSend(v27, sel_valueForProperty_, *MEMORY[0x1E4F313C0]))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v172 = 0u;
      long long v173 = 0u;
    }
    outlined init with take of Any?((uint64_t)&v172, (uint64_t)&v174);
    if (v176)
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if (swift_dynamicCast())
      {
        id v42 = v170;
        unsigned int v43 = objc_msgSend(v170, sel_BOOLValue);

        goto LABEL_28;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v174);
    }
    unsigned int v43 = 0;
LABEL_28:
    if (objc_msgSend(v27, sel_valueForProperty_, *MEMORY[0x1E4F313B0]))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v172 = 0u;
      long long v173 = 0u;
    }
    outlined init with take of Any?((uint64_t)&v172, (uint64_t)&v174);
    if (v176)
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if (swift_dynamicCast())
      {
        id v44 = v170;
        unsigned int v45 = objc_msgSend(v170, sel_BOOLValue);

        goto LABEL_36;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v174);
    }
    unsigned int v45 = 0;
LABEL_36:
    if (objc_msgSend(v27, sel_valueForProperty_, *MEMORY[0x1E4F313F8]))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v172 = 0u;
      long long v173 = 0u;
    }
    outlined init with take of Any?((uint64_t)&v172, (uint64_t)&v174);
    if (v176)
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if (swift_dynamicCast())
      {
        id v46 = v170;
        unsigned int v47 = objc_msgSend(v170, sel_BOOLValue);

        goto LABEL_44;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v174);
    }
    unsigned int v47 = 1;
LABEL_44:
    id v48 = objc_msgSend(v27, sel_artist);
    if (v48)
    {
      id v49 = v48;
      unint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v52 = v51;
    }
    else
    {

      unint64_t v50 = 0;
      unint64_t v52 = 0;
    }
    goto LABEL_150;
  }
  id v38 = objc_msgSend(v7, sel_playlistWithPersistentID_, a1);
  if (v38)
  {
    uint64_t v39 = v38;
    if (objc_msgSend(v38, sel_valueForProperty_, *MEMORY[0x1E4F31590]))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v172 = 0u;
      long long v173 = 0u;
    }
    outlined init with take of Any?((uint64_t)&v172, (uint64_t)&v174);
    if (v176)
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if (swift_dynamicCast())
      {
        id v66 = v170;
        unsigned int v67 = objc_msgSend(v170, sel_BOOLValue);

        int v68 = v67 ^ 1;
LABEL_57:
        id v69 = objc_msgSend(v39, sel_items);
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
        unint64_t v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v70 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();

          swift_bridgeObjectRelease_n();
        }
        else
        {
          uint64_t v71 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRelease();
        }
        unsigned int v45 = 0;
        unsigned int v43 = 0;
        unint64_t v50 = 0;
        unint64_t v52 = 0;
        unsigned int v47 = v71 != 0;
        unsigned int v41 = v68;
        goto LABEL_150;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v174);
    }
    int v68 = 1;
    goto LABEL_57;
  }
  id v53 = objc_msgSend(v7, sel_collectionWithPersistentID_groupingType_, a1, 1);
  if (v53)
  {
    unint64_t v54 = v53;
    id v55 = objc_msgSend(self, sel_persistentIDPropertyForGroupingType_, 1);
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v58 = v57;

    unint64_t v174 = (unint64_t)objc_msgSend(v54, sel_persistentID);
    uint64_t v59 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    uint64_t v60 = (void *)MEMORY[0x1CB77CA90](v56, v58);
    swift_bridgeObjectRelease();
    id v61 = objc_msgSend(self, sel_predicateWithValue_forProperty_, v59, v60);
    swift_unknownObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_1C9195B30;
    *(void *)(v62 + 32) = v61;
    unint64_t v174 = v62;
    specialized Array._endMutation()();
    unint64_t v63 = v174;
    if (v174 >> 62)
    {
      id v113 = v61;
      swift_bridgeObjectRetain();
      uint64_t v114 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v114)
      {
LABEL_77:
        swift_bridgeObjectRelease();
        id v115 = objc_allocWithZone(MEMORY[0x1E4F31970]);
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
        lazy protocol witness table accessor for type MPMediaPredicate and conformance NSObject();
        Class isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v117 = objc_msgSend(v115, sel_initWithFilterPredicates_, isa);

        objc_msgSend(v117, sel_setGroupingType_, 1);
        id v118 = objc_msgSend(v117, sel_items);
        if (v118)
        {
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
          unint64_t v119 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v119 >> 62)
          {
            swift_bridgeObjectRetain();
            id v118 = (id)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            id v118 = *(id *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
        }
        unsigned int v41 = (uint64_t)v118 > 0;
        if (objc_msgSend(v54, sel_valueForProperty_, *MEMORY[0x1E4F313F8]))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v172 = 0u;
          long long v173 = 0u;
        }
        outlined init with take of Any?((uint64_t)&v172, (uint64_t)&v174);
        if (v176)
        {
          type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          if (swift_dynamicCast())
          {
            id v120 = v170;
            unsigned int v47 = objc_msgSend(v170, sel_BOOLValue);

            goto LABEL_89;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v174);
        }
        unsigned int v47 = 1;
LABEL_89:
        if (objc_msgSend(v54, sel_valueForProperty_, *MEMORY[0x1E4F312A8]))
        {
LABEL_90:
          _bridgeAnyObjectToAny(_:)();

          swift_unknownObjectRelease();
          goto LABEL_107;
        }
LABEL_106:

        long long v172 = 0u;
        long long v173 = 0u;
LABEL_107:
        outlined init with take of Any?((uint64_t)&v172, (uint64_t)&v174);
        if (v176)
        {
LABEL_108:
          int v128 = swift_dynamicCast();
          if (v128) {
            unint64_t v50 = (unint64_t)v170;
          }
          else {
            unint64_t v50 = 0;
          }
          if (v128) {
            unint64_t v52 = v171;
          }
          else {
            unint64_t v52 = 0;
          }
          goto LABEL_149;
        }
LABEL_148:
        outlined destroy of Any?((uint64_t)&v174);
        unint64_t v50 = 0;
        unint64_t v52 = 0;
LABEL_149:
        unsigned int v45 = 0;
        unsigned int v43 = 0;
LABEL_150:
        type metadata accessor for MediaItemRankingSignals();
        uint64_t v110 = swift_allocObject();
        *(void *)(v110 + 16) = v50;
        *(void *)(v110 + 24) = v52;
        *(unsigned char *)(v110 + 32) = v41;
        *(unsigned char *)(v110 + 33) = v43;
        *(unsigned char *)(v110 + 34) = v45;
        *(unsigned char *)(v110 + 35) = v47;
        unsigned int v146 = v45;
        v147 = Logger.logObject.getter();
        os_log_type_t v148 = static os_log_type_t.debug.getter();
        int v149 = v148;
        if (os_log_type_enabled(v147, v148))
        {
          uint64_t v150 = swift_slowAlloc();
          unsigned int v166 = v146;
          uint64_t v151 = v150;
          uint64_t v168 = swift_slowAlloc();
          *(void *)&long long v172 = v168;
          *(_DWORD *)uint64_t v151 = 136316162;
          unint64_t v174 = v50;
          unint64_t v175 = v52;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          LODWORD(v167) = v149;
          uint64_t v152 = String.init<A>(describing:)();
          unint64_t v174 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v152, v153, (uint64_t *)&v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_retain();
          swift_bridgeObjectRelease();
          *(_WORD *)(v151 + 12) = 2080;
          unsigned int v165 = v47;
          if (v41) {
            uint64_t v154 = 1702195828;
          }
          else {
            uint64_t v154 = 0x65736C6166;
          }
          if (v41) {
            unint64_t v155 = 0xE400000000000000;
          }
          else {
            unint64_t v155 = 0xE500000000000000;
          }
          unint64_t v174 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v154, v155, (uint64_t *)&v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v151 + 22) = 2080;
          if (v43) {
            uint64_t v156 = 1702195828;
          }
          else {
            uint64_t v156 = 0x65736C6166;
          }
          if (v43) {
            unint64_t v157 = 0xE400000000000000;
          }
          else {
            unint64_t v157 = 0xE500000000000000;
          }
          unint64_t v174 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v156, v157, (uint64_t *)&v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v151 + 32) = 2080;
          if (v166) {
            uint64_t v158 = 1702195828;
          }
          else {
            uint64_t v158 = 0x65736C6166;
          }
          if (v166) {
            unint64_t v159 = 0xE400000000000000;
          }
          else {
            unint64_t v159 = 0xE500000000000000;
          }
          unint64_t v174 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v158, v159, (uint64_t *)&v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v151 + 42) = 2080;
          if (v165) {
            uint64_t v160 = 1702195828;
          }
          else {
            uint64_t v160 = 0x65736C6166;
          }
          if (v165) {
            unint64_t v161 = 0xE400000000000000;
          }
          else {
            unint64_t v161 = 0xE500000000000000;
          }
          unint64_t v174 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v160, v161, (uint64_t *)&v172);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C8F83000, v147, (os_log_type_t)v167, "MPMediaLibrary#mediaItemRankingSignals with PersistentID mediaItemRankingSignals\n{\n    artist: %s\n    isInLibrary: %s\n    isExplicitContent: %s\n    isDownloaded: %s\n    isPlayable: %s\n}", (uint8_t *)v151, 0x34u);
          uint64_t v162 = v168;
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v162, -1, -1);
          MEMORY[0x1CB77E470](v151, -1, -1);
        }

        uint64_t v112 = one-time initialization token for shared;
        uint64_t v111 = v110;
        goto LABEL_177;
      }
    }
    else
    {
      uint64_t v64 = *(void *)((v174 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v65 = v61;
      if (!v64) {
        goto LABEL_77;
      }
    }
    specialized Set.init(_nonEmptyArrayLiteral:)(v63);
    goto LABEL_77;
  }
  id v72 = objc_msgSend(v7, sel_collectionWithPersistentID_groupingType_, a1, 3);
  if (v72)
  {
    unint64_t v54 = v72;
    id v73 = objc_msgSend(self, sel_persistentIDPropertyForGroupingType_, 3);
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v76 = v75;

    unint64_t v174 = (unint64_t)objc_msgSend(v54, sel_persistentID);
    uint64_t v77 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v78 = (void *)MEMORY[0x1CB77CA90](v74, v76);
    swift_bridgeObjectRelease();
    id v61 = objc_msgSend(self, sel_predicateWithValue_forProperty_, v77, v78);
    swift_unknownObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v79 = swift_allocObject();
    *(_OWORD *)(v79 + 16) = xmmword_1C9195B30;
    *(void *)(v79 + 32) = v61;
    unint64_t v174 = v79;
    specialized Array._endMutation()();
    unint64_t v80 = v174;
    if (v174 >> 62)
    {
      id v121 = v61;
      swift_bridgeObjectRetain();
      uint64_t v122 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v122)
      {
LABEL_93:
        swift_bridgeObjectRelease();
        id v123 = objc_allocWithZone(MEMORY[0x1E4F31970]);
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
        lazy protocol witness table accessor for type MPMediaPredicate and conformance NSObject();
        Class v124 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v117 = objc_msgSend(v123, sel_initWithFilterPredicates_, v124);

        objc_msgSend(v117, sel_setGroupingType_, 3);
        id v125 = objc_msgSend(v117, sel_items);
        if (v125)
        {
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
          unint64_t v126 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v126 >> 62)
          {
            swift_bridgeObjectRetain();
            id v125 = (id)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            id v125 = *(id *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
        }
        unsigned int v41 = (uint64_t)v125 > 0;
        if (objc_msgSend(v54, sel_valueForProperty_, *MEMORY[0x1E4F313F8]))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v172 = 0u;
          long long v173 = 0u;
        }
        outlined init with take of Any?((uint64_t)&v172, (uint64_t)&v174);
        if (v176)
        {
          type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          if (swift_dynamicCast())
          {
            id v127 = v170;
            unsigned int v47 = objc_msgSend(v170, sel_BOOLValue);

            goto LABEL_105;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v174);
        }
        unsigned int v47 = 1;
LABEL_105:
        if (objc_msgSend(v54, sel_valueForProperty_, *MEMORY[0x1E4F312A0])) {
          goto LABEL_90;
        }
        goto LABEL_106;
      }
    }
    else
    {
      uint64_t v81 = *(void *)((v174 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v82 = v61;
      if (!v81) {
        goto LABEL_93;
      }
    }
    specialized Set.init(_nonEmptyArrayLiteral:)(v80);
    goto LABEL_93;
  }
  id v83 = objc_msgSend(v7, sel_collectionWithPersistentID_groupingType_, a1, 2);
  if (v83)
  {
    uint64_t v84 = v83;
    id v85 = objc_msgSend(self, sel_persistentIDPropertyForGroupingType_, 2);
    uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v88 = v87;

    unint64_t v174 = (unint64_t)objc_msgSend(v84, sel_persistentID);
    uint64_t v89 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    unint64_t v90 = (void *)MEMORY[0x1CB77CA90](v86, v88);
    swift_bridgeObjectRelease();
    id v91 = objc_msgSend(self, sel_predicateWithValue_forProperty_, v89, v90);
    swift_unknownObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v92 = swift_allocObject();
    *(_OWORD *)(v92 + 16) = xmmword_1C9195B30;
    *(void *)(v92 + 32) = v91;
    unint64_t v174 = v92;
    specialized Array._endMutation()();
    unint64_t v93 = v174;
    if (v174 >> 62)
    {
      id v129 = v91;
      swift_bridgeObjectRetain();
      uint64_t v130 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v130)
      {
LABEL_116:
        swift_bridgeObjectRelease();
        id v131 = objc_allocWithZone(MEMORY[0x1E4F31970]);
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
        lazy protocol witness table accessor for type MPMediaPredicate and conformance NSObject();
        Class v132 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v133 = objc_msgSend(v131, sel_initWithFilterPredicates_, v132);

        objc_msgSend(v133, sel_setGroupingType_, 2);
        id v134 = objc_msgSend(v133, sel_items);
        if (v134)
        {
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
          unint64_t v135 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v135 >> 62)
          {
            swift_bridgeObjectRetain();
            id v134 = (id)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            id v134 = *(id *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
        }
        unsigned int v41 = (uint64_t)v134 > 0;
        if (objc_msgSend(v84, sel_valueForProperty_, *MEMORY[0x1E4F313F8]))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v172 = 0u;
          long long v173 = 0u;
        }
        outlined init with take of Any?((uint64_t)&v172, (uint64_t)&v174);
        if (v176)
        {
          type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          if (swift_dynamicCast())
          {
            id v136 = v170;
            unsigned int v137 = objc_msgSend(v170, sel_BOOLValue);

LABEL_128:
            id v138 = objc_msgSend(v84, sel_valueForProperty_, *MEMORY[0x1E4F312B8]);
            goto LABEL_144;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v174);
        }
        unsigned int v137 = 1;
        goto LABEL_128;
      }
    }
    else
    {
      uint64_t v94 = *(void *)((v174 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v95 = v91;
      if (!v94) {
        goto LABEL_116;
      }
    }
    specialized Set.init(_nonEmptyArrayLiteral:)(v93);
    goto LABEL_116;
  }
  id v96 = objc_msgSend(v7, sel_collectionWithPersistentID_groupingType_, a1, 4);
  if (v96)
  {
    uint64_t v84 = v96;
    id v97 = objc_msgSend(self, sel_persistentIDPropertyForGroupingType_, 4);
    uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v100 = v99;

    unint64_t v174 = (unint64_t)objc_msgSend(v84, sel_persistentID);
    uint64_t v101 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v102 = (void *)MEMORY[0x1CB77CA90](v98, v100);
    swift_bridgeObjectRelease();
    id v91 = objc_msgSend(self, sel_predicateWithValue_forProperty_, v101, v102);
    swift_unknownObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v103 = swift_allocObject();
    *(_OWORD *)(v103 + 16) = xmmword_1C9195B30;
    *(void *)(v103 + 32) = v91;
    unint64_t v174 = v103;
    specialized Array._endMutation()();
    unint64_t v104 = v174;
    if (v174 >> 62)
    {
      id v139 = v91;
      swift_bridgeObjectRetain();
      uint64_t v140 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v140)
      {
LABEL_131:
        swift_bridgeObjectRelease();
        id v141 = objc_allocWithZone(MEMORY[0x1E4F31970]);
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
        lazy protocol witness table accessor for type MPMediaPredicate and conformance NSObject();
        Class v142 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v133 = objc_msgSend(v141, sel_initWithFilterPredicates_, v142);

        objc_msgSend(v133, sel_setGroupingType_, 4);
        id v143 = objc_msgSend(v133, sel_items);
        if (v143)
        {
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
          unint64_t v144 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v144 >> 62)
          {
            swift_bridgeObjectRetain();
            id v143 = (id)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            id v143 = *(id *)((v144 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
        }
        unsigned int v41 = (uint64_t)v143 > 0;
        if (objc_msgSend(v84, sel_valueForProperty_, *MEMORY[0x1E4F313F8]))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v172 = 0u;
          long long v173 = 0u;
        }
        outlined init with take of Any?((uint64_t)&v172, (uint64_t)&v174);
        if (v176)
        {
          type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          if (swift_dynamicCast())
          {
            id v145 = v170;
            unsigned int v137 = objc_msgSend(v170, sel_BOOLValue);

LABEL_143:
            id v138 = objc_msgSend(v84, sel_valueForProperty_, *MEMORY[0x1E4F312C0]);
LABEL_144:
            if (v138)
            {
              _bridgeAnyObjectToAny(_:)();

              swift_unknownObjectRelease();
            }
            else
            {

              long long v172 = 0u;
              long long v173 = 0u;
            }
            outlined init with take of Any?((uint64_t)&v172, (uint64_t)&v174);
            unsigned int v47 = v137;
            if (v176) {
              goto LABEL_108;
            }
            goto LABEL_148;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v174);
        }
        unsigned int v137 = 1;
        goto LABEL_143;
      }
    }
    else
    {
      uint64_t v105 = *(void *)((v174 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v106 = v91;
      if (!v105) {
        goto LABEL_131;
      }
    }
    specialized Set.init(_nonEmptyArrayLiteral:)(v104);
    goto LABEL_131;
  }
  uint64_t v107 = Logger.logObject.getter();
  os_log_type_t v108 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v107, v108))
  {
    long long v109 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)long long v109 = 134217984;
    unint64_t v174 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v107, v108, "MPMediaItem not found for %llu", v109, 0xCu);
    MEMORY[0x1CB77E470](v109, -1, -1);
  }

  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v112 = one-time initialization token for shared;
LABEL_177:
  if (v112 != -1)
  {
    swift_once();
    uint64_t v111 = v110;
  }
  uint64_t v163 = (uint64_t)v169;
  (*(void (**)(char *, uint64_t))(*(void *)static PerformanceUtil.shared + 184))(v169, 1);
  outlined destroy of PerformanceUtil.Ticket(v163);
  return v111;
}

uint64_t method lookup function for MediaItemRankingSignals(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MediaItemRankingSignals);
}

uint64_t dispatch thunk of MediaItemRankingSignals.__allocating_init(artist:isInLibrary:isExplicitContent:isDownloaded:isPlayable:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of MediaLibrary.mediaItemRankingSignals(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of MediaLibrary.mediaItemRankingSignals(for:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t PommesAppStatus.bundleID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesAppStatus.isLocked.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t PommesAppStatus.isHidden.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

SiriInformationSearch::PommesAppStatus __swiftcall PommesAppStatus.init(bundleID:isLocked:isHidden:)(Swift::String bundleID, Swift::Bool isLocked, Swift::Bool isHidden)
{
  *(Swift::String *)uint64_t v3 = bundleID;
  *(unsigned char *)(v3 + 16) = isLocked;
  *(unsigned char *)(v3 + 17) = isHidden;
  result.bundleID = bundleID;
  result.isLocked = isLocked;
  return result;
}

void PommesAppStatus.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_bundleIdentifier);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  LOBYTE(v4) = objc_msgSend(a1, sel_isLocked);
  unsigned __int8 v8 = objc_msgSend(a1, sel_isHidden);

  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = (_BYTE)v4;
  *(unsigned char *)(a2 + 17) = v8;
}

uint64_t static PommesAppStatus.available(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(_WORD *)(a3 + 16) = 0;
  return swift_bridgeObjectRetain();
}

SiriInformationSearch::PommesAppStatus __swiftcall PommesSystemAppChecking.appStatus(bundleID:)(Swift::String bundleID)
{
  object = bundleID._object;
  uint64_t countAndFlagsBits = bundleID._countAndFlagsBits;
  uint64_t v4 = v1;
  uint64_t v5 = type metadata accessor for AppProtectionFeatures();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unsigned __int8 v8 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v50 = countAndFlagsBits;
  if (v13)
  {
    uint64_t v14 = swift_slowAlloc();
    v48[1] = v10;
    unint64_t v15 = (uint8_t *)v14;
    uint64_t v16 = swift_slowAlloc();
    v48[0] = v5;
    uint64_t v17 = v16;
    uint64_t v52 = v16;
    uint64_t v49 = v4;
    *(_DWORD *)unint64_t v15 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v52);
    uint64_t v4 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v11, v12, "AVAILABILITY: Checking bundle ID %s", v15, 0xCu);
    swift_arrayDestroy();
    uint64_t v18 = v17;
    uint64_t v5 = v48[0];
    MEMORY[0x1CB77E470](v18, -1, -1);
    MEMORY[0x1CB77E470](v15, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4F4B798], v5);
  char v19 = AppProtectionFeatures.enabled.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v19)
  {
    uint64_t v20 = self;
    uint64_t v21 = v50;
    uint64_t v22 = (void *)MEMORY[0x1CB77CA90](v50, object);
    id v23 = objc_msgSend(v20, sel_applicationWithBundleIdentifier_, v22);

    id v24 = v23;
    swift_bridgeObjectRetain_n();
    id v25 = v24;
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    Swift::Int v28 = &selRef_init;
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = v4;
      uint64_t v31 = swift_slowAlloc();
      uint64_t v52 = v31;
      *(_DWORD *)uint64_t v29 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, (unint64_t)object, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 12) = 1024;
      unsigned int v32 = objc_msgSend(v25, sel_isLocked);

      LODWORD(v51) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v29 + 18) = 1024;
      unsigned int v33 = objc_msgSend(v25, sel_isHidden);

      LODWORD(v51) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C8F83000, v26, v27, "AVAILABILITY: app %s is…\n    locked: %{BOOL}d\n    hidden: %{BOOL}d", (uint8_t *)v29, 0x18u);
      swift_arrayDestroy();
      uint64_t v34 = v31;
      uint64_t v4 = v30;
      Swift::Int v28 = &selRef_init;
      MEMORY[0x1CB77E470](v34, -1, -1);
      MEMORY[0x1CB77E470](v29, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v43 = objc_msgSend(v25, sel_bundleIdentifier);
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v46 = v45;

    LOBYTE(v43) = objc_msgSend(v25, sel_isLocked);
    unsigned __int8 v47 = [v25 v28[84]];

    *(void *)uint64_t v4 = v44;
    *(void *)(v4 + 8) = v46;
    *(unsigned char *)(v4 + 16) = (_BYTE)v43;
    *(unsigned char *)(v4 + 17) = v47;
  }
  else
  {
    id v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = v50;
    if (v37)
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_1C8F83000, v35, v36, "AVAILABILITY: core functionality not enabled", v39, 2u);
      MEMORY[0x1CB77E470](v39, -1, -1);
    }

    *(void *)uint64_t v4 = v38;
    *(void *)(v4 + 8) = object;
    *(_WORD *)(v4 + 16) = 0;
    uint64_t v40 = swift_bridgeObjectRetain();
  }
  result.bundleID._object = v41;
  result.bundleID._uint64_t countAndFlagsBits = v40;
  result.isLocked = v42;
  result.isHidden = HIBYTE(v42);
  return result;
}

unint64_t protocol witness for PommesAppChecking.appStatus(bundleID:) in conformance PommesSystemAppChecking(uint64_t a1, uint64_t a2)
{
  return (unint64_t)PommesSystemAppChecking.appStatus(bundleID:)(*(Swift::String *)&a1);
}

uint64_t destroy for PommesAppStatus()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for PommesAppStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PommesAppStatus(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PommesAppStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesAppStatus(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 18)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesAppStatus(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 18) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesAppStatus()
{
  return &type metadata for PommesAppStatus;
}

uint64_t dispatch thunk of PommesAppChecking.appStatus(bundleID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for PommesSystemAppChecking()
{
  return &type metadata for PommesSystemAppChecking;
}

uint64_t CallContactPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static CallContactPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t CallContactPreflightClient.deinit()
{
  return v0;
}

uint64_t CallContactPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t CallContactPreflightClient.init()()
{
  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance CallContactPreflightClient()
{
  return 0xD00000000000001ALL;
}

uint64_t specialized CallContactPreflightClient.hasContact(_:)(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = MEMORY[0x1E4FBC860];
  unint64_t v25 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v7 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    unint64_t v12 = MEMORY[0x1E4FBC860];
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_14;
  }
LABEL_3:
  if (v7 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v7; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      MEMORY[0x1CB77D510](i, a1);
    }
    else {
      swift_retain();
    }
    uint64_t v10 = dispatch thunk of UsoEntity_common_PhoneCall.recipients.getter();
    swift_release();
    if (v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v6;
    }
    specialized Array.append<A>(contentsOf:)(v11);
  }
  swift_bridgeObjectRelease();
  unint64_t v12 = v25;
LABEL_15:
  uint64_t v13 = specialized Sequence.flatMap<A>(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    uint64_t v16 = v3 + 16;
    unint64_t v15 = v17;
    uint64_t v18 = v13;
    unint64_t v19 = v13 + ((*(unsigned __int8 *)(v16 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 64));
    uint64_t v20 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v21 = *(void *)(v16 + 56);
    v24[1] = v18;
    swift_bridgeObjectRetain();
    while (1)
    {
      v15(v5, v19, v2);
      if (UsoIdentifier.appBundleId.getter() == 0x73746361746E6F43 && v22 == 0xE800000000000000) {
        break;
      }
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*v20)(v5, v2);
      if (v23) {
        goto LABEL_25;
      }
      v19 += v21;
      if (!--v14)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    (*v20)(v5, v2);
LABEL_25:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t outlined destroy of PommesCandidateId?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for CallContactPreflightClient()
{
  return self;
}

uint64_t method lookup function for CallContactPreflightClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CallContactPreflightClient);
}

uint64_t dispatch thunk of CallContactPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of CallContactPreflightClient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t OfflineMusicPlaybackPreflightClient.__allocating_init(networkAvailabilityProvider:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

void *OfflineMusicPlaybackPreflightClient.preflightClientHandlerIdentifier.unsafeMutableAddressor()
{
  return &static OfflineMusicPlaybackPreflightClient.preflightClientHandlerIdentifier;
}

unint64_t static OfflineMusicPlaybackPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD000000000000023;
}

unint64_t static OfflineMusicPlaybackPreflightClient.overrideFeatureFlagDomain.getter()
{
  return 0xD000000000000011;
}

unint64_t static OfflineMusicPlaybackPreflightClient.overrideFeatureFlagKey.getter()
{
  return 0xD000000000000018;
}

uint64_t OfflineMusicPlaybackPreflightClient.makeAudioUnderstanding(pommesSearchRequest:)@<X0>(unint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v79 = (uint64_t)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v81 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  id v83 = (char *)&v78 - v7;
  uint64_t v87 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v86 = *(void *)(v87 - 8);
  MEMORY[0x1F4188790](v87);
  id v82 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v9 = *(void *)(v101 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v101);
  uint64_t v105 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unint64_t v104 = (char *)&v78 - v12;
  uint64_t v103 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v13 = *(void *)(v103 - 8);
  MEMORY[0x1F4188790](v103);
  id v102 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1F4188790](v15 - 8);
  id v85 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v99 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  id v91 = (char *)&v78 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v84 = (char *)&v78 - v23;
  uint64_t v24 = PommesSearchRequest.userParses.getter();
  uint64_t v25 = v24;
  uint64_t v26 = MEMORY[0x1E4FBC860];
  uint64_t v108 = MEMORY[0x1E4FBC860];
  uint64_t v100 = *(void *)(v24 + 16);
  if (v100)
  {
    unint64_t v80 = a1;
    a1 = 0;
    id v97 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v98 = v18 + 16;
    unsigned int v96 = *MEMORY[0x1E4FA2780];
    uint64_t v94 = (void (**)(char *, uint64_t))(v9 + 8);
    id v95 = (void (**)(char *, void, uint64_t))(v9 + 104);
    uint64_t v92 = v24;
    unint64_t v93 = (void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t v88 = (void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v89 = v18;
    uint64_t v90 = v17;
    os_log_type_t v27 = v91;
    Swift::Int v28 = v94;
    while (a1 < *(void *)(v25 + 16))
    {
      unint64_t v29 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      uint64_t v106 = *(void *)(v18 + 72);
      unint64_t v107 = v29;
      (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v27, v25 + v29 + v106 * a1, v17);
      uint64_t v30 = v102;
      Siri_Nlu_External_UserParse.parser.getter();
      uint64_t v31 = v18;
      unsigned int v32 = v104;
      Siri_Nlu_External_Parser.parserID.getter();
      (*v97)(v30, v103);
      uint64_t v33 = v17;
      uint64_t v34 = v105;
      uint64_t v35 = v101;
      (*v95)(v105, v96, v101);
      lazy protocol witness table accessor for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
      char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
      BOOL v37 = *v28;
      (*v28)(v34, v35);
      v37(v32, v35);
      if (v36)
      {
        (*v88)(v27, v33);
        uint64_t v17 = v33;
        uint64_t v18 = v31;
        uint64_t v25 = v92;
      }
      else
      {
        uint64_t v38 = *v93;
        (*v93)(v99, v27, v33);
        uint64_t v39 = v108;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v39 + 16) + 1, 1);
          uint64_t v39 = v108;
        }
        uint64_t v25 = v92;
        uint64_t v41 = v106;
        unint64_t v40 = v107;
        unint64_t v43 = *(void *)(v39 + 16);
        unint64_t v42 = *(void *)(v39 + 24);
        if (v43 >= v42 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
          uint64_t v39 = v108;
        }
        *(void *)(v39 + 16) = v43 + 1;
        unint64_t v44 = v39 + v40 + v43 * v41;
        uint64_t v17 = v90;
        v38((char *)v44, v99, v90);
        uint64_t v108 = v39;
        uint64_t v18 = v89;
        os_log_type_t v27 = v91;
      }
      if (v100 == ++a1)
      {
        uint64_t v26 = v108;
        a1 = v80;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_46;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  uint64_t v45 = v87;
  uint64_t v46 = v86;
  uint64_t v47 = (uint64_t)v85;
  if (*(void *)(v26 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v85, v26 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80)), v17);
    uint64_t v48 = 0;
  }
  else
  {
    uint64_t v48 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v47, v48, 1, v17);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v47, 1, v17) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    if (one-time initialization token for pommes == -1)
    {
LABEL_18:
      uint64_t v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)static Logger.pommes);
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v52 = 0;
        _os_log_impl(&dword_1C8F83000, v50, v51, "OfflineMusicPlaybackPreflightClient makeAudioUnderstanding : userParse not present", v52, 2u);
        MEMORY[0x1CB77E470](v52, -1, -1);
      }

      goto LABEL_43;
    }
LABEL_46:
    swift_once();
    goto LABEL_18;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v84, v47, v17);
  uint64_t v53 = Siri_Nlu_External_Span.matcherNames.getter();
  if (*(void *)(v53 + 16))
  {
    uint64_t v54 = (uint64_t)v83;
    (*(void (**)(char *, unint64_t, uint64_t))(v46 + 16))(v83, v53 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80)), v45);
    id v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
    v55(v54, 0, 1, v45);
  }
  else
  {
    id v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
    uint64_t v54 = (uint64_t)v83;
    v55((uint64_t)v83, 1, 1, v45);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v54, 1, v45) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v54, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    __swift_project_value_buffer(v56, (uint64_t)static Logger.pommes);
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl(&dword_1C8F83000, v57, v58, "OfflineMusicPlaybackPreflightClient makeAudioUnderstanding : userParse.userDialogAct not present", v59, 2u);
      MEMORY[0x1CB77E470](v59, -1, -1);
    }

LABEL_42:
    (*(void (**)(char *, uint64_t))(v18 + 8))(v84, v17);
LABEL_43:
    uint64_t v77 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(a1, 1, 1, v77);
  }
  uint64_t v60 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v82, v54, v45);
  type metadata accessor for AudioUsoIntent();
  uint64_t v61 = (uint64_t)v81;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v81, v60, v45);
  v55(v61, 0, 1, v45);
  if (!AudioUsoIntent.__allocating_init(userDialogAct:)(v61))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v73 = type metadata accessor for Logger();
    __swift_project_value_buffer(v73, (uint64_t)static Logger.pommes);
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v76 = 0;
      _os_log_impl(&dword_1C8F83000, v74, v75, "OfflineMusicPlaybackPreflightClient makeAudioUnderstanding : could not create AudioUsoIntent from userDialogAct", v76, 2u);
      MEMORY[0x1CB77E470](v76, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v46 + 8))(v82, v45);
    goto LABEL_42;
  }
  uint64_t v62 = swift_retain();
  uint64_t v63 = v79;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.init(from:)(v62, v79);
  uint64_t v64 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  uint64_t v65 = *(void *)(v64 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64) == 1)
  {
    uint64_t v66 = v18;
    unint64_t v67 = a1;
    outlined destroy of MediaUserStateCenter?(v63, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    __swift_project_value_buffer(v68, (uint64_t)static Logger.pommes);
    id v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl(&dword_1C8F83000, v69, v70, "OfflineMusicPlaybackPreflightClient makeAudioUnderstanding : could not create AudioUnderstanding from AudioUsoIntent", v71, 2u);
      MEMORY[0x1CB77E470](v71, -1, -1);
    }
    swift_release();

    (*(void (**)(char *, uint64_t))(v86 + 8))(v82, v87);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v84, v17);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v67, 1, 1, v64);
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v82, v45);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v84, v17);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v65 + 32))(a1, v63, v64);
    return (*(uint64_t (**)(unint64_t, void, uint64_t, uint64_t))(v65 + 56))(a1, 0, 1, v64);
  }
}

void closure #1 in OfflineMusicPlaybackPreflightClient.clientSearch(audioUnderstanding:clientSignals:requestId:pommesCandidateId:)(id a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 144);
    id v13 = a1;
    v12(a4, a5, a6, 1);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    id v15 = a1;
    id v16 = a1;
    oslog = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      v24[0] = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v25 = (uint64_t)a1;
      id v20 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v21 = String.init<A>(describing:)();
      uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
      _os_log_impl(&dword_1C8F83000, oslog, v17, "Local client search failed : %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v19, -1, -1);
      MEMORY[0x1CB77E470](v18, -1, -1);

      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
    }
    else
    {
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 136))(a4, a5, a6);
    swift_beginAccess();
    *(void *)(a7 + 16) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
}

uint64_t OfflineMusicPlaybackPreflightClient.init(networkAvailabilityProvider:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_1C90568C4()
{
  outlined consume of FeatureFlag(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x1F4186498](v0, 49, 7);
}

uint64_t OfflineMusicPlaybackPreflightClient.deinit()
{
  swift_release();
  return v0;
}

uint64_t OfflineMusicPlaybackPreflightClient.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance OfflineMusicPlaybackPreflightClient()
{
  return 0xD000000000000023;
}

id specialized OfflineMusicPlaybackPreflightClient.userDefaultOverride.getter()
{
  if (!AFIsInternalInstall()) {
    return 0;
  }
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  uint64_t v1 = (void *)MEMORY[0x1CB77CA90](0xD000000000000011, 0x80000001C919E9E0);
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2) {
    return 0;
  }
  uint64_t v3 = (void *)MEMORY[0x1CB77CA90](0xD000000000000018, 0x80000001C919EA00);
  id v4 = objc_msgSend(v2, sel_BOOLForKey_, v3);

  return v4;
}

uint64_t specialized OfflineMusicPlaybackPreflightClient.clientSearch(audioUnderstanding:clientSignals:requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v32 = a2;
  uint64_t v34 = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v33 + 64);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v31 = (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  uint64_t v30 = v13;
  *(void *)(v13 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v14 = (uint64_t *)(v13 + 16);
  type metadata accessor for AnalyticsComponentIdGenerator();
  uint64_t v15 = swift_allocObject();
  type metadata accessor for OnDeviceSearchInstrumentationUtil();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 0;
  *(void *)(v16 + 24) = v15;
  id v17 = objc_msgSend(self, sel_indexMatcher);
  type metadata accessor for MusicDomain();
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = specialized MusicDomain.init(spanMatcher:)((uint64_t)v17, v18);
  OnDeviceSearchInstrumentationUtil.logStartOnDeviceSearch(requestId:pommesCandidateId:indexType:)(a3, a4, a5, 1);
  uint64_t v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v12, v32, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v12, 0, 1, v20);
  uint64_t v22 = a5;
  uint64_t v23 = v31;
  outlined init with copy of PommesCandidateId?(v22, v31);
  unint64_t v24 = (*(unsigned __int8 *)(v33 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  unint64_t v25 = (v9 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = v16;
  v26[3] = a3;
  v26[4] = a4;
  outlined init with take of PommesCandidateId?(v23, (uint64_t)v26 + v24);
  *(void *)((char *)v26 + v25) = v30;
  os_log_type_t v27 = *(void (**)(uint64_t, char *, void, void (*)(void *, char), void *))(*(void *)v19 + 136);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v27(v34, v12, MEMORY[0x1E4FBC860], partial apply for closure #1 in OfflineMusicPlaybackPreflightClient.clientSearch(audioUnderstanding:clientSignals:requestId:pommesCandidateId:), v26);
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  swift_beginAccess();
  uint64_t v28 = *v14;
  swift_bridgeObjectRetain();
  swift_release();
  return v28;
}

uint64_t type metadata accessor for OfflineMusicPlaybackPreflightClient()
{
  return self;
}

uint64_t method lookup function for OfflineMusicPlaybackPreflightClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for OfflineMusicPlaybackPreflightClient);
}

uint64_t dispatch thunk of OfflineMusicPlaybackPreflightClient.__allocating_init(networkAvailabilityProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of OfflineMusicPlaybackPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t sub_1C9056E24()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t outlined init with copy of PommesCandidateId?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C9056EC4()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for PommesCandidateId();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_release();

  return MEMORY[0x1F4186498](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t outlined init with take of PommesCandidateId?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in OfflineMusicPlaybackPreflightClient.clientSearch(audioUnderstanding:clientSignals:requestId:pommesCandidateId:)(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2[2];
  uint64_t v8 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v10 = *(void *)((char *)v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in OfflineMusicPlaybackPreflightClient.clientSearch(audioUnderstanding:clientSignals:requestId:pommesCandidateId:)(a1, v4, v7, v8, v9, (uint64_t)v2 + v6, v10);
}

uint64_t lazy protocol witness table accessor for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t one-time initialization function for timeout()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static PreferredNavigationAppDataProvider.timeout);
  *(void *)__swift_project_value_buffer(v0, (uint64_t)static PreferredNavigationAppDataProvider.timeout) = 50;
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);

  return v1();
}

uint64_t PreferredNavigationAppDataProvider.timeout.unsafeMutableAddressor()
{
  if (one-time initialization token for timeout != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();

  return __swift_project_value_buffer(v0, (uint64_t)static PreferredNavigationAppDataProvider.timeout);
}

uint64_t static PreferredNavigationAppDataProvider.timeout.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for timeout != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static PreferredNavigationAppDataProvider.timeout);
  char v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

const char *PreferredNavigationAppDataProvider.firstPartyMapBundleId.unsafeMutableAddressor()
{
  return "com.apple.Maps";
}

uint64_t static PreferredNavigationAppDataProvider.firstPartyMapBundleId.getter()
{
  return 0x6C7070612E6D6F63;
}

uint64_t PreferredNavigationAppDataProvider.__allocating_init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1(a1, v11);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  uint64_t v17 = specialized PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)((uint64_t)v15, a2, a3, a4, a5, v10, v11, v12);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v17;
}

uint64_t PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1(a1, v11);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  uint64_t v17 = specialized PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)((uint64_t)v15, a2, a3, a4, a5, v5, v11, v12);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v17;
}

uint64_t static PreferredNavigationAppDataProvider.make(appDataProvider:preferences:)(uint64_t a1, void *a2)
{
  outlined init with copy of AppDataProviding(a1, (uint64_t)v14);
  type metadata accessor for PreferredNavigationAppDataProvider();
  memset(v12, 0, sizeof(v12));
  uint64_t v13 = 0;
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = v15;
  uint64_t v5 = v16;
  uint64_t v6 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  uint64_t v10 = specialized PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)((uint64_t)v8, (uint64_t)a2, 0, 0, (uint64_t)v12, v3, v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v10);
}

Swift::Void __swiftcall PreferredNavigationAppDataProvider.prepare()()
{
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = v1;
  id v3 = v1;
  if (!v1)
  {
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F57EE0]), sel_init);
    uint64_t v2 = *(void **)(v0 + 72);
  }
  *(void *)(v0 + 72) = v3;
  id v4 = v1;

  swift_beginAccess();
  outlined init with copy of MediaUserStateCenter?(v0 + 80, (uint64_t)&v5, &demangling cache variable for type metadata for ForegroundAppProvider?);
  if (v6)
  {
    outlined init with take of AppDataProviding(&v5, (uint64_t)v7);
  }
  else
  {
    uint64_t v8 = &type metadata for RunningBoardForegroundAppProvider;
    uint64_t v9 = &protocol witness table for RunningBoardForegroundAppProvider;
    outlined destroy of MediaUserStateCenter?((uint64_t)&v5, &demangling cache variable for type metadata for ForegroundAppProvider?);
  }
  outlined init with take of ForegroundAppProvider?((uint64_t)v7, (uint64_t)&v5);
  swift_beginAccess();
  outlined assign with take of ForegroundAppProvider?((uint64_t)&v5, v0 + 80);
  swift_endAccess();
}

uint64_t PreferredNavigationAppDataProvider.wait(timeout:)()
{
  return 0;
}

Swift::Void __swiftcall PreferredNavigationAppDataProvider.reset()()
{
  objc_msgSend(*(id *)(v0 + 64), sel_invalidate);
  uint64_t v1 = *(void **)(v0 + 64);
  *(void *)(v0 + 64) = 0;

  uint64_t v2 = *(void **)(v0 + 72);
  *(void *)(v0 + 72) = 0;

  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  outlined assign with take of ForegroundAppProvider?((uint64_t)v3, v0 + 80);
  swift_endAccess();
}

uint64_t PreferredNavigationAppDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v53 = *(void *)(v0 - 8);
  *(void *)&long long v54 = v0;
  MEMORY[0x1F4188790](v0);
  uint64_t v52 = (char *)&v44 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  uint64_t v56 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  id v55 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v47 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v46 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  uint64_t v45 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v50 = *(void *)(v11 - 8);
  uint64_t v51 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v44 - v18;
  uint64_t v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
  uint64_t v57 = *(void *)(v20 - 8);
  uint64_t v58 = v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = PreferredNavigationAppDataProvider.getUserPreferredNavigationApp()();
  if (!v24)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v26, v27)) {
      goto LABEL_14;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    unint64_t v29 = "PreferredNavigationAppDataProvider#fetch No user preferred navigation app found, returning nil";
    goto LABEL_13;
  }
  if (v23 == 0x6C7070612E6D6F63 && v24 == 0xEE007370614D2E65
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v26, v27)) {
      goto LABEL_14;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    unint64_t v29 = "PreferredNavigationAppDataProvider#fetch No user preferred third-party navigation app found, returning nil";
LABEL_13:
    _os_log_impl(&dword_1C8F83000, v26, v27, v29, v28, 2u);
    MEMORY[0x1CB77E470](v28, -1, -1);
LABEL_14:

    return 0;
  }
  Apple_Parsec_Siri_V2alpha_AppInfo.init()();
  Apple_Parsec_Siri_V2alpha_AppInfo.bundleID.setter();
  uint64_t v33 = v58;
  v59[3] = v58;
  v59[4] = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v59);
  (*(void (**)(uint64_t *, char *, uint64_t))(v57 + 16))(boxed_opaque_existential_1, v22, v33);
  defaultAnyTypeURLPrefix.getter();
  Google_Protobuf_Any.init(message:partial:typePrefix:)();
  uint64_t v35 = v44;
  uint64_t v36 = v46;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v19, 0, 1, v5);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.init()();
  (*(void (**)(char *, void, uint64_t))(v45 + 104))(v10, *MEMORY[0x1E4F89708], v8);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  outlined init with copy of MediaUserStateCenter?((uint64_t)v19, (uint64_t)v17, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v17, 1, v5) == 1)
  {
    Google_Protobuf_Any.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v7, v17, v5);
  }
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
  (*(void (**)(char *, void, uint64_t))(v48 + 104))(v47, *MEMORY[0x1E4F89B48], v49);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  BOOL v37 = v55;
  Apple_Parsec_Siri_V2alpha_ProfileSlice.init()();
  (*(void (**)(char *, void, void))(v53 + 104))(v52, *MEMORY[0x1E4F892C8], v54);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
  uint64_t v38 = v50;
  unint64_t v39 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
  uint64_t v40 = swift_allocObject();
  long long v54 = xmmword_1C91947A0;
  *(_OWORD *)(v40 + 16) = xmmword_1C91947A0;
  uint64_t v41 = v51;
  (*(void (**)(unint64_t, char *, uint64_t))(v38 + 16))(v40 + v39, v13, v51);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSlice>);
  uint64_t v42 = v56;
  unint64_t v43 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = v54;
  (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))(v31 + v43, v37, v35);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v41);
  outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v22, v58);
  return v31;
}

uint64_t PreferredNavigationAppDataProvider.getUserPreferredNavigationApp()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 72);
  if (v2)
  {
    id v3 = objc_msgSend(v2, sel_currentSession);
    if (v3)
    {

      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 16) = 0;
      uint64_t v48 = v4 + 16;
      *(void *)(v4 + 24) = 0;
      dispatch_semaphore_t v5 = dispatch_semaphore_create(0);
      uint64_t v6 = *(void **)(v0 + 64);
      uint64_t v7 = v6;
      id v8 = *(id *)(v1 + 64);
      if (!v6)
      {
        id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F57F18]), sel_init, v48);
        uint64_t v7 = *(void **)(v1 + 64);
      }
      *(void *)(v1 + 64) = v8;
      id v9 = v6;

      uint64_t v10 = *(void **)(v1 + 64);
      if (v10)
      {
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = v4;
        *(void *)(v11 + 24) = v5;
        uint64_t v51 = partial apply for closure #1 in PreferredNavigationAppDataProvider.getUserPreferredNavigationApp();
        uint64_t v52 = v11;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed String?, @guaranteed Error?) -> ();
        uint64_t v50 = &block_descriptor_8;
        uint64_t v12 = _Block_copy(aBlock);
        id v13 = v10;
        swift_retain();
        uint64_t v14 = v5;
        swift_release();
        objc_msgSend(v13, sel_fetchDockAppForCategory_completion_, 8, v12);
        _Block_release(v12);
      }
      uint64_t v15 = type metadata accessor for DispatchTime();
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = MEMORY[0x1F4188790](v15);
      uint64_t v19 = (char *)aBlock - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
      MEMORY[0x1F4188790](v17);
      uint64_t v21 = (char *)aBlock - v20 + 16;
      static DispatchTime.now()();
      if (one-time initialization token for timeout != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for DispatchTimeInterval();
      uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static PreferredNavigationAppDataProvider.timeout);
      MEMORY[0x1CB77C970](v21, v23);
      uint64_t v24 = *(void (**)(char *, uint64_t))(v16 + 8);
      v24(v21, v15);
      dispatch_semaphore_t v25 = v5;
      MEMORY[0x1CB77D1D0](v19);
      v24(v19, v15);
      if (static DispatchTimeoutResult.== infix(_:_:)())
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
        os_log_type_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v27, v28))
        {
          unint64_t v29 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v29 = 0;
          _os_log_impl(&dword_1C8F83000, v27, v28, "PreferredNavigationAppDataProvider#fetch timed out waiting for CarPlay dock app", v29, 2u);
          MEMORY[0x1CB77E470](v29, -1, -1);
        }
      }
      swift_beginAccess();
      unint64_t v30 = *(void *)(v4 + 24);
      if (v30)
      {
        uint64_t v31 = *(void *)(v4 + 16);
        uint64_t v32 = one-time initialization token for pommes;
        swift_bridgeObjectRetain();
        if (v32 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        __swift_project_value_buffer(v33, (uint64_t)static Logger.pommes);
        swift_bridgeObjectRetain_n();
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = (uint8_t *)swift_slowAlloc();
          uint64_t v37 = swift_slowAlloc();
          aBlock[0] = v37;
          *(_DWORD *)uint64_t v36 = 136315138;
          swift_bridgeObjectRetain();
          v53[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C8F83000, v34, v35, "PreferredNavigationAppDataProvider#fetch from CarPlay dock app bundle id: %s", v36, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v37, -1, -1);
          MEMORY[0x1CB77E470](v36, -1, -1);
          swift_release();
        }
        else
        {
          swift_release();

          swift_bridgeObjectRelease_n();
        }
        return v31;
      }
      swift_release();
    }
  }
  swift_beginAccess();
  outlined init with copy of MediaUserStateCenter?(v1 + 80, (uint64_t)aBlock, &demangling cache variable for type metadata for ForegroundAppProvider?);
  if (v50)
  {
    outlined init with copy of AppDataProviding((uint64_t)aBlock, (uint64_t)v53);
    outlined destroy of MediaUserStateCenter?((uint64_t)aBlock, &demangling cache variable for type metadata for ForegroundAppProvider?);
    uint64_t v38 = v54;
    uint64_t v39 = v55;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39);
    unint64_t v41 = v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    if (v41)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Logger.pommes);
      swift_bridgeObjectRetain_n();
      unint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        uint64_t v46 = swift_slowAlloc();
        aBlock[0] = v46;
        *(_DWORD *)uint64_t v45 = 136315138;
        swift_bridgeObjectRetain();
        v53[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v41, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C8F83000, v43, v44, "PreferredNavigationAppDataProvider#fetch from foreground app bundle id: %s", v45, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v46, -1, -1);
        MEMORY[0x1CB77E470](v45, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)aBlock, &demangling cache variable for type metadata for ForegroundAppProvider?);
    return 0;
  }
  return v31;
}

Swift::Int closure #1 in PreferredNavigationAppDataProvider.getUserPreferredNavigationApp()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a2)
  {
    swift_beginAccess();
    *(void *)(a4 + 16) = a1;
    *(void *)(a4 + 24) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
    id v9 = a3;
    id v10 = a3;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)id v13 = 138412290;
      if (a3)
      {
        id v15 = a3;
        uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v16 = 0;
      }
      *uint64_t v14 = v16;

      _os_log_impl(&dword_1C8F83000, v11, v12, "PreferredNavigationAppDataProvider#fetch failed from CarPlay dock with error: %@", v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v14, -1, -1);
      MEMORY[0x1CB77E470](v13, -1, -1);
    }
    else
    {
    }
  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  swift_retain();
  id v8 = a3;
  v4(v5, v7, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

id *PreferredNavigationAppDataProvider.deinit()
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));

  outlined destroy of MediaUserStateCenter?((uint64_t)(v0 + 10), &demangling cache variable for type metadata for ForegroundAppProvider?);
  return v0;
}

uint64_t PreferredNavigationAppDataProvider.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));

  outlined destroy of MediaUserStateCenter?((uint64_t)(v0 + 10), &demangling cache variable for type metadata for ForegroundAppProvider?);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance PreferredNavigationAppDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance PreferredNavigationAppDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance PreferredNavigationAppDataProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 224))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProvider.reset() in conformance PreferredNavigationAppDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

uint64_t specialized PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a6 + 40) = a7;
  *(void *)(a6 + 48) = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a6 + 16));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(boxed_opaque_existential_1, a1, a7);
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(void *)(a6 + 56) = a2;
  *(void *)(a6 + 64) = a3;
  *(void *)(a6 + 72) = a4;
  swift_beginAccess();
  outlined assign with take of ForegroundAppProvider?(a5, a6 + 80);
  swift_endAccess();
  return a6;
}

uint64_t type metadata accessor for PreferredNavigationAppDataProvider()
{
  return self;
}

uint64_t outlined init with take of ForegroundAppProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForegroundAppProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ForegroundAppProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForegroundAppProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo);
  }
  return result;
}

uint64_t method lookup function for PreferredNavigationAppDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PreferredNavigationAppDataProvider);
}

uint64_t dispatch thunk of PreferredNavigationAppDataProvider.__allocating_init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of PreferredNavigationAppDataProvider.prepare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of PreferredNavigationAppDataProvider.wait(timeout:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))() & 1;
}

uint64_t dispatch thunk of PreferredNavigationAppDataProvider.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PreferredNavigationAppDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  __int16 v4 = *(_WORD *)(a2 + 88);
  uint64_t v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 224);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = v3;
  __int16 v11 = v4;
  return v5(a1, v9);
}

uint64_t sub_1C9059088()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1C90590C0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

Swift::Int partial apply for closure #1 in PreferredNavigationAppDataProvider.getUserPreferredNavigationApp()(uint64_t a1, uint64_t a2, void *a3)
{
  return closure #1 in PreferredNavigationAppDataProvider.getUserPreferredNavigationApp()(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t AudioCacheHandler.__allocating_init()()
{
  return swift_allocObject();
}

id AudioCacheHandler.makeCacheable(pommesResponse:)(void *a1)
{
  unint64_t v40 = a1;
  uint64_t v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  uint64_t v44 = *(void *)(v1 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v1);
  uint64_t v55 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v40 - v4;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v9 = v8;
  if (v8 >> 62) {
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v10)
  {
    while (1)
    {
      __int16 v11 = (unint64_t *)MEMORY[0x1E4FBC860];
      uint64_t v58 = (void *)MEMORY[0x1E4FBC860];
      id result = (id)specialized ContiguousArray.reserveCapacity(_:)();
      if (v10 < 0) {
        break;
      }
      uint64_t v13 = 0;
      unint64_t v47 = v9 & 0xC000000000000001;
      unint64_t v41 = v9 + 32;
      uint64_t v42 = v10;
      uint64_t v52 = (void (**)(char *, uint64_t))(v44 + 8);
      uint64_t v53 = v44 + 16;
      uint64_t v51 = (void (**)(unint64_t, char *, uint64_t))(v44 + 32);
      uint64_t v54 = v5;
      unint64_t v43 = v9;
      while (v13 != v10)
      {
        if (v47) {
          id v20 = (id)MEMORY[0x1CB77D510](v13, v9);
        }
        else {
          id v20 = *(id *)(v41 + 8 * v13);
        }
        uint64_t v21 = v20;
        dispatch thunk of Experience.associatedEntities.setter();
        uint64_t v22 = (objc_class *)type metadata accessor for AudioExperience();
        uint64_t v23 = (void *)swift_dynamicCastClass();
        if (v23)
        {
          Class v48 = v22;
          uint64_t v50 = v13;
          id v57 = v23;
          id v49 = v21;
          uint64_t v24 = dispatch thunk of AudioExperience.serverAudioResults.getter();
          int64_t v25 = *(void *)(v24 + 16);
          if (v25)
          {
            uint64_t v56 = v11;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
            unint64_t v26 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
            uint64_t v46 = v24;
            unint64_t v27 = v24 + v26;
            uint64_t v28 = *(void *)(v44 + 72);
            unint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
            do
            {
              unint64_t v30 = v55;
              v29(v55, v27, v1);
              v29(v5, (unint64_t)v30, v1);
              Apple_Parsec_Siri_V2alpha_AudioItem.assetInfo.setter();
              (*v52)(v30, v1);
              uint64_t v31 = v56;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1);
                uint64_t v31 = v56;
              }
              unint64_t v33 = v31[2];
              unint64_t v32 = v31[3];
              if (v33 >= v32 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
                uint64_t v31 = v56;
              }
              v31[2] = v33 + 1;
              unint64_t v34 = (unint64_t)v31 + v26 + v33 * v28;
              uint64_t v5 = v54;
              (*v51)(v34, v54, v1);
              uint64_t v56 = v31;
              v27 += v28;
              --v25;
            }
            while (v25);
            swift_bridgeObjectRelease();
            uint64_t v10 = v42;
            unint64_t v9 = v43;
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v31 = v11;
          }
          id v14 = v57;
          dispatch thunk of Experience.pluginIdentifier.getter();

          id v15 = v14;
          dispatch thunk of Experience.queryConfidence.getter();

          id v16 = v15;
          Experience.userDialogAct.getter();

          MEMORY[0x1F4188790](v17);
          *(&v40 - 2) = v31;
          *(&v40 - 1) = &v57;
          id v18 = objc_allocWithZone(v48);
          AudioExperience.init(pluginId:queryConfidence:userDialogAct:builder:)();
          swift_bridgeObjectRelease();
          id v19 = v57;

          __int16 v11 = (unint64_t *)MEMORY[0x1E4FBC860];
          uint64_t v13 = v50;
        }
        ++v13;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v13 == v10)
        {
          os_log_type_t v35 = v58;
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_23:
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      if (!v10) {
        goto LABEL_24;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_24:
    swift_bridgeObjectRelease();
    os_log_type_t v35 = (void *)MEMORY[0x1E4FBC860];
LABEL_25:
    uint64_t v36 = type metadata accessor for PommesResponse();
    MEMORY[0x1F4188790](v36);
    uint64_t v37 = v40;
    *(&v40 - 2) = v35;
    *(&v40 - 1) = v37;
    uint64_t v38 = PommesResponse.__allocating_init(_:)();
    swift_bridgeObjectRelease();
    if (v38)
    {
      return (id)v38;
    }
    else
    {
      uint64_t v39 = v40;
      return v39;
    }
  }
  return result;
}

uint64_t closure #2 in closure #1 in AudioCacheHandler.makeCacheable(pommesResponse:)(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
  MEMORY[0x1F4188790](v10 - 8);
  os_log_type_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  AudioExperience.Builder.serverAudioResults.setter();
  id v13 = *a3;
  AudioExperience.audioUnderstanding.getter();

  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 0, 1, v14);
  AudioExperience.Builder.audioUnderstanding.setter();
  id v15 = *a3;
  AudioExperience.playbackSignals.getter();

  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 0, 1, v16);
  AudioExperience.Builder.playbackSignals.setter();
  id v17 = *a3;
  dispatch thunk of AudioExperience.internalSignals.getter();

  AudioExperience.Builder.internalSignals.setter();
  id v18 = *a3;
  AudioExperience.pegasusAudioType.getter();

  AudioExperience.Builder.pegasusAudioType.setter();
  id v19 = *a3;
  AudioExperience.launchID.getter();

  AudioExperience.Builder.launchID.setter();
  id v20 = *a3;
  AudioExperience.systemExtensionBundleID.getter();

  AudioExperience.Builder.systemExtensionBundleID.setter();
  id v21 = *a3;
  AudioExperience.boltProxiedBundleID.getter();

  AudioExperience.Builder.boltProxiedBundleID.setter();
  id v22 = *a3;
  AudioExperience.shouldPerformAppSelection.getter();

  AudioExperience.Builder.shouldPerformAppSelection.setter();
  id v23 = *a3;
  AudioExperience.audioClientComponent.getter();

  uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v6, 0, 1, v24);
  AudioExperience.Builder.audioClientComponent.setter();
  id v25 = *a3;
  dispatch thunk of AudioExperience.isGlideEligible.getter();

  AudioExperience.Builder.isGlideEligible.setter();
  id v26 = *a3;
  dispatch thunk of AudioExperience.networkAvailableAtRequest.getter();

  return AudioExperience.Builder.networkAvailableAtRequest.setter();
}

uint64_t closure #2 in AudioCacheHandler.makeCacheable(pommesResponse:)()
{
  uint64_t v0 = type metadata accessor for PommesSearchReason();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v1 - 8);
  swift_bridgeObjectRetain();
  PommesResponse.Builder.experiences.setter();
  dispatch thunk of PommesResponse.clientResults.getter();
  PommesResponse.Builder.clientResults.setter();
  PommesResponse.conversationContext.getter();
  PommesResponse.Builder.conversationContext.setter();
  PommesResponse.metadataDomainName.getter();
  PommesResponse.Builder.metadataDomainName.setter();
  dispatch thunk of PommesResponse.renderedTexts.getter();
  PommesResponse.Builder.renderedTexts.setter();
  dispatch thunk of PommesResponse.redactedRenderedTexts.getter();
  PommesResponse.Builder.redactedRenderedTexts.setter();
  dispatch thunk of PommesResponse.pegasusDomainFlowStepLog.getter();
  PommesResponse.Builder.pegasusDomainFlowStepLog.setter();
  dispatch thunk of PommesResponse.pegasusDomainUserSensitiveTier1Log.getter();
  PommesResponse.Builder.pegasusDomainUserSensitiveTier1Log.setter();
  dispatch thunk of PommesResponse.listenAfterSpeaking.getter();
  PommesResponse.Builder.listenAfterSpeaking.setter();
  PommesResponse.requestId.getter();
  PommesResponse.Builder.requestId.setter();
  PommesResponse.pommesCandidateId.getter();
  PommesResponse.Builder.pommesCandidateId.setter();
  PommesResponse.isHandledByPreflight.getter();
  PommesResponse.Builder.isHandledByPreflight.setter();
  PommesResponse.preflightClientHandlerIdentifier.getter();
  PommesResponse.Builder.preflightClientHandlerIdentifier.setter();
  dispatch thunk of PommesResponse.taskStepLogs.getter();
  PommesResponse.Builder.taskStepLogs.setter();
  dispatch thunk of PommesResponse.userSensitiveTier1Logs.getter();
  PommesResponse.Builder.userSensitiveTier1Logs.setter();
  dispatch thunk of PommesResponse.searchReason.getter();
  PommesResponse.Builder.searchReason.setter();
  PommesResponse.searchRequestUtterance.getter();
  PommesResponse.Builder.searchRequestUtterance.setter();
  PommesResponse.sharedUserId.getter();
  return PommesResponse.Builder.sharedUserId.setter();
}

uint64_t AudioCacheHandler.deinit()
{
  return v0;
}

uint64_t AudioCacheHandler.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t AudioCacheHandler.init()()
{
  return v0;
}

uint64_t protocol witness for CacheHandling.makeCacheable(pommesResponse:) in conformance AudioCacheHandler()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t partial apply for closure #2 in AudioCacheHandler.makeCacheable(pommesResponse:)()
{
  return closure #2 in AudioCacheHandler.makeCacheable(pommesResponse:)();
}

uint64_t partial apply for closure #2 in closure #1 in AudioCacheHandler.makeCacheable(pommesResponse:)(uint64_t a1)
{
  return closure #2 in closure #1 in AudioCacheHandler.makeCacheable(pommesResponse:)(a1, *(void *)(v1 + 16), *(id **)(v1 + 24));
}

uint64_t type metadata accessor for AudioCacheHandler()
{
  return self;
}

uint64_t method lookup function for AudioCacheHandler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioCacheHandler);
}

uint64_t dispatch thunk of AudioCacheHandler.makeCacheable(pommesResponse:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of AudioCacheHandler.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5Tm(a1, a2, a3, a4, MEMORY[0x1E4F88630], (void (*)(void, uint64_t, void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4FA2B48]);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D28_Product_Proto_SemanticValueVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5Tm(a1, a2, a3, a4, MEMORY[0x1E4F88640], (void (*)(void, uint64_t, void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4FA2B60]);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v21 = a1;
  uint64_t v22 = a2;
  uint64_t v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery();
  uint64_t v6 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (v9)
  {
    uint64_t v23 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    uint64_t v10 = v23;
    unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v11 = a3 + v19;
    uint64_t v18 = *(void *)(v6 + 72);
    os_log_type_t v12 = (void (**)(unint64_t, char *, uint64_t))(v6 + 32);
    while (1)
    {
      v21(v11);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v23 = v10;
      unint64_t v14 = *(void *)(v10 + 16);
      unint64_t v13 = *(void *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v23;
      }
      *(void *)(v10 + 16) = v14 + 1;
      uint64_t v15 = v18;
      (*v12)(v10 + v19 + v14 * v18, v8, v20);
      v11 += v15;
      if (!--v9) {
        return v10;
      }
    }
    swift_release();
  }
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D18_Nlu_External_SpanVG_10PegasusAPI013Apple_Parsec_D21_Context_ClientEntityVsAE_pTg5(void (*a1)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  uint64_t v6 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (v9)
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    uint64_t v10 = v22;
    uint64_t v11 = *(void *)(type metadata accessor for Siri_Nlu_External_Span() - 8);
    uint64_t v12 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v17 = *(void *)(v11 + 72);
    uint64_t v16 = v6 + 32;
    while (1)
    {
      v19(v12, &v21);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v22 = v10;
      unint64_t v14 = *(void *)(v10 + 16);
      unint64_t v13 = *(void *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v22;
      }
      *(void *)(v10 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14, v8, v18);
      v12 += v17;
      if (!--v9) {
        return v10;
      }
    }
    swift_release();
  }
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D32_Nlu_External_UtteranceAlignmentVG_10PegasusAPI013Apple_Parsec_d21_Context_ClientEntityI0Vs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5Tm(a1, a2, a3, a4, MEMORY[0x1E4F89558], (void (*)(void, uint64_t, void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4FA2950]);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology18UtteranceAlignmentVG_10PegasusAPI013Apple_Parsec_d21_Context_ClientEntityG0Vs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5Tm(a1, a2, a3, a4, MEMORY[0x1E4F89558], (void (*)(void, uint64_t, void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4FA3018]);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5Tm(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(void, uint64_t, void), uint64_t (*a7)(void))
{
  uint64_t v10 = v7;
  id v25 = a1;
  uint64_t v26 = a2;
  uint64_t v24 = a5(0);
  uint64_t v12 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  unint64_t v14 = (char *)v22 - v13;
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = MEMORY[0x1E4FBC860];
  if (v15)
  {
    uint64_t v27 = MEMORY[0x1E4FBC860];
    v22[0] = a6;
    a6(0, v15, 0);
    uint64_t v16 = v27;
    uint64_t v17 = *(void *)(a7(0) - 8);
    uint64_t v18 = a3 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    uint64_t v23 = *(void *)(v17 + 72);
    v22[1] = v12 + 32;
    while (1)
    {
      v25(v18);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      uint64_t v27 = v16;
      unint64_t v20 = *(void *)(v16 + 16);
      unint64_t v19 = *(void *)(v16 + 24);
      if (v20 >= v19 >> 1)
      {
        ((void (*)(BOOL, unint64_t, uint64_t))v22[0])(v19 > 1, v20 + 1, 1);
        uint64_t v16 = v27;
      }
      *(void *)(v16 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v16+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v20, v14, v24);
      v18 += v23;
      if (!--v15) {
        return v16;
      }
    }
    swift_release();
  }
  return v16;
}

uint64_t static ICMediaUserStateCenter.sharedStateCenter.getter@<X0>(void *a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_shared);
  uint64_t result = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for ICMediaUserStateCenter);
  a1[3] = result;
  a1[4] = &protocol witness table for ICMediaUserStateCenter;
  *a1 = v2;
  return result;
}

uint64_t createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized Sequence.compactMap<A>(_:)(a1, a4);
  swift_bridgeObjectRelease();
  createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(v10, a2, a3, a5);

  return swift_bridgeObjectRelease();
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  int64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

id ICMusicUserState.isUserHistoryModifiable.getter()
{
  return objc_msgSend(v0, sel_usesListeningHistory);
}

id ICMusicUserState.userToken.getter()
{
  id v1 = objc_msgSend(v0, sel_libraryAuthTokenStatus);
  id v2 = v1;
  if (!v1) {
    return 0;
  }
  id v3 = objc_msgSend(v1, sel_token);

  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_token);

    id v3 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v3;
}

id ICMusicUserState.lastError.getter()
{
  id v1 = objc_msgSend(v0, sel_libraryAuthTokenStatus);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  id v3 = objc_msgSend(v1, sel_lastError);

  return v3;
}

uint64_t ICMusicUserState.lastUpdatedDate.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_libraryAuthTokenStatus);
  if (v3)
  {
    id v4 = v3;
    id v5 = objc_msgSend(v3, sel_lastUpdatedDate);

    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    MEMORY[0x1F4188790](v6 - 8);
    uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v5)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v9 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
    }
    else
    {
      uint64_t v13 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 1, 1, v13);
    }
    return outlined init with take of PommesSearchReason?((uint64_t)v8, a1, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    return v11(a1, 1, 1, v10);
  }
}

id ICMusicUserState.isSubscribedToGlide.getter()
{
  id v1 = objc_msgSend(v0, sel_subscriptionStatus);
  if (v1
    || (id result = objc_msgSend(v0, sel_lightweightSubscriptionStatus),
        (id v1 = result) != 0))
  {
    id v3 = objc_msgSend(v1, sel_statusType);

    return (id)(v3 == (id)3);
  }
  return result;
}

uint64_t ICMusicUserState.itunesSubscriptionStatus.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_subscriptionStatus);
  if (v3 && (id v4 = v3, v5 = objc_msgSend(v3, sel_isMatchEnabled), v4, v5)) {
    uint64_t v6 = (unsigned int *)MEMORY[0x1E4F89B00];
  }
  else {
    uint64_t v6 = (unsigned int *)MEMORY[0x1E4F89B08];
  }
  uint64_t v7 = *v6;
  uint64_t matched = type metadata accessor for Apple_Parsec_Siri_V2alpha_ITunesMatchSubscriptionStatus();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(matched - 8) + 104);

  return v9(a1, v7, matched);
}

uint64_t ICMusicUserState.xpabCookie.getter()
{
  return ICMusicUserState.xpabCookie.getter((SEL *)&selRef_xpab);
}

uint64_t ICMusicUserState.itfeCookie.getter()
{
  return ICMusicUserState.xpabCookie.getter((SEL *)&selRef_itfe);
}

uint64_t ICMusicUserState.xpabCookie.getter(SEL *a1)
{
  id v3 = objc_msgSend(v1, sel_cookies);
  id v4 = v3;
  if (!v3) {
    return 0;
  }
  id v5 = [v3 *a1];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v6;
}

uint64_t ICMusicUserState.isGlideEligible.getter()
{
  uint64_t v0 = ICMusicUserState.eligibleOffers.getter();
  char v1 = specialized Sequence<>.contains(_:)(0x57454956455250, 0xE700000000000000, v0);
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t protocol witness for MusicUserState.lastUpdatedDate.getter in conformance ICMusicUserState@<X0>(uint64_t a1@<X8>)
{
  return ICMusicUserState.lastUpdatedDate.getter(a1);
}

double ICMediaUserState.musicUserState.getter@<D0>(uint64_t a1@<X8>)
{
  return ICMediaUserState.musicUserState.getter((SEL *)&selRef_music, &lazy cache variable for type metadata for ICMusicUserState, (uint64_t)&protocol witness table for ICMusicUserState, a1);
}

uint64_t protocol witness for MediaUserState.homeUserIDs.getter in conformance ICMediaUserState()
{
  id v1 = objc_msgSend(*v0, sel_homeUserIDs);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t protocol witness for MediaUserState.alternateDSID.getter in conformance ICMediaUserState()
{
  id v1 = objc_msgSend(*v0, sel_alternateDSID);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

double ICMediaUserStateCenter.activeState.getter@<D0>(uint64_t a1@<X8>)
{
  return ICMediaUserState.musicUserState.getter((SEL *)&selRef_activeUserState, &lazy cache variable for type metadata for ICMediaUserState, (uint64_t)&protocol witness table for ICMediaUserState, a1);
}

double ICMediaUserState.musicUserState.getter@<D0>(SEL *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  id v8 = [v4 *a1];
  if (v8)
  {
    id v9 = v8;
    *(void *)(a4 + 24) = type metadata accessor for CNContactStore(0, a2);
    *(void *)(a4 + 32) = a3;
    *(void *)a4 = v9;
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t ICMediaUserStateCenter.allStates.getter()
{
  id v1 = objc_msgSend(v0, sel_allUserStates);
  uint64_t v2 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for ICMediaUserState);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v22 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v22;
    unint64_t v18 = v3 & 0xC000000000000001;
    do
    {
      if (v18) {
        id v8 = (id)MEMORY[0x1CB77D510](v6, v3);
      }
      else {
        id v8 = *(id *)(v3 + 8 * v6 + 32);
      }
      uint64_t v20 = v2;
      uint64_t v21 = &protocol witness table for ICMediaUserState;
      v19[0] = v8;
      uint64_t v22 = v7;
      unint64_t v10 = *(void *)(v7 + 16);
      unint64_t v9 = *(void *)(v7 + 24);
      uint64_t v11 = &protocol witness table for ICMediaUserState;
      uint64_t v12 = v2;
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v12 = v20;
        uint64_t v11 = v21;
      }
      ++v6;
      uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, v12);
      MEMORY[0x1F4188790](v13);
      uint64_t v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v16 + 16))(v15);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, (uint64_t)v15, &v22, v12, (uint64_t)v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      uint64_t v7 = v22;
    }
    while (v4 != v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  __break(1u);
  return result;
}

void ICMediaUserStateCenter.refreshStates(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  v7[4] = partial apply for closure #1 in ICMediaUserStateCenter.refreshStates(completion:);
  v7[5] = v5;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed [ICMediaUserState], @guaranteed Error?) -> ();
  v7[3] = &block_descriptor_9;
  uint64_t v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_refreshUserStatesWithCompletion_, v6);
  _Block_release(v6);
}

uint64_t closure #1 in ICMediaUserStateCenter.refreshStates(completion:)(unint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (!v6)
  {
LABEL_16:
    a3(v7, a2);
    return swift_bridgeObjectRelease();
  }
  uint64_t v23 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = a2;
    unint64_t v19 = a3;
    uint64_t v7 = v23;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = MEMORY[0x1CB77D510](v9, a1);
        uint64_t v23 = v7;
        unint64_t v12 = *(void *)(v7 + 16);
        unint64_t v11 = *(void *)(v7 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          uint64_t v7 = v23;
        }
        ++v9;
        uint64_t v21 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for ICMediaUserState);
        uint64_t v22 = &protocol witness table for ICMediaUserState;
        *(void *)&long long v20 = v10;
        *(void *)(v7 + 16) = v12 + 1;
        outlined init with take of AppDataProviding(&v20, v7 + 40 * v12 + 32);
      }
      while (v6 != v9);
    }
    else
    {
      uint64_t v13 = (void **)(a1 + 32);
      do
      {
        uint64_t v14 = *v13;
        uint64_t v23 = v7;
        unint64_t v16 = *(void *)(v7 + 16);
        unint64_t v15 = *(void *)(v7 + 24);
        id v17 = v14;
        if (v16 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
          uint64_t v7 = v23;
        }
        uint64_t v21 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for ICMediaUserState);
        uint64_t v22 = &protocol witness table for ICMediaUserState;
        *(void *)&long long v20 = v17;
        *(void *)(v7 + 16) = v16 + 1;
        outlined init with take of AppDataProviding(&v20, v7 + 40 * v16 + 32);
        ++v13;
        --v6;
      }
      while (v6);
    }
    a3 = v19;
    a2 = v18;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed [ICMediaUserState], @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for ICMediaUserState);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t protocol witness for static MediaUserStateCenter.sharedStateCenter.getter in conformance ICMediaUserStateCenter@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  id v4 = objc_msgSend(self, sel_shared);
  uint64_t result = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for ICMediaUserStateCenter);
  a2[3] = result;
  a2[4] = a1;
  *a2 = v4;
  return result;
}

double protocol witness for MediaUserStateCenter.activeState.getter in conformance ICMediaUserStateCenter@<D0>(uint64_t a1@<X8>)
{
  return protocol witness for MediaUserState.musicUserState.getter in conformance ICMediaUserState((SEL *)&selRef_activeUserState, &lazy cache variable for type metadata for ICMediaUserState, (uint64_t)&protocol witness table for ICMediaUserState, a1);
}

double protocol witness for MediaUserState.musicUserState.getter in conformance ICMediaUserState@<D0>(SEL *a1@<X2>, unint64_t *a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  id v8 = [*v4 *a1];
  if (v8)
  {
    id v9 = v8;
    *(void *)(a4 + 24) = type metadata accessor for CNContactStore(0, a2);
    *(void *)(a4 + 32) = a3;
    *(void *)a4 = v9;
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t protocol witness for MediaUserStateCenter.allStates.getter in conformance ICMediaUserStateCenter()
{
  return ICMediaUserStateCenter.allStates.getter();
}

void protocol witness for MediaUserStateCenter.refreshStates(completion:) in conformance ICMediaUserStateCenter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  v8[4] = closure #1 in ICMediaUserStateCenter.refreshStates(completion:)partial apply;
  v8[5] = v6;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed (@guaranteed [ICMediaUserState], @guaranteed Error?) -> ();
  v8[3] = &block_descriptor_7;
  uint64_t v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_refreshUserStatesWithCompletion_, v7);
  _Block_release(v7);
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of AppDataProviding(&v12, v10 + 40 * a1 + 32);
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AmpUserState?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v28 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v27 = (char *)v23 - v12;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return MEMORY[0x1E4FBC860];
  }
  v23[0] = a1;
  v23[1] = v2;
  uint64_t v14 = (void *)(a1 + 32);
  unint64_t v15 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v25 = v11;
  unint64_t v16 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  swift_bridgeObjectRetain();
  unint64_t v17 = MEMORY[0x1E4FBC860];
  uint64_t v26 = a2;
  uint64_t v24 = v15;
  do
  {
    createAMPUserState(mediaUserState:muxUserInfo:)(v14, a2, (uint64_t)v7);
    if ((*v15)(v7, 1, v8) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AmpUserState?);
    }
    else
    {
      uint64_t v18 = *v16;
      unint64_t v19 = v27;
      (*v16)(v27, v7, v8);
      v18(v28, v19, v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, v17);
      }
      unint64_t v21 = *(void *)(v17 + 16);
      unint64_t v20 = *(void *)(v17 + 24);
      if (v21 >= v20 >> 1) {
        unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, v17);
      }
      *(void *)(v17 + 16) = v21 + 1;
      v18((char *)(v17+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v21), v28, v8);
      a2 = v26;
      unint64_t v15 = v24;
    }
    v14 += 5;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_1C905B85C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in ICMediaUserStateCenter.refreshStates(completion:)(unint64_t a1, uint64_t a2)
{
  return closure #1 in ICMediaUserStateCenter.refreshStates(completion:)(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t dispatch thunk of MusicUserState.isUserHistoryModifiable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MusicUserState.userToken.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MusicUserState.lastError.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MusicUserState.lastUpdatedDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MusicUserState.ampSubscriptionStatus.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of MusicUserState.eligibleOffers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of MusicUserState.isSubscribedToGlide.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of MusicUserState.itunesSubscriptionStatus.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of MusicUserState.xpabCookie.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of MusicUserState.itfeCookie.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of MusicUserState.isGlideEligible.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of MediaUserState.musicUserState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MediaUserState.storefrontIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MediaUserState.homeUserIDs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MediaUserState.isActive.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MediaUserState.alternateDSID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static MediaUserStateCenter.sharedStateCenter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MediaUserStateCenter.activeState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MediaUserStateCenter.allStates.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MediaUserStateCenter.refreshStates(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  String.index(before:)();
  return String.subscript.getter();
}

uint64_t AFSpeechRecognition.toAsrHypotheses()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
  MEMORY[0x1F4188790](v1 - 8);
  unint64_t v3 = (char *)&v126 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_AsrHypothesis();
  uint64_t v140 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  unsigned int v146 = (char *)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  Class v142 = (char *)&v126 - v11;
  uint64_t v168 = type metadata accessor for Siri_Nlu_External_AsrTokenInformation();
  uint64_t v166 = *(void *)(v168 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v168);
  v167 = (char *)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v15 = (char *)&v126 - v14;
  id v16 = objc_msgSend(v0, sel_utterances);
  if (!v16)
  {
LABEL_126:
    if (one-time initialization token for pommes != -1) {
      goto LABEL_151;
    }
    goto LABEL_127;
  }
  unint64_t v17 = v16;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for AFSpeechUtterance);
  unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v19 = objc_msgSend(v0, sel_phrases);
  if (!v19)
  {
    swift_bridgeObjectRelease();
    goto LABEL_126;
  }
  unint64_t v20 = v19;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for AFSpeechPhrase);
  uint64_t v145 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v139 = v18;
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v138 = v21;
  if (!v21)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v149 = v139 & 0xC000000000000001;
  uint64_t v137 = v139 & 0xFFFFFFFFFFFFFF8;
  unint64_t v136 = v139 + 32;
  uint64_t v22 = v145 & 0xFFFFFFFFFFFFFF8;
  uint64_t v150 = v145 & 0xFFFFFFFFFFFFFF8;
  if (v145 < 0) {
    uint64_t v22 = v145;
  }
  uint64_t v126 = v22;
  unint64_t v153 = v145 & 0xC000000000000001;
  v147 = (id *)(v145 + 32);
  uint64_t v162 = v166 + 32;
  uint64_t v163 = (void (**)(char *, char *, uint64_t))(v166 + 16);
  uint64_t v161 = v166 + 8;
  id v131 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  id v127 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  unint64_t v23 = 0;
  uint64_t v130 = (void (**)(char *, char *, uint64_t))(v140 + 16);
  uint64_t v129 = v140 + 32;
  uint64_t v128 = v140 + 8;
  unint64_t v148 = MEMORY[0x1E4FBC860];
  unint64_t v135 = v3;
  unint64_t v24 = v139;
  uint64_t v134 = v4;
  unint64_t v25 = v145;
  id v133 = v7;
  uint64_t v132 = v8;
  uint64_t v26 = v138;
  while (1)
  {
    if (v149)
    {
      id v27 = (id)MEMORY[0x1CB77D510](v23, v24);
      BOOL v28 = __OFADD__(v23, 1);
      unint64_t v29 = v23 + 1;
      if (v28) {
        goto LABEL_144;
      }
    }
    else
    {
      if (v23 >= *(void *)(v137 + 16)) {
        goto LABEL_149;
      }
      id v27 = *(id *)(v136 + 8 * v23);
      BOOL v28 = __OFADD__(v23, 1);
      unint64_t v29 = v23 + 1;
      if (v28)
      {
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        swift_once();
LABEL_127:
        uint64_t v121 = type metadata accessor for Logger();
        __swift_project_value_buffer(v121, (uint64_t)static Logger.pommes);
        uint64_t v122 = Logger.logObject.getter();
        os_log_type_t v123 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v122, v123))
        {
          Class v124 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)Class v124 = 0;
          _os_log_impl(&dword_1C8F83000, v122, v123, "AFSpeechRecognition utterances/phrases is nil", v124, 2u);
          MEMORY[0x1CB77E470](v124, -1, -1);
        }

        return MEMORY[0x1E4FBC860];
      }
    }
    unint64_t v156 = v29;
    id v157 = v27;
    id v30 = objc_msgSend(v27, sel_interpretationIndices, v126);
    if (!v30) {
      goto LABEL_113;
    }
    uint64_t v31 = v30;
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    unint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v33 = v32;
    unint64_t v34 = v32 >> 62;
    unint64_t v154 = v33;
    if (v34) {
      break;
    }
    uint64_t v159 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v25 >> 62) {
      goto LABEL_105;
    }
LABEL_20:
    if (v159 != *(void *)(v150 + 16)) {
      goto LABEL_112;
    }
    uint64_t v175 = 0;
    unint64_t v176 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    if (v159) {
      goto LABEL_22;
    }
LABEL_108:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_109:
    unint64_t v42 = MEMORY[0x1E4FBC860];
LABEL_110:
    Siri_Nlu_External_AsrHypothesis.init()();
    uint64_t v173 = v175;
    unint64_t v174 = v176;
    uint64_t v171 = 0x2B5D735C5BLL;
    unint64_t v172 = 0xE500000000000000;
    uint64_t v169 = 32;
    unint64_t v170 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v173 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    unint64_t v174 = v98;
    uint64_t v99 = type metadata accessor for CharacterSet();
    uint64_t v100 = *(void *)(v99 - 8);
    MEMORY[0x1F4188790](v99);
    id v102 = (char *)&v126 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
    static CharacterSet.whitespacesAndNewlines.getter();
    StringProtocol.trimmingCharacters(in:)();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v102, v99);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v103 = v142;
    Siri_Nlu_External_AsrHypothesis.utterance.setter();
    objc_msgSend(v157, sel_confidenceScore);
    Siri_Nlu_External_AsrHypothesis.probability.setter();
    MEMORY[0x1CB779880](v42);
    uint64_t v104 = type metadata accessor for UUID();
    uint64_t v105 = *(void *)(v104 - 8);
    MEMORY[0x1F4188790](v104);
    unint64_t v107 = (char *)&v126 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0);
    UUID.init()();
    uint64_t v108 = (uint64_t)v135;
    static ConversionUtils.convertUuidToProto(uuid:)();
    (*(void (**)(char *, uint64_t))(v105 + 8))(v107, v104);
    uint64_t v109 = v134;
    if ((*v131)(v108, 1, v134) == 1)
    {
      Siri_Nlu_External_UUID.init()();
      outlined destroy of Siri_Nlu_External_UUID?(v108);
    }
    else
    {
      (*v127)(v133, v108, v109);
    }
    uint64_t v114 = v132;
    uint64_t v26 = v138;
    Siri_Nlu_External_AsrHypothesis.id.setter();
    (*v130)(v146, v103, v114);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v24 = v139;
    unint64_t v25 = v145;
    if (isUniquelyReferenced_nonNull_native) {
      unint64_t v116 = v148;
    }
    else {
      unint64_t v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v148 + 16) + 1, 1, v148);
    }
    unint64_t v118 = *(void *)(v116 + 16);
    unint64_t v117 = *(void *)(v116 + 24);
    if (v118 >= v117 >> 1) {
      unint64_t v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v117 > 1, v118 + 1, 1, v116);
    }
    *(void *)(v116 + 16) = v118 + 1;
    uint64_t v119 = v140;
    unint64_t v120 = (*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
    unint64_t v148 = v116;
    (*(void (**)(unint64_t, char *, uint64_t))(v140 + 32))(v116 + v120 + *(void *)(v140 + 72) * v118, v146, v114);

    (*(void (**)(char *, uint64_t))(v119 + 8))(v103, v114);
LABEL_10:
    unint64_t v23 = v156;
    if (v156 == v26)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v148;
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v33 = v154;
  uint64_t v159 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!(v25 >> 62)) {
    goto LABEL_20;
  }
LABEL_105:
  swift_bridgeObjectRetain();
  uint64_t v97 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  BOOL v96 = v159 == v97;
  unint64_t v33 = v154;
  if (!v96)
  {
LABEL_112:
    swift_bridgeObjectRelease();
LABEL_113:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v110 = type metadata accessor for Logger();
    __swift_project_value_buffer(v110, (uint64_t)static Logger.pommes);
    uint64_t v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v111, v112))
    {
      id v113 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v113 = 0;
      _os_log_impl(&dword_1C8F83000, v111, v112, "Phrase length is not the same as interpretationIndices.", v113, 2u);
      MEMORY[0x1CB77E470](v113, -1, -1);
    }

    goto LABEL_10;
  }
  uint64_t v175 = 0;
  unint64_t v176 = 0xE000000000000000;
  swift_bridgeObjectRetain_n();
  uint64_t v159 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v159) {
    goto LABEL_108;
  }
LABEL_22:
  if (v153)
  {
    id v35 = (id)MEMORY[0x1CB77D510](0, v25);
  }
  else
  {
    if (!*(void *)(v150 + 16)) {
      goto LABEL_150;
    }
    id v35 = *v147;
  }
  id v36 = v35;
  if (!v34)
  {
    uint64_t v37 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v38 = v35;
    if (v37) {
      goto LABEL_27;
    }
    goto LABEL_102;
  }
  swift_bridgeObjectRetain();
  unint64_t v33 = v154;
  uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v38 = v36;
  if (!v37)
  {
LABEL_102:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_109;
  }
LABEL_27:
  uint64_t v151 = v37;
  int v39 = 0;
  unint64_t v40 = 0;
  unint64_t v152 = v33 & 0xC000000000000001;
  uint64_t v144 = v33 & 0xFFFFFFFFFFFFFF8;
  unint64_t v143 = v33 + 32;
  unint64_t v41 = 1;
  unint64_t v42 = MEMORY[0x1E4FBC860];
  while (2)
  {
    if (v152)
    {
      id v43 = (id)MEMORY[0x1CB77D510](v40, v33);
    }
    else
    {
      if (v40 >= *(void *)(v144 + 16)) {
        goto LABEL_145;
      }
      id v43 = *(id *)(v143 + 8 * v40);
    }
    id v160 = v43;
    id v44 = objc_msgSend(v38, sel_interpretations);
    id v45 = v38;
    if (!v44)
    {
      id v52 = v160;
      goto LABEL_92;
    }
    uint64_t v46 = v44;
    unint64_t v158 = v41;
    id v155 = v45;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for AFSpeechInterpretation);
    unint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v48 = objc_msgSend(v160, sel_integerValue);
    uint64_t v49 = (uint64_t)v48;
    if (!(v47 >> 62))
    {
      if ((uint64_t)v48 < *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_35;
      }
LABEL_83:
      swift_bridgeObjectRelease();
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v91 = type metadata accessor for Logger();
      __swift_project_value_buffer(v91, (uint64_t)static Logger.pommes);
      uint64_t v92 = Logger.logObject.getter();
      os_log_type_t v93 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v92, v93))
      {
        uint64_t v94 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v94 = 0;
        _os_log_impl(&dword_1C8F83000, v92, v93, "Invalid interpretation index.", v94, 2u);
        MEMORY[0x1CB77E470](v94, -1, -1);
      }

      id v45 = v155;
      id v52 = v160;
      unint64_t v33 = v154;
LABEL_91:
      unint64_t v41 = v158;
LABEL_92:

      if (v41 == v159)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_110;
      }
      if (v153)
      {
        id v95 = (id)MEMORY[0x1CB77D510](v41, v25);
      }
      else
      {
        if (v41 >= *(void *)(v150 + 16)) {
          goto LABEL_146;
        }
        id v95 = v147[v41];
      }
      uint64_t v38 = v95;
      if (__OFADD__(v41, 1))
      {
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
        goto LABEL_144;
      }
      unint64_t v40 = v41;
      BOOL v96 = v41++ == v151;
      if (v96)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_110;
      }
      continue;
    }
    break;
  }
  swift_bridgeObjectRetain();
  uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v49 >= v90) {
    goto LABEL_83;
  }
LABEL_35:
  unint64_t v50 = (unint64_t)objc_msgSend(v160, sel_integerValue);
  unint64_t v41 = v158;
  if ((v47 & 0xC000000000000001) != 0)
  {
    id v51 = (id)MEMORY[0x1CB77D510](v50, v47);
  }
  else
  {
    if ((v50 & 0x8000000000000000) != 0) {
      goto LABEL_147;
    }
    if (v50 >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_148;
    }
    id v51 = *(id *)(v47 + 8 * v50 + 32);
  }
  id v52 = v51;
  swift_bridgeObjectRelease();
  id v53 = objc_msgSend(v52, sel_tokens);
  id v54 = v52;
  if (!v53)
  {

    id v45 = v160;
    unint64_t v33 = v154;
    goto LABEL_92;
  }
  uint64_t v55 = v53;
  id v141 = v54;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for AFSpeechToken);
  unint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v56 >> 62))
  {
    uint64_t v57 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v57) {
      goto LABEL_42;
    }
    goto LABEL_90;
  }
  swift_bridgeObjectRetain();
  uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_90:

    swift_bridgeObjectRelease();
    id v45 = v141;
    unint64_t v25 = v145;
    unint64_t v33 = v154;
    id v52 = v155;
    goto LABEL_91;
  }
LABEL_42:
  uint64_t v164 = v57;
  unint64_t v165 = v56 & 0xC000000000000001;
  uint64_t v58 = 4;
  while (2)
  {
    if (v165) {
      id v59 = (id)MEMORY[0x1CB77D510](v58 - 4, v56);
    }
    else {
      id v59 = *(id *)(v56 + 8 * v58);
    }
    uint64_t v60 = v59;
    uint64_t v61 = v58 - 3;
    if (__OFADD__(v58 - 4, 1))
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
      goto LABEL_142;
    }
    Siri_Nlu_External_AsrTokenInformation.init()();
    objc_msgSend(v60, sel_removeSpaceBefore);
    Siri_Nlu_External_AsrTokenInformation.removeSpaceBefore.setter();
    if (Siri_Nlu_External_AsrTokenInformation.removeSpaceBefore.getter())
    {
      uint64_t v62 = v175;
      unint64_t v63 = v176;
      swift_bridgeObjectRetain();
      uint64_t v64 = specialized BidirectionalCollection.last.getter(v62, v63);
      uint64_t v66 = v65;
      swift_bridgeObjectRelease();
      if (v66)
      {
        if (v64 == 32 && v66 == 0xE100000000000000)
        {
          uint64_t v67 = swift_bridgeObjectRelease();
          goto LABEL_53;
        }
        char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v67 = swift_bridgeObjectRelease();
        if (v68)
        {
LABEL_53:
          if (!v39) {
            goto LABEL_143;
          }
          specialized RangeReplaceableCollection<>.removeLast()(v67);
          swift_bridgeObjectRelease();
        }
      }
    }
    id v69 = objc_msgSend(v60, sel_text);
    if (v69)
    {
      os_log_type_t v70 = v69;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    Siri_Nlu_External_AsrTokenInformation.postItnText.setter();
    v71._uint64_t countAndFlagsBits = Siri_Nlu_External_AsrTokenInformation.postItnText.getter();
    String.append(_:)(v71);
    swift_bridgeObjectRelease();
    id v72 = objc_msgSend(v60, sel_phoneSequence);
    if (v72)
    {
      uint64_t v73 = v72;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    Siri_Nlu_External_AsrTokenInformation.phoneSequence.setter();
    id v74 = objc_msgSend(v60, sel_ipaPhoneSequence);
    if (v74)
    {
      os_log_type_t v75 = v74;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    Siri_Nlu_External_AsrTokenInformation.ipaPhoneSequence.setter();
    objc_msgSend(v60, sel_removeSpaceAfter);
    Siri_Nlu_External_AsrTokenInformation.removeSpaceAfter.setter();
    Siri_Nlu_External_AsrTokenInformation.removeSpaceAfter.getter();
    Siri_Nlu_External_AsrTokenInformation.addSpaceAfter.setter();
    objc_msgSend(v60, sel_confidenceScore);
    Siri_Nlu_External_AsrTokenInformation.confidenceScore.setter();
    Siri_Nlu_External_AsrTokenInformation.beginIndex.setter();
    int v76 = Siri_Nlu_External_AsrTokenInformation.beginIndex.getter();
    id v77 = objc_msgSend(v60, sel_text);
    if (v77)
    {
      uint64_t v78 = v77;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v79 = String.count.getter();
      swift_bridgeObjectRelease();
      if ((v79 & 0x8000000000000000) != 0 || HIDWORD(v79)) {
        goto LABEL_154;
      }
      if (__CFADD__(v76, v79)) {
        goto LABEL_134;
      }
      Siri_Nlu_External_AsrTokenInformation.endIndex.setter();
      int v39 = Siri_Nlu_External_AsrTokenInformation.endIndex.getter();
      if (Siri_Nlu_External_AsrTokenInformation.addSpaceAfter.getter())
      {
        if (__CFADD__(v39++, 1)) {
          goto LABEL_141;
        }
        v81._uint64_t countAndFlagsBits = 32;
        v81._object = (void *)0xE100000000000000;
        String.append(_:)(v81);
      }
      objc_msgSend(v60, sel_startTime);
      double v83 = v82 * 1000.0;
      if ((~*(void *)&v83 & 0x7FF0000000000000) == 0) {
        goto LABEL_135;
      }
      if (v83 <= -2147483650.0) {
        goto LABEL_136;
      }
      if (v83 >= 2147483650.0) {
        goto LABEL_137;
      }
      Siri_Nlu_External_AsrTokenInformation.startMilliSeconds.setter();
      objc_msgSend(v60, sel_endTime);
      double v85 = v84 * 1000.0;
      if ((~*(void *)&v85 & 0x7FF0000000000000) == 0) {
        goto LABEL_138;
      }
      if (v85 <= -2147483650.0) {
        goto LABEL_139;
      }
      if (v85 >= 2147483650.0) {
        goto LABEL_140;
      }
      Siri_Nlu_External_AsrTokenInformation.endMilliSeconds.setter();
      (*v163)(v167, v15, v168);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v42 + 16) + 1, 1, v42);
      }
      unint64_t v87 = *(void *)(v42 + 16);
      unint64_t v86 = *(void *)(v42 + 24);
      if (v87 >= v86 >> 1) {
        unint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v87 + 1, 1, v42);
      }
      *(void *)(v42 + 16) = v87 + 1;
      uint64_t v88 = v166;
      uint64_t v89 = v168;
      (*(void (**)(unint64_t, char *, uint64_t))(v166 + 32))(v42+ ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ *(void *)(v88 + 72) * v87, v167, v168);

      (*(void (**)(char *, uint64_t))(v88 + 8))(v15, v89);
      ++v58;
      if (v61 == v164) {
        goto LABEL_90;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_154:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection<>.removeLast()(uint64_t a1)
{
  uint64_t v2 = v1[1];
  if ((v2 & 0x2000000000000000) == 0)
  {
    if ((*v1 & 0xFFFFFFFFFFFFLL) != 0) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if ((v2 & 0xF00000000000000) == 0)
  {
    __break(1u);
    return MEMORY[0x1F4183A58](a1);
  }
LABEL_5:
  a1 = String.index(before:)();

  return MEMORY[0x1F4183A58](a1);
}

uint64_t outlined destroy of Siri_Nlu_External_UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DownloadedFeaturiser.name.getter()
{
  return String.init<A>(describing:)();
}

uint64_t type metadata accessor for DownloadedFeaturiser()
{
  return self;
}

uint64_t DownloadedFeaturiser.__allocating_init(query:)(uint64_t a1)
{
  swift_allocObject();
  uint64_t v2 = specialized DownloadedFeaturiser.init(query:)(a1);
  swift_release();
  return v2;
}

uint64_t DownloadedFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v1 = specialized DownloadedFeaturiser.init(query:)(a1);
  swift_release();
  return v1;
}

void DownloadedFeaturiser.featurise(candidate:rankedSlotIndex:)(void **a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = *a1;
  if (*((unsigned char *)*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source) == 1)
  {
    uint64_t v4 = swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v4 = swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
    {
      uint64_t v11 = (void *)MEMORY[0x1E4FBC8C8];
      uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v3) + 0xB8))(v4);
      uint64_t v10 = *(void (**)(__n128))((*v11 & *v12) + 0x160);
      v9.n128_u32[0] = 1.0;
      id v13 = v12;
      goto LABEL_12;
    }
  }
  int v6 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_isDownloaded);
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v3) + 0xB8))(v4);
  uint64_t v10 = *(void (**)(__n128))((*v7 & *v8) + 0x160);
  id v13 = v8;
  if (v6 == 1)
  {
    v9.n128_u32[0] = 1065395159;
    if (*(unsigned char *)(v2 + 16)) {
      v9.n128_f32[0] = 1.0005;
    }
  }
  else
  {
    v9.n128_u64[0] = 0;
    if (*(unsigned char *)(v2 + 16)) {
      v9.n128_f32[0] = 1.0;
    }
  }
LABEL_12:
  v10(v9);
}

uint64_t DownloadedFeaturiser.deinit()
{
  return v0;
}

uint64_t DownloadedFeaturiser.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Featuriser.name.getter in conformance DownloadedFeaturiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t protocol witness for Featuriser.featurise(candidate:rankedSlotIndex:) in conformance DownloadedFeaturiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t specialized DownloadedFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  swift_retain();
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C8F83000, v5, v6, "DownloadedFeaturiser : networkAvailable=%{BOOL}d", v7, 8u);
    MEMORY[0x1CB77E470](v7, -1, -1);
  }
  else
  {

    swift_release();
  }
  *(unsigned char *)(v2 + 16) = *(unsigned char *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_networkAvailableAtRequest);
  return v2;
}

uint64_t method lookup function for DownloadedFeaturiser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DownloadedFeaturiser);
}

uint64_t dispatch thunk of DownloadedFeaturiser.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of DownloadedFeaturiser.__allocating_init(query:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of DownloadedFeaturiser.featurise(candidate:rankedSlotIndex:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

void PommesBridge.PommesBridgeError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL static PommesBridge.PommesBridgeError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int PommesBridge.PommesBridgeError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t key path setter for PommesBridge.currentSessionId : PommesBridge(uint64_t a1, void **a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  os_log_type_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v6, &demangling cache variable for type metadata for UUID?);
  return (*(uint64_t (**)(char *))(class metadata base offset for PommesBridge + **a2 + 80))(v6);
}

uint64_t PommesBridge.currentSessionId.setter(uint64_t a1)
{
  uint64_t v3 = v1 + direct field offset for PommesBridge.currentSessionId;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v3, &demangling cache variable for type metadata for UUID?);
  return swift_endAccess();
}

uint64_t (*PommesBridge.currentSessionId.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t PommesBridge.sessionState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + direct field offset for PommesBridge.sessionState;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v3, &demangling cache variable for type metadata for ConversationSessionState?);
  return swift_endAccess();
}

uint64_t (*PommesBridge.sessionState.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t PommesBridge.isMultiUser.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for PommesBridge.isMultiUser);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*PommesBridge.isMultiUser.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t PommesBridge.isOnlyUserInHome.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for PommesBridge.isOnlyUserInHome);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*PommesBridge.isOnlyUserInHome.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t PommesBridge.__allocating_init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  outlined init with copy of AppDataProviding(a3, (uint64_t)v16);
  outlined init with copy of AppDataProviding(a6, (uint64_t)v15);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, unsigned char *, void))(class metadata base offset for PommesBridge
                                                                                                + v6
                                                                                                + 168))(a1, a2, v16, a4, a5, v15, 0);
  __swift_destroy_boxed_opaque_existential_1(a6);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v13;
}

uint64_t PommesBridge.__allocating_init(_:_:_:_:_:pommesSearch:)(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, id *a7)
{
  swift_allocObject();
  uint64_t v14 = specialized PommesBridge.init(_:_:_:_:_:pommesSearch:)(a1, a2, a3, a4, a5, a6, a7);
  swift_unknownObjectRelease();

  swift_release();
  return v14;
}

uint64_t PommesBridge.init(_:_:_:_:_:pommesSearch:)(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, id *a7)
{
  uint64_t v8 = specialized PommesBridge.init(_:_:_:_:_:pommesSearch:)(a1, a2, a3, a4, a5, a6, a7);
  swift_unknownObjectRelease();

  swift_release();
  return v8;
}

uint64_t (*_s21SiriInformationSearch12PommesBridgeC0A12MessageTypes014SessionStartedF0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12f119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dm13CSgtcfcyAE014hI10G0CcACcfu_Tf3npf_n())()
{
  return partial apply for implicit closure #2 in implicit closure #1 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch12PommesBridgeC0A12MessageTypes012SessionEndedF0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12f119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dm13CSgtcfcyAE012hI11G0CcACcfu1_Tf3npf_n())()
{
  return partial apply for implicit closure #4 in implicit closure #3 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch12PommesBridgeC0A12MessageTypes010MUXContextF0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12f119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dl13CSgtcfcyAE010H11G0CcACcfu3_Tf3npf_n())()
{
  return partial apply for implicit closure #6 in implicit closure #5 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes011StartSpeechfH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE018jkf11G0CcAA0deV9G6Ccfu5_Tf3npf_n())()
{
  return partial apply for implicit closure #8 in implicit closure #7 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes016StartChildSpeechfH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dp13CSgtcfcyAE023jklf11G0CcAA0deW9G6Ccfu7_Tf3npf_n())()
{
  return partial apply for implicit closure #10 in implicit closure #9 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes014StartChildTextfH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dp13CSgtcfcyAE021jklf11G0CcAA0deW9G6Ccfu9_Tf3npf_n())()
{
  return partial apply for implicit closure #12 in implicit closure #11 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes09StartTextfH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE016jkf11G0CcAA0deV9G7Ccfu11_Tf3npf_n())()
{
  return partial apply for implicit closure #14 in implicit closure #13 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes010StartLocalfH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE017jkf11G0CcAA0deV9G7Ccfu13_Tf3npf_n())()
{
  return partial apply for implicit closure #42 in implicit closure #41 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes03EndfH4BaseCIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE010jf2G4k9CcAA0deU9G7Ccfu15_Tf3npf_n())()
{
  return partial apply for implicit closure #18 in implicit closure #17 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes0f7ContextH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dn13CSgtcfcyAE014fj11G0CcAA0deT9G7Ccfu17_Tf3npf_n())()
{
  return partial apply for implicit closure #20 in implicit closure #19 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes017NLResultCandidateH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE017jk11G0CcAA0dE16fG7Ccfu19_Tf3npf_n())()
{
  return partial apply for implicit closure #22 in implicit closure #21 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes024TextBasedResultCandidateH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dq13CSgtcfcyAE024jklm11G0CcAA0dE16fG7Ccfu21_Tf3npf_n())()
{
  return partial apply for implicit closure #24 in implicit closure #23 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes027GestureBasedResultCandidateH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dq13CSgtcfcyAE027jklm11G0CcAA0dE16fG7Ccfu23_Tf3npf_n())()
{
  return partial apply for implicit closure #26 in implicit closure #25 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes018AsrResultCandidateH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dp13CSgtcfcyAE018jkl11G0CcAA0dE16fG7Ccfu25_Tf3npf_n())()
{
  return partial apply for implicit closure #28 in implicit closure #27 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes010FallbackTodH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE010j14TodG0CcAA0dE16fG7Ccfu27_Tf3npf_n())()
{
  return partial apply for implicit closure #30 in implicit closure #29 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes021TextBasedTRPCandidateH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dp13CSgtcfcyAE021jkl11G0CcAA0dE16fG7Ccfu29_Tf3npf_n())()
{
  return partial apply for implicit closure #32 in implicit closure #31 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes027RewrittenUtteranceCandidateH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dp13CSgtcfcyAE027jkl11G0CcAA0dE16fG7Ccfu31_Tf3npf_n())()
{
  return partial apply for implicit closure #34 in implicit closure #33 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes010TTResponseH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dn13CSgtcfcyAE010j11G0CcAA0dE16fG7Ccfu33_Tf3npf_n())()
{
  return partial apply for implicit closure #36 in implicit closure #35 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes012TRPCandidatefH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dn13CSgtcfcyAE019jf11G0CcAA0deU9G7Ccfu35_Tf3npf_n())()
{
  return partial apply for implicit closure #38 in implicit closure #37 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes014StartCandidatefH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE021jkf11G0CcAA0deV9G7Ccfu37_Tf3npf_n())()
{
  return partial apply for implicit closure #40 in implicit closure #39 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch12PommesBridgeCSo20SARDRunPOMMESRequestCSo22AFCommandExecutionInfoCSo12SAAceCommand_pSgs5Error_pSgIeggg_SgIegggg_Ieggo_ACxAgLRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s21ab8Search12de151C_____06pommesC0ACSS_0A12MessageTypes0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dq12CSgtcfcySo20fg6C_So22hij6CySo12kl7_pSg_s5M18_pSgtcSgtcACcfu41_Tf3npf_n())()
{
  return partial apply for implicit closure #44 in implicit closure #43 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

void closure #1 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1C8F83000, v3, v4, "Initializing PommesSearch async", v5, 2u);
      MEMORY[0x1CB77E470](v5, -1, -1);
    }

    type metadata accessor for PommesSearch();
    id v6 = PommesSearch.__allocating_init()();
    uint64_t v7 = direct field offset for PommesBridge.pommesSearch;
    *(void *)(v1 + direct field offset for PommesBridge.pommesSearch) = v6;
    swift_retain();
    swift_release();
    uint64_t v8 = *(void *)(v1 + v7);
    if (v8)
    {
      swift_retain();
      MessageDispatchingBridgeBase.serviceHelper.getter();
      (*(void (**)(void))(*(void *)v8 + 216))();
      swift_release();
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
      swift_release();
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_1C8F83000, v10, v11, "PommesBridge deallocated before PommesSearch set up", v12, 2u);
      MEMORY[0x1CB77E470](v12, -1, -1);
    }
  }
}

uint64_t PommesBridge.createRequestProcessor(withRequestId:assistantId:sessionId:isCandidateRequest:rootRequestId:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v95 = a8;
  uint64_t v94 = (unsigned char *)a7;
  int v91 = a6;
  uint64_t v93 = a4;
  uint64_t v92 = a3;
  unint64_t v105 = a2;
  uint64_t v100 = a1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  os_log_type_t v11 = *(unsigned char **)(*(void *)(v10 - 8) + 64);
  uint64_t v12 = MEMORY[0x1F4188790](v10 - 8);
  unint64_t v13 = (unint64_t)(v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v14 = *v8;
  unint64_t v15 = *(void (**)(uint64_t))(class metadata base offset for PommesBridge + *v8 + 72);
  uint64_t v104 = v8;
  uint64_t v98 = class metadata base offset for PommesBridge + v14 + 72;
  uint64_t v97 = v15;
  uint64_t v16 = ((uint64_t (*)(uint64_t))v15)(v12);
  MEMORY[0x1F4188790](v16);
  unint64_t v17 = &v86[-v13];
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v101 = a5;
  id v102 = v20;
  uint64_t v103 = v19 + 16;
  v20(&v86[-v13], a5, v18);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v19 + 56))(&v86[-v13], 0, 1, v18);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  unint64_t v24 = &v86[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = (uint64_t)&v24[*(int *)(v22 + 56)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)&v86[-v13], (uint64_t)v24, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)&v86[-v13], v25, &demangling cache variable for type metadata for UUID?);
  uint64_t v110 = v19;
  uint64_t v26 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48);
  uint64_t v27 = v26(v24, 1, v18);
  uint64_t v99 = v11;
  if (v27 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
    outlined destroy of MediaUserStateCenter?((uint64_t)&v86[-v13], &demangling cache variable for type metadata for UUID?);
    uint64_t v28 = v25;
    uint64_t v29 = v18;
    if (v26((unsigned char *)v28, 1, v18) == 1)
    {
      uint64_t v30 = outlined destroy of MediaUserStateCenter?((uint64_t)v24, &demangling cache variable for type metadata for UUID?);
      unint64_t v32 = v104;
      uint64_t v31 = v105;
      uint64_t v33 = v18;
      goto LABEL_14;
    }
    goto LABEL_6;
  }
  uint64_t v89 = &v86[-v13];
  uint64_t v88 = v86;
  MEMORY[0x1F4188790](v27);
  unint64_t v34 = &v86[-v13];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v24, (uint64_t)&v86[-v13], &demangling cache variable for type metadata for UUID?);
  uint64_t v35 = v26((unsigned char *)v25, 1, v18);
  if (v35 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v86[-v13], &demangling cache variable for type metadata for UUID?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v89, &demangling cache variable for type metadata for UUID?);
    uint64_t v29 = v18;
    (*(void (**)(unsigned char *, uint64_t))(v110 + 8))(&v86[-v13], v18);
LABEL_6:
    uint64_t v90 = v26;
    outlined destroy of MediaUserStateCenter?((uint64_t)v24, &demangling cache variable for type metadata for (UUID?, UUID?));
    uint64_t v33 = v29;
LABEL_7:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    uint64_t v37 = __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
    BOOL v96 = v86;
    uint64_t v38 = v110;
    uint64_t v39 = *(void *)(v110 + 64);
    MEMORY[0x1F4188790](v37);
    unint64_t v40 = &v86[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
    v102(v40, v101, v33);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    unint64_t v41 = Logger.logObject.getter();
    uint64_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, (os_log_type_t)v42))
    {
      LODWORD(v101) = v42;
      uint64_t v43 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v94 = v86;
      uint64_t v95 = v44;
      v109[0] = v44;
      *(_DWORD *)uint64_t v43 = 136315650;
      uint64_t v45 = MEMORY[0x1F4188790](v44);
      unint64_t v47 = &v86[-((v46 + 15) & 0xFFFFFFFFFFFFFFF0)];
      v97(v45);
      uint64_t v48 = v90(v47, 1, v33);
      if (v48)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v47, &demangling cache variable for type metadata for UUID?);
        unint64_t v49 = 0xE300000000000000;
        uint64_t v50 = 7104878;
        uint64_t v51 = v110;
      }
      else
      {
        uint64_t v99 = v86;
        MEMORY[0x1F4188790](v48);
        uint64_t v73 = &v86[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
        v102(v73, (uint64_t)v47, v33);
        outlined destroy of MediaUserStateCenter?((uint64_t)v47, &demangling cache variable for type metadata for UUID?);
        uint64_t v50 = UUID.uuidString.getter();
        unint64_t v49 = v74;
        uint64_t v51 = v110;
        (*(void (**)(unsigned char *, uint64_t))(v110 + 8))(v73, v33);
      }
      *(void *)&long long v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v49, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BCE0]);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v40, v33);
      *(_WORD *)(v43 + 22) = 2080;
      uint64_t v42 = v43 + 24;
      unint64_t v77 = v105;
      swift_bridgeObjectRetain();
      *(void *)&long long v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v77, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v41, (os_log_type_t)v101, "Request does not belong to current session id: %s, request session id: %s for request id: %s", (uint8_t *)v43, 0x20u);
      uint64_t v78 = v95;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v78, -1, -1);
      MEMORY[0x1CB77E470](v43, -1, -1);
    }
    else
    {
      swift_release_n();
      (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(&v86[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)], v33);

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError();
    swift_allocError();
    *unint64_t v79 = 0;
    goto LABEL_25;
  }
  uint64_t v90 = v26;
  uint64_t v52 = v110;
  MEMORY[0x1F4188790](v35);
  id v54 = &v86[-((v53 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v52 + 32))(v54, v25, v18);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BCE0]);
  int v87 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v55 = *(void (**)(unsigned char *, uint64_t))(v52 + 8);
  v55(v54, v18);
  outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v89, &demangling cache variable for type metadata for UUID?);
  v55(v34, v18);
  uint64_t v31 = v105;
  uint64_t v30 = outlined destroy of MediaUserStateCenter?((uint64_t)v24, &demangling cache variable for type metadata for UUID?);
  unint64_t v32 = v104;
  uint64_t v33 = v18;
  if ((v87 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_14:
  (*(void (**)(long long *__return_ptr, uint64_t))(class metadata base offset for PommesBridge + *v32 + 96))(&v107, v30);
  if (!v108)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v107, &demangling cache variable for type metadata for ConversationSessionState?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    __swift_project_value_buffer(v68, (uint64_t)static Logger.pommes);
    id v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    uint64_t v42 = v70;
    if (os_log_type_enabled(v69, v70))
    {
      Swift::String v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v71 = 0;
      _os_log_impl(&dword_1C8F83000, v69, (os_log_type_t)v42, "Unable to find SessionState to pass to RequestProcessor", v71, 2u);
      MEMORY[0x1CB77E470](v71, -1, -1);
    }

    lazy protocol witness table accessor for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError();
    swift_allocError();
    unsigned char *v72 = 1;
LABEL_25:
    swift_willThrow();
    return v42;
  }
  uint64_t v56 = outlined init with take of AppDataProviding(&v107, (uint64_t)v109);
  uint64_t v57 = *(void *)((char *)v32 + direct field offset for PommesBridge.pommesSearch);
  if (v57)
  {
    uint64_t v104 = v86;
    MEMORY[0x1F4188790](v56);
    id v59 = &v86[-((v58 + 15) & 0xFFFFFFFFFFFFFFF0)];
    v102(v59, v101, v33);
    swift_retain();
    uint64_t v60 = v93;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v61 = v95;
    swift_bridgeObjectRetain();
    uint64_t v110 = MessageDispatchingBridgeBase.name.getter();
    uint64_t v103 = v62;
    MessageDispatchingBridgeBase.messagePublisher.getter();
    id v102 = (void (*)(unsigned char *, uint64_t, uint64_t))MessageDispatchingBridgeBase.serviceHelper.getter();
    outlined init with copy of AppDataProviding((uint64_t)v109, (uint64_t)v106);
    uint64_t v63 = v31;
    uint64_t v64 = *(void *)((char *)v32 + direct field offset for PommesBridge.instrumentationUtil);
    uint64_t v65 = *(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridge + *v32 + 120);
    uint64_t v66 = swift_retain();
    LOBYTE(v65) = v65(v66);
    char v67 = (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v32 + 144))();
    type metadata accessor for PommesBridgeRequestProcessor(0);
    swift_allocObject();
    uint64_t v42 = specialized PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)(v92, v60, (uint64_t)v59, v100, v63, (uint64_t)v94, v61, v110, v103, (uint64_t)&v107, (uint64_t)v102, v57, (uint64_t)v106, v64, v65 & 1, v91 & 1, v67 & 1);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v81 = type metadata accessor for Logger();
    __swift_project_value_buffer(v81, (uint64_t)static Logger.pommes);
    double v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.error.getter();
    uint64_t v42 = v83;
    if (os_log_type_enabled(v82, v83))
    {
      double v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v84 = 0;
      _os_log_impl(&dword_1C8F83000, v82, (os_log_type_t)v42, "PommesSearch instance not available - timing error with async bridge setup?", v84, 2u);
      MEMORY[0x1CB77E470](v84, -1, -1);
    }

    lazy protocol witness table accessor for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError();
    swift_allocError();
    *double v85 = 2;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  }
  return v42;
}

void PommesBridge.handleSessionStarted(_:)(void *a1)
{
  void (*v38)(uint64_t *__return_ptr);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint8_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint8_t *);
  void (**v51)(char *, uint8_t *);
  uint8_t *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56[5];
  uint64_t v57[3];
  uint64_t v58;

  uint64_t v2 = v1;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  id v6 = a1;
  uint64_t v55 = v5;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  uint64_t v53 = v2;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    id v54 = (id)swift_slowAlloc();
    v57[0] = (uint64_t)v54;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v52 = v9 + 4;
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v51 = &v50;
    uint64_t v11 = *(void *)(v10 - 8);
    MEMORY[0x1F4188790](v10);
    unint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    SessionMessageBase.sessionId.getter();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BCE0]);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v56[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v7, v8, "handling session started for session id: %s", v9, 0xCu);
    id v17 = v54;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v17, -1, -1);
    MEMORY[0x1CB77E470](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v18 - 8);
  unint64_t v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  SessionMessageBase.sessionId.getter();
  uint64_t v21 = v6;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  unint64_t v24 = v53;
  (*(void (**)(char *))(class metadata base offset for PommesBridge + *v53 + 80))(v20);
  MessageDispatchingBridgeBase.conversationSessionsManaging.getter();
  uint64_t v25 = __swift_project_boxed_opaque_existential_1(v57, v58);
  MEMORY[0x1F4188790](v25);
  uint64_t v51 = v26;
  uint64_t v27 = (char *)&v50 - (((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v54 = v21;
  SessionMessageBase.sessionId.getter();
  dispatch thunk of ConversationSessionsManaging.conversationSessionState(forConversationSessionId:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v52 = (uint8_t *)v22;
  v28(v27, v22);
  (*(void (**)(uint64_t *))(class metadata base offset for PommesBridge + *v24 + 104))(v56);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  uint64_t v29 = *(void *)((char *)v24 + direct field offset for PommesBridge.pommesSearch);
  if (v29)
  {
    uint64_t v30 = *(void (**)(uint64_t))(*(void *)v29 + 280);
    uint64_t v31 = swift_retain();
    v30(v31);
    swift_release();
  }
  id v32 = v54;
  swift_retain_n();
  id v33 = v32;
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  int v36 = v35;
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    v56[0] = v55;
    *(_DWORD *)uint64_t v37 = 136315394;
    uint64_t v38 = *(void (**)(uint64_t *__return_ptr))(class metadata base offset for PommesBridge + *v24 + 96);
    LODWORD(v54) = v36;
    v38(v57);
    uint64_t v39 = v58;
    outlined destroy of MediaUserStateCenter?((uint64_t)v57, &demangling cache variable for type metadata for ConversationSessionState?);
    if (v39) {
      unint64_t v40 = 0;
    }
    else {
      unint64_t v40 = 544501582;
    }
    if (v39) {
      unint64_t v41 = 0xE000000000000000;
    }
    else {
      unint64_t v41 = 0xE400000000000000;
    }
    v57[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v56);
    uint64_t v50 = (void (*)(char *, uint8_t *))v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v42 = swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    uint64_t v53 = (void *)(v37 + 14);
    MEMORY[0x1F4188790](v42);
    uint64_t v44 = (char *)&v50 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
    SessionMessageBase.sessionId.getter();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BCE0]);
    uint64_t v45 = v52;
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v48 = v47;
    v50(v44, v45);
    v57[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v34, (os_log_type_t)v54, "%sFound session state for session id %s", (uint8_t *)v37, 0x16u);
    unint64_t v49 = v55;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v49, -1, -1);
    MEMORY[0x1CB77E470](v37, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

void PommesBridge.handleSessionEnded(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = *(uint8_t **)(*(void *)(v4 - 8) + 64);
  uint64_t v6 = MEMORY[0x1F4188790](v4 - 8);
  unint64_t v7 = (unint64_t)(v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  os_log_type_t v8 = (char *)v53 - v7;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridge + *v1 + 72))(v6);
  MEMORY[0x1F4188790](v9);
  uint64_t v10 = (char *)v53 - v7;
  id v57 = a1;
  SessionMessageBase.sessionId.getter();
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  id v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v55 = (void *)(v12 + 56);
  v54((char *)v53 - v7, 0, 1, v11);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  unint64_t v16 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (uint64_t)&v16[*(int *)(v14 + 56)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v53 - v7, (uint64_t)v16, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v53 - v7, v17, &demangling cache variable for type metadata for UUID?);
  uint64_t v58 = v12;
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v19 = v18(v16, 1, v11);
  uint64_t v56 = v5;
  if (v19 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v53 - v7, &demangling cache variable for type metadata for UUID?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v53 - v7, &demangling cache variable for type metadata for UUID?);
    if (v18((char *)v17, 1, v11) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
LABEL_8:
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v27 = v11;
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl(&dword_1C8F83000, v29, v30, "setting sessionId and sessionState to nil", v31, 2u);
        MEMORY[0x1CB77E470](v31, -1, -1);
      }

      uint64_t v33 = *(void *)((char *)v2 + direct field offset for PommesBridge.pommesSearch);
      unint64_t v34 = v56;
      if (v33)
      {
        os_log_type_t v35 = *(void (**)(uint64_t))(*(void *)v33 + 320);
        uint64_t v36 = swift_retain();
        v35(v36);
        uint64_t v32 = swift_release();
      }
      MEMORY[0x1F4188790](v32);
      v54((char *)v53 - ((unint64_t)(v34 + 15) & 0xFFFFFFFFFFFFFFF0), 1, 1, v27);
      (*(void (**)(char *))(class metadata base offset for PommesBridge + *v2 + 80))((char *)v53 - ((unint64_t)(v34 + 15) & 0xFFFFFFFFFFFFFFF0));
      uint64_t v60 = 0;
      memset(v59, 0, sizeof(v59));
      (*(void (**)(_OWORD *))(class metadata base offset for PommesBridge + *v2 + 104))(v59);
      uint64_t v37 = (void (*)(_OWORD *, void))dispatch thunk of CandidateRequestAwareBridgeBase.requestIdToCandidateRequestProcessor.modify();
      uint64_t v39 = v38;
      swift_bridgeObjectRelease();
      *uint64_t v39 = MEMORY[0x1E4FBC868];
      v37(v59, 0);
      return;
    }
    goto LABEL_6;
  }
  v53[2] = v53;
  MEMORY[0x1F4188790](v19);
  unint64_t v20 = (char *)v53 - v7;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v16, (uint64_t)v53 - v7, &demangling cache variable for type metadata for UUID?);
  uint64_t v21 = v18((char *)v17, 1, v11);
  if (v21 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v53 - v7, &demangling cache variable for type metadata for UUID?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v53 - v7, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(v58 + 8))((char *)v53 - v7, v11);
LABEL_6:
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_15;
  }
  v53[1] = v53;
  uint64_t v22 = v58;
  MEMORY[0x1F4188790](v21);
  unint64_t v24 = (char *)v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v24, v17, v11);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BCE0]);
  char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v22 + 8);
  v26(v24, v11);
  outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  v26(v20, v11);
  outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
  if (v25) {
    goto LABEL_8;
  }
LABEL_15:
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
  id v41 = v57;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = (void *)swift_slowAlloc();
    id v57 = v45;
    uint64_t v55 = v53;
    *(void *)&v59[0] = v45;
    *(_DWORD *)uint64_t v44 = 136315138;
    uint64_t v56 = v44 + 4;
    uint64_t v46 = v58;
    MEMORY[0x1F4188790](v45);
    uint64_t v48 = (char *)v53 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
    SessionMessageBase.sessionId.getter();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BCE0]);
    uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v51 = v50;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v11);
    uint64_t v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, (uint64_t *)v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v42, v43, "SessionId: %s is not the current session, ignoring", v44, 0xCu);
    id v52 = v57;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v52, -1, -1);
    MEMORY[0x1CB77E470](v44, -1, -1);
  }
  else
  {
  }
}

uint64_t PommesBridge.handleMUXContextMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v17 = v9;
    *(_DWORD *)os_log_type_t v8 = 136315138;
    uint64_t v10 = MessageBase.assistantId.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v6, v7, "MUXContextMessage received for assistantId: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v9, -1, -1);
    MEMORY[0x1CB77E470](v8, -1, -1);
  }
  else
  {
  }
  char v12 = MUXContextMessage.isRMVEnabled.getter();
  (*(void (**)(void))(class metadata base offset for PommesBridge + *v2 + 128))(v12 & 1);
  char v13 = static MUXUtils.singleKnownUserInHome(muxContextMessage:)();
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v2 + 152))(v13 & 1);
  uint64_t v15 = *(void *)((char *)v2 + direct field offset for PommesBridge.pommesSearch);
  if (v15)
  {
    unint64_t v16 = *(void (**)(id))(*(void *)v15 + 312);
    swift_retain();
    v16(v5);
    return swift_release();
  }
  return result;
}

void PommesBridge.handleRunPOMMESRequest(_:_:_:)(void *a1)
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v16 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    id v8 = objc_msgSend(v3, sel_debugDescription);
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v4, v5, "Received SARDRunPOMMESRequest: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v7, -1, -1);
    MEMORY[0x1CB77E470](v6, -1, -1);
  }
  else
  {
  }
  if (dispatch thunk of CandidateRequestAwareBridgeBase.activeRequestProcessor.getter())
  {
    type metadata accessor for PommesBridgeRequestProcessor(0);
    char v12 = (void *)swift_dynamicCastClass();
    if (v12)
    {
      (*(void (**)(id))(class metadata base offset for PommesBridgeRequestProcessor + *v12 + 352))(v3);
      swift_release();
      return;
    }
    swift_release();
  }
  char v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_1C8F83000, v13, v14, "Unable to handle SARDRunPOMMESRequest because there is no active PommesBridgeRequestProcessor", v15, 2u);
    MEMORY[0x1CB77E470](v15, -1, -1);
  }
}

void PommesBridge.__allocating_init(name:messagePublisher:serviceHelper:queue:conversationSessionsManager:logger:waitBeforeReplacingActiveRequest:)()
{
}

void PommesBridge.init(name:messagePublisher:serviceHelper:queue:conversationSessionsManager:logger:waitBeforeReplacingActiveRequest:)()
{
}

uint64_t PommesBridge.__ivar_destroyer()
{
  swift_release();
  swift_release();
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridge.currentSessionId, &demangling cache variable for type metadata for UUID?);
  return outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridge.sessionState, &demangling cache variable for type metadata for ConversationSessionState?);
}

uint64_t PommesBridge.deinit()
{
  uint64_t v0 = CandidateRequestAwareBridgeBase.deinit();
  swift_release();
  swift_release();
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridge.currentSessionId, &demangling cache variable for type metadata for UUID?);
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridge.sessionState, &demangling cache variable for type metadata for ConversationSessionState?);
  return v0;
}

uint64_t PommesBridge.__deallocating_deinit()
{
  uint64_t v0 = CandidateRequestAwareBridgeBase.deinit();
  swift_release();
  swift_release();
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridge.currentSessionId, &demangling cache variable for type metadata for UUID?);
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridge.sessionState, &demangling cache variable for type metadata for ConversationSessionState?);

  return swift_deallocClassInstance();
}

uint64_t specialized PommesBridge.init(_:_:_:_:_:pommesSearch:)(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, id *a7)
{
  id v51 = a5;
  id v52 = a7;
  uint64_t v55 = a4;
  uint64_t started = a1;
  unint64_t v50 = a2;
  uint64_t v10 = type metadata accessor for MessageHandlerType();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  char v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v7 + direct field offset for PommesBridge.pommesSearch) = 0;
  uint64_t v18 = v7 + direct field offset for PommesBridge.currentSessionId;
  uint64_t v19 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  uint64_t v20 = v7 + direct field offset for PommesBridge.sessionState;
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(void *)(v20 + 32) = 0;
  *(unsigned char *)(v7 + direct field offset for PommesBridge.isMultiUser) = 0;
  *(unsigned char *)(v7 + direct field offset for PommesBridge.isOnlyUserInHome) = 0;
  uint64_t v21 = one-time initialization token for sharedInstance;
  swift_retain();
  if (v21 != -1) {
    swift_once();
  }
  *(void *)(v7 + direct field offset for PommesBridge.instrumentationUtil) = static PommesBridgeInstrumentationUtil.sharedInstance;
  swift_retain();
  swift_release();
  uint64_t v54 = a3;
  outlined init with copy of AppDataProviding(a3, (uint64_t)aBlock);
  uint64_t v53 = a6;
  outlined init with copy of AppDataProviding(a6, (uint64_t)v57);
  uint64_t v22 = one-time initialization token for pommes;
  swift_unknownObjectRetain();
  id v23 = v51;
  if (v22 != -1) {
    swift_once();
  }
  id v51 = (id)__swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
  (*(void (**)(char *, id, uint64_t))(v15 + 16))(v17, v51, v14);
  uint64_t v24 = CandidateRequestAwareBridgeBase.init(name:messagePublisher:serviceHelper:queue:conversationSessionsManager:logger:waitBeforeReplacingActiveRequest:)();
  id v48 = v23;
  uint64_t v25 = v24;
  type metadata accessor for SessionStartedMessage();
  swift_retain();
  dispatch thunk of MessageDispatchingBridgeBase.registerMessageHandler<A>(_:)();
  type metadata accessor for SessionEndedMessage();
  swift_retain();
  dispatch thunk of MessageDispatchingBridgeBase.registerMessageHandler<A>(_:)();
  swift_release();
  type metadata accessor for MUXContextMessage();
  swift_retain();
  dispatch thunk of MessageDispatchingBridgeBase.registerMessageHandler<A>(_:)();
  swift_release();
  uint64_t v26 = *MEMORY[0x1E4FA3FF0];
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v27(v13, v26, v10);
  type metadata accessor for StartSpeechRequestMessage();
  type metadata accessor for PommesBridgeRequestProcessor(0);
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v11 + 8);
  v28(v13, v10);
  v27(v13, v26, v10);
  type metadata accessor for StartChildSpeechRequestMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, v26, v10);
  type metadata accessor for StartChildTextRequestMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  LODWORD(v50) = v26;
  v27(v13, v26, v10);
  type metadata accessor for StartTextRequestMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, v26, v10);
  uint64_t started = type metadata accessor for StartLocalRequestMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, *MEMORY[0x1E4FA4010], v10);
  type metadata accessor for EndRequestMessageBase();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  uint64_t v29 = *MEMORY[0x1E4FA4018];
  v27(v13, v29, v10);
  type metadata accessor for RequestContextMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, v29, v10);
  type metadata accessor for NLResultCandidateMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, v29, v10);
  type metadata accessor for TextBasedResultCandidateMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, v29, v10);
  type metadata accessor for GestureBasedResultCandidateMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, v29, v10);
  type metadata accessor for AsrResultCandidateMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, v29, v10);
  type metadata accessor for FallbackToPommesMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, v29, v10);
  type metadata accessor for TextBasedTRPCandidateMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, v29, v10);
  type metadata accessor for RewrittenUtteranceCandidateMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, v29, v10);
  type metadata accessor for TTResponseMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, v29, v10);
  type metadata accessor for TRPCandidateRequestMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, *MEMORY[0x1E4FA4000], v10);
  type metadata accessor for StartCandidateRequestMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  v27(v13, v50, v10);
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v28(v13, v10);
  type metadata accessor for SARDRunPOMMESRequest();
  swift_retain();
  dispatch thunk of MessageDispatchingBridgeBase.registerCommandHandler<A>(_:)();
  swift_release();
  os_log_type_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v33 = v52;
  if (v52)
  {
    if (v32)
    {
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v34 = 0;
      _os_log_impl(&dword_1C8F83000, v30, v31, "PommesSearch provided to initializer", v34, 2u);
      MEMORY[0x1CB77E470](v34, -1, -1);
    }

    *(void *)(v25 + direct field offset for PommesBridge.pommesSearch) = v33;
    swift_retain();
  }
  else
  {
    if (v32)
    {
      os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v35 = 0;
      _os_log_impl(&dword_1C8F83000, v30, v31, "Using default PommesSearch, dispatching to initialize", v35, 2u);
      MEMORY[0x1CB77E470](v35, -1, -1);
    }

    uint64_t v36 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = partial apply for closure #1 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
    aBlock[5] = v36;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t aBlock[3] = &block_descriptor_10;
    uint64_t v37 = _Block_copy(aBlock);
    id v51 = (id)type metadata accessor for DispatchQoS();
    id v52 = &v48;
    uint64_t v38 = *((void *)v51 - 1);
    MEMORY[0x1F4188790](v51);
    uint64_t v40 = (char *)&v48 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v41 = type metadata accessor for DispatchWorkItemFlags();
    unint64_t v50 = &v48;
    uint64_t v42 = *(void *)(v41 - 8);
    MEMORY[0x1F4188790](v41);
    uint64_t v44 = (char *)&v48 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
    v57[0] = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAEF8]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1CB77D180](0, v40, v44, v37);
    _Block_release(v37);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
    (*(void (**)(char *, id))(v38 + 8))(v40, v51);
    swift_release();
  }
  swift_release();
  uint64_t v46 = v53;
  uint64_t v45 = v54;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t))(*(void *)static PommesSearchService.shared + 104))(v55);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v46);
  __swift_destroy_boxed_opaque_existential_1(v45);
  return v25;
}

unint64_t lazy protocol witness table accessor for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError;
  if (!lazy protocol witness table cache variable for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError;
  if (!lazy protocol witness table cache variable for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError);
  }
  return result;
}

uint64_t sub_1C9061920(void **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + **a1 + 72))();
}

uint64_t sub_1C9061984(void **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + **a1 + 96))();
}

uint64_t sub_1C90619E4(uint64_t a1, void **a2)
{
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v4, &demangling cache variable for type metadata for ConversationSessionState?);
  return (*(uint64_t (**)(unsigned char *))(class metadata base offset for PommesBridge + **a2 + 104))(v4);
}

uint64_t sub_1C9061A64@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + **a1 + 120))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C9061AD0(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + **a2 + 128))(*a1);
}

uint64_t sub_1C9061B34@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + **a1 + 144))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C9061BA0(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + **a2 + 152))(*a1);
}

uint64_t type metadata accessor for PommesBridge()
{
  uint64_t result = type metadata singleton initialization cache for PommesBridge;
  if (!type metadata singleton initialization cache for PommesBridge) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for PommesBridge()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t method lookup function for PommesBridge(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesBridge);
}

uint64_t dispatch thunk of PommesBridge.currentSessionId.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 72))();
}

uint64_t dispatch thunk of PommesBridge.currentSessionId.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 80))();
}

uint64_t dispatch thunk of PommesBridge.currentSessionId.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 88))();
}

uint64_t dispatch thunk of PommesBridge.sessionState.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 96))();
}

uint64_t dispatch thunk of PommesBridge.sessionState.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 104))();
}

uint64_t dispatch thunk of PommesBridge.sessionState.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 112))();
}

uint64_t dispatch thunk of PommesBridge.isMultiUser.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 120))();
}

uint64_t dispatch thunk of PommesBridge.isMultiUser.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 128))();
}

uint64_t dispatch thunk of PommesBridge.isMultiUser.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 136))();
}

uint64_t dispatch thunk of PommesBridge.isOnlyUserInHome.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 144))();
}

uint64_t dispatch thunk of PommesBridge.isOnlyUserInHome.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 152))();
}

uint64_t dispatch thunk of PommesBridge.isOnlyUserInHome.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 160))();
}

uint64_t dispatch thunk of PommesBridge.__allocating_init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + v0 + 168))();
}

uint64_t dispatch thunk of PommesBridge.handleSessionStarted(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 176))();
}

uint64_t dispatch thunk of PommesBridge.handleSessionEnded(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 184))();
}

uint64_t dispatch thunk of PommesBridge.handleMUXContextMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 192))();
}

uint64_t dispatch thunk of PommesBridge.handleRunPOMMESRequest(_:_:_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 200))();
}

void type metadata accessor for UUID?()
{
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
    }
  }
}

uint64_t ObjC metadata update function for PommesBridge()
{
  return type metadata accessor for PommesBridge();
}

unsigned char *storeEnumTagSinglePayload for PommesBridge.PommesBridgeError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9062274);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesBridge.PommesBridgeError()
{
  return &type metadata for PommesBridge.PommesBridgeError;
}

unint64_t type metadata accessor for SARDRunPOMMESRequest()
{
  unint64_t result = lazy cache variable for type metadata for SARDRunPOMMESRequest;
  if (!lazy cache variable for type metadata for SARDRunPOMMESRequest)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SARDRunPOMMESRequest);
  }
  return result;
}

uint64_t sub_1C90622EC()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
}

uint64_t partial apply for implicit closure #44 in implicit closure #43 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 200))();
}

uint64_t partial apply for implicit closure #40 in implicit closure #39 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 440))();
}

uint64_t partial apply for implicit closure #38 in implicit closure #37 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 368))();
}

uint64_t partial apply for implicit closure #36 in implicit closure #35 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 416))();
}

uint64_t partial apply for implicit closure #34 in implicit closure #33 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 400))();
}

uint64_t partial apply for implicit closure #32 in implicit closure #31 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 392))();
}

uint64_t partial apply for implicit closure #30 in implicit closure #29 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 432))();
}

uint64_t partial apply for implicit closure #28 in implicit closure #27 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 360))();
}

uint64_t partial apply for implicit closure #26 in implicit closure #25 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 384))();
}

uint64_t partial apply for implicit closure #24 in implicit closure #23 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 376))();
}

uint64_t partial apply for implicit closure #22 in implicit closure #21 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 408))();
}

uint64_t partial apply for implicit closure #20 in implicit closure #19 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 336))();
}

uint64_t partial apply for implicit closure #18 in implicit closure #17 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return MEMORY[0x1F4158800]();
}

uint64_t partial apply for implicit closure #42 in implicit closure #41 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 304))();
}

uint64_t partial apply for implicit closure #14 in implicit closure #13 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 296))();
}

uint64_t partial apply for implicit closure #12 in implicit closure #11 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 320))();
}

uint64_t partial apply for implicit closure #10 in implicit closure #9 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 312))();
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 192))();
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 184))();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 176))();
}

uint64_t static AppInfoDataProvider.make(appDataProvider:preferences:)(uint64_t a1, void *a2)
{
  outlined init with copy of AppDataProviding(a1, (uint64_t)v6);
  type metadata accessor for AppInfoDataProvider();
  uint64_t v3 = swift_allocObject();
  outlined init with take of AppDataProviding(v6, v3 + 16);
  *(void *)(v3 + 56) = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  id v4 = a2;
  return specialized AnyDataProvider.init<A>(provider:)(v3);
}

uint64_t AppInfoDataProvider.appDataProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AppDataProviding(v1 + 16, a1);
}

id AppInfoDataProvider.preferences.getter()
{
  return *(id *)(v0 + 56);
}

uint64_t AppInfoDataProvider.__allocating_init(appDataProvider:preferences:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  outlined init with take of AppDataProviding(a1, v4 + 16);
  *(void *)(v4 + 56) = a2;
  return v4;
}

uint64_t type metadata accessor for AppInfoDataProvider()
{
  return self;
}

uint64_t AppInfoDataProvider.init(appDataProvider:preferences:)(long long *a1, uint64_t a2)
{
  outlined init with take of AppDataProviding(a1, v2 + 16);
  *(void *)(v2 + 56) = a2;
  return v2;
}

uint64_t specialized NSDictionary.arrayValue<A>(for:)()
{
  uint64_t v1 = (void *)MEMORY[0x1CB77CA90]();
  id v2 = objc_msgSend(v0, sel_objectForKey_, v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  outlined init with take of PommesSearchReason?((uint64_t)v12, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v14)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v3 = v10;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    uint64_t v6 = v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Any(v6, (uint64_t)v13);
      outlined init with copy of Any((uint64_t)v13, (uint64_t)v12);
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSDictionary);
      if (swift_dynamicCast())
      {
        uint64_t v7 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
        if (v9)
        {
          MEMORY[0x1CB77CD90](v7);
          if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      }
      v6 += 32;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    uint64_t v4 = v11;
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t closure #3 in AppInfoDataProvider.equivalentAppInfo(span:)()
{
  Apple_Parsec_Siri_V2alpha_AppVocabularyConcept.init()();
  v0._unint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String_optional v1 = NSDictionary.stringValue(for:)(v0);
  swift_bridgeObjectRelease();
  if (v1.value._object)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      v27[0] = v6;
      unint64_t countAndFlagsBits = v1.value._countAndFlagsBits;
      *(_DWORD *)uint64_t v5 = 136315138;
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)&v26[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v3, v4, "PegasusProxy#equivalentAppInfo unable find id from key:%s", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v6, -1, -1);
      MEMORY[0x1CB77E470](v5, -1, -1);
    }

    Apple_Parsec_Siri_V2alpha_AppInfo.appName.setter();
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = specialized NSDictionary.arrayValue<A>(for:)();
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_30;
  }
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = result;
    if (result) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v10)
  {
LABEL_29:
    swift_bridgeObjectRelease_n();
    Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
LABEL_30:
    v22._unint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23.value = NSDictionary.BOOLeanValue(for:)(v22).value;
    uint64_t result = swift_bridgeObjectRelease();
    if (v23.value != 2) {
      return MEMORY[0x1CB778F40](v23.value);
    }
    return result;
  }
LABEL_10:
  if (v10 >= 1)
  {
    uint64_t v12 = 0;
    unint64_t countAndFlagsBits = v9 & 0xC000000000000001;
    char v13 = (void *)MEMORY[0x1E4FBC860];
    while (1)
    {
      if (countAndFlagsBits) {
        id v14 = (id)MEMORY[0x1CB77D510](v12, v9);
      }
      else {
        id v14 = *(id *)(v9 + 8 * v12 + 32);
      }
      uint64_t v15 = v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = (void *)MEMORY[0x1CB77CA90](v16);
      id v18 = objc_msgSend(v15, sel_objectForKey_, v17);

      if (v18)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v26, 0, sizeof(v26));
      }
      outlined init with take of PommesSearchReason?((uint64_t)v26, (uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v27[3])
      {
        if (swift_dynamicCast())
        {

          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          }
          unint64_t v20 = v13[2];
          unint64_t v19 = v13[3];
          if (v20 >= v19 >> 1) {
            char v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v13);
          }
          v13[2] = v20 + 1;
          uint64_t v21 = &v13[2 * v20];
          v21[4] = v24;
          v21[5] = v25;
          goto LABEL_14;
        }
      }
      else
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }

      swift_bridgeObjectRelease();
LABEL_14:
      if (v10 == ++v12) {
        goto LABEL_29;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #4 in AppInfoDataProvider.equivalentAppInfo(span:)()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
  v4[3] = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for LNMetadataProvider);
  void v4[4] = &protocol witness table for LNMetadataProvider;
  v4[0] = v0;
  uint64_t v1 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
  AppIntentMetadataMapper.getAppIntentMetadata(bundleId:)(v1, v2);
  swift_bridgeObjectRelease();
  outlined destroy of AppIntentMetadataMapper((uint64_t)v4);
  return Apple_Parsec_Siri_V2alpha_AppInfo.appIntentsProtocolMetadata.setter();
}

uint64_t AppInfoDataProvider.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return v0;
}

uint64_t AppInfoDataProvider.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance AppInfoDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance AppInfoDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance AppInfoDataProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 128))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProvider.reset() in conformance AppInfoDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t method lookup function for AppInfoDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AppInfoDataProvider);
}

uint64_t dispatch thunk of AppInfoDataProvider.__allocating_init(appDataProvider:preferences:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of AppInfoDataProvider.prepare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of AppInfoDataProvider.wait(timeout:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))() & 1;
}

uint64_t dispatch thunk of AppInfoDataProvider.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  __int16 v4 = *(_WORD *)(a2 + 88);
  uint64_t v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 128);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = v3;
  __int16 v11 = v4;
  return v5(a1, v9);
}

uint64_t sub_1C90633DC()
{
  outlined consume of FeatureFlag(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x1F4186498](v0, 49, 7);
}

uint64_t partial apply for closure #4 in AppInfoDataProvider.equivalentAppInfo(span:)()
{
  return closure #4 in AppInfoDataProvider.equivalentAppInfo(span:)();
}

uint64_t outlined destroy of AppIntentMetadataMapper(uint64_t a1)
{
  return a1;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppInfo?);
  MEMORY[0x1F4188790](v4 - 8);
  long long v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
  uint64_t v7 = *(void *)(v37 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v37);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v34 = (char *)v29 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v13 = *(void *)(type metadata accessor for Siri_Nlu_External_Span() - 8);
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    os_log_type_t v35 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v36 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
    uint64_t v15 = *(void *)(v13 + 72);
    v29[1] = a1;
    uint64_t v16 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    unint64_t v38 = MEMORY[0x1E4FBC860];
    BOOL v32 = v10;
    uint64_t v33 = v7;
    uint64_t v17 = v10;
    uint64_t v18 = v37;
    uint64_t v30 = v15;
    os_log_type_t v31 = v16;
    while (1)
    {
      AppInfoDataProvider.equivalentAppInfo(span:)(v14, (uint64_t)v6);
      if (v2)
      {

        (*v16)(v6, 1, 1, v18);
        uint64_t v2 = 0;
      }
      else if ((*v36)(v6, 1, v18) != 1)
      {
        unint64_t v19 = *v35;
        unint64_t v20 = v17;
        uint64_t v21 = v34;
        (*v35)(v34, v6, v37);
        Swift::String v22 = v20;
        uint64_t v18 = v37;
        v19(v22, v21, v37);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v23 = v38;
        }
        else {
          unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1, v38);
        }
        unint64_t v25 = *(void *)(v23 + 16);
        unint64_t v24 = *(void *)(v23 + 24);
        if (v25 >= v24 >> 1) {
          unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v23);
        }
        *(void *)(v23 + 16) = v25 + 1;
        unint64_t v26 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
        unint64_t v38 = v23;
        unint64_t v27 = v23 + v26 + *(void *)(v33 + 72) * v25;
        uint64_t v17 = v32;
        v19((char *)v27, v32, v18);
        uint64_t v15 = v30;
        uint64_t v16 = v31;
        goto LABEL_5;
      }
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppInfo?);
LABEL_5:
      v14 += v15;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        return v38;
      }
    }
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t key path setter for MarketplaceInfoDataProvider.marketplaceInfo : MarketplaceInfoDataProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  MEMORY[0x1F4188790](v4 - 8);
  long long v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Apple_Parsec_Search_V2_MarketplaceInfo?(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 96))(v6);
}

uint64_t MarketplaceInfoDataProvider.marketplaceInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  swift_beginAccess();
  return outlined init with copy of Apple_Parsec_Search_V2_MarketplaceInfo?(v3, a1);
}

uint64_t outlined init with copy of Apple_Parsec_Search_V2_MarketplaceInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MarketplaceInfoDataProvider.marketplaceInfo.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Search_V2_MarketplaceInfo?(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of Apple_Parsec_Search_V2_MarketplaceInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*MarketplaceInfoDataProvider.marketplaceInfo.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t MarketplaceInfoDataProvider.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return v0;
}

uint64_t MarketplaceInfoDataProvider.init()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return v0;
}

uint64_t static MarketplaceInfoDataProvider.make()()
{
  type metadata accessor for MarketplaceInfoDataProvider();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v0);
}

uint64_t type metadata accessor for MarketplaceInfoDataProvider()
{
  uint64_t result = type metadata singleton initialization cache for MarketplaceInfoDataProvider;
  if (!type metadata singleton initialization cache for MarketplaceInfoDataProvider) {
    return swift_getSingletonMetadata();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MarketplaceInfoDataProvider.prepare()()
{
  uint64_t v2 = v0;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v44 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v15 = *(void (**)(uint64_t))(*(void *)v0 + 88);
  uint64_t v46 = *(void *)v0 + 88;
  uint64_t v47 = v15;
  v15(v12);
  uint64_t v16 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v18 = v45(v14, 1, v16);
  outlined destroy of Apple_Parsec_Search_V2_MarketplaceInfo?((uint64_t)v14);
  if (v18 == 1)
  {
    uint64_t v49 = 0;
    int domain_answer = os_eligibility_get_domain_answer();
    if (domain_answer)
    {
      int v20 = domain_answer;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
      Swift::String v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        unint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v24 = 67109120;
        int v50 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C8F83000, v22, v23, "MarketplaceInfoDataProvider could not retrieve HYDROGEN domain eligibility information, assuming ineligible. EligibilityError: %d", v24, 8u);
        MEMORY[0x1CB77E470](v24, -1, -1);
      }
    }
    else
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v43 = v1;
      uint64_t v25 = type metadata accessor for Logger();
      uint64_t v42 = __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
      unint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      int v28 = v27;
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        int v41 = v28;
        uint64_t v30 = v29;
        *(_DWORD *)uint64_t v29 = 134217984;
        uint64_t v40 = v29 + 4;
        swift_beginAccess();
        uint64_t v48 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C8F83000, v26, (os_log_type_t)v41, "MarketplaceInfoDataProvider device eligibility: %llu", v30, 0xCu);
        MEMORY[0x1CB77E470](v30, -1, -1);
      }

      MEMORY[0x1F4188790](v31);
      *(&v40 - 2) = &v49;
      lazy protocol witness table accessor for type Apple_Parsec_Search_V2_MarketplaceInfo and conformance Apple_Parsec_Search_V2_MarketplaceInfo(&lazy protocol witness table cache variable for type Apple_Parsec_Search_V2_MarketplaceInfo and conformance Apple_Parsec_Search_V2_MarketplaceInfo, MEMORY[0x1E4F88E88]);
      uint64_t v32 = v43;
      static Message.with(_:)();
      uint64_t v43 = v32;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v11, 0, 1, v16);
      uint64_t v33 = (*(uint64_t (**)(char *))(*(void *)v2 + 96))(v11);
      v47(v33);
      if (v45(v8, 1, v16))
      {
        outlined destroy of Apple_Parsec_Search_V2_MarketplaceInfo?((uint64_t)v8);
      }
      else
      {
        char v34 = Apple_Parsec_Search_V2_MarketplaceInfo.isMarketplaceEligible.getter();
        outlined destroy of Apple_Parsec_Search_V2_MarketplaceInfo?((uint64_t)v8);
        if (v34)
        {
          uint64_t v35 = type metadata accessor for TaskPriority();
          uint64_t v36 = (uint64_t)v44;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v44, 1, 1, v35);
          uint64_t v37 = (void *)swift_allocObject();
          uint64_t v37[2] = 0;
          uint64_t v37[3] = 0;
          v37[4] = v2;
          swift_retain();
          _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v36, (uint64_t)&async function pointer to partial apply for closure #2 in MarketplaceInfoDataProvider.prepare(), (uint64_t)v37);
          swift_release();
          return;
        }
      }
      Swift::String v22 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v39 = 0;
        _os_log_impl(&dword_1C8F83000, v22, v38, "MarketplaceInfoDataProvider device ineligible", v39, 2u);
        MEMORY[0x1CB77E470](v39, -1, -1);
      }
    }
  }
}

uint64_t outlined destroy of Apple_Parsec_Search_V2_MarketplaceInfo?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #2 in MarketplaceInfoDataProvider.prepare()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #2 in MarketplaceInfoDataProvider.prepare(), 0, 0);
}

void closure #2 in MarketplaceInfoDataProvider.prepare()()
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1C8F83000, v2, v3, "MarketplaceInfoDataProvider fetching distributors", v4, 2u);
    MEMORY[0x1CB77E470](v4, -1, -1);
  }

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static PerformanceUtil.shared;
  uint64_t v6 = type metadata accessor for Date();
  v0[3] = v6;
  v0[4] = *(void *)(v6 - 8);
  v0[5] = swift_task_alloc();
  Date.init()();
  uint64_t v8 = *(void *)(*(void *)v5 + 208) + **(int **)(*(void *)v5 + 208);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[6] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  *uint64_t v7 = v0;
  v7[1] = closure #2 in MarketplaceInfoDataProvider.prepare();
  __asm { BRAA            X9, X16 }
}

uint64_t closure #2 in MarketplaceInfoDataProvider.prepare()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 32);
  uint64_t v3 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #2 in MarketplaceInfoDataProvider.prepare(), 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare()(uint64_t a1, uint64_t a2)
{
  v2[6] = a1;
  v2[7] = a2;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare(), 0, 0);
}

uint64_t closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare()()
{
  uint64_t v1 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t))(**(void **)(v0 + 56) + 104))(v0 + 16);
  uint64_t v3 = v2;
  *(void *)(v0 + 88) = v1;
  *(void *)(v0 + 96) = v2;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4);
  *(_DWORD *)(v0 + 120) = v5;
  if (v5)
  {
    v1(v0 + 16, 0);
    **(unsigned char **)(v0 + 48) = *(_DWORD *)(v0 + 120) != 0;
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v8;
    void *v8 = v0;
    v8[1] = closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare();
    return MEMORY[0x1F41088F8]();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, void);
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v17 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v16 = v3;
    uint64_t v4 = v17;
    int v5 = (uint64_t *)(v1 + 40);
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      uint64_t v8 = swift_task_alloc();
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = v6;
      lazy protocol witness table accessor for type Apple_Parsec_Search_V2_MarketplaceInfo and conformance Apple_Parsec_Search_V2_MarketplaceInfo(&lazy protocol witness table cache variable for type Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace and conformance Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace, MEMORY[0x1E4F88E78]);
      swift_bridgeObjectRetain();
      static Message.with(_:)();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
        uint64_t v4 = v17;
      }
      uint64_t v10 = *(void *)(v4 + 16);
      uint64_t v9 = *(void *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v4 = v17;
      }
      uint64_t v11 = *(void *)(v0 + 80);
      uint64_t v12 = *(void *)(v0 + 64);
      *(void *)(v4 + 16) = v10 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))(v4+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v10, v11, v12);
      uint64_t v17 = v4;
      v5 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = *(void (**)(uint64_t, void))(v0 + 88);
  MEMORY[0x1CB778170](v4);
  v13(v0 + 16, 0);
  **(unsigned char **)(v0 + 48) = *(_DWORD *)(v0 + 120) != 0;
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare()(uint64_t a1)
{
  *(void *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare(), 0, 0);
}

uint64_t MarketplaceInfoDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t MarketplaceInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    int v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1C8F83000, v3, v4, "MarketplaceInfoDataProvider returning marketplace info", v5, 2u);
    MEMORY[0x1CB77E470](v5, -1, -1);
  }

  uint64_t v6 = *(uint64_t (**)(void))(*(void *)v1 + 88);

  return v6();
}

Swift::Void __swiftcall MarketplaceInfoDataProvider.reset()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  (*(void (**)(char *))(*(void *)v0 + 96))(v3);
}

uint64_t MarketplaceInfoDataProvider.deinit()
{
  outlined destroy of Apple_Parsec_Search_V2_MarketplaceInfo?(v0 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo);
  return v0;
}

uint64_t MarketplaceInfoDataProvider.__deallocating_deinit()
{
  outlined destroy of Apple_Parsec_Search_V2_MarketplaceInfo?(v0 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance MarketplaceInfoDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance MarketplaceInfoDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance MarketplaceInfoDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t protocol witness for DataProvider.reset() in conformance MarketplaceInfoDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t partial apply for closure #1 in MarketplaceInfoDataProvider.prepare()()
{
  return Apple_Parsec_Search_V2_MarketplaceInfo.isMarketplaceEligible.setter();
}

uint64_t sub_1C90650FC()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #2 in MarketplaceInfoDataProvider.prepare()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  _OWORD v3[2] = v2;
  return MEMORY[0x1F4188298](closure #2 in MarketplaceInfoDataProvider.prepare(), 0, 0);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UInt64)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1C9065214(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 88))();
}

uint64_t ObjC metadata update function for MarketplaceInfoDataProvider()
{
  return type metadata accessor for MarketplaceInfoDataProvider();
}

void type metadata completion function for MarketplaceInfoDataProvider()
{
  type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for MarketplaceInfoDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MarketplaceInfoDataProvider);
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.marketplaceInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.marketplaceInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.marketplaceInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.prepare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.wait(timeout:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))() & 1;
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  __int16 v4 = *(_WORD *)(a2 + 88);
  uint64_t v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 136);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = v3;
  __int16 v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

void type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo?()
{
  if (!lazy cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?)
  {
    type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
    }
  }
}

uint64_t partial apply for closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare()(uint64_t a1)
{
  __int16 v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *__int16 v4 = v2;
  v4[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare()(a1, v1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return MEMORY[0x1CB778150](v2, v1);
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Search_V2_MarketplaceInfo and conformance Apple_Parsec_Search_V2_MarketplaceInfo(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id PommesCacheInstrumentationUtil.mockStream.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = *(id *)(v0 + 16);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    __int16 v4 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t PommesCacheInstrumentationUtil.mockStream.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F41817F8]();
}

void (*PommesCacheInstrumentationUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = PommesCacheInstrumentationUtil.mockStream.getter();
  return PommesCacheInstrumentationUtil.mockStream.modify;
}

void PommesCacheInstrumentationUtil.mockStream.modify(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v2;
}

uint64_t PommesCacheInstrumentationUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t PommesCacheInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  return result;
}

uint64_t PommesCacheInstrumentationUtil.init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = a1;
  return v1;
}

void PommesCacheInstrumentationUtil.logPommesCacheLookupStarted(requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v5 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1000]), sel_init);
    if (v7)
    {
      uint64_t v8 = v7;
      id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1018]), sel_init);
      if (v9)
      {
        uint64_t v10 = v9;
        objc_msgSend(v9, sel_setExists_, 1);
        objc_msgSend(v8, sel_setStartedOrChanged_, v10);
        objc_msgSend(v6, sel_setCacheLookupContext_, v8);
        __int16 v11 = self;
        swift_retain();
        id v12 = objc_msgSend(v11, sel_processInfo);
        char v13 = NSProcessInfo.isRunningUnitTests.getter();

        if (v13) {
          id v14 = (id)(*(uint64_t (**)(void))(*(void *)v4 + 96))();
        }
        else {
          id v14 = objc_msgSend(self, sel_sharedStream);
        }
        int v18 = v14;
        swift_release();
        objc_msgSend(v18, sel_emitMessage_, v6);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v8 = v6;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v16, "Unable to log POMMES cache look up started event", v17, 2u);
    MEMORY[0x1CB77E470](v17, -1, -1);
  }
}

void PommesCacheInstrumentationUtil.logPommesCacheLookupFailed(requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void PommesCacheInstrumentationUtil.logPommesCacheLookupEnded(requestId:pommesCandidateId:status:resultDomain:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  __int16 v11 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
  if (v11)
  {
    id v12 = v11;
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1000]), sel_init);
    if (v13)
    {
      id v14 = v13;
      id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1008]), sel_init);
      if (v15)
      {
        os_log_type_t v16 = v15;
        objc_msgSend(v15, sel_setStatus_, a4);
        if (a6) {
          uint64_t v17 = (void *)MEMORY[0x1CB77CA90](a5, a6);
        }
        else {
          uint64_t v17 = 0;
        }
        objc_msgSend(v16, sel_setResultDomain_, v17);

        objc_msgSend(v14, sel_setEnded_, v16);
        objc_msgSend(v12, sel_setCacheLookupContext_, v14);
        uint64_t v21 = self;
        swift_retain();
        id v22 = objc_msgSend(v21, sel_processInfo);
        char v23 = NSProcessInfo.isRunningUnitTests.getter();

        if (v23) {
          id v24 = (id)(*(uint64_t (**)(void))(*(void *)v7 + 96))();
        }
        else {
          id v24 = objc_msgSend(self, sel_sharedStream);
        }
        uint64_t v25 = v24;
        swift_release();
        objc_msgSend(v25, sel_emitMessage_, v12);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      id v14 = v12;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v19))
  {
    int v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v20 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v19, "Unable to log POMMES cache look up ended event", v20, 2u);
    MEMORY[0x1CB77E470](v20, -1, -1);
  }
}

void PommesCacheInstrumentationUtil.logPommesCacheStoringStarted(requestId:pommesCandidateId:resultDomain:resultSizeInBytes:timeToLiveInSeconds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  id v13 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
  if (v13)
  {
    id v14 = v13;
    id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1040]), sel_init);
    if (v15)
    {
      os_log_type_t v16 = v15;
      id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1058]), sel_init);
      if (v17)
      {
        uint64_t v18 = v17;
        os_log_type_t v19 = (void *)MEMORY[0x1CB77CA90](a4, a5);
        objc_msgSend(v18, sel_setResultDomain_, v19);

        objc_msgSend(v18, sel_setResultSizeInBytes_, a6);
        objc_msgSend(v18, sel_setTimeToLiveInSeconds_, a7);
        objc_msgSend(v16, sel_setStartedOrChanged_, v18);
        objc_msgSend(v14, sel_setCacheStoringContext_, v16);
        int v20 = self;
        swift_retain();
        id v21 = objc_msgSend(v20, sel_processInfo);
        char v22 = NSProcessInfo.isRunningUnitTests.getter();

        if (v22) {
          id v23 = (id)(*(uint64_t (**)(void))(*(void *)v8 + 96))();
        }
        else {
          id v23 = objc_msgSend(self, sel_sharedStream);
        }
        os_log_type_t v27 = v23;
        swift_release();
        objc_msgSend(v27, sel_emitMessage_, v14);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      os_log_type_t v16 = v14;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v25))
  {
    unint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v26 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v25, "Unable to log POMMES cache storing started event", v26, 2u);
    MEMORY[0x1CB77E470](v26, -1, -1);
  }
}

void PommesCacheInstrumentationUtil.logPommesCacheStoringFailed(requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void PommesCacheInstrumentationUtil.logPommesCacheLookupFailed(requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Class *a5, Class *a6, SEL *a7, const char *a8)
{
  uint64_t v13 = v8;
  id v15 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
  if (v15)
  {
    os_log_type_t v16 = v15;
    id v17 = objc_msgSend(objc_allocWithZone(*a5), sel_init);
    if (v17)
    {
      uint64_t v18 = v17;
      id v19 = objc_msgSend(objc_allocWithZone(*a6), sel_init);
      if (v19)
      {
        int v20 = v19;
        objc_msgSend(v19, sel_setReason_, a4);
        objc_msgSend(v18, sel_setFailed_, v20);
        objc_msgSend(v16, *a7, v18);
        id v21 = self;
        swift_retain();
        id v22 = objc_msgSend(v21, sel_processInfo);
        char v23 = NSProcessInfo.isRunningUnitTests.getter();

        if (v23) {
          id v24 = (id)(*(uint64_t (**)(void))(*(void *)v13 + 96))();
        }
        else {
          id v24 = objc_msgSend(self, sel_sharedStream);
        }
        int v28 = v24;
        swift_release();
        objc_msgSend(v28, sel_emitMessage_, v16);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v18 = v16;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v26))
  {
    os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v27 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v26, a8, v27, 2u);
    MEMORY[0x1CB77E470](v27, -1, -1);
  }
}

void PommesCacheInstrumentationUtil.logPommesCacheStoringEnded(requestId:pommesCandidateId:status:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1040]), sel_init);
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1048]), sel_init);
      if (v11)
      {
        id v12 = v11;
        objc_msgSend(v11, sel_setStatus_, a4);
        objc_msgSend(v10, sel_setEnded_, v12);
        objc_msgSend(v8, sel_setCacheStoringContext_, v10);
        uint64_t v13 = self;
        swift_retain();
        id v14 = objc_msgSend(v13, sel_processInfo);
        char v15 = NSProcessInfo.isRunningUnitTests.getter();

        if (v15) {
          id v16 = (id)(*(uint64_t (**)(void))(*(void *)v5 + 96))();
        }
        else {
          id v16 = objc_msgSend(self, sel_sharedStream);
        }
        int v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v10 = v8;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v19 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v18, "Unable to log POMMES cache storing ended event", v19, 2u);
    MEMORY[0x1CB77E470](v19, -1, -1);
  }
}

void PommesCacheInstrumentationUtil.logPommesCacheInvalidationStarted(requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0FE0]), sel_init);
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0FF8]), sel_init);
      if (v11)
      {
        id v12 = v11;
        objc_msgSend(v11, sel_setReason_, a4);
        objc_msgSend(v10, sel_setStartedOrChanged_, v12);
        objc_msgSend(v8, sel_setCacheInvalidationContext_, v10);
        uint64_t v13 = self;
        swift_retain();
        id v14 = objc_msgSend(v13, sel_processInfo);
        char v15 = NSProcessInfo.isRunningUnitTests.getter();

        if (v15) {
          id v16 = (id)(*(uint64_t (**)(void))(*(void *)v5 + 96))();
        }
        else {
          id v16 = objc_msgSend(self, sel_sharedStream);
        }
        int v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v10 = v8;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v19 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v18, "Unable to log POMMES cache invalidation started event", v19, 2u);
    MEMORY[0x1CB77E470](v19, -1, -1);
  }
}

void PommesCacheInstrumentationUtil.logPommesCacheInvalidationFailed(requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void PommesCacheInstrumentationUtil.logPommesCacheInvalidationEnded(requestId:pommesCandidateId:numberOfCacheKeysInvalidated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0FE0]), sel_init);
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0FE8]), sel_init);
      if (v11)
      {
        id v12 = v11;
        objc_msgSend(v11, sel_setNumberOfCacheKeysInvalidated_, a4);
        objc_msgSend(v10, sel_setEnded_, v12);
        objc_msgSend(v8, sel_setCacheInvalidationContext_, v10);
        uint64_t v13 = self;
        swift_retain();
        id v14 = objc_msgSend(v13, sel_processInfo);
        char v15 = NSProcessInfo.isRunningUnitTests.getter();

        if (v15) {
          id v16 = (id)(*(uint64_t (**)(void))(*(void *)v5 + 96))();
        }
        else {
          id v16 = objc_msgSend(self, sel_sharedStream);
        }
        int v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v10 = v8;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v19 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v18, "Unable to log POMMES cache invalidation ended event", v19, 2u);
    MEMORY[0x1CB77E470](v19, -1, -1);
  }
}

uint64_t PommesCacheInstrumentationUtil.logPommesCacheMaintenanceStarted(secondsSinceLastMaintenanceStarted:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PommesCandidateId();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(0, 0, (uint64_t)v6, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for PommesCandidateId?);
  if (v8)
  {
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1020]), sel_init);
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1038]), sel_init);
      if (v11)
      {
        id v12 = v11;
        if ((a1 & 0x100000000) == 0) {
          objc_msgSend(v11, sel_setTimeSinceLastMaintenanceInSeconds_, a1);
        }
        objc_msgSend(v10, sel_setStartedOrChanged_, v12);
        objc_msgSend(v8, sel_setCacheMaintenanceContext_, v10);
        UUID.init()();
        PommesCacheInstrumentationUtil.emitFromIsolatedStream(message:uuid:)((uint64_t)v8);

        uint64_t v13 = type metadata accessor for UUID();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, 0, 1, v13);
      }
    }
    else
    {
      uint64_t v10 = v8;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v18 = 0;
    _os_log_impl(&dword_1C8F83000, v16, v17, "Unable to log POMMESCacheMaintenanceStarted event", v18, 2u);
    MEMORY[0x1CB77E470](v18, -1, -1);
  }

  uint64_t v19 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a2, 1, 1, v19);
}

void PommesCacheInstrumentationUtil.logPommesCacheMaintenanceEnded(isolatedStreamUUID:numberOfCacheEntriesUpdated:totalCacheEntries:secondsSinceMaintenanceStarted:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v9 - 8);
  id v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PommesCandidateId();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(0, 0, (uint64_t)v11, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
  outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PommesCandidateId?);
  if (v13)
  {
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1020]), sel_init);
    if (v14)
    {
      uint64_t v15 = v14;
      id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1028]), sel_init);
      if (v16)
      {
        os_log_type_t v17 = v16;
        [v16 setNumberOfEntriesUpdated:a2];
        [v17 setTotalCacheEntries:a3];
        [v17 setTimeSinceMaintenanceStartedInSeconds:a4];
        [v17 setReason:a5];
        objc_msgSend(v15, sel_setEnded_, v17);
        objc_msgSend(v13, sel_setCacheMaintenanceContext_, v15);
        PommesCacheInstrumentationUtil.emitFromIsolatedStream(message:uuid:)((uint64_t)v13);

        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v15 = v13;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_1C8F83000, v17, v19, "Unable to log POMMESCacheMaintenanceEnded event", v20, 2u);
    MEMORY[0x1CB77E470](v20, -1, -1);
  }
LABEL_12:
}

void PommesCacheInstrumentationUtil.logPommesCacheMaintenanceFailed(isolatedStreamUUID:reason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PommesCandidateId();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(0, 0, (uint64_t)v5, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for PommesCandidateId?);
  if (v7)
  {
    id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1020]), sel_init);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1030]), sel_init);
      if (v10)
      {
        id v11 = v10;
        [v10 setReason:a2];
        objc_msgSend(v9, sel_setFailed_, v11);
        objc_msgSend(v7, sel_setCacheMaintenanceContext_, v9);
        PommesCacheInstrumentationUtil.emitFromIsolatedStream(message:uuid:)((uint64_t)v7);

        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v9 = v7;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
  id v11 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v14 = 0;
    _os_log_impl(&dword_1C8F83000, v11, v13, "Unable to log POMMESCacheMaintenanceFailed event", v14, 2u);
    MEMORY[0x1CB77E470](v14, -1, -1);
  }
LABEL_12:
}

void PommesCacheInstrumentationUtil.emitFromIsolatedStream(message:uuid:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = self;
  id v5 = objc_msgSend(v4, sel_processInfo);
  char v6 = NSProcessInfo.isRunningUnitTests.getter();

  if (v6)
  {
    os_log_t oslog = (os_log_t)(*(uint64_t (**)(void))(*(void *)v2 + 96))();
    (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & (uint64_t)oslog->isa) + 0x78))(a1);
    goto LABEL_13;
  }
  swift_retain();
  id v7 = objc_msgSend(v4, sel_processInfo);
  char v8 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v8 & 1) == 0)
  {
    id v11 = objc_msgSend(self, sel_sharedStream);
    swift_release();
    self;
    uint64_t v10 = (void *)swift_dynamicCastObjCClass();
    if (!v10)
    {
      swift_unknownObjectRelease();
      goto LABEL_9;
    }
LABEL_7:
    os_log_t oslog = (os_log_t)UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v10, sel_emitMessage_isolatedStreamUUID_, a1);

    goto LABEL_13;
  }
  uint64_t v9 = (void *)(*(uint64_t (**)(void))(*(void *)v2 + 96))();
  swift_release();
  self;
  uint64_t v10 = (void *)swift_dynamicCastObjCClass();
  if (v10) {
    goto LABEL_7;
  }

LABEL_9:
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
  os_log_t oslog = (os_log_t)Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v14 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v13, "PegasusCacheManager : Default stream is not an instance of SiriAnalyticsClientMessageStream", v14, 2u);
    MEMORY[0x1CB77E470](v14, -1, -1);
  }
LABEL_13:
}

uint64_t PommesCacheInstrumentationUtil.deinit()
{
  swift_release();
  return v0;
}

uint64_t PommesCacheInstrumentationUtil.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Emittable.mockStream.getter in conformance PommesCacheInstrumentationUtil()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for Emittable.analyticsComponentIdGenerator.getter in conformance PommesCacheInstrumentationUtil()
{
  return swift_retain();
}

uint64_t sub_1C90691C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C906920C(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 104))(*a1);
}

uint64_t type metadata accessor for PommesCacheInstrumentationUtil()
{
  return self;
}

uint64_t method lookup function for PommesCacheInstrumentationUtil(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesCacheInstrumentationUtil);
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.mockStream.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.mockStream.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.mockStream.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheLookupStarted(requestId:pommesCandidateId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheLookupFailed(requestId:pommesCandidateId:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheLookupEnded(requestId:pommesCandidateId:status:resultDomain:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheStoringStarted(requestId:pommesCandidateId:resultDomain:resultSizeInBytes:timeToLiveInSeconds:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheStoringFailed(requestId:pommesCandidateId:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheStoringEnded(requestId:pommesCandidateId:status:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheInvalidationStarted(requestId:pommesCandidateId:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheInvalidationFailed(requestId:pommesCandidateId:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheInvalidationEnded(requestId:pommesCandidateId:numberOfCacheKeysInvalidated:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheMaintenanceStarted(secondsSinceLastMaintenanceStarted:)(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)v1 + 200))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheMaintenanceEnded(isolatedStreamUUID:numberOfCacheEntriesUpdated:totalCacheEntries:secondsSinceMaintenanceStarted:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheMaintenanceFailed(isolatedStreamUUID:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t Collection<>.merge<A>(with:by:isAscending:)(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  id v57 = a2;
  uint64_t v58 = a6;
  int v59 = a3;
  uint64_t v64 = a1;
  uint64_t v56 = *(void *)(*a2 + *MEMORY[0x1E4FBC5F0] + 8);
  uint64_t v10 = *(void *)(v56 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  uint64_t v55 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v62 = (char *)&v48 - v14;
  uint64_t v16 = *v15;
  uint64_t v17 = *(void *)(*v15 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v13);
  uint64_t v54 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v48 - v20;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v67 = Array.init()();
  id v24 = (void (**)(char *))(v17 + 16);
  id v52 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v53 = (void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v60 = a4;
  uint64_t v61 = (void (**)(char *))(v17 + 16);
  int v50 = v21;
  uint64_t v51 = a5;
LABEL_3:
  while (2)
  {
    for (i = v22; ; uint64_t v22 = i)
    {
      while (1)
      {
        if (v23 >= dispatch thunk of Collection.count.getter() && v22 >= MEMORY[0x1CB77CE40](v64, v16)) {
          return v67;
        }
        if (v23 == dispatch thunk of Collection.count.getter())
        {
          Array.subscript.getter();
          type metadata accessor for Array();
          uint64_t result = Array.append(_:)();
          BOOL v26 = __OFADD__(v22++, 1);
          if (!v26) {
            goto LABEL_3;
          }
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        if (v22 != MEMORY[0x1CB77CE40](v64, v16)) {
          break;
        }
        uint64_t v66 = v23;
        os_log_type_t v27 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
        (*v24)(v21);
        v27(v65, 0);
        type metadata accessor for Array();
        uint64_t result = Array.append(_:)();
        BOOL v26 = __OFADD__(v23++, 1);
        if (v26)
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
      }
      if (v59)
      {
        uint64_t v66 = v23;
        int v28 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v48 = *v24;
        v48(v21);
        v28(v65, 0);
        swift_getAtKeyPath();
        uint64_t v29 = *v53;
        (*v53)(v21, v16);
        uint64_t v30 = v54;
        Array.subscript.getter();
        uint64_t v31 = v7;
        uint64_t v32 = v55;
        swift_getAtKeyPath();
        v29(v30, v16);
        uint64_t v33 = v62;
        uint64_t v34 = v56;
        LODWORD(v49) = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v35 = *v52;
        (*v52)(v32, v34);
        v35(v33, v34);
        if (v49)
        {
          uint64_t v66 = v23;
          uint64_t v36 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
          uint64_t v37 = v50;
          v48(v50);
          v36(v65, 0);
          type metadata accessor for Array();
          uint64_t v21 = v37;
          uint64_t result = Array.append(_:)();
          BOOL v26 = __OFADD__(v23++, 1);
          if (v26) {
            goto LABEL_24;
          }
          goto LABEL_16;
        }
        uint64_t v7 = v31;
        uint64_t v21 = v50;
        uint64_t v46 = i;
        Array.subscript.getter();
        type metadata accessor for Array();
        uint64_t result = Array.append(_:)();
        BOOL v26 = __OFADD__(v46, 1);
        uint64_t v22 = v46 + 1;
        if (!v26) {
          goto LABEL_21;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      uint64_t v66 = v23;
      os_log_type_t v38 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v49 = *v24;
      v49(v21);
      v38(v65, 0);
      swift_getAtKeyPath();
      uint64_t v39 = *v53;
      (*v53)(v21, v16);
      uint64_t v40 = v54;
      Array.subscript.getter();
      uint64_t v31 = v7;
      int v41 = v55;
      swift_getAtKeyPath();
      v39(v40, v16);
      uint64_t v42 = v62;
      uint64_t v43 = v56;
      LOBYTE(v39) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v44 = *v52;
      (*v52)(v41, v43);
      v44(v42, v43);
      if (v39) {
        break;
      }
      uint64_t v66 = v23;
      uint64_t v45 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v21 = v50;
      v49(v50);
      v45(v65, 0);
      type metadata accessor for Array();
      uint64_t result = Array.append(_:)();
      BOOL v26 = __OFADD__(v23++, 1);
      if (v26) {
        goto LABEL_25;
      }
LABEL_16:
      uint64_t v7 = v31;
      id v24 = v61;
    }
    uint64_t v7 = v31;
    uint64_t v21 = v50;
    uint64_t v47 = i;
    Array.subscript.getter();
    type metadata accessor for Array();
    uint64_t result = Array.append(_:)();
    BOOL v26 = __OFADD__(v47, 1);
    uint64_t v22 = v47 + 1;
    if (!v26)
    {
LABEL_21:
      id v24 = v61;
      continue;
    }
    break;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t PommesRequestContext.__allocating_init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v21 = swift_allocObject();
  PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  return v21;
}

unint64_t PommesRequestContext.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6E61747369737361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x496E6F6973736573;
      break;
    case 2:
      unint64_t result = 0x4974736575716572;
      break;
    case 3:
      unint64_t result = 0x756F536F69647561;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x65736E6F70736572;
      break;
    case 6:
      unint64_t result = 0x7246736579457369;
      break;
    case 7:
    case 8:
    case 9:
      unint64_t result = 0xD000000000000015;
      break;
    case 10:
      unint64_t result = 0xD000000000000010;
      break;
    case 11:
      unint64_t result = 0x4D6E496567726162;
      break;
    case 12:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 13:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PommesRequestContext.CodingKeys()
{
  return PommesRequestContext.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PommesRequestContext.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PommesRequestContext.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance PommesRequestContext.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance PommesRequestContext.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesRequestContext.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesRequestContext.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PommesRequestContext.assistantId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesRequestContext.sessionId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_sessionId;
  uint64_t v4 = type metadata accessor for UUID();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t PommesRequestContext.requestId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesRequestContext.audioSource.getter()
{
  return PommesRequestContext.audioSource.getter(&OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioSource);
}

uint64_t PommesRequestContext.audioDestination.getter()
{
  return PommesRequestContext.audioSource.getter(&OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioDestination);
}

uint64_t PommesRequestContext.responseMode.getter()
{
  return PommesRequestContext.audioSource.getter(&OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_responseMode);
}

uint64_t PommesRequestContext.audioSource.getter(void *a1)
{
  uint64_t v2 = *(void *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t PommesRequestContext.isEyesFree.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isEyesFree);
}

uint64_t PommesRequestContext.isVoiceTriggerEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isVoiceTriggerEnabled);
}

uint64_t PommesRequestContext.isTextToSpeechEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTextToSpeechEnabled);
}

uint64_t PommesRequestContext.isTriggerlessFollowup.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTriggerlessFollowup);
}

uint64_t PommesRequestContext.isPushOffRequest.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isPushOffRequest);
}

uint64_t PommesRequestContext.bargeInModes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesRequestContext.approximatePreviousTTSInterval.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of MediaUserStateCenter?(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_approximatePreviousTTSInterval, a1, &demangling cache variable for type metadata for DateInterval?);
}

uint64_t PommesRequestContext.deviceRestrictions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesRequestContext.__allocating_init(assistantId:sessionId:requestId:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v23 = a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = v9[8];
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t (*)(char *, char *, uint64_t))v9[2];
  uint64_t v13 = v12(v11, a3, v8);
  MEMORY[0x1F4188790](v13);
  v12(v11, v11, v8);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DateInterval();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  BYTE4(v21) = 0;
  LODWORD(v21) = 0;
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, void, void, void, void, void, void, uint64_t, void, char *, void))(v5 + 200))(a1, v23, v11, v24, v25, 0, 0, 0, 0, 0, 0, v21, MEMORY[0x1E4FBC860], v16, MEMORY[0x1E4FBC860]);
  uint64_t v19 = (void (*)(char *, uint64_t))v9[1];
  v19(v11, v8);
  v19(a3, v8);
  return v18;
}

uint64_t PommesRequestContext.__allocating_init(assistantId:sessionId:requestId:deviceRestrictions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DateInterval();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  BYTE4(v22) = 0;
  LODWORD(v22) = 0;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, void, void, void, void, void, void, uint64_t, void, char *, uint64_t))(v6 + 200))(a1, a2, v15, a4, v24, 0, 0, 0, 0, 0, 0, v22, MEMORY[0x1E4FBC860], v18, a6);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a3, v12);
  return v20;
}

uint64_t PommesRequestContext.__allocating_init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v21 = swift_allocObject();
  PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  return v21;
}

uint64_t PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v24 = v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_sessionId;
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  uint64_t v25 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v24, a3, v25);
  BOOL v26 = (void *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  *BOOL v26 = a4;
  v26[1] = a5;
  os_log_type_t v27 = (void *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioSource);
  void *v27 = a6;
  v27[1] = a7;
  int v28 = (void *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioDestination);
  void *v28 = a8;
  v28[1] = a9;
  uint64_t v29 = (void *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_responseMode);
  *uint64_t v29 = a10;
  v29[1] = a11;
  *(unsigned char *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isEyesFree) = a12;
  *(unsigned char *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isVoiceTriggerEnabled) = a13;
  *(unsigned char *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTextToSpeechEnabled) = a14;
  *(unsigned char *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isPushOffRequest) = a15;
  *(unsigned char *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTriggerlessFollowup) = a16;
  *(void *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_bargeInModes) = a17;
  outlined init with take of DateInterval?(a18, v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_approximatePreviousTTSInterval);
  *(void *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_deviceRestrictions) = a19;
  return v19;
}

uint64_t PommesRequestContext.__allocating_init(from:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  PommesRequestContext.init(from:)(a1);
  return v2;
}

uint64_t PommesRequestContext.init(from:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PommesRequestContext.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    type metadata accessor for PommesRequestContext();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v36) = 0;
    *(void *)(v1 + 16) = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v1 + 24) = v8;
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v34 = &v28;
    uint64_t v33 = *(void *)(v9 - 8);
    MEMORY[0x1F4188790](v9);
    uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    LOBYTE(v36) = 1;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBF8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_sessionId, v11, v9);
    LOBYTE(v36) = 2;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v32 = v9;
    uint64_t v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
    *uint64_t v13 = v12;
    v13[1] = v14;
    LOBYTE(v36) = 3;
    uint64_t v34 = 0;
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v16 = (uint64_t *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioSource);
    *uint64_t v16 = v15;
    v16[1] = v17;
    LOBYTE(v36) = 4;
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v19 = (uint64_t *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioDestination);
    *uint64_t v19 = v18;
    v19[1] = v20;
    LOBYTE(v36) = 5;
    uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v22 = (uint64_t *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_responseMode);
    *uint64_t v22 = v21;
    v22[1] = v23;
    LOBYTE(v36) = 6;
    *(unsigned char *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isEyesFree) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v36) = 7;
    *(unsigned char *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isVoiceTriggerEnabled) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v36) = 8;
    *(unsigned char *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTextToSpeechEnabled) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v36) = 9;
    *(unsigned char *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTriggerlessFollowup) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v36) = 10;
    *(unsigned char *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isPushOffRequest) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    char v35 = 11;
    uint64_t v31 = lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_bargeInModes) = v36;
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    uint64_t v30 = &v28;
    MEMORY[0x1F4188790](v25 - 8);
    os_log_type_t v27 = (char *)&v28 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    type metadata accessor for DateInterval();
    LOBYTE(v36) = 12;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, MEMORY[0x1F418AE30]);
    uint64_t v29 = v27;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined init with take of DateInterval?((uint64_t)v29, v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_approximatePreviousTTSInterval);
    char v35 = 13;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_deviceRestrictions) = v36;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

unint64_t lazy protocol witness table accessor for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys);
  }
  return result;
}

uint64_t PommesRequestContext.__allocating_init(requestContextMessage:)(void *a1)
{
  uint64_t v2 = specialized PommesRequestContext.__allocating_init(requestContextMessage:)(a1);

  return v2;
}

uint64_t PommesRequestContext.__allocating_init(requestContextData:assistantId:sessionId:requestId:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v37 = a4;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v6 = a4;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v6, v8);
  uint64_t v12 = RequestContextData.audioSource.getter();
  uint64_t v34 = v13;
  uint64_t v35 = v12;
  uint64_t v14 = RequestContextData.audioDestination.getter();
  uint64_t v32 = v15;
  uint64_t v33 = v14;
  uint64_t v16 = RequestContextData.responseMode.getter();
  uint64_t v30 = v17;
  uint64_t v31 = v16;
  int v29 = RequestContextData.isEyesFree.getter();
  LOBYTE(v6) = RequestContextData.isVoiceTriggerEnabled.getter();
  char v18 = RequestContextData.isTextToSpeechEnabled.getter();
  char v19 = RequestContextData.isTriggerlessFollowup.getter();
  uint64_t v20 = RequestContextData.bargeInModes.getter();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = &v28[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  RequestContextData.approximatePreviousTTSInterval.getter();
  uint64_t v24 = RequestContextData.deviceRestrictions.getter();
  BYTE4(v27) = v19 & 1;
  BYTE3(v27) = 0;
  BYTE2(v27) = v18 & 1;
  BYTE1(v27) = v6 & 1;
  LOBYTE(v27) = v29 & 1;
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t))(v36 + 200))(v38, v39, v11, v40, v41, v35, v34, v33, v32, v31, v30, v27, v20, v23, v24);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v37, v8);
  return v25;
}

uint64_t PommesRequestContext.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesRequestContext.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBF8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_bargeInModes);
    char v11 = 11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 12;
    type metadata accessor for DateInterval();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, MEMORY[0x1F418AE30]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_deviceRestrictions);
    char v11 = 13;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PommesRequestContext.mappedInteractionType(inputOrigin:previousInteractionType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v44 = a2;
  uint64_t v39 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v37 = (uint64_t)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for InputOrigin();
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v42 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for InteractionTypeHelper();
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v33 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1F4188790](v9 - 8);
  char v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DeviceRestrictions();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  char v19 = (char *)v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v32 - v20;
  swift_bridgeObjectRetain();
  DeviceRestrictions.init(aceValue:)();
  static DeviceRestrictions.starkMode.getter();
  lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions, MEMORY[0x1E4FA5298]);
  v32[3] = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v16 + 8);
  v22(v19, v15);
  static DeviceRestrictions.carDNDMode.getter();
  v32[2] = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v34 = (uint64_t (*)(char *, uint64_t))v22;
  v22(v19, v15);
  swift_bridgeObjectRetain();
  uint64_t v23 = (uint64_t)v14;
  AudioSource.init(aceValue:)();
  swift_bridgeObjectRetain();
  uint64_t v38 = v11;
  uint64_t v25 = v35;
  uint64_t v24 = v36;
  AudioDestination.init(aceValue:)();
  uint64_t v26 = v33;
  static InteractionTypeHelper.shared.getter();
  uint64_t v27 = v37;
  outlined init with copy of MediaUserStateCenter?(v39, v37, &demangling cache variable for type metadata for InputOrigin?);
  uint64_t v28 = v27;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v27, 1, v24) == 1)
  {
    int v29 = v42;
    (*(void (**)(char *, void, uint64_t))(v25 + 104))(v42, *MEMORY[0x1E4FA5148], v24);
    outlined destroy of MediaUserStateCenter?(v28, &demangling cache variable for type metadata for InputOrigin?);
  }
  else
  {
    int v29 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v42, v28, v24);
  }
  uint64_t v30 = (uint64_t)v38;
  InteractionTypeHelper.mapInteractionType(inputOrigin:isEyesFree:isDeviceInStarkMode:isDeviceInCarDND:audioSource:audioDestination:previousInteractionType:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v24);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v41);
  outlined destroy of MediaUserStateCenter?(v30, &demangling cache variable for type metadata for AudioDestination?);
  outlined destroy of MediaUserStateCenter?(v23, &demangling cache variable for type metadata for AudioSource?);
  return v34(v21, v15);
}

uint64_t PommesRequestContext.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v62 = 0;
  unint64_t v63 = 0xE000000000000000;
  _StringGuts.grow(_:)(302);
  v2._unint64_t countAndFlagsBits = 0x6E61747369737361;
  v2._object = (void *)0xEE0022203A644974;
  String.append(_:)(v2);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v5._unint64_t countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._unint64_t countAndFlagsBits = 0x6973736573202C22;
  v6._object = (void *)0xEE00203A64496E6FLL;
  String.append(_:)(v6);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBF8]);
  v7._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._unint64_t countAndFlagsBits = 0x736575716572202CLL;
  v8._object = (void *)0xED0000203A644974;
  String.append(_:)(v8);
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  uint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  swift_bridgeObjectRetain();
  v11._unint64_t countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._unint64_t countAndFlagsBits = 0x536F69647561202CLL;
  v12._object = (void *)0xEF203A656372756FLL;
  String.append(_:)(v12);
  uint64_t v13 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioSource + 8);
  uint64_t v60 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioSource);
  uint64_t v61 = v13;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v14._unint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._unint64_t countAndFlagsBits = 0xD000000000000015;
  v15._object = (void *)0x80000001C919F150;
  String.append(_:)(v15);
  uint64_t v16 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioDestination + 8);
  uint64_t v60 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioDestination);
  uint64_t v61 = v16;
  swift_bridgeObjectRetain();
  v17._unint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._unint64_t countAndFlagsBits = 0xD000000000000012;
  v18._object = (void *)0x80000001C919F170;
  String.append(_:)(v18);
  uint64_t v19 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_responseMode + 8);
  uint64_t v60 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_responseMode);
  uint64_t v61 = v19;
  swift_bridgeObjectRetain();
  v20._unint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._unint64_t countAndFlagsBits = 0x6579457369202C22;
  v21._object = (void *)0xEF203A6565724673;
  String.append(_:)(v21);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isEyesFree)) {
    uint64_t v22 = 1702195828;
  }
  else {
    uint64_t v22 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isEyesFree)) {
    unint64_t v23 = 0xE400000000000000;
  }
  else {
    unint64_t v23 = 0xE500000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._object = (void *)0x80000001C919F190;
  v25._unint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v25);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isVoiceTriggerEnabled)) {
    uint64_t v26 = 1702195828;
  }
  else {
    uint64_t v26 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isVoiceTriggerEnabled)) {
    unint64_t v27 = 0xE400000000000000;
  }
  else {
    unint64_t v27 = 0xE500000000000000;
  }
  unint64_t v28 = v27;
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease();
  v29._object = (void *)0x80000001C919F1B0;
  v29._unint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v29);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTextToSpeechEnabled)) {
    uint64_t v30 = 1702195828;
  }
  else {
    uint64_t v30 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTextToSpeechEnabled)) {
    unint64_t v31 = 0xE400000000000000;
  }
  else {
    unint64_t v31 = 0xE500000000000000;
  }
  unint64_t v32 = v31;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease();
  v33._unint64_t countAndFlagsBits = 0xD000000000000018;
  v33._object = (void *)0x80000001C919F1D0;
  String.append(_:)(v33);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTriggerlessFollowup)) {
    uint64_t v34 = 1702195828;
  }
  else {
    uint64_t v34 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTriggerlessFollowup)) {
    unint64_t v35 = 0xE400000000000000;
  }
  else {
    unint64_t v35 = 0xE500000000000000;
  }
  unint64_t v36 = v35;
  String.append(_:)(*(Swift::String *)&v34);
  swift_bridgeObjectRelease();
  v37._unint64_t countAndFlagsBits = 0xD000000000000013;
  v37._object = (void *)0x80000001C919F1F0;
  String.append(_:)(v37);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isPushOffRequest)) {
    uint64_t v38 = 1702195828;
  }
  else {
    uint64_t v38 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isPushOffRequest)) {
    unint64_t v39 = 0xE400000000000000;
  }
  else {
    unint64_t v39 = 0xE500000000000000;
  }
  unint64_t v40 = v39;
  String.append(_:)(*(Swift::String *)&v38);
  swift_bridgeObjectRelease();
  v41._unint64_t countAndFlagsBits = 0x6E4965677261620ALL;
  v41._object = (void *)0xEF203A7365646F4DLL;
  String.append(_:)(v41);
  uint64_t v42 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_bargeInModes);
  swift_bridgeObjectRetain();
  uint64_t v43 = MEMORY[0x1E4FBB1A0];
  uint64_t v44 = MEMORY[0x1CB77CDC0](v42, MEMORY[0x1E4FBB1A0]);
  uint64_t v46 = v45;
  swift_bridgeObjectRelease();
  v47._unint64_t countAndFlagsBits = v44;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._unint64_t countAndFlagsBits = 0xD000000000000022;
  v48._object = (void *)0x80000001C919F210;
  String.append(_:)(v48);
  uint64_t v49 = v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_approximatePreviousTTSInterval;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v50);
  outlined init with copy of MediaUserStateCenter?(v49, (uint64_t)&v60 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for DateInterval?);
  v52._unint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._unint64_t countAndFlagsBits = 0xD000000000000016;
  v53._object = (void *)0x80000001C919F240;
  String.append(_:)(v53);
  uint64_t v54 = swift_bridgeObjectRetain();
  uint64_t v55 = MEMORY[0x1CB77CDC0](v54, v43);
  id v57 = v56;
  swift_bridgeObjectRelease();
  v58._unint64_t countAndFlagsBits = v55;
  v58._object = v57;
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  return v62;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PommesRequestContext@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 208))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PommesRequestContext()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

uint64_t specialized PommesRequestContext.__allocating_init(requestContextMessage:)(void *a1)
{
  uint64_t v2 = MessageBase.assistantId.getter();
  uint64_t v37 = v3;
  uint64_t v38 = v2;
  uint64_t v4 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v4 - 8);
  Swift::String v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = a1;
  SessionMessageBase.sessionId.getter();

  id v8 = v7;
  uint64_t v9 = RequestMessageBase.requestId.getter();
  uint64_t v34 = v10;
  uint64_t v35 = v9;

  uint64_t v11 = RequestContextMessage.audioSource.getter();
  uint64_t v32 = v12;
  uint64_t v33 = v11;
  uint64_t v13 = RequestContextMessage.audioDestination.getter();
  uint64_t v30 = v14;
  uint64_t v31 = v13;
  uint64_t v15 = RequestContextMessage.responseMode.getter();
  uint64_t v17 = v16;
  char v18 = RequestContextMessage.isEyesFree.getter();
  char v19 = RequestContextMessage.isVoiceTriggerEnabled.getter();
  char v20 = RequestContextMessage.isTextToSpeechEnabled.getter();
  char v21 = RequestContextMessage.isTriggerlessFollowup.getter();
  uint64_t v22 = RequestContextMessage.bargeInModes.getter();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v23 - 8);
  Swift::String v25 = (char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestContextMessage.approximatePreviousTTSInterval.getter();
  uint64_t v26 = RequestContextMessage.deviceRestrictions.getter();
  BYTE4(v28) = v21 & 1;
  BYTE3(v28) = 0;
  BYTE2(v28) = v20 & 1;
  BYTE1(v28) = v19 & 1;
  LOBYTE(v28) = v18 & 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t))(v36 + 200))(v38, v37, v6, v35, v34, v33, v32, v31, v30, v15, v17, v28, v22, v25, v26);
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ObjC metadata update function for PommesRequestContext()
{
  return type metadata accessor for PommesRequestContext();
}

void type metadata completion function for PommesRequestContext()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DateInterval?();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for PommesRequestContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesRequestContext);
}

uint64_t dispatch thunk of PommesRequestContext.__allocating_init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of PommesRequestContext.__allocating_init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of PommesRequestContext.__allocating_init(from:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of PommesRequestContext.encode(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PommesRequestContext.responseModeInteractionType()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of PommesRequestContext.mappedInteractionType(inputOrigin:previousInteractionType:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of PommesRequestContext.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

void type metadata accessor for DateInterval?()
{
  if (!lazy cache variable for type metadata for DateInterval?)
  {
    type metadata accessor for DateInterval();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DateInterval?);
    }
  }
}

uint64_t getEnumTagSinglePayload for PommesRequestContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PommesRequestContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C906C9D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PommesRequestContext.CodingKeys()
{
  return &unk_1F23735D8;
}

uint64_t specialized PommesRequestContext.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E61747369737361 && a2 == 0xEB00000000644974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x496E6F6973736573 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4974736575716572 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x756F536F69647561 && a2 == 0xEB00000000656372 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001C919F2C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65736E6F70736572 && a2 == 0xEC00000065646F4DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7246736579457369 && a2 == 0xEA00000000006565 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001C919F2E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001C919F300 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001C919F320 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001C919F340 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x4D6E496567726162 && a2 == 0xEC0000007365646FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x80000001C919F360 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001C919F380)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 13;
    }
    else {
      return 14;
    }
  }
}

uint64_t ClassicFollowupPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PommesSearchRequest.hadPreviousClassicTurn.getter()
{
  uint64_t v1 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v72 = (uint64_t)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  uint64_t v3 = MEMORY[0x1F4188790](v67);
  uint64_t v66 = (uint64_t)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v69 = (uint64_t)&v64 - v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v73 = (uint64_t)&v64 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v68 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v70 = v10;
  uint64_t v71 = v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v65 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PommesContext.Source();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v17 - 8);
  char v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for PommesContext();
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v1;
  uint64_t v25 = v24;
  outlined init with copy of MediaUserStateCenter?(v0 + *(int *)(v1 + 40), (uint64_t)v19, &demangling cache variable for type metadata for PommesContext?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v19, 1, v20) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for PommesContext?);
    uint64_t v26 = v73;
    outlined init with copy of MediaUserStateCenter?(v0 + *(int *)(v1 + 56), v73, &demangling cache variable for type metadata for InputOrigin?);
    uint64_t v27 = type metadata accessor for InputOrigin();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) != 1)
    {
      uint64_t v29 = v69;
      outlined init with copy of MediaUserStateCenter?(v26, v69, &demangling cache variable for type metadata for InputOrigin?);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v28 + 88))(v29, v27) == *MEMORY[0x1E4FA5180])
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v30 = type metadata accessor for Logger();
        __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v31, v32)) {
          goto LABEL_28;
        }
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl(&dword_1C8F83000, v31, v32, "Had previous Classic turn? FALSE - no PommesContext, but inputOrigin was .serverGenerated, indicating followup from fully on-device previous turn", v33, 2u);
        uint64_t v34 = v33;
        goto LABEL_26;
      }
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.pommes);
    uint64_t v47 = v72;
    outlined init with copy of PommesSearchRequest(v0, v72);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v31, v48))
    {
      outlined destroy of PommesSearchRequest(v47);
      goto LABEL_28;
    }
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    uint64_t v75 = v50;
    *(_DWORD *)uint64_t v49 = 136315138;
    outlined init with copy of MediaUserStateCenter?(v47 + *(int *)(v23 + 56), v66, &demangling cache variable for type metadata for InputOrigin?);
    uint64_t v51 = String.init<A>(describing:)();
    uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest(v47);
    _os_log_impl(&dword_1C8F83000, v31, v48, "Had previous Classic turn? FALSE - no PommesContext and inputOrigin is %s, which is ambiguous", v49, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v50, -1, -1);
    uint64_t v34 = v49;
LABEL_26:
    MEMORY[0x1CB77E470](v34, -1, -1);
LABEL_28:

    outlined destroy of MediaUserStateCenter?(v26, &demangling cache variable for type metadata for InputOrigin?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v19, v20);
  PommesContext.source.getter();
  int v35 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v16, v13);
  int v36 = *MEMORY[0x1E4F9FED0];
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (v35 != v36)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.pommes);
    Swift::String v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v41, v42)) {
      goto LABEL_20;
    }
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v43 = 0;
    uint64_t v44 = "Had previous Classic turn? FALSE - PommesContext does not have source equal to .modalityTranslated";
    goto LABEL_19;
  }
  uint64_t v37 = (uint64_t)v68;
  PommesContext.promptContext.getter();
  uint64_t v39 = v70;
  uint64_t v38 = v71;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v37, 1, v70) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
LABEL_11:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
    Swift::String v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v41, v42)) {
      goto LABEL_20;
    }
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v43 = 0;
    uint64_t v44 = "Had previous Classic turn? FALSE - no conclusive information available";
LABEL_19:
    _os_log_impl(&dword_1C8F83000, v41, v42, v44, v43, 2u);
    MEMORY[0x1CB77E470](v43, -1, -1);
LABEL_20:

    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v20);
    return 0;
  }
  uint64_t v54 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v65, v37, v39);
  if (Com_Apple_Siri_Product_Proto_PromptContext.strictPrompt.getter())
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.pommes);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v56, v57)) {
      goto LABEL_51;
    }
    Swift::String v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v58 = 0;
    int v59 = "Had previous Classic turn? TRUE - PommesContext has PromptContext with strictPrompt=true";
    goto LABEL_50;
  }
  uint64_t v60 = *(void *)(Com_Apple_Siri_Product_Proto_PromptContext.promptTargetHints.getter() + 16);
  swift_bridgeObjectRelease();
  if (v60)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static Logger.pommes);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v56, v57)) {
      goto LABEL_51;
    }
    Swift::String v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v58 = 0;
    int v59 = "Had previous Classic turn? TRUE - PommesContext has PromptContext with non-empty promptTargetHints";
    goto LABEL_50;
  }
  if (Com_Apple_Siri_Product_Proto_PromptContext.objectDisambiguation.getter())
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.pommes);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v56, v57)) {
      goto LABEL_51;
    }
    Swift::String v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v58 = 0;
    int v59 = "Had previous Classic turn? TRUE - PommesContext has PromptContext with objectDisambiguation=true";
    goto LABEL_50;
  }
  if ((Com_Apple_Siri_Product_Proto_PromptContext.dictationPrompt.getter() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v54, v39);
    goto LABEL_11;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v63 = type metadata accessor for Logger();
  __swift_project_value_buffer(v63, (uint64_t)static Logger.pommes);
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v56, v57))
  {
    Swift::String v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v58 = 0;
    int v59 = "Had previous Classic turn? TRUE - PommesContext has PromptContext with dictationPrompt=true";
LABEL_50:
    _os_log_impl(&dword_1C8F83000, v56, v57, v59, v58, 2u);
    MEMORY[0x1CB77E470](v58, -1, -1);
  }
LABEL_51:

  (*(void (**)(char *, uint64_t))(v38 + 8))(v54, v39);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v20);
  return 1;
}

unint64_t static ClassicFollowupPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t ClassicFollowupPreflightClient.deinit()
{
  return v0;
}

uint64_t ClassicFollowupPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ClassicFollowupPreflightClient.init()()
{
  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance ClassicFollowupPreflightClient()
{
  return 0xD00000000000001ELL;
}

uint64_t type metadata accessor for ClassicFollowupPreflightClient()
{
  return self;
}

uint64_t method lookup function for ClassicFollowupPreflightClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ClassicFollowupPreflightClient);
}

uint64_t dispatch thunk of ClassicFollowupPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of ClassicFollowupPreflightClient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t OnDeviceSearchInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  return result;
}

id OnDeviceSearchInstrumentationUtil.mockStream.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = *(id *)(v0 + 16);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    uint64_t v4 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t OnDeviceSearchInstrumentationUtil.mockStream.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F41817F8]();
}

void (*OnDeviceSearchInstrumentationUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = OnDeviceSearchInstrumentationUtil.mockStream.getter();
  return PommesCacheInstrumentationUtil.mockStream.modify;
}

uint64_t OnDeviceSearchInstrumentationUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t OnDeviceSearchInstrumentationUtil.init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = a1;
  return v1;
}

void OnDeviceSearchInstrumentationUtil.logFailedOnDeviceSearch(requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void OnDeviceSearchInstrumentationUtil.logStartOnDeviceSearch(requestId:pommesCandidateId:indexType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Class *a5, SEL *a6, SEL *a7, const char *a8)
{
  uint64_t v13 = v8;
  uint64_t v15 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v15)
  {
    uint64_t v16 = v15;
    id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1098]), sel_init);
    if (v17)
    {
      uint64_t v18 = v17;
      id v19 = objc_msgSend(objc_allocWithZone(*a5), sel_init);
      if (v19)
      {
        uint64_t v20 = v19;
        objc_msgSend(v19, *a6, a4);
        objc_msgSend(v18, *a7, v20);
        objc_msgSend(v16, sel_setOnDeviceIndexSearchContext_, v18);
        uint64_t v21 = self;
        swift_retain();
        id v22 = objc_msgSend(v21, sel_processInfo);
        char v23 = NSProcessInfo.isRunningUnitTests.getter();

        if (v23) {
          id v24 = (id)(*(uint64_t (**)(void))(*(void *)v13 + 96))();
        }
        else {
          id v24 = objc_msgSend(self, sel_sharedStream);
        }
        uint64_t v28 = v24;
        swift_release();
        objc_msgSend(v28, sel_emitMessage_, v16);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v18 = v16;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v26, a8, v27, 2u);
    MEMORY[0x1CB77E470](v27, -1, -1);
  }
}

uint64_t OnDeviceSearchInstrumentationUtil.deinit()
{
  swift_release();
  return v0;
}

uint64_t protocol witness for Emittable.mockStream.getter in conformance OnDeviceSearchInstrumentationUtil()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_1C906E1BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C906E208(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 104))(*a1);
}

uint64_t method lookup function for OnDeviceSearchInstrumentationUtil(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for OnDeviceSearchInstrumentationUtil);
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.mockStream.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.mockStream.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.mockStream.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.logStartOnDeviceSearch(requestId:pommesCandidateId:indexType:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.logEndOnDeviceSearch(requestId:pommesCandidateId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.logFailedOnDeviceSearch(requestId:pommesCandidateId:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t PlayThisLibraryItemPreflightClient.__allocating_init(rrClient:)(long long *a1)
{
  uint64_t v2 = swift_allocObject();
  outlined init with take of AppDataProviding(a1, v2 + 16);
  return v2;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v34 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RREntity();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v45 = MEMORY[0x1E4FBC860];
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    v31[1] = v1;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span, RREntity));
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v38 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v39 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v42 = *(void *)(v12 + 72);
    v31[0] = a1;
    swift_bridgeObjectRetain();
    uint64_t v41 = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v14 = 136315138;
    long long v32 = v14;
    uint64_t v33 = v5;
    do
    {
      uint64_t v15 = v13 + *(int *)(v11 + 48);
      RREntity.usoEntity.getter();
      static UsoEntity_CodeGenConverter.convert(entity:)();
      swift_release();
      if (v44[3])
      {
        type metadata accessor for UsoEntity_common_MediaItem();
        if (swift_dynamicCast())
        {
          uint64_t v40 = v43;
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v16 = type metadata accessor for Logger();
          __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
          (*v38)(v8, v15, v5);
          id v17 = Logger.logObject.getter();
          os_log_type_t v18 = static os_log_type_t.debug.getter();
          int v19 = v18;
          if (os_log_type_enabled(v17, v18))
          {
            uint64_t v20 = (_DWORD *)swift_slowAlloc();
            int v35 = v20;
            uint64_t v37 = swift_slowAlloc();
            v44[0] = v37;
            *uint64_t v20 = v32;
            int v36 = v19;
            RREntity.usoEntity.getter();
            uint64_t v21 = type metadata accessor for UsoBuilderOptions();
            uint64_t v22 = (uint64_t)v34;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v34, 1, 1, v21);
            static UsoBuilderConversionUtils.convertEntityToRootedEntityGraph(entity:options:)();
            char v23 = v17;
            swift_release();
            outlined destroy of MediaUserStateCenter?(v22, (uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
            uint64_t v24 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
            unint64_t v26 = v25;
            uint64_t v27 = v39;
            swift_release();
            uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v44);
            uint64_t v29 = (uint8_t *)v35;
            *(void *)(v35 + 1) = v28;
            uint64_t v5 = v33;
            swift_bridgeObjectRelease();
            (*v27)(v8, v5);
            _os_log_impl(&dword_1C8F83000, v23, (os_log_type_t)v36, "PlayThisLibraryItemPreflightClient#handle found relevantEntity: %s", v29, 0xCu);
            uint64_t v30 = v37;
            swift_arrayDestroy();
            MEMORY[0x1CB77E470](v30, -1, -1);
            MEMORY[0x1CB77E470](v29, -1, -1);
          }
          else
          {
            (*v39)(v8, v5);
          }
          MEMORY[0x1CB77CD90]();
          if (*(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v44, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      v13 += v42;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    return v45;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  int64_t v43;
  char *v44;
  unint64_t v45;
  int64_t v46;

  uint64_t v2 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType?;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  uint64_t v9 = v8 & *(void *)(a1 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  uint64_t v42 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v43 = v10;
  uint64_t v44 = v5;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v13 = __clz(__rbit64(v9));
  long long v14 = (v9 - 1) & v9;
  for (uint64_t i = v13 | (v12 << 6); ; uint64_t i = __clz(__rbit64(v17)) + (v12 << 6))
  {
    uint64_t v46 = v12;
    int v19 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    uint64_t v22 = one-time initialization token for intentValues;
    swift_bridgeObjectRetain();
    if (v22 != -1) {
      swift_once();
    }
    uint64_t v45 = v14;
    char v23 = static SiriKitAppInfoDataProvider.intentValues;
    if (!*((void *)static SiriKitAppInfoDataProvider.intentValues + 2))
    {
      int v35 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v5, 1, 1, v35);
LABEL_29:
      outlined destroy of MediaUserStateCenter?((uint64_t)v5, v2);
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v20);
    if (v25)
    {
      unint64_t v26 = v24;
      uint64_t v27 = a1;
      uint64_t v28 = v23[7];
      uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = v6;
      long long v32 = v2;
      uint64_t v33 = v30;
      uint64_t v34 = v28 + *(void *)(v30 + 72) * v26;
      a1 = v27;
      uint64_t v5 = v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v44, v34, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v5, 0, 1, v29);
      uint64_t v2 = v32;
      uint64_t v6 = v31;
      uint64_t v10 = v43;
    }
    else
    {
      uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v5, 1, 1, v29);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType();
    int v36 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v5, 1, v29) == 1) {
      goto LABEL_29;
    }
    uint64_t v37 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v29);
    swift_bridgeObjectRelease();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
      uint64_t v42 = (void *)result;
    }
    uint64_t v39 = v42[2];
    uint64_t v38 = v42[3];
    if (v39 >= v38 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v42);
      uint64_t v42 = (void *)result;
    }
    uint64_t v40 = v42;
    v42[2] = v39 + 1;
    v40[v39 + 4] = v37;
LABEL_30:
    uint64_t v12 = v46;
    uint64_t v9 = v45;
    if (v45) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v10) {
      goto LABEL_37;
    }
    id v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= v10) {
        goto LABEL_37;
      }
      id v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= v10) {
          goto LABEL_37;
        }
        id v17 = *(void *)(v6 + 8 * v12);
        if (!v17)
        {
          uint64_t v12 = v16 + 3;
          if (v16 + 3 >= v10) {
            goto LABEL_37;
          }
          id v17 = *(void *)(v6 + 8 * v12);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_20:
    long long v14 = (v17 - 1) & v17;
  }
  os_log_type_t v18 = v16 + 4;
  if (v18 >= v10)
  {
LABEL_37:
    swift_release();
    return (uint64_t)v42;
  }
  id v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_37;
    }
    id v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  int64_t v43;
  char *v44;
  unint64_t v45;
  int64_t v46;

  uint64_t v2 = (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory?;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = a1 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  uint64_t v9 = v8 & *(void *)(a1 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  uint64_t v42 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v43 = v10;
  uint64_t v44 = v5;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v13 = __clz(__rbit64(v9));
  long long v14 = (v9 - 1) & v9;
  for (uint64_t i = v13 | (v12 << 6); ; uint64_t i = __clz(__rbit64(v17)) + (v12 << 6))
  {
    uint64_t v46 = v12;
    int v19 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    uint64_t v22 = one-time initialization token for mediaCategoryValues;
    swift_bridgeObjectRetain();
    if (v22 != -1) {
      swift_once();
    }
    uint64_t v45 = v14;
    char v23 = static SiriKitAppInfoDataProvider.mediaCategoryValues;
    if (!*((void *)static SiriKitAppInfoDataProvider.mediaCategoryValues + 2))
    {
      int v35 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v5, 1, 1, v35);
LABEL_29:
      outlined destroy of MediaUserStateCenter?((uint64_t)v5, v2);
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v20);
    if (v25)
    {
      unint64_t v26 = v24;
      uint64_t v27 = a1;
      uint64_t v28 = v23[7];
      uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = v6;
      long long v32 = v2;
      uint64_t v33 = v30;
      uint64_t v34 = v28 + *(void *)(v30 + 72) * v26;
      a1 = v27;
      uint64_t v5 = v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v44, v34, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v5, 0, 1, v29);
      uint64_t v2 = v32;
      uint64_t v6 = v31;
      uint64_t v10 = v43;
    }
    else
    {
      uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v5, 1, 1, v29);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory();
    int v36 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v5, 1, v29) == 1) {
      goto LABEL_29;
    }
    uint64_t v37 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v29);
    swift_bridgeObjectRelease();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
      uint64_t v42 = (void *)result;
    }
    uint64_t v39 = v42[2];
    uint64_t v38 = v42[3];
    if (v39 >= v38 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v42);
      uint64_t v42 = (void *)result;
    }
    uint64_t v40 = v42;
    v42[2] = v39 + 1;
    v40[v39 + 4] = v37;
LABEL_30:
    uint64_t v12 = v46;
    uint64_t v9 = v45;
    if (v45) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v10) {
      goto LABEL_37;
    }
    id v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= v10) {
        goto LABEL_37;
      }
      id v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= v10) {
          goto LABEL_37;
        }
        id v17 = *(void *)(v6 + 8 * v12);
        if (!v17)
        {
          uint64_t v12 = v16 + 3;
          if (v16 + 3 >= v10) {
            goto LABEL_37;
          }
          id v17 = *(void *)(v6 + 8 * v12);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_20:
    long long v14 = (v17 - 1) & v17;
  }
  os_log_type_t v18 = v16 + 4;
  if (v18 >= v10)
  {
LABEL_37:
    swift_release();
    return (uint64_t)v42;
  }
  id v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_37;
    }
    id v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t static PlayThisLibraryItemPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD000000000000022;
}

uint64_t PlayThisLibraryItemPreflightClient.init(rrClient:)(long long *a1)
{
  outlined init with take of AppDataProviding(a1, v1 + 16);
  return v1;
}

uint64_t closure #4 in PlayThisLibraryItemPreflightClient.handle(pommesSearchRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItem>);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1C91947A0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 16))(v15 + v14, a2, v12);
  AudioExperience.Builder.serverAudioResults.setter();
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.init()();
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 0, 1, v16);
  AudioExperience.Builder.audioUnderstanding.setter();
  Apple_Parsec_Siri_V2alpha_PlaybackSignals.init()();
  uint64_t v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v8, 0, 1, v17);
  AudioExperience.Builder.playbackSignals.setter();
  AudioExperience.Builder.internalSignals.setter();
  AudioExperience.Builder.pegasusAudioType.setter();
  unint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  unint64_t v21 = 0xD000000000000013;
  unint64_t v22 = 0x80000001C919F470;
  v18._unint64_t countAndFlagsBits = UsoIdentifier.appBundleId.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  AudioExperience.Builder.launchID.setter();
  AudioExperience.Builder.systemExtensionBundleID.setter();
  AudioExperience.Builder.boltProxiedBundleID.setter();
  AudioExperience.Builder.shouldPerformAppSelection.setter();
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.init()();
  uint64_t v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v5, 0, 1, v19);
  return AudioExperience.Builder.audioClientComponent.setter();
}

uint64_t PlayThisLibraryItemPreflightClient.audioItem(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v78 = a2;
  uint64_t v70 = type metadata accessor for ClientAudioResult.Scheme();
  uint64_t v69 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  uint64_t v68 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v65 = *(void *)(v92 - 8);
  MEMORY[0x1F4188790](v92);
  uint64_t v75 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v86);
  uint64_t v89 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v67 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v79 = (uint64_t)&v65 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v90 = (uint64_t)&v65 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v80 = (uint64_t)&v65 - v13;
  uint64_t v88 = type metadata accessor for UsoIdentifier();
  unint64_t v14 = *(uint64_t **)(v88 - 8);
  MEMORY[0x1F4188790](v88);
  uint64_t v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v66 = (uint64_t)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unint64_t v21 = (char *)&v65 - v20;
  uint64_t v22 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v23 = *(void *)(v22 + 16);
  uint64_t v73 = a1;
  uint64_t v72 = v21;
  uint64_t v71 = v14;
  if (!v23)
  {
    uint64_t v32 = 1;
    uint64_t v28 = v88;
    goto LABEL_12;
  }
  unint64_t v25 = v14 + 2;
  uint64_t v24 = (void (*)(char *, unint64_t, uint64_t))v14[2];
  unint64_t v26 = v22 + ((*((unsigned __int8 *)v14 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v14 + 80));
  uint64_t v27 = v25[7];
  swift_bridgeObjectRetain();
  uint64_t v28 = v88;
  while (1)
  {
    v24(v16, v26, v28);
    uint64_t v30 = UsoIdentifier.namespace.getter();
    if (!v31) {
      goto LABEL_4;
    }
    if (v30 == 0x6574736973726570 && v31 == 0xED000064695F746ELL) {
      break;
    }
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v29) {
      goto LABEL_11;
    }
LABEL_4:
    uint64_t v28 = v88;
    ((void (*)(char *, uint64_t))*(v25 - 1))(v16, v88);
    v26 += v27;
    if (!--v23)
    {
      swift_bridgeObjectRelease();
      uint64_t v32 = 1;
      unint64_t v21 = v72;
      unint64_t v14 = v71;
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
LABEL_11:
  swift_bridgeObjectRelease();
  unint64_t v14 = v71;
  unint64_t v21 = v72;
  uint64_t v28 = v88;
  ((void (*)(char *, char *, uint64_t))v71[4])(v72, v16, v88);
  uint64_t v32 = 0;
LABEL_12:
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v14[7])(v21, v32, 1, v28);
  swift_bridgeObjectRelease();
  Apple_Parsec_Siri_V2alpha_AudioItem.init()();
  dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  Apple_Parsec_Siri_V2alpha_AudioItem.title.setter();
  unint64_t v33 = dispatch thunk of UsoEntity_common_MediaItem.associatedMediaItems.getter();
  if (!v33) {
    goto LABEL_42;
  }
  unint64_t v34 = v33;
  if (v33 >> 62) {
    goto LABEL_40;
  }
  uint64_t v35 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v35)
  {
LABEL_41:
    swift_bridgeObjectRelease_n();
    goto LABEL_42;
  }
  while (2)
  {
    unint64_t v85 = v34 & 0xC000000000000001;
    int v87 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56);
    double v84 = (void (**)(uint64_t, void, uint64_t))(v65 + 104);
    unsigned int v83 = *MEMORY[0x1E4FA3598];
    uint64_t v74 = (void (**)(char *, uint64_t, uint64_t))(v65 + 32);
    unint64_t v77 = (void (**)(uint64_t, uint64_t))(v65 + 8);
    uint64_t v36 = 4;
    uint64_t v37 = &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?;
    uint64_t v38 = v80;
    uint64_t v81 = v35;
    unint64_t v82 = v34;
    uint64_t v39 = (unsigned int (**)(uint64_t, uint64_t, char *))(v65 + 48);
LABEL_19:
    uint64_t v41 = v36 - 4;
    if (v85)
    {
      uint64_t v91 = MEMORY[0x1CB77D510](v36 - 4, v34);
      uint64_t v42 = v36 - 3;
      if (__OFADD__(v41, 1)) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v91 = *(void *)(v34 + 8 * v36);
      swift_retain();
      uint64_t v42 = v36 - 3;
      if (__OFADD__(v41, 1))
      {
LABEL_39:
        __break(1u);
LABEL_40:
        swift_bridgeObjectRetain();
        uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
        if (!v35) {
          goto LABEL_41;
        }
        continue;
      }
    }
    break;
  }
  uint64_t v43 = v39;
  dispatch thunk of CodeGenListEntry.entry.getter();
  if (v93 && (uint64_t v44 = dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter(), swift_release(), v44))
  {
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
  }
  else
  {
    (*v87)(v38, 1, 1, v92);
  }
  uint64_t v45 = v90;
  unint64_t v21 = (char *)v92;
  (*v84)(v90, v83, v92);
  (*v87)(v45, 0, 1, (uint64_t)v21);
  uint64_t v46 = v89;
  uint64_t v47 = v89 + *(int *)(v86 + 48);
  unint64_t v14 = v37;
  outlined init with copy of MediaUserStateCenter?(v38, v89, v37);
  outlined init with copy of MediaUserStateCenter?(v45, v47, v37);
  os_log_type_t v48 = *v43;
  if ((*v43)(v46, 1, v21) != 1)
  {
    uint64_t v49 = v79;
    outlined init with copy of MediaUserStateCenter?(v46, v79, v37);
    unsigned int v50 = v48(v47, 1, (char *)v92);
    uint64_t v39 = v43;
    if (v50 == 1)
    {
      (*v77)(v49, v92);
      uint64_t v38 = v80;
LABEL_17:
      outlined destroy of MediaUserStateCenter?(v89, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
      outlined destroy of MediaUserStateCenter?(v90, v37);
      outlined destroy of MediaUserStateCenter?(v38, v37);
      unint64_t v34 = v82;
    }
    else
    {
      uint64_t v51 = v75;
      uint64_t v52 = v92;
      (*v74)(v75, v47, v92);
      lazy protocol witness table accessor for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues();
      int v76 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v21 = (char *)v77;
      Swift::String v53 = *v77;
      (*v77)(v49, v52);
      v53((uint64_t)v51, v52);
      outlined destroy of MediaUserStateCenter?(v46, v14);
      outlined destroy of MediaUserStateCenter?(v90, v14);
      uint64_t v38 = v80;
      outlined destroy of MediaUserStateCenter?(v80, v14);
      unint64_t v34 = v82;
      uint64_t v37 = v14;
      if (v76) {
        goto LABEL_35;
      }
    }
    swift_release();
    ++v36;
    if (v42 == v81)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_38;
    }
    goto LABEL_19;
  }
  unsigned int v40 = v48(v47, 1, (char *)v92);
  uint64_t v39 = v43;
  if (v40 != 1) {
    goto LABEL_17;
  }
  outlined destroy of MediaUserStateCenter?(v89, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v90, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
LABEL_35:
  swift_bridgeObjectRelease_n();
  dispatch thunk of CodeGenListEntry.entry.getter();
  swift_release();
  if (!v93)
  {
LABEL_38:
    unint64_t v21 = v72;
    unint64_t v14 = v71;
    goto LABEL_42;
  }
  dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  uint64_t v55 = v54;
  swift_release();
  unint64_t v21 = v72;
  unint64_t v14 = v71;
  if (v55) {
    goto LABEL_43;
  }
LABEL_42:
  swift_bridgeObjectRelease();
LABEL_43:
  Apple_Parsec_Siri_V2alpha_AudioItem.artist.setter();
  if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
  {
    uint64_t v56 = (uint64_t)v67;
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
  }
  else
  {
    uint64_t v56 = (uint64_t)v67;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v67, 1, 1, v92);
  }
  os_log_type_t v57 = v68;
  static ClientAudioResult.Scheme.from(_:)();
  outlined destroy of MediaUserStateCenter?(v56, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v58 = v66;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v21, v66, &demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v59 = v88;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v14[6])(v58, 1, v88) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v58, &demangling cache variable for type metadata for UsoIdentifier?);
    uint64_t v60 = (void *)0xE100000000000000;
    uint64_t v61 = 48;
  }
  else
  {
    uint64_t v61 = UsoIdentifier.value.getter();
    uint64_t v60 = v62;
    ((void (*)(uint64_t, uint64_t))v14[1])(v58, v59);
  }
  v63._unint64_t countAndFlagsBits = v61;
  v63._object = v60;
  ClientAudioResult.Scheme.buildDeviceID(withId:)(v63);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v57, v70);
  Apple_Parsec_Siri_V2alpha_AudioItem.identifier.setter();
  return outlined destroy of MediaUserStateCenter?((uint64_t)v21, &demangling cache variable for type metadata for UsoIdentifier?);
}

uint64_t PlayThisLibraryItemPreflightClient.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v0;
}

uint64_t PlayThisLibraryItemPreflightClient.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance PlayThisLibraryItemPreflightClient()
{
  return 0xD000000000000022;
}

uint64_t partial apply for closure #4 in PlayThisLibraryItemPreflightClient.handle(pommesSearchRequest:)(uint64_t a1)
{
  return closure #4 in PlayThisLibraryItemPreflightClient.handle(pommesSearchRequest:)(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for PlayThisLibraryItemPreflightClient()
{
  return self;
}

uint64_t method lookup function for PlayThisLibraryItemPreflightClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PlayThisLibraryItemPreflightClient);
}

uint64_t dispatch thunk of PlayThisLibraryItemPreflightClient.__allocating_init(rrClient:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PlayThisLibraryItemPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues)
  {
    type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues);
  }
  return result;
}

uint64_t OpenAppVocPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static OpenAppVocPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD000000000000019;
}

void OpenAppVocPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v134 = a2;
  v157[4] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v126 = *v2;
  uint64_t v127 = type metadata accessor for PommesSearchReason();
  uint64_t v124 = *(void *)(v127 - 8);
  MEMORY[0x1F4188790](v127);
  uint64_t v123 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v122 = (uint64_t)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v7 = *(void *)(v150 - 8);
  MEMORY[0x1F4188790](v150);
  uint64_t v9 = (char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v10 = *(void *)(v149 - 8);
  MEMORY[0x1F4188790](v149);
  unint64_t v148 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v120 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v17 = *(int *)(v16 + 76);
  uint64_t v125 = a1;
  uint64_t v18 = *(void *)(a1 + v17);
  uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v133 = *(void *)(v18 + 16);
  if (!v133)
  {
    uint64_t v66 = (void *)MEMORY[0x1E4FBC860];
LABEL_57:
    uint64_t v67 = v66[2];
    if (!v67)
    {
      swift_bridgeObjectRelease();
      goto LABEL_76;
    }
    uint64_t v121 = v16;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    if ((UsoTask.isOpenAppTask.getter() & 1) == 0)
    {
      unint64_t v136 = v66;
      swift_bridgeObjectRelease();
      swift_release();
      if (v67 != 1)
      {
        uint64_t v97 = v136 + 9;
        uint64_t v98 = 1;
        uint64_t v99 = (uint64_t *)&demangling cache variable for type metadata for Any?;
        do
        {
          uint64_t v100 = v98 + 1;
          if (__OFADD__(v98, 1)) {
            goto LABEL_119;
          }
          uint64_t v101 = *(v97 - 2);
          swift_retain();
          swift_bridgeObjectRetain();
          static UsoTask_CodegenConverter.convert(task:)();
          if (v157[3])
          {
            outlined init with copy of MediaUserStateCenter?((uint64_t)v157, (uint64_t)v156, v99);
            type metadata accessor for UsoTask_open_common_App();
            if (swift_dynamicCast())
            {
              uint64_t v154 = v101;
              id v102 = v99;
              swift_retain();
              dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
              swift_release();
              if (!v155 || (uint64_t v103 = dispatch thunk of UsoEntity_common_App.appSection.getter(), swift_release(), !v103))
              {
                swift_release();
LABEL_106:
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v156);
                outlined destroy of MediaUserStateCenter?((uint64_t)v157, (uint64_t *)&demangling cache variable for type metadata for Any?);
                swift_bridgeObjectRelease_n();
                goto LABEL_60;
              }
              dispatch thunk of UsoEntity_common_AppSubSection.name.getter();
              uint64_t v105 = v104;
              swift_release();
              swift_release();
              if (!v105) {
                goto LABEL_106;
              }
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v156);
              uint64_t v99 = v102;
            }
            else
            {
              type metadata accessor for UsoTask_noVerb_common_App();
              if (swift_dynamicCast())
              {
                swift_release();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v156);
                outlined destroy of MediaUserStateCenter?((uint64_t)v157, (uint64_t *)&demangling cache variable for type metadata for Any?);
                goto LABEL_59;
              }
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v156);
            }
          }
          outlined destroy of MediaUserStateCenter?((uint64_t)v157, v99);
          swift_bridgeObjectRelease();
          swift_release();
          v97 += 3;
          ++v98;
        }
        while (v100 != v67);
      }
      swift_bridgeObjectRelease_n();
      goto LABEL_76;
    }
LABEL_59:
    swift_bridgeObjectRelease_n();
LABEL_60:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v68 = UsoTask.vocAppIds.getter();
    if (v68)
    {
      uint64_t v69 = *(void *)(v68 + 16);
      if (v69)
      {
        uint64_t v70 = (uint64_t *)(v68 + 40);
        while (1)
        {
          uint64_t v72 = *(v70 - 1);
          uint64_t v71 = *v70;
          v73._unint64_t countAndFlagsBits = 0x6C7070612E6D6F63;
          v73._object = (void *)0xEE00697269732E65;
          if (String.hasPrefix(_:)(v73))
          {
            swift_bridgeObjectRelease();
            goto LABEL_100;
          }
          id v74 = objc_allocWithZone(MEMORY[0x1E4F223C8]);
          swift_bridgeObjectRetain();
          uint64_t v75 = (void *)MEMORY[0x1CB77CA90](v72, v71);
          swift_bridgeObjectRelease();
          v157[0] = 0;
          id v76 = objc_msgSend(v74, sel_initWithBundleIdentifier_allowPlaceholder_error_, v75, 1, v157);

          if (v76) {
            break;
          }
          v70 += 2;
          id v77 = v157[0];
          uint64_t v78 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          if (!--v69)
          {
            swift_bridgeObjectRelease();
            if (one-time initialization token for pommes != -1) {
              swift_once();
            }
            uint64_t v79 = type metadata accessor for Logger();
            __swift_project_value_buffer(v79, (uint64_t)static Logger.pommes);
            uint64_t v80 = Logger.logObject.getter();
            os_log_type_t v81 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v80, v81))
            {
              unint64_t v82 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v82 = 0;
              unsigned int v83 = "#OpenAppVoc: Found open app task with vocFile matches, but app is not installed or does not have spe"
                    "cial prefix. Ignoring.";
              goto LABEL_97;
            }
            goto LABEL_111;
          }
        }
        id v107 = v157[0];
        swift_bridgeObjectRelease();

LABEL_100:
        uint64_t v108 = v125;
        uint64_t v109 = (uint64_t *)(v125 + *(int *)(v121 + 32));
        uint64_t v110 = *v109;
        uint64_t v111 = v109[1];
        uint64_t v112 = v122;
        PommesSearchRequest.pommesCandidateId.getter(v122);
        uint64_t v113 = type metadata accessor for PommesCandidateId();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56))(v112, 0, 1, v113);
        uint64_t v114 = v123;
        default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v123);
        uint64_t v96 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v108, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], v110, v111, v112, v114, 0x6867696C66657270, 0xE900000000000074, 0xD000000000000019, 0x80000001C9198040);
        (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v114, v127);
        outlined destroy of MediaUserStateCenter?(v112, &demangling cache variable for type metadata for PommesCandidateId?);
        if (v96)
        {
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v115 = type metadata accessor for Logger();
          __swift_project_value_buffer(v115, (uint64_t)static Logger.pommes);
          unint64_t v116 = Logger.logObject.getter();
          os_log_type_t v117 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v116, v117))
          {
            unint64_t v118 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v118 = 0;
            _os_log_impl(&dword_1C8F83000, v116, v117, "#OpenAppVoc: Found open app task with vocFile match for installed app. Handling.", v118, 2u);
            MEMORY[0x1CB77E470](v118, -1, -1);
            swift_bridgeObjectRelease_n();
            swift_release_n();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_release_n();
          }
          goto LABEL_81;
        }
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v119 = type metadata accessor for Logger();
        __swift_project_value_buffer(v119, (uint64_t)static Logger.pommes);
        uint64_t v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v80, v81))
        {
          unint64_t v82 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v82 = 0;
          unsigned int v83 = "#OpenAppVoc: Error. Unable to construct preflight response.";
          goto LABEL_97;
        }
        goto LABEL_111;
      }
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for pommes != -1) {
      goto LABEL_125;
    }
    goto LABEL_95;
  }
  uint64_t v121 = v16;
  uint64_t v20 = *(void *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
  uint64_t v21 = v18 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  uint64_t v142 = v13 + 16;
  id v141 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v22 = v21;
  unint64_t v143 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v140 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v23 = *(void *)(v20 + 72);
  uint64_t v128 = v18;
  swift_bridgeObjectRetain_n();
  uint64_t v24 = 0;
  unint64_t v136 = v19;
  unint64_t v139 = v9;
  uint64_t v138 = v12;
  uint64_t v137 = v15;
  uint64_t v130 = v13;
  uint64_t v131 = v22;
  uint64_t v129 = v23;
  while (1)
  {
    uint64_t v135 = v24;
    uint64_t v25 = Siri_Nlu_External_Span.matcherNames.getter();
    uint64_t v144 = *(void *)(v25 + 16);
    if (v144) {
      break;
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v19;
LABEL_36:
    uint64_t v53 = v27[2];
    int64_t v54 = v136[2];
    int64_t v55 = v54 + v53;
    if (__OFADD__(v54, v53))
    {
      __break(1u);
LABEL_122:
      __break(1u);
      swift_once();
      uint64_t v84 = type metadata accessor for Logger();
      __swift_project_value_buffer(v84, (uint64_t)static Logger.pommes);
      id v85 = 0;
      id v86 = 0;
      int v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v88))
      {
        uint64_t v89 = (uint8_t *)swift_slowAlloc();
        uint64_t v90 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v89 = 138412290;
        id v91 = 0;
        uint64_t v92 = (void *)_swift_stdlib_bridgeErrorToNSError();
        v157[0] = v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v90 = v92;

        _os_log_impl(&dword_1C8F83000, v87, v88, "#OpenAppVoc: Error scanning for matching USO tasks. %@", v89, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v90, -1, -1);
        MEMORY[0x1CB77E470](v89, -1, -1);
      }
      else
      {
      }
LABEL_76:
      if (one-time initialization token for pommes != -1) {
        goto LABEL_120;
      }
      goto LABEL_77;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    os_log_type_t v57 = v136;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v55 > v136[3] >> 1)
    {
      if (v54 <= v55) {
        int64_t v58 = v54 + v53;
      }
      else {
        int64_t v58 = v54;
      }
      os_log_type_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)isUniquelyReferenced_nonNull_native, v58, 1, v136);
    }
    uint64_t v59 = v27[2];
    unint64_t v136 = v57;
    if (v59)
    {
      uint64_t v60 = v57[2];
      if ((v57[3] >> 1) - v60 < v53)
      {
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        swift_once();
LABEL_95:
        uint64_t v106 = type metadata accessor for Logger();
        __swift_project_value_buffer(v106, (uint64_t)static Logger.pommes);
        uint64_t v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v80, v81))
        {
          unint64_t v82 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v82 = 0;
          unsigned int v83 = "#OpenAppVoc: Found open app task but no vocFile matches. Ignoring.";
LABEL_97:
          _os_log_impl(&dword_1C8F83000, v80, v81, v83, v82, 2u);
          MEMORY[0x1CB77E470](v82, -1, -1);
          swift_bridgeObjectRelease_n();
          swift_release_n();
          goto LABEL_79;
        }
LABEL_111:

        swift_bridgeObjectRelease_n();
        swift_release_n();
        goto LABEL_80;
      }
      unint64_t v61 = (unint64_t)&v57[3 * v60 + 4];
      if ((unint64_t)(v27 + 4) < v61 + 24 * v53 && v61 < (unint64_t)&v27[3 * v53 + 4])
      {
LABEL_126:
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      swift_arrayInitWithCopy();
      if (v53)
      {
        uint64_t v63 = v136[2];
        BOOL v51 = __OFADD__(v63, v53);
        uint64_t v64 = v63 + v53;
        if (v51) {
          goto LABEL_124;
        }
        v136[2] = v64;
      }
    }
    else if (v53)
    {
      goto LABEL_122;
    }
    uint64_t v65 = v135 + 1;
    swift_bridgeObjectRelease();
    uint64_t v24 = v65;
    uint64_t v13 = v130;
    if (v65 == v133)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v16 = v121;
      uint64_t v66 = v136;
      goto LABEL_57;
    }
  }
  unint64_t v147 = v25 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v146 = *(void *)(v13 + 72);
  uint64_t v145 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
  uint64_t v132 = v25;
  swift_bridgeObjectRetain();
  uint64_t v26 = 0;
  uint64_t v27 = v19;
  while (1)
  {
    v145(v15, v147 + v146 * v26, v12);
    uint64_t v28 = v148;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*v141)(v28, v149);
    uint64_t v29 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    uint64_t v153 = v26;
    (*v143)(v9, v150);
    uint64_t v154 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
    uint64_t v31 = v30;
    unint64_t v32 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    unint64_t v33 = v32;
    unint64_t v152 = v27;
    if (v32 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v34)
      {
LABEL_19:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v36 = v19;
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v34 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v34) {
        goto LABEL_19;
      }
    }
    v157[0] = v19;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34 & ~(v34 >> 63), 0);
    if (v34 < 0) {
      goto LABEL_116;
    }
    uint64_t v151 = v29;
    uint64_t v35 = 0;
    uint64_t v36 = v157[0];
    do
    {
      if ((v33 & 0xC000000000000001) != 0)
      {
        uint64_t v37 = MEMORY[0x1CB77D510](v35, v33);
      }
      else
      {
        uint64_t v37 = *(void *)(v33 + 8 * v35 + 32);
        swift_retain();
      }
      swift_bridgeObjectRetain();
      v157[0] = v36;
      unint64_t v39 = v36[2];
      unint64_t v38 = v36[3];
      if (v39 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
        uint64_t v36 = v157[0];
      }
      ++v35;
      v36[2] = v39 + 1;
      unsigned int v40 = &v36[3 * v39];
      uint64_t v41 = v154;
      v40[4] = v37;
      v40[5] = v41;
      v40[6] = v31;
    }
    while (v34 != v35);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v9 = v139;
    uint64_t v12 = v138;
    uint64_t v15 = v137;
    uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
LABEL_20:
    (*v140)(v15, v12);
    uint64_t v42 = v36[2];
    uint64_t v27 = v152;
    int64_t v43 = v152[2];
    int64_t v44 = v43 + v42;
    if (__OFADD__(v43, v42)) {
      break;
    }
    uint64_t v45 = swift_isUniquelyReferenced_nonNull_native();
    if ((v45 & 1) == 0 || v44 > v27[3] >> 1)
    {
      if (v43 <= v44) {
        int64_t v46 = v43 + v42;
      }
      else {
        int64_t v46 = v43;
      }
      uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)v45, v46, 1, v27);
    }
    uint64_t v47 = v153;
    if (v36[2])
    {
      uint64_t v48 = v27[2];
      if ((v27[3] >> 1) - v48 < v42) {
        goto LABEL_117;
      }
      unint64_t v49 = (unint64_t)&v27[3 * v48 + 4];
      if ((unint64_t)(v36 + 4) < v49 + 24 * v42 && v49 < (unint64_t)&v36[3 * v42 + 4]) {
        goto LABEL_126;
      }
      swift_arrayInitWithCopy();
      if (v42)
      {
        uint64_t v50 = v27[2];
        BOOL v51 = __OFADD__(v50, v42);
        uint64_t v52 = v50 + v42;
        if (v51) {
          goto LABEL_118;
        }
        v27[2] = v52;
      }
    }
    else if (v42)
    {
      goto LABEL_115;
    }
    uint64_t v26 = v47 + 1;
    swift_bridgeObjectRelease();
    if (v26 == v144)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  swift_once();
LABEL_77:
  uint64_t v93 = type metadata accessor for Logger();
  __swift_project_value_buffer(v93, (uint64_t)static Logger.pommes);
  uint64_t v80 = Logger.logObject.getter();
  os_log_type_t v94 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v80, v94))
  {
    uint64_t v95 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v95 = 0;
    _os_log_impl(&dword_1C8F83000, v80, v94, "#OpenAppVoc: No matching task. Ignoring.", v95, 2u);
    MEMORY[0x1CB77E470](v95, -1, -1);
  }
LABEL_79:

LABEL_80:
  uint64_t v96 = 0;
LABEL_81:
  *uint64_t v134 = v96;
}

uint64_t UsoTask.isOpenAppTask.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v8) {
    goto LABEL_9;
  }
  outlined init with copy of MediaUserStateCenter?((uint64_t)v7, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_open_common_App();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_noVerb_common_App();
    if (!swift_dynamicCast()) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  swift_release();
  if (!v5 || (uint64_t v0 = dispatch thunk of UsoEntity_common_App.appSection.getter(), swift_release(), !v0))
  {
LABEL_10:
    swift_release();
    goto LABEL_11;
  }
  dispatch thunk of UsoEntity_common_AppSubSection.name.getter();
  uint64_t v2 = v1;
  swift_release();
  swift_release();
  if (!v2)
  {
LABEL_11:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    uint64_t v3 = 1;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
LABEL_8:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
LABEL_9:
  uint64_t v3 = 0;
LABEL_12:
  outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v3;
}

uint64_t UsoTask.vocAppIds.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of MediaUserStateCenter?((uint64_t)v6, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v5)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  outlined init with copy of MediaUserStateCenter?((uint64_t)v4, (uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_open_common_App();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_noVerb_common_App();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      goto LABEL_7;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
LABEL_10:
    uint64_t v0 = 0;
    goto LABEL_13;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
LABEL_7:
  swift_release();
  if (v2)
  {
    uint64_t v0 = CodeGenGlobalArgs.vocAppIds.getter();
    swift_release();
    swift_release();
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_release();
    uint64_t v0 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
LABEL_13:
  outlined destroy of MediaUserStateCenter?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v0;
}

uint64_t OpenAppVocPreflightClient.deinit()
{
  return v0;
}

uint64_t OpenAppVocPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t OpenAppVocPreflightClient.init()()
{
  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance OpenAppVocPreflightClient()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance OpenAppVocPreflightClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t CodeGenGlobalArgs.vocAppIds.getter()
{
  uint64_t v109 = type metadata accessor for SpanProperty();
  uint64_t v104 = *(void *)(v109 - 8);
  uint64_t v0 = MEMORY[0x1F4188790](v109);
  uint64_t v97 = (char *)&v84 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  uint64_t v103 = (char *)&v84 - v3;
  MEMORY[0x1F4188790](v2);
  uint64_t v105 = (char *)&v84 - v4;
  uint64_t v5 = type metadata accessor for UsoEntitySpan.SpanSource();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v86 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntitySpan.SpanSource?, UsoEntitySpan.SpanSource?));
  MEMORY[0x1F4188790](v99);
  uint64_t v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v84 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v107 = (uint64_t)&v84 - v17;
  uint64_t v108 = (void (*)(char *, unint64_t, uint64_t))type metadata accessor for UsoEntitySpan();
  uint64_t v100 = *((void *)v108 - 1);
  uint64_t v18 = MEMORY[0x1F4188790](v108);
  id v91 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v106 = (void (**)(char *, uint64_t))((char *)&v84 - v20);
  uint64_t v21 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)();
  if (!v21) {
    return 0;
  }
  uint64_t v110 = MEMORY[0x1E4FBC860];
  uint64_t v98 = *(void *)(v21 + 16);
  if (!v98)
  {
    uint64_t v37 = MEMORY[0x1E4FBC860];
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v39 = *(void *)(v37 + 16);
    if (v39)
    {
      unint64_t v40 = v37 + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
      uint64_t v41 = *(void *)(v100 + 72);
      swift_retain();
      unint64_t v42 = MEMORY[0x1E4FBC860];
      while (1)
      {
        uint64_t v43 = UsoEntitySpan.properties.getter();
        uint64_t v44 = *(void *)(v43 + 16);
        int64_t v45 = *(void *)(v42 + 16);
        int64_t v46 = v45 + v44;
        if (__OFADD__(v45, v44)) {
          goto LABEL_75;
        }
        uint64_t v47 = v43;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (isUniquelyReferenced_nonNull_native && v46 <= *(void *)(v42 + 24) >> 1)
        {
          if (*(void *)(v47 + 16)) {
            goto LABEL_35;
          }
        }
        else
        {
          if (v45 <= v46) {
            int64_t v49 = v45 + v44;
          }
          else {
            int64_t v49 = v45;
          }
          unint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v49, 1, v42);
          if (*(void *)(v47 + 16))
          {
LABEL_35:
            uint64_t v50 = *(void *)(v42 + 16);
            if ((*(void *)(v42 + 24) >> 1) - v50 < v44) {
              goto LABEL_77;
            }
            unint64_t v51 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
            uint64_t v52 = *(void *)(v104 + 72);
            unint64_t v53 = v42 + v51 + v52 * v50;
            if (v47 + v51 < v53 + v52 * v44 && v53 < v47 + v51 + v52 * v44) {
              goto LABEL_79;
            }
            swift_arrayInitWithCopy();
            if (v44)
            {
              uint64_t v55 = *(void *)(v42 + 16);
              BOOL v56 = __OFADD__(v55, v44);
              uint64_t v57 = v55 + v44;
              if (v56) {
                goto LABEL_78;
              }
              *(void *)(v42 + 16) = v57;
            }
            goto LABEL_25;
          }
        }
        if (v44) {
          goto LABEL_76;
        }
LABEL_25:
        swift_bridgeObjectRelease();
        v40 += v41;
        if (!--v39)
        {
          swift_release_n();
          goto LABEL_46;
        }
      }
    }
    swift_release();
    unint64_t v42 = MEMORY[0x1E4FBC860];
LABEL_46:
    uint64_t v110 = MEMORY[0x1E4FBC860];
    uint64_t v108 = *(void (**)(char *, unint64_t, uint64_t))(v42 + 16);
    if (v108)
    {
      unint64_t v58 = 0;
      uint64_t v106 = (void (**)(char *, uint64_t))(v104 + 8);
      uint64_t v107 = v104 + 16;
      uint64_t v59 = (void (**)(char *, char *, uint64_t))(v104 + 32);
      while (1)
      {
        if (v58 >= *(void *)(v42 + 16)) {
          goto LABEL_74;
        }
        unint64_t v60 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
        uint64_t v61 = *(void *)(v104 + 72);
        (*(void (**)(char *, unint64_t, uint64_t))(v104 + 16))(v105, v42 + v60 + v61 * v58, v109);
        if (SpanProperty.key.getter() == 0x656D614E707061 && v62 == 0xE700000000000000) {
          break;
        }
        char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v63) {
          goto LABEL_55;
        }
        (*v106)(v105, v109);
LABEL_49:
        if (v108 == (void (*)(char *, unint64_t, uint64_t))++v58) {
          goto LABEL_60;
        }
      }
      swift_bridgeObjectRelease();
LABEL_55:
      uint64_t v64 = *v59;
      (*v59)(v103, v105, v109);
      uint64_t v65 = v110;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v65 + 16) + 1, 1);
        uint64_t v65 = v110;
      }
      unint64_t v67 = *(void *)(v65 + 16);
      unint64_t v66 = *(void *)(v65 + 24);
      if (v67 >= v66 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
        uint64_t v65 = v110;
      }
      *(void *)(v65 + 16) = v67 + 1;
      v64((char *)(v65 + v60 + v67 * v61), v103, v109);
      uint64_t v110 = v65;
      goto LABEL_49;
    }
LABEL_60:
    swift_bridgeObjectRelease();
    uint64_t v68 = *(void *)(v110 + 16);
    if (v68)
    {
      uint64_t v69 = *(void (**)(char *, unint64_t, uint64_t))(v104 + 16);
      uint64_t v107 = v110;
      uint64_t v108 = v69;
      unint64_t v70 = v110 + ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80));
      uint64_t v71 = *(void *)(v104 + 72);
      uint64_t v72 = (void (**)(char *, uint64_t))(v104 + 8);
      swift_retain();
      Swift::String v73 = (void *)MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v75 = v97;
        uint64_t v76 = v109;
        v108(v97, v70, v109);
        uint64_t v77 = SpanProperty.valueString.getter();
        uint64_t v79 = v78;
        (*v72)(v75, v76);
        if (v79)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::String v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v73[2] + 1, 1, v73);
          }
          unint64_t v81 = v73[2];
          unint64_t v80 = v73[3];
          if (v81 >= v80 >> 1) {
            Swift::String v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v80 > 1), v81 + 1, 1, v73);
          }
          v73[2] = v81 + 1;
          id v74 = &v73[2 * v81];
          v74[4] = v77;
          v74[5] = v79;
        }
        v70 += v71;
        --v68;
      }
      while (v68);
      swift_release_n();
    }
    else
    {
      swift_release();
      Swift::String v73 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v82 = specialized Set.init<A>(_:)((uint64_t)v73);
    swift_bridgeObjectRelease();
    unint64_t v38 = specialized _copyCollectionToContiguousArray<A>(_:)(v82);
    swift_bridgeObjectRelease();
    return (uint64_t)v38;
  }
  unint64_t v22 = 0;
  uint64_t v95 = v100 + 16;
  os_log_type_t v94 = (void (**)(char *, void, uint64_t))(v6 + 104);
  unsigned int v93 = *MEMORY[0x1E4FA2C90];
  uint64_t v92 = (void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v23 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  id v85 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  int v87 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v89 = (void (**)(void, void (*)(char *, unint64_t, uint64_t)))(v100 + 8);
  uint64_t v90 = (void (**)(char *, void (**)(char *, uint64_t), void *))(v100 + 32);
  uint64_t v101 = v13;
  os_log_type_t v88 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v96 = v21;
  while (v22 < *(void *)(v21 + 16))
  {
    unint64_t v24 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
    uint64_t v102 = *(void *)(v100 + 72);
    (*(void (**)(void (**)(char *, uint64_t), unint64_t, void *))(v100 + 16))(v106, v21 + v24 + v102 * v22, v108);
    uint64_t v25 = v107;
    UsoEntitySpan.sourceComponent.getter();
    (*v94)(v16, v93, v5);
    (*v92)(v16, 0, 1, v5);
    uint64_t v26 = (uint64_t)&v9[*(int *)(v99 + 48)];
    outlined init with copy of MediaUserStateCenter?(v25, (uint64_t)v9, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
    outlined init with copy of MediaUserStateCenter?((uint64_t)v16, v26, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
    uint64_t v27 = *v23;
    if ((*v23)(v9, 1, v5) == 1)
    {
      if (v27((char *)v26, 1, v5) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
        outlined destroy of MediaUserStateCenter?(v107, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
LABEL_14:
        unint64_t v32 = (void (*)(unint64_t, char *, void *))*v90;
        (*v90)(v91, v106, v108);
        uint64_t v33 = v110;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v33 + 16) + 1, 1);
          uint64_t v33 = v110;
        }
        uint64_t v34 = v102;
        unint64_t v36 = *(void *)(v33 + 16);
        unint64_t v35 = *(void *)(v33 + 24);
        if (v36 >= v35 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
          uint64_t v33 = v110;
        }
        *(void *)(v33 + 16) = v36 + 1;
        v32(v33 + v24 + v36 * v34, v91, v108);
        uint64_t v110 = v33;
        uint64_t v13 = v101;
        uint64_t v23 = v88;
        goto LABEL_7;
      }
      goto LABEL_5;
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v9, (uint64_t)v13, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
    if (v27((char *)v26, 1, v5) == 1)
    {
      (*v87)(v13, v5);
LABEL_5:
      outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for (UsoEntitySpan.SpanSource?, UsoEntitySpan.SpanSource?));
      outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      outlined destroy of MediaUserStateCenter?(v107, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      goto LABEL_6;
    }
    uint64_t v28 = v86;
    (*v85)(v86, v26, v5);
    lazy protocol witness table accessor for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource();
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v30 = *v87;
    (*v87)(v101, v5);
    uint64_t v31 = v28;
    uint64_t v13 = v101;
    v30(v31, v5);
    uint64_t v23 = v88;
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
    outlined destroy of MediaUserStateCenter?(v107, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
    if (v29) {
      goto LABEL_14;
    }
LABEL_6:
    (*v89)(v106, v108);
LABEL_7:
    ++v22;
    uint64_t v21 = v96;
    if (v98 == v22)
    {
      uint64_t v37 = v110;
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for OpenAppVocPreflightClient()
{
  return self;
}

uint64_t method lookup function for OpenAppVocPreflightClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for OpenAppVocPreflightClient);
}

uint64_t dispatch thunk of OpenAppVocPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of OpenAppVocPreflightClient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

unint64_t lazy protocol witness table accessor for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource;
  if (!lazy protocol witness table cache variable for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource)
  {
    type metadata accessor for UsoEntitySpan.SpanSource();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource);
  }
  return result;
}

uint64_t UsoEntity_common_MediaItem.identifiers(forNamespace:appBundleId:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v48 = a2;
  uint64_t v4 = type metadata accessor for UsoIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  unint64_t v51 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  int64_t v49 = (char *)&v47 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v47 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v47 - v13;
  uint64_t v15 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v16 = v15;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  uint64_t v60 = MEMORY[0x1E4FBC860];
  uint64_t v56 = *(void *)(v15 + 16);
  if (v56)
  {
    uint64_t v52 = v12;
    uint64_t v53 = v5;
    unint64_t v18 = 0;
    uint64_t v59 = v5 + 16;
    uint64_t v19 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v50 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    uint64_t v54 = a1;
    uint64_t v55 = v15;
    while (2)
    {
      if (v18 >= *(void *)(v16 + 16))
      {
        __break(1u);
        JUMPOUT(0x1C9072388);
      }
      unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      unint64_t v21 = v18 + 1;
      uint64_t v57 = *(void *)(v5 + 72);
      unint64_t v22 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      v22(v14, v16 + v20 + v57 * v18, v4);
      uint64_t v23 = UsoIdentifier.namespace.getter();
      unint64_t v25 = 0xEF6E756F4E726579;
      unint64_t v26 = 0x616C50616964656DLL;
      switch(v54)
      {
        case 1:
          uint64_t v27 = "mediaReleaseDecade";
          goto LABEL_40;
        case 2:
          unint64_t v26 = 0x6E6547636973756DLL;
          unint64_t v25 = 0xEA00000000006572;
          if (!v24) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 3:
          unint64_t v25 = 0xEF646F6F4D726579;
          if (!v24) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 4:
          unint64_t v26 = 0xD000000000000013;
          uint64_t v28 = "mediaPlayerActivity";
          goto LABEL_43;
        case 5:
          unint64_t v26 = 0xD000000000000014;
          uint64_t v28 = "mediaPlayerRadioType";
          goto LABEL_43;
        case 6:
          unint64_t v26 = 0xD000000000000015;
          uint64_t v28 = "mediaPlayerAttributes";
          goto LABEL_43;
        case 7:
          unint64_t v26 = 0xD000000000000014;
          uint64_t v28 = "mediaPlayerReference";
          goto LABEL_43;
        case 8:
          unint64_t v26 = 0xD000000000000015;
          uint64_t v28 = "radioStationFrequency";
          goto LABEL_43;
        case 9:
          unint64_t v25 = 0xED0000656C746954;
          unint64_t v26 = 0x7473696C79616C70;
          if (!v24) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 10:
          unint64_t v26 = 0x5474736163646F70;
          goto LABEL_31;
        case 11:
          unint64_t v25 = 0xEA00000000007265;
          unint64_t v26 = 0x696669746E656469;
          if (!v24) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 12:
          unint64_t v25 = 0xE400000000000000;
          unint64_t v26 = 1701605234;
          if (!v24) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 13:
          unint64_t v25 = 0xEB00000000644965;
          unint64_t v26 = 0x6C646E7542707061;
          if (!v24) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 14:
          unint64_t v26 = 0xD000000000000019;
          uint64_t v28 = "resolved_reference_source";
          goto LABEL_43;
        case 15:
          unint64_t v26 = 0xD000000000000010;
          uint64_t v28 = "appPlaylistTitle";
          goto LABEL_43;
        case 16:
          uint64_t v27 = "appPlaylistTitleId";
          goto LABEL_40;
        case 17:
          unint64_t v26 = 0x54776F6853707061;
LABEL_31:
          unint64_t v25 = 0xEC000000656C7469;
          if (!v24) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 18:
          unint64_t v25 = 0xEE006449656C7469;
          unint64_t v26 = 0x54776F6853707061;
          if (!v24) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 19:
          unint64_t v26 = 0xD000000000000011;
          uint64_t v28 = "appAudiobookTitle";
          goto LABEL_43;
        case 20:
          unint64_t v26 = 0xD000000000000013;
          uint64_t v28 = "appAudiobookTitleId";
          goto LABEL_43;
        case 21:
          uint64_t v27 = "appMusicArtistName";
          goto LABEL_40;
        case 22:
          unint64_t v26 = 0xD000000000000014;
          uint64_t v28 = "appMusicArtistNameId";
          goto LABEL_43;
        case 23:
          uint64_t v27 = "appAudiobookAuthor";
LABEL_40:
          unint64_t v25 = (unint64_t)(v27 - 32) | 0x8000000000000000;
          unint64_t v26 = 0xD000000000000012;
          if (!v24) {
            goto LABEL_41;
          }
          goto LABEL_45;
        case 24:
          unint64_t v26 = 0xD000000000000014;
          uint64_t v28 = "appAudiobookAuthorId";
LABEL_43:
          unint64_t v25 = (unint64_t)(v28 - 32) | 0x8000000000000000;
          goto LABEL_44;
        case 25:
          unint64_t v25 = 0xE700000000000000;
          unint64_t v26 = 0x64695F6D657469;
          if (!v24) {
            goto LABEL_41;
          }
          goto LABEL_45;
        default:
LABEL_44:
          if (!v24)
          {
LABEL_41:
            unint64_t v29 = v20;
            swift_bridgeObjectRelease();
            uint64_t v30 = v52;
            v22(v52, (unint64_t)v14, v4);
            BOOL v31 = 0;
            goto LABEL_52;
          }
LABEL_45:
          if (v23 == v26 && v24 == v25)
          {
            unint64_t v29 = v20;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v30 = v52;
            v22(v52, (unint64_t)v14, v4);
          }
          else
          {
            unint64_t v29 = v20;
            char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v30 = v52;
            v22(v52, (unint64_t)v14, v4);
            BOOL v31 = 0;
            if ((v32 & 1) == 0) {
              goto LABEL_52;
            }
          }
          uint64_t v33 = UsoIdentifier.value.getter();
          unint64_t v35 = v34;
          swift_bridgeObjectRelease();
          uint64_t v36 = HIBYTE(v35) & 0xF;
          if ((v35 & 0x2000000000000000) == 0) {
            uint64_t v36 = v33 & 0xFFFFFFFFFFFFLL;
          }
          BOOL v31 = v36 != 0;
LABEL_52:
          uint64_t v37 = *v19;
          (*v19)(v30, v4);
          if (v58)
          {
            unint64_t v38 = v49;
            v22(v49, (unint64_t)v14, v4);
            if (!v31)
            {
              v37(v38, v4);
LABEL_4:
              v37(v14, v4);
              uint64_t v16 = v55;
              goto LABEL_5;
            }
            if (UsoIdentifier.appBundleId.getter() == v48 && v39 == v58)
            {
              swift_bridgeObjectRelease();
              v37(v38, v4);
            }
            else
            {
              unint64_t v40 = v38;
              char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              v37(v40, v4);
              if ((v41 & 1) == 0) {
                goto LABEL_4;
              }
            }
          }
          else if (!v31)
          {
            goto LABEL_4;
          }
          unint64_t v42 = *v50;
          (*v50)(v51, v14, v4);
          uint64_t v43 = v60;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v43 + 16) + 1, 1);
            uint64_t v43 = v60;
          }
          unint64_t v45 = *(void *)(v43 + 16);
          unint64_t v44 = *(void *)(v43 + 24);
          uint64_t v16 = v55;
          if (v45 >= v44 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
            uint64_t v43 = v60;
          }
          *(void *)(v43 + 16) = v45 + 1;
          v42((char *)(v43 + v29 + v45 * v57), v51, v4);
          uint64_t v60 = v43;
LABEL_5:
          unint64_t v18 = v21;
          uint64_t v5 = v53;
          if (v56 != v21) {
            continue;
          }
          uint64_t v17 = v60;
          break;
      }
      break;
    }
  }
  swift_bridgeObjectRelease();
  return v17;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.hasNonEmptyName()()
{
  uint64_t v0 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v0;
  unint64_t v3 = v1;
  swift_bridgeObjectRelease();
  uint64_t v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  return v4 != 0;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isFromArtist()()
{
  uint64_t v1 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v56);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v53 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v57 = (char *)&v48 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v58 = (char *)&v48 - v12;
  uint64_t v13 = type metadata accessor for UsoIdentifier();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v48 - v18;
  uint64_t v55 = v0;
  uint64_t v20 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    int64_t v49 = v4;
    uint64_t v50 = v2;
    unint64_t v51 = v6;
    uint64_t v52 = v1;
    uint64_t v24 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    uint64_t v23 = v14 + 16;
    unint64_t v22 = v24;
    unint64_t v25 = v20 + ((*(unsigned __int8 *)(v23 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 64));
    unint64_t v26 = (void (**)(char *, uint64_t))(v23 - 8);
    uint64_t v61 = *(void *)(v23 + 56);
    uint64_t v54 = v20;
    swift_bridgeObjectRetain();
    uint64_t v59 = "mediaPlayerRadioType";
    unint64_t v60 = 0x80000001C919C4A0;
    while (1)
    {
      v22(v19, v25, v13);
      uint64_t v29 = UsoIdentifier.namespace.getter();
      if (!v30) {
        break;
      }
      if (v29 == 0xD000000000000015 && v30 == v60)
      {
        swift_bridgeObjectRelease();
        v22(v17, (unint64_t)v19, v13);
      }
      else
      {
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v22(v17, (unint64_t)v19, v13);
        if ((v31 & 1) == 0) {
          goto LABEL_14;
        }
      }
      if (UsoIdentifier.value.getter() == 0x697472416D6F7266 && v32 == 0xEA00000000007473)
      {
        swift_bridgeObjectRelease();
        unint64_t v35 = *v26;
        (*v26)(v17, v13);
        v35(v19, v13);
LABEL_17:
        swift_bridgeObjectRelease_n();
        if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
        {
          uint64_t v36 = (uint64_t)v58;
          dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
          swift_release();
          uint64_t v38 = (uint64_t)v51;
          uint64_t v37 = v52;
          uint64_t v39 = v50;
        }
        else
        {
          uint64_t v39 = v50;
          uint64_t v36 = (uint64_t)v58;
          uint64_t v37 = v52;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v58, 1, 1, v52);
          uint64_t v38 = (uint64_t)v51;
        }
        uint64_t v40 = (uint64_t)v57;
        (*(void (**)(char *, void, uint64_t))(v39 + 104))(v57, *MEMORY[0x1E4FA3598], v37);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v37);
        uint64_t v41 = v38 + *(int *)(v56 + 48);
        outlined init with copy of MediaUserStateCenter?(v36, v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined init with copy of MediaUserStateCenter?(v40, v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        unint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
        if (v42(v38, 1, v37) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v37) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            char v34 = 1;
            return v34 & 1;
          }
        }
        else
        {
          uint64_t v43 = v53;
          outlined init with copy of MediaUserStateCenter?(v38, v53, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v37) != 1)
          {
            uint64_t v44 = v43;
            unint64_t v45 = v49;
            (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v49, v41, v37);
            lazy protocol witness table accessor for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
            char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
            int64_t v46 = *(void (**)(char *, uint64_t))(v39 + 8);
            v46(v45, v37);
            outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            v46((char *)v44, v37);
            outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            return v34 & 1;
          }
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v43, v37);
        }
        outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
        char v34 = 0;
        return v34 & 1;
      }
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v28 = *v26;
      (*v26)(v17, v13);
      v28(v19, v13);
      if (v27) {
        goto LABEL_17;
      }
LABEL_4:
      v25 += v61;
      if (!--v21)
      {
        swift_bridgeObjectRelease_n();
        char v34 = 0;
        return v34 & 1;
      }
    }
    v22(v17, (unint64_t)v19, v13);
LABEL_14:
    uint64_t v33 = *v26;
    (*v26)(v17, v13);
    v33(v19, v13);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  char v34 = 0;
  return v34 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isFromSong()()
{
  uint64_t v1 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v56);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v53 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v57 = (char *)&v48 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v58 = (char *)&v48 - v12;
  uint64_t v13 = type metadata accessor for UsoIdentifier();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v48 - v18;
  uint64_t v55 = v0;
  uint64_t v20 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    int64_t v49 = v4;
    uint64_t v50 = v2;
    unint64_t v51 = v6;
    uint64_t v52 = v1;
    uint64_t v24 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    uint64_t v23 = v14 + 16;
    unint64_t v22 = v24;
    unint64_t v25 = v20 + ((*(unsigned __int8 *)(v23 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 64));
    unint64_t v26 = (void (**)(char *, uint64_t))(v23 - 8);
    uint64_t v61 = *(void *)(v23 + 56);
    uint64_t v54 = v20;
    swift_bridgeObjectRetain();
    uint64_t v59 = "mediaPlayerRadioType";
    unint64_t v60 = 0x80000001C919C4A0;
    while (1)
    {
      v22(v19, v25, v13);
      uint64_t v29 = UsoIdentifier.namespace.getter();
      if (!v30) {
        break;
      }
      if (v29 == 0xD000000000000015 && v30 == v60)
      {
        swift_bridgeObjectRelease();
        v22(v17, (unint64_t)v19, v13);
      }
      else
      {
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v22(v17, (unint64_t)v19, v13);
        if ((v31 & 1) == 0) {
          goto LABEL_14;
        }
      }
      if (UsoIdentifier.value.getter() == 0x676E6F536D6F7266 && v32 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        unint64_t v35 = *v26;
        (*v26)(v17, v13);
        v35(v19, v13);
LABEL_17:
        swift_bridgeObjectRelease_n();
        if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
        {
          uint64_t v36 = (uint64_t)v58;
          dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
          swift_release();
          uint64_t v38 = (uint64_t)v51;
          uint64_t v37 = v52;
          uint64_t v39 = v50;
        }
        else
        {
          uint64_t v39 = v50;
          uint64_t v36 = (uint64_t)v58;
          uint64_t v37 = v52;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v58, 1, 1, v52);
          uint64_t v38 = (uint64_t)v51;
        }
        uint64_t v40 = (uint64_t)v57;
        (*(void (**)(char *, void, uint64_t))(v39 + 104))(v57, *MEMORY[0x1E4FA3568], v37);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v37);
        uint64_t v41 = v38 + *(int *)(v56 + 48);
        outlined init with copy of MediaUserStateCenter?(v36, v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined init with copy of MediaUserStateCenter?(v40, v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        unint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
        if (v42(v38, 1, v37) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v37) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            char v34 = 1;
            return v34 & 1;
          }
        }
        else
        {
          uint64_t v43 = v53;
          outlined init with copy of MediaUserStateCenter?(v38, v53, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v37) != 1)
          {
            uint64_t v44 = v43;
            unint64_t v45 = v49;
            (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v49, v41, v37);
            lazy protocol witness table accessor for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
            char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
            int64_t v46 = *(void (**)(char *, uint64_t))(v39 + 8);
            v46(v45, v37);
            outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            v46((char *)v44, v37);
            outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            return v34 & 1;
          }
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v43, v37);
        }
        outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
        char v34 = 0;
        return v34 & 1;
      }
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v28 = *v26;
      (*v26)(v17, v13);
      v28(v19, v13);
      if (v27) {
        goto LABEL_17;
      }
LABEL_4:
      v25 += v61;
      if (!--v21)
      {
        swift_bridgeObjectRelease_n();
        char v34 = 0;
        return v34 & 1;
      }
    }
    v22(v17, (unint64_t)v19, v13);
LABEL_14:
    uint64_t v33 = *v26;
    (*v26)(v17, v13);
    v33(v19, v13);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  char v34 = 0;
  return v34 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isFromAlbum()()
{
  uint64_t v1 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v56);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v53 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v57 = (char *)&v48 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v58 = (char *)&v48 - v12;
  uint64_t v13 = type metadata accessor for UsoIdentifier();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v48 - v18;
  uint64_t v55 = v0;
  uint64_t v20 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    int64_t v49 = v4;
    uint64_t v50 = v2;
    unint64_t v51 = v6;
    uint64_t v52 = v1;
    uint64_t v24 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    uint64_t v23 = v14 + 16;
    unint64_t v22 = v24;
    unint64_t v25 = v20 + ((*(unsigned __int8 *)(v23 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 64));
    unint64_t v26 = (void (**)(char *, uint64_t))(v23 - 8);
    uint64_t v61 = *(void *)(v23 + 56);
    uint64_t v54 = v20;
    swift_bridgeObjectRetain();
    uint64_t v59 = "mediaPlayerRadioType";
    unint64_t v60 = 0x80000001C919C4A0;
    while (1)
    {
      v22(v19, v25, v13);
      uint64_t v29 = UsoIdentifier.namespace.getter();
      if (!v30) {
        break;
      }
      if (v29 == 0xD000000000000015 && v30 == v60)
      {
        swift_bridgeObjectRelease();
        v22(v17, (unint64_t)v19, v13);
      }
      else
      {
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v22(v17, (unint64_t)v19, v13);
        if ((v31 & 1) == 0) {
          goto LABEL_14;
        }
      }
      if (UsoIdentifier.value.getter() == 0x75626C416D6F7266 && v32 == 0xE90000000000006DLL)
      {
        swift_bridgeObjectRelease();
        unint64_t v35 = *v26;
        (*v26)(v17, v13);
        v35(v19, v13);
LABEL_17:
        swift_bridgeObjectRelease_n();
        if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
        {
          uint64_t v36 = (uint64_t)v58;
          dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
          swift_release();
          uint64_t v38 = (uint64_t)v51;
          uint64_t v37 = v52;
          uint64_t v39 = v50;
        }
        else
        {
          uint64_t v39 = v50;
          uint64_t v36 = (uint64_t)v58;
          uint64_t v37 = v52;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v58, 1, 1, v52);
          uint64_t v38 = (uint64_t)v51;
        }
        uint64_t v40 = (uint64_t)v57;
        (*(void (**)(char *, void, uint64_t))(v39 + 104))(v57, *MEMORY[0x1E4FA3570], v37);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v37);
        uint64_t v41 = v38 + *(int *)(v56 + 48);
        outlined init with copy of MediaUserStateCenter?(v36, v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined init with copy of MediaUserStateCenter?(v40, v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        unint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
        if (v42(v38, 1, v37) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v37) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            char v34 = 1;
            return v34 & 1;
          }
        }
        else
        {
          uint64_t v43 = v53;
          outlined init with copy of MediaUserStateCenter?(v38, v53, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v37) != 1)
          {
            uint64_t v44 = v43;
            unint64_t v45 = v49;
            (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v49, v41, v37);
            lazy protocol witness table accessor for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
            char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
            int64_t v46 = *(void (**)(char *, uint64_t))(v39 + 8);
            v46(v45, v37);
            outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            v46((char *)v44, v37);
            outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            return v34 & 1;
          }
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v43, v37);
        }
        outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
        char v34 = 0;
        return v34 & 1;
      }
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v28 = *v26;
      (*v26)(v17, v13);
      v28(v19, v13);
      if (v27) {
        goto LABEL_17;
      }
LABEL_4:
      v25 += v61;
      if (!--v21)
      {
        swift_bridgeObjectRelease_n();
        char v34 = 0;
        return v34 & 1;
      }
    }
    v22(v17, (unint64_t)v19, v13);
LABEL_14:
    uint64_t v33 = *v26;
    (*v26)(v17, v13);
    v33(v19, v13);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  char v34 = 0;
  return v34 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isRecommended()()
{
  uint64_t v0 = type metadata accessor for UsoEntity_common_SortDirection.DefinedValues();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v29 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_SortDirection.DefinedValues?, UsoEntity_common_SortDirection.DefinedValues?));
  MEMORY[0x1F4188790](v41);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v27 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v27 - v12;
  if (!dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter()) {
    return 0;
  }
  unint64_t v14 = dispatch thunk of UsoEntity_common_SearchQualifier.sortDirections.getter();
  swift_release();
  if (!v14) {
    return 0;
  }
  if (v14 >> 62) {
    goto LABEL_25;
  }
  uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v15; uint64_t v15 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v42 = v4;
    uint64_t v33 = v8;
    unint64_t v40 = v14 & 0xC000000000000001;
    unint64_t v35 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
    unsigned int v37 = *MEMORY[0x1E4FA3658];
    uint64_t v38 = (void (**)(char *, void, uint64_t))(v1 + 104);
    unint64_t v39 = v1 + 48;
    uint64_t v28 = (void (**)(char *, uint64_t, uint64_t))(v1 + 32);
    char v31 = (void (**)(uint64_t, uint64_t))(v1 + 8);
    uint64_t v32 = v13;
    uint64_t v8 = 4;
    unint64_t v36 = v14;
    uint64_t v34 = v15;
    uint64_t v16 = (uint64_t)v4;
    while (1)
    {
      if (v40)
      {
        uint64_t v4 = (char *)MEMORY[0x1CB77D510](v8 - 4, v14);
      }
      else
      {
        uint64_t v4 = *(char **)(v14 + 8 * v8);
        swift_retain();
      }
      uint64_t v1 = v8 - 3;
      unint64_t v14 = v39;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      dispatch thunk of CodeGenListEntry.entry.getter();
      uint64_t v43 = v4;
      if (v44)
      {
        dispatch thunk of UsoEntity_common_SortDirection.definedValue.getter();
        swift_release();
        uint64_t v18 = v35;
      }
      else
      {
        uint64_t v18 = v35;
        (*v35)(v13, 1, 1, v0);
      }
      (*v38)(v11, v37, v0);
      (*v18)(v11, 0, 1, v0);
      uint64_t v19 = v16 + *(int *)(v41 + 48);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v13, v16, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      uint64_t v20 = (uint64_t)v11;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v11, v19, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))v14;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v14)(v16, 1, v0) == 1)
      {
        int v17 = v21(v19, 1, v0);
        unint64_t v14 = v36;
        if (v17 == 1)
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)v42, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v20, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
          outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
          swift_release();
LABEL_23:
          Swift::Bool v25 = 1;
          goto LABEL_27;
        }
        goto LABEL_7;
      }
      uint64_t v22 = v33;
      outlined init with copy of MediaUserStateCenter?(v16, v33, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      if (v21(v19, 1, v0) == 1)
      {
        (*v31)(v22, v0);
        unint64_t v14 = v36;
        uint64_t v13 = v32;
LABEL_7:
        outlined destroy of MediaUserStateCenter?((uint64_t)v42, &demangling cache variable for type metadata for (UsoEntity_common_SortDirection.DefinedValues?, UsoEntity_common_SortDirection.DefinedValues?));
        uint64_t v11 = (char *)v20;
        outlined destroy of MediaUserStateCenter?(v20, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
        swift_release();
        goto LABEL_8;
      }
      uint64_t v23 = v29;
      (*v28)(v29, v19, v0);
      lazy protocol witness table accessor for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_SortDirection.DefinedValues and conformance UsoEntity_common_SortDirection.DefinedValues, MEMORY[0x1E4FA3698]);
      int v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v24 = *v31;
      (*v31)(v22, v0);
      v24((uint64_t)v23, v0);
      outlined destroy of MediaUserStateCenter?(v16, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      uint64_t v11 = (char *)v20;
      outlined destroy of MediaUserStateCenter?(v20, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      uint64_t v13 = v32;
      outlined destroy of MediaUserStateCenter?((uint64_t)v32, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      swift_release();
      unint64_t v14 = v36;
      if (v30) {
        goto LABEL_23;
      }
LABEL_8:
      ++v8;
      if (v1 == v34) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
  }
LABEL_26:
  Swift::Bool v25 = 0;
LABEL_27:
  swift_bridgeObjectRelease_n();
  return v25;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isAffinity()()
{
  return UsoEntity_common_MediaItem.isAffinity()(MEMORY[0x1E4FA36D0]);
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isDiscover()()
{
  return UsoEntity_common_MediaItem.isAffinity()(MEMORY[0x1E4FA36D8]);
}

uint64_t UsoEntity_common_MediaItem.isAffinity()(unsigned int *a1)
{
  uint64_t v2 = type metadata accessor for UsoEntity_common_SearchQualifier.DefinedValues();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v26 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_SearchQualifier.DefinedValues?, UsoEntity_common_SearchQualifier.DefinedValues?));
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  unint64_t v14 = (char *)&v25 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v25 - v15;
  if (dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter())
  {
    dispatch thunk of UsoEntity_common_SearchQualifier.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v16, 1, 1, v2);
  }
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v14, *a1, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  uint64_t v17 = (uint64_t)&v7[*(int *)(v5 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v16, (uint64_t)v7, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v14, v17, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v18((uint64_t)v7, 1, v2) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    int v19 = v18(v17, 1, v2);
    if (v19 == 1) {
      uint64_t v20 = &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?;
    }
    else {
      uint64_t v20 = &demangling cache variable for type metadata for (UsoEntity_common_SearchQualifier.DefinedValues?, UsoEntity_common_SearchQualifier.DefinedValues?);
    }
    if (v19 == 1) {
      char v21 = -1;
    }
    else {
      char v21 = 0;
    }
  }
  else
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v7, (uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    if (v18(v17, 1, v2) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
      char v21 = 0;
      uint64_t v20 = &demangling cache variable for type metadata for (UsoEntity_common_SearchQualifier.DefinedValues?, UsoEntity_common_SearchQualifier.DefinedValues?);
    }
    else
    {
      uint64_t v22 = v26;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v26, v17, v2);
      lazy protocol witness table accessor for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_SearchQualifier.DefinedValues and conformance UsoEntity_common_SearchQualifier.DefinedValues, MEMORY[0x1E4FA36E0]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *(void (**)(char *, uint64_t))(v3 + 8);
      v23(v22, v2);
      uint64_t v20 = &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?;
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
      v23(v11, v2);
    }
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v7, v20);
  return v21 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isMoreOf()()
{
  uint64_t v0 = type metadata accessor for UsoEntity_common_Quantifier.DefinedValues();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v24 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v23 - v11;
  MEMORY[0x1F4188790](v10);
  unint64_t v14 = (char *)&v23 - v13;
  if (dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter())
  {
    dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v14, 1, 1, v0);
  }
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v12, *MEMORY[0x1E4FA3228], v0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v12, 0, 1, v0);
  uint64_t v15 = (uint64_t)&v5[*(int *)(v3 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v12, v15, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v16((uint64_t)v5, 1, v0) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    int v17 = v16(v15, 1, v0);
    if (v17 == 1) {
      uint64_t v18 = &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?;
    }
    else {
      uint64_t v18 = &demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?);
    }
    if (v17 == 1) {
      char v19 = -1;
    }
    else {
      char v19 = 0;
    }
  }
  else
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v9, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    if (v16(v15, 1, v0) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v9, v0);
      char v19 = 0;
      uint64_t v18 = &demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?);
    }
    else
    {
      uint64_t v20 = v24;
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v24, v15, v0);
      lazy protocol witness table accessor for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues, MEMORY[0x1E4FA3240]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v21 = *(void (**)(char *, uint64_t))(v1 + 8);
      v21(v20, v0);
      uint64_t v18 = &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?;
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      v21(v9, v0);
    }
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, v18);
  return v19 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isDifferentThan()()
{
  uint64_t v0 = type metadata accessor for UsoEntity_common_Similarity.DefinedValues();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Similarity.DefinedValues?, UsoEntity_common_Similarity.DefinedValues?));
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v26 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter();
  uint64_t v27 = v3;
  if (v16 && (uint64_t v17 = dispatch thunk of UsoEntity_common_SearchQualifier.similarity.getter(), swift_release(), v17))
  {
    dispatch thunk of UsoEntity_common_Similarity.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  }
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v13, *MEMORY[0x1E4FA3250], v0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  uint64_t v18 = (uint64_t)&v6[*(int *)(v4 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v15, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v13, v18, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  char v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v19((uint64_t)v6, 1, v0) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    int v20 = v19(v18, 1, v0);
    if (v20 == 1) {
      char v21 = &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?;
    }
    else {
      char v21 = &demangling cache variable for type metadata for (UsoEntity_common_Similarity.DefinedValues?, UsoEntity_common_Similarity.DefinedValues?);
    }
    if (v20 == 1) {
      char v22 = -1;
    }
    else {
      char v22 = 0;
    }
  }
  else
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    if (v19(v18, 1, v0) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
      char v22 = 0;
      char v21 = &demangling cache variable for type metadata for (UsoEntity_common_Similarity.DefinedValues?, UsoEntity_common_Similarity.DefinedValues?);
    }
    else
    {
      uint64_t v23 = v27;
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v27, v18, v0);
      lazy protocol witness table accessor for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_Similarity.DefinedValues and conformance UsoEntity_common_Similarity.DefinedValues, MEMORY[0x1E4FA3258]);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v24 = *(void (**)(char *, uint64_t))(v1 + 8);
      v24(v23, v0);
      char v21 = &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?;
      outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
      v24(v10, v0);
    }
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, v21);
  return v22 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isResolvedReference()()
{
  uint64_t v1 = type metadata accessor for UsoIdentifier();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  unint64_t v45 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v39 - v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v39 - v8;
  uint64_t v10 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    int v24 = 0;
    goto LABEL_19;
  }
  v39[2] = v0;
  uint64_t v40 = v2;
  uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
  uint64_t v13 = v2 + 16;
  uint64_t v12 = v14;
  unint64_t v15 = v10 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
  uint64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
  int64_t v46 = *(const char **)(v13 + 56);
  v39[1] = v10;
  swift_bridgeObjectRetain();
  unint64_t v42 = "";
  unint64_t v43 = 0x80000001C919C530;
  uint64_t v44 = "nAppVocPreflightClient";
  unint64_t v41 = 0x80000001C919F4D0;
  while (1)
  {
    v12(v9, v15, v1);
    uint64_t v19 = UsoIdentifier.namespace.getter();
    if (!v20)
    {
      v12(v7, (unint64_t)v9, v1);
LABEL_14:
      uint64_t v23 = *v16;
      (*v16)(v7, v1);
      v23(v9, v1);
      goto LABEL_4;
    }
    if (v19 == 0xD000000000000019 && v20 == v43)
    {
      swift_bridgeObjectRelease();
      v12(v7, (unint64_t)v9, v1);
    }
    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v12(v7, (unint64_t)v9, v1);
      if ((v21 & 1) == 0) {
        goto LABEL_14;
      }
    }
    if (UsoIdentifier.appBundleId.getter() == 0xD00000000000001CLL && v22 == v41) {
      break;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = *v16;
    (*v16)(v7, v1);
    v18(v9, v1);
    if (v17) {
      goto LABEL_17;
    }
LABEL_4:
    v15 += (unint64_t)v46;
    if (!--v11)
    {
      swift_bridgeObjectRelease_n();
      int v24 = 0;
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = *v16;
  (*v16)(v7, v1);
  v25(v9, v1);
LABEL_17:
  swift_bridgeObjectRelease_n();
  int v24 = 1;
LABEL_18:
  uint64_t v2 = v40;
LABEL_19:
  uint64_t v26 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  LODWORD(v43) = v24;
  int v30 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
  uint64_t v29 = v2 + 16;
  uint64_t v28 = v30;
  unint64_t v31 = v26 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
  uint64_t v32 = (void (**)(char *, uint64_t))(v29 - 8);
  uint64_t v33 = *(void *)(v29 + 56);
  unint64_t v42 = (char *)v26;
  swift_bridgeObjectRetain();
  int64_t v46 = "mediaPlayerAttributes";
  uint64_t v44 = (char *)0x80000001C919C4C0;
  uint64_t v34 = v45;
  while (2)
  {
    v28(v34, v31, v1);
    uint64_t v36 = UsoIdentifier.namespace.getter();
    if (!v37)
    {
      (*v32)(v34, v1);
LABEL_22:
      v31 += v33;
      if (!--v27)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
      continue;
    }
    break;
  }
  if (v36 != 0xD000000000000014 || v37 != v44)
  {
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v34 = v45;
    (*v32)(v45, v1);
    if (v35) {
      goto LABEL_30;
    }
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  (*v32)(v45, v1);
LABEL_30:
  swift_bridgeObjectRelease_n();
  return (v43 & 1) != 0;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isAddToUnspecifiedPlaylist()()
{
  uint64_t v1 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v52 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v55);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v53 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v56 = (char *)&v47 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v57 = (char *)&v47 - v11;
  uint64_t v12 = type metadata accessor for UsoIdentifier();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v47 - v17;
  uint64_t v19 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    uint64_t v50 = v1;
    uint64_t v51 = v0;
    uint64_t v48 = v2;
    int64_t v49 = v5;
    uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
    uint64_t v22 = v13 + 16;
    char v21 = v23;
    unint64_t v24 = v19 + ((*(unsigned __int8 *)(v22 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 64));
    uint64_t v25 = (void (**)(char *, uint64_t))(v22 - 8);
    uint64_t v62 = *(void *)(v22 + 56);
    uint64_t v54 = v19;
    swift_bridgeObjectRetain();
    uint64_t v59 = "mediaPlayerRadioType";
    unint64_t v60 = "inity";
    unint64_t v61 = 0x80000001C919C4A0;
    unint64_t v58 = 0x80000001C919C1E0;
    while (1)
    {
      v21(v18, v24, v12);
      uint64_t v28 = UsoIdentifier.namespace.getter();
      if (!v29) {
        break;
      }
      if (v28 == 0xD000000000000015 && v29 == v61)
      {
        swift_bridgeObjectRelease();
        v21(v16, (unint64_t)v18, v12);
      }
      else
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v21(v16, (unint64_t)v18, v12);
        if ((v30 & 1) == 0) {
          goto LABEL_14;
        }
      }
      if (UsoIdentifier.value.getter() == 0xD000000000000018 && v31 == v58)
      {
        swift_bridgeObjectRelease();
        uint64_t v34 = *v25;
        (*v25)(v16, v12);
        v34(v18, v12);
LABEL_17:
        swift_bridgeObjectRelease_n();
        if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
        {
          uint64_t v35 = (uint64_t)v57;
          dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
          swift_release();
          uint64_t v37 = (uint64_t)v49;
          uint64_t v36 = v50;
          uint64_t v38 = v48;
        }
        else
        {
          uint64_t v38 = v48;
          uint64_t v35 = (uint64_t)v57;
          uint64_t v36 = v50;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v57, 1, 1, v50);
          uint64_t v37 = (uint64_t)v49;
        }
        uint64_t v39 = (uint64_t)v56;
        (*(void (**)(char *, void, uint64_t))(v38 + 104))(v56, *MEMORY[0x1E4FA35E8], v36);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v36);
        uint64_t v40 = v37 + *(int *)(v55 + 48);
        outlined init with copy of MediaUserStateCenter?(v35, v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined init with copy of MediaUserStateCenter?(v39, v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        unint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
        if (v41(v37, 1, v36) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v39, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v41(v40, 1, v36) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            char v33 = 1;
            return v33 & 1;
          }
        }
        else
        {
          uint64_t v42 = v53;
          outlined init with copy of MediaUserStateCenter?(v37, v53, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v41(v40, 1, v36) != 1)
          {
            uint64_t v43 = v42;
            uint64_t v44 = v52;
            (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v52, v40, v36);
            lazy protocol witness table accessor for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
            char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
            unint64_t v45 = *(void (**)(char *, uint64_t))(v38 + 8);
            v45(v44, v36);
            outlined destroy of MediaUserStateCenter?(v39, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            v45((char *)v43, v36);
            outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            return v33 & 1;
          }
          outlined destroy of MediaUserStateCenter?(v39, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v42, v36);
        }
        outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
        char v33 = 0;
        return v33 & 1;
      }
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v27 = *v25;
      (*v25)(v16, v12);
      v27(v18, v12);
      if (v26) {
        goto LABEL_17;
      }
LABEL_4:
      v24 += v62;
      if (!--v20)
      {
        swift_bridgeObjectRelease_n();
        char v33 = 0;
        return v33 & 1;
      }
    }
    v21(v16, (unint64_t)v18, v12);
LABEL_14:
    uint64_t v32 = *v25;
    (*v25)(v16, v12);
    v32(v18, v12);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  char v33 = 0;
  return v33 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.hasListPosition()()
{
  uint64_t v0 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
  if (v0) {
    swift_release();
  }
  return v0 != 0;
}

SiriInformationSearch::CommonAudio::Attribute_optional __swiftcall UsoEntity_common_MediaItem.getListPosition()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v11 - v4;
  if (dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter())
  {
    dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter();
    swift_release();
    uint64_t v6 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v3, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
      int v8 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v3, v6);
      if (v8 == *MEMORY[0x1E4FA3410])
      {
        v9.value = SiriInformationSearch_CommonAudio_Attribute_previous;
LABEL_10:
        outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
        return v9;
      }
      if (v8 == *MEMORY[0x1E4FA33A0])
      {
        v9.value = SiriInformationSearch_CommonAudio_Attribute_next;
        goto LABEL_10;
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);
    }
    v9.value = SiriInformationSearch_CommonAudio_Attribute_unknownDefault;
    goto LABEL_10;
  }
  return (SiriInformationSearch::CommonAudio::Attribute_optional)15;
}

unint64_t UsoEntity_common_MediaItem.findAll(options:with:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if (a2(v3))
  {
    uint64_t v7 = swift_retain();
    MEMORY[0x1CB77CD90](v7);
    if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (UsoEntity_common_MediaItem.isResolvedReference()() && !*(void *)(a1 + 16)) {
    return v14;
  }
  unint64_t result = dispatch thunk of UsoEntity_common_MediaItem.associatedMediaItems.getter();
  if (!result) {
    return v14;
  }
  unint64_t v9 = result;
  if (!(result >> 62))
  {
    uint64_t v10 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10) {
      goto LABEL_10;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return v14;
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v10 = result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_10:
  if (v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](i, v9);
      }
      else {
        swift_retain();
      }
      dispatch thunk of CodeGenListEntry.entry.getter();
      swift_release();
      if (v13)
      {
        dispatch thunk of CodeGenListEntry.entry.getter();
        unint64_t v12 = UsoEntity_common_MediaItem.findAll(options:with:)(a1, a2, a3);
        swift_release();
        specialized Array.append<A>(contentsOf:)(v12);
      }
      swift_release();
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t specialized UsoEntity_common_MediaItem.findFirst(options:with:)(uint64_t a1, uint64_t a2)
{
  if (!UsoEntity_common_MediaItem.isResolvedReference()())
  {
    if ((!UsoEntity_common_MediaItem.isResolvedReference()() || *(void *)(a1 + 16))
      && (!UsoEntity_common_MediaItem.isResolvedReference()() || *(void *)(a1 + 16)))
    {
      unint64_t v4 = dispatch thunk of UsoEntity_common_MediaItem.associatedMediaItems.getter();
      if (v4)
      {
        unint64_t v5 = v4;
        if (v4 >> 62) {
          goto LABEL_22;
        }
        for (uint64_t i = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
        {
          uint64_t v7 = 4;
          while (1)
          {
            uint64_t v8 = v7 - 4;
            if ((v5 & 0xC000000000000001) == 0) {
              break;
            }
            MEMORY[0x1CB77D510](v7 - 4, v5);
            uint64_t v9 = v7 - 3;
            if (__OFADD__(v8, 1)) {
              goto LABEL_21;
            }
LABEL_18:
            dispatch thunk of CodeGenListEntry.entry.getter();
            if (v11)
            {
              a2 = ((uint64_t (*)(uint64_t))specialized UsoEntity_common_MediaItem.findFirst(options:with:))(a1);
              swift_release();
              swift_release();
              if (a2)
              {
                swift_bridgeObjectRelease();
                return a2;
              }
            }
            else
            {
              swift_release();
            }
            ++v7;
            if (v9 == i) {
              goto LABEL_23;
            }
          }
          swift_retain();
          uint64_t v9 = v7 - 3;
          if (!__OFADD__(v8, 1)) {
            goto LABEL_18;
          }
LABEL_21:
          __break(1u);
LABEL_22:
          ;
        }
LABEL_23:
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
  swift_retain();
  return a2;
}

{
  return specialized UsoEntity_common_MediaItem.findFirst(options:with:)(a1, a2, (uint64_t (*)(uint64_t))closure #1 in closure #1 in AudioUsoIntent.noun.getter, (uint64_t (*)(uint64_t))specialized UsoEntity_common_MediaItem.findFirst(options:with:));
}

{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (dispatch thunk of UsoEntity_common_MediaItem.dateTime.getter())
  {
    swift_release();
    swift_retain();
  }
  else
  {
    if ((!UsoEntity_common_MediaItem.isResolvedReference()() || *(void *)(a1 + 16))
      && (!UsoEntity_common_MediaItem.isResolvedReference()() || *(void *)(a1 + 16)))
    {
      unint64_t v4 = dispatch thunk of UsoEntity_common_MediaItem.associatedMediaItems.getter();
      if (v4)
      {
        unint64_t v5 = v4;
        if (v4 >> 62) {
          goto LABEL_23;
        }
        uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v6)
        {
LABEL_24:
          swift_bridgeObjectRelease();
          return 0;
        }
LABEL_10:
        uint64_t v7 = 4;
        while (1)
        {
          uint64_t v8 = v7 - 4;
          if ((v5 & 0xC000000000000001) != 0)
          {
            MEMORY[0x1CB77D510](v7 - 4, v5);
            uint64_t v9 = v7 - 3;
            if (__OFADD__(v8, 1)) {
              goto LABEL_22;
            }
          }
          else
          {
            swift_retain();
            uint64_t v9 = v7 - 3;
            if (__OFADD__(v8, 1))
            {
LABEL_22:
              __break(1u);
LABEL_23:
              uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
              if (!v6) {
                goto LABEL_24;
              }
              goto LABEL_10;
            }
          }
          dispatch thunk of CodeGenListEntry.entry.getter();
          if (v11)
          {
            a2 = ((uint64_t (*)(uint64_t))specialized UsoEntity_common_MediaItem.findFirst(options:with:))(a1);
            swift_release();
            swift_release();
            if (a2)
            {
              swift_bridgeObjectRelease();
              return a2;
            }
          }
          else
          {
            swift_release();
          }
          ++v7;
          if (v9 == v6) {
            goto LABEL_24;
          }
        }
      }
    }
    return 0;
  }
  return a2;
}

{
  return specialized UsoEntity_common_MediaItem.findFirst(options:with:)(a1, a2, (uint64_t (*)(uint64_t))closure #1 in closure #1 in AudioUsoIntent.sort.getter, (uint64_t (*)(uint64_t))specialized UsoEntity_common_MediaItem.findFirst(options:with:));
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  unint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter())
  {
    uint64_t v8 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
LABEL_5:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    if ((!UsoEntity_common_MediaItem.isResolvedReference()() || *(void *)(a1 + 16))
      && (!UsoEntity_common_MediaItem.isResolvedReference()() || *(void *)(a1 + 16)))
    {
      uint64_t v9 = dispatch thunk of UsoEntity_common_MediaItem.associatedMediaItems.getter();
      if (v9)
      {
        uint64_t v10 = v9;
        if (v9 >> 62) {
          goto LABEL_24;
        }
        for (uint64_t i = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
        {
          unint64_t v12 = 4;
          while (1)
          {
            uint64_t v13 = v12 - 4;
            if ((v10 & 0xC000000000000001) == 0) {
              break;
            }
            MEMORY[0x1CB77D510](v12 - 4, v10);
            uint64_t v14 = v12 - 3;
            if (__OFADD__(v13, 1)) {
              goto LABEL_23;
            }
LABEL_20:
            dispatch thunk of CodeGenListEntry.entry.getter();
            if (v17)
            {
              a2 = specialized UsoEntity_common_MediaItem.findFirst(options:with:)(a1, v17);
              swift_release();
              swift_release();
              if (a2)
              {
                swift_bridgeObjectRelease();
                return a2;
              }
            }
            else
            {
              swift_release();
            }
            ++v12;
            if (v14 == i) {
              goto LABEL_25;
            }
          }
          swift_retain();
          uint64_t v14 = v12 - 3;
          if (!__OFADD__(v13, 1)) {
            goto LABEL_20;
          }
LABEL_23:
          __break(1u);
LABEL_24:
          ;
        }
LABEL_25:
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
  dispatch thunk of UsoEntity_common_ReferenceType.definedValue.getter();
  swift_release();
  uint64_t v7 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1) {
    goto LABEL_5;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  swift_retain();
  return a2;
}

uint64_t specialized UsoEntity_common_MediaItem.findFirst(options:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t))
{
  uint64_t v5 = a2;
  if ((a3(a2) & 1) == 0)
  {
    if ((!UsoEntity_common_MediaItem.isResolvedReference()() || *(void *)(a1 + 16))
      && (!UsoEntity_common_MediaItem.isResolvedReference()() || *(void *)(a1 + 16)))
    {
      unint64_t v7 = dispatch thunk of UsoEntity_common_MediaItem.associatedMediaItems.getter();
      if (v7)
      {
        unint64_t v8 = v7;
        if (v7 >> 62) {
          goto LABEL_22;
        }
        for (uint64_t i = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
        {
          uint64_t v10 = 4;
          while (1)
          {
            uint64_t v11 = v10 - 4;
            if ((v8 & 0xC000000000000001) == 0) {
              break;
            }
            MEMORY[0x1CB77D510](v10 - 4, v8);
            uint64_t v12 = v10 - 3;
            if (__OFADD__(v11, 1)) {
              goto LABEL_21;
            }
LABEL_18:
            dispatch thunk of CodeGenListEntry.entry.getter();
            if (v14)
            {
              uint64_t v5 = a4(a1);
              swift_release();
              swift_release();
              if (v5)
              {
                swift_bridgeObjectRelease();
                return v5;
              }
            }
            else
            {
              swift_release();
            }
            ++v10;
            if (v12 == i) {
              goto LABEL_23;
            }
          }
          swift_retain();
          uint64_t v12 = v10 - 3;
          if (!__OFADD__(v11, 1)) {
            goto LABEL_18;
          }
LABEL_21:
          __break(1u);
LABEL_22:
          ;
        }
LABEL_23:
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
  swift_retain();
  return v5;
}

uint64_t UsoEntity_common_MediaItem.findFirst(options:with:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  if ((a2(v3) & 1) == 0)
  {
    if ((!UsoEntity_common_MediaItem.isResolvedReference()() || *(void *)(a1 + 16))
      && (!UsoEntity_common_MediaItem.isResolvedReference()() || *(void *)(a1 + 16)))
    {
      unint64_t v7 = dispatch thunk of UsoEntity_common_MediaItem.associatedMediaItems.getter();
      if (v7)
      {
        unint64_t v8 = v7;
        if (v7 >> 62) {
          goto LABEL_22;
        }
        for (uint64_t i = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
        {
          uint64_t v10 = 4;
          while (1)
          {
            uint64_t v11 = v10 - 4;
            if ((v8 & 0xC000000000000001) == 0) {
              break;
            }
            MEMORY[0x1CB77D510](v10 - 4, v8);
            uint64_t v12 = v10 - 3;
            if (__OFADD__(v11, 1)) {
              goto LABEL_21;
            }
LABEL_18:
            dispatch thunk of CodeGenListEntry.entry.getter();
            if (v15)
            {
              uint64_t v4 = UsoEntity_common_MediaItem.findFirst(options:with:)(a1, a2, a3);
              swift_release();
              swift_release();
              if (v4)
              {
                swift_bridgeObjectRelease();
                return v4;
              }
            }
            else
            {
              swift_release();
            }
            ++v10;
            if (v12 == i) {
              goto LABEL_23;
            }
          }
          swift_retain();
          uint64_t v12 = v10 - 3;
          if (!__OFADD__(v11, 1)) {
            goto LABEL_18;
          }
LABEL_21:
          __break(1u);
LABEL_22:
          ;
        }
LABEL_23:
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
  swift_retain();
  return v4;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.hasMediaTypeOnly()()
{
  uint64_t v0 = dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter();
  swift_release();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = dispatch thunk of UsoEntity_common_MediaItem.associatedPerson.getter();
  swift_release();
  if (v1) {
    return 0;
  }
  uint64_t v2 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
  swift_release();
  if (v2) {
    return 0;
  }
  uint64_t v3 = dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter();
  swift_release();
  if (v3) {
    return 0;
  }
  uint64_t v4 = dispatch thunk of UsoEntity_common_MediaItem.associatedMediaItems.getter();
  swift_bridgeObjectRelease();
  if (v4) {
    return 0;
  }
  uint64_t v5 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
  swift_release();
  if (v5) {
    return 0;
  }
  if (dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter())
  {
    swift_release();
    return 0;
  }
  return 1;
}

uint64_t Array<A>.identifiers(forNamespace:)(void (*a1)(void, void, void), void (**a2)(unint64_t, uint64_t))
{
  uint64_t v4 = type metadata accessor for UsoIdentifier();
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (unint64_t)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v36 - v8;
  if ((unint64_t)a2 >> 62) {
    goto LABEL_84;
  }
  uint64_t v10 = *(void *)(((unint64_t)a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v43 = a1;
    if (v10)
    {
      if (v10 < 1)
      {
        __break(1u);
        JUMPOUT(0x1C9076CD8);
      }
      uint64_t v12 = 0;
      a1 = (void (*)(void, void, void))((unint64_t)a2 & 0xC000000000000001);
      do
      {
        uint64_t v13 = v11;
        if (a1) {
          MEMORY[0x1CB77D510](v12, a2);
        }
        else {
          swift_retain();
        }
        uint64_t v14 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        swift_release();
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v11 = v13;
        }
        else {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        }
        unint64_t v16 = v11[2];
        unint64_t v15 = v11[3];
        if (v16 >= v15 >> 1) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v11);
        }
        ++v12;
        v11[2] = v16 + 1;
        v11[v16 + 4] = v14;
      }
      while (v10 != v12);
    }
    uint64_t v37 = v11;
    swift_bridgeObjectRelease();
    uint64_t v17 = v37;
    uint64_t v45 = MEMORY[0x1E4FBC860];
    uint64_t v39 = v37[2];
    if (!v39) {
      break;
    }
    unint64_t v18 = 0;
    uint64_t v38 = v37 + 4;
    uint64_t v44 = v36 + 16;
    a2 = (void (**)(unint64_t, uint64_t))(v36 + 8);
    uint64_t v42 = v43;
    unint64_t v19 = v7;
    while (v18 < v17[2])
    {
      uint64_t v20 = v38[v18];
      uint64_t v21 = *(void *)(v20 + 16);
      if (!v21) {
        goto LABEL_20;
      }
      unint64_t v40 = v18;
      uint64_t v41 = v20;
      uint64_t v22 = v20 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
      uint64_t v43 = *(void (**)(void, void, void))(v36 + 72);
      a1 = *(void (**)(void, void, void))(v36 + 16);
      swift_bridgeObjectRetain_n();
      while (2)
      {
        a1(v9, v22, v4);
        uint64_t v24 = UsoIdentifier.namespace.getter();
        unint64_t v26 = 0xEF6E756F4E726579;
        unint64_t v27 = 0x616C50616964656DLL;
        switch(v42)
        {
          case 1:
            uint64_t v28 = "mediaReleaseDecade";
            goto LABEL_60;
          case 2:
            unint64_t v27 = 0x6E6547636973756DLL;
            unint64_t v26 = 0xEA00000000006572;
            if (!v25) {
              goto LABEL_24;
            }
            goto LABEL_65;
          case 3:
            unint64_t v26 = 0xEF646F6F4D726579;
            if (!v25) {
              goto LABEL_24;
            }
            goto LABEL_65;
          case 4:
            unint64_t v27 = 0xD000000000000013;
            uint64_t v29 = "mediaPlayerActivity";
            goto LABEL_63;
          case 5:
            unint64_t v27 = 0xD000000000000014;
            uint64_t v29 = "mediaPlayerRadioType";
            goto LABEL_63;
          case 6:
            unint64_t v27 = 0xD000000000000015;
            uint64_t v29 = "mediaPlayerAttributes";
            goto LABEL_63;
          case 7:
            unint64_t v27 = 0xD000000000000014;
            uint64_t v29 = "mediaPlayerReference";
            goto LABEL_63;
          case 8:
            unint64_t v27 = 0xD000000000000015;
            uint64_t v29 = "radioStationFrequency";
            goto LABEL_63;
          case 9:
            unint64_t v26 = 0xED0000656C746954;
            unint64_t v27 = 0x7473696C79616C70;
            if (!v25) {
              goto LABEL_24;
            }
            goto LABEL_65;
          case 10:
            unint64_t v27 = 0x5474736163646F70;
            goto LABEL_51;
          case 11:
            unint64_t v26 = 0xEA00000000007265;
            unint64_t v27 = 0x696669746E656469;
            if (!v25) {
              goto LABEL_24;
            }
            goto LABEL_65;
          case 12:
            unint64_t v26 = 0xE400000000000000;
            unint64_t v27 = 1701605234;
            if (!v25) {
              goto LABEL_24;
            }
            goto LABEL_65;
          case 13:
            unint64_t v26 = 0xEB00000000644965;
            unint64_t v27 = 0x6C646E7542707061;
            if (!v25) {
              goto LABEL_24;
            }
            goto LABEL_65;
          case 14:
            unint64_t v27 = 0xD000000000000019;
            uint64_t v29 = "resolved_reference_source";
            goto LABEL_63;
          case 15:
            unint64_t v27 = 0xD000000000000010;
            uint64_t v29 = "appPlaylistTitle";
            goto LABEL_63;
          case 16:
            uint64_t v28 = "appPlaylistTitleId";
            goto LABEL_60;
          case 17:
            unint64_t v27 = 0x54776F6853707061;
LABEL_51:
            unint64_t v26 = 0xEC000000656C7469;
            if (!v25) {
              goto LABEL_24;
            }
            goto LABEL_65;
          case 18:
            unint64_t v26 = 0xEE006449656C7469;
            unint64_t v27 = 0x54776F6853707061;
            if (!v25) {
              goto LABEL_24;
            }
            goto LABEL_65;
          case 19:
            unint64_t v27 = 0xD000000000000011;
            uint64_t v29 = "appAudiobookTitle";
            goto LABEL_63;
          case 20:
            unint64_t v27 = 0xD000000000000013;
            uint64_t v29 = "appAudiobookTitleId";
            goto LABEL_63;
          case 21:
            uint64_t v28 = "appMusicArtistName";
            goto LABEL_60;
          case 22:
            unint64_t v27 = 0xD000000000000014;
            uint64_t v29 = "appMusicArtistNameId";
            goto LABEL_63;
          case 23:
            uint64_t v28 = "appAudiobookAuthor";
LABEL_60:
            unint64_t v26 = (unint64_t)(v28 - 32) | 0x8000000000000000;
            unint64_t v27 = 0xD000000000000012;
            if (!v25) {
              goto LABEL_24;
            }
            goto LABEL_65;
          case 24:
            unint64_t v27 = 0xD000000000000014;
            uint64_t v29 = "appAudiobookAuthorId";
LABEL_63:
            unint64_t v26 = (unint64_t)(v29 - 32) | 0x8000000000000000;
            goto LABEL_64;
          case 25:
            unint64_t v26 = 0xE700000000000000;
            unint64_t v27 = 0x64695F6D657469;
            if (!v25) {
              goto LABEL_24;
            }
            goto LABEL_65;
          default:
LABEL_64:
            if (!v25)
            {
LABEL_24:
              swift_bridgeObjectRelease();
              a1(v19, v9, v4);
              goto LABEL_25;
            }
LABEL_65:
            if (v24 != v27 || v25 != v26)
            {
              unint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              a1(v19, v9, v4);
              if (v7) {
                goto LABEL_69;
              }
LABEL_25:
              uint64_t v23 = *a2;
              (*a2)(v19, v4);
              v23((unint64_t)v9, v4);
LABEL_26:
              v22 += (uint64_t)v43;
              if (!--v21)
              {
                swift_bridgeObjectRelease_n();
                uint64_t v17 = v37;
                goto LABEL_19;
              }
              continue;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a1(v19, v9, v4);
LABEL_69:
            if (!UsoIdentifier.value.getter() && v30 == 0xE000000000000000)
            {
              swift_bridgeObjectRelease();
              goto LABEL_25;
            }
            unint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t v31 = *a2;
            (*a2)(v19, v4);
            v31((unint64_t)v9, v4);
            if (v7) {
              goto LABEL_26;
            }
            swift_bridgeObjectRelease();
            uint64_t v32 = v45;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1);
              uint64_t v32 = v45;
            }
            uint64_t v17 = v37;
            unint64_t v7 = *(void *)(v32 + 16);
            unint64_t v34 = *(void *)(v32 + 24);
            if (v7 >= v34 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v7 + 1, 1);
              uint64_t v17 = v37;
              uint64_t v32 = v45;
            }
            *(void *)(v32 + 16) = v7 + 1;
            *(void *)(v32 + 8 * v7 + 32) = v41;
LABEL_19:
            unint64_t v18 = v40;
LABEL_20:
            if (++v18 == v39)
            {
              swift_bridgeObjectRelease();
              return v45;
            }
            break;
        }
        break;
      }
    }
    __break(1u);
LABEL_84:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t Array<A>.findAll(options:with:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, unint64_t a4)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = specialized Sequence.flatMap<A>(_:)(a4, a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_release();
  return v8;
}

uint64_t Array<A>.findFirst(options:with:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, unint64_t a4)
{
  if (a4 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      uint64_t v9 = 4;
      do
      {
        uint64_t v10 = v9 - 4;
        if ((a4 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1CB77D510](v9 - 4, a4);
          uint64_t v11 = v9 - 3;
          if (__OFADD__(v10, 1)) {
            goto LABEL_13;
          }
        }
        else
        {
          swift_retain();
          uint64_t v11 = v9 - 3;
          if (__OFADD__(v10, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        uint64_t v12 = UsoEntity_common_MediaItem.findFirst(options:with:)(a1, a2, a3);
        swift_release();
        if (v12) {
          goto LABEL_12;
        }
        ++v9;
      }
      while (v11 != v8);
    }
  }
  uint64_t v12 = 0;
LABEL_12:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t lazy protocol witness table accessor for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Sequence.flatMap<A>(_:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v9 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1CB77D510](i - 4, a1);
          uint64_t v10 = i - 3;
          if (__OFADD__(v9, 1)) {
            goto LABEL_11;
          }
        }
        else
        {
          swift_retain();
          uint64_t v10 = i - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_11:
            __break(1u);
            goto LABEL_12;
          }
        }
        unint64_t v11 = UsoEntity_common_MediaItem.findAll(options:with:)(a2, a3, a4);
        swift_release();
        specialized Array.append<A>(contentsOf:)(v11);
        if (v10 == v7)
        {
          swift_bridgeObjectRelease();
          return v14;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t SearchToolEmptyDataProvider.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t *static SearchToolEmptyDataProvider.make()()
{
  type metadata accessor for AnyDataProvider();
  uint64_t v0 = type metadata accessor for SearchToolEmptyDataProvider();
  uint64_t v4 = swift_allocObject();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v2 = specialized AnyDataProvider.__allocating_init<A>(provider:)((uint64_t)&v4, v0, WitnessTable);
  swift_release();
  return v2;
}

uint64_t type metadata accessor for SearchToolEmptyDataProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SearchToolEmptyDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t SearchToolEmptyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8)
                                                              + 56))(a1, 1, 1);
}

uint64_t SearchToolEmptyDataProvider.deinit()
{
  return v0;
}

uint64_t SearchToolEmptyDataProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance SearchToolEmptyDataProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance SearchToolEmptyDataProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance SearchToolEmptyDataProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for DataProvider.reset() in conformance SearchToolEmptyDataProvider<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t type metadata completion function for SearchToolEmptyDataProvider()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for SearchToolEmptyDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SearchToolEmptyDataProvider);
}

uint64_t dispatch thunk of SearchToolEmptyDataProvider.prepare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SearchToolEmptyDataProvider.wait(timeout:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))() & 1;
}

uint64_t dispatch thunk of SearchToolEmptyDataProvider.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SearchToolEmptyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  __int16 v4 = *(_WORD *)(a2 + 88);
  uint64_t v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 120);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = v3;
  __int16 v11 = v4;
  return v5(a1, v9);
}

void *Emittable.eventWrapper(requestId:pommesCandidateId:)(uint64_t a1, unint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5)
{
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1070]), sel_init);
  if (v10)
  {
    __int16 v11 = v10;
    uint64_t v12 = type metadata accessor for UUID();
    v22[1] = v22;
    uint64_t v13 = *(void *)(v12 - 8);
    MEMORY[0x1F4188790](v12);
    unint64_t v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    Emittable.makeComponentIdAndEmitRequestLink(for:with:)(0x15u, a1, a2, a4, a5, (uint64_t)v15);
    id v16 = closure #1 in Emittable.eventWrapper(requestId:pommesCandidateId:)((uint64_t)v15, a1, a2, a3);
    objc_msgSend(v11, sel_setEventMetadata_, v16);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_1C8F83000, v18, v19, "Unable to initialize POMMESSchemaPOMMESClientEvent", v20, 2u);
      MEMORY[0x1CB77E470](v20, -1, -1);
    }

    return 0;
  }
  return v11;
}

id Emittable.stream.getter(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(self, sel_processInfo);
  char v5 = NSProcessInfo.isRunningUnitTests.getter();

  if (v5)
  {
    long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
    return (id)v6(a1, a2);
  }
  else
  {
    id v8 = objc_msgSend(self, sel_sharedStream);
    return v8;
  }
}

uint64_t Emittable.makeComponentIdAndEmitRequestLink(for:with:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, NSObject *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v79 = a2;
  if (!a3) {
    goto LABEL_4;
  }
  uint64_t v75 = a4;
  unsigned int v77 = a1;
  uint64_t v78 = a6;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = (char *)&v68 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v13 - 8);
  unint64_t v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
LABEL_4:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v81 = v20;
      *(_DWORD *)os_log_type_t v19 = 136315138;
      if (a3) {
        uint64_t v21 = v79;
      }
      else {
        uint64_t v21 = 7104878;
      }
      if (a3) {
        unint64_t v22 = a3;
      }
      else {
        unint64_t v22 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v17, v18, "[SELF Logging] Unable to create UUID for derived SELF ids from requestId: %s.", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v20, -1, -1);
      MEMORY[0x1CB77E470](v19, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return UUID.init()();
  }
  unint64_t v70 = &v68;
  uint64_t v24 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32);
  uint64_t v79 = v8;
  Swift::String v73 = v24;
  uint64_t v74 = v9 + 32;
  uint64_t v25 = v24((uint64_t)&v68 - v11, v15, v8);
  uint64_t v72 = &v68;
  MEMORY[0x1F4188790](v25);
  unint64_t v26 = (char *)&v68 - v11;
  unint64_t v27 = v75;
  uint64_t v28 = (*(uint64_t (**)(NSObject *, uint64_t))(a5 + 24))(v75, a5);
  uint64_t v29 = v77;
  (*(void (**)(void, char *))(*(void *)v28 + 88))(v77, v12);
  swift_release();
  if (AFDeviceSupportsSAE()) {
    uint64_t v30 = 43;
  }
  else {
    uint64_t v30 = 1;
  }
  uint64_t v31 = specialized Emittable.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(v29, (uint64_t)v26, v30);
  uint64_t v32 = v9;
  uint64_t v71 = v26;
  if (v31)
  {
    char v33 = v31;
    uint64_t v69 = v12;
    objc_msgSend((id)(*(uint64_t (**)(NSObject *, uint64_t))(a5 + 8))(v27, a5), sel_emitMessage_, v31);
    swift_unknownObjectRelease();
    uint64_t v34 = v78;
    uint64_t v35 = v33;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    uint64_t v37 = __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
    uint64_t v76 = &v68;
    MEMORY[0x1F4188790](v37);
    uint64_t v38 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v39 = v26;
    uint64_t v40 = v79;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v38, v39, v79);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      uint64_t v81 = swift_slowAlloc();
      uint64_t v75 = v35;
      uint64_t v44 = v81;
      *(_DWORD *)uint64_t v43 = 136315394;
      uint64_t v45 = SISchemaComponentName.description.getter();
      uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v81);
      uint64_t v40 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      int64_t v49 = *(void (**)(char *, uint64_t))(v32 + 8);
      v49(v38, v40);
      _os_log_impl(&dword_1C8F83000, v41, v42, "[SELF Logging] Logged request link event with component:%s, ID: %s", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v44, -1, -1);
      uint64_t v50 = v43;
      uint64_t v34 = v78;
      MEMORY[0x1CB77E470](v50, -1, -1);

      v49(v69, v40);
    }
    else
    {

      unint64_t v66 = *(void (**)(char *, uint64_t))(v32 + 8);
      v66(v38, v40);
      v66(v69, v40);
    }
    return v73(v34, v71, v40);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    uint64_t v52 = __swift_project_value_buffer(v51, (uint64_t)static Logger.pommes);
    uint64_t v76 = &v68;
    MEMORY[0x1F4188790](v52);
    uint64_t v53 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v54 = v26;
    uint64_t v55 = v79;
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v53, v54, v79);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      uint64_t v69 = v12;
      uint64_t v60 = v59;
      uint64_t v81 = v59;
      *(_DWORD *)uint64_t v58 = 136315394;
      uint64_t v61 = SISchemaComponentName.description.getter();
      uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v81);
      uint64_t v55 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v65 = *(void (**)(char *, uint64_t))(v32 + 8);
      v65(v53, v55);
      _os_log_impl(&dword_1C8F83000, v56, v57, "[SELF Logging] Unable to log request link event with component:%s, ID: %s", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v60, -1, -1);
      MEMORY[0x1CB77E470](v58, -1, -1);

      v65(v69, v55);
    }
    else
    {

      unint64_t v67 = *(void (**)(char *, uint64_t))(v32 + 8);
      v67((char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v55);
      v67(v12, v55);
    }
    return v73(v78, v71, v55);
  }
}

uint64_t dispatch thunk of Emittable.stream.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Emittable.mockStream.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Emittable.analyticsComponentIdGenerator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

unint64_t static PommesSearchServiceDelegate.machServiceName.getter()
{
  return 0xD000000000000028;
}

void *PommesSearchServiceDelegate.pommesSearchService.getter()
{
  uint64_t v1 = OBJC_IVAR___PommesSearchXPCServer____lazy_storage___pommesSearchService;
  if (*(void *)(v0 + OBJC_IVAR___PommesSearchXPCServer____lazy_storage___pommesSearchService))
  {
    uint64_t v2 = *(void **)(v0 + OBJC_IVAR___PommesSearchXPCServer____lazy_storage___pommesSearchService);
  }
  else
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v2 = static PommesSearchService.shared;
    *(void *)(v0 + v1) = static PommesSearchService.shared;
    swift_retain_n();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v2;
}

uint64_t PommesSearchServiceDelegate.pommesSearchService.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___PommesSearchXPCServer____lazy_storage___pommesSearchService) = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*PommesSearchServiceDelegate.pommesSearchService.modify(void **a1))(void *a1)
{
  a1[1] = v1;
  *a1 = PommesSearchServiceDelegate.pommesSearchService.getter();
  return PommesSearchServiceDelegate.pommesSearchService.modify;
}

uint64_t PommesSearchServiceDelegate.pommesSearchService.modify(void *a1)
{
  *(void *)(a1[1] + OBJC_IVAR___PommesSearchXPCServer____lazy_storage___pommesSearchService) = *a1;
  return swift_unknownObjectRelease();
}

id PommesSearchServiceDelegate.listener.getter()
{
  return *(id *)(v0 + OBJC_IVAR___PommesSearchXPCServer_listener);
}

id PommesSearchServiceDelegate.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

char *PommesSearchServiceDelegate.init()()
{
  *(void *)&v0[OBJC_IVAR___PommesSearchXPCServer____lazy_storage___pommesSearchService] = 0;
  uint64_t v1 = one-time initialization token for pommes;
  uint64_t v2 = v0;
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    long long v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v6 = 0;
    _os_log_impl(&dword_1C8F83000, v4, v5, "PommesSearchServiceDelegate init", v6, 2u);
    MEMORY[0x1CB77E470](v6, -1, -1);
  }

  id v7 = objc_allocWithZone(MEMORY[0x1E4F29298]);
  uint64_t v8 = (void *)MEMORY[0x1CB77CA90](0xD000000000000028, 0x80000001C919F4F0);
  id v9 = objc_msgSend(v7, sel_initWithMachServiceName_, v8);

  *(void *)&v2[OBJC_IVAR___PommesSearchXPCServer_listener] = v9;
  v19.receiver = v2;
  v19.super_class = (Class)type metadata accessor for PommesSearchServiceDelegate();
  uint64_t v10 = (char *)objc_msgSendSuper2(&v19, sel_init);
  uint64_t v11 = OBJC_IVAR___PommesSearchXPCServer_listener;
  uint64_t v12 = *(void **)&v10[OBJC_IVAR___PommesSearchXPCServer_listener];
  uint64_t v13 = v10;
  objc_msgSend(v12, sel_setDelegate_, v13);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1C8F83000, v14, v15, "PommesSearchService starts listening for new connection", v16, 2u);
    MEMORY[0x1CB77E470](v16, -1, -1);
  }

  id v17 = *(id *)&v10[v11];
  objc_msgSend(v17, sel_resume);

  return v13;
}

uint64_t type metadata accessor for PommesSearchServiceDelegate()
{
  return self;
}

id PommesSearchServiceDelegate.__deallocating_deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl(&dword_1C8F83000, v3, v4, "PommesSearchService stops listening for new connection", v5, 2u);
    MEMORY[0x1CB77E470](v5, -1, -1);
  }

  objc_msgSend(*(id *)&v1[OBJC_IVAR___PommesSearchXPCServer_listener], sel_invalidate);
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for PommesSearchServiceDelegate();
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

Swift::Bool __swiftcall PommesSearchServiceDelegate.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized PommesSearchServiceDelegate.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

uint64_t specialized PommesSearchServiceDelegate.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v2 = v1;
  objc_msgSend(a1, sel_processIdentifier);
  id v4 = objc_msgSend(a1, sel_serviceName);
  if (v4)
  {
    os_log_type_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  uint64_t v24 = v6;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v25 = v13;
    *(_DWORD *)uint64_t v12 = 67240450;
    uint64_t v14 = 7104878;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 8) = 2080;
    if (v8)
    {
      uint64_t v14 = v6;
      unint64_t v15 = v8;
    }
    else
    {
      unint64_t v15 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v10, v11, "Process [%{public}d] with service name %s is connecting to PommesSearchService", (uint8_t *)v12, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v13, -1, -1);
    MEMORY[0x1CB77E470](v12, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v16 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F2384260);
  objc_msgSend(a1, sel_setExportedInterface_, v16);

  objc_msgSend(a1, sel_setExportedObject_, (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x60))());
  swift_unknownObjectRelease();
  objc_msgSend(a1, sel_resume);
  swift_bridgeObjectRetain();
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v25 = v20;
    *(_DWORD *)uint64_t v19 = 67240450;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 8) = 2080;
    if (v8) {
      uint64_t v21 = v24;
    }
    else {
      uint64_t v21 = 7104878;
    }
    if (v8) {
      unint64_t v22 = v8;
    }
    else {
      unint64_t v22 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v17, v18, "Process [%{public}d] with service name %s is connected to PommesSearchService", (uint8_t *)v19, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v20, -1, -1);
    MEMORY[0x1CB77E470](v19, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 1;
}

uint64_t sub_1C9078ACC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t sub_1C9078B28(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x68);
  uint64_t v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for PommesSearchServiceDelegate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesSearchServiceDelegate);
}

uint64_t dispatch thunk of PommesSearchServiceDelegate.pommesSearchService.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of PommesSearchServiceDelegate.pommesSearchService.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of PommesSearchServiceDelegate.pommesSearchService.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of PommesSearchServiceDelegate.listener(_:shouldAcceptNewConnection:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

SiriInformationSearch::UtteranceNormalizer __swiftcall UtteranceNormalizer.init(locale:)(Swift::String_optional locale)
{
  uint64_t v2 = v1;
  if (locale.value._object)
  {
    object = locale.value._object;
    uint64_t countAndFlagsBits = locale.value._countAndFlagsBits;
  }
  else
  {
    id v5 = objc_msgSend(self, sel_sharedPreferences);
    id v6 = objc_msgSend(v5, sel_languageCode);
    if (v6)
    {
      unint64_t v7 = v6;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      lazy protocol witness table accessor for type String and conformance String();
      uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      object = v8;

      swift_bridgeObjectRelease();
    }
    else
    {

      uint64_t countAndFlagsBits = 0;
      object = (void *)0xE000000000000000;
    }
  }
  uint64_t v9 = specialized static UtteranceNormalizer.getTriggerPhrases(locale:)(countAndFlagsBits, (uint64_t)object);
  *uint64_t v2 = countAndFlagsBits;
  v2[1] = (uint64_t)object;
  v2[2] = (uint64_t)v9;
  result.triggers._rawValue = v11;
  result.locale._object = v10;
  result.locale._uint64_t countAndFlagsBits = (uint64_t)v9;
  return result;
}

Swift::String __swiftcall UtteranceNormalizer.normalize(_:preserveCase:)(Swift::String _, Swift::Bool preserveCase)
{
  object = _._object;
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  id v5 = (void *)v2[1];
  unint64_t v6 = v2[2];
  if (preserveCase)
  {
    unint64_t v50 = *v2;
    uint64_t v51 = v5;
    uint64_t v54 = 28261;
    unint64_t v55 = 0xE200000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    if (BidirectionalCollection<>.starts<A>(with:)())
    {
      int v7 = 1;
      goto LABEL_10;
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v11 = 0;
      _os_log_impl(&dword_1C8F83000, v9, v10, "Utterance normalization with case preserved is not supported for non-en locales, falling back to lower case", v11, 2u);
      MEMORY[0x1CB77E470](v11, -1, -1);
    }
  }
  int v7 = 0;
LABEL_10:
  unint64_t v50 = countAndFlagsBits;
  uint64_t v51 = object;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  Locale.init(identifier:)();
  uint64_t v15 = type metadata accessor for Locale();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 0, 1, v15);
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v16 = StringProtocol.lowercased(with:)();
  os_log_type_t v18 = v17;
  outlined destroy of Locale?((uint64_t)v14);
  if (v7) {
    uint64_t v19 = countAndFlagsBits;
  }
  else {
    uint64_t v19 = v16;
  }
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = *(void *)(v6 + 16);
  if (v21)
  {
    uint64_t v47 = v19;
    unint64_t v48 = v20;
    uint64_t v45 = countAndFlagsBits;
    unint64_t v46 = object;
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v49 = v6;
    unint64_t v22 = (unint64_t *)(v6 + 40);
    while (1)
    {
      uint64_t v23 = *(v22 - 1);
      unint64_t v24 = *v22;
      unint64_t v50 = v16;
      uint64_t v51 = v18;
      uint64_t v54 = v23;
      unint64_t v55 = v24;
      swift_bridgeObjectRetain();
      if (BidirectionalCollection<>.starts<A>(with:)()) {
        break;
      }
      v22 += 2;
      swift_bridgeObjectRelease();
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v45;
        object = v46;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v25 = String.count.getter();
    swift_bridgeObjectRelease();
    unint64_t v26 = specialized Collection.dropFirst(_:)(v25, v47, v48);
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    unint64_t v50 = v26;
    uint64_t v51 = v28;
    uint64_t v52 = v30;
    uint64_t v53 = v32;
    uint64_t v33 = type metadata accessor for CharacterSet();
    uint64_t v34 = *(void *)(v33 - 8);
    MEMORY[0x1F4188790](v33);
    uint64_t v36 = (char *)&v44 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    static CharacterSet.whitespacesAndNewlines.getter();
    lazy protocol witness table accessor for type Substring and conformance Substring();
    uint64_t v37 = StringProtocol.trimmingCharacters(in:)();
    uint64_t v39 = v38;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
    swift_bridgeObjectRelease();
    unint64_t v50 = v37;
    uint64_t v51 = v39;
    uint64_t countAndFlagsBits = String.init<A>(_:)();
    object = v40;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRetain();
  }
  uint64_t v41 = countAndFlagsBits;
  os_log_type_t v42 = object;
  result._object = v42;
  result._uint64_t countAndFlagsBits = v41;
  return result;
}

uint64_t UtteranceNormalizer.locale.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UtteranceNormalizer.triggers.getter()
{
  return swift_bridgeObjectRetain();
}

void *specialized static UtteranceNormalizer.getTriggerPhrases(locale:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x54415F6564 && a2 == 0xE500000000000000) {
    return &outlined read-only object #0 of static UtteranceNormalizer.getTriggerPhrases(locale:);
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v7 = a1 == 0x48435F6564 && a2 == 0xE500000000000000;
  Swift::String result = &outlined read-only object #0 of static UtteranceNormalizer.getTriggerPhrases(locale:);
  if ((v5 & 1) == 0 && !v7)
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL v9 = a1 == 0x45445F6564 && a2 == 0xE500000000000000;
    BOOL v10 = v9;
    Swift::String result = &outlined read-only object #0 of static UtteranceNormalizer.getTriggerPhrases(locale:);
    if ((v8 & 1) == 0 && !v10)
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v12 = a1 == 0x53555F6E65 && a2 == 0xE500000000000000;
      BOOL v13 = v12;
      Swift::String result = &outlined read-only object #0 of static UtteranceNormalizer.getTriggerPhrases(locale:);
      if ((v11 & 1) == 0 && !v13)
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL v15 = a1 == 0x55415F6E65 && a2 == 0xE500000000000000;
        BOOL v16 = v15;
        Swift::String result = &outlined read-only object #0 of static UtteranceNormalizer.getTriggerPhrases(locale:);
        if ((v14 & 1) == 0 && !v16)
        {
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          BOOL v18 = a1 == 0x41435F6E65 && a2 == 0xE500000000000000;
          BOOL v19 = v18;
          Swift::String result = &outlined read-only object #0 of static UtteranceNormalizer.getTriggerPhrases(locale:);
          if ((v17 & 1) == 0 && !v19)
          {
            char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL v21 = a1 == 0x42475F6E65 && a2 == 0xE500000000000000;
            BOOL v22 = v21;
            Swift::String result = &outlined read-only object #0 of static UtteranceNormalizer.getTriggerPhrases(locale:);
            if ((v20 & 1) == 0 && !v22)
            {
              char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL v24 = a1 == 0x45495F6E65 && a2 == 0xE500000000000000;
              BOOL v25 = v24;
              Swift::String result = &outlined read-only object #0 of static UtteranceNormalizer.getTriggerPhrases(locale:);
              if ((v23 & 1) == 0 && !v25)
              {
                char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
                BOOL v27 = a1 == 0x4E495F6E65 && a2 == 0xE500000000000000;
                BOOL v28 = v27;
                Swift::String result = &outlined read-only object #0 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                if ((v26 & 1) == 0 && !v28)
                {
                  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  BOOL v30 = a1 == 0x5A4E5F6E65 && a2 == 0xE500000000000000;
                  BOOL v31 = v30;
                  Swift::String result = &outlined read-only object #0 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                  if ((v29 & 1) == 0 && !v31)
                  {
                    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    BOOL v33 = a1 == 0x47535F6E65 && a2 == 0xE500000000000000;
                    BOOL v34 = v33;
                    Swift::String result = &outlined read-only object #0 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                    if ((v32 & 1) == 0 && !v34)
                    {
                      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      BOOL v36 = a1 == 0x415A5F6E65 && a2 == 0xE500000000000000;
                      BOOL v37 = v36;
                      Swift::String result = &outlined read-only object #0 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                      if ((v35 & 1) == 0 && !v37)
                      {
                        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                          return &outlined read-only object #0 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x45415F7261 && a2 == 0xE500000000000000) {
                          return &outlined read-only object #1 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v40 = a1 == 0x41535F7261 && a2 == 0xE500000000000000;
                        uint64_t v41 = &outlined read-only object #1 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v38) {
                          return v41;
                        }
                        Swift::String result = &outlined read-only object #1 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v40) {
                          return result;
                        }
                        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                          return &outlined read-only object #1 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x4B445F6164 && a2 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          return &outlined read-only object #2 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x4C435F7365 && a2 == 0xE500000000000000) {
                          return &outlined read-only object #3 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v43 = a1 == 0x53455F7365 && a2 == 0xE500000000000000;
                        BOOL v44 = v43;
                        uint64_t v41 = &outlined read-only object #3 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v42) {
                          return v41;
                        }
                        Swift::String result = &outlined read-only object #3 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v44) {
                          return result;
                        }
                        char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v46 = a1 == 0x584D5F7365 && a2 == 0xE500000000000000;
                        BOOL v47 = v46;
                        uint64_t v41 = &outlined read-only object #3 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v45) {
                          return v41;
                        }
                        Swift::String result = &outlined read-only object #3 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v47) {
                          return result;
                        }
                        char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v49 = a1 == 0x53555F7365 && a2 == 0xE500000000000000;
                        BOOL v50 = v49;
                        uint64_t v41 = &outlined read-only object #3 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v48) {
                          return v41;
                        }
                        Swift::String result = &outlined read-only object #3 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v50) {
                          return result;
                        }
                        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                          return &outlined read-only object #3 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x49465F6966 && a2 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          return &outlined read-only object #4 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x45425F7266 && a2 == 0xE500000000000000) {
                          return &outlined read-only object #5 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v52 = a1 == 0x41435F7266 && a2 == 0xE500000000000000;
                        BOOL v53 = v52;
                        uint64_t v41 = &outlined read-only object #5 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v51) {
                          return v41;
                        }
                        Swift::String result = &outlined read-only object #5 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v53) {
                          return result;
                        }
                        char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v55 = a1 == 0x48435F7266 && a2 == 0xE500000000000000;
                        BOOL v56 = v55;
                        uint64_t v41 = &outlined read-only object #5 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v54) {
                          return v41;
                        }
                        Swift::String result = &outlined read-only object #5 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v56) {
                          return result;
                        }
                        char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v58 = a1 == 0x52465F7266 && a2 == 0xE500000000000000;
                        BOOL v59 = v58;
                        uint64_t v41 = &outlined read-only object #5 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v57) {
                          return v41;
                        }
                        Swift::String result = &outlined read-only object #5 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v59) {
                          return result;
                        }
                        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                          return &outlined read-only object #5 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x4C495F6568 && a2 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          return &outlined read-only object #6 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x48435F7469 && a2 == 0xE500000000000000) {
                          return &outlined read-only object #7 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v61 = a1 == 0x54495F7469 && a2 == 0xE500000000000000;
                        BOOL v62 = v61;
                        uint64_t v41 = &outlined read-only object #7 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v60) {
                          return v41;
                        }
                        Swift::String result = &outlined read-only object #7 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v62) {
                          return result;
                        }
                        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                          return &outlined read-only object #7 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x504A5F616ALL && a2 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          return &outlined read-only object #8 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x524B5F6F6BLL && a2 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          return &outlined read-only object #9 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x594D5F736DLL && a2 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          return &outlined read-only object #10 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x4F4E5F626ELL && a2 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          return &outlined read-only object #11 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x4C4E5F6C6ELL && a2 == 0xE500000000000000) {
                          return &outlined read-only object #12 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v64 = a1 == 0x45425F6C6ELL && a2 == 0xE500000000000000;
                        BOOL v65 = v64;
                        uint64_t v41 = &outlined read-only object #12 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v63) {
                          return v41;
                        }
                        Swift::String result = &outlined read-only object #12 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v65) {
                          return result;
                        }
                        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                          return &outlined read-only object #12 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x52425F7470 && a2 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          return &outlined read-only object #13 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x55525F7572 && a2 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          return &outlined read-only object #14 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x45535F7673 && a2 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          return &outlined read-only object #15 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x48545F6874 && a2 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          return &outlined read-only object #16 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x52545F7274 && a2 == 0xE500000000000000
                          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          return &outlined read-only object #17 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        if (a1 == 0x4E435F657579 && a2 == 0xE600000000000000) {
                          return &outlined read-only object #18 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        }
                        char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v67 = a1 == 0x4E435F687ALL && a2 == 0xE500000000000000;
                        BOOL v68 = v67;
                        uint64_t v41 = &outlined read-only object #18 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v66) {
                          return v41;
                        }
                        Swift::String result = &outlined read-only object #18 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v68) {
                          return result;
                        }
                        char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        BOOL v70 = a1 == 0x4B485F687ALL && a2 == 0xE500000000000000;
                        BOOL v71 = v70;
                        uint64_t v41 = &outlined read-only object #18 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (v69) {
                          return v41;
                        }
                        Swift::String result = &outlined read-only object #18 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                        if (!v71)
                        {
                          char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          BOOL v74 = a1 == 0x57545F687ALL && a2 == 0xE500000000000000;
                          if (v72)
                          {
                            return &outlined read-only object #18 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                          }
                          else
                          {
                            Swift::String result = &outlined read-only object #18 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                            if (!v74)
                            {
                              if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                                return &outlined read-only object #18 of static UtteranceNormalizer.getTriggerPhrases(locale:);
                              }
                              else {
                                return (void *)MEMORY[0x1E4FBC860];
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  Swift::String result = String.index(_:offsetBy:limitedBy:)();
  if (v6) {
    Swift::String result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return String.subscript.getter();
}

uint64_t destroy for UtteranceNormalizer()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for UtteranceNormalizer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for UtteranceNormalizer(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UtteranceNormalizer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UtteranceNormalizer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UtteranceNormalizer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)Swift::String result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UtteranceNormalizer()
{
  return &type metadata for UtteranceNormalizer;
}

uint64_t AudioUsoIntent.__allocating_init(userDialogAct:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for JSONEncodingOptions();
  uint64_t v69 = *(void *)(v4 - 8);
  uint64_t v70 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  BOOL v7 = (char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  BOOL v68 = (char *)v62 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v9 - 8);
  char v11 = (char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  BOOL v15 = (char *)v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  BOOL v18 = (char *)v62 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  MEMORY[0x1F4188790](v20);
  BOOL v22 = (char *)v62 - v21;
  uint64_t v71 = a1;
  uint64_t v23 = a1;
  uint64_t v25 = v24;
  BOOL v27 = v26;
  outlined init with copy of MediaUserStateCenter?(v23, (uint64_t)v11, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v25 + 48))(v11, 1, v27) != 1)
  {
    (*(void (**)(char *, char *, char *))(v25 + 32))(v22, v11, v27);
    if (Siri_Nlu_External_UserDialogAct.hasAccepted.getter())
    {
      uint64_t v29 = (*(uint64_t (**)(void))(v2 + 1000))();
      outlined destroy of MediaUserStateCenter?(v71, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      (*(void (**)(char *, char *))(v25 + 8))(v22, v27);
      swift_beginAccess();
      *(unsigned char *)(v29 + 138) = 0;
      return v29;
    }
    if (Siri_Nlu_External_UserDialogAct.hasRejected.getter())
    {
      uint64_t v29 = (*(uint64_t (**)(void))(v2 + 1000))();
      outlined destroy of MediaUserStateCenter?(v71, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      (*(void (**)(char *, char *))(v25 + 8))(v22, v27);
      swift_beginAccess();
      *(unsigned char *)(v29 + 138) = 1;
      return v29;
    }
    if (Siri_Nlu_External_UserDialogAct.hasCancelled.getter())
    {
      uint64_t v29 = (*(uint64_t (**)(void))(v2 + 1000))();
      outlined destroy of MediaUserStateCenter?(v71, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      (*(void (**)(char *, char *))(v25 + 8))(v22, v27);
      swift_beginAccess();
      *(unsigned char *)(v29 + 138) = 2;
      return v29;
    }
    if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) == 0)
    {
      BOOL v67 = v22;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
      BOOL v37 = *(void (**)(char *, char *, char *))(v25 + 16);
      char v38 = v67;
      v37(v18, v67, v27);
      uint64_t v39 = Logger.logObject.getter();
      int v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, (os_log_type_t)v40))
      {
        os_log_t v66 = v39;
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        v72[0] = v63;
        BOOL v65 = v41;
        *(_DWORD *)uint64_t v41 = 136315138;
        JSONEncodingOptions.init()();
        uint64_t v42 = _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct, MEMORY[0x1E4FA2858]);
        BOOL v68 = v27;
        v62[1] = v42;
        uint64_t countAndFlagsBits = Message.jsonString(options:)();
        object = v47;
        LODWORD(v64) = v40;
        (*(void (**)(char *, uint64_t))(v69 + 8))(v7, v70);
        BOOL v49 = v68;
        v37(v15, v18, v68);
        if (!object)
        {
          Swift::String v50 = Message.textFormatString()();
          uint64_t countAndFlagsBits = v50._countAndFlagsBits;
          object = v50._object;
        }
        char v51 = v67;
        BOOL v52 = v65;
        BOOL v53 = *(void (**)(char *, char *))(v25 + 8);
        v53(v15, v49);
        v72[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v53(v18, v49);
        os_log_t v54 = v66;
        _os_log_impl(&dword_1C8F83000, v66, (os_log_type_t)v64, "AudioUsoIntent#init unexpected userDialogAct %s", v52, 0xCu);
        uint64_t v55 = v63;
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v55, -1, -1);
        MEMORY[0x1CB77E470](v52, -1, -1);

        outlined destroy of MediaUserStateCenter?(v71, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        v53(v51, v49);
      }
      else
      {

        BOOL v43 = *(void (**)(char *, char *))(v25 + 8);
        v43(v18, v27);
        outlined destroy of MediaUserStateCenter?(v71, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        v43(v38, v27);
      }
      return 0;
    }
    BOOL v34 = v27;
    unint64_t v35 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    unint64_t v44 = v35;
    if (v35 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v56) {
        goto LABEL_22;
      }
    }
    else if (*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_22:
      if ((v44 & 0xC000000000000001) != 0)
      {
        uint64_t v45 = MEMORY[0x1CB77D510](0, v44);
        goto LABEL_25;
      }
      if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v45 = *(void *)(v44 + 32);
        swift_retain();
LABEL_25:
        swift_bridgeObjectRelease();
        uint64_t v29 = (*(uint64_t (**)(uint64_t))(v2 + 1008))(v45);
        outlined destroy of MediaUserStateCenter?(v71, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        (*(void (**)(char *, char *))(v25 + 8))(v22, v27);
        return v29;
      }
      __break(1u);
      goto LABEL_38;
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes == -1)
    {
LABEL_31:
      uint64_t v57 = type metadata accessor for Logger();
      __swift_project_value_buffer(v57, (uint64_t)static Logger.pommes);
      BOOL v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        char v60 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v60 = 0;
        _os_log_impl(&dword_1C8F83000, v58, v59, "tasks extracted from the userDialogAct is empty", v60, 2u);
        MEMORY[0x1CB77E470](v60, -1, -1);
      }

      outlined destroy of MediaUserStateCenter?(v71, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      (*(void (**)(char *, char *))(v25 + 8))(v22, v34);
      return 0;
    }
LABEL_38:
    swift_once();
    goto LABEL_31;
  }
  uint64_t v28 = outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(v2 + 1000))(v28);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
  BOOL v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    BOOL v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v33 = 0;
    _os_log_impl(&dword_1C8F83000, v31, v32, "AudioUsoIntent#init received nil userDialogAct", v33, 2u);
    MEMORY[0x1CB77E470](v33, -1, -1);
  }

  outlined destroy of MediaUserStateCenter?(v71, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  return v29;
}

unint64_t AudioUsoIntent.UsoNamespace.rawValue.getter(char a1)
{
  unint64_t result = 0x616C50616964656DLL;
  switch(a1)
  {
    case 1:
    case 16:
    case 21:
    case 23:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0x6E6547636973756DLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0x7473696C79616C70;
      break;
    case 10:
      unint64_t result = 0x5474736163646F70;
      break;
    case 11:
      unint64_t result = 0x696669746E656469;
      break;
    case 12:
      unint64_t result = 1701605234;
      break;
    case 13:
      unint64_t result = 0x6C646E7542707061;
      break;
    case 14:
      unint64_t result = 0xD000000000000019;
      break;
    case 15:
      unint64_t result = 0xD000000000000010;
      break;
    case 17:
      unint64_t result = 0x54776F6853707061;
      break;
    case 18:
      unint64_t result = 0x54776F6853707061;
      break;
    case 19:
      unint64_t result = 0xD000000000000011;
      break;
    case 20:
      unint64_t result = 0xD000000000000013;
      break;
    case 22:
      unint64_t result = 0xD000000000000014;
      break;
    case 24:
      unint64_t result = 0xD000000000000014;
      break;
    case 25:
      unint64_t result = 0x64695F6D657469;
      break;
    default:
      return result;
  }
  return result;
}

void *AudioUsoIntent.pegasusAppBundle.unsafeMutableAddressor()
{
  return &static AudioUsoIntent.pegasusAppBundle;
}

unint64_t static AudioUsoIntent.pegasusAppBundle.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t AudioUsoIntent.verb.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 136);
}

uint64_t AudioUsoIntent.baseEntity.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 137);
}

uint64_t AudioUsoIntent.confirmationState.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 138);
}

uint64_t AudioUsoIntent.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  AudioUsoIntent.init()();
  return v0;
}

double AudioUsoIntent.init()()
{
  *(void *)(v0 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_WORD *)(v0 + 136) = 529;
  *(unsigned char *)(v0 + 138) = 4;
  *(_OWORD *)(v0 + 144) = xmmword_1C9198220;
  *(int64x2_t *)(v0 + 160) = vdupq_n_s64(1uLL);
  *(void *)(v0 + 176) = 0;
  *(_WORD *)(v0 + 184) = 7453;
  *(_OWORD *)(v0 + 192) = xmmword_1C9198220;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(void *)(v0 + 272) = 0;
  *(unsigned char *)(v0 + 280) = 4;
  *(void *)(v0 + 288) = 1;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 328) = 0u;
  *(void *)(v0 + 344) = 1;
  *(_OWORD *)(v0 + 352) = 0u;
  *(_OWORD *)(v0 + 368) = 0u;
  *(_WORD *)(v0 + 384) = 2572;
  *(void *)(v0 + 392) = 0;
  *(unsigned char *)(v0 + 400) = 3;
  *(void *)(v0 + 416) = 0;
  *(void *)(v0 + 424) = 0;
  *(void *)(v0 + 408) = 0;
  *(unsigned char *)(v0 + 432) = 3;
  *(void *)(v0 + 440) = 0;
  *(_WORD *)(v0 + 448) = 256;
  *(void *)(v0 + 456) = 0;
  *(void *)(v0 + 464) = 0;
  return result;
}

uint64_t AudioUsoIntent.__allocating_init(task:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  AudioUsoIntent.init(task:)(a1);
  return v2;
}

uint64_t AudioUsoIntent.init(task:)(uint64_t a1)
{
  *(_OWORD *)(v1 + 16) = 0u;
  *(_WORD *)(v1 + 136) = 529;
  *(void *)(v1 + 128) = 0;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(unsigned char *)(v1 + 138) = 4;
  *(_OWORD *)(v1 + 144) = xmmword_1C9198220;
  *(int64x2_t *)(v1 + 160) = vdupq_n_s64(1uLL);
  *(void *)(v1 + 176) = 0;
  *(_WORD *)(v1 + 184) = 7453;
  *(_OWORD *)(v1 + 192) = xmmword_1C9198220;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(void *)(v1 + 272) = 0;
  *(unsigned char *)(v1 + 280) = 4;
  *(void *)(v1 + 288) = 1;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(void *)(v1 + 344) = 1;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_WORD *)(v1 + 384) = 2572;
  *(void *)(v1 + 392) = 0;
  *(unsigned char *)(v1 + 400) = 3;
  *(void *)(v1 + 416) = 0;
  *(void *)(v1 + 424) = 0;
  *(void *)(v1 + 408) = 0;
  *(unsigned char *)(v1 + 432) = 3;
  *(void *)(v1 + 440) = 0;
  *(_WORD *)(v1 + 448) = 256;
  *(void *)(v1 + 456) = 0;
  *(void *)(v1 + 464) = 0;
  if (a1)
  {
    *(void *)(v1 + 144) = a1;
    swift_retain_n();
    UsoTask.verbString.getter();
    char v2 = specialized CommonAudio.Verb.init(rawValue:)();
    swift_beginAccess();
    *(unsigned char *)(v1 + 136) = v2;
    uint64_t v3 = UsoTask.baseEntityAsString.getter();
    uint64_t v5 = v4;
    v6._uint64_t countAndFlagsBits = v3;
    v6._object = v5;
    Swift::Int v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CommonAudio.UsoEntity.init(rawValue:), v6);
    swift_bridgeObjectRelease();
    if (v7 == 1) {
      char v8 = 1;
    }
    else {
      char v8 = 2;
    }
    if (v7) {
      char v9 = v8;
    }
    else {
      char v9 = 0;
    }
    swift_beginAccess();
    *(unsigned char *)(v1 + 137) = v9;
    swift_retain();
    static UsoTask_CodegenConverter.convert(task:)();
    swift_release_n();
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_play_common_MediaItem();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 16) = v11;
LABEL_67:
        swift_release();
        return v1;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_play_uso_NoEntity();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 24) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_resume_uso_NoEntity();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 32) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_update_common_MediaItem();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 40) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_summarise_common_MediaItem();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 48) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_request_common_MediaItem();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 56) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_subscribe_common_MediaItem();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 64) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_follow_common_MediaItem();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 72) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_start_common_MediaItem();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 80) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_noVerb_common_MediaItem();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 88) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_noVerb_common_App();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 96) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_like_common_MediaItem();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 104) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_unlike_common_MediaItem();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 112) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_shuffle_common_MediaItem();
      if (swift_dynamicCast())
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(void *)(v1 + 120) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with take of Any?((uint64_t)v14, (uint64_t)v12);
    if (!v13)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
      return v1;
    }
    type metadata accessor for UsoTask_repeat_common_MediaItem();
    if (swift_dynamicCast())
    {
      *(void *)(v1 + 128) = v11;
      goto LABEL_67;
    }
  }
  return v1;
}

uint64_t AudioUsoIntent.referenceMediaItem.getter()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v1;
  if (v1 == 1)
  {
    uint64_t v2 = closure #1 in AudioUsoIntent.referenceMediaItem.getter(v0);
    uint64_t v3 = v0[19];
    v0[19] = v2;
    swift_retain();
    outlined consume of UsoEntity_common_DateTime??(v3);
  }
  outlined copy of UsoEntity_common_DateTime??(v1);
  return v2;
}

uint64_t closure #1 in AudioUsoIntent.referenceMediaItem.getter(void *a1)
{
  if (a1[2]) {
    goto LABEL_2;
  }
  if (!a1[3] && !a1[4])
  {
    if (a1[5])
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
      goto LABEL_3;
    }
    if (!a1[6])
    {
      if (a1[7])
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
        goto LABEL_3;
      }
      if (a1[8] || a1[9]) {
        goto LABEL_15;
      }
      if (!a1[10])
      {
        if (a1[11])
        {
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
          goto LABEL_3;
        }
        if (a1[12]) {
          return 0;
        }
        if (a1[13] || a1[14])
        {
LABEL_15:
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
          goto LABEL_3;
        }
        if (!a1[15] && !a1[16]) {
          return 0;
        }
      }
    }
LABEL_2:
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter();
LABEL_3:
    swift_release();
    return v2;
  }
  return 0;
}

uint64_t AudioUsoIntent.userEntities.getter()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v1;
  if (v1 == 1)
  {
    uint64_t v2 = closure #1 in AudioUsoIntent.userEntities.getter(v0);
    uint64_t v3 = v0[20];
    v0[20] = v2;
    swift_bridgeObjectRetain();
    outlined consume of [CodeGenListEntry<UsoEntity_common_UserEntity>]??(v3);
  }
  outlined copy of [CodeGenListEntry<UsoEntity_common_UserEntity>]??(v1);
  return v2;
}

uint64_t closure #1 in AudioUsoIntent.userEntities.getter(void *a1)
{
  if (!a1[2] && !a1[3] && !a1[4])
  {
    if (a1[5])
    {
      swift_retain();
      uint64_t v1 = dispatch thunk of Uso_VerbTemplate_ReferenceTarget.userEntities.getter();
      goto LABEL_5;
    }
    if (!a1[6])
    {
      if (a1[7])
      {
        swift_retain();
        uint64_t v1 = dispatch thunk of Uso_VerbTemplate_ReferenceSelect.userEntities.getter();
        goto LABEL_5;
      }
      if (a1[8] || a1[9])
      {
LABEL_14:
        swift_retain();
        uint64_t v1 = dispatch thunk of Uso_VerbTemplate_Reference.userEntities.getter();
        goto LABEL_5;
      }
      if (!a1[10])
      {
        if (a1[11] || a1[12])
        {
          swift_retain();
          uint64_t v1 = dispatch thunk of Uso_VerbTemplate_NoVerb.userEntities.getter();
          goto LABEL_5;
        }
        if (a1[13] || a1[14]) {
          goto LABEL_14;
        }
        if (!a1[15] && !a1[16]) {
          return 0;
        }
      }
    }
  }
  swift_retain();
  uint64_t v1 = dispatch thunk of Uso_VerbTemplate_ReferenceControl.userEntities.getter();
LABEL_5:
  uint64_t v2 = v1;
  swift_release();
  return v2;
}

uint64_t AudioUsoIntent.targetMediaItem.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = v2;
  if (v2 == 1)
  {
    uint64_t v3 = *(void *)(v1 + 40);
    if (v3)
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
      swift_release();
      uint64_t v3 = v6;
      uint64_t v4 = *(void *)(v1 + 168);
    }
    else
    {
      uint64_t v4 = 1;
    }
    *(void *)(v1 + 168) = v3;
    swift_retain();
    outlined consume of UsoEntity_common_DateTime??(v4);
  }
  outlined copy of UsoEntity_common_DateTime??(v2);
  return v3;
}

uint64_t AudioUsoIntent.rootItems.getter()
{
  if (*(void *)(v0 + 176))
  {
    uint64_t v1 = *(void *)(v0 + 176);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.rootItems.getter();
    *(void *)(v0 + 176) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.rootItems.getter()
{
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (AudioUsoIntent.referenceMediaItem.getter())
  {
    uint64_t v0 = swift_retain();
    MEMORY[0x1CB77CD90](v0);
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
  }
  if (AudioUsoIntent.targetMediaItem.getter())
  {
    uint64_t v1 = swift_retain();
    MEMORY[0x1CB77CD90](v1);
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
  }
  return v3;
}

uint64_t AudioUsoIntent.mediaType.getter()
{
  uint64_t result = *(unsigned __int8 *)(v0 + 184);
  if (result == 29)
  {
    uint64_t result = closure #1 in AudioUsoIntent.mediaType.getter();
    *(unsigned char *)(v0 + 184) = result;
  }
  return result;
}

uint64_t closure #1 in AudioUsoIntent.mediaType.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v10 - v4;
  if (AudioUsoIntent.referenceMediaItem.getter())
  {
    if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
    {
      dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
      swift_release();
    }
    else
    {
      uint64_t v6 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
    }
LABEL_11:
    uint64_t v7 = specialized static CommonAudio.MediaType.from(_:)((uint64_t)v5);
    swift_release();
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    return v7;
  }
  if (AudioUsoIntent.targetMediaItem.getter())
  {
    if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
    {
      dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
      swift_release();
    }
    else
    {
      uint64_t v8 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
    }
    uint64_t v5 = v3;
    goto LABEL_11;
  }
  return 28;
}

uint64_t AudioUsoIntent.targetMediaType.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 185);
  if (v5 == 29)
  {
    if (AudioUsoIntent.targetMediaItem.getter())
    {
      if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
      {
        dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
        swift_release();
      }
      else
      {
        uint64_t v6 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
      }
      uint64_t v5 = specialized static CommonAudio.MediaType.from(_:)((uint64_t)v4);
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    }
    else
    {
      uint64_t v5 = 28;
    }
    *(unsigned char *)(v1 + 185) = v5;
  }
  return v5;
}

uint64_t AudioUsoIntent.entities.getter()
{
  if (*(void *)(v0 + 192))
  {
    uint64_t v1 = *(void *)(v0 + 192);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.entities.getter();
    *(void *)(v0 + 192) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.entities.getter()
{
  unint64_t v0 = AudioUsoIntent.rootItems.getter();
  unint64_t v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E4FBC860], (uint64_t (*)(uint64_t))closure #1 in closure #1 in AudioUsoIntent.entities.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v4, v1);
      }
      else {
        swift_retain();
      }
      uint64_t v7 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
      uint64_t v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        }
        unint64_t v11 = v5[2];
        unint64_t v10 = v5[3];
        if (v11 >= v10 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
        }
        v5[2] = v11 + 1;
        uint64_t v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.entities.getter()
{
  uint64_t v0 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  if (v1)
  {
    uint64_t v2 = v0;
    unint64_t v3 = v1;
    swift_bridgeObjectRelease();
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v5 = v4 != 0;
  }
  else
  {
    BOOL v5 = 0;
  }
  uint64_t v6 = *(void *)(dispatch thunk of CodeGenBase.usoIdentifiers.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if (v5 && !v6)
  {
    if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
    {
      swift_release();
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t AudioUsoIntent.resolvedReference.getter()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = v1;
  if (v1 == 1)
  {
    uint64_t v2 = closure #1 in AudioUsoIntent.resolvedReference.getter();
    uint64_t v3 = *(void *)(v0 + 200);
    *(void *)(v0 + 200) = v2;
    swift_retain();
    outlined consume of UsoEntity_common_DateTime??(v3);
  }
  outlined copy of UsoEntity_common_DateTime??(v1);
  return v2;
}

uint64_t closure #1 in AudioUsoIntent.resolvedReference.getter()
{
  unint64_t v0 = AudioUsoIntent.rootItems.getter();
  unint64_t v1 = v0;
  if (v0 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      uint64_t v3 = 4;
      uint64_t v4 = MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v5 = v3 - 4;
        if ((v1 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = MEMORY[0x1CB77D510](v3 - 4, v1);
          uint64_t v7 = v3 - 3;
          if (__OFADD__(v5, 1)) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v1 + 8 * v3);
          swift_retain();
          uint64_t v7 = v3 - 3;
          if (__OFADD__(v5, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        uint64_t v8 = specialized UsoEntity_common_MediaItem.findFirst(options:with:)(v4, v6);
        swift_release();
        if (v8) {
          goto LABEL_12;
        }
        ++v3;
      }
      while (v7 != v2);
    }
  }
  uint64_t v8 = 0;
LABEL_12:
  swift_bridgeObjectRelease_n();
  return v8;
}

uint64_t AudioUsoIntent.disambiguationEntities.getter()
{
  if (*(void *)(v0 + 208))
  {
    uint64_t v1 = *(void *)(v0 + 208);
  }
  else
  {
    unint64_t v2 = AudioUsoIntent.rootItems.getter();
    uint64_t v1 = specialized Sequence.flatMap<A>(_:)(v2, MEMORY[0x1E4FBC860], (uint64_t (*)(uint64_t))closure #1 in closure #1 in AudioUsoIntent.disambiguationEntities.getter, 0);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 208) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

BOOL closure #1 in closure #1 in AudioUsoIntent.disambiguationEntities.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v29 - v5;
  uint64_t v7 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  if (v8)
  {
    uint64_t v9 = v7;
    unint64_t v10 = v8;
    swift_bridgeObjectRelease();
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0) {
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v12 = v11 == 0;
  }
  else
  {
    BOOL v12 = 1;
  }
  uint64_t v13 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  BOOL v30 = v12;
  uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
  uint64_t v16 = v1 + 16;
  BOOL v15 = v17;
  unint64_t v18 = v13 + ((*(unsigned __int8 *)(v16 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 64));
  uint64_t v19 = (void (**)(char *, uint64_t))(v16 - 8);
  uint64_t v31 = *(void *)(v16 + 56);
  v29[1] = v13;
  swift_bridgeObjectRetain();
  while (1)
  {
    v15(v6, v18, v0);
    uint64_t v22 = UsoIdentifier.namespace.getter();
    if (!v23)
    {
      v15(v4, (unint64_t)v6, v0);
LABEL_19:
      char v26 = *v19;
      (*v19)(v4, v0);
      v26(v6, v0);
      goto LABEL_9;
    }
    if (v22 == 1701605234 && v23 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      v15(v4, (unint64_t)v6, v0);
    }
    else
    {
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v15(v4, (unint64_t)v6, v0);
      if ((v24 & 1) == 0) {
        goto LABEL_19;
      }
    }
    if (UsoIdentifier.value.getter() == 0x6769626D61736964 && v25 == 0xEE006E6F69746175) {
      break;
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = *v19;
    (*v19)(v4, v0);
    v21(v6, v0);
    if (v20) {
      goto LABEL_22;
    }
LABEL_9:
    v18 += v31;
    if (!--v14)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  BOOL v27 = *v19;
  (*v19)(v4, v0);
  v27(v6, v0);
LABEL_22:
  swift_bridgeObjectRelease_n();
  return !v30;
}

uint64_t AudioUsoIntent.apps.getter()
{
  if (*(void *)(v0 + 216))
  {
    uint64_t v1 = *(void *)(v0 + 216);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.apps.getter(v0);
    *(void *)(v0 + 216) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.apps.getter(uint64_t a1)
{
  if (*(void *)(a1 + 96))
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v1 = swift_allocObject();
      *(_OWORD *)(v1 + 16) = xmmword_1C9195B30;
      *(void *)(v1 + 32) = v10;
      uint64_t v11 = v1;
      specialized Array._endMutation()();
      return v11;
    }
  }
  unint64_t v3 = AudioUsoIntent.rootItems.getter();
  unint64_t v4 = v3;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  if (!(v3 >> 62))
  {
    uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_6;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v2 = MEMORY[0x1E4FBC860];
LABEL_19:
    swift_bridgeObjectRelease();
    return v2;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v5 = result;
  if (!result) {
    goto LABEL_18;
  }
LABEL_6:
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](i, v4);
      }
      else {
        swift_retain();
      }
      uint64_t v8 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
      uint64_t v9 = swift_release();
      if (v8)
      {
        MEMORY[0x1CB77CD90](v9);
        if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v2 = v12;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t AudioUsoIntent.artists.getter()
{
  if (*(void *)(v0 + 224))
  {
    uint64_t v1 = *(void *)(v0 + 224);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.artists.getter();
    *(void *)(v0 + 224) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.artists.getter()
{
  unint64_t v0 = AudioUsoIntent.rootItems.getter();
  unint64_t v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E4FBC860], closure #1 in closure #1 in AudioUsoIntent.artists.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v4, v1);
      }
      else {
        swift_retain();
      }
      uint64_t v7 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
      uint64_t v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        }
        unint64_t v11 = v5[2];
        unint64_t v10 = v5[3];
        if (v11 >= v10 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
        }
        v5[2] = v11 + 1;
        uint64_t v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.artists.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  v56[0] = (char *)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v60);
  uint64_t v63 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)v56 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v64 = (char *)v56 - v13;
  uint64_t v14 = type metadata accessor for UsoIdentifier();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  unint64_t v18 = (char *)v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  char v20 = (char *)v56 - v19;
  uint64_t v66 = a1;
  uint64_t v21 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  BOOL v61 = v12;
  uint64_t v62 = v3;
  BOOL v58 = v9;
  if (v22)
  {
    uint64_t v23 = v21;
    unint64_t v24 = v22;
    swift_bridgeObjectRelease();
    uint64_t v25 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) == 0) {
      uint64_t v25 = v23 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v26 = v25 == 0;
  }
  else
  {
    BOOL v26 = 1;
  }
  uint64_t v27 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v28 = *(void *)(v27 + 16);
  if (!v28)
  {
    swift_bridgeObjectRelease();
    uint64_t v42 = v62;
    uint64_t v43 = (uint64_t)v63;
    uint64_t v44 = (uint64_t)v64;
    if (!v26)
    {
LABEL_24:
      uint64_t v45 = 1;
      goto LABEL_29;
    }
    return 0;
  }
  BOOL v57 = v26;
  uint64_t v59 = v2;
  uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
  uint64_t v29 = v15 + 16;
  BOOL v30 = v31;
  unint64_t v32 = v27 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
  uint64_t v70 = *(void *)(v29 + 56);
  uint64_t v71 = (void (**)(char *, uint64_t))(v29 - 8);
  v56[1] = v27;
  swift_bridgeObjectRetain();
  BOOL v68 = "appPlaylistTitle";
  unint64_t v65 = 0x80000001C919BC40;
  uint64_t v69 = "appAudiobookTitle";
  unint64_t v67 = 0x80000001C919BC80;
  while (1)
  {
    v30(v20, v32, v14);
    uint64_t v36 = UsoIdentifier.namespace.getter();
    if (!v37)
    {
      v30(v18, (unint64_t)v20, v14);
      goto LABEL_16;
    }
    if (v36 == 0xD000000000000012 && v37 == v67) {
      break;
    }
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v30(v18, (unint64_t)v20, v14);
    if (v38) {
      goto LABEL_26;
    }
LABEL_16:
    uint64_t v39 = UsoIdentifier.namespace.getter();
    if (v40)
    {
      if (v39 == 0xD000000000000012 && v40 == v65)
      {
        BOOL v47 = *v71;
        (*v71)(v18, v14);
        swift_bridgeObjectRelease();
        v47(v20, v14);
        goto LABEL_27;
      }
      int v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
      BOOL v33 = v30;
      uint64_t v34 = v29;
      unint64_t v35 = *v71;
      (*v71)(v18, v14);
      swift_bridgeObjectRelease();
      v35(v20, v14);
      uint64_t v29 = v34;
      BOOL v30 = v33;
      if (v72) {
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v41 = *v71;
      (*v71)(v18, v14);
      v41(v20, v14);
    }
    v32 += v70;
    if (!--v28)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v2 = v59;
      uint64_t v42 = v62;
      uint64_t v43 = (uint64_t)v63;
      uint64_t v44 = (uint64_t)v64;
      if (v57) {
        return 0;
      }
      goto LABEL_24;
    }
  }
  swift_bridgeObjectRelease();
  v30(v18, (unint64_t)v20, v14);
LABEL_26:
  BOOL v46 = *v71;
  (*v71)(v18, v14);
  v46(v20, v14);
LABEL_27:
  swift_bridgeObjectRelease_n();
  uint64_t v2 = v59;
  uint64_t v42 = v62;
  uint64_t v43 = (uint64_t)v63;
  uint64_t v44 = (uint64_t)v64;
  if (v57) {
    return 0;
  }
  uint64_t v45 = 0;
LABEL_29:
  if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
  {
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v44, 1, 1, v2);
  }
  uint64_t v48 = (uint64_t)v61;
  (*(void (**)(char *, void, uint64_t))(v42 + 104))(v61, *MEMORY[0x1E4FA3598], v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v48, 0, 1, v2);
  uint64_t v49 = v43 + *(int *)(v60 + 48);
  outlined init with copy of MediaUserStateCenter?(v44, v43, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v48, v49, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  Swift::String v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  if (v50(v43, 1, v2) != 1)
  {
    uint64_t v51 = (uint64_t)v58;
    outlined init with copy of MediaUserStateCenter?(v43, (uint64_t)v58, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v50(v49, 1, v2) != 1)
    {
      uint64_t v52 = v56[0];
      (*(void (**)(void, uint64_t, uint64_t))(v42 + 32))(v56[0], v49, v2);
      _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
      os_log_t v54 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v54(v52, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v61, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v54(v51, v2);
      outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v53) {
        return v45;
      }
      return 0;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v61, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v51, v2);
LABEL_37:
    outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?(v48, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v50(v49, 1, v2) != 1) {
    goto LABEL_37;
  }
  outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v45;
}

uint64_t AudioUsoIntent.albums.getter()
{
  if (*(void *)(v0 + 232))
  {
    uint64_t v1 = *(void *)(v0 + 232);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.albums.getter();
    *(void *)(v0 + 232) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.albums.getter()
{
  unint64_t v0 = AudioUsoIntent.rootItems.getter();
  unint64_t v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E4FBC860], closure #1 in closure #1 in AudioUsoIntent.albums.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v4, v1);
      }
      else {
        swift_retain();
      }
      uint64_t v7 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
      uint64_t v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        }
        unint64_t v11 = v5[2];
        unint64_t v10 = v5[3];
        if (v11 >= v10 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
        }
        v5[2] = v11 + 1;
        uint64_t v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.albums.getter(uint64_t a1)
{
  return closure #1 in closure #1 in AudioUsoIntent.albums.getter(a1, MEMORY[0x1E4FA3570]);
}

void *AudioUsoIntent.appPlaylistTitles.getter()
{
  if (*(void *)(v0 + 240))
  {
    unint64_t v1 = *(void **)(v0 + 240);
  }
  else
  {
    unint64_t v1 = closure #1 in AudioUsoIntent.appPlaylistTitles.getter();
    *(void *)(v0 + 240) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void *closure #1 in AudioUsoIntent.appPlaylistTitles.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v69 = *(void *)(v0 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1F4188790](v1);
  unint64_t v65 = (char *)&v59 - v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v59 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  unint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v59 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v71 = (char *)&v59 - v18;
  unint64_t v19 = AudioUsoIntent.rootItems.getter();
  unint64_t v20 = specialized Sequence.flatMap<A>(_:)(v19, MEMORY[0x1E4FBC860], closure #1 in closure #1 in AudioUsoIntent.appPlaylistTitles.getter, 0);
  swift_bridgeObjectRelease();
  if (v20 >> 62)
  {
LABEL_52:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  unint64_t v61 = v20;
  if (v21)
  {
    unint64_t v64 = v20 & 0xC000000000000001;
    unint64_t v59 = v20 + 32;
    uint64_t v84 = v69 + 16;
    unint64_t v20 = v69 + 8;
    int v72 = (void (**)(char *, char *, uint64_t))(v69 + 32);
    BOOL v74 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56);
    uint64_t v75 = (unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
    uint64_t v60 = (void *)MEMORY[0x1E4FBC860];
    unsigned int v83 = "notebookFolderTitle";
    unint64_t v81 = 0x80000001C919BC20;
    uint64_t v82 = "resolved_reference_source";
    unint64_t v80 = 0x80000001C919C550;
    uint64_t v63 = v11;
    unint64_t v22 = 0;
    BOOL v68 = v14;
    uint64_t v70 = v17;
    uint64_t v62 = v21;
    while (1)
    {
      if (v64)
      {
        uint64_t v24 = MEMORY[0x1CB77D510](v22, v61);
        BOOL v25 = __OFADD__(v22, 1);
        unint64_t v11 = v22 + 1;
        if (v25) {
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v24 = *(void *)(v59 + 8 * (void)v22);
        swift_retain();
        BOOL v25 = __OFADD__(v22, 1);
        unint64_t v11 = v22 + 1;
        if (v25)
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
      }
      uint64_t v76 = v11;
      uint64_t v26 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      uint64_t v27 = *(void *)(v26 + 16);
      uint64_t v78 = v26;
      uint64_t v79 = v24;
      if (!v27)
      {
LABEL_22:
        uint64_t v34 = *v74;
        uint64_t v35 = (uint64_t)v71;
        (*v74)(v71, 1, 1, v0);
        goto LABEL_24;
      }
      unint64_t v28 = v26 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
      uint64_t v29 = *(void *)(v69 + 72);
      BOOL v30 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v30(v7, v28, v0);
        uint64_t v32 = UsoIdentifier.namespace.getter();
        if (!v33) {
          goto LABEL_16;
        }
        if (v32 == 0xD000000000000012 && v33 == v80) {
          break;
        }
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v31) {
          goto LABEL_23;
        }
LABEL_16:
        (*(void (**)(char *, uint64_t))v20)(v7, v0);
        v28 += v29;
        if (!--v27)
        {
          swift_bridgeObjectRelease();
          uint64_t v14 = v68;
          uint64_t v17 = v70;
          goto LABEL_22;
        }
      }
      swift_bridgeObjectRelease();
LABEL_23:
      swift_bridgeObjectRelease();
      uint64_t v35 = (uint64_t)v71;
      (*v72)(v71, v7, v0);
      uint64_t v34 = *v74;
      (*v74)((char *)v35, 0, 1, v0);
      uint64_t v14 = v68;
      uint64_t v17 = v70;
LABEL_24:
      swift_bridgeObjectRelease();
      outlined init with copy of MediaUserStateCenter?(v35, (uint64_t)v17, &demangling cache variable for type metadata for UsoIdentifier?);
      Swift::String v73 = *v75;
      if (v73(v17, 1, v0) == 1)
      {
        uint64_t v66 = 0;
        uint64_t v78 = 0;
      }
      else
      {
        uint64_t v36 = v65;
        (*v72)(v65, v17, v0);
        uint64_t v66 = UsoIdentifier.value.getter();
        uint64_t v78 = v37;
        char v38 = v36;
        uint64_t v35 = (uint64_t)v71;
        (*(void (**)(char *, uint64_t))v20)(v38, v0);
      }
      outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoIdentifier?);
      uint64_t v39 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      uint64_t v40 = *(void *)(v39 + 16);
      uint64_t v77 = v39;
      if (!v40)
      {
        uint64_t v47 = 1;
        uint64_t v48 = (uint64_t)v63;
        goto LABEL_39;
      }
      unint64_t v67 = v34;
      unint64_t v41 = v39 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
      uint64_t v42 = *(void *)(v69 + 72);
      uint64_t v43 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
      swift_bridgeObjectRetain();
      while (2)
      {
        v43(v3, v41, v0);
        uint64_t v45 = UsoIdentifier.namespace.getter();
        if (!v46) {
          goto LABEL_30;
        }
        if (v45 != 0xD000000000000010 || v46 != v81)
        {
          char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v44) {
            goto LABEL_37;
          }
LABEL_30:
          (*(void (**)(char *, uint64_t))v20)(v3, v0);
          v41 += v42;
          if (!--v40)
          {
            swift_bridgeObjectRelease();
            uint64_t v47 = 1;
            uint64_t v48 = (uint64_t)v63;
            uint64_t v14 = v68;
            goto LABEL_38;
          }
          continue;
        }
        break;
      }
      swift_bridgeObjectRelease();
LABEL_37:
      swift_bridgeObjectRelease();
      uint64_t v14 = v68;
      (*v72)(v68, v3, v0);
      uint64_t v47 = 0;
      uint64_t v48 = (uint64_t)v63;
LABEL_38:
      uint64_t v17 = v70;
      uint64_t v34 = v67;
LABEL_39:
      v34(v14, v47, 1, v0);
      swift_bridgeObjectRelease();
      outlined init with copy of MediaUserStateCenter?((uint64_t)v14, v48, &demangling cache variable for type metadata for UsoIdentifier?);
      if (v73((char *)v48, 1, v0) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoIdentifier?);
        unint64_t v22 = v76;
LABEL_6:
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v23 = v62;
        goto LABEL_7;
      }
      uint64_t v49 = v65;
      (*v72)(v65, (char *)v48, v0);
      uint64_t v50 = UsoIdentifier.value.getter();
      uint64_t v52 = v51;
      (*(void (**)(char *, uint64_t))v20)(v49, v0);
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoIdentifier?);
      if (!v78)
      {
        unint64_t v22 = v76;
        goto LABEL_6;
      }
      unint64_t v22 = v76;
      if (!v52) {
        goto LABEL_6;
      }
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
      }
      unint64_t v54 = v60[2];
      unint64_t v53 = v60[3];
      if (v54 >= v53 >> 1) {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v60);
      }
      uint64_t v55 = v60;
      v60[2] = v54 + 1;
      uint64_t v56 = &v55[4 * v54];
      v56[4] = v50;
      v56[5] = v52;
      uint64_t v57 = v78;
      v56[6] = v66;
      v56[7] = v57;
      uint64_t v17 = v70;
      uint64_t v23 = v62;
      unint64_t v22 = v76;
LABEL_7:
      if (v22 == (char *)v23) {
        goto LABEL_50;
      }
    }
  }
  uint64_t v60 = (void *)MEMORY[0x1E4FBC860];
LABEL_50:
  swift_bridgeObjectRelease_n();
  return v60;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.appPlaylistTitles.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v46 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v54);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v45 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v56 = (char *)&v45 - v13;
  uint64_t v14 = type metadata accessor for UsoIdentifier();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  uint64_t v55 = v12;
  if (v19)
  {
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    swift_bridgeObjectRelease();
    uint64_t v22 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000) == 0) {
      uint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v23 = v22 == 0;
  }
  else
  {
    BOOL v23 = 1;
  }
  uint64_t v53 = a1;
  uint64_t v24 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25)
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v55;
    uint64_t v36 = (uint64_t)v56;
    if (!v23)
    {
LABEL_18:
      uint64_t v37 = 0;
      goto LABEL_21;
    }
    return 0;
  }
  BOOL v48 = v23;
  uint64_t v49 = v3;
  uint64_t v50 = v6;
  uint64_t v51 = v2;
  unint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
  uint64_t v26 = v15 + 16;
  uint64_t v27 = v28;
  unint64_t v29 = v24 + ((*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64));
  BOOL v30 = (void (**)(char *, uint64_t))(v26 - 8);
  uint64_t v31 = *(void *)(v26 + 56);
  uint64_t v47 = v24;
  swift_bridgeObjectRetain();
  BOOL v58 = "notebookFolderTitle";
  unint64_t v57 = 0x80000001C919BC20;
  while (1)
  {
    v27(v17, v29, v14);
    uint64_t v33 = UsoIdentifier.namespace.getter();
    if (!v34)
    {
      (*v30)(v17, v14);
      goto LABEL_9;
    }
    if (v33 == 0xD000000000000010 && v34 == v57) {
      break;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*v30)(v17, v14);
    if (v32) {
      goto LABEL_19;
    }
LABEL_9:
    v29 += v31;
    if (!--v25)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v6 = v50;
      uint64_t v2 = v51;
      uint64_t v3 = v49;
      uint64_t v35 = (uint64_t)v55;
      uint64_t v36 = (uint64_t)v56;
      if (v48) {
        return 0;
      }
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  (*v30)(v17, v14);
LABEL_19:
  swift_bridgeObjectRelease_n();
  uint64_t v6 = v50;
  uint64_t v2 = v51;
  uint64_t v3 = v49;
  uint64_t v35 = (uint64_t)v55;
  uint64_t v36 = (uint64_t)v56;
  if (v48) {
    return 0;
  }
  uint64_t v37 = 1;
LABEL_21:
  if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
  {
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v36, 1, 1, v2);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v35, *MEMORY[0x1E4FA35E8], v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v35, 0, 1, v2);
  uint64_t v38 = (uint64_t)&v6[*(int *)(v54 + 48)];
  outlined init with copy of MediaUserStateCenter?(v36, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v35, v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v39((uint64_t)v6, 1, v2) != 1)
  {
    uint64_t v40 = v52;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, v52, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v39(v38, 1, v2) != 1)
    {
      unint64_t v41 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v46, v38, v2);
      _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v43 = *(void (**)(char *, uint64_t))(v3 + 8);
      v43(v41, v2);
      outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v43((char *)v40, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v42) {
        return v37;
      }
      return 0;
    }
    outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v40, v2);
LABEL_29:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v39(v38, 1, v2) != 1) {
    goto LABEL_29;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v37;
}

void *AudioUsoIntent.appShowTitles.getter()
{
  if (*(void *)(v0 + 248))
  {
    uint64_t v1 = *(void **)(v0 + 248);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.appShowTitles.getter();
    *(void *)(v0 + 248) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void *closure #1 in AudioUsoIntent.appShowTitles.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v69 = *(void *)(v0 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1F4188790](v1);
  unint64_t v65 = (char *)&v59 - v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v59 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v59 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v71 = (char *)&v59 - v18;
  unint64_t v19 = AudioUsoIntent.rootItems.getter();
  unint64_t v20 = specialized Sequence.flatMap<A>(_:)(v19, MEMORY[0x1E4FBC860], closure #1 in closure #1 in AudioUsoIntent.appShowTitles.getter, 0);
  swift_bridgeObjectRelease();
  if (v20 >> 62)
  {
LABEL_49:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v61 = v20;
    if (v21) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    unint64_t v61 = v20;
    if (v21)
    {
LABEL_3:
      unint64_t v64 = v20 & 0xC000000000000001;
      unint64_t v59 = v20 + 32;
      uint64_t v80 = v69 + 16;
      unint64_t v20 = v69 + 8;
      int v72 = (void (**)(char *, char *, uint64_t))(v69 + 32);
      BOOL v74 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56);
      uint64_t v75 = (unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
      uint64_t v60 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v62 = v21;
      uint64_t v63 = v11;
      uint64_t v22 = 0;
      BOOL v68 = v14;
      uint64_t v70 = v17;
      while (1)
      {
        if (v64)
        {
          uint64_t v24 = MEMORY[0x1CB77D510](v22, v61);
          BOOL v25 = __OFADD__(v22, 1);
          uint64_t v11 = v22 + 1;
          if (v25) {
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v24 = *(void *)(v59 + 8 * (void)v22);
          swift_retain();
          BOOL v25 = __OFADD__(v22, 1);
          uint64_t v11 = v22 + 1;
          if (v25)
          {
LABEL_48:
            __break(1u);
            goto LABEL_49;
          }
        }
        uint64_t v76 = v11;
        uint64_t v26 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        uint64_t v27 = *(void *)(v26 + 16);
        uint64_t v78 = v26;
        uint64_t v79 = v24;
        if (!v27)
        {
LABEL_21:
          uint64_t v34 = *v74;
          uint64_t v35 = (uint64_t)v71;
          (*v74)(v71, 1, 1, v0);
          goto LABEL_23;
        }
        unint64_t v28 = v26 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
        uint64_t v29 = *(void *)(v69 + 72);
        BOOL v30 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
        swift_bridgeObjectRetain();
        while (1)
        {
          v30(v7, v28, v0);
          uint64_t v32 = UsoIdentifier.namespace.getter();
          if (!v33) {
            goto LABEL_15;
          }
          if (v32 == 0x54776F6853707061 && v33 == 0xEE006449656C7469) {
            break;
          }
          char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v31) {
            goto LABEL_22;
          }
LABEL_15:
          (*(void (**)(char *, uint64_t))v20)(v7, v0);
          v28 += v29;
          if (!--v27)
          {
            swift_bridgeObjectRelease();
            uint64_t v14 = v68;
            uint64_t v17 = v70;
            goto LABEL_21;
          }
        }
        swift_bridgeObjectRelease();
LABEL_22:
        swift_bridgeObjectRelease();
        uint64_t v35 = (uint64_t)v71;
        (*v72)(v71, v7, v0);
        uint64_t v34 = *v74;
        (*v74)((char *)v35, 0, 1, v0);
        uint64_t v14 = v68;
        uint64_t v17 = v70;
LABEL_23:
        swift_bridgeObjectRelease();
        outlined init with copy of MediaUserStateCenter?(v35, (uint64_t)v17, &demangling cache variable for type metadata for UsoIdentifier?);
        Swift::String v73 = *v75;
        if (v73(v17, 1, v0) == 1)
        {
          uint64_t v66 = 0;
          uint64_t v78 = 0;
        }
        else
        {
          uint64_t v36 = v65;
          (*v72)(v65, v17, v0);
          uint64_t v66 = UsoIdentifier.value.getter();
          uint64_t v78 = v37;
          uint64_t v38 = v36;
          uint64_t v35 = (uint64_t)v71;
          (*(void (**)(char *, uint64_t))v20)(v38, v0);
        }
        outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoIdentifier?);
        uint64_t v39 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        uint64_t v40 = *(void *)(v39 + 16);
        uint64_t v77 = v39;
        if (!v40)
        {
          uint64_t v47 = 1;
          uint64_t v48 = (uint64_t)v63;
          goto LABEL_38;
        }
        unint64_t v67 = v34;
        unint64_t v41 = v39 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
        uint64_t v42 = *(void *)(v69 + 72);
        uint64_t v43 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
        swift_bridgeObjectRetain();
        while (2)
        {
          v43(v3, v41, v0);
          uint64_t v45 = UsoIdentifier.namespace.getter();
          if (!v46) {
            goto LABEL_29;
          }
          if (v45 != 0x54776F6853707061 || v46 != 0xEC000000656C7469)
          {
            char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v44) {
              goto LABEL_36;
            }
LABEL_29:
            (*(void (**)(char *, uint64_t))v20)(v3, v0);
            v41 += v42;
            if (!--v40)
            {
              swift_bridgeObjectRelease();
              uint64_t v47 = 1;
              uint64_t v48 = (uint64_t)v63;
              uint64_t v14 = v68;
              goto LABEL_37;
            }
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease();
LABEL_36:
        swift_bridgeObjectRelease();
        uint64_t v14 = v68;
        (*v72)(v68, v3, v0);
        uint64_t v47 = 0;
        uint64_t v48 = (uint64_t)v63;
LABEL_37:
        uint64_t v17 = v70;
        uint64_t v34 = v67;
LABEL_38:
        v34(v14, v47, 1, v0);
        swift_bridgeObjectRelease();
        outlined init with copy of MediaUserStateCenter?((uint64_t)v14, v48, &demangling cache variable for type metadata for UsoIdentifier?);
        if (v73((char *)v48, 1, v0) == 1)
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoIdentifier?);
          uint64_t v22 = v76;
LABEL_5:
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v23 = v62;
          goto LABEL_6;
        }
        uint64_t v49 = v65;
        (*v72)(v65, (char *)v48, v0);
        uint64_t v50 = UsoIdentifier.value.getter();
        uint64_t v52 = v51;
        (*(void (**)(char *, uint64_t))v20)(v49, v0);
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoIdentifier?);
        if (!v78)
        {
          uint64_t v22 = v76;
          goto LABEL_5;
        }
        uint64_t v22 = v76;
        if (!v52) {
          goto LABEL_5;
        }
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
        }
        unint64_t v54 = v60[2];
        unint64_t v53 = v60[3];
        if (v54 >= v53 >> 1) {
          uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v60);
        }
        uint64_t v55 = v60;
        v60[2] = v54 + 1;
        uint64_t v56 = &v55[4 * v54];
        v56[4] = v50;
        v56[5] = v52;
        uint64_t v57 = v78;
        v56[6] = v66;
        v56[7] = v57;
        uint64_t v17 = v70;
        uint64_t v23 = v62;
        uint64_t v22 = v76;
LABEL_6:
        if (v22 == (char *)v23) {
          goto LABEL_51;
        }
      }
    }
  }
  uint64_t v60 = (void *)MEMORY[0x1E4FBC860];
LABEL_51:
  swift_bridgeObjectRelease_n();
  return v60;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.appShowTitles.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v46 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v54);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v45 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v56 = (char *)&v45 - v13;
  uint64_t v14 = type metadata accessor for UsoIdentifier();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  uint64_t v55 = v12;
  if (v19)
  {
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    swift_bridgeObjectRelease();
    uint64_t v22 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000) == 0) {
      uint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v23 = v22 == 0;
  }
  else
  {
    BOOL v23 = 1;
  }
  uint64_t v53 = a1;
  uint64_t v24 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25)
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v55;
    uint64_t v36 = (uint64_t)v56;
    if (!v23)
    {
LABEL_18:
      uint64_t v37 = 0;
      goto LABEL_21;
    }
    return 0;
  }
  BOOL v48 = v23;
  uint64_t v49 = v3;
  uint64_t v50 = v6;
  uint64_t v51 = v2;
  unint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
  uint64_t v26 = v15 + 16;
  uint64_t v27 = v28;
  unint64_t v29 = v24 + ((*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64));
  BOOL v30 = (void (**)(char *, uint64_t))(v26 - 8);
  uint64_t v31 = *(void *)(v26 + 56);
  uint64_t v47 = v24;
  swift_bridgeObjectRetain();
  while (1)
  {
    v27(v17, v29, v14);
    uint64_t v33 = UsoIdentifier.namespace.getter();
    if (!v34)
    {
      (*v30)(v17, v14);
      goto LABEL_9;
    }
    if (v33 == 0x54776F6853707061 && v34 == 0xEC000000656C7469) {
      break;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*v30)(v17, v14);
    if (v32) {
      goto LABEL_19;
    }
LABEL_9:
    v29 += v31;
    if (!--v25)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v6 = v50;
      uint64_t v2 = v51;
      uint64_t v3 = v49;
      uint64_t v35 = (uint64_t)v55;
      uint64_t v36 = (uint64_t)v56;
      if (v48) {
        return 0;
      }
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  (*v30)(v17, v14);
LABEL_19:
  swift_bridgeObjectRelease_n();
  uint64_t v6 = v50;
  uint64_t v2 = v51;
  uint64_t v3 = v49;
  uint64_t v35 = (uint64_t)v55;
  uint64_t v36 = (uint64_t)v56;
  if (v48) {
    return 0;
  }
  uint64_t v37 = 1;
LABEL_21:
  if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
  {
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v36, 1, 1, v2);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v35, *MEMORY[0x1E4FA3560], v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v35, 0, 1, v2);
  uint64_t v38 = (uint64_t)&v6[*(int *)(v54 + 48)];
  outlined init with copy of MediaUserStateCenter?(v36, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v35, v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v39((uint64_t)v6, 1, v2) != 1)
  {
    uint64_t v40 = v52;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, v52, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v39(v38, 1, v2) != 1)
    {
      unint64_t v41 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v46, v38, v2);
      _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v43 = *(void (**)(char *, uint64_t))(v3 + 8);
      v43(v41, v2);
      outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v43((char *)v40, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v42) {
        return v37;
      }
      return 0;
    }
    outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v40, v2);
LABEL_29:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v39(v38, 1, v2) != 1) {
    goto LABEL_29;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v37;
}

void *AudioUsoIntent.appAudiobookTitles.getter()
{
  if (*(void *)(v0 + 256))
  {
    uint64_t v1 = *(void **)(v0 + 256);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.appAudiobookTitles.getter();
    *(void *)(v0 + 256) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void *closure #1 in AudioUsoIntent.appAudiobookTitles.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v69 = *(void *)(v0 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1F4188790](v1);
  unint64_t v65 = (char *)&v59 - v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v59 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v59 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v71 = (char *)&v59 - v18;
  unint64_t v19 = AudioUsoIntent.rootItems.getter();
  unint64_t v20 = specialized Sequence.flatMap<A>(_:)(v19, MEMORY[0x1E4FBC860], closure #1 in closure #1 in AudioUsoIntent.appAudiobookTitles.getter, 0);
  swift_bridgeObjectRelease();
  if (v20 >> 62)
  {
LABEL_52:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  unint64_t v61 = v20;
  if (v21)
  {
    unint64_t v64 = v20 & 0xC000000000000001;
    unint64_t v59 = v20 + 32;
    uint64_t v84 = v69 + 16;
    unint64_t v20 = v69 + 8;
    int v72 = (void (**)(char *, char *, uint64_t))(v69 + 32);
    BOOL v74 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56);
    uint64_t v75 = (unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
    uint64_t v60 = (void *)MEMORY[0x1E4FBC860];
    unsigned int v83 = "appMusicArtistName";
    unint64_t v81 = 0x80000001C919BC60;
    uint64_t v82 = "Id";
    unint64_t v80 = 0x80000001C919C580;
    uint64_t v63 = v11;
    uint64_t v22 = 0;
    BOOL v68 = v14;
    uint64_t v70 = v17;
    uint64_t v62 = v21;
    while (1)
    {
      if (v64)
      {
        uint64_t v24 = MEMORY[0x1CB77D510](v22, v61);
        BOOL v25 = __OFADD__(v22, 1);
        uint64_t v11 = v22 + 1;
        if (v25) {
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v24 = *(void *)(v59 + 8 * (void)v22);
        swift_retain();
        BOOL v25 = __OFADD__(v22, 1);
        uint64_t v11 = v22 + 1;
        if (v25)
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
      }
      uint64_t v76 = v11;
      uint64_t v26 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      uint64_t v27 = *(void *)(v26 + 16);
      uint64_t v78 = v26;
      uint64_t v79 = v24;
      if (!v27)
      {
LABEL_22:
        uint64_t v34 = *v74;
        uint64_t v35 = (uint64_t)v71;
        (*v74)(v71, 1, 1, v0);
        goto LABEL_24;
      }
      unint64_t v28 = v26 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
      uint64_t v29 = *(void *)(v69 + 72);
      BOOL v30 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v30(v7, v28, v0);
        uint64_t v32 = UsoIdentifier.namespace.getter();
        if (!v33) {
          goto LABEL_16;
        }
        if (v32 == 0xD000000000000013 && v33 == v80) {
          break;
        }
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v31) {
          goto LABEL_23;
        }
LABEL_16:
        (*(void (**)(char *, uint64_t))v20)(v7, v0);
        v28 += v29;
        if (!--v27)
        {
          swift_bridgeObjectRelease();
          uint64_t v14 = v68;
          uint64_t v17 = v70;
          goto LABEL_22;
        }
      }
      swift_bridgeObjectRelease();
LABEL_23:
      swift_bridgeObjectRelease();
      uint64_t v35 = (uint64_t)v71;
      (*v72)(v71, v7, v0);
      uint64_t v34 = *v74;
      (*v74)((char *)v35, 0, 1, v0);
      uint64_t v14 = v68;
      uint64_t v17 = v70;
LABEL_24:
      swift_bridgeObjectRelease();
      outlined init with copy of MediaUserStateCenter?(v35, (uint64_t)v17, &demangling cache variable for type metadata for UsoIdentifier?);
      Swift::String v73 = *v75;
      if (v73(v17, 1, v0) == 1)
      {
        uint64_t v66 = 0;
        uint64_t v78 = 0;
      }
      else
      {
        uint64_t v36 = v65;
        (*v72)(v65, v17, v0);
        uint64_t v66 = UsoIdentifier.value.getter();
        uint64_t v78 = v37;
        uint64_t v38 = v36;
        uint64_t v35 = (uint64_t)v71;
        (*(void (**)(char *, uint64_t))v20)(v38, v0);
      }
      outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoIdentifier?);
      uint64_t v39 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      uint64_t v40 = *(void *)(v39 + 16);
      uint64_t v77 = v39;
      if (!v40)
      {
        uint64_t v47 = 1;
        uint64_t v48 = (uint64_t)v63;
        goto LABEL_39;
      }
      unint64_t v67 = v34;
      unint64_t v41 = v39 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
      uint64_t v42 = *(void *)(v69 + 72);
      uint64_t v43 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
      swift_bridgeObjectRetain();
      while (2)
      {
        v43(v3, v41, v0);
        uint64_t v45 = UsoIdentifier.namespace.getter();
        if (!v46) {
          goto LABEL_30;
        }
        if (v45 != 0xD000000000000011 || v46 != v81)
        {
          char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v44) {
            goto LABEL_37;
          }
LABEL_30:
          (*(void (**)(char *, uint64_t))v20)(v3, v0);
          v41 += v42;
          if (!--v40)
          {
            swift_bridgeObjectRelease();
            uint64_t v47 = 1;
            uint64_t v48 = (uint64_t)v63;
            uint64_t v14 = v68;
            goto LABEL_38;
          }
          continue;
        }
        break;
      }
      swift_bridgeObjectRelease();
LABEL_37:
      swift_bridgeObjectRelease();
      uint64_t v14 = v68;
      (*v72)(v68, v3, v0);
      uint64_t v47 = 0;
      uint64_t v48 = (uint64_t)v63;
LABEL_38:
      uint64_t v17 = v70;
      uint64_t v34 = v67;
LABEL_39:
      v34(v14, v47, 1, v0);
      swift_bridgeObjectRelease();
      outlined init with copy of MediaUserStateCenter?((uint64_t)v14, v48, &demangling cache variable for type metadata for UsoIdentifier?);
      if (v73((char *)v48, 1, v0) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoIdentifier?);
        uint64_t v22 = v76;
LABEL_6:
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v23 = v62;
        goto LABEL_7;
      }
      uint64_t v49 = v65;
      (*v72)(v65, (char *)v48, v0);
      uint64_t v50 = UsoIdentifier.value.getter();
      uint64_t v52 = v51;
      (*(void (**)(char *, uint64_t))v20)(v49, v0);
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoIdentifier?);
      if (!v78)
      {
        uint64_t v22 = v76;
        goto LABEL_6;
      }
      uint64_t v22 = v76;
      if (!v52) {
        goto LABEL_6;
      }
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
      }
      unint64_t v54 = v60[2];
      unint64_t v53 = v60[3];
      if (v54 >= v53 >> 1) {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v60);
      }
      uint64_t v55 = v60;
      v60[2] = v54 + 1;
      uint64_t v56 = &v55[4 * v54];
      v56[4] = v50;
      v56[5] = v52;
      uint64_t v57 = v78;
      v56[6] = v66;
      v56[7] = v57;
      uint64_t v17 = v70;
      uint64_t v23 = v62;
      uint64_t v22 = v76;
LABEL_7:
      if (v22 == (char *)v23) {
        goto LABEL_50;
      }
    }
  }
  uint64_t v60 = (void *)MEMORY[0x1E4FBC860];
LABEL_50:
  swift_bridgeObjectRelease_n();
  return v60;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.appAudiobookTitles.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v46 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v54);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v45 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v56 = (char *)&v45 - v13;
  uint64_t v14 = type metadata accessor for UsoIdentifier();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  uint64_t v55 = v12;
  if (v19)
  {
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    swift_bridgeObjectRelease();
    uint64_t v22 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000) == 0) {
      uint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v23 = v22 == 0;
  }
  else
  {
    BOOL v23 = 1;
  }
  uint64_t v53 = a1;
  uint64_t v24 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25)
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v55;
    uint64_t v36 = (uint64_t)v56;
    if (!v23)
    {
LABEL_18:
      uint64_t v37 = 0;
      goto LABEL_21;
    }
    return 0;
  }
  BOOL v48 = v23;
  uint64_t v49 = v3;
  uint64_t v50 = v6;
  uint64_t v51 = v2;
  unint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
  uint64_t v26 = v15 + 16;
  uint64_t v27 = v28;
  unint64_t v29 = v24 + ((*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64));
  BOOL v30 = (void (**)(char *, uint64_t))(v26 - 8);
  uint64_t v31 = *(void *)(v26 + 56);
  uint64_t v47 = v24;
  swift_bridgeObjectRetain();
  BOOL v58 = "appMusicArtistName";
  unint64_t v57 = 0x80000001C919BC60;
  while (1)
  {
    v27(v17, v29, v14);
    uint64_t v33 = UsoIdentifier.namespace.getter();
    if (!v34)
    {
      (*v30)(v17, v14);
      goto LABEL_9;
    }
    if (v33 == 0xD000000000000011 && v34 == v57) {
      break;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*v30)(v17, v14);
    if (v32) {
      goto LABEL_19;
    }
LABEL_9:
    v29 += v31;
    if (!--v25)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v6 = v50;
      uint64_t v2 = v51;
      uint64_t v3 = v49;
      uint64_t v35 = (uint64_t)v55;
      uint64_t v36 = (uint64_t)v56;
      if (v48) {
        return 0;
      }
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  (*v30)(v17, v14);
LABEL_19:
  swift_bridgeObjectRelease_n();
  uint64_t v6 = v50;
  uint64_t v2 = v51;
  uint64_t v3 = v49;
  uint64_t v35 = (uint64_t)v55;
  uint64_t v36 = (uint64_t)v56;
  if (v48) {
    return 0;
  }
  uint64_t v37 = 1;
LABEL_21:
  if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
  {
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v36, 1, 1, v2);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v35, *MEMORY[0x1E4FA3500], v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v35, 0, 1, v2);
  uint64_t v38 = (uint64_t)&v6[*(int *)(v54 + 48)];
  outlined init with copy of MediaUserStateCenter?(v36, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v35, v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v39((uint64_t)v6, 1, v2) != 1)
  {
    uint64_t v40 = v52;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, v52, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v39(v38, 1, v2) != 1)
    {
      unint64_t v41 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v46, v38, v2);
      _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v43 = *(void (**)(char *, uint64_t))(v3 + 8);
      v43(v41, v2);
      outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v43((char *)v40, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v42) {
        return v37;
      }
      return 0;
    }
    outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v40, v2);
LABEL_29:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v39(v38, 1, v2) != 1) {
    goto LABEL_29;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v37;
}

void *AudioUsoIntent.appMusicArtistNames.getter()
{
  if (*(void *)(v0 + 264))
  {
    uint64_t v1 = *(void **)(v0 + 264);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.appMusicArtistNames.getter();
    *(void *)(v0 + 264) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void *closure #1 in AudioUsoIntent.appMusicArtistNames.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v69 = *(void *)(v0 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1F4188790](v1);
  unint64_t v65 = (char *)&v59 - v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v59 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v59 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v71 = (char *)&v59 - v18;
  unint64_t v19 = AudioUsoIntent.rootItems.getter();
  unint64_t v20 = specialized Sequence.flatMap<A>(_:)(v19, MEMORY[0x1E4FBC860], closure #1 in closure #1 in AudioUsoIntent.appMusicArtistNames.getter, 0);
  swift_bridgeObjectRelease();
  if (v20 >> 62)
  {
LABEL_52:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  unint64_t v61 = v20;
  if (v21)
  {
    unint64_t v64 = v20 & 0xC000000000000001;
    unint64_t v59 = v20 + 32;
    uint64_t v84 = v69 + 16;
    unint64_t v20 = v69 + 8;
    int v72 = (void (**)(char *, char *, uint64_t))(v69 + 32);
    BOOL v74 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56);
    uint64_t v75 = (unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
    uint64_t v60 = (void *)MEMORY[0x1E4FBC860];
    unsigned int v83 = "appPlaylistTitle";
    unint64_t v81 = 0x80000001C919BC40;
    uint64_t v82 = "appAudiobookTitleId";
    unint64_t v80 = 0x80000001C919C5A0;
    uint64_t v63 = v11;
    uint64_t v22 = 0;
    BOOL v68 = v14;
    uint64_t v70 = v17;
    uint64_t v62 = v21;
    while (1)
    {
      if (v64)
      {
        uint64_t v24 = MEMORY[0x1CB77D510](v22, v61);
        BOOL v25 = __OFADD__(v22, 1);
        uint64_t v11 = v22 + 1;
        if (v25) {
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v24 = *(void *)(v59 + 8 * (void)v22);
        swift_retain();
        BOOL v25 = __OFADD__(v22, 1);
        uint64_t v11 = v22 + 1;
        if (v25)
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
      }
      uint64_t v76 = v11;
      uint64_t v26 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      uint64_t v27 = *(void *)(v26 + 16);
      uint64_t v78 = v26;
      uint64_t v79 = v24;
      if (!v27)
      {
LABEL_22:
        uint64_t v34 = *v74;
        uint64_t v35 = (uint64_t)v71;
        (*v74)(v71, 1, 1, v0);
        goto LABEL_24;
      }
      unint64_t v28 = v26 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
      uint64_t v29 = *(void *)(v69 + 72);
      BOOL v30 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v30(v7, v28, v0);
        uint64_t v32 = UsoIdentifier.namespace.getter();
        if (!v33) {
          goto LABEL_16;
        }
        if (v32 == 0xD000000000000014 && v33 == v80) {
          break;
        }
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v31) {
          goto LABEL_23;
        }
LABEL_16:
        (*(void (**)(char *, uint64_t))v20)(v7, v0);
        v28 += v29;
        if (!--v27)
        {
          swift_bridgeObjectRelease();
          uint64_t v14 = v68;
          uint64_t v17 = v70;
          goto LABEL_22;
        }
      }
      swift_bridgeObjectRelease();
LABEL_23:
      swift_bridgeObjectRelease();
      uint64_t v35 = (uint64_t)v71;
      (*v72)(v71, v7, v0);
      uint64_t v34 = *v74;
      (*v74)((char *)v35, 0, 1, v0);
      uint64_t v14 = v68;
      uint64_t v17 = v70;
LABEL_24:
      swift_bridgeObjectRelease();
      outlined init with copy of MediaUserStateCenter?(v35, (uint64_t)v17, &demangling cache variable for type metadata for UsoIdentifier?);
      Swift::String v73 = *v75;
      if (v73(v17, 1, v0) == 1)
      {
        uint64_t v66 = 0;
        uint64_t v78 = 0;
      }
      else
      {
        uint64_t v36 = v65;
        (*v72)(v65, v17, v0);
        uint64_t v66 = UsoIdentifier.value.getter();
        uint64_t v78 = v37;
        uint64_t v38 = v36;
        uint64_t v35 = (uint64_t)v71;
        (*(void (**)(char *, uint64_t))v20)(v38, v0);
      }
      outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoIdentifier?);
      uint64_t v39 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      uint64_t v40 = *(void *)(v39 + 16);
      uint64_t v77 = v39;
      if (!v40)
      {
        uint64_t v47 = 1;
        uint64_t v48 = (uint64_t)v63;
        goto LABEL_39;
      }
      unint64_t v67 = v34;
      unint64_t v41 = v39 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
      uint64_t v42 = *(void *)(v69 + 72);
      uint64_t v43 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
      swift_bridgeObjectRetain();
      while (2)
      {
        v43(v3, v41, v0);
        uint64_t v45 = UsoIdentifier.namespace.getter();
        if (!v46) {
          goto LABEL_30;
        }
        if (v45 != 0xD000000000000012 || v46 != v81)
        {
          char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v44) {
            goto LABEL_37;
          }
LABEL_30:
          (*(void (**)(char *, uint64_t))v20)(v3, v0);
          v41 += v42;
          if (!--v40)
          {
            swift_bridgeObjectRelease();
            uint64_t v47 = 1;
            uint64_t v48 = (uint64_t)v63;
            uint64_t v14 = v68;
            goto LABEL_38;
          }
          continue;
        }
        break;
      }
      swift_bridgeObjectRelease();
LABEL_37:
      swift_bridgeObjectRelease();
      uint64_t v14 = v68;
      (*v72)(v68, v3, v0);
      uint64_t v47 = 0;
      uint64_t v48 = (uint64_t)v63;
LABEL_38:
      uint64_t v17 = v70;
      uint64_t v34 = v67;
LABEL_39:
      v34(v14, v47, 1, v0);
      swift_bridgeObjectRelease();
      outlined init with copy of MediaUserStateCenter?((uint64_t)v14, v48, &demangling cache variable for type metadata for UsoIdentifier?);
      if (v73((char *)v48, 1, v0) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoIdentifier?);
        uint64_t v22 = v76;
LABEL_6:
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v23 = v62;
        goto LABEL_7;
      }
      uint64_t v49 = v65;
      (*v72)(v65, (char *)v48, v0);
      uint64_t v50 = UsoIdentifier.value.getter();
      uint64_t v52 = v51;
      (*(void (**)(char *, uint64_t))v20)(v49, v0);
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoIdentifier?);
      if (!v78)
      {
        uint64_t v22 = v76;
        goto LABEL_6;
      }
      uint64_t v22 = v76;
      if (!v52) {
        goto LABEL_6;
      }
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
      }
      unint64_t v54 = v60[2];
      unint64_t v53 = v60[3];
      if (v54 >= v53 >> 1) {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v60);
      }
      uint64_t v55 = v60;
      v60[2] = v54 + 1;
      uint64_t v56 = &v55[4 * v54];
      v56[4] = v50;
      v56[5] = v52;
      uint64_t v57 = v78;
      v56[6] = v66;
      v56[7] = v57;
      uint64_t v17 = v70;
      uint64_t v23 = v62;
      uint64_t v22 = v76;
LABEL_7:
      if (v22 == (char *)v23) {
        goto LABEL_50;
      }
    }
  }
  uint64_t v60 = (void *)MEMORY[0x1E4FBC860];
LABEL_50:
  swift_bridgeObjectRelease_n();
  return v60;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.appMusicArtistNames.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v46 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v54);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v45 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v56 = (char *)&v45 - v13;
  uint64_t v14 = type metadata accessor for UsoIdentifier();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  uint64_t v55 = v12;
  if (v19)
  {
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    swift_bridgeObjectRelease();
    uint64_t v22 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000) == 0) {
      uint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v23 = v22 == 0;
  }
  else
  {
    BOOL v23 = 1;
  }
  uint64_t v53 = a1;
  uint64_t v24 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25)
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v55;
    uint64_t v36 = (uint64_t)v56;
    if (!v23)
    {
LABEL_18:
      uint64_t v37 = 0;
      goto LABEL_21;
    }
    return 0;
  }
  BOOL v48 = v23;
  uint64_t v49 = v3;
  uint64_t v50 = v6;
  uint64_t v51 = v2;
  unint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
  uint64_t v26 = v15 + 16;
  uint64_t v27 = v28;
  unint64_t v29 = v24 + ((*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64));
  BOOL v30 = (void (**)(char *, uint64_t))(v26 - 8);
  uint64_t v31 = *(void *)(v26 + 56);
  uint64_t v47 = v24;
  swift_bridgeObjectRetain();
  BOOL v58 = "appPlaylistTitle";
  unint64_t v57 = 0x80000001C919BC40;
  while (1)
  {
    v27(v17, v29, v14);
    uint64_t v33 = UsoIdentifier.namespace.getter();
    if (!v34)
    {
      (*v30)(v17, v14);
      goto LABEL_9;
    }
    if (v33 == 0xD000000000000012 && v34 == v57) {
      break;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*v30)(v17, v14);
    if (v32) {
      goto LABEL_19;
    }
LABEL_9:
    v29 += v31;
    if (!--v25)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v6 = v50;
      uint64_t v2 = v51;
      uint64_t v3 = v49;
      uint64_t v35 = (uint64_t)v55;
      uint64_t v36 = (uint64_t)v56;
      if (v48) {
        return 0;
      }
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  (*v30)(v17, v14);
LABEL_19:
  swift_bridgeObjectRelease_n();
  uint64_t v6 = v50;
  uint64_t v2 = v51;
  uint64_t v3 = v49;
  uint64_t v35 = (uint64_t)v55;
  uint64_t v36 = (uint64_t)v56;
  if (v48) {
    return 0;
  }
  uint64_t v37 = 1;
LABEL_21:
  if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
  {
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v36, 1, 1, v2);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v35, *MEMORY[0x1E4FA3598], v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v35, 0, 1, v2);
  uint64_t v38 = (uint64_t)&v6[*(int *)(v54 + 48)];
  outlined init with copy of MediaUserStateCenter?(v36, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v35, v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v39((uint64_t)v6, 1, v2) != 1)
  {
    uint64_t v40 = v52;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, v52, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v39(v38, 1, v2) != 1)
    {
      unint64_t v41 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v46, v38, v2);
      _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v43 = *(void (**)(char *, uint64_t))(v3 + 8);
      v43(v41, v2);
      outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v43((char *)v40, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v42) {
        return v37;
      }
      return 0;
    }
    outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v40, v2);
LABEL_29:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v39(v38, 1, v2) != 1) {
    goto LABEL_29;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v37;
}

void *AudioUsoIntent.appAudiobookAuthors.getter()
{
  if (*(void *)(v0 + 272))
  {
    uint64_t v1 = *(void **)(v0 + 272);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.appAudiobookAuthors.getter();
    *(void *)(v0 + 272) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

void *closure #1 in AudioUsoIntent.appAudiobookAuthors.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v69 = *(void *)(v0 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1F4188790](v1);
  unint64_t v65 = (char *)&v59 - v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v59 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v59 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v71 = (char *)&v59 - v18;
  unint64_t v19 = AudioUsoIntent.rootItems.getter();
  unint64_t v20 = specialized Sequence.flatMap<A>(_:)(v19, MEMORY[0x1E4FBC860], closure #1 in closure #1 in AudioUsoIntent.appAudiobookAuthors.getter, 0);
  swift_bridgeObjectRelease();
  if (v20 >> 62)
  {
LABEL_52:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  unint64_t v61 = v20;
  if (v21)
  {
    unint64_t v64 = v20 & 0xC000000000000001;
    unint64_t v59 = v20 + 32;
    uint64_t v84 = v69 + 16;
    unint64_t v20 = v69 + 8;
    int v72 = (void (**)(char *, char *, uint64_t))(v69 + 32);
    BOOL v74 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56);
    uint64_t v75 = (unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
    uint64_t v60 = (void *)MEMORY[0x1E4FBC860];
    unsigned int v83 = "appAudiobookTitle";
    unint64_t v81 = 0x80000001C919BC80;
    uint64_t v82 = "appMusicArtistNameId";
    unint64_t v80 = 0x80000001C919C5C0;
    uint64_t v63 = v11;
    uint64_t v22 = 0;
    BOOL v68 = v14;
    uint64_t v70 = v17;
    uint64_t v62 = v21;
    while (1)
    {
      if (v64)
      {
        uint64_t v24 = MEMORY[0x1CB77D510](v22, v61);
        BOOL v25 = __OFADD__(v22, 1);
        uint64_t v11 = v22 + 1;
        if (v25) {
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v24 = *(void *)(v59 + 8 * (void)v22);
        swift_retain();
        BOOL v25 = __OFADD__(v22, 1);
        uint64_t v11 = v22 + 1;
        if (v25)
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
      }
      uint64_t v76 = v11;
      uint64_t v26 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      uint64_t v27 = *(void *)(v26 + 16);
      uint64_t v78 = v26;
      uint64_t v79 = v24;
      if (!v27)
      {
LABEL_22:
        uint64_t v34 = *v74;
        uint64_t v35 = (uint64_t)v71;
        (*v74)(v71, 1, 1, v0);
        goto LABEL_24;
      }
      unint64_t v28 = v26 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
      uint64_t v29 = *(void *)(v69 + 72);
      BOOL v30 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v30(v7, v28, v0);
        uint64_t v32 = UsoIdentifier.namespace.getter();
        if (!v33) {
          goto LABEL_16;
        }
        if (v32 == 0xD000000000000014 && v33 == v80) {
          break;
        }
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v31) {
          goto LABEL_23;
        }
LABEL_16:
        (*(void (**)(char *, uint64_t))v20)(v7, v0);
        v28 += v29;
        if (!--v27)
        {
          swift_bridgeObjectRelease();
          uint64_t v14 = v68;
          uint64_t v17 = v70;
          goto LABEL_22;
        }
      }
      swift_bridgeObjectRelease();
LABEL_23:
      swift_bridgeObjectRelease();
      uint64_t v35 = (uint64_t)v71;
      (*v72)(v71, v7, v0);
      uint64_t v34 = *v74;
      (*v74)((char *)v35, 0, 1, v0);
      uint64_t v14 = v68;
      uint64_t v17 = v70;
LABEL_24:
      swift_bridgeObjectRelease();
      outlined init with copy of MediaUserStateCenter?(v35, (uint64_t)v17, &demangling cache variable for type metadata for UsoIdentifier?);
      Swift::String v73 = *v75;
      if (v73(v17, 1, v0) == 1)
      {
        uint64_t v66 = 0;
        uint64_t v78 = 0;
      }
      else
      {
        uint64_t v36 = v65;
        (*v72)(v65, v17, v0);
        uint64_t v66 = UsoIdentifier.value.getter();
        uint64_t v78 = v37;
        uint64_t v38 = v36;
        uint64_t v35 = (uint64_t)v71;
        (*(void (**)(char *, uint64_t))v20)(v38, v0);
      }
      outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoIdentifier?);
      uint64_t v39 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      uint64_t v40 = *(void *)(v39 + 16);
      uint64_t v77 = v39;
      if (!v40)
      {
        uint64_t v47 = 1;
        uint64_t v48 = (uint64_t)v63;
        goto LABEL_39;
      }
      unint64_t v67 = v34;
      unint64_t v41 = v39 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
      uint64_t v42 = *(void *)(v69 + 72);
      uint64_t v43 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
      swift_bridgeObjectRetain();
      while (2)
      {
        v43(v3, v41, v0);
        uint64_t v45 = UsoIdentifier.namespace.getter();
        if (!v46) {
          goto LABEL_30;
        }
        if (v45 != 0xD000000000000012 || v46 != v81)
        {
          char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v44) {
            goto LABEL_37;
          }
LABEL_30:
          (*(void (**)(char *, uint64_t))v20)(v3, v0);
          v41 += v42;
          if (!--v40)
          {
            swift_bridgeObjectRelease();
            uint64_t v47 = 1;
            uint64_t v48 = (uint64_t)v63;
            uint64_t v14 = v68;
            goto LABEL_38;
          }
          continue;
        }
        break;
      }
      swift_bridgeObjectRelease();
LABEL_37:
      swift_bridgeObjectRelease();
      uint64_t v14 = v68;
      (*v72)(v68, v3, v0);
      uint64_t v47 = 0;
      uint64_t v48 = (uint64_t)v63;
LABEL_38:
      uint64_t v17 = v70;
      uint64_t v34 = v67;
LABEL_39:
      v34(v14, v47, 1, v0);
      swift_bridgeObjectRelease();
      outlined init with copy of MediaUserStateCenter?((uint64_t)v14, v48, &demangling cache variable for type metadata for UsoIdentifier?);
      if (v73((char *)v48, 1, v0) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoIdentifier?);
        uint64_t v22 = v76;
LABEL_6:
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v23 = v62;
        goto LABEL_7;
      }
      uint64_t v49 = v65;
      (*v72)(v65, (char *)v48, v0);
      uint64_t v50 = UsoIdentifier.value.getter();
      uint64_t v52 = v51;
      (*(void (**)(char *, uint64_t))v20)(v49, v0);
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoIdentifier?);
      if (!v78)
      {
        uint64_t v22 = v76;
        goto LABEL_6;
      }
      uint64_t v22 = v76;
      if (!v52) {
        goto LABEL_6;
      }
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
      }
      unint64_t v54 = v60[2];
      unint64_t v53 = v60[3];
      if (v54 >= v53 >> 1) {
        uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v60);
      }
      uint64_t v55 = v60;
      v60[2] = v54 + 1;
      uint64_t v56 = &v55[4 * v54];
      v56[4] = v50;
      v56[5] = v52;
      uint64_t v57 = v78;
      v56[6] = v66;
      v56[7] = v57;
      uint64_t v17 = v70;
      uint64_t v23 = v62;
      uint64_t v22 = v76;
LABEL_7:
      if (v22 == (char *)v23) {
        goto LABEL_50;
      }
    }
  }
  uint64_t v60 = (void *)MEMORY[0x1E4FBC860];
LABEL_50:
  swift_bridgeObjectRelease_n();
  return v60;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.appAudiobookAuthors.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v46 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v54);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v52 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v45 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v56 = (char *)&v45 - v13;
  uint64_t v14 = type metadata accessor for UsoIdentifier();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  uint64_t v55 = v12;
  if (v19)
  {
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    swift_bridgeObjectRelease();
    uint64_t v22 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000) == 0) {
      uint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v23 = v22 == 0;
  }
  else
  {
    BOOL v23 = 1;
  }
  uint64_t v53 = a1;
  uint64_t v24 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v25 = *(void *)(v24 + 16);
  if (!v25)
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v55;
    uint64_t v36 = (uint64_t)v56;
    if (!v23)
    {
LABEL_18:
      uint64_t v37 = 0;
      goto LABEL_21;
    }
    return 0;
  }
  BOOL v48 = v23;
  uint64_t v49 = v3;
  uint64_t v50 = v6;
  uint64_t v51 = v2;
  unint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
  uint64_t v26 = v15 + 16;
  uint64_t v27 = v28;
  unint64_t v29 = v24 + ((*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64));
  BOOL v30 = (void (**)(char *, uint64_t))(v26 - 8);
  uint64_t v31 = *(void *)(v26 + 56);
  uint64_t v47 = v24;
  swift_bridgeObjectRetain();
  BOOL v58 = "appAudiobookTitle";
  unint64_t v57 = 0x80000001C919BC80;
  while (1)
  {
    v27(v17, v29, v14);
    uint64_t v33 = UsoIdentifier.namespace.getter();
    if (!v34)
    {
      (*v30)(v17, v14);
      goto LABEL_9;
    }
    if (v33 == 0xD000000000000012 && v34 == v57) {
      break;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*v30)(v17, v14);
    if (v32) {
      goto LABEL_19;
    }
LABEL_9:
    v29 += v31;
    if (!--v25)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v6 = v50;
      uint64_t v2 = v51;
      uint64_t v3 = v49;
      uint64_t v35 = (uint64_t)v55;
      uint64_t v36 = (uint64_t)v56;
      if (v48) {
        return 0;
      }
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  (*v30)(v17, v14);
LABEL_19:
  swift_bridgeObjectRelease_n();
  uint64_t v6 = v50;
  uint64_t v2 = v51;
  uint64_t v3 = v49;
  uint64_t v35 = (uint64_t)v55;
  uint64_t v36 = (uint64_t)v56;
  if (v48) {
    return 0;
  }
  uint64_t v37 = 1;
LABEL_21:
  if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
  {
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v36, 1, 1, v2);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v35, *MEMORY[0x1E4FA3598], v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v35, 0, 1, v2);
  uint64_t v38 = (uint64_t)&v6[*(int *)(v54 + 48)];
  outlined init with copy of MediaUserStateCenter?(v36, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v35, v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v39((uint64_t)v6, 1, v2) != 1)
  {
    uint64_t v40 = v52;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, v52, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v39(v38, 1, v2) != 1)
    {
      unint64_t v41 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v46, v38, v2);
      _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v43 = *(void (**)(char *, uint64_t))(v3 + 8);
      v43(v41, v2);
      outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v43((char *)v40, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v42) {
        return v37;
      }
      return 0;
    }
    outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v40, v2);
LABEL_29:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v39(v38, 1, v2) != 1) {
    goto LABEL_29;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v37;
}

uint64_t AudioUsoIntent.noun.getter()
{
  uint64_t result = *(unsigned __int8 *)(v0 + 280);
  if (result == 4)
  {
    uint64_t result = closure #1 in AudioUsoIntent.noun.getter(v0);
    *(unsigned char *)(v0 + 280) = result;
  }
  return result;
}

uint64_t closure #1 in AudioUsoIntent.noun.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v45 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v51 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v41 - v5;
  uint64_t v50 = a1;
  unint64_t v7 = AudioUsoIntent.rootItems.getter();
  unint64_t v8 = v7;
  if (v7 >> 62) {
    goto LABEL_44;
  }
  uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v9; uint64_t v9 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v10 = 4;
    uint64_t v11 = MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v12 = v10 - 4;
      if ((v8 & 0xC000000000000001) != 0)
      {
        uint64_t v13 = MEMORY[0x1CB77D510](v10 - 4, v8);
        uint64_t v14 = v10 - 3;
        if (__OFADD__(v12, 1)) {
          break;
        }
        goto LABEL_9;
      }
      uint64_t v13 = *(void *)(v8 + 8 * v10);
      swift_retain();
      uint64_t v14 = v10 - 3;
      if (__OFADD__(v12, 1)) {
        break;
      }
LABEL_9:
      uint64_t v15 = specialized UsoEntity_common_MediaItem.findFirst(options:with:)(v11, v13);
      swift_release();
      if (v15)
      {
        swift_bridgeObjectRelease_n();
        swift_release();
        return 0;
      }
      ++v10;
      if (v14 == v9) {
        goto LABEL_11;
      }
    }
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  uint64_t v16 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease_n();
  unint64_t v17 = AudioUsoIntent.rootItems.getter();
  unint64_t v8 = specialized Sequence.flatMap<A>(_:)(v17, v16, (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  uint64_t v52 = v16;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v19 = v51;
    if (v18) {
      goto LABEL_13;
    }
LABEL_47:
    swift_bridgeObjectRelease();
    uint64_t v38 = MEMORY[0x1E4FBC860];
    if ((MEMORY[0x1E4FBC860] & 0x8000000000000000) != 0) {
      goto LABEL_53;
    }
    goto LABEL_48;
  }
  uint64_t v18 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t v19 = v51;
  if (!v18) {
    goto LABEL_47;
  }
LABEL_13:
  unint64_t v20 = 0;
  unint64_t v46 = v8 & 0xC000000000000001;
  v41[1] = v8 + 32;
  uint64_t v42 = v8 & 0xFFFFFFFFFFFFFF8;
  unint64_t v21 = (void (**)(char *, uint64_t))(v45 + 8);
  uint64_t v43 = v18;
  unint64_t v44 = v8;
  do
  {
    while (1)
    {
      if (v46)
      {
        uint64_t v22 = MEMORY[0x1CB77D510](v20, v8);
        BOOL v23 = __OFADD__(v20++, 1);
        if (v23) {
          goto LABEL_41;
        }
      }
      else
      {
        if (v20 >= *(void *)(v42 + 16)) {
          goto LABEL_43;
        }
        uint64_t v22 = swift_retain();
        BOOL v23 = __OFADD__(v20++, 1);
        if (v23)
        {
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
      }
      uint64_t v24 = v22;
      uint64_t v25 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      uint64_t v26 = *(void *)(v25 + 16);
      if (v26) {
        break;
      }
      swift_release();
      swift_bridgeObjectRelease();
      if (v20 == v18) {
        goto LABEL_38;
      }
    }
    uint64_t v48 = v24;
    unint64_t v49 = v20;
    unint64_t v27 = v25 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
    uint64_t v50 = *(void *)(v45 + 72);
    unint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
    uint64_t v47 = v25;
    swift_bridgeObjectRetain();
    while (1)
    {
      v28(v6, v27, v2);
      uint64_t v31 = UsoIdentifier.namespace.getter();
      if (!v32)
      {
        v28(v19, (unint64_t)v6, v2);
LABEL_34:
        uint64_t v36 = *v21;
        (*v21)(v19, v2);
        v36(v6, v2);
        goto LABEL_24;
      }
      if (v31 == 0x616C50616964656DLL && v32 == 0xEF6E756F4E726579)
      {
        swift_bridgeObjectRelease();
        v28(v19, (unint64_t)v6, v2);
      }
      else
      {
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v28(v19, (unint64_t)v6, v2);
        if ((v33 & 1) == 0) {
          goto LABEL_34;
        }
      }
      UsoIdentifier.value.getter();
      Swift::String v34 = String.lowercased()();
      swift_bridgeObjectRelease();
      Swift::String v35 = String.lowercased()();
      if (v34._countAndFlagsBits == v35._countAndFlagsBits && v34._object == v35._object) {
        break;
      }
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v30 = *v21;
      (*v21)(v51, v2);
      v30(v6, v2);
      if (v29) {
        goto LABEL_36;
      }
LABEL_24:
      unint64_t v19 = v51;
      v27 += v50;
      if (!--v26)
      {
        swift_release();
        swift_bridgeObjectRelease_n();
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v37 = *v21;
    (*v21)(v51, v2);
    v37(v6, v2);
LABEL_36:
    swift_bridgeObjectRelease_n();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    unint64_t v19 = v51;
LABEL_37:
    uint64_t v18 = v43;
    unint64_t v8 = v44;
    unint64_t v20 = v49;
  }
  while (v49 != v43);
LABEL_38:
  swift_bridgeObjectRelease();
  uint64_t v38 = v52;
  if (v52 < 0)
  {
LABEL_53:
    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_50;
  }
LABEL_48:
  if ((v38 & 0x4000000000000000) != 0) {
    goto LABEL_53;
  }
  uint64_t v40 = *(void *)(v38 + 16);
LABEL_50:
  swift_release();
  if (v40) {
    return 1;
  }
  else {
    return 3;
  }
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.noun.getter()
{
  uint64_t v0 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v24 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v23 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v23 - v13;
  if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
  {
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v14, 1, 1, v0);
  }
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v12, *MEMORY[0x1E4FA35D0], v0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v12, 0, 1, v0);
  uint64_t v15 = (uint64_t)&v5[*(int *)(v3 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v12, v15, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v16((uint64_t)v5, 1, v0) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    int v17 = v16(v15, 1, v0);
    if (v17 == 1) {
      uint64_t v18 = &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?;
    }
    else {
      uint64_t v18 = &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?);
    }
    if (v17 == 1) {
      char v19 = -1;
    }
    else {
      char v19 = 0;
    }
  }
  else
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v9, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v16(v15, 1, v0) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v9, v0);
      char v19 = 0;
      uint64_t v18 = &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?);
    }
    else
    {
      unint64_t v20 = v24;
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v24, v15, v0);
      _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v21 = *(void (**)(char *, uint64_t))(v1 + 8);
      v21(v20, v0);
      uint64_t v18 = &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?;
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v21(v9, v0);
    }
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, v18);
  return v19 & 1;
}

uint64_t AudioUsoIntent.dateTime.getter()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = v1;
  if (v1 == 1)
  {
    uint64_t v2 = closure #1 in AudioUsoIntent.dateTime.getter();
    uint64_t v3 = *(void *)(v0 + 288);
    *(void *)(v0 + 288) = v2;
    swift_retain();
    outlined consume of UsoEntity_common_DateTime??(v3);
  }
  outlined copy of UsoEntity_common_DateTime??(v1);
  return v2;
}

uint64_t closure #1 in AudioUsoIntent.dateTime.getter()
{
  unint64_t v0 = AudioUsoIntent.rootItems.getter();
  unint64_t v1 = v0;
  if (v0 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      uint64_t v3 = 4;
      uint64_t v4 = MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v5 = v3 - 4;
        if ((v1 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = MEMORY[0x1CB77D510](v3 - 4, v1);
          uint64_t v7 = v3 - 3;
          if (__OFADD__(v5, 1)) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v1 + 8 * v3);
          swift_retain();
          uint64_t v7 = v3 - 3;
          if (__OFADD__(v5, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        uint64_t v8 = specialized UsoEntity_common_MediaItem.findFirst(options:with:)(v4, v6);
        swift_release();
        if (v8)
        {
          swift_bridgeObjectRelease_n();
          swift_retain();
          uint64_t v10 = dispatch thunk of UsoEntity_common_MediaItem.dateTime.getter();
          swift_release_n();
          return v10;
        }
        ++v3;
      }
      while (v7 != v2);
    }
  }
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t AudioUsoIntent.attributes.getter()
{
  if (*(void *)(v0 + 296))
  {
    uint64_t v1 = *(void *)(v0 + 296);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.attributes.getter(v0);
    *(void *)(v0 + 296) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.attributes.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v93 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v89 = (char *)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v91);
  uint64_t v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v87 = (uint64_t)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v88 = (uint64_t)&v84 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v90 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v97 = (uint64_t)&v84 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v92 = (char *)&v84 - v15;
  uint64_t v102 = MEMORY[0x1E4FBC870];
  unint64_t v16 = AudioUsoIntent.rootItems.getter();
  unint64_t v17 = specialized Sequence.flatMap<A>(_:)(v16, MEMORY[0x1E4FBC860], (uint64_t (*)(uint64_t))closure #1 in closure #1 in AudioUsoIntent.attributes.getter, 0);
  uint64_t v86 = 0;
  swift_bridgeObjectRelease();
  unint64_t v99 = v17;
  uint64_t v95 = v2;
  uint64_t v96 = a1;
  os_log_type_t v94 = v5;
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    if (v18) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v18)
    {
LABEL_3:
      if (v18 < 1)
      {
        __break(1u);
        JUMPOUT(0x1C9084E28);
      }
      uint64_t v19 = 0;
      unint64_t v20 = v99 & 0xC000000000000001;
      unint64_t v98 = v99 + 32;
      int v85 = *MEMORY[0x1E4FA3410];
      int v84 = *MEMORY[0x1E4FA33A0];
      uint64_t v100 = "inity";
      while (1)
      {
        if (v20) {
          MEMORY[0x1CB77D510](v19, v99);
        }
        else {
          swift_retain();
        }
        if (UsoEntity_common_MediaItem.isFromArtist()()) {
          break;
        }
        if (UsoEntity_common_MediaItem.isFromSong()())
        {
          uint64_t v29 = v102;
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          Swift::Int v30 = Hasher._finalize()();
          uint64_t v31 = -1 << *(unsigned char *)(v29 + 32);
          unint64_t v26 = v30 & ~v31;
          if ((*(void *)(v29 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26))
          {
            uint64_t v32 = ~v31;
            while (2)
            {
              switch(*(unsigned char *)(*(void *)(v29 + 48) + v26))
              {
                case 1:
                  goto LABEL_66;
                default:
                  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v33) {
                    goto LABEL_67;
                  }
                  unint64_t v26 = (v26 + 1) & v32;
                  if (((*(void *)(v29 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
                    break;
                  }
                  continue;
              }
              break;
            }
          }
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v101[0] = v29;
          Swift::Int v22 = 1;
          goto LABEL_6;
        }
        if (UsoEntity_common_MediaItem.isFromAlbum()())
        {
          uint64_t v34 = v102;
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          Swift::Int v35 = Hasher._finalize()();
          uint64_t v36 = -1 << *(unsigned char *)(v34 + 32);
          unint64_t v26 = v35 & ~v36;
          if ((*(void *)(v34 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26))
          {
            uint64_t v37 = ~v36;
            while (2)
            {
              switch(*(unsigned char *)(*(void *)(v34 + 48) + v26))
              {
                case 2:
                  goto LABEL_66;
                default:
                  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v38) {
                    goto LABEL_67;
                  }
                  unint64_t v26 = (v26 + 1) & v37;
                  if (((*(void *)(v34 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
                    break;
                  }
                  continue;
              }
              break;
            }
          }
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v101[0] = v34;
          Swift::Int v22 = 2;
          goto LABEL_6;
        }
        if (UsoEntity_common_MediaItem.isRecommended()())
        {
          uint64_t v39 = v102;
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          Swift::Int v40 = Hasher._finalize()();
          uint64_t v41 = -1 << *(unsigned char *)(v39 + 32);
          unint64_t v26 = v40 & ~v41;
          if ((*(void *)(v39 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26))
          {
            uint64_t v42 = ~v41;
            while (2)
            {
              switch(*(unsigned char *)(*(void *)(v39 + 48) + v26))
              {
                case 7:
                  goto LABEL_66;
                default:
                  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v43) {
                    goto LABEL_67;
                  }
                  unint64_t v26 = (v26 + 1) & v42;
                  if (((*(void *)(v39 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
                    break;
                  }
                  continue;
              }
              break;
            }
          }
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v101[0] = v39;
          Swift::Int v22 = 7;
          goto LABEL_6;
        }
        if (UsoEntity_common_MediaItem.isAffinity()())
        {
          uint64_t v44 = v102;
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          Swift::Int v45 = Hasher._finalize()();
          uint64_t v46 = -1 << *(unsigned char *)(v44 + 32);
          unint64_t v26 = v45 & ~v46;
          if ((*(void *)(v44 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26))
          {
            uint64_t v47 = ~v46;
            while (2)
            {
              switch(*(unsigned char *)(*(void *)(v44 + 48) + v26))
              {
                case 6:
                  goto LABEL_66;
                default:
                  char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v48) {
                    goto LABEL_67;
                  }
                  unint64_t v26 = (v26 + 1) & v47;
                  if (((*(void *)(v44 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
                    break;
                  }
                  continue;
              }
              break;
            }
          }
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v101[0] = v44;
          Swift::Int v22 = 6;
          goto LABEL_6;
        }
        if (UsoEntity_common_MediaItem.isDiscover()())
        {
          uint64_t v49 = v102;
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          Swift::Int v50 = Hasher._finalize()();
          uint64_t v51 = -1 << *(unsigned char *)(v49 + 32);
          unint64_t v26 = v50 & ~v51;
          if ((*(void *)(v49 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26))
          {
            uint64_t v52 = ~v51;
            while (2)
            {
              switch(*(unsigned char *)(*(void *)(v49 + 48) + v26))
              {
                case 8:
                  goto LABEL_66;
                default:
                  char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v53) {
                    goto LABEL_67;
                  }
                  unint64_t v26 = (v26 + 1) & v52;
                  if (((*(void *)(v49 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
                    break;
                  }
                  continue;
              }
              break;
            }
          }
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v101[0] = v49;
          Swift::Int v22 = 8;
          goto LABEL_6;
        }
        if (UsoEntity_common_MediaItem.isAddToUnspecifiedPlaylist()())
        {
          uint64_t v54 = v102;
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          Swift::Int v55 = Hasher._finalize()();
          uint64_t v56 = -1 << *(unsigned char *)(v54 + 32);
          unint64_t v26 = v55 & ~v56;
          if ((*(void *)(v54 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26))
          {
            uint64_t v57 = ~v56;
            while (1)
            {
              switch(*(unsigned char *)(*(void *)(v54 + 48) + v26))
              {
                case 9:
LABEL_66:
                  swift_bridgeObjectRelease();
                  goto LABEL_67;
                default:
                  char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v58)
                  {
LABEL_67:
                    swift_bridgeObjectRelease();
                    goto LABEL_68;
                  }
                  unint64_t v26 = (v26 + 1) & v57;
                  if (((*(void *)(v54 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
                    goto LABEL_59;
                  }
                  break;
              }
            }
          }
LABEL_59:
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v101[0] = v54;
          Swift::Int v22 = 9;
          goto LABEL_6;
        }
        if (dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter())
        {
          swift_release();
          if (dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter())
          {
            uint64_t v59 = v88;
            dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter();
            swift_release();
            uint64_t v60 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues();
            uint64_t v61 = *(void *)(v60 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60) == 1) {
              goto LABEL_63;
            }
            uint64_t v62 = v59;
            uint64_t v63 = v87;
            outlined init with copy of MediaUserStateCenter?(v62, v87, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
            int v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 88))(v63, v60);
            if (v64 == v85)
            {
              Swift::Int v65 = 12;
            }
            else
            {
              if (v64 != v84)
              {
                (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v87, v60);
                uint64_t v59 = v88;
LABEL_63:
                outlined destroy of MediaUserStateCenter?(v59, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
                goto LABEL_68;
              }
              Swift::Int v65 = 10;
            }
            outlined destroy of MediaUserStateCenter?(v88, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
            specialized Set._Variant.insert(_:)(v101, v65);
          }
        }
LABEL_68:
        swift_release();
LABEL_7:
        if (++v19 == v18) {
          goto LABEL_74;
        }
      }
      uint64_t v23 = v102;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v24 = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v23 + 32);
      unint64_t v26 = v24 & ~v25;
      if ((*(void *)(v23 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26))
      {
        uint64_t v27 = ~v25;
        while (2)
        {
          switch(*(unsigned char *)(*(void *)(v23 + 48) + v26))
          {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0xE:
              char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v28) {
                goto LABEL_67;
              }
              unint64_t v26 = (v26 + 1) & v27;
              if (((*(void *)(v23 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
                break;
              }
              continue;
            default:
              goto LABEL_66;
          }
          break;
        }
      }
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v101[0] = v23;
      Swift::Int v22 = 0;
LABEL_6:
      specialized _NativeSet.insertNew(_:at:isUnique:)(v22, v26, isUniquelyReferenced_nonNull_native);
      uint64_t v102 = v101[0];
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
LABEL_74:
  swift_bridgeObjectRelease_n();
  uint64_t v67 = v95;
  uint64_t v66 = v96;
  uint64_t v69 = v93;
  uint64_t v68 = (uint64_t)v94;
  uint64_t v70 = (uint64_t)v92;
  uint64_t v71 = v97;
  if (*(void *)(v96 + 40)
    && (swift_retain(), dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter(), swift_release(), v101[0])
    && (uint64_t v72 = dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter(), swift_release(), v72))
  {
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56))(v70, 1, 1, v67);
  }
  (*(void (**)(uint64_t, void, uint64_t))(v69 + 104))(v71, *MEMORY[0x1E4FA35B8], v67);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v69 + 56))(v71, 0, 1, v67);
  uint64_t v73 = v68 + *(int *)(v91 + 48);
  outlined init with copy of MediaUserStateCenter?(v70, v68, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v71, v73, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  BOOL v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  if (v74(v68, 1, v67) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v71, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v70, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v74(v73, 1, v67) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v68, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
LABEL_86:
      specialized Set._Variant.insert(_:)(v101, 3);
      goto LABEL_87;
    }
    goto LABEL_84;
  }
  uint64_t v75 = v90;
  outlined init with copy of MediaUserStateCenter?(v68, v90, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v74(v73, 1, v67) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v97, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v70, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v75, v67);
LABEL_84:
    outlined destroy of MediaUserStateCenter?(v68, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    goto LABEL_87;
  }
  uint64_t v76 = v89;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v89, v73, v67);
  _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
  char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v78 = *(void (**)(char *, uint64_t))(v69 + 8);
  v78(v76, v67);
  outlined destroy of MediaUserStateCenter?(v97, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v70, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v78((char *)v75, v67);
  outlined destroy of MediaUserStateCenter?(v68, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v77) {
    goto LABEL_86;
  }
LABEL_87:
  if (*(void *)(v66 + 56))
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
    swift_release();
    if (v101[0])
    {
      dispatch thunk of UsoEntity_common_MediaItem.name.getter();
      uint64_t v80 = v79;
      swift_bridgeObjectRelease();
      if (v80) {
        specialized Set._Variant.insert(_:)(v101, 11);
      }
      uint64_t v81 = dispatch thunk of UsoEntity_common_MediaItem.dateTime.getter();
      swift_release();
      if (v81) {
        specialized Set._Variant.insert(_:)(v101, 13);
      }
      uint64_t v82 = dispatch thunk of UsoEntity_common_MediaItem.totalDuration.getter();
      swift_release();
      if (v82) {
        specialized Set._Variant.insert(_:)(v101, 14);
      }
      swift_release();
    }
  }
  return v102;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.attributes.getter()
{
  if (!UsoEntity_common_MediaItem.isFromArtist()()
    && !UsoEntity_common_MediaItem.isFromSong()()
    && !UsoEntity_common_MediaItem.isFromAlbum()()
    && !UsoEntity_common_MediaItem.isRecommended()()
    && !UsoEntity_common_MediaItem.isAffinity()()
    && !UsoEntity_common_MediaItem.isDiscover()()
    && !UsoEntity_common_MediaItem.isAddToUnspecifiedPlaylist()())
  {
    uint64_t result = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
    if (!result) {
      return result;
    }
    swift_release();
  }
  return 1;
}

uint64_t AudioUsoIntent.musicTitles.getter()
{
  if (*(void *)(v0 + 304))
  {
    uint64_t v1 = *(void *)(v0 + 304);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.musicTitles.getter();
    *(void *)(v0 + 304) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.musicTitles.getter()
{
  unint64_t v0 = AudioUsoIntent.rootItems.getter();
  unint64_t v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E4FBC860], closure #1 in closure #1 in AudioUsoIntent.musicTitles.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v4, v1);
      }
      else {
        swift_retain();
      }
      uint64_t v7 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
      uint64_t v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        }
        unint64_t v11 = v5[2];
        unint64_t v10 = v5[3];
        if (v11 >= v10 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
        }
        v5[2] = v11 + 1;
        uint64_t v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.musicTitles.getter(uint64_t a1)
{
  return closure #1 in closure #1 in AudioUsoIntent.albums.getter(a1, MEMORY[0x1E4FA3568]);
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.albums.getter(uint64_t a1, unsigned int *a2)
{
  uint64_t v31 = a2;
  uint64_t v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v30 = (uint64_t)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v30 - v13;
  MEMORY[0x1F4188790](v12);
  unint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  if (!v18) {
    goto LABEL_7;
  }
  uint64_t v19 = v17;
  unint64_t v20 = v18;
  swift_bridgeObjectRelease();
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v21 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
    {
      dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
      swift_release();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v16, 1, 1, v2);
    }
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v14, *v31, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
    uint64_t v23 = (uint64_t)&v8[*(int *)(v6 + 48)];
    outlined init with copy of MediaUserStateCenter?((uint64_t)v16, (uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, v23, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    Swift::Int v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
    if (v24((uint64_t)v8, 1, v2) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      int v25 = v24(v23, 1, v2);
      if (v25 == 1) {
        unint64_t v26 = &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?;
      }
      else {
        unint64_t v26 = &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?);
      }
      if (v25 == 1) {
        char v22 = -1;
      }
      else {
        char v22 = 0;
      }
    }
    else
    {
      uint64_t v27 = v30;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v8, v30, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v24(v23, 1, v2) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v27, v2);
        char v22 = 0;
        unint64_t v26 = &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v23, v2);
        _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
        char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
        char v28 = *(void (**)(char *, uint64_t))(v3 + 8);
        v28(v5, v2);
        unint64_t v26 = &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?;
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        v28((char *)v27, v2);
      }
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v8, v26);
  }
  else
  {
LABEL_7:
    char v22 = 0;
  }
  return v22 & 1;
}

uint64_t AudioUsoIntent.playlistTitles.getter()
{
  if (*(void *)(v0 + 312))
  {
    uint64_t v1 = *(void *)(v0 + 312);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.playlistTitles.getter(v0);
    *(void *)(v0 + 312) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.playlistTitles.getter(uint64_t a1)
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)a1 + 1544))();
  unint64_t v2 = v1;
  if (!(v1 >> 62))
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v6;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v5, v2);
      }
      else {
        swift_retain();
      }
      uint64_t v8 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
      uint64_t v10 = v9;
      swift_release();
      if (v10)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        }
        unint64_t v12 = v6[2];
        unint64_t v11 = v6[3];
        if (v12 >= v11 >> 1) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v6);
        }
        long long v6[2] = v12 + 1;
        uint64_t v7 = &v6[2 * v12];
        v7[4] = v8;
        v7[5] = v10;
      }
      ++v5;
    }
    while (v3 != v5);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t AudioUsoIntent.playlistMediaItems.getter()
{
  if (*(void *)(v0 + 320))
  {
    uint64_t v1 = *(void *)(v0 + 320);
  }
  else
  {
    unint64_t v2 = AudioUsoIntent.rootItems.getter();
    uint64_t v1 = specialized Sequence.flatMap<A>(_:)(v2, MEMORY[0x1E4FBC860], specialized closure #1 in closure #1 in AudioUsoIntent.playlistMediaItems.getter, 0);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 320) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioUsoIntent.applePlaylistTitles.getter()
{
  if (*(void *)(v0 + 328))
  {
    uint64_t v1 = *(void *)(v0 + 328);
  }
  else
  {
    uint64_t v1 = specialized closure #1 in AudioUsoIntent.applePlaylistTitles.getter();
    *(void *)(v0 + 328) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioUsoIntent.appName.getter()
{
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v3 = v1;
  if (v2 == 1)
  {
    uint64_t v3 = closure #1 in AudioUsoIntent.appName.getter();
    uint64_t v4 = *(void *)(v0 + 336);
    uint64_t v5 = *(void *)(v0 + 344);
    *(void *)(v0 + 336) = v3;
    *(void *)(v0 + 344) = v6;
    swift_bridgeObjectRetain();
    outlined consume of String??(v4, v5);
  }
  outlined copy of String??(v1, v2);
  return v3;
}

uint64_t closure #1 in AudioUsoIntent.appName.getter()
{
  if (!AudioUsoIntent.referenceMediaItem.getter() && !AudioUsoIntent.targetMediaItem.getter()) {
    return 0;
  }
  if (!dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter())
  {
    swift_release();
    return 0;
  }
  uint64_t v0 = dispatch thunk of UsoEntity_common_App.name.getter();
  swift_release();
  swift_release();
  return v0;
}

uint64_t AudioUsoIntent.showTitles.getter()
{
  if (*(void *)(v0 + 352))
  {
    uint64_t v1 = *(void *)(v0 + 352);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.showTitles.getter();
    *(void *)(v0 + 352) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.showTitles.getter()
{
  unint64_t v0 = AudioUsoIntent.rootItems.getter();
  unint64_t v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E4FBC860], closure #1 in closure #1 in AudioUsoIntent.showTitles.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v4, v1);
      }
      else {
        swift_retain();
      }
      uint64_t v7 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
      uint64_t v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        }
        unint64_t v11 = v5[2];
        unint64_t v10 = v5[3];
        if (v11 >= v10 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
        }
        v5[2] = v11 + 1;
        uint64_t v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.showTitles.getter(uint64_t a1)
{
  return closure #1 in closure #1 in AudioUsoIntent.albums.getter(a1, MEMORY[0x1E4FA3508]);
}

uint64_t AudioUsoIntent.podcastTitles.getter()
{
  if (*(void *)(v0 + 360))
  {
    uint64_t v1 = *(void *)(v0 + 360);
  }
  else
  {
    uint64_t v1 = specialized closure #1 in AudioUsoIntent.podcastTitles.getter();
    *(void *)(v0 + 360) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioUsoIntent.applePodcastTitles.getter()
{
  if (*(void *)(v0 + 368))
  {
    uint64_t v1 = *(void *)(v0 + 368);
  }
  else
  {
    uint64_t v1 = specialized closure #1 in AudioUsoIntent.applePodcastTitles.getter();
    *(void *)(v0 + 368) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioUsoIntent.radioStationNames.getter()
{
  if (*(void *)(v0 + 376))
  {
    uint64_t v1 = *(void *)(v0 + 376);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.radioStationNames.getter();
    *(void *)(v0 + 376) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.radioStationNames.getter()
{
  unint64_t v0 = AudioUsoIntent.rootItems.getter();
  unint64_t v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E4FBC860], closure #1 in closure #1 in AudioUsoIntent.radioStationNames.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v4, v1);
      }
      else {
        swift_retain();
      }
      uint64_t v7 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
      uint64_t v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        }
        unint64_t v11 = v5[2];
        unint64_t v10 = v5[3];
        if (v11 >= v10 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
        }
        v5[2] = v11 + 1;
        uint64_t v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.radioStationNames.getter(uint64_t a1)
{
  return closure #1 in closure #1 in AudioUsoIntent.albums.getter(a1, MEMORY[0x1E4FA3520]);
}

uint64_t AudioUsoIntent.decade.getter()
{
  uint64_t result = *(unsigned __int8 *)(v0 + 384);
  if (result == 12)
  {
    uint64_t result = closure #1 in AudioUsoIntent.decade.getter();
    *(unsigned char *)(v0 + 384) = result;
  }
  return result;
}

uint64_t closure #1 in AudioUsoIntent.decade.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  uint64_t v3 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  unint64_t v5 = (unint64_t)&v65 - v4;
  uint64_t v6 = type metadata accessor for UsoIdentifier();
  uint64_t v72 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  char v77 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v78 = (char *)&v65 - v10;
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)&v65 - v11;
  unint64_t v13 = AudioUsoIntent.rootItems.getter();
  unint64_t v14 = specialized Sequence.flatMap<A>(_:)(v13, MEMORY[0x1E4FBC860], (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  unint64_t v70 = v14;
  if (v14 >> 62)
  {
LABEL_74:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v15 = result;
  }
  else
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v17 = MEMORY[0x1E4FBC860];
  unint64_t v18 = v77;
  uint64_t v69 = v5;
  if (v15)
  {
    if (v15 < 1)
    {
      __break(1u);
      return result;
    }
    unint64_t v5 = 0;
    unint64_t v19 = v70 & 0xC000000000000001;
    unint64_t v20 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if (v19) {
        MEMORY[0x1CB77D510](v5, v70);
      }
      else {
        swift_retain();
      }
      uint64_t v21 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
      }
      char v22 = v20;
      unint64_t v23 = v20[2];
      Swift::Int v24 = v22;
      unint64_t v25 = v22[3];
      if (v23 >= v25 >> 1) {
        Swift::Int v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v23 + 1, 1, v24);
      }
      ++v5;
      v24[2] = v23 + 1;
      unint64_t v26 = &v24[v23];
      unint64_t v20 = v24;
      v26[4] = v21;
      unint64_t v18 = v77;
    }
    while (v15 != v5);
  }
  else
  {
    unint64_t v20 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  uint64_t v79 = v17;
  uint64_t v68 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v20[2];
  uint64_t v73 = v3;
  if (v68)
  {
    unint64_t v27 = 0;
    uint64_t v66 = v20;
    uint64_t v67 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 4);
    uint64_t v3 = (char *)(v72 + 16);
    char v28 = (void (**)(char *, uint64_t))(v72 + 8);
    uint64_t v75 = "t";
    unint64_t v76 = 0x80000001C919C430;
    while (1)
    {
      if (v27 >= v20[2])
      {
        __break(1u);
        goto LABEL_74;
      }
      uint64_t v29 = v67[v27];
      uint64_t v30 = *((void *)v29 + 2);
      if (!v30) {
        goto LABEL_20;
      }
      unint64_t v71 = v27;
      unint64_t v5 = (unint64_t)v29
         + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
      uint64_t v31 = *(void *)(v72 + 72);
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v72 + 16);
      BOOL v74 = (char *)v29;
      swift_bridgeObjectRetain_n();
      while (1)
      {
        v32(v12, v5, v6);
        uint64_t v35 = UsoIdentifier.namespace.getter();
        if (!v36)
        {
          char v33 = v78;
          v32(v78, (unint64_t)v12, v6);
          goto LABEL_25;
        }
        if (v35 == 0xD000000000000012 && v36 == v76) {
          break;
        }
        char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        char v33 = v78;
        v32(v78, (unint64_t)v12, v6);
        if (v37) {
          goto LABEL_33;
        }
LABEL_25:
        uint64_t v34 = *v28;
        (*v28)(v33, v6);
LABEL_26:
        v34(v12, v6);
LABEL_27:
        v5 += v31;
        if (!--v30)
        {
          swift_bridgeObjectRelease_n();
          unint64_t v18 = v77;
          unint64_t v20 = v66;
          goto LABEL_19;
        }
      }
      swift_bridgeObjectRelease();
      v32(v78, (unint64_t)v12, v6);
LABEL_33:
      if (!UsoIdentifier.value.getter() && v38 == 0xE000000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v34 = *v28;
        (*v28)(v78, v6);
        goto LABEL_26;
      }
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      Swift::Int v40 = *v28;
      (*v28)(v78, v6);
      v40(v12, v6);
      if (v39) {
        goto LABEL_27;
      }
      swift_bridgeObjectRelease();
      uint64_t v41 = v79;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v41 + 16) + 1, 1);
        uint64_t v41 = v79;
      }
      unint64_t v20 = v66;
      unint64_t v5 = *(void *)(v41 + 16);
      unint64_t v42 = *(void *)(v41 + 24);
      if (v5 >= v42 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v5 + 1, 1);
        uint64_t v41 = v79;
      }
      *(void *)(v41 + 16) = v5 + 1;
      *(void *)(v41 + 8 * v5 + 32) = v74;
      unint64_t v18 = v77;
LABEL_19:
      unint64_t v27 = v71;
LABEL_20:
      if ((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))++v27 == v68)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v43 = v79;
        uint64_t v44 = (uint64_t)v73;
        goto LABEL_44;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v43 = MEMORY[0x1E4FBC860];
  uint64_t v44 = (uint64_t)v3;
LABEL_44:
  unint64_t v71 = *(void *)(v43 + 16);
  if (v71)
  {
    unint64_t v70 = v43 + 32;
    Swift::Int v45 = (void (**)(char *, uint64_t))(v72 + 8);
    uint64_t v68 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56);
    uint64_t v66 = (void *)(v72 + 32);
    uint64_t v67 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
    uint64_t v65 = v43;
    swift_retain();
    uint64_t v46 = 0;
    uint64_t v47 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v78 = "t";
    unint64_t v76 = 0x80000001C919C430;
    while (1)
    {
      BOOL v74 = v47;
      uint64_t v48 = *(void *)(v70 + 8 * v46);
      uint64_t v49 = *(void *)(v48 + 16);
      uint64_t v75 = (char *)v48;
      if (!v49)
      {
        swift_bridgeObjectRetain();
        uint64_t v56 = 1;
LABEL_58:
        uint64_t v57 = v69;
        goto LABEL_60;
      }
      uint64_t v50 = v48 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
      uint64_t v51 = *(void *)(v72 + 72);
      uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
      swift_bridgeObjectRetain_n();
      while (1)
      {
        v52(v18, v50, v6);
        uint64_t v54 = UsoIdentifier.namespace.getter();
        if (!v55) {
          goto LABEL_51;
        }
        if (v54 == 0xD000000000000012 && v55 == v76) {
          break;
        }
        char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v53) {
          goto LABEL_59;
        }
LABEL_51:
        unint64_t v18 = v77;
        (*v45)(v77, v6);
        v50 += v51;
        if (!--v49)
        {
          swift_bridgeObjectRelease();
          uint64_t v56 = 1;
          uint64_t v44 = (uint64_t)v73;
          goto LABEL_58;
        }
      }
      swift_bridgeObjectRelease();
LABEL_59:
      swift_bridgeObjectRelease();
      uint64_t v57 = v69;
      ((void (*)(uint64_t, char *, uint64_t))*v66)(v69, v77, v6);
      uint64_t v56 = 0;
      uint64_t v44 = (uint64_t)v73;
LABEL_60:
      uint64_t v47 = v74;
      (*v68)(v57, v56, 1, v6);
      outlined init with copy of MediaUserStateCenter?(v57, v44, &demangling cache variable for type metadata for UsoIdentifier?);
      if ((*v67)(v44, 1, v6) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for UsoIdentifier?);
        uint64_t v58 = 0;
        uint64_t v59 = 0;
      }
      else
      {
        uint64_t v58 = UsoIdentifier.value.getter();
        uint64_t v59 = v60;
        (*v45)((char *)v44, v6);
      }
      char v61 = specialized static CommonAudio.Decade.from(_:)(v58, v59);
      swift_bridgeObjectRelease();
      outlined destroy of MediaUserStateCenter?(v57, &demangling cache variable for type metadata for UsoIdentifier?);
      swift_bridgeObjectRelease();
      if (v61 != 11)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v47 + 2) + 1, 1, v47);
        }
        unint64_t v63 = *((void *)v47 + 2);
        unint64_t v62 = *((void *)v47 + 3);
        if (v63 >= v62 >> 1) {
          uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1, v47);
        }
        *((void *)v47 + 2) = v63 + 1;
        v47[v63 + 32] = v61;
      }
      ++v46;
      unint64_t v18 = v77;
      uint64_t v44 = (uint64_t)v73;
      if (v46 == v71)
      {
        swift_release_n();
        if (*((void *)v47 + 2)) {
          goto LABEL_69;
        }
LABEL_71:
        uint64_t v64 = 11;
        goto LABEL_72;
      }
    }
  }
  swift_release();
  uint64_t v47 = (char *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16)) {
    goto LABEL_71;
  }
LABEL_69:
  uint64_t v64 = v47[32];
LABEL_72:
  swift_bridgeObjectRelease();
  return v64;
}

uint64_t AudioUsoIntent.sort.getter()
{
  uint64_t result = *(unsigned __int8 *)(v0 + 385);
  if (result == 10)
  {
    uint64_t result = closure #1 in AudioUsoIntent.sort.getter();
    *(unsigned char *)(v0 + 385) = result;
  }
  return result;
}

uint64_t closure #1 in AudioUsoIntent.sort.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  uint64_t v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  unint64_t v5 = (char *)v22 - v4;
  unint64_t v6 = AudioUsoIntent.rootItems.getter();
  uint64_t v7 = v6;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
    goto LABEL_24;
  }
  uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v9 = 4;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v11 = v9 - 4;
    if ((v7 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = MEMORY[0x1CB77D510](v9 - 4, v7);
      uint64_t v13 = v12;
      uint64_t v14 = v9 - 3;
      if (__OFADD__(v11, 1)) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v7 + 8 * v9);
      LODWORD(v12) = swift_retain();
      uint64_t v14 = v9 - 3;
      if (__OFADD__(v11, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        if (v12 == *MEMORY[0x1E4FA3650])
        {
          uint64_t v19 = 1;
          goto LABEL_26;
        }
        if (v12 != *MEMORY[0x1E4FA3658])
        {
          if (v12 == *MEMORY[0x1E4FA3678])
          {
            uint64_t v19 = 5;
          }
          else if (v12 == *MEMORY[0x1E4FA3660])
          {
            uint64_t v19 = 2;
          }
          else if (v12 == *MEMORY[0x1E4FA3688])
          {
            uint64_t v19 = 7;
          }
          else
          {
            if (v12 != *MEMORY[0x1E4FA3690])
            {
              (*(void (**)(char *, uint64_t))(v11 + 8))(v3, v7);
              goto LABEL_25;
            }
            uint64_t v19 = 6;
          }
LABEL_26:
          outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
          return v19;
        }
LABEL_30:
        uint64_t v19 = 0;
        goto LABEL_26;
      }
    }
    uint64_t v15 = specialized UsoEntity_common_MediaItem.findFirst(options:with:)(v10, v13);
    swift_release();
    if (v15) {
      break;
    }
    ++v9;
    if (v14 == v8) {
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_retain();
  uint64_t v16 = dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter();
  swift_release();
  if (!v16
    || (unint64_t v17 = dispatch thunk of UsoEntity_common_SearchQualifier.sortDirections.getter(), result = swift_release(), !v17))
  {
LABEL_23:
    swift_release();
    goto LABEL_24;
  }
  if (!(v17 >> 62))
  {
    if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_16;
    }
LABEL_46:
    swift_release();
    swift_bridgeObjectRelease();
LABEL_24:
    uint64_t v20 = type metadata accessor for UsoEntity_common_SortDirection.DefinedValues();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v5, 1, 1, v20);
LABEL_25:
    uint64_t v19 = 9;
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v21) {
    goto LABEL_46;
  }
LABEL_16:
  if ((v17 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1CB77D510](0, v17);
LABEL_19:
    swift_bridgeObjectRelease();
    dispatch thunk of CodeGenListEntry.entry.getter();
    swift_release();
    if (v22[1])
    {
      dispatch thunk of UsoEntity_common_SortDirection.definedValue.getter();
      swift_release();
      swift_release();
      uint64_t v7 = type metadata accessor for UsoEntity_common_SortDirection.DefinedValues();
      uint64_t v11 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v7) == 1) {
        goto LABEL_25;
      }
      outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v3, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      LODWORD(v12) = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v3, v7);
      if (v12 == *MEMORY[0x1E4FA3670])
      {
        uint64_t v19 = 4;
        goto LABEL_26;
      }
      if (v12 == *MEMORY[0x1E4FA3668])
      {
        uint64_t v19 = 3;
        goto LABEL_26;
      }
      if (v12 == *MEMORY[0x1E4FA3680]) {
        goto LABEL_30;
      }
      goto LABEL_32;
    }
    goto LABEL_23;
  }
  if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.sort.getter()
{
  uint64_t result = dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter();
  if (!result) {
    return result;
  }
  unint64_t v1 = dispatch thunk of UsoEntity_common_SearchQualifier.sortDirections.getter();
  uint64_t result = swift_release();
  if (!v1) {
    return 0;
  }
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_5:
  if ((v1 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1CB77D510](0, v1);
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  dispatch thunk of CodeGenListEntry.entry.getter();
  swift_release();
  uint64_t result = v3;
  if (v3)
  {
    swift_release();
    return 1;
  }
  return result;
}

uint64_t AudioUsoIntent.modifiers.getter()
{
  if (*(void *)(v0 + 392))
  {
    uint64_t v1 = *(void *)(v0 + 392);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.modifiers.getter();
    *(void *)(v0 + 392) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.modifiers.getter()
{
  uint64_t v0 = (uint64_t *)type metadata accessor for UsoEntity_common_Similarity.DefinedValues();
  uint64_t v1 = (unsigned int (**)(uint64_t, uint64_t, uint64_t *))*(v0 - 1);
  MEMORY[0x1F4188790](v0);
  unint64_t v76 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Similarity.DefinedValues?, UsoEntity_common_Similarity.DefinedValues?));
  MEMORY[0x1F4188790](v87);
  uint64_t v4 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v101 = (uint64_t)&v74 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v102 = (uint64_t)&v74 - v11;
  uint64_t v99 = type metadata accessor for UsoEntity_common_Quantifier.DefinedValues();
  uint64_t v12 = *(void *)(v99 - 8);
  MEMORY[0x1F4188790](v99);
  uint64_t v78 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
  MEMORY[0x1F4188790](v100);
  uint64_t v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  unint64_t v19 = (unint64_t)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v91 = (char *)&v74 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v104 = (char *)&v74 - v22;
  unint64_t v23 = AudioUsoIntent.rootItems.getter();
  unint64_t v24 = specialized Sequence.flatMap<A>(_:)(v23, MEMORY[0x1E4FBC860], (uint64_t (*)(uint64_t))closure #1 in closure #1 in AudioUsoIntent.modifiers.getter, 0);
  swift_bridgeObjectRelease();
  if (v24 >> 62)
  {
LABEL_84:
    swift_bridgeObjectRetain_n();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  unint64_t v88 = v24;
  if (!v25)
  {
    uint64_t v12 = MEMORY[0x1E4FBC870];
LABEL_80:
    swift_bridgeObjectRelease_n();
    return v12;
  }
  uint64_t v80 = v8;
  unint64_t v24 = 0;
  unint64_t v98 = v88 & 0xC000000000000001;
  unint64_t v81 = v88 + 32;
  uint64_t v96 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  unsigned int v95 = *MEMORY[0x1E4FA3228];
  os_log_type_t v94 = (void (**)(char *, void, uint64_t))(v12 + 104);
  unint64_t v26 = (uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  char v77 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
  uint64_t v82 = (void (**)(unint64_t, uint64_t))(v12 + 8);
  int v85 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v1 + 7);
  unsigned int v84 = *MEMORY[0x1E4FA3250];
  unsigned int v83 = (void (**)(uint64_t, void, uint64_t *))(v1 + 13);
  uint64_t v89 = v1 + 6;
  uint64_t v75 = (void (**)(char *, uint64_t, uint64_t *))(v1 + 4);
  uint64_t v79 = (void (**)(uint64_t, uint64_t *))(v1 + 1);
  uint64_t v12 = MEMORY[0x1E4FBC870];
  uint64_t v86 = v0;
  uint64_t v90 = v4;
  unint64_t v92 = v19;
  uint64_t v8 = v91;
  uint64_t v4 = v104;
  uint64_t v103 = v15;
  uint64_t v97 = v25;
  uint64_t v93 = v26;
  while (1)
  {
    if (v98)
    {
      uint64_t v28 = MEMORY[0x1CB77D510](v24, v88);
      BOOL v29 = __OFADD__(v24++, 1);
      if (v29) {
        goto LABEL_81;
      }
    }
    else
    {
      uint64_t v28 = swift_retain();
      BOOL v29 = __OFADD__(v24++, 1);
      if (v29)
      {
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
    }
    uint64_t v105 = (unsigned int (**)(uint64_t, uint64_t, uint64_t *))v28;
    if (dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter())
    {
      dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter();
      swift_release();
      uint64_t v30 = v96;
      uint64_t v31 = v99;
    }
    else
    {
      uint64_t v30 = v96;
      uint64_t v31 = v99;
      (*v96)(v4, 1, 1, v99);
    }
    (*v94)(v8, v95, v31);
    (*v30)(v8, 0, 1, v31);
    uint64_t v32 = (uint64_t)&v15[*(int *)(v100 + 48)];
    outlined init with copy of MediaUserStateCenter?((uint64_t)v4, (uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    outlined init with copy of MediaUserStateCenter?((uint64_t)v8, v32, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    uint64_t v1 = (unsigned int (**)(uint64_t, uint64_t, uint64_t *))v15;
    char v33 = *v93;
    if ((*v93)(v15, 1, v31) == 1)
    {
      int v34 = v33((char *)v32, 1, v31);
      uint64_t v35 = v102;
      if (v34 == 1)
      {
        uint64_t v15 = v103;
        outlined destroy of MediaUserStateCenter?((uint64_t)v103, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v104, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
LABEL_34:
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v49 = Hasher._finalize()();
        uint64_t v50 = -1 << *(unsigned char *)(v12 + 32);
        unint64_t v19 = v49 & ~v50;
        uint64_t v0 = (uint64_t *)(v12 + 56);
        if ((*(void *)(v12 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
        {
          uint64_t v51 = ~v50;
          while ((*(unsigned char *)(*(void *)(v12 + 48) + v19) & 1) != 0)
          {
            char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v52) {
              goto LABEL_5;
            }
            unint64_t v19 = (v19 + 1) & v51;
            if (((*(unint64_t *)((char *)v0 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
              goto LABEL_49;
            }
          }
LABEL_54:
          swift_bridgeObjectRelease();
LABEL_5:
          swift_bridgeObjectRelease();
          swift_release();
          unint64_t v19 = v92;
          uint64_t v4 = v104;
          goto LABEL_6;
        }
LABEL_49:
        swift_bridgeObjectRelease();
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v106 = v12;
        if (*(void *)(v12 + 24) <= *(void *)(v12 + 16))
        {
          uint64_t v4 = v104;
          if (isUniquelyReferenced_nonNull_native) {
            specialized _NativeSet.resize(capacity:)();
          }
          else {
            specialized _NativeSet.copyAndResize(capacity:)();
          }
          uint64_t v12 = v106;
          Hasher.init(_seed:)();
          String.hash(into:)();
          Swift::Int v62 = Hasher._finalize()();
          uint64_t v63 = -1 << *(unsigned char *)(v12 + 32);
          unint64_t v19 = v62 & ~v63;
          uint64_t v0 = (uint64_t *)(v12 + 56);
          if ((*(void *)(v12 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
          {
            uint64_t v64 = ~v63;
            while ((*(unsigned char *)(*(void *)(v12 + 48) + v19) & 1) != 0)
            {
              char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v65) {
                goto LABEL_86;
              }
              unint64_t v19 = (v19 + 1) & v64;
              if (((*(unint64_t *)((char *)v0 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
              {
                uint64_t v4 = v104;
                goto LABEL_64;
              }
            }
            goto LABEL_85;
          }
LABEL_64:
          uint64_t v27 = v97;
          uint64_t v1 = v105;
        }
        else
        {
          uint64_t v4 = v104;
          uint64_t v1 = v105;
          uint64_t v27 = v97;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeSet.copy()();
            uint64_t v27 = v97;
            uint64_t v12 = v106;
          }
        }
        *(void *)(v12 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v19;
        *(unsigned char *)(*(void *)(v12 + 48) + v19) = 0;
        uint64_t v66 = *(void *)(v12 + 16);
        BOOL v29 = __OFADD__(v66, 1);
        uint64_t v67 = v66 + 1;
        if (v29) {
          goto LABEL_82;
        }
LABEL_78:
        *(void *)(v12 + 16) = v67;
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v19 = v92;
        goto LABEL_7;
      }
      goto LABEL_21;
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v15, v19, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    if (v33((char *)v32, 1, v31) == 1)
    {
      (*v82)(v19, v31);
      uint64_t v35 = v102;
LABEL_21:
      outlined destroy of MediaUserStateCenter?((uint64_t)v103, &demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
      outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v104, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      uint64_t v1 = v89;
      uint64_t v0 = &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?;
      uint64_t v36 = v101;
      goto LABEL_22;
    }
    Swift::Int v45 = v78;
    (*v77)(v78, v32, v31);
    _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues, MEMORY[0x1E4FA3240]);
    char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v47 = *v82;
    (*v82)(v19, v31);
    uint64_t v48 = v45;
    uint64_t v8 = v91;
    v47((unint64_t)v48, v31);
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v104, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    uint64_t v36 = v101;
    uint64_t v35 = v102;
    uint64_t v1 = v89;
    uint64_t v0 = &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?;
    if (v46) {
      goto LABEL_34;
    }
LABEL_22:
    if (dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter()
      && (uint64_t v37 = dispatch thunk of UsoEntity_common_SearchQualifier.similarity.getter(), swift_release(), v37))
    {
      dispatch thunk of UsoEntity_common_Similarity.definedValue.getter();
      swift_release();
      uint64_t v38 = v85;
      char v39 = v86;
    }
    else
    {
      uint64_t v38 = v85;
      char v39 = v86;
      (*v85)(v35, 1, 1, v86);
    }
    (*v83)(v36, v84, v39);
    (*v38)(v36, 0, 1, v39);
    uint64_t v40 = (uint64_t)v90;
    uint64_t v41 = (uint64_t)&v90[*(int *)(v87 + 48)];
    outlined init with copy of MediaUserStateCenter?(v35, (uint64_t)v90, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    outlined init with copy of MediaUserStateCenter?(v36, v41, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    uint64_t v42 = v35;
    uint64_t v43 = *v1;
    if ((*v1)(v40, 1, v39) == 1) {
      break;
    }
    uint64_t v44 = (uint64_t)v80;
    outlined init with copy of MediaUserStateCenter?(v40, (uint64_t)v80, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    if (v43(v41, 1, v39) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v101, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v102, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
      (*v79)(v44, v39);
      goto LABEL_31;
    }
    char v53 = v76;
    (*v75)(v76, v41, v39);
    _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type UsoEntity_common_Similarity.DefinedValues and conformance UsoEntity_common_Similarity.DefinedValues, MEMORY[0x1E4FA3258]);
    char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v1 = (unsigned int (**)(uint64_t, uint64_t, uint64_t *))v79;
    uint64_t v55 = *v79;
    (*v79)((uint64_t)v53, v39);
    outlined destroy of MediaUserStateCenter?(v101, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v102, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    v55(v44, v39);
    outlined destroy of MediaUserStateCenter?((uint64_t)v90, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    uint64_t v8 = v91;
    uint64_t v15 = v103;
    uint64_t v4 = v104;
    if (v54) {
      goto LABEL_41;
    }
LABEL_32:
    swift_release();
    unint64_t v19 = v92;
LABEL_6:
    uint64_t v27 = v97;
LABEL_7:
    if (v24 == v27) {
      goto LABEL_80;
    }
  }
  outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  if (v43(v41, 1, v39) != 1)
  {
LABEL_31:
    outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for (UsoEntity_common_Similarity.DefinedValues?, UsoEntity_common_Similarity.DefinedValues?));
    uint64_t v8 = v91;
    uint64_t v15 = v103;
    uint64_t v4 = v104;
    goto LABEL_32;
  }
  outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  uint64_t v8 = v91;
  uint64_t v15 = v103;
LABEL_41:
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v56 = Hasher._finalize()();
  uint64_t v57 = -1 << *(unsigned char *)(v12 + 32);
  unint64_t v19 = v56 & ~v57;
  uint64_t v0 = (uint64_t *)(v12 + 56);
  if ((*(void *)(v12 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
  {
    uint64_t v58 = ~v57;
    while (*(unsigned char *)(*(void *)(v12 + 48) + v19) != 1)
    {
      char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v59) {
        goto LABEL_5;
      }
      unint64_t v19 = (v19 + 1) & v58;
      if (((*(unint64_t *)((char *)v0 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        goto LABEL_46;
      }
    }
    goto LABEL_54;
  }
LABEL_46:
  swift_bridgeObjectRelease();
  int v60 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v106 = v12;
  if (*(void *)(v12 + 24) > *(void *)(v12 + 16))
  {
    uint64_t v4 = v104;
    uint64_t v1 = v105;
    uint64_t v27 = v97;
    if ((v60 & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v27 = v97;
      uint64_t v12 = v106;
    }
    goto LABEL_77;
  }
  uint64_t v4 = v104;
  if (v60) {
    specialized _NativeSet.resize(capacity:)();
  }
  else {
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = v106;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v68 = Hasher._finalize()();
  uint64_t v69 = -1 << *(unsigned char *)(v12 + 32);
  unint64_t v19 = v68 & ~v69;
  uint64_t v0 = (uint64_t *)(v12 + 56);
  if (((*(void *)(v12 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
  {
LABEL_76:
    uint64_t v27 = v97;
    uint64_t v1 = v105;
LABEL_77:
    *(void *)(v12 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v19;
    *(unsigned char *)(*(void *)(v12 + 48) + v19) = 1;
    uint64_t v72 = *(void *)(v12 + 16);
    BOOL v29 = __OFADD__(v72, 1);
    uint64_t v67 = v72 + 1;
    if (v29) {
      goto LABEL_83;
    }
    goto LABEL_78;
  }
  uint64_t v70 = ~v69;
  while (*(unsigned char *)(*(void *)(v12 + 48) + v19) != 1)
  {
    char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v71) {
      goto LABEL_86;
    }
    unint64_t v19 = (v19 + 1) & v70;
    if (((*(unint64_t *)((char *)v0 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
    {
      uint64_t v4 = v104;
      goto LABEL_76;
    }
  }
LABEL_85:
  swift_bridgeObjectRelease();
LABEL_86:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

BOOL closure #1 in closure #1 in AudioUsoIntent.modifiers.getter()
{
  return UsoEntity_common_MediaItem.isMoreOf()() || UsoEntity_common_MediaItem.isDifferentThan()();
}

uint64_t AudioUsoIntent.reference.getter()
{
  uint64_t result = *(unsigned __int8 *)(v0 + 400);
  if (result == 3)
  {
    uint64_t result = closure #1 in AudioUsoIntent.reference.getter();
    *(unsigned char *)(v0 + 400) = result;
  }
  return result;
}

uint64_t closure #1 in AudioUsoIntent.reference.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v22 - v4;
  unint64_t v6 = AudioUsoIntent.rootItems.getter();
  unint64_t v7 = v6;
  if (!(v6 >> 62))
  {
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    uint64_t v15 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v5, 1, 1, v15);
    goto LABEL_13;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v9 = 4;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v11 = v9 - 4;
    if ((v7 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = MEMORY[0x1CB77D510](v9 - 4, v7);
      uint64_t v13 = v9 - 3;
      if (__OFADD__(v11, 1)) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v7 + 8 * v9);
      swift_retain();
      uint64_t v13 = v9 - 3;
      if (__OFADD__(v11, 1))
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    uint64_t v14 = specialized UsoEntity_common_MediaItem.findFirst(options:with:)(v10, v12);
    swift_release();
    if (v14) {
      break;
    }
    ++v9;
    if (v13 == v8) {
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_retain();
  uint64_t v18 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
  swift_release();
  if (!v18)
  {
    swift_release();
    goto LABEL_12;
  }
  dispatch thunk of UsoEntity_common_ReferenceType.definedValue.getter();
  swift_release();
  swift_release();
  uint64_t v19 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v5, 1, v19) == 1) {
    goto LABEL_13;
  }
  outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v3, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v3, v19);
  if (v21 == *MEMORY[0x1E4FA3630])
  {
    uint64_t v16 = 1;
    goto LABEL_14;
  }
  if (v21 == *MEMORY[0x1E4FA3638])
  {
    uint64_t v16 = 0;
    goto LABEL_14;
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v19);
LABEL_13:
  uint64_t v16 = 2;
LABEL_14:
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  return v16;
}

uint64_t AudioUsoIntent.genres.getter()
{
  if (*(void *)(v0 + 408))
  {
    uint64_t v1 = *(void *)(v0 + 408);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.genres.getter();
    *(void *)(v0 + 408) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.genres.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v66 = *(void *)(v0 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1F4188790](v1);
  char v61 = (char *)&v59 - v5;
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  Swift::Int v68 = (char *)&v59 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v59 - v8;
  unint64_t v10 = AudioUsoIntent.rootItems.getter();
  unint64_t v11 = specialized Sequence.flatMap<A>(_:)(v10, MEMORY[0x1E4FBC860], (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  if (v11 >> 62)
  {
LABEL_64:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v12 = result;
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
  if (v12)
  {
    if (v12 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v15 = 0;
    do
    {
      if ((v11 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v15, v11);
      }
      else {
        swift_retain();
      }
      uint64_t v16 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      }
      uint64_t v17 = v14;
      unint64_t v18 = v14[2];
      uint64_t v19 = v17;
      unint64_t v20 = v17[3];
      if (v18 >= v20 >> 1) {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v18 + 1, 1, v19);
      }
      ++v15;
      v19[2] = v18 + 1;
      int v21 = &v19[v18];
      uint64_t v14 = v19;
      v21[4] = v16;
    }
    while (v12 != v15);
  }
  swift_bridgeObjectRelease();
  uint64_t v69 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v64 = v14[2];
  if (v64)
  {
    unint64_t v59 = v11;
    int v60 = v3;
    unint64_t v22 = 0;
    Swift::Int v62 = v14;
    uint64_t v63 = v14 + 4;
    uint64_t v3 = (char *)(v66 + 16);
    unint64_t v23 = (void (**)(char *, uint64_t))(v66 + 8);
    while (1)
    {
      if (v22 >= v14[2])
      {
        __break(1u);
        goto LABEL_64;
      }
      uint64_t v24 = v63[v22];
      unint64_t v11 = *(void *)(v24 + 16);
      if (!v11) {
        goto LABEL_18;
      }
      uint64_t v65 = v22;
      uint64_t v25 = v24 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
      uint64_t v26 = *(void *)(v66 + 72);
      uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
      uint64_t v67 = v24;
      swift_bridgeObjectRetain_n();
      while (1)
      {
        v27(v9, v25, v0);
        uint64_t v31 = UsoIdentifier.namespace.getter();
        if (!v32)
        {
          uint64_t v28 = v68;
          v27(v68, (uint64_t)v9, v0);
          goto LABEL_23;
        }
        if (v31 == 0x6E6547636973756DLL && v32 == 0xEA00000000006572) {
          break;
        }
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v28 = v68;
        v27(v68, (uint64_t)v9, v0);
        if (v33) {
          goto LABEL_31;
        }
LABEL_23:
        BOOL v29 = v28;
        uint64_t v30 = *v23;
        (*v23)(v29, v0);
LABEL_24:
        v30(v9, v0);
LABEL_25:
        v25 += v26;
        if (!--v11)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v14 = v62;
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease();
      v27(v68, (uint64_t)v9, v0);
LABEL_31:
      if (!UsoIdentifier.value.getter() && v34 == 0xE000000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v30 = *v23;
        (*v23)(v68, v0);
        goto LABEL_24;
      }
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v36 = *v23;
      (*v23)(v68, v0);
      v36(v9, v0);
      if (v35) {
        goto LABEL_25;
      }
      swift_bridgeObjectRelease();
      uint64_t v37 = v69;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v37 + 2) + 1, 1);
        uint64_t v37 = v69;
      }
      uint64_t v14 = v62;
      unint64_t v11 = *((void *)v37 + 2);
      unint64_t v38 = *((void *)v37 + 3);
      if (v11 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v11 + 1, 1);
        uint64_t v37 = v69;
      }
      *((void *)v37 + 2) = v11 + 1;
      *(void *)&v37[8 * v11 + 32] = v67;
LABEL_17:
      unint64_t v22 = v65;
LABEL_18:
      if (++v22 == v64)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v39 = v69;
        uint64_t v3 = v60;
        goto LABEL_42;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v39 = (char *)MEMORY[0x1E4FBC860];
LABEL_42:
  uint64_t v64 = *((void *)v39 + 2);
  if (!v64)
  {
    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v40 = (void (**)(char *, uint64_t))(v66 + 8);
  Swift::Int v62 = (void *)(v66 + 32);
  uint64_t v63 = v39 + 32;
  int v60 = v39;
  swift_retain();
  uint64_t v41 = 0;
  uint64_t v42 = (char *)MEMORY[0x1E4FBC860];
  while (2)
  {
    uint64_t v43 = v63[v41];
    uint64_t v44 = *(void *)(v43 + 16);
    if (!v44) {
      goto LABEL_46;
    }
    uint64_t v67 = v41;
    Swift::Int v68 = v42;
    uint64_t v45 = v43 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
    uint64_t v46 = *(void *)(v66 + 72);
    uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
    uint64_t v65 = v43;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      v47(v3, v45, v0);
      Swift::Int v49 = v3;
      uint64_t v50 = UsoIdentifier.namespace.getter();
      if (!v51) {
        goto LABEL_50;
      }
      if (v50 == 0x6E6547636973756DLL && v51 == 0xEA00000000006572) {
        break;
      }
      char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v48) {
        goto LABEL_55;
      }
LABEL_50:
      uint64_t v3 = v49;
      (*v40)(v49, v0);
      v45 += v46;
      if (!--v44)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v42 = v68;
        goto LABEL_45;
      }
    }
    swift_bridgeObjectRelease();
LABEL_55:
    swift_bridgeObjectRelease();
    char v52 = v61;
    uint64_t v3 = v49;
    ((void (*)(char *, char *, uint64_t))*v62)(v61, v49, v0);
    uint64_t v53 = UsoIdentifier.value.getter();
    uint64_t v55 = v54;
    (*v40)(v52, v0);
    swift_bridgeObjectRelease();
    uint64_t v42 = v68;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v42 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v42 + 2) + 1, 1, v42);
    }
    unint64_t v57 = *((void *)v42 + 2);
    unint64_t v56 = *((void *)v42 + 3);
    if (v57 >= v56 >> 1) {
      uint64_t v42 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1, v42);
    }
    *((void *)v42 + 2) = v57 + 1;
    uint64_t v58 = &v42[16 * v57];
    *((void *)v58 + 4) = v53;
    *((void *)v58 + 5) = v55;
LABEL_45:
    uint64_t v41 = v67;
LABEL_46:
    if (++v41 != v64) {
      continue;
    }
    break;
  }
  swift_release_n();
  return (uint64_t)v42;
}

uint64_t AudioUsoIntent.moods.getter()
{
  if (*(void *)(v0 + 416))
  {
    uint64_t v1 = *(void *)(v0 + 416);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.moods.getter();
    *(void *)(v0 + 416) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.moods.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v66 = *(void *)(v0 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1F4188790](v1);
  char v61 = (char *)&v59 - v5;
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  Swift::Int v68 = (char *)&v59 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v59 - v8;
  unint64_t v10 = AudioUsoIntent.rootItems.getter();
  unint64_t v11 = specialized Sequence.flatMap<A>(_:)(v10, MEMORY[0x1E4FBC860], (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  if (v11 >> 62)
  {
LABEL_64:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v12 = result;
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
  if (v12)
  {
    if (v12 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v15 = 0;
    do
    {
      if ((v11 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v15, v11);
      }
      else {
        swift_retain();
      }
      uint64_t v16 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      }
      uint64_t v17 = v14;
      unint64_t v18 = v14[2];
      uint64_t v19 = v17;
      unint64_t v20 = v17[3];
      if (v18 >= v20 >> 1) {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v18 + 1, 1, v19);
      }
      ++v15;
      v19[2] = v18 + 1;
      int v21 = &v19[v18];
      uint64_t v14 = v19;
      v21[4] = v16;
    }
    while (v12 != v15);
  }
  swift_bridgeObjectRelease();
  uint64_t v69 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v64 = v14[2];
  if (v64)
  {
    unint64_t v59 = v11;
    int v60 = v3;
    unint64_t v22 = 0;
    Swift::Int v62 = v14;
    uint64_t v63 = v14 + 4;
    uint64_t v3 = (char *)(v66 + 16);
    unint64_t v23 = (void (**)(char *, uint64_t))(v66 + 8);
    while (1)
    {
      if (v22 >= v14[2])
      {
        __break(1u);
        goto LABEL_64;
      }
      uint64_t v24 = v63[v22];
      unint64_t v11 = *(void *)(v24 + 16);
      if (!v11) {
        goto LABEL_18;
      }
      uint64_t v65 = v22;
      uint64_t v25 = v24 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
      uint64_t v26 = *(void *)(v66 + 72);
      uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
      uint64_t v67 = v24;
      swift_bridgeObjectRetain_n();
      while (1)
      {
        v27(v9, v25, v0);
        uint64_t v31 = UsoIdentifier.namespace.getter();
        if (!v32)
        {
          uint64_t v28 = v68;
          v27(v68, (uint64_t)v9, v0);
          goto LABEL_23;
        }
        if (v31 == 0x616C50616964656DLL && v32 == 0xEF646F6F4D726579) {
          break;
        }
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v28 = v68;
        v27(v68, (uint64_t)v9, v0);
        if (v33) {
          goto LABEL_31;
        }
LABEL_23:
        BOOL v29 = v28;
        uint64_t v30 = *v23;
        (*v23)(v29, v0);
LABEL_24:
        v30(v9, v0);
LABEL_25:
        v25 += v26;
        if (!--v11)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v14 = v62;
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease();
      v27(v68, (uint64_t)v9, v0);
LABEL_31:
      if (!UsoIdentifier.value.getter() && v34 == 0xE000000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v30 = *v23;
        (*v23)(v68, v0);
        goto LABEL_24;
      }
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v36 = *v23;
      (*v23)(v68, v0);
      v36(v9, v0);
      if (v35) {
        goto LABEL_25;
      }
      swift_bridgeObjectRelease();
      uint64_t v37 = v69;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v37 + 2) + 1, 1);
        uint64_t v37 = v69;
      }
      uint64_t v14 = v62;
      unint64_t v11 = *((void *)v37 + 2);
      unint64_t v38 = *((void *)v37 + 3);
      if (v11 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v11 + 1, 1);
        uint64_t v37 = v69;
      }
      *((void *)v37 + 2) = v11 + 1;
      *(void *)&v37[8 * v11 + 32] = v67;
LABEL_17:
      unint64_t v22 = v65;
LABEL_18:
      if (++v22 == v64)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v39 = v69;
        uint64_t v3 = v60;
        goto LABEL_42;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v39 = (char *)MEMORY[0x1E4FBC860];
LABEL_42:
  uint64_t v64 = *((void *)v39 + 2);
  if (!v64)
  {
    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v40 = (void (**)(char *, uint64_t))(v66 + 8);
  Swift::Int v62 = (void *)(v66 + 32);
  uint64_t v63 = v39 + 32;
  int v60 = v39;
  swift_retain();
  uint64_t v41 = 0;
  uint64_t v42 = (char *)MEMORY[0x1E4FBC860];
  while (2)
  {
    uint64_t v43 = v63[v41];
    uint64_t v44 = *(void *)(v43 + 16);
    if (!v44) {
      goto LABEL_46;
    }
    uint64_t v67 = v41;
    Swift::Int v68 = v42;
    uint64_t v45 = v43 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
    uint64_t v46 = *(void *)(v66 + 72);
    uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
    uint64_t v65 = v43;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      v47(v3, v45, v0);
      Swift::Int v49 = v3;
      uint64_t v50 = UsoIdentifier.namespace.getter();
      if (!v51) {
        goto LABEL_50;
      }
      if (v50 == 0x616C50616964656DLL && v51 == 0xEF646F6F4D726579) {
        break;
      }
      char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v48) {
        goto LABEL_55;
      }
LABEL_50:
      uint64_t v3 = v49;
      (*v40)(v49, v0);
      v45 += v46;
      if (!--v44)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v42 = v68;
        goto LABEL_45;
      }
    }
    swift_bridgeObjectRelease();
LABEL_55:
    swift_bridgeObjectRelease();
    char v52 = v61;
    uint64_t v3 = v49;
    ((void (*)(char *, char *, uint64_t))*v62)(v61, v49, v0);
    uint64_t v53 = UsoIdentifier.value.getter();
    uint64_t v55 = v54;
    (*v40)(v52, v0);
    swift_bridgeObjectRelease();
    uint64_t v42 = v68;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v42 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v42 + 2) + 1, 1, v42);
    }
    unint64_t v57 = *((void *)v42 + 2);
    unint64_t v56 = *((void *)v42 + 3);
    if (v57 >= v56 >> 1) {
      uint64_t v42 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1, v42);
    }
    *((void *)v42 + 2) = v57 + 1;
    uint64_t v58 = &v42[16 * v57];
    *((void *)v58 + 4) = v53;
    *((void *)v58 + 5) = v55;
LABEL_45:
    uint64_t v41 = v67;
LABEL_46:
    if (++v41 != v64) {
      continue;
    }
    break;
  }
  swift_release_n();
  return (uint64_t)v42;
}

uint64_t AudioUsoIntent.activities.getter()
{
  if (*(void *)(v0 + 424))
  {
    uint64_t v1 = *(void *)(v0 + 424);
  }
  else
  {
    uint64_t v1 = closure #1 in AudioUsoIntent.activities.getter();
    *(void *)(v0 + 424) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.activities.getter()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v66 = *(void *)(v0 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1F4188790](v1);
  char v61 = (char *)&v59 - v5;
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v70 = (char *)&v59 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v59 - v8;
  unint64_t v10 = AudioUsoIntent.rootItems.getter();
  unint64_t v11 = specialized Sequence.flatMap<A>(_:)(v10, MEMORY[0x1E4FBC860], (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  if (v11 >> 62)
  {
LABEL_64:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v12 = result;
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
  if (v12)
  {
    if (v12 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v15 = 0;
    do
    {
      if ((v11 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v15, v11);
      }
      else {
        swift_retain();
      }
      uint64_t v16 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      }
      uint64_t v17 = v14;
      unint64_t v18 = v14[2];
      uint64_t v19 = v17;
      unint64_t v20 = v17[3];
      if (v18 >= v20 >> 1) {
        uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v18 + 1, 1, v19);
      }
      ++v15;
      v19[2] = v18 + 1;
      int v21 = &v19[v18];
      uint64_t v14 = v19;
      v21[4] = v16;
    }
    while (v12 != v15);
  }
  swift_bridgeObjectRelease();
  char v71 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v64 = v14[2];
  if (v64)
  {
    unint64_t v59 = v11;
    int v60 = v3;
    unint64_t v22 = 0;
    Swift::Int v62 = v14;
    uint64_t v63 = v14 + 4;
    uint64_t v3 = (char *)(v66 + 16);
    unint64_t v23 = (void (**)(char *, uint64_t))(v66 + 8);
    Swift::Int v68 = "de";
    unint64_t v69 = 0x80000001C919C460;
    while (1)
    {
      if (v22 >= v14[2])
      {
        __break(1u);
        goto LABEL_64;
      }
      uint64_t v24 = v63[v22];
      unint64_t v11 = *(void *)(v24 + 16);
      if (!v11) {
        goto LABEL_18;
      }
      uint64_t v65 = v22;
      uint64_t v25 = v24 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
      uint64_t v26 = *(void *)(v66 + 72);
      uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
      uint64_t v67 = v24;
      swift_bridgeObjectRetain_n();
      while (1)
      {
        v27(v9, v25, v0);
        uint64_t v31 = UsoIdentifier.namespace.getter();
        if (!v32)
        {
          uint64_t v28 = v70;
          v27(v70, (uint64_t)v9, v0);
          goto LABEL_23;
        }
        if (v31 == 0xD000000000000013 && v32 == v69) {
          break;
        }
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v28 = v70;
        v27(v70, (uint64_t)v9, v0);
        if (v33) {
          goto LABEL_31;
        }
LABEL_23:
        BOOL v29 = v28;
        uint64_t v30 = *v23;
        (*v23)(v29, v0);
LABEL_24:
        v30(v9, v0);
LABEL_25:
        v25 += v26;
        if (!--v11)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v14 = v62;
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease();
      v27(v70, (uint64_t)v9, v0);
LABEL_31:
      if (!UsoIdentifier.value.getter() && v34 == 0xE000000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v30 = *v23;
        (*v23)(v70, v0);
        goto LABEL_24;
      }
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v36 = *v23;
      (*v23)(v70, v0);
      v36(v9, v0);
      if (v35) {
        goto LABEL_25;
      }
      swift_bridgeObjectRelease();
      uint64_t v37 = v71;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v37 + 2) + 1, 1);
        uint64_t v37 = v71;
      }
      uint64_t v14 = v62;
      unint64_t v11 = *((void *)v37 + 2);
      unint64_t v38 = *((void *)v37 + 3);
      if (v11 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v11 + 1, 1);
        uint64_t v37 = v71;
      }
      *((void *)v37 + 2) = v11 + 1;
      *(void *)&v37[8 * v11 + 32] = v67;
LABEL_17:
      unint64_t v22 = v65;
LABEL_18:
      if (++v22 == v64)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v39 = v71;
        uint64_t v3 = v60;
        goto LABEL_42;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v39 = (char *)MEMORY[0x1E4FBC860];
LABEL_42:
  uint64_t v64 = *((void *)v39 + 2);
  if (!v64)
  {
    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v40 = (void (**)(char *, uint64_t))(v66 + 8);
  Swift::Int v62 = (void *)(v66 + 32);
  uint64_t v63 = v39 + 32;
  int v60 = v39;
  swift_retain();
  uint64_t v41 = 0;
  uint64_t v42 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v70 = "de";
  unint64_t v69 = 0x80000001C919C460;
  while (2)
  {
    uint64_t v43 = v63[v41];
    uint64_t v44 = *(void *)(v43 + 16);
    if (!v44) {
      goto LABEL_46;
    }
    uint64_t v67 = v41;
    Swift::Int v68 = v42;
    uint64_t v45 = v43 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
    uint64_t v46 = *(void *)(v66 + 72);
    uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
    uint64_t v65 = v43;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      v47(v3, v45, v0);
      Swift::Int v49 = v3;
      uint64_t v50 = UsoIdentifier.namespace.getter();
      if (!v51) {
        goto LABEL_50;
      }
      if (v50 == 0xD000000000000013 && v51 == v69) {
        break;
      }
      char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v48) {
        goto LABEL_55;
      }
LABEL_50:
      uint64_t v3 = v49;
      (*v40)(v49, v0);
      v45 += v46;
      if (!--v44)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v42 = v68;
        goto LABEL_45;
      }
    }
    swift_bridgeObjectRelease();
LABEL_55:
    swift_bridgeObjectRelease();
    char v52 = v61;
    uint64_t v3 = v49;
    ((void (*)(char *, char *, uint64_t))*v62)(v61, v49, v0);
    uint64_t v53 = UsoIdentifier.value.getter();
    uint64_t v55 = v54;
    (*v40)(v52, v0);
    swift_bridgeObjectRelease();
    uint64_t v42 = v68;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v42 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v42 + 2) + 1, 1, v42);
    }
    unint64_t v57 = *((void *)v42 + 2);
    unint64_t v56 = *((void *)v42 + 3);
    if (v57 >= v56 >> 1) {
      uint64_t v42 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1, v42);
    }
    *((void *)v42 + 2) = v57 + 1;
    uint64_t v58 = &v42[16 * v57];
    *((void *)v58 + 4) = v53;
    *((void *)v58 + 5) = v55;
LABEL_45:
    uint64_t v41 = v67;
LABEL_46:
    if (++v41 != v64) {
      continue;
    }
    break;
  }
  swift_release_n();
  return (uint64_t)v42;
}

uint64_t AudioUsoIntent.radioType.getter()
{
  uint64_t result = *(unsigned __int8 *)(v0 + 432);
  if (result == 3)
  {
    uint64_t result = closure #1 in AudioUsoIntent.radioType.getter();
    *(unsigned char *)(v0 + 432) = result;
  }
  return result;
}

uint64_t closure #1 in AudioUsoIntent.radioType.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  unint64_t v3 = (unint64_t)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  uint64_t v75 = (char *)&v66 - v4;
  uint64_t v5 = type metadata accessor for UsoIdentifier();
  uint64_t v73 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v78 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v79 = (char *)&v66 - v9;
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)&v66 - v10;
  unint64_t v12 = AudioUsoIntent.rootItems.getter();
  unint64_t v13 = specialized Sequence.flatMap<A>(_:)(v12, MEMORY[0x1E4FBC860], (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  if (v13 >> 62)
  {
LABEL_77:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t v17 = v78;
  uint64_t v68 = v3;
  if (v14)
  {
    if (v14 < 1)
    {
      __break(1u);
      return result;
    }
    unint64_t v3 = 0;
    unint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v3, v13);
      }
      else {
        swift_retain();
      }
      uint64_t v19 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      }
      unint64_t v20 = v18;
      unint64_t v21 = v18[2];
      unint64_t v22 = v20;
      unint64_t v23 = v20[3];
      if (v21 >= v23 >> 1) {
        unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v21 + 1, 1, v22);
      }
      ++v3;
      void v22[2] = v21 + 1;
      uint64_t v24 = &v22[v21];
      unint64_t v18 = v22;
      void v24[4] = v19;
      uint64_t v17 = v78;
    }
    while (v14 != v3);
  }
  else
  {
    unint64_t v18 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  uint64_t v80 = v16;
  uint64_t v71 = v18[2];
  if (v71)
  {
    uint64_t v67 = (void (**)(char *, char *, uint64_t))v13;
    unint64_t v25 = 0;
    unint64_t v69 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v18;
    uint64_t v70 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 4);
    unint64_t v13 = v73 + 16;
    uint64_t v26 = (void (**)(const char *, uint64_t))(v73 + 8);
    unint64_t v76 = "mediaPlayerActivity";
    unint64_t v77 = 0x80000001C919C480;
    while (1)
    {
      if (v25 >= v18[2])
      {
        __break(1u);
        goto LABEL_77;
      }
      uint64_t v27 = v70[v25];
      uint64_t v28 = *((void *)v27 + 2);
      if (!v28) {
        goto LABEL_20;
      }
      unint64_t v72 = v25;
      unint64_t v3 = (unint64_t)v27
         + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
      uint64_t v29 = *(void *)(v73 + 72);
      uint64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v73 + 16);
      uint64_t v74 = (char *)v27;
      swift_bridgeObjectRetain_n();
      while (1)
      {
        v30(v11, v3, v5);
        uint64_t v33 = UsoIdentifier.namespace.getter();
        if (!v34)
        {
          uint64_t v31 = v79;
          v30((char *)v79, (unint64_t)v11, v5);
          goto LABEL_25;
        }
        if (v33 == 0xD000000000000014 && v34 == v77) {
          break;
        }
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v31 = v79;
        v30((char *)v79, (unint64_t)v11, v5);
        if (v35) {
          goto LABEL_33;
        }
LABEL_25:
        uint64_t v32 = *v26;
        (*v26)(v31, v5);
LABEL_26:
        v32(v11, v5);
LABEL_27:
        v3 += v29;
        if (!--v28)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v17 = v78;
          unint64_t v18 = v69;
          goto LABEL_19;
        }
      }
      swift_bridgeObjectRelease();
      v30((char *)v79, (unint64_t)v11, v5);
LABEL_33:
      if (!UsoIdentifier.value.getter() && v36 == 0xE000000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v32 = *v26;
        (*v26)(v79, v5);
        goto LABEL_26;
      }
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      unint64_t v38 = *v26;
      (*v26)(v79, v5);
      v38(v11, v5);
      if (v37) {
        goto LABEL_27;
      }
      swift_bridgeObjectRelease();
      uint64_t v39 = v80;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v39 + 16) + 1, 1);
        uint64_t v39 = v80;
      }
      unint64_t v18 = v69;
      unint64_t v3 = *(void *)(v39 + 16);
      unint64_t v40 = *(void *)(v39 + 24);
      uint64_t v41 = v74;
      if (v3 >= v40 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v3 + 1, 1);
        uint64_t v41 = v74;
        uint64_t v39 = v80;
      }
      *(void *)(v39 + 16) = v3 + 1;
      *(void *)(v39 + 8 * v3 + 32) = v41;
      uint64_t v17 = v78;
LABEL_19:
      unint64_t v25 = v72;
LABEL_20:
      if (++v25 == v71)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v42 = v80;
        goto LABEL_44;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v42 = MEMORY[0x1E4FBC860];
LABEL_44:
  uint64_t v43 = v68;
  uint64_t v44 = (uint64_t)v75;
  unint64_t v72 = *(void *)(v42 + 16);
  if (v72)
  {
    uint64_t v45 = (void (**)(char *, uint64_t))(v73 + 8);
    uint64_t v66 = v42;
    uint64_t v67 = (void (**)(char *, char *, uint64_t))(v73 + 32);
    uint64_t v70 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56);
    uint64_t v71 = v42 + 32;
    unint64_t v69 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
    swift_retain();
    uint64_t v46 = 0;
    uint64_t v47 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v79 = "mediaPlayerActivity";
    unint64_t v77 = 0x80000001C919C480;
    while (1)
    {
      uint64_t v48 = *(void *)(v71 + 8 * v46);
      uint64_t v49 = *(void *)(v48 + 16);
      unint64_t v76 = (const char *)v48;
      if (!v49)
      {
        swift_bridgeObjectRetain();
        uint64_t v56 = 1;
        goto LABEL_59;
      }
      uint64_t v74 = v47;
      uint64_t v50 = v48 + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
      uint64_t v51 = *(void *)(v73 + 72);
      char v52 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
      swift_bridgeObjectRetain_n();
      while (1)
      {
        v52(v17, v50, v5);
        uint64_t v54 = UsoIdentifier.namespace.getter();
        if (!v55) {
          goto LABEL_51;
        }
        if (v54 == 0xD000000000000014 && v55 == v77) {
          break;
        }
        char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v53) {
          goto LABEL_58;
        }
LABEL_51:
        uint64_t v17 = v78;
        (*v45)(v78, v5);
        v50 += v51;
        if (!--v49)
        {
          swift_bridgeObjectRelease();
          uint64_t v56 = 1;
          uint64_t v43 = v68;
          uint64_t v47 = v74;
          uint64_t v44 = (uint64_t)v75;
          goto LABEL_59;
        }
      }
      swift_bridgeObjectRelease();
LABEL_58:
      swift_bridgeObjectRelease();
      uint64_t v44 = (uint64_t)v75;
      (*v67)(v75, v78, v5);
      uint64_t v56 = 0;
      uint64_t v43 = v68;
      uint64_t v47 = v74;
LABEL_59:
      (*v70)(v44, v56, 1, v5);
      outlined init with copy of MediaUserStateCenter?(v44, v43, &demangling cache variable for type metadata for UsoIdentifier?);
      if ((*v69)(v43, 1, v5) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for UsoIdentifier?);
        uint64_t v57 = 0;
        uint64_t v58 = (void *)0xE000000000000000;
      }
      else
      {
        uint64_t v57 = UsoIdentifier.value.getter();
        uint64_t v58 = v59;
        (*v45)((char *)v43, v5);
      }
      v60._uint64_t countAndFlagsBits = v57;
      v60._object = v58;
      Swift::Int v61 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of closure #1 in AudioUsoIntent.radioType.getter, v60);
      swift_bridgeObjectRelease();
      if (v61)
      {
        if (v61 == 1)
        {
          char v62 = 1;
          goto LABEL_66;
        }
        outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for UsoIdentifier?);
        swift_bridgeObjectRelease();
      }
      else
      {
        char v62 = 0;
LABEL_66:
        outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for UsoIdentifier?);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v47 + 2) + 1, 1, v47);
        }
        unint64_t v64 = *((void *)v47 + 2);
        unint64_t v63 = *((void *)v47 + 3);
        if (v64 >= v63 >> 1) {
          uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v64 + 1, 1, v47);
        }
        *((void *)v47 + 2) = v64 + 1;
        v47[v64 + 32] = v62;
        uint64_t v44 = (uint64_t)v75;
      }
      ++v46;
      uint64_t v17 = v78;
      if (v46 == v72)
      {
        swift_release_n();
        if (*((void *)v47 + 2)) {
          goto LABEL_72;
        }
LABEL_74:
        swift_bridgeObjectRelease();
        return 2;
      }
    }
  }
  swift_release();
  uint64_t v47 = (char *)MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16)) {
    goto LABEL_74;
  }
LABEL_72:
  uint64_t v65 = v47[32];
  swift_bridgeObjectRelease();
  return v65;
}

uint64_t AudioUsoIntent.frequency.getter()
{
  if ((*(unsigned char *)(v0 + 449) & 1) == 0) {
    return *(void *)(v0 + 440);
  }
  uint64_t result = closure #1 in AudioUsoIntent.frequency.getter();
  *(void *)(v0 + 440) = result;
  *(unsigned char *)(v0 + 448) = v2 & 1;
  *(unsigned char *)(v0 + 449) = 0;
  return result;
}

uint64_t closure #1 in AudioUsoIntent.frequency.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  unint64_t v3 = (char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  uint64_t v5 = (uint64_t)&v72 - v4;
  uint64_t v6 = type metadata accessor for UsoIdentifier();
  uint64_t v82 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v86 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v87 = (char *)&v72 - v10;
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)&v72 - v11;
  unint64_t v13 = AudioUsoIntent.rootItems.getter();
  unint64_t v14 = 0;
  unint64_t v15 = specialized Sequence.flatMap<A>(_:)(v13, MEMORY[0x1E4FBC860], (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  unint64_t v76 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v15;
  if (v15 >> 62)
  {
LABEL_87:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v16 = result;
  }
  else
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v18 = MEMORY[0x1E4FBC860];
  uint64_t v79 = v3;
  uint64_t v83 = v5;
  unint64_t v73 = v14;
  if (v16)
  {
    if (v16 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v19 = 0;
    unint64_t v14 = (unint64_t)v76;
    unint64_t v20 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v14 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v19, v14);
      }
      else {
        swift_retain();
      }
      uint64_t v21 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
      }
      unint64_t v22 = v20;
      unint64_t v23 = v20[2];
      uint64_t v24 = v22;
      unint64_t v25 = v22[3];
      uint64_t v5 = v23 + 1;
      if (v23 >= v25 >> 1) {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v23 + 1, 1, v24);
      }
      ++v19;
      v24[2] = v5;
      uint64_t v26 = &v24[v23];
      unint64_t v20 = v24;
      v26[4] = v21;
    }
    while (v16 != v19);
  }
  else
  {
    unint64_t v20 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v14 = (unint64_t)v76;
  }
  swift_bridgeObjectRelease();
  uint64_t v88 = v18;
  uint64_t v78 = v20[2];
  if (v78)
  {
    unint64_t v27 = 0;
    unint64_t v77 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 4);
    unint64_t v3 = (char *)(v82 + 8);
    unsigned int v84 = "mediaPlayerReference";
    unint64_t v85 = 0x80000001C919C4E0;
    uint64_t v75 = v20;
    while (1)
    {
      if (v27 >= v20[2])
      {
        __break(1u);
        goto LABEL_87;
      }
      uint64_t v29 = v77[v27];
      uint64_t v30 = *((void *)v29 + 2);
      if (!v30) {
        goto LABEL_20;
      }
      unint64_t v80 = v27;
      unint64_t v81 = v29;
      uint64_t v31 = (char *)v29 + ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80));
      uint64_t v32 = *(void *)(v82 + 72);
      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
      swift_bridgeObjectRetain_n();
      while (1)
      {
        v33(v12, v31, v6);
        uint64_t v37 = UsoIdentifier.namespace.getter();
        if (!v38)
        {
          uint64_t v34 = v87;
          v33((char *)v87, v12, v6);
          goto LABEL_25;
        }
        if (v37 == 0xD000000000000015 && v38 == v85) {
          break;
        }
        uint64_t v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v34 = v87;
        v33((char *)v87, v12, v6);
        if (v5) {
          goto LABEL_33;
        }
LABEL_25:
        char v35 = v34;
        uint64_t v36 = *(void (**)(char *, uint64_t))v3;
        (*(void (**)(const char *, uint64_t))v3)(v35, v6);
LABEL_26:
        v36(v12, v6);
LABEL_27:
        v31 += v32;
        if (!--v30)
        {
          swift_bridgeObjectRelease_n();
          unint64_t v20 = v75;
          unint64_t v14 = (unint64_t)v76;
          goto LABEL_19;
        }
      }
      swift_bridgeObjectRelease();
      v33((char *)v87, v12, v6);
LABEL_33:
      if (!UsoIdentifier.value.getter() && v39 == 0xE000000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v36 = *(void (**)(char *, uint64_t))v3;
        (*(void (**)(const char *, uint64_t))v3)(v87, v6);
        goto LABEL_26;
      }
      uint64_t v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      unint64_t v40 = *(void (**)(char *, uint64_t))v3;
      (*(void (**)(const char *, uint64_t))v3)(v87, v6);
      v40(v12, v6);
      if (v5) {
        goto LABEL_27;
      }
      uint64_t v41 = v81;
      swift_bridgeObjectRelease();
      uint64_t v42 = v88;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v42 + 16) + 1, 1);
        uint64_t v41 = v81;
        uint64_t v42 = v88;
      }
      unint64_t v20 = v75;
      unint64_t v44 = *(void *)(v42 + 16);
      unint64_t v43 = *(void *)(v42 + 24);
      uint64_t v5 = v44 + 1;
      if (v44 >= v43 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
        uint64_t v41 = v81;
        uint64_t v42 = v88;
      }
      *(void *)(v42 + 16) = v5;
      *(void *)(v42 + 8 * v44 + 32) = v41;
      unint64_t v14 = (unint64_t)v76;
LABEL_19:
      unint64_t v27 = v80;
LABEL_20:
      ++v27;
      uint64_t v28 = v83;
      if (v27 == v78)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v45 = v88;
        goto LABEL_44;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v45 = MEMORY[0x1E4FBC860];
  uint64_t v28 = v83;
LABEL_44:
  uint64_t v46 = v86;
  unint64_t v80 = *(void *)(v45 + 16);
  if (v80)
  {
    uint64_t v47 = (void (**)(char *, uint64_t))(v82 + 8);
    unint64_t v77 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56);
    uint64_t v78 = v45 + 32;
    uint64_t v75 = (void *)(v82 + 32);
    unint64_t v76 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
    uint64_t v74 = v45;
    swift_retain();
    uint64_t v48 = 0;
    uint64_t v49 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC860];
    uint64_t v87 = "mediaPlayerReference";
    unint64_t v85 = 0x80000001C919C4E0;
    while (1)
    {
      uint64_t v50 = *(void *)(v78 + 8 * v48);
      uint64_t v51 = *(void *)(v50 + 16);
      unsigned int v84 = (const char *)v50;
      if (!v51)
      {
        swift_bridgeObjectRetain();
        uint64_t v58 = 1;
        uint64_t v59 = (uint64_t)v79;
        goto LABEL_60;
      }
      unint64_t v81 = v49;
      uint64_t v52 = v50 + ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80));
      uint64_t v53 = *(void *)(v82 + 72);
      uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 16);
      swift_bridgeObjectRetain_n();
      while (1)
      {
        v54(v46, v52, v6);
        uint64_t v56 = UsoIdentifier.namespace.getter();
        if (!v57) {
          goto LABEL_51;
        }
        if (v56 == 0xD000000000000015 && v57 == v85) {
          break;
        }
        char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v55) {
          goto LABEL_58;
        }
LABEL_51:
        uint64_t v46 = v86;
        (*v47)(v86, v6);
        v52 += v53;
        if (!--v51)
        {
          swift_bridgeObjectRelease();
          uint64_t v58 = 1;
          uint64_t v59 = (uint64_t)v79;
          uint64_t v28 = v83;
          goto LABEL_59;
        }
      }
      swift_bridgeObjectRelease();
LABEL_58:
      swift_bridgeObjectRelease();
      uint64_t v28 = v83;
      ((void (*)(uint64_t, char *, uint64_t))*v75)(v83, v86, v6);
      uint64_t v58 = 0;
      uint64_t v59 = (uint64_t)v79;
LABEL_59:
      uint64_t v49 = v81;
LABEL_60:
      (*v77)(v28, v58, 1, v6);
      outlined init with copy of MediaUserStateCenter?(v28, v59, &demangling cache variable for type metadata for UsoIdentifier?);
      if ((*v76)(v59, 1, v6) == 1)
      {
        uint64_t v60 = outlined destroy of MediaUserStateCenter?(v59, &demangling cache variable for type metadata for UsoIdentifier?);
        uint64_t v61 = 0;
        unint64_t v62 = 0xE000000000000000;
      }
      else
      {
        uint64_t v61 = UsoIdentifier.value.getter();
        unint64_t v62 = v63;
        uint64_t v60 = ((uint64_t (*)(uint64_t, uint64_t))*v47)(v59, v6);
      }
      uint64_t v91 = 0;
      MEMORY[0x1F4188790](v60);
      *(&v72 - 2) = (uint64_t)&v91;
      if ((v62 & 0x1000000000000000) != 0) {
        goto LABEL_80;
      }
      if ((v62 & 0x2000000000000000) == 0)
      {
        if ((v61 & 0x1000000000000000) != 0)
        {
          unint64_t v64 = *(unsigned __int8 *)((v62 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          if (v64 < 0x21 && ((0x100003E01uLL >> v64) & 1) != 0) {
            goto LABEL_73;
          }
LABEL_71:
          uint64_t v65 = (unsigned char *)_swift_stdlib_strtod_clocale();
          if (!v65) {
            goto LABEL_73;
          }
          BOOL v90 = *v65 == 0;
          goto LABEL_74;
        }
LABEL_80:
        unint64_t v70 = v73;
        _StringGuts._slowWithCString<A>(_:)();
        unint64_t v73 = v70;
        goto LABEL_74;
      }
      uint64_t v88 = v61;
      uint64_t v89 = v62 & 0xFFFFFFFFFFFFFFLL;
      if (v61 > 0x20u || ((0x100003E01uLL >> v61) & 1) == 0) {
        goto LABEL_71;
      }
LABEL_73:
      BOOL v90 = 0;
LABEL_74:
      swift_bridgeObjectRelease();
      if (v90)
      {
        uint64_t v66 = v91;
        outlined destroy of MediaUserStateCenter?(v28, &demangling cache variable for type metadata for UsoIdentifier?);
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v46 = v86;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v49 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v49 + 2) + 1, 1, v49);
        }
        unint64_t v69 = *((void *)v49 + 2);
        unint64_t v68 = *((void *)v49 + 3);
        if (v69 >= v68 >> 1) {
          uint64_t v49 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, v49);
        }
        *((void *)v49 + 2) = v69 + 1;
        *((void *)v49 + v69 + 4) = v66;
      }
      else
      {
        outlined destroy of MediaUserStateCenter?(v28, &demangling cache variable for type metadata for UsoIdentifier?);
        swift_bridgeObjectRelease();
        uint64_t v46 = v86;
      }
      if (++v48 == v80)
      {
        swift_release_n();
        if (*((void *)v49 + 2)) {
          goto LABEL_82;
        }
LABEL_84:
        uint64_t v71 = 0;
        goto LABEL_85;
      }
    }
  }
  swift_release();
  uint64_t v49 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC860];
  if (!*(void *)(MEMORY[0x1E4FBC860] + 16)) {
    goto LABEL_84;
  }
LABEL_82:
  uint64_t v71 = *((void *)v49 + 4);
LABEL_85:
  swift_bridgeObjectRelease();
  return v71;
}

uint64_t closure #2 in closure #1 in AudioUsoIntent.noun.getter()
{
  uint64_t v0 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v0;
  unint64_t v3 = v1;
  swift_bridgeObjectRelease();
  uint64_t v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0) {
    uint64_t v4 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
  {
    swift_release();
    return 0;
  }
  return 1;
}

uint64_t AudioUsoIntent.mediaIdentifier.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 456);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioUsoIntent.mediaIdentifier.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 456) = a1;
  *(void *)(v2 + 464) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*AudioUsoIntent.mediaIdentifier.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioUsoIntent.UsoNamespace(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = AudioUsoIntent.UsoNamespace.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == AudioUsoIntent.UsoNamespace.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioUsoIntent.UsoNamespace()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  AudioUsoIntent.UsoNamespace.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AudioUsoIntent.UsoNamespace()
{
  AudioUsoIntent.UsoNamespace.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioUsoIntent.UsoNamespace()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  AudioUsoIntent.UsoNamespace.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AudioUsoIntent.UsoNamespace@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized AudioUsoIntent.UsoNamespace.init(rawValue:)();
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AudioUsoIntent.UsoNamespace@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AudioUsoIntent.UsoNamespace.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t static AudioUsoIntent.IterationOptions.== infix(_:_:)()
{
  return 1;
}

void AudioUsoIntent.IterationOptions.hash(into:)()
{
}

Swift::Int AudioUsoIntent.IterationOptions.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioUsoIntent.IterationOptions()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioUsoIntent.IterationOptions()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AudioUsoIntent.IterationOptions()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioUsoIntent.IterationOptions()
{
  return Hasher._finalize()();
}

uint64_t *AudioUsoIntent.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of UsoEntity_common_DateTime??(v0[19]);
  outlined consume of [CodeGenListEntry<UsoEntity_common_UserEntity>]??(v0[20]);
  outlined consume of UsoEntity_common_DateTime??(v0[21]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of UsoEntity_common_DateTime??(v0[25]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of UsoEntity_common_DateTime??(v0[36]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of String??(v0[42], v0[43]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AudioUsoIntent.__deallocating_deinit()
{
  AudioUsoIntent.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for AudioIntent.activities.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1856))();
}

uint64_t protocol witness for AudioIntent.albums.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1280))();
}

uint64_t protocol witness for AudioIntent.appAudiobookAuthors.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1400))();
}

uint64_t protocol witness for AudioIntent.appAudiobookTitles.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1352))();
}

uint64_t protocol witness for AudioIntent.appMusicArtistNames.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1376))();
}

uint64_t protocol witness for AudioIntent.appName.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1592))();
}

uint64_t protocol witness for AudioIntent.appPlaylistTitles.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1304))();
}

uint64_t protocol witness for AudioIntent.appShowTitles.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1328))();
}

uint64_t protocol witness for AudioIntent.applePlaylistTitles.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1568))();
}

uint64_t protocol witness for AudioIntent.applePodcastTitles.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1664))();
}

uint64_t protocol witness for AudioIntent.apps.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1232))();
}

uint64_t protocol witness for AudioIntent.artists.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1256))();
}

uint64_t protocol witness for AudioIntent.attributes.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1472))();
}

uint64_t protocol witness for AudioIntent.confirmationState.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 952))();
}

uint64_t protocol witness for AudioIntent.dateTime.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1448))();
}

uint64_t protocol witness for AudioIntent.decade.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1712))();
}

uint64_t protocol witness for AudioIntent.entities.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1160))();
}

uint64_t protocol witness for AudioIntent.frequency.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1904))();
}

uint64_t protocol witness for AudioIntent.genres.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1808))();
}

uint64_t protocol witness for AudioIntent.mediaIdentifier.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1928))();
}

uint64_t protocol witness for AudioIntent.mediaType.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1112))();
}

uint64_t protocol witness for AudioIntent.targetMediaType.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1136))();
}

uint64_t protocol witness for AudioIntent.modifiers.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1760))();
}

uint64_t protocol witness for AudioIntent.moods.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1832))();
}

uint64_t protocol witness for AudioIntent.musicTitles.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1496))();
}

uint64_t protocol witness for AudioIntent.noun.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1424))();
}

uint64_t protocol witness for AudioIntent.playlistTitles.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1520))();
}

uint64_t protocol witness for AudioIntent.podcastTitles.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1640))();
}

uint64_t protocol witness for AudioIntent.radioStationNames.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1688))();
}

uint64_t protocol witness for AudioIntent.radioType.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1880))();
}

uint64_t protocol witness for AudioIntent.reference.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1784))();
}

uint64_t protocol witness for AudioIntent.resolvedReference.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1184))();
}

uint64_t protocol witness for AudioIntent.showTitles.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1616))();
}

uint64_t protocol witness for AudioIntent.sort.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1736))();
}

uint64_t protocol witness for AudioIntent.verb.getter in conformance AudioUsoIntent()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 904))();
}

uint64_t specialized closure #1 in closure #1 in AudioUsoIntent.playlistMediaItems.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v100 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v104 = &v87[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v87[-v6];
  MEMORY[0x1F4188790](v5);
  uint64_t v106 = &v87[-v8];
  uint64_t v9 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v91 = &v87[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  uint64_t v12 = MEMORY[0x1F4188790](v105);
  uint64_t v102 = &v87[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  unint64_t v15 = &v87[-v14];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  BOOL v90 = &v87[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v99 = &v87[-v20];
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v97 = &v87[-v22];
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  unint64_t v25 = &v87[-v24];
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v28 = &v87[-v27];
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = &v87[-v29];
  uint64_t v101 = a1;
  uint64_t v31 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  if (v32)
  {
    uint64_t v33 = v31;
    unint64_t v34 = v32;
    swift_bridgeObjectRelease();
    uint64_t v35 = HIBYTE(v34) & 0xF;
    if ((v34 & 0x2000000000000000) == 0) {
      uint64_t v35 = v33 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v36 = v35 == 0;
  }
  else
  {
    BOOL v36 = 1;
  }
  int v96 = v36;
  uint64_t v37 = dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter();
  uint64_t v103 = v7;
  if (v37)
  {
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v30, 1, 1, v9);
  }
  uint64_t v38 = *MEMORY[0x1E4FA35E8];
  uint64_t v39 = *(void (**)(unsigned char *, void, uint64_t))(v10 + 104);
  uint64_t v94 = v10 + 104;
  unint64_t v92 = v39;
  v39(v28, v38, v9);
  unint64_t v40 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56);
  uint64_t v95 = v10 + 56;
  uint64_t v93 = v40;
  v40(v28, 0, 1, v9);
  uint64_t v41 = (uint64_t)&v15[*(int *)(v105 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v30, (uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v42 = (uint64_t)v15;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v28, v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v98 = v10;
  unint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v43((uint64_t)v15, 1, v9) != 1)
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v15, (uint64_t)v25, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    uint64_t v89 = v43;
    if (v43(v41, 1, v9) != 1)
    {
      uint64_t v49 = v98;
      uint64_t v50 = v91;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v98 + 32))(v91, v41, v9);
      _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      int v88 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v51 = *(void (**)(unsigned char *, uint64_t))(v49 + 8);
      v51(v50, v9);
      outlined destroy of MediaUserStateCenter?((uint64_t)v28, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v51(v25, v9);
      uint64_t v48 = v99;
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      uint64_t v46 = v106;
      uint64_t v47 = (uint64_t)v97;
      unint64_t v44 = v89;
      if (v88)
      {
        LODWORD(v97) = 1;
        goto LABEL_27;
      }
LABEL_17:
      if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
      {
        dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
        swift_release();
        uint64_t v52 = v93;
      }
      else
      {
        uint64_t v52 = v93;
        v93((unsigned char *)v47, 1, 1, v9);
      }
      v92(v48, *MEMORY[0x1E4FA3528], v9);
      v52(v48, 0, 1, v9);
      uint64_t v53 = v102;
      uint64_t v54 = (uint64_t)&v102[*(int *)(v105 + 48)];
      outlined init with copy of MediaUserStateCenter?(v47, (uint64_t)v102, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v48, v54, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v44((uint64_t)v53, 1, v9) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v48, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        int v55 = v44(v54, 1, v9);
        uint64_t v45 = v103;
        if (v55 == 1)
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)v102, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          LODWORD(v97) = 1;
          goto LABEL_28;
        }
LABEL_25:
        outlined destroy of MediaUserStateCenter?((uint64_t)v102, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
        LODWORD(v97) = 0;
        goto LABEL_28;
      }
      uint64_t v56 = v90;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v102, (uint64_t)v90, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v44(v54, 1, v9) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v99, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        (*(void (**)(unsigned char *, uint64_t))(v98 + 8))(v56, v9);
        uint64_t v45 = v103;
        goto LABEL_25;
      }
      uint64_t v57 = v98;
      uint64_t v58 = v47;
      uint64_t v59 = v91;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v98 + 32))(v91, v54, v9);
      _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      LODWORD(v97) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v60 = *(void (**)(unsigned char *, uint64_t))(v57 + 8);
      v60(v59, v9);
      outlined destroy of MediaUserStateCenter?((uint64_t)v99, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v58, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v60(v56, v9);
      outlined destroy of MediaUserStateCenter?((uint64_t)v102, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
LABEL_27:
      uint64_t v45 = v103;
      goto LABEL_28;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v28, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(unsigned char *, uint64_t))(v98 + 8))(v25, v9);
    unint64_t v44 = v89;
LABEL_14:
    outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    uint64_t v46 = v106;
    uint64_t v47 = (uint64_t)v97;
    uint64_t v48 = v99;
    goto LABEL_17;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v28, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v42 = (uint64_t)v15;
  outlined destroy of MediaUserStateCenter?((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  unint64_t v44 = v43;
  if (v43(v41, 1, v9) != 1) {
    goto LABEL_14;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  LODWORD(v97) = 1;
  uint64_t v45 = v103;
  uint64_t v46 = v106;
LABEL_28:
  uint64_t v61 = (unsigned char *)dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v62 = *((void *)v61 + 2);
  if (!v62)
  {
    swift_bridgeObjectRelease();
    int v74 = 1;
    goto LABEL_45;
  }
  unint64_t v63 = *(void (**)(const char *, unsigned char *, uint64_t))(v100 + 16);
  unint64_t v64 = &v61[(*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80)];
  uint64_t v65 = (void (**)(const char *, uint64_t))(v100 + 8);
  uint64_t v105 = *(void *)(v100 + 72);
  uint64_t v99 = v61;
  swift_bridgeObjectRetain();
  uint64_t v102 = (unsigned char *)0x80000001C919F4D0;
  while (1)
  {
    v63(v46, v64, v2);
    uint64_t v68 = UsoIdentifier.namespace.getter();
    if (!v69)
    {
      v63(v45, v46, v2);
LABEL_41:
      unint64_t v73 = *v65;
      (*v65)(v45, v2);
      v73(v46, v2);
      goto LABEL_31;
    }
    if (v68 == 0x7473696C79616C70 && v69 == 0xED0000656C746954)
    {
      swift_bridgeObjectRelease();
      v63(v45, v46, v2);
    }
    else
    {
      char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v63(v45, v46, v2);
      if ((v70 & 1) == 0) {
        goto LABEL_41;
      }
    }
    UsoIdentifier.appBundleId.getter();
    Swift::String v71 = String.lowercased()();
    swift_bridgeObjectRelease();
    Swift::String v72 = String.lowercased()();
    if (v71._countAndFlagsBits == v72._countAndFlagsBits && v71._object == v72._object) {
      break;
    }
    char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v67 = *v65;
    uint64_t v45 = v103;
    (*v65)(v103, v2);
    v67(v106, v2);
    if (v66) {
      goto LABEL_44;
    }
LABEL_31:
    uint64_t v46 = v106;
    v64 += v105;
    if (!--v62)
    {
      swift_bridgeObjectRelease_n();
      int v74 = 1;
      goto LABEL_45;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v75 = *v65;
  (*v65)(v103, v2);
  v75(v106, v2);
LABEL_44:
  swift_bridgeObjectRelease_n();
  int v74 = 0;
LABEL_45:
  uint64_t v76 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v77 = *(void *)(v76 + 16);
  if (!v77)
  {
    swift_bridgeObjectRelease();
    return v97 & v74 & ~v96;
  }
  LODWORD(v102) = v74;
  uint64_t v78 = *(void (**)(unsigned char *, unint64_t, uint64_t))(v100 + 16);
  unint64_t v79 = v76 + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
  unint64_t v80 = (void (**)(unsigned char *, uint64_t))(v100 + 8);
  uint64_t v81 = *(void *)(v100 + 72);
  uint64_t v103 = (const char *)v76;
  swift_bridgeObjectRetain();
  uint64_t v106 = "notebookFolderTitle";
  uint64_t v105 = 0x80000001C919BC20;
  uint64_t v82 = v104;
  while (2)
  {
    v78(v82, v79, v2);
    uint64_t v84 = UsoIdentifier.namespace.getter();
    if (!v85)
    {
      (*v80)(v82, v2);
LABEL_48:
      v79 += v81;
      if (!--v77)
      {
        swift_bridgeObjectRelease_n();
        int v74 = (int)v102;
        return v97 & v74 & ~v96;
      }
      continue;
    }
    break;
  }
  if (v84 != 0xD000000000000010 || v85 != v105)
  {
    char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v82 = v104;
    (*v80)(v104, v2);
    if (v83) {
      goto LABEL_57;
    }
    goto LABEL_48;
  }
  swift_bridgeObjectRelease();
  (*v80)(v104, v2);
LABEL_57:
  swift_bridgeObjectRelease_n();
  return 0;
}

BOOL specialized closure #1 in closure #1 in AudioUsoIntent.applePlaylistTitles.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v101 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v105 = &v88[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v88[-v6];
  MEMORY[0x1F4188790](v5);
  uint64_t v107 = &v88[-v8];
  uint64_t v9 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v92 = &v88[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  uint64_t v12 = MEMORY[0x1F4188790](v106);
  uint64_t v103 = &v88[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  unint64_t v15 = &v88[-v14];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v91 = &v88[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v100 = &v88[-v20];
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v97 = &v88[-v22];
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  unint64_t v25 = &v88[-v24];
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v28 = &v88[-v27];
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = &v88[-v29];
  uint64_t v102 = a1;
  uint64_t v31 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  if (v32)
  {
    uint64_t v33 = v31;
    unint64_t v34 = v32;
    swift_bridgeObjectRelease();
    uint64_t v35 = HIBYTE(v34) & 0xF;
    if ((v34 & 0x2000000000000000) == 0) {
      uint64_t v35 = v33 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v36 = v35 == 0;
  }
  else
  {
    BOOL v36 = 1;
  }
  BOOL v99 = v36;
  uint64_t v37 = dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter();
  uint64_t v104 = v7;
  if (v37)
  {
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v30, 1, 1, v9);
  }
  uint64_t v38 = *MEMORY[0x1E4FA35E8];
  uint64_t v39 = *(void (**)(unsigned char *, void, uint64_t))(v10 + 104);
  uint64_t v95 = v10 + 104;
  uint64_t v93 = v39;
  v39(v28, v38, v9);
  unint64_t v40 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56);
  uint64_t v96 = v10 + 56;
  uint64_t v94 = v40;
  v40(v28, 0, 1, v9);
  uint64_t v41 = (uint64_t)&v15[*(int *)(v106 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v30, (uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v42 = (uint64_t)v15;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v28, v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v98 = v10;
  unint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v43((uint64_t)v15, 1, v9) != 1)
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v15, (uint64_t)v25, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    BOOL v90 = v43;
    if (v43(v41, 1, v9) != 1)
    {
      uint64_t v49 = v98;
      uint64_t v50 = v92;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v98 + 32))(v92, v41, v9);
      _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      int v89 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v51 = *(void (**)(unsigned char *, uint64_t))(v49 + 8);
      v51(v50, v9);
      outlined destroy of MediaUserStateCenter?((uint64_t)v28, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v51(v25, v9);
      uint64_t v48 = v100;
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      uint64_t v46 = v107;
      uint64_t v47 = (uint64_t)v97;
      unint64_t v44 = v90;
      if (v89)
      {
        LODWORD(v100) = 0;
        goto LABEL_27;
      }
LABEL_17:
      if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
      {
        dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
        swift_release();
        uint64_t v52 = v94;
      }
      else
      {
        uint64_t v52 = v94;
        v94((unsigned char *)v47, 1, 1, v9);
      }
      v93(v48, *MEMORY[0x1E4FA3528], v9);
      v52(v48, 0, 1, v9);
      uint64_t v53 = v103;
      uint64_t v54 = (uint64_t)&v103[*(int *)(v106 + 48)];
      outlined init with copy of MediaUserStateCenter?(v47, (uint64_t)v103, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v48, v54, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v44((uint64_t)v53, 1, v9) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v48, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        int v55 = v44(v54, 1, v9);
        uint64_t v45 = v104;
        if (v55 == 1)
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)v103, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          LODWORD(v100) = 0;
          goto LABEL_28;
        }
LABEL_25:
        outlined destroy of MediaUserStateCenter?((uint64_t)v103, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
        LODWORD(v100) = 1;
        goto LABEL_28;
      }
      uint64_t v56 = v91;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v103, (uint64_t)v91, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v44(v54, 1, v9) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v100, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        (*(void (**)(unsigned char *, uint64_t))(v98 + 8))(v56, v9);
        uint64_t v45 = v104;
        goto LABEL_25;
      }
      uint64_t v57 = v47;
      uint64_t v58 = v98;
      uint64_t v59 = v92;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v98 + 32))(v92, v54, v9);
      _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      int v60 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v61 = *(void (**)(unsigned char *, uint64_t))(v58 + 8);
      v61(v59, v9);
      outlined destroy of MediaUserStateCenter?((uint64_t)v100, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v57, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v61(v56, v9);
      outlined destroy of MediaUserStateCenter?((uint64_t)v103, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      LODWORD(v100) = v60 ^ 1;
LABEL_27:
      uint64_t v45 = v104;
      goto LABEL_28;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v28, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(unsigned char *, uint64_t))(v98 + 8))(v25, v9);
    unint64_t v44 = v90;
LABEL_14:
    outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    uint64_t v46 = v107;
    uint64_t v47 = (uint64_t)v97;
    uint64_t v48 = v100;
    goto LABEL_17;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v28, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v42 = (uint64_t)v15;
  outlined destroy of MediaUserStateCenter?((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  unint64_t v44 = v43;
  if (v43(v41, 1, v9) != 1) {
    goto LABEL_14;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  LODWORD(v100) = 0;
  uint64_t v45 = v104;
  uint64_t v46 = v107;
LABEL_28:
  uint64_t v62 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v63 = *(void *)(v62 + 16);
  if (!v63)
  {
    swift_bridgeObjectRelease();
    int v75 = 1;
    goto LABEL_45;
  }
  unint64_t v64 = *(void (**)(const char *, unint64_t, uint64_t))(v101 + 16);
  unint64_t v65 = v62 + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
  char v66 = (void (**)(const char *, uint64_t))(v101 + 8);
  uint64_t v106 = *(void *)(v101 + 72);
  uint64_t v98 = v62;
  swift_bridgeObjectRetain();
  uint64_t v103 = (unsigned char *)0x80000001C919F4D0;
  while (1)
  {
    v64(v46, v65, v2);
    uint64_t v69 = UsoIdentifier.namespace.getter();
    if (!v70)
    {
      v64(v45, (unint64_t)v46, v2);
LABEL_41:
      int v74 = *v66;
      (*v66)(v45, v2);
      v74(v46, v2);
      goto LABEL_31;
    }
    if (v69 == 0x7473696C79616C70 && v70 == 0xED0000656C746954)
    {
      swift_bridgeObjectRelease();
      v64(v45, (unint64_t)v46, v2);
    }
    else
    {
      char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v64(v45, (unint64_t)v46, v2);
      if ((v71 & 1) == 0) {
        goto LABEL_41;
      }
    }
    UsoIdentifier.appBundleId.getter();
    Swift::String v72 = String.lowercased()();
    swift_bridgeObjectRelease();
    Swift::String v73 = String.lowercased()();
    if (v72._countAndFlagsBits == v73._countAndFlagsBits && v72._object == v73._object) {
      break;
    }
    char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v68 = *v66;
    uint64_t v45 = v104;
    (*v66)(v104, v2);
    v68(v107, v2);
    if (v67) {
      goto LABEL_44;
    }
LABEL_31:
    uint64_t v46 = v107;
    v65 += v106;
    if (!--v63)
    {
      swift_bridgeObjectRelease_n();
      int v75 = 1;
      goto LABEL_45;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v76 = *v66;
  (*v66)(v104, v2);
  v76(v107, v2);
LABEL_44:
  swift_bridgeObjectRelease_n();
  int v75 = 0;
LABEL_45:
  uint64_t v77 = (unsigned char *)dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v78 = *((void *)v77 + 2);
  if (v78)
  {
    LODWORD(v104) = v75;
    unint64_t v79 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v101 + 16);
    unint64_t v80 = &v77[(*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80)];
    uint64_t v81 = (void (**)(unsigned char *, uint64_t))(v101 + 8);
    uint64_t v82 = *(void *)(v101 + 72);
    uint64_t v103 = v77;
    swift_bridgeObjectRetain();
    uint64_t v107 = "notebookFolderTitle";
    uint64_t v106 = 0x80000001C919BC20;
    char v83 = v105;
    while (1)
    {
      v79(v83, v80, v2);
      uint64_t v85 = UsoIdentifier.namespace.getter();
      if (v86)
      {
        if (v85 == 0xD000000000000010 && v86 == v106)
        {
          swift_bridgeObjectRelease();
          (*v81)(v105, v2);
LABEL_58:
          swift_bridgeObjectRelease_n();
          return 0;
        }
        char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        char v83 = v105;
        (*v81)(v105, v2);
        if (v84) {
          goto LABEL_58;
        }
      }
      else
      {
        (*v81)(v83, v2);
      }
      v80 += v82;
      if (!--v78)
      {
        swift_bridgeObjectRelease_n();
        int v75 = (int)v104;
        return ((v99 | v100 | v75) & 1) == 0;
      }
    }
  }
  swift_bridgeObjectRelease();
  return ((v99 | v100 | v75) & 1) == 0;
}

uint64_t specialized closure #1 in closure #1 in AudioUsoIntent.podcastTitles.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v60 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  v51[0] = (char *)v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v56);
  uint64_t v5 = (char *)v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v55 = (uint64_t)v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v51 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v59 = (char *)v51 - v12;
  uint64_t v13 = type metadata accessor for UsoIdentifier();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v51 - v18;
  uint64_t v20 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  if (v21)
  {
    uint64_t v22 = v20;
    unint64_t v23 = v21;
    swift_bridgeObjectRelease();
    uint64_t v24 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0) {
      uint64_t v24 = v22 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v25 = v24 == 0;
  }
  else
  {
    BOOL v25 = 1;
  }
  BOOL v57 = v25;
  uint64_t v58 = a1;
  uint64_t v26 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
    swift_bridgeObjectRelease();
    uint64_t v41 = v60;
LABEL_22:
    uint64_t v42 = (uint64_t)v59;
    if (!v57)
    {
      uint64_t v43 = 1;
      goto LABEL_25;
    }
    return 0;
  }
  uint64_t v52 = v11;
  uint64_t v53 = v5;
  uint64_t v54 = v2;
  uint64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
  uint64_t v28 = v14 + 16;
  uint64_t v29 = v30;
  unint64_t v31 = v26 + ((*(unsigned __int8 *)(v28 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 64));
  unint64_t v32 = (void (**)(char *, uint64_t))(v28 - 8);
  uint64_t v62 = *(void *)(v28 + 56);
  v51[1] = v26;
  swift_bridgeObjectRetain();
  unint64_t v61 = 0x80000001C919F4D0;
  uint64_t v63 = v28;
  while (1)
  {
    v29(v19, v31, v13);
    uint64_t v35 = UsoIdentifier.namespace.getter();
    if (!v36)
    {
      v29(v17, (unint64_t)v19, v13);
LABEL_19:
      unint64_t v40 = *v32;
      (*v32)(v17, v13);
      v40(v19, v13);
      goto LABEL_9;
    }
    if (v35 == 0x5474736163646F70 && v36 == 0xEC000000656C7469)
    {
      swift_bridgeObjectRelease();
      v29(v17, (unint64_t)v19, v13);
    }
    else
    {
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v29(v17, (unint64_t)v19, v13);
      if ((v37 & 1) == 0) {
        goto LABEL_19;
      }
    }
    UsoIdentifier.appBundleId.getter();
    Swift::String v38 = String.lowercased()();
    swift_bridgeObjectRelease();
    Swift::String v39 = String.lowercased()();
    if (v38._countAndFlagsBits == v39._countAndFlagsBits && v38._object == v39._object) {
      break;
    }
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v34 = *v32;
    (*v32)(v17, v13);
    v34(v19, v13);
    if (v33) {
      goto LABEL_24;
    }
LABEL_9:
    v31 += v62;
    if (!--v27)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v5 = v53;
      uint64_t v2 = v54;
      uint64_t v41 = v60;
      uint64_t v11 = v52;
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease_n();
  unint64_t v44 = *v32;
  (*v32)(v17, v13);
  v44(v19, v13);
LABEL_24:
  swift_bridgeObjectRelease_n();
  uint64_t v43 = 0;
  uint64_t v5 = v53;
  uint64_t v2 = v54;
  uint64_t v42 = (uint64_t)v59;
  uint64_t v41 = v60;
  uint64_t v11 = v52;
  if (!v57)
  {
LABEL_25:
    if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter())
    {
      dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
      swift_release();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v42, 1, 1, v2);
    }
    (*(void (**)(char *, void, uint64_t))(v41 + 104))(v11, *MEMORY[0x1E4FA35D8], v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v11, 0, 1, v2);
    uint64_t v45 = (uint64_t)&v5[*(int *)(v56 + 48)];
    outlined init with copy of MediaUserStateCenter?(v42, (uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined init with copy of MediaUserStateCenter?((uint64_t)v11, v45, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
    if (v46((uint64_t)v5, 1, v2) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v46(v45, 1, v2) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        return v43;
      }
LABEL_33:
      outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    }
    else
    {
      uint64_t v47 = v55;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v5, v55, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v46(v45, 1, v2) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v47, v2);
        goto LABEL_33;
      }
      uint64_t v48 = v51[0];
      (*(void (**)(void, uint64_t, uint64_t))(v41 + 32))(v51[0], v45, v2);
      _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      LODWORD(v63) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v49(v48, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v49(v47, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v63) {
        return v43;
      }
    }
    return 0;
  }
  return v43;
}

uint64_t specialized closure #1 in closure #1 in AudioUsoIntent.applePodcastTitles.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v60 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  v51[0] = (char *)v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v56);
  uint64_t v5 = (char *)v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v55 = (uint64_t)v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v51 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v59 = (char *)v51 - v12;
  uint64_t v13 = type metadata accessor for UsoIdentifier();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v51 - v18;
  uint64_t v20 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
  if (v21)
  {
    uint64_t v22 = v20;
    unint64_t v23 = v21;
    swift_bridgeObjectRelease();
    uint64_t v24 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000) == 0) {
      uint64_t v24 = v22 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v25 = v24 == 0;
  }
  else
  {
    BOOL v25 = 1;
  }
  BOOL v57 = v25;
  uint64_t v58 = a1;
  uint64_t v26 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
    swift_bridgeObjectRelease();
    uint64_t v41 = v60;
LABEL_22:
    uint64_t v42 = (uint64_t)v59;
    if (v57) {
      return 0;
    }
    uint64_t v43 = 0;
    if (!dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter()) {
      goto LABEL_27;
    }
LABEL_24:
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
    goto LABEL_28;
  }
  uint64_t v52 = v11;
  uint64_t v53 = v5;
  uint64_t v54 = v2;
  uint64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
  uint64_t v28 = v14 + 16;
  uint64_t v29 = v30;
  unint64_t v31 = v26 + ((*(unsigned __int8 *)(v28 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 64));
  unint64_t v32 = (void (**)(char *, uint64_t))(v28 - 8);
  uint64_t v62 = *(void *)(v28 + 56);
  v51[1] = v26;
  swift_bridgeObjectRetain();
  unint64_t v61 = 0x80000001C919F4D0;
  uint64_t v63 = v28;
  while (1)
  {
    v29(v19, v31, v13);
    uint64_t v35 = UsoIdentifier.namespace.getter();
    if (!v36)
    {
      v29(v17, (unint64_t)v19, v13);
LABEL_19:
      unint64_t v40 = *v32;
      (*v32)(v17, v13);
      v40(v19, v13);
      goto LABEL_9;
    }
    if (v35 == 0x5474736163646F70 && v36 == 0xEC000000656C7469)
    {
      swift_bridgeObjectRelease();
      v29(v17, (unint64_t)v19, v13);
    }
    else
    {
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v29(v17, (unint64_t)v19, v13);
      if ((v37 & 1) == 0) {
        goto LABEL_19;
      }
    }
    UsoIdentifier.appBundleId.getter();
    Swift::String v38 = String.lowercased()();
    swift_bridgeObjectRelease();
    Swift::String v39 = String.lowercased()();
    if (v38._countAndFlagsBits == v39._countAndFlagsBits && v38._object == v39._object) {
      break;
    }
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v34 = *v32;
    (*v32)(v17, v13);
    v34(v19, v13);
    if (v33) {
      goto LABEL_25;
    }
LABEL_9:
    v31 += v62;
    if (!--v27)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v5 = v53;
      uint64_t v2 = v54;
      uint64_t v41 = v60;
      uint64_t v11 = v52;
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease_n();
  unint64_t v44 = *v32;
  (*v32)(v17, v13);
  v44(v19, v13);
LABEL_25:
  swift_bridgeObjectRelease_n();
  uint64_t v5 = v53;
  uint64_t v2 = v54;
  uint64_t v42 = (uint64_t)v59;
  uint64_t v41 = v60;
  uint64_t v11 = v52;
  if (v57) {
    return 0;
  }
  uint64_t v43 = 1;
  if (dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter()) {
    goto LABEL_24;
  }
LABEL_27:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v42, 1, 1, v2);
LABEL_28:
  (*(void (**)(char *, void, uint64_t))(v41 + 104))(v11, *MEMORY[0x1E4FA35D8], v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v11, 0, 1, v2);
  uint64_t v45 = (uint64_t)&v5[*(int *)(v56 + 48)];
  outlined init with copy of MediaUserStateCenter?(v42, (uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v11, v45, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
  if (v46((uint64_t)v5, 1, v2) != 1)
  {
    uint64_t v47 = v55;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v5, v55, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v46(v45, 1, v2) != 1)
    {
      uint64_t v48 = v51[0];
      (*(void (**)(void, uint64_t, uint64_t))(v41 + 32))(v51[0], v45, v2);
      _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
      LODWORD(v63) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v49(v48, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v49(v47, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v63) {
        return v43;
      }
      return 0;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v47, v2);
LABEL_33:
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v46(v45, 1, v2) != 1) {
    goto LABEL_33;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v43;
}

uint64_t outlined consume of [CodeGenListEntry<UsoEntity_common_UserEntity>]??(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of [CodeGenListEntry<UsoEntity_common_UserEntity>]??(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of UsoEntity_common_DateTime??(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of UsoEntity_common_DateTime??(uint64_t result)
{
  if (result != 1) {
    return swift_retain();
  }
  return result;
}

uint64_t specialized closure #1 in AudioUsoIntent.applePlaylistTitles.getter()
{
  unint64_t v0 = AudioUsoIntent.rootItems.getter();
  unint64_t v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E4FBC860], (uint64_t (*)(uint64_t))specialized closure #1 in closure #1 in AudioUsoIntent.applePlaylistTitles.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v4, v1);
      }
      else {
        swift_retain();
      }
      uint64_t v7 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
      uint64_t v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        }
        unint64_t v11 = v5[2];
        unint64_t v10 = v5[3];
        if (v11 >= v10 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
        }
        v5[2] = v11 + 1;
        uint64_t v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t outlined consume of String??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of String??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized closure #1 in AudioUsoIntent.podcastTitles.getter()
{
  unint64_t v0 = AudioUsoIntent.rootItems.getter();
  unint64_t v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E4FBC860], specialized closure #1 in closure #1 in AudioUsoIntent.podcastTitles.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v4, v1);
      }
      else {
        swift_retain();
      }
      uint64_t v7 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
      uint64_t v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        }
        unint64_t v11 = v5[2];
        unint64_t v10 = v5[3];
        if (v11 >= v10 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
        }
        v5[2] = v11 + 1;
        uint64_t v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in AudioUsoIntent.applePodcastTitles.getter()
{
  unint64_t v0 = AudioUsoIntent.rootItems.getter();
  unint64_t v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E4FBC860], specialized closure #1 in closure #1 in AudioUsoIntent.applePodcastTitles.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB77D510](v4, v1);
      }
      else {
        swift_retain();
      }
      uint64_t v7 = dispatch thunk of UsoEntity_common_MediaItem.name.getter();
      uint64_t v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        }
        unint64_t v11 = v5[2];
        unint64_t v10 = v5[3];
        if (v11 >= v10 >> 1) {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v5);
        }
        v5[2] = v11 + 1;
        uint64_t v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t specialized AudioUsoIntent.UsoNamespace.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1A) {
    return 26;
  }
  else {
    return v0;
  }
}

unint64_t lazy protocol witness table accessor for type AudioUsoIntent.UsoNamespace and conformance AudioUsoIntent.UsoNamespace()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioUsoIntent.UsoNamespace and conformance AudioUsoIntent.UsoNamespace;
  if (!lazy protocol witness table cache variable for type AudioUsoIntent.UsoNamespace and conformance AudioUsoIntent.UsoNamespace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioUsoIntent.UsoNamespace and conformance AudioUsoIntent.UsoNamespace);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioUsoIntent.IterationOptions and conformance AudioUsoIntent.IterationOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioUsoIntent.IterationOptions and conformance AudioUsoIntent.IterationOptions;
  if (!lazy protocol witness table cache variable for type AudioUsoIntent.IterationOptions and conformance AudioUsoIntent.IterationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioUsoIntent.IterationOptions and conformance AudioUsoIntent.IterationOptions);
  }
  return result;
}

uint64_t sub_1C908F134@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 904))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908F188(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 136) = v2;
  return result;
}

uint64_t sub_1C908F1CC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 928))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908F220(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 137) = v2;
  return result;
}

uint64_t sub_1C908F264@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 952))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908F2B8(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 138) = v2;
  return result;
}

uint64_t sub_1C908F2FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1040))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908F350(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 160);
  *(void *)(*(void *)a2 + 160) = *a1;
  swift_bridgeObjectRetain();

  return outlined consume of [CodeGenListEntry<UsoEntity_common_UserEntity>]??(v2);
}

uint64_t sub_1C908F394@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1112))();
  *a2 = result;
  return result;
}

unsigned char *sub_1C908F3E8(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 184) = *result;
  return result;
}

uint64_t sub_1C908F3F8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1136))();
  *a2 = result;
  return result;
}

unsigned char *sub_1C908F44C(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 185) = *result;
  return result;
}

uint64_t sub_1C908F45C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1160))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908F4B0(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 192) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908F4F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1184))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908F548(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 200);
  *(void *)(*(void *)a2 + 200) = *a1;
  swift_retain();

  return outlined consume of UsoEntity_common_DateTime??(v2);
}

uint64_t sub_1C908F58C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1208))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908F5E0(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 208) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908F624@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1232))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908F678(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 216) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908F6BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1256))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908F710(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 224) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908F754@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1280))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908F7A8(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 232) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908F7EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1304))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908F840(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 240) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908F884@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1328))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908F8D8(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 248) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908F91C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1352))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908F970(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 256) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908F9B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1376))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908FA08(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 264) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908FA4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1400))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908FAA0(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 272) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908FAE4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1424))();
  *a2 = result;
  return result;
}

unsigned char *sub_1C908FB38(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 280) = *result;
  return result;
}

uint64_t sub_1C908FB48@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1448))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908FB9C(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 288);
  *(void *)(*(void *)a2 + 288) = *a1;
  swift_retain();

  return outlined consume of UsoEntity_common_DateTime??(v2);
}

uint64_t sub_1C908FBE0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1472))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908FC34(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 296) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908FC78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1496))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908FCCC(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 304) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908FD10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1520))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908FD64(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 312) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908FDA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1544))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908FDFC(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 320) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908FE40@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1568))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908FE94(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 328) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C908FED8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1592))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1C908FF2C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 336);
  uint64_t v6 = *(void *)(*a2 + 344);
  *(void *)(v4 + 336) = v3;
  *(void *)(v4 + 344) = v2;
  swift_bridgeObjectRetain();

  return outlined consume of String??(v5, v6);
}

uint64_t sub_1C908FF74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1616))();
  *a2 = result;
  return result;
}

uint64_t sub_1C908FFC8(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 352) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C909000C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1640))();
  *a2 = result;
  return result;
}

uint64_t sub_1C9090060(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 360) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C90900A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1664))();
  *a2 = result;
  return result;
}

uint64_t sub_1C90900F8(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 368) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C909013C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1688))();
  *a2 = result;
  return result;
}

uint64_t sub_1C9090190(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 376) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C90901D4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1712))();
  *a2 = result;
  return result;
}

unsigned char *sub_1C9090228(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 384) = *result;
  return result;
}

uint64_t sub_1C9090238@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1736))();
  *a2 = result;
  return result;
}

unsigned char *sub_1C909028C(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 385) = *result;
  return result;
}

uint64_t sub_1C909029C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1760))();
  *a2 = result;
  return result;
}

uint64_t sub_1C90902F0(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 392) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C9090334@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1784))();
  *a2 = result;
  return result;
}

unsigned char *sub_1C9090388(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 400) = *result;
  return result;
}

uint64_t sub_1C9090398@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1808))();
  *a2 = result;
  return result;
}

uint64_t sub_1C90903EC(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 408) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C9090430@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1832))();
  *a2 = result;
  return result;
}

uint64_t sub_1C9090484(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 416) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C90904C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1856))();
  *a2 = result;
  return result;
}

uint64_t sub_1C909051C(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 424) = *a1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1C9090560@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1880))();
  *a2 = result;
  return result;
}

unsigned char *sub_1C90905B4(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 432) = *result;
  return result;
}

uint64_t sub_1C90905C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1904))();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1C9090620(uint64_t result, uint64_t *a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *(void *)(v3 + 440) = *(void *)result;
  *(_WORD *)(v3 + 448) = v2;
  return result;
}

uint64_t sub_1C909063C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1928))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1C9090690(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 1936);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t type metadata accessor for AudioUsoIntent()
{
  return self;
}

uint64_t method lookup function for AudioUsoIntent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioUsoIntent);
}

uint64_t dispatch thunk of AudioUsoIntent.verb.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 904))();
}

uint64_t dispatch thunk of AudioUsoIntent.baseEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 928))();
}

uint64_t dispatch thunk of AudioUsoIntent.confirmationState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 952))();
}

uint64_t dispatch thunk of AudioUsoIntent.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 1000))();
}

uint64_t dispatch thunk of AudioUsoIntent.__allocating_init(task:)()
{
  return (*(uint64_t (**)(void))(v0 + 1008))();
}

uint64_t dispatch thunk of AudioUsoIntent.userEntities.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1040))();
}

uint64_t dispatch thunk of AudioUsoIntent.mediaType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1112))();
}

uint64_t dispatch thunk of AudioUsoIntent.targetMediaType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1136))();
}

uint64_t dispatch thunk of AudioUsoIntent.entities.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1160))();
}

uint64_t dispatch thunk of AudioUsoIntent.resolvedReference.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1184))();
}

uint64_t dispatch thunk of AudioUsoIntent.disambiguationEntities.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1208))();
}

uint64_t dispatch thunk of AudioUsoIntent.apps.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1232))();
}

uint64_t dispatch thunk of AudioUsoIntent.artists.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1256))();
}

uint64_t dispatch thunk of AudioUsoIntent.albums.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1280))();
}

uint64_t dispatch thunk of AudioUsoIntent.appPlaylistTitles.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1304))();
}

uint64_t dispatch thunk of AudioUsoIntent.appShowTitles.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1328))();
}

uint64_t dispatch thunk of AudioUsoIntent.appAudiobookTitles.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1352))();
}

uint64_t dispatch thunk of AudioUsoIntent.appMusicArtistNames.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1376))();
}

uint64_t dispatch thunk of AudioUsoIntent.appAudiobookAuthors.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1400))();
}

uint64_t dispatch thunk of AudioUsoIntent.noun.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1424))();
}

uint64_t dispatch thunk of AudioUsoIntent.dateTime.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1448))();
}

uint64_t dispatch thunk of AudioUsoIntent.attributes.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1472))();
}

uint64_t dispatch thunk of AudioUsoIntent.musicTitles.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1496))();
}

uint64_t dispatch thunk of AudioUsoIntent.playlistTitles.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1520))();
}

uint64_t dispatch thunk of AudioUsoIntent.playlistMediaItems.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1544))();
}

uint64_t dispatch thunk of AudioUsoIntent.applePlaylistTitles.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1568))();
}

uint64_t dispatch thunk of AudioUsoIntent.appName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1592))();
}

uint64_t dispatch thunk of AudioUsoIntent.showTitles.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1616))();
}

uint64_t dispatch thunk of AudioUsoIntent.podcastTitles.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1640))();
}

uint64_t dispatch thunk of AudioUsoIntent.applePodcastTitles.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1664))();
}

uint64_t dispatch thunk of AudioUsoIntent.radioStationNames.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1688))();
}

uint64_t dispatch thunk of AudioUsoIntent.decade.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1712))();
}

uint64_t dispatch thunk of AudioUsoIntent.sort.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1736))();
}

uint64_t dispatch thunk of AudioUsoIntent.modifiers.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1760))();
}

uint64_t dispatch thunk of AudioUsoIntent.reference.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1784))();
}

uint64_t dispatch thunk of AudioUsoIntent.genres.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1808))();
}

uint64_t dispatch thunk of AudioUsoIntent.moods.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1832))();
}

uint64_t dispatch thunk of AudioUsoIntent.activities.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1856))();
}

uint64_t dispatch thunk of AudioUsoIntent.radioType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1880))();
}

uint64_t dispatch thunk of AudioUsoIntent.frequency.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1904))();
}

uint64_t dispatch thunk of AudioUsoIntent.mediaIdentifier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1928))();
}

uint64_t dispatch thunk of AudioUsoIntent.mediaIdentifier.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1936))();
}

uint64_t dispatch thunk of AudioUsoIntent.mediaIdentifier.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1944))();
}

uint64_t getEnumTagSinglePayload for AudioUsoIntent.UsoNamespace(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE7) {
    goto LABEL_17;
  }
  if (a2 + 25 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 25) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 25;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 25;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1A;
  int v8 = v6 - 26;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AudioUsoIntent.UsoNamespace(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 25 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 25) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE6)
  {
    unsigned int v6 = ((a2 - 231) >> 8) + 1;
    *uint64_t result = a2 + 25;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9090FECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 25;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioUsoIntent.UsoNamespace()
{
  return &type metadata for AudioUsoIntent.UsoNamespace;
}

uint64_t getEnumTagSinglePayload for AudioUsoIntent.IterationOptions(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for AudioUsoIntent.IterationOptions(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C9091114);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for AudioUsoIntent.IterationOptions()
{
  return 0;
}

ValueMetadata *type metadata accessor for AudioUsoIntent.IterationOptions()
{
  return &type metadata for AudioUsoIntent.IterationOptions;
}

unsigned char *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t _s12SiriNLUTypes0A27_Nlu_External_UserDialogActVAC21InternalSwiftProtobuf7MessageAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t result = specialized Set.startIndex.getter(a1);
  if (v4) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(unsigned char *)(a1 + 32)) {
    return 2;
  }
  else {
    return specialized Set.subscript.getter(result, v3, 0, a1) & 1;
  }
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioModifier();
  uint64_t v76 = *(void *)(v4 - 8);
  uint64_t v77 = v4;
  MEMORY[0x1F4188790](v4);
  int v75 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDecade();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v74 = (uint64_t)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioRadioType();
  uint64_t v72 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73);
  char v71 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioAttribute();
  uint64_t v100 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  unint64_t v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  uint64_t v79 = *(void *)(v11 - 8);
  uint64_t v80 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.init()();
  if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1160))(v14) + 16)) {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.entity.setter();
  uint64_t v101 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1256))(v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  unint64_t v17 = lazy protocol witness table accessor for type [String] and conformance [A]();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.artist.setter();
  uint64_t v101 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1280))(v18);
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.album.setter();
  uint64_t v101 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1520))(v19);
  unint64_t v94 = v17;
  uint64_t v95 = v16;
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.playlistTitle.setter();
  (*(void (**)(uint64_t))(*(void *)a1 + 1592))(v20);
  uint64_t v21 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.appName.setter();
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1472))(v21);
  int64_t v23 = *(void *)(v22 + 16);
  uint64_t v24 = MEMORY[0x1E4FBC860];
  unint64_t v92 = v13;
  uint64_t v93 = a1;
  uint64_t v81 = a2;
  if (v23)
  {
    uint64_t v101 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
    uint64_t v25 = v101;
    int64_t v26 = specialized Set.startIndex.getter(v22);
    int v28 = v27;
    unsigned int v91 = *MEMORY[0x1E4F890A0];
    char v30 = v29 & 1;
    unsigned int v90 = *MEMORY[0x1E4F89078];
    uint64_t v98 = (void (**)(char *, uint64_t, uint64_t))(v100 + 104);
    uint64_t v99 = v22 + 56;
    unsigned int v89 = *MEMORY[0x1E4F89070];
    unsigned int v88 = *MEMORY[0x1E4F890A8];
    unsigned int v87 = *MEMORY[0x1E4F89068];
    unsigned int v86 = *MEMORY[0x1E4F89088];
    unsigned int v85 = *MEMORY[0x1E4F89098];
    unsigned int v84 = *MEMORY[0x1E4F890B0];
    unsigned int v83 = *MEMORY[0x1E4F89090];
    unsigned int v96 = *MEMORY[0x1E4F89060];
    uint64_t v97 = v100 + 32;
    unsigned int v82 = *MEMORY[0x1E4F89080];
    uint64_t v31 = v78;
    do
    {
      if (v26 < 0 || v26 >= 1 << *(unsigned char *)(v22 + 32))
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        JUMPOUT(0x1C9091EDCLL);
      }
      if (((*(void *)(v99 + (((unint64_t)v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
        goto LABEL_51;
      }
      if (*(_DWORD *)(v22 + 36) != v28) {
        goto LABEL_52;
      }
      uint64_t v32 = v96;
      switch(*(unsigned char *)(*(void *)(v22 + 48) + v26))
      {
        case 0:
          break;
        case 1:
          uint64_t v32 = v83;
          break;
        case 2:
          uint64_t v32 = v84;
          break;
        case 3:
          uint64_t v32 = v85;
          break;
        case 6:
          uint64_t v32 = v86;
          break;
        case 7:
          uint64_t v32 = v87;
          break;
        case 8:
          uint64_t v32 = v88;
          break;
        case 9:
          uint64_t v32 = v89;
          break;
        case 0xA:
          uint64_t v32 = v90;
          break;
        case 0xC:
          uint64_t v32 = v91;
          break;
        default:
          uint64_t v32 = v82;
          break;
      }
      (*v98)(v10, v32, v31);
      uint64_t v101 = v25;
      unint64_t v34 = *(void *)(v25 + 16);
      unint64_t v33 = *(void *)(v25 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        uint64_t v25 = v101;
      }
      *(void *)(v25 + 16) = v34 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v100 + 32))(v25+ ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))+ *(void *)(v100 + 72) * v34, v10, v31);
      int64_t v35 = specialized _NativeSet.index(after:)(v26, v28, v30 & 1, v22);
      int64_t v26 = v35;
      int v28 = v36;
      char v30 = v37 & 1;
      --v23;
    }
    while (v23);
    outlined consume of Set<CommonAudio.Attribute>.Index._Variant(v35, v36, v37 & 1);
    swift_bridgeObjectRelease();
    a2 = v81;
    uint64_t v13 = v92;
    a1 = v93;
    uint64_t v24 = MEMORY[0x1E4FBC860];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v38 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.attributes.setter();
  uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1880))(v38);
  if (v39 != 2)
  {
    unint64_t v40 = (unsigned int *)MEMORY[0x1E4F890C8];
    if (v39) {
      unint64_t v40 = (unsigned int *)MEMORY[0x1E4F890C0];
    }
    (*(void (**)(char *, void, uint64_t))(v72 + 104))(v71, *v40, v73);
    uint64_t v39 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audioRadioType.setter();
  }
  uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1400))(v39);
  int64_t v42 = *(void *)(v41 + 16);
  if (v42)
  {
    uint64_t v43 = v24;
    uint64_t v101 = v24;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42, 0);
    uint64_t v44 = v101;
    uint64_t v45 = (uint64_t *)(v41 + 40);
    do
    {
      uint64_t v47 = *(v45 - 1);
      uint64_t v46 = *v45;
      uint64_t v101 = v44;
      unint64_t v49 = *(void *)(v44 + 16);
      unint64_t v48 = *(void *)(v44 + 24);
      swift_bridgeObjectRetain();
      if (v49 >= v48 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
        uint64_t v44 = v101;
      }
      v45 += 4;
      *(void *)(v44 + 16) = v49 + 1;
      unint64_t v50 = v44 + 16 * v49;
      *(void *)(v50 + 32) = v47;
      *(void *)(v50 + 40) = v46;
      --v42;
    }
    while (v42);
    swift_bridgeObjectRelease();
    uint64_t v13 = v92;
    a1 = v93;
    uint64_t v24 = v43;
    a2 = v81;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v44 = MEMORY[0x1E4FBC860];
  }
  uint64_t v101 = v44;
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  uint64_t v51 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audiobookAuthor.setter();
  uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1352))(v51);
  int64_t v53 = *(void *)(v52 + 16);
  if (v53)
  {
    uint64_t v101 = v24;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53, 0);
    uint64_t v54 = v101;
    uint64_t v55 = (uint64_t *)(v52 + 40);
    do
    {
      uint64_t v57 = *(v55 - 1);
      uint64_t v56 = *v55;
      uint64_t v101 = v54;
      unint64_t v59 = *(void *)(v54 + 16);
      unint64_t v58 = *(void *)(v54 + 24);
      swift_bridgeObjectRetain();
      if (v59 >= v58 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
        uint64_t v54 = v101;
      }
      v55 += 4;
      *(void *)(v54 + 16) = v59 + 1;
      unint64_t v60 = v54 + 16 * v59;
      *(void *)(v60 + 32) = v57;
      *(void *)(v60 + 40) = v56;
      --v53;
    }
    while (v53);
    swift_bridgeObjectRelease();
    uint64_t v13 = v92;
    a1 = v93;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v54 = MEMORY[0x1E4FBC860];
  }
  uint64_t v101 = v54;
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  uint64_t v61 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audiobookTitle.setter();
  uint64_t v62 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1712))(v61);
  if (v62 != 11)
  {
    CommonAudio.Decade.parsecDecade.getter(v62, v74);
    uint64_t v62 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.decade.setter();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 1808))(v62);
  uint64_t v63 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.genre.setter();
  uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1760))(v63);
  char v65 = specialized Collection.first.getter(v64);
  swift_bridgeObjectRelease();
  if (v65 != 2)
  {
    char v66 = (unsigned int *)MEMORY[0x1E4F88FF0];
    if (v65) {
      char v66 = (unsigned int *)MEMORY[0x1E4F88FF8];
    }
    (*(void (**)(char *, void, uint64_t))(v76 + 104))(v75, *v66, v77);
    Apple_Parsec_Siri_V2alpha_AudioUnderstanding.modifier.setter();
  }
  swift_release();
  uint64_t v68 = v79;
  uint64_t v67 = v80;
  (*(void (**)(uint64_t, char *, uint64_t))(v79 + 32))(a2, v13, v80);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v68 + 56))(a2, 0, 1, v67);
}

uint64_t CommonAudio.Attribute.parsecAudioAttribute.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      int v3 = (unsigned int *)MEMORY[0x1E4F89060];
      break;
    case 1:
      int v3 = (unsigned int *)MEMORY[0x1E4F89090];
      break;
    case 2:
      int v3 = (unsigned int *)MEMORY[0x1E4F890B0];
      break;
    case 3:
      int v3 = (unsigned int *)MEMORY[0x1E4F89098];
      break;
    case 6:
      int v3 = (unsigned int *)MEMORY[0x1E4F89088];
      break;
    case 7:
      int v3 = (unsigned int *)MEMORY[0x1E4F89068];
      break;
    case 8:
      int v3 = (unsigned int *)MEMORY[0x1E4F890A8];
      break;
    case 9:
      int v3 = (unsigned int *)MEMORY[0x1E4F89070];
      break;
    case 10:
      int v3 = (unsigned int *)MEMORY[0x1E4F89078];
      break;
    case 12:
      int v3 = (unsigned int *)MEMORY[0x1E4F890A0];
      break;
    default:
      int v3 = (unsigned int *)MEMORY[0x1E4F89080];
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioAttribute();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a2, v4, v5);
}

uint64_t CommonAudio.RadioType.parsecRadioType.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return CommonAudio.RadioType.parsecRadioType.getter(a1, MEMORY[0x1E4F890F0], MEMORY[0x1E4F890C8], MEMORY[0x1E4F890C0], a2);
}

uint64_t CommonAudio.Decade.parsecDecade.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      int v3 = (unsigned int *)MEMORY[0x1E4F88DA0];
      break;
    case 2:
      int v3 = (unsigned int *)MEMORY[0x1E4F88DA8];
      break;
    case 3:
      int v3 = (unsigned int *)MEMORY[0x1E4F88DB0];
      break;
    case 4:
      int v3 = (unsigned int *)MEMORY[0x1E4F88DB8];
      break;
    case 5:
      int v3 = (unsigned int *)MEMORY[0x1E4F88DC0];
      break;
    case 6:
      int v3 = (unsigned int *)MEMORY[0x1E4F88DC8];
      break;
    case 7:
      int v3 = (unsigned int *)MEMORY[0x1E4F88DD0];
      break;
    case 8:
      int v3 = (unsigned int *)MEMORY[0x1E4F88DD8];
      break;
    case 9:
      int v3 = (unsigned int *)MEMORY[0x1E4F88DE0];
      break;
    case 10:
      int v3 = (unsigned int *)MEMORY[0x1E4F88DE8];
      break;
    default:
      int v3 = (unsigned int *)MEMORY[0x1E4F88D98];
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDecade();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a2, v4, v5);
}

uint64_t CommonAudio.Modifier.parsecAudioModifier.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return CommonAudio.RadioType.parsecRadioType.getter(a1, MEMORY[0x1E4F89000], MEMORY[0x1E4F88FF0], MEMORY[0x1E4F88FF8], a2);
}

uint64_t CommonAudio.RadioType.parsecRadioType.getter@<X0>(char a1@<W0>, uint64_t (*a2)(void)@<X1>, unsigned int *a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a2(0);
  unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104);
  if (a1) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = a3;
  }
  uint64_t v12 = *v11;

  return v10(a5, v12, v9);
}

uint64_t outlined consume of Set<CommonAudio.Attribute>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Set.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(unsigned __int8 *)(*(void *)(a4 + 48) + result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t PommesRequestInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  return result;
}

id PommesRequestInstrumentationUtil.mockStream.getter()
{
  unint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = *(id *)(v0 + 16);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    uint64_t v4 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v3;
    id v2 = v3;

    unint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t PommesRequestInstrumentationUtil.mockStream.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F41817F8]();
}

void (*PommesRequestInstrumentationUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = PommesRequestInstrumentationUtil.mockStream.getter();
  return PommesCacheInstrumentationUtil.mockStream.modify;
}

uint64_t PommesRequestInstrumentationUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t PommesRequestInstrumentationUtil.init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = a1;
  return v1;
}

void PommesRequestInstrumentationUtil.logUnableToHandlePommesRequest(requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1168]), sel_init);
    if (v9)
    {
      unint64_t v10 = v9;
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1190]), sel_init);
      if (v11)
      {
        uint64_t v12 = v11;
        objc_msgSend(v11, sel_setReason_, a4);
        objc_msgSend(v10, sel_setCancelled_, v12);
        objc_msgSend(v8, sel_setPommesRequestContext_, v10);
        uint64_t v13 = self;
        swift_retain();
        id v14 = objc_msgSend(v13, sel_processInfo);
        char v15 = NSProcessInfo.isRunningUnitTests.getter();

        if (v15) {
          id v16 = (id)(*(uint64_t (**)(void))(*(void *)v5 + 96))();
        }
        else {
          id v16 = objc_msgSend(self, sel_sharedStream);
        }
        uint64_t v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      unint64_t v10 = v8;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v18, "Unable to log cancelled POMMES request", v19, 2u);
    MEMORY[0x1CB77E470](v19, -1, -1);
  }
}

uint64_t PommesRequestInstrumentationUtil.deinit()
{
  swift_release();
  return v0;
}

uint64_t PommesRequestInstrumentationUtil.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Emittable.mockStream.getter in conformance PommesRequestInstrumentationUtil()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_1C90926FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C9092748(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 104))(*a1);
}

uint64_t type metadata accessor for PommesRequestInstrumentationUtil()
{
  return self;
}

uint64_t method lookup function for PommesRequestInstrumentationUtil(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesRequestInstrumentationUtil);
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.mockStream.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.mockStream.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.mockStream.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.logStartOfPommesRequest(requestId:pommesCandidateId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.logEndOfPommesRequest(requestId:pommesCandidateId:result:pommesSearchReason:isHandledByPreflight:preflightClientHandlerIdentifier:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.logFailedPommesRequest(requestId:pommesCandidateId:failedReason:pommesSearchReason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.logUnableToHandlePommesRequest(requestId:pommesCandidateId:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.logPSCScoreReported(requestId:pommesCandidateId:score:parserId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t UsoTask.isAppLaunchTask.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v7, (uint64_t)v5);
  if (!v6)
  {
    outlined destroy of Any?((uint64_t)v7);
    goto LABEL_5;
  }
  outlined init with copy of Any?((uint64_t)v5, (uint64_t)v4);
  type metadata accessor for UsoTask_open_common_App();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_start_uso_NoEntity();
    if (swift_dynamicCast()
      || (type metadata accessor for UsoTask_play_uso_NoEntity(), swift_dynamicCast()))
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter();
      swift_release();
      if (v3)
      {
        uint64_t v1 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
        swift_release();
        outlined destroy of Any?((uint64_t)v7);
        if (v1)
        {
          swift_release();
          uint64_t v0 = 1;
LABEL_13:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
          goto LABEL_14;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)v7);
        swift_release();
      }
      uint64_t v0 = 0;
      goto LABEL_13;
    }
    outlined destroy of Any?((uint64_t)v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
LABEL_5:
    uint64_t v0 = 0;
    goto LABEL_14;
  }
  outlined destroy of Any?((uint64_t)v7);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  uint64_t v0 = 1;
LABEL_14:
  outlined destroy of Any?((uint64_t)v5);
  return v0;
}

unint64_t Siri_Nlu_External_UserParse.firstAppLaunchTask()()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = Siri_Nlu_External_Span.matcherNames.getter();
  unint64_t v24 = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    uint64_t v7 = v2 + 16;
    uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
    v21[1] = v5;
    uint64_t v10 = v5 + ((v9 + 32) & ~v9);
    id v11 = (void (**)(char *, uint64_t))(v7 - 8);
    uint64_t v22 = *(void *)(v7 + 56);
    int64_t v23 = v8;
    while (1)
    {
      uint64_t v12 = v7;
      v23(v4, v10, v1);
      uint64_t v13 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
      if (v0) {
        break;
      }
      unint64_t v14 = v13;
      (*v11)(v4, v1);
      specialized Array.append<A>(contentsOf:)(v14);
      v10 += v22;
      --v6;
      uint64_t v7 = v12;
      if (!v6)
      {
        swift_bridgeObjectRelease();
        unint64_t v15 = v24;
        goto LABEL_7;
      }
    }
    (*v11)(v4, v1);
    unint64_t v17 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v15 = MEMORY[0x1E4FBC860];
LABEL_7:
    if (v15 >> 62) {
      goto LABEL_20;
    }
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v16)
    {
      while (1)
      {
        unint64_t v17 = *(void *)(v15 + 32);
        swift_retain();
        if (UsoTask.isAppLaunchTask.getter()) {
          break;
        }
        swift_release();
        if (v16 != 1)
        {
          uint64_t v18 = 5;
          while (1)
          {
            uint64_t v19 = v18 - 3;
            if (__OFADD__(v18 - 4, 1)) {
              break;
            }
            unint64_t v17 = *(void *)(v15 + 8 * v18);
            swift_retain();
            if (UsoTask.isAppLaunchTask.getter()) {
              goto LABEL_10;
            }
            swift_release();
            ++v18;
            if (v19 == v16) {
              goto LABEL_17;
            }
          }
          __break(1u);
LABEL_20:
          swift_bridgeObjectRetain();
          uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
          if (v16) {
            continue;
          }
        }
        goto LABEL_17;
      }
LABEL_10:
      swift_bridgeObjectRelease_n();
    }
    else
    {
LABEL_17:
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  return v17;
}

uint64_t ParkingLocationProfileSliceResolver.__allocating_init()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = v3 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  *(void *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_semaphore) = dispatch_semaphore_create(0);
  v6((uint64_t)v2, 1, 1, v5);
  uint64_t v7 = v3 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v2, v7);
  swift_endAccess();
  *(unsigned char *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_resolutionSucceeded) = 0;
  return v3;
}

uint64_t ParkingLocationProfileSliceResolver.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_semaphore) = dispatch_semaphore_create(0);
  v6(v3, 1, 1, v5);
  uint64_t v7 = v0 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v3, v7);
  swift_endAccess();
  *(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_resolutionSucceeded) = 0;
  return v0;
}

uint64_t ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v89 = (uint64_t)v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unsigned int v88 = (char *)v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v14 = *(void *)(*((void *)v13 - 1) + 64);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v80 - v18;
  if (a1)
  {
    if (a2)
    {
      uint64_t v87 = a3;
      uint64_t v81 = v17;
      uint64_t v82 = v16;
      id v20 = objc_allocWithZone(MEMORY[0x1E4F96790]);
      uint64_t v85 = v11;
      id v21 = v20;
      swift_unknownObjectRetain();
      id v83 = a2;
      id v22 = objc_msgSend(v21, sel_init);
      uint64_t v23 = type metadata accessor for UUID();
      unsigned int v86 = v19;
      uint64_t v84 = v10;
      uint64_t v24 = v23;
      v80[1] = v80;
      uint64_t v25 = *(void *)(v23 - 8);
      MEMORY[0x1F4188790](v23);
      int v27 = (char *)v80 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
      id v28 = v22;
      UUID.init()();
      uint64_t v29 = v4;
      char v30 = a1;
      uint64_t v31 = UUID.uuidString.getter();
      uint64_t v33 = v32;
      uint64_t v34 = v24;
      uint64_t v35 = (uint64_t)v86;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v34);
      uint64_t v36 = v29;
      char v37 = (void *)MEMORY[0x1CB77CA90](v31, v33);
      swift_bridgeObjectRelease();
      objc_msgSend(v28, sel_setAceId_, v37);

      objc_msgSend(v28, sel_setRefId_, 0);
      Date.init()();
      uint64_t v38 = v35 + v13[5];
      *(void *)uint64_t v38 = "SiriInformationSearch/ParkingLocationProfileSliceResolver.swift";
      *(void *)(v38 + 8) = 63;
      *(unsigned char *)(v38 + 16) = 2;
      *(void *)(v35 + v13[6]) = 45;
      uint64_t v39 = v35 + v13[7];
      *(void *)uint64_t v39 = "resolveParkingLocationSlice(serviceHelper:dispatchQueue:)";
      *(void *)(v39 + 8) = 57;
      *(unsigned char *)(v39 + 16) = 2;
      uint64_t v40 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002BLL);
      uint64_t v41 = (uint64_t *)(v35 + v13[8]);
      *uint64_t v41 = v40;
      v41[1] = v42;
      uint64_t v43 = v81;
      outlined init with copy of PerformanceUtil.Ticket(v35, v81);
      unint64_t v44 = (*(unsigned __int8 *)(v82 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
      unint64_t v45 = (v14 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v46 = swift_allocObject();
      outlined init with take of PerformanceUtil.Ticket(v43, v46 + v44);
      uint64_t v47 = v83;
      *(void *)(v46 + v45) = v83;
      *(void *)(v46 + ((v45 + 15) & 0xFFFFFFFFFFFFFFF8)) = v29;
      aBlock[4] = partial apply for closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:);
      aBlock[5] = v46;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
      uint64_t aBlock[3] = &block_descriptor_11;
      unint64_t v48 = _Block_copy(aBlock);
      id v49 = v47;
      id v50 = v28;
      swift_retain();
      swift_release();
      objc_msgSend(v30, sel_handleCommand_completion_, v50, v48);
      _Block_release(v48);

      OS_dispatch_semaphore.wait()();
      uint64_t v51 = v36 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
      swift_beginAccess();
      uint64_t v52 = v51;
      uint64_t v53 = v89;
      outlined init with copy of MediaUserStateCenter?(v52, v89, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
      uint64_t v54 = v85;
      uint64_t v55 = v84;
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v85 + 48))(v53, 1) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v56 = v49;
        uint64_t v57 = type metadata accessor for Logger();
        __swift_project_value_buffer(v57, (uint64_t)static Logger.pommes);
        unint64_t v58 = Logger.logObject.getter();
        os_log_type_t v59 = static os_log_type_t.error.getter();
        BOOL v60 = os_log_type_enabled(v58, v59);
        uint64_t v61 = v87;
        if (v60)
        {
          uint64_t v62 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v62 = 0;
          _os_log_impl(&dword_1C8F83000, v58, v59, "There was a problem resolving parking location profile slice value", v62, 2u);
          MEMORY[0x1CB77E470](v62, -1, -1);
        }

        uint64_t v63 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
        _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, MEMORY[0x1E4F88EF0]);
        static Message.with(_:)();

        swift_unknownObjectRelease();
        outlined destroy of PerformanceUtil.Ticket(v35);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v61, 0, 1, v63);
      }
      else
      {
        uint64_t v74 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 32);
        id v83 = v30;
        int v75 = v88;
        v74(v88, v53, v55);
        uint64_t v76 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
        MEMORY[0x1F4188790](v76);
        v80[-2] = v75;
        _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, MEMORY[0x1E4F88EF0]);
        uint64_t v77 = v87;
        static Message.with(_:)();

        swift_unknownObjectRelease();
        outlined destroy of PerformanceUtil.Ticket(v35);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v75, v55);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v77, 0, 1, v76);
      }
    }
    uint64_t v69 = one-time initialization token for pommes;
    swift_unknownObjectRetain();
    if (v69 != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    __swift_project_value_buffer(v70, (uint64_t)static Logger.pommes);
    char v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl(&dword_1C8F83000, v71, v72, "Cannot create parking location slice because there is no dispatch queue", v73, 2u);
      MEMORY[0x1CB77E470](v73, -1, -1);
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.pommes);
    char v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl(&dword_1C8F83000, v66, v67, "Cannot create parking location slice because there is no service helper", v68, 2u);
      MEMORY[0x1CB77E470](v68, -1, -1);
    }
  }
  uint64_t v78 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56);

  return v79(a3, 1, 1, v78);
}

uint64_t closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v22[2] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(a3, 0);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a5;
  v9[3] = a2;
  v9[4] = a1;
  aBlock[4] = partial apply for closure #1 in closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:);
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t aBlock[3] = &block_descriptor_14_0;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  v22[1] = v22;
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  id v15 = a2;
  id v16 = a1;
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  id v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v22[3] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1CB77D180](0, v14, v20, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

Swift::Int closure #1 in closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(int a1, id a2, void *a3)
{
  if (!a2)
  {
    if (a3)
    {
      id v15 = a3;
      ParkingLocationProfileSliceResolver.handleAceVehicleEvent(_:)(v15);

      return OS_dispatch_semaphore.signal()();
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1C8F83000, v8, v18, "Received nil response from service helper", v19, 2u);
      MEMORY[0x1CB77E470](v19, -1, -1);
    }
LABEL_9:

    return OS_dispatch_semaphore.signal()();
  }
  id v4 = a2;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  id v6 = a2;
  id v7 = a2;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v8, v9))
  {

    goto LABEL_9;
  }
  uint64_t v10 = (uint8_t *)swift_slowAlloc();
  uint64_t v11 = swift_slowAlloc();
  uint64_t v20 = v11;
  *(_DWORD *)uint64_t v10 = 136315138;
  id v12 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v13 = String.init<A>(describing:)();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v20);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1C8F83000, v8, v9, "Service helper returned an error: %s", v10, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1CB77E470](v11, -1, -1);
  MEMORY[0x1CB77E470](v10, -1, -1);

  return OS_dispatch_semaphore.signal()();
}

uint64_t closure #2 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  MEMORY[0x1F4188790](v3);
  (*(void (**)(char *, void))(v5 + 104))((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F892B8]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C91947A0;
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_resolutionSucceeded) == 1)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v9 = 0;
      _os_log_impl(&dword_1C8F83000, v7, v8, "Resolution succeeded but no vehicle event found", v9, 2u);
      MEMORY[0x1CB77E470](v9, -1, -1);
    }
  }
  _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, MEMORY[0x1E4F89328]);
  static Message.with(_:)();
  return Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
}

uint64_t closure #3 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  MEMORY[0x1F4188790](v3);
  (*(void (**)(char *, void))(v5 + 104))((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F892B8]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C91947A0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16))(v9 + v8, a2, v6);
  return Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
}

void ParkingLocationProfileSliceResolver.handleAceVehicleEvent(_:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ParkingLocation?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v6 = swift_dynamicCastObjCClass();
  if (!v6) {
    goto LABEL_9;
  }
  uint64_t v7 = v6;
  unint64_t v8 = self;
  id v51 = a1;
  id v9 = objc_msgSend(v8, sel_aceObjectWithGenericCommand_, v7);
  if (!v9)
  {

LABEL_9:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    id v51 = a1;
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      id v24 = (id)swift_slowAlloc();
      id v53 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      id v25 = v51;
      id v26 = objc_msgSend(v25, sel_description);
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v28;

      uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, (uint64_t *)&v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v21, v22, "Received invalid service helper response %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v24, -1, -1);
      MEMORY[0x1CB77E470](v23, -1, -1);
LABEL_13:

      return;
    }

LABEL_15:
    id v30 = v51;
    goto LABEL_16;
  }
  uint64_t v10 = v9;
  self;
  uint64_t v11 = swift_dynamicCastObjCClass();
  if (v11)
  {
    id v12 = (void *)v11;
    uint64_t v13 = one-time initialization token for pommes;
    id v14 = v10;
    if (v13 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    id v16 = v14;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 134217984;
      id v53 = objc_msgSend(v12, sel_errorCode);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C8F83000, v17, v18, "Command failed with error code = %ld", v19, 0xCu);
      MEMORY[0x1CB77E470](v19, -1, -1);

      return;
    }

    goto LABEL_26;
  }
  self;
  uint64_t v31 = swift_dynamicCastObjCClass();
  if (!v31)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
    id v51 = v51;
    id v21 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      id v42 = (id)swift_slowAlloc();
      id v53 = v42;
      *(_DWORD *)uint64_t v41 = 136315138;
      swift_getObjectType();
      uint64_t v43 = _typeName(_:qualified:)();
      uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)&v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v21, v40, "Service helper response was of type %s, not SALocalSearchVehicleEventSearchCompleted", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v42, -1, -1);
      MEMORY[0x1CB77E470](v41, -1, -1);

      goto LABEL_13;
    }

    goto LABEL_15;
  }
  uint64_t v32 = (void *)v31;
  id v50 = v10;
  id v33 = objc_msgSend(v32, sel_events);
  if (v33)
  {
    uint64_t v34 = v33;
    type metadata accessor for SALocalSearchVehicleEvent();
    unint64_t v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v35 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v45)
      {
LABEL_21:
        if ((v35 & 0xC000000000000001) != 0)
        {
          id v36 = (id)MEMORY[0x1CB77D510](0, v35);
        }
        else
        {
          if (!*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          id v36 = *(id *)(v35 + 32);
        }
        char v37 = v36;
        swift_bridgeObjectRelease();
        ParkingLocationProfileSliceResolver.buildParkingLocation(_:)(v37, (uint64_t)v5);
        ParkingLocationProfileSliceResolver.buildParkingLocationProfileSlice(_:)((uint64_t)v5);

        outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ParkingLocation?);
        return;
      }
    }
    else if (*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_21;
    }
    swift_bridgeObjectRelease();
  }
  *(unsigned char *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_resolutionSucceeded) = 1;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Logger.pommes);
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    id v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v49 = 0;
    _os_log_impl(&dword_1C8F83000, v47, v48, "No vehicle event found", v49, 2u);
    MEMORY[0x1CB77E470](v49, -1, -1);

    id v38 = v50;
    goto LABEL_27;
  }

  id v30 = v50;
LABEL_16:

LABEL_26:
  id v38 = v51;
LABEL_27:
}

uint64_t closure #1 in ParkingLocationProfileSliceResolver.buildResolutionStateFailedSliceValue()()
{
  uint64_t v0 = type metadata accessor for Google_Protobuf_Any();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  MEMORY[0x1F4188790](v5);
  (*(void (**)(char *, void))(v7 + 104))((char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F896F0]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4F89B48], v1);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  Google_Protobuf_Any.init()();
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
}

uint64_t closure #2 in ParkingLocationProfileSliceResolver.buildResolutionStateFailedSliceValue()()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  MEMORY[0x1F4188790](v4);
  (*(void (**)(char *, void))(v6 + 104))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F896F0]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4F89B40], v0);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
}

uint64_t ParkingLocationProfileSliceResolver.buildParkingLocationProfileSlice(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)v29 - v9;
  MEMORY[0x1F4188790](v8);
  id v12 = (char *)v29 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ParkingLocation?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocation();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v15, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ParkingLocation?);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ParkingLocation?);
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_resolutionSucceeded) == 1)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
      id v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl(&dword_1C8F83000, v21, v22, "Resolution succeeded but no vehicle event found", v23, 2u);
        MEMORY[0x1CB77E470](v23, -1, -1);
      }

      uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
      _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, MEMORY[0x1E4F89328]);
    }
    else
    {
      uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
      _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, MEMORY[0x1E4F89328]);
    }
    static Message.with(_:)();
    type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 0, 1, v24);
    outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v7, (uint64_t)v12);
    uint64_t v28 = v2 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
    swift_beginAccess();
    outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v12, v28);
    return swift_endAccess();
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 32))(v19, v15, v16);
    uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
    MEMORY[0x1F4188790](v25);
    v29[-2] = v19;
    _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, MEMORY[0x1E4F89328]);
    static Message.with(_:)();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v12, 0, 1, v25);
    outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v12, (uint64_t)v10);
    uint64_t v26 = v2 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
    swift_beginAccess();
    outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v10, v26);
    swift_endAccess();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v17 + 8))(v19, v16);
  }
}

uint64_t closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocationProfileSlice(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v21 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v20 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  uint64_t v4 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocation();
  void v22[3] = v14;
  void v22[4] = _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ParkingLocation and conformance Apple_Parsec_Siri_V2alpha_ParkingLocation, MEMORY[0x1E4F891D8]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(boxed_opaque_existential_1, a2, v14);
  defaultAnyTypeURLPrefix.getter();
  uint64_t v16 = (void *)v18[1];
  Google_Protobuf_Any.init(message:partial:typePrefix:)();
  if (v16)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    Google_Protobuf_Any.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  }
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4F896F0], v19);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, void, uint64_t))(v21 + 104))(v20, *MEMORY[0x1E4F89B48], v23);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
}

uint64_t ParkingLocationProfileSliceResolver.buildParkingLocation(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = objc_msgSend(a1, sel_location);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = objc_msgSend(v3, sel_latitude);
    if (v5)
    {
      uint64_t v6 = v5;
      objc_msgSend(v5, sel_floatValue);
      float v8 = v7;

      id v9 = objc_msgSend(v4, sel_longitude);
      if (v9)
      {
        uint64_t v10 = v9;
        objc_msgSend(v9, sel_floatValue);
        float v12 = v11;

        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
        uint64_t v14 = v4;
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = swift_slowAlloc();
          uint64_t v18 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v17 = 138412546;
          id v19 = [v14 latitude];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v18 = v19;
          *(_WORD *)(v17 + 12) = 2112;
          id v27 = [v14 longitude];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v18[1] = v27;

          _os_log_impl(&dword_1C8F83000, v15, v16, "Fetched parking location with latlong (%@, %@)", (uint8_t *)v17, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v18, -1, -1);
          MEMORY[0x1CB77E470](v17, -1, -1);

          if (v8 != 0.0) {
            goto LABEL_22;
          }
        }
        else
        {

          if (v8 != 0.0) {
            goto LABEL_22;
          }
        }
        if (v12 == 0.0)
        {
          uint64_t v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v28, v29))
          {
            id v30 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v30 = 0;
            uint64_t v31 = "Received zero for both latlong, treating as error";
            uint64_t v32 = v28;
            os_log_type_t v33 = v29;
            uint64_t v34 = v30;
            uint32_t v35 = 2;
LABEL_27:
            _os_log_impl(&dword_1C8F83000, v32, v33, v31, v34, v35);
            MEMORY[0x1CB77E470](v30, -1, -1);
            id v38 = v14;
LABEL_29:

            uint64_t v39 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocation();
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(a2, 1, 1, v39);
          }
          goto LABEL_28;
        }
LABEL_22:
        if (fabsf(v8) <= 90.0 && fabsf(v12) <= 180.0)
        {
          uint64_t v36 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocation();
          MEMORY[0x1F4188790](v36);
          _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ParkingLocation and conformance Apple_Parsec_Siri_V2alpha_ParkingLocation, MEMORY[0x1E4F891D8]);
          static Message.with(_:)();

          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(a2, 0, 1, v36);
        }
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v28, v37))
        {
          id v30 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)id v30 = 134218240;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *((_WORD *)v30 + 6) = 2048;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v31 = "Received latlong out of valid range: (%f, %f)";
          uint64_t v32 = v28;
          os_log_type_t v33 = v37;
          uint64_t v34 = v30;
          uint32_t v35 = 22;
          goto LABEL_27;
        }
LABEL_28:
        id v38 = v28;
        uint64_t v28 = v14;
        goto LABEL_29;
      }
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_1C8F83000, v21, v22, "Missing location in the local search vehicle event", v23, 2u);
    MEMORY[0x1CB77E470](v23, -1, -1);
  }

  uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocation();
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);

  return v25(a2, 1, 1, v24);
}

uint64_t closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocation(_:)(float a1, float a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams();
  MEMORY[0x1F4188790](v7);
  id v8 = objc_msgSend(a4, sel_notes);
  if (v8)
  {
    id v9 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v8 = (id)Apple_Parsec_Siri_V2alpha_ParkingLocation.notes.setter();
  }
  MEMORY[0x1F4188790](v8);
  *((float *)&v11 - 4) = a1;
  *((float *)&v11 - 3) = a2;
  _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationBuilderParams and conformance Apple_Parsec_Siri_V2alpha_LocationBuilderParams, MEMORY[0x1E4F895D0]);
  static Message.with(_:)();
  return Apple_Parsec_Siri_V2alpha_ParkingLocation.location.setter();
}

uint64_t ParkingLocationProfileSliceResolver.deinit()
{
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);

  return v0;
}

uint64_t ParkingLocationProfileSliceResolver.__deallocating_deinit()
{
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);

  return swift_deallocClassInstance();
}

uint64_t sub_1C9096040()
{
  uint64_t v1 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  swift_release();

  return MEMORY[0x1F4186498](v0, ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v4);
}

uint64_t partial apply for closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(void *a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + v7);
  uint64_t v9 = *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(a1, a2, v2 + v6, v8, v9);
}

uint64_t partial apply for closure #2 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(uint64_t a1)
{
  return closure #2 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(a1, v1);
}

uint64_t partial apply for closure #3 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(uint64_t a1)
{
  return closure #3 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(a1, *(void *)(v1 + 16));
}

uint64_t ObjC metadata update function for ParkingLocationProfileSliceResolver()
{
  return type metadata accessor for ParkingLocationProfileSliceResolver();
}

uint64_t type metadata accessor for ParkingLocationProfileSliceResolver()
{
  uint64_t result = type metadata singleton initialization cache for ParkingLocationProfileSliceResolver;
  if (!type metadata singleton initialization cache for ParkingLocationProfileSliceResolver) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for ParkingLocationProfileSliceResolver()
{
  type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ParkingLocationProfileSliceResolver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ParkingLocationProfileSliceResolver);
}

uint64_t dispatch thunk of ParkingLocationProfileSliceResolver.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t partial apply for closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocation(_:)(uint64_t a1)
{
  return closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocation(_:)(*(float *)(v1 + 24), *(float *)(v1 + 28), a1, *(void **)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocation(_:)()
{
  return Apple_Parsec_Siri_V2alpha_LocationBuilderParams.longitude.setter();
}

uint64_t _s10PegasusAPI38Apple_Parsec_Siri_V2alpha_ProfileSliceVAC21InternalSwiftProtobuf7MessageAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocationProfileSlice(_:)(uint64_t a1)
{
  return closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocationProfileSlice(_:)(a1, *(void *)(v1 + 16));
}

unint64_t type metadata accessor for SALocalSearchVehicleEvent()
{
  unint64_t result = lazy cache variable for type metadata for SALocalSearchVehicleEvent;
  if (!lazy cache variable for type metadata for SALocalSearchVehicleEvent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SALocalSearchVehicleEvent);
  }
  return result;
}

uint64_t sub_1C90964B0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

Swift::Int partial apply for closure #1 in closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)()
{
  return closure #1 in closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(*(void *)(v0 + 16), *(id *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t DataProviderManager.__allocating_init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v34 = a7;
  uint64_t v35 = a8;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v31 = a2;
  uint64_t v37 = a9;
  uint64_t v28 = a12;
  os_log_type_t v29 = a10;
  uint64_t v26 = a13;
  uint64_t v27 = a11;
  uint64_t v17 = swift_allocObject();
  uint64_t v36 = a14;
  uint64_t v18 = *(void *)(a14 + 24);
  uint64_t v19 = *(void *)(a14 + 32);
  uint64_t v20 = __swift_mutable_project_boxed_opaque_existential_1(v36, *(void *)(v36 + 24));
  MEMORY[0x1F4188790](v20);
  os_log_type_t v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v23 + 16))(v22);
  uint64_t v24 = v29;
  uint64_t v30 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(a1, v31, a3, a4, v32, v33, v34, v35, v37, v29, v27, a12, a13, (uint64_t)v22, v17, v18, v19);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v36);
  return v30;
}

uint64_t specialized AnyDataProvider.waitForPrepare(timeout:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unsigned __int8 v24 = 1;
  ContinuousClock.init()();
  uint64_t v19 = &v24;
  uint64_t v20 = v2;
  uint64_t v21 = a1;
  lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock((unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x1E4FBD1A8]);
  Clock.measure(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v13 = Duration.description.getter();
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v15 = *(void *)(v2 + 96);
    unint64_t v16 = *(void *)(v2 + 104);
    swift_bridgeObjectRetain();
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v9, v10, "Waited %s for %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v12, -1, -1);
    MEMORY[0x1CB77E470](v11, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return v24;
}

uint64_t DataProviderManager.environment.getter()
{
  return swift_retain();
}

id DataProviderManager.preferences.getter()
{
  return *(id *)(v0 + 104);
}

uint64_t key path setter for DataProviderManager.appChecking : DataProviderManager(uint64_t a1, void *a2)
{
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v5, &demangling cache variable for type metadata for PommesAppChecking?);
  uint64_t v3 = *a2 + 128;
  swift_beginAccess();
  outlined assign with take of PommesAppChecking?((uint64_t)v5, v3);
  return swift_endAccess();
}

uint64_t DataProviderManager.appChecking.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of MediaUserStateCenter?(v1 + 128, a1, &demangling cache variable for type metadata for PommesAppChecking?);
}

uint64_t DataProviderManager.setServiceHelper(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  swift_unknownObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v17[0] = v8;
    *(_DWORD *)unint64_t v7 = 136315138;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AFRequestDispatcherServiceHelper);
    uint64_t v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v5, v6, "Creating POMMES service helper (underlying: %s)", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v8, -1, -1);
    MEMORY[0x1CB77E470](v7, -1, -1);
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  id v11 = objc_allocWithZone(MEMORY[0x1E4F1B980]);
  swift_unknownObjectRetain();
  id v12 = objc_msgSend(v11, sel_init);
  type metadata accessor for AssistantDataCache();
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = closure #1 in variable initialization expression of AssistantDataCache.contactsQueue();
  *(void *)(v13 + 144) = 0;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 122) = 0u;
  *(void *)(v13 + 16) = v14;
  *(void *)(v13 + 24) = a1;
  *(void *)(v13 + 32) = v12;
  *(void *)(v13 + 40) = &protocol witness table for CNContactStore;
  swift_beginAccess();
  uint64_t v15 = *(void **)(v13 + 144);
  *(void *)(v13 + 144) = 0;

  *(void *)(v2 + 112) = v13;
  swift_release();
  *(void *)(v2 + 120) = a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t DataProviderManager.getServiceHelper()()
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.pommes);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v8 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AFRequestDispatcherServiceHelper?);
    uint64_t v5 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v1, v2, "Retrieving POMMES service helper (underlying: %s)", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v4, -1, -1);
    MEMORY[0x1CB77E470](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return swift_unknownObjectRetain();
}

uint64_t DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v34 = a6;
  uint64_t v35 = a9;
  uint64_t v27 = a10;
  uint64_t v28 = a1;
  uint64_t v26 = a11;
  uint64_t v29 = a13;
  uint64_t v30 = a12;
  uint64_t v18 = *(void *)(a14 + 24);
  uint64_t v19 = *(void *)(a14 + 32);
  uint64_t v20 = __swift_mutable_project_boxed_opaque_existential_1(a14, v18);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v23 + 16))(v22);
  unsigned __int8 v24 = v27;
  uint64_t v31 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(v28, a2, a3, a4, a5, v34, v32, v33, v35, v27, v26, a12, a13, (uint64_t)v22, v31, v18, v19);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a14);
  return v31;
}

Swift::Void __swiftcall DataProviderManager.prepareForSearchAtSessionStart()()
{
  uint64_t v1 = v0;
  os_log_type_t v2 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  swift_retain_n();
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v21 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v20 = *(void *)(v1 + 112);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssistantDataCache?);
    uint64_t v10 = String.init<A>(describing:)();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v6, v7, "DataProviderManager scheduling work to prepare for search at session start (helper: %s)...", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v9, -1, -1);
    MEMORY[0x1CB77E470](v8, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v12 = *(void *)(v1 + 16);
  (*(void (**)(uint64_t))(**(void **)(v1 + 32) + 216))(v12);
  (*(void (**)(uint64_t))(**(void **)(v1 + 40) + 216))(v12);
  (*(void (**)(uint64_t))(**(void **)(v1 + 48) + 216))(v12);
  (*(void (**)(uint64_t))(**(void **)(v1 + 56) + 216))(v12);
  (*(void (**)(uint64_t))(**(void **)(v1 + 24) + 216))(v12);
  (*(void (**)(uint64_t))(**(void **)(v1 + 64) + 216))(v12);
  (*(void (**)(uint64_t))(**(void **)(v1 + 72) + 216))(v12);
  (*(void (**)(uint64_t))(**(void **)(v1 + 80) + 216))(v12);
  Date.init()();
  uint64_t v13 = &v4[v2[5]];
  *(void *)uint64_t v13 = "SiriInformationSearch/DataProviderManager.swift";
  *((void *)v13 + 1) = 47;
  v13[16] = 2;
  *(void *)&v4[v2[6]] = 105;
  uint64_t v14 = &v4[v2[7]];
  *(void *)uint64_t v14 = "prepareForSearchAtSessionStart()";
  *((void *)v14 + 1) = 32;
  v14[16] = 2;
  uint64_t v15 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000032);
  unint64_t v16 = (uint64_t *)&v4[v2[8]];
  *unint64_t v16 = v15;
  v16[1] = v17;
  uint64_t v18 = *(void *)(v1 + 112);
  if (v18)
  {
    uint64_t v19 = *(void (**)(uint64_t, void))(*(void *)v18 + 176);
    swift_retain();
    v19(v12, 0);
    swift_release();
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v4, 0);
  outlined destroy of PerformanceUtil.Ticket((uint64_t)v4);
}

Swift::Void __swiftcall DataProviderManager.prepareForSearchAtPommesRequestStart()()
{
  uint64_t v1 = v0;
  os_log_type_t v2 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  swift_retain_n();
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v21 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v20 = *(void *)(v1 + 112);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssistantDataCache?);
    uint64_t v10 = String.init<A>(describing:)();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v6, v7, "DataProviderManager scheduling work to prepare for search at POMMES request start (helper: %s)...", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v9, -1, -1);
    MEMORY[0x1CB77E470](v8, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  Date.init()();
  uint64_t v12 = &v4[v2[5]];
  *(void *)uint64_t v12 = "SiriInformationSearch/DataProviderManager.swift";
  *((void *)v12 + 1) = 47;
  v12[16] = 2;
  *(void *)&v4[v2[6]] = 120;
  uint64_t v13 = &v4[v2[7]];
  *(void *)uint64_t v13 = "prepareForSearchAtPommesRequestStart()";
  *((void *)v13 + 1) = 38;
  v13[16] = 2;
  uint64_t v14 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000032);
  uint64_t v15 = (uint64_t *)&v4[v2[8]];
  *uint64_t v15 = v14;
  v15[1] = v16;
  uint64_t v17 = *(void *)(v1 + 112);
  if (v17)
  {
    uint64_t v18 = *(void *)(v1 + 16);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)v17 + 176);
    swift_retain();
    v19(v18, 1);
    swift_release();
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v4, 0);
  outlined destroy of PerformanceUtil.Ticket((uint64_t)v4);
}

Swift::Void __swiftcall DataProviderManager.tearDown()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C8F83000, v3, v4, "DataProviderManager tearing down data providers ...", v5, 2u);
    MEMORY[0x1CB77E470](v5, -1, -1);
  }

  uint64_t v6 = (*(uint64_t (**)(void))(*v1[3] + 248))();
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*v1[4] + 248))(v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*v1[5] + 248))(v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*v1[6] + 248))(v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*v1[7] + 248))(v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*v1[8] + 248))(v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*v1[9] + 248))(v11);
  (*(void (**)(uint64_t))(*v1[10] + 248))(v12);
}

uint64_t DataProviderManager.addNavigationAppInfoSlice(to:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v21)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>));
  uint64_t v22;
  uint64_t v23;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  os_log_type_t v4 = v3;
  uint64_t v30 = a3;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  v28[0] = (uint64_t)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v28 - v11;
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t))(v8 + 16);
  uint64_t v29 = v14;
  uint64_t v15 = v13((char *)v28 - v11, a1);
  if (one-time initialization token for shared != -1) {
    uint64_t v15 = swift_once();
  }
  v28[1] = (uint64_t)v28;
  uint64_t v16 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v15);
  uint64_t v26 = v4;
  uint64_t v27 = a2;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v21 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v16 + 200);
  uint64_t v26 = &v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_ProfileSlice]?);
  LOBYTE(v25) = 2;
  v21(&v31, 0xD000000000000052, 0x80000001C91A00B0, 0, v20, "SiriInformationSearch/DataProviderManager.swift", 47, 2, 231, "addNavigationAppInfoSlice(to:for:)", 34, v25, partial apply for closure #1 in DataProviderManager.addNavigationAppInfoSlice(to:for:));
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (v31)
  {
    uint64_t v22 = v28[0];
    DataProviderManager.appendProfileSlices(_:to:)(v31, (uint64_t)v12, v28[0]);
    swift_bridgeObjectRelease();
    uint64_t v23 = v29;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v29);
    uint64_t v12 = (char *)v22;
  }
  else
  {
    uint64_t v23 = v29;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v30, v12, v23);
}

uint64_t closure #1 in DataProviderManager.addNavigationAppInfoSlice(to:for:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v26[14] = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v9 = a1[6];
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v8);
  uint64_t v10 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 0, 1, v10);
  uint64_t v11 = a1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v24 = v3;
  outlined init with take of PommesSearchReason?((uint64_t)v25, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  uint64_t v12 = a1[15];
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = &v25[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = &v25[-v18 - 8];
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  if (one-time initialization token for timeout != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for DispatchTimeInterval();
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static PreferredNavigationAppDataProvider.timeout);
  MEMORY[0x1CB77C970](v19, v21);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v19, v13);
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, char *))(*(void *)v9 + 240))(v8, v26, v12, v11, v17);
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v26);
  v22(v17, v13);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t DataProviderManager.addSiriKitAppInfoSlice(to:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v12)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(uint64_t@<X8>), void *, uint64_t);
  uint64_t v13;
  uint64_t v15;
  void v16[5];
  uint64_t v17;
  uint64_t v18;

  uint64_t v4 = v3;
  uint64_t v17 = a1;
  if (one-time initialization token for shared != -1) {
    a1 = swift_once();
  }
  uint64_t v7 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](a1);
  v16[2] = v4;
  v16[3] = a2;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v12 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(uint64_t@<X8>), void *, uint64_t))(*(void *)v7 + 200);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_ProfileSlice]?);
  v12(&v18, 0xD00000000000004ALL, 0x80000001C91A0140, 0, v11, "SiriInformationSearch/DataProviderManager.swift", 47, 2, 259, "addSiriKitAppInfoSlice(to:for:)", 31, 2, partial apply for closure #1 in DataProviderManager.addSiriKitAppInfoSlice(to:for:), v16, v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v18)
  {
    DataProviderManager.appendProfileSlices(_:to:)(v18, v17, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a3, v17, v15);
  }
}

uint64_t closure #1 in DataProviderManager.addSiriKitAppInfoSlice(to:for:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v28[14] = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a1[7];
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  uint64_t v24 = a1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v25 = v3;
  outlined init with take of PommesSearchReason?((uint64_t)v27, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  uint64_t v10 = a1[15];
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v24 - v16;
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  uint64_t v18 = type metadata accessor for DispatchTimeInterval();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (uint64_t *)((char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v21 = 1;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E4FBCAC0], v18);
  MEMORY[0x1CB77C970](v17, v21);
  (*(void (**)(void *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v17, v11);
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, char *))(*(void *)v26 + 240))(v8, v28, v10, v24, v15);
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v28);
  v22(v15, v11);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t DataProviderManager.addMarketplaceInfo(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v44 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v45 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  uint64_t v46 = *(void *)(v47 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v47);
  uint64_t v41 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  id v42 = (char *)&v40 - v13;
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  uint64_t v43 = a2;
  v15(a2, a1, v14);
  uint64_t v16 = v3[9];
  uint64_t v17 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v8, 1, 1, v17);
  uint64_t v18 = v3[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  OS_dispatch_queue.sync<A>(execute:)();
  outlined init with take of PommesSearchReason?((uint64_t)v48, (uint64_t)v49, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  uint64_t v19 = v3[15];
  uint64_t v20 = type metadata accessor for DispatchTime();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v40 - v25;
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  uint64_t v27 = type metadata accessor for DispatchTimeInterval();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (uint64_t *)((char *)&v40 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  void *v30 = 1;
  (*(void (**)(void *, void, uint64_t))(v28 + 104))(v30, *MEMORY[0x1E4FBCAC0], v27);
  MEMORY[0x1CB77C970](v26, v30);
  (*(void (**)(void *, uint64_t))(v28 + 8))(v30, v27);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v21 + 8);
  v31(v26, v20);
  uint64_t v32 = (uint64_t)v45;
  uint64_t v33 = (uint64_t)v44;
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, char *))(*(void *)v16 + 240))(v44, v49, v19, v18, v24);
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v49);
  uint64_t v34 = v20;
  uint64_t v35 = v47;
  v31(v24, v34);
  uint64_t v36 = v46;
  outlined destroy of MediaUserStateCenter?(v33, &demangling cache variable for type metadata for PommesSearchRequest?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v32, 1, v35) == 1) {
    return outlined destroy of MediaUserStateCenter?(v32, &demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  }
  id v38 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v42, v32, v35);
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v41, v38, v35);
  uint64_t v39 = (void (*)(unsigned char *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.modify();
  Apple_Parsec_Search_PegasusQueryContext.marketplaceInfo.setter();
  v39(v48, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v38, v35);
}

void DataProviderManager.addMuxSettings(to:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = a1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.HourFormat();
  uint64_t v63 = *(void *)(v4 - 8);
  uint64_t v64 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v62 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit();
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v61 = v6;
  MEMORY[0x1F4188790](v6);
  os_log_type_t v59 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void ***)(v2 + 88);
  if (v8)
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
    os_log_type_t v67 = &v58;
    MEMORY[0x1F4188790](v9 - 8);
    uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v12 = type metadata accessor for DispatchTime();
    char v66 = &v58;
    uint64_t v13 = *(void *)(v12 - 8);
    MEMORY[0x1F4188790](v12);
    uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    static DispatchTime.now()();
    uint64_t v16 = type metadata accessor for DispatchTimeInterval();
    uint64_t v17 = *(void *)(v16 - 8);
    MEMORY[0x1F4188790](v16);
    uint64_t v19 = (uint64_t *)((char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    *uint64_t v19 = 1;
    (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4FBCAC0], v16);
    MEMORY[0x1CB77C970](v15, v19);
    (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
    uint64_t v8 = (void **)(*((uint64_t (**)(char *))*v8 + 21))(v11);
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for DispatchTime?);
  }
  uint64_t v20 = type metadata accessor for PommesSearchRequest(0);
  if (*(unsigned char *)(a2 + *(int *)(v20 + 60)) != 1) {
    goto LABEL_15;
  }
  if (!v8)
  {
LABEL_16:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl(&dword_1C8F83000, v31, v32, "Unable to get mux settings for user", v33, 2u);
      MEMORY[0x1CB77E470](v33, -1, -1);
    }
    goto LABEL_20;
  }
  uint64_t v21 = (void **)(a2 + *(int *)(v20 + 84));
  uint64_t v22 = v21[1];
  if (!v22 || (uint64_t v23 = (char *)v8[2]) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  uint64_t v24 = *v21;
  swift_bridgeObjectRetain_n();
  uint64_t v25 = v8 + 10;
  while (1)
  {
    uint64_t v26 = *v25;
    if (*(v25 - 6) == v24 && v22 == *(v25 - 5)) {
      break;
    }
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v29 = v26;
    if (v28) {
      goto LABEL_22;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 += 7;
    if (!--v23)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v34 = v26;
LABEL_22:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v35 = [v26 temperatureUnit];
  if (!v35) {
    goto LABEL_34;
  }
  uint64_t v36 = v35;
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v39 = v38;

  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    uint64_t v69 = v44;
    *(_DWORD *)uint64_t v43 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v41, v42, "Adding temperatureUnit %s to Pegasus query context from mux context", v43, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v44, -1, -1);
    MEMORY[0x1CB77E470](v43, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v37 && v45 == v39)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v46 & 1) == 0)
    {
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v37 && v56 == v39)
      {
        swift_bridgeObjectRelease();
        uint64_t v47 = (unsigned int *)MEMORY[0x1E4F885A0];
      }
      else
      {
        char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v47 = (unsigned int *)MEMORY[0x1E4F885B0];
        if (v57) {
          uint64_t v47 = (unsigned int *)MEMORY[0x1E4F885A0];
        }
      }
      goto LABEL_33;
    }
  }
  uint64_t v47 = (unsigned int *)MEMORY[0x1E4F885A8];
LABEL_33:
  (*(void (**)(char *, void, uint64_t))(v60 + 104))(v59, *v47, v61);
  swift_bridgeObjectRelease();
  Apple_Parsec_Search_PegasusQueryContext.temperatureUnit.setter();
LABEL_34:
  id v48 = [v26 twentyFourHourTimeDisplay];
  if (v48)
  {
    id v49 = v48;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.pommes);
    uint64_t v31 = v49;
    id v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      id v53 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v53 = 67109120;
      LODWORD(v69) = [v31 BOOLValue];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C8F83000, v51, v52, "Adding twentyFourHourMode %{BOOL}d to Pegasus query context from mux context", v53, 8u);
      MEMORY[0x1CB77E470](v53, -1, -1);
    }
    else
    {

      id v51 = v31;
    }

    unsigned int v54 = [v31 BOOLValue];
    uint64_t v55 = (unsigned int *)MEMORY[0x1E4F88590];
    if (!v54) {
      uint64_t v55 = (unsigned int *)MEMORY[0x1E4F88598];
    }
    (*(void (**)(char *, void, uint64_t))(v63 + 104))(v62, *v55, v64);
    Apple_Parsec_Search_PegasusQueryContext.hourFormat.setter();
  }
  else
  {
    uint64_t v31 = v26;
  }
LABEL_20:
}

Swift::Bool __swiftcall DataProviderManager.userContentAllowed()()
{
  void (*v2)(uint64_t *__return_ptr, uint64_t);
  uint64_t v3;
  char v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10[12];
  unsigned char v11[24];
  uint64_t v12;
  char v13;

  uint64_t v1 = *(void *)(v0 + 112);
  if (v1
    && (uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v1 + 120),
        uint64_t v3 = swift_retain(),
        v2(v10, v3),
        swift_release(),
        outlined init with take of PommesSearchReason?((uint64_t)v10, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?), v12))
  {
    uint64_t v4 = v13;
    outlined release of AssistantDataSnapshot?(v10);
    return v4 & 1;
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    uint64_t v7 = Logger.logObject.getter();
    uint64_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1C8F83000, v7, v8, "No allowUserGeneratedContent BOOLean available from assistant data cache.", v9, 2u);
      MEMORY[0x1CB77E470](v9, -1, -1);
    }

    return 1;
  }
}

uint64_t DataProviderManager.getQueueState()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  v22[1] = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  memset(v23, 0, 90);
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v22 - v14;
  static DispatchTime.now()();
  uint64_t v16 = type metadata accessor for DispatchTimeInterval();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (void *)((char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v19 = 1;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4FBCAC0], v16);
  MEMORY[0x1CB77C970](v15, v19);
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v15, v9);
  (*(void (**)(char *, _OWORD *, void, uint64_t, char *))(*(void *)v6 + 240))(v5, v23, 0, v8, v13);
  v20(v13, v9);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E4F89508], MEMORY[0x1E4F89340]);
}

uint64_t closure #3 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E4F89500], MEMORY[0x1E4F89338]);
}

uint64_t closure #4 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E4F89500], MEMORY[0x1E4F89350]);
}

uint64_t closure #5 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #5 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E4F89510]);
}

uint64_t closure #6 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #5 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E4F89518]);
}

uint64_t closure #5 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RestrictionCategory();
  MEMORY[0x1F4188790](v3);
  (*(void (**)(char *, void))(v5 + 104))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *a2);
  return Apple_Parsec_Siri_V2alpha_Restriction.category.setter();
}

uint64_t closure #8 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E4F89520], MEMORY[0x1E4F89330]);
}

uint64_t closure #9 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E4F89520], MEMORY[0x1E4F89348]);
}

uint64_t closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RestrictionReason();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RestrictionCategory();
  MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, void))(v11 + 104))((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), *a2);
  Apple_Parsec_Siri_V2alpha_Restriction.category.setter();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *a3, v5);
  return Apple_Parsec_Siri_V2alpha_Restriction.reason.setter();
}

uint64_t static DataProviderManager.isDeviceLockedWithPasscode()()
{
  unsigned int v0 = MKBGetDeviceLockState();
  return (v0 < 4) & (6u >> (v0 & 0xF));
}

uint64_t DataProviderManager.addPairedDevices(to:)(uint64_t a1)
{
  v32[1] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v1[10];
  uint64_t v6 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  uint64_t v33 = v1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  OS_dispatch_queue.sync<A>(execute:)();
  outlined init with take of PommesSearchReason?((uint64_t)v34, (uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  uint64_t v7 = v1[15];
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v32 - v13;
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  uint64_t v15 = type metadata accessor for DispatchTimeInterval();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (void *)((char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  void *v18 = 1;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E4FBCAC0], v15);
  MEMORY[0x1CB77C970](v14, v18);
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v14, v8);
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t, uint64_t, char *))(*(void *)v5 + 240))(&v35, v4, v36, v7, v33, v12);
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v36);
  v19(v12, v8);
  uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for PommesSearchRequest?);
  if (v35)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      v34[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v26 = type metadata accessor for Useragentpb_CompanionDevice();
      uint64_t v27 = swift_bridgeObjectRetain();
      uint64_t v28 = MEMORY[0x1CB77CDC0](v27, v26);
      unint64_t v30 = v29;
      swift_bridgeObjectRelease();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v22, v23, "Adding paired device info: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v25, -1, -1);
      MEMORY[0x1CB77E470](v24, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v31 = (uint64_t (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.modify();
    Apple_Parsec_Search_PegasusQueryContext.companionDevice.setter();
    return v31(v34, 0);
  }
  return result;
}

uint64_t DataProviderManager.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + 128, &demangling cache variable for type metadata for PommesAppChecking?);
  return v0;
}

uint64_t DataProviderManager.__deallocating_deinit()
{
  DataProviderManager.deinit();

  return swift_deallocClassInstance();
}

uint64_t DataProviderManager.waitForPrepare(timeout:)(unint64_t a1)
{
  int64_t v2 = v1;
  unint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(self, sel_processInfo);
  char v9 = NSProcessInfo.isRunningUnitTests.getter();

  if (v9)
  {
    unint64_t v53 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    if (one-time initialization token for pommes != -1) {
LABEL_33:
    }
      swift_once();
    uint64_t v10 = type metadata accessor for Logger();
    uint64_t v50 = __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1C8F83000, v11, v12, "Starting to wait for data providers to finish preparing", v13, 2u);
      MEMORY[0x1CB77E470](v13, -1, -1);
    }

    uint64_t v14 = ContinuousClock.init()();
    MEMORY[0x1F4188790](v14);
    v45[-4] = &v53;
    v45[-3] = v2;
    unint64_t v44 = a1;
    lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock((unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x1E4FBD1A8]);
    Clock.measure(_:)();
    uint64_t v15 = *(void (**)(uint64_t, unint64_t))(v5 + 8);
    v5 += 8;
    v15(v7, v4);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    unint64_t v4 = v17;
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = MEMORY[0x1E4FBC840];
    if (v18)
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      v52[0] = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v5 = (uint64_t)(v20 + 4);
      uint64_t v22 = Duration.description.getter();
      uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v16, (os_log_type_t)v4, "It took %s for data providers to finish preparing", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v21, -1, -1);
      MEMORY[0x1CB77E470](v20, -1, -1);
    }

    a1 = v53;
    uint64_t v24 = *(void *)(v53 + 64);
    unint64_t v48 = v53 + 64;
    uint64_t v25 = 1 << *(unsigned char *)(v53 + 32);
    uint64_t v26 = -1;
    if (v25 < 64) {
      uint64_t v26 = ~(-1 << v25);
    }
    unint64_t v27 = v26 & v24;
    int64_t v49 = (unint64_t)(v25 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    int64_t v2 = 0;
    *(void *)&long long v28 = 136315394;
    long long v46 = v28;
    v45[1] = v19 + 8;
    unint64_t v47 = a1;
    while (1)
    {
      if (v27)
      {
        unint64_t v29 = __clz(__rbit64(v27));
        v27 &= v27 - 1;
        unint64_t v30 = v29 | (v2 << 6);
      }
      else
      {
        int64_t v31 = v2 + 1;
        if (__OFADD__(v2, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        if (v31 >= v49) {
          goto LABEL_30;
        }
        unint64_t v32 = *(void *)(v48 + 8 * v31);
        ++v2;
        if (!v32)
        {
          int64_t v2 = v31 + 1;
          if (v31 + 1 >= v49) {
            goto LABEL_30;
          }
          unint64_t v32 = *(void *)(v48 + 8 * v2);
          if (!v32)
          {
            int64_t v2 = v31 + 2;
            if (v31 + 2 >= v49) {
              goto LABEL_30;
            }
            unint64_t v32 = *(void *)(v48 + 8 * v2);
            if (!v32)
            {
              int64_t v33 = v31 + 3;
              if (v33 >= v49)
              {
LABEL_30:
                swift_release();
                swift_bridgeObjectRelease();
                return v7 & 1;
              }
              unint64_t v32 = *(void *)(v48 + 8 * v33);
              if (!v32)
              {
                while (1)
                {
                  int64_t v2 = v33 + 1;
                  if (__OFADD__(v33, 1)) {
                    goto LABEL_32;
                  }
                  if (v2 >= v49) {
                    goto LABEL_30;
                  }
                  unint64_t v32 = *(void *)(v48 + 8 * v2);
                  ++v33;
                  if (v32) {
                    goto LABEL_27;
                  }
                }
              }
              int64_t v2 = v33;
            }
          }
        }
LABEL_27:
        unint64_t v27 = (v32 - 1) & v32;
        unint64_t v30 = __clz(__rbit64(v32)) + (v2 << 6);
      }
      uint64_t v34 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v30);
      uint64_t v35 = *v34;
      unint64_t v4 = v34[1];
      char v36 = *(unsigned char *)(*(void *)(a1 + 56) + v30);
      swift_bridgeObjectRetain_n();
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v5 = swift_slowAlloc();
        int v39 = v7;
        uint64_t v7 = swift_slowAlloc();
        v52[0] = v7;
        *(_DWORD *)uint64_t v5 = v46;
        swift_bridgeObjectRetain();
        *(void *)(v5 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v4, v52);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v5 + 12) = 2080;
        LOBYTE(v51) = v36;
        uint64_t v40 = String.init<A>(describing:)();
        unint64_t v4 = v41;
        *(void *)(v5 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v52);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v37, v38, "Data provider %s wait status: %s", (uint8_t *)v5, 0x16u);
        swift_arrayDestroy();
        uint64_t v42 = v7;
        LODWORD(v7) = v39;
        a1 = v47;
        MEMORY[0x1CB77E470](v42, -1, -1);
        MEMORY[0x1CB77E470](v5, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v7 = static DispatchTimeoutResult.== infix(_:_:)() | v7;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in DataProviderManager.waitForPrepare(timeout:)(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[4];
  uint64_t v7 = *(void *)(v6 + 96);
  uint64_t v8 = *(void *)(v6 + 104);
  swift_bridgeObjectRetain();
  char v9 = specialized AnyDataProvider.waitForPrepare(timeout:)(a3) & 1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v36 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, v7, v8, isUniquelyReferenced_nonNull_native);
  *a1 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = a2[5];
  uint64_t v12 = *(void *)(v11 + 96);
  uint64_t v13 = *(void *)(v11 + 104);
  swift_bridgeObjectRetain();
  char v14 = specialized AnyDataProvider.waitForPrepare(timeout:)(a3) & 1;
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v37 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, v12, v13, v15);
  *a1 = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = a2[6];
  uint64_t v17 = *(void *)(v16 + 96);
  uint64_t v18 = *(void *)(v16 + 104);
  swift_bridgeObjectRetain();
  char v19 = specialized AnyDataProvider.waitForPrepare(timeout:)(a3) & 1;
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v38 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, v17, v18, v20);
  *a1 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = a2[7];
  uint64_t v22 = *(void *)(v21 + 96);
  uint64_t v23 = *(void *)(v21 + 104);
  swift_bridgeObjectRetain();
  char v24 = specialized AnyDataProvider.waitForPrepare(timeout:)(a3) & 1;
  char v25 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, v22, v23, v25);
  *a1 = v39;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = a2[3];
  uint64_t v27 = *(void *)(v26 + 96);
  uint64_t v28 = *(void *)(v26 + 104);
  swift_bridgeObjectRetain();
  char v29 = specialized AnyDataProvider.waitForPrepare(timeout:)(a3) & 1;
  char v30 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v40 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, v27, v28, v30);
  *a1 = v40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = a2[8];
  uint64_t v32 = *(void *)(v31 + 96);
  uint64_t v33 = *(void *)(v31 + 104);
  swift_bridgeObjectRetain();
  LOBYTE(a3) = specialized AnyDataProvider.waitForPrepare(timeout:)(a3) & 1;
  char v34 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v41 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, v32, v33, v34);
  *a1 = v41;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, float a4, float a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    char v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (float *)(v20[7] + 8 * v14);
      *uint64_t v21 = a4;
      v21[1] = a5;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  char v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v23 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v23 = a1;
  v23[1] = a2;
  char v24 = (float *)(v20[7] + 8 * v14);
  *char v24 = a4;
  v24[1] = a5;
  uint64_t v25 = v20[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v27;

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(unsigned char *)(v18[7] + v12) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  char v20 = (uint64_t *)(v18[6] + 16 * v12);
  *char v20 = a2;
  v20[1] = a3;
  *(unsigned char *)(v18[7] + v12) = a1 & 1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v23;

  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t vars8;

  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 < result || (a4 & 1) == 0)
  {
    if (v17 < result || (a4 & 1) != 0)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v16 & 1) != (v18 & 1))
      {
LABEL_17:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v12 = result;
    }
    else
    {
      uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    }
  }
  char v19 = a1 & 1;
  char v20 = (void *)*v5;
  if (v16)
  {
    *(unsigned char *)(v20[7] + v12) = v19;
    return result;
  }
  v20[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v21 = (uint64_t *)(v20[6] + 16 * v12);
  *uint64_t v21 = a2;
  v21[1] = a3;
  *(unsigned char *)(v20[7] + v12) = v19;
  BOOL v22 = v20[2];
  uint64_t v23 = __OFADD__(v22, 1);
  char v24 = v22 + 1;
  if (v23)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v24;

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    char v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v25 = a3;
  v25[1] = a4;
  BOOL v26 = (void *)(v20[7] + 16 * v14);
  *BOOL v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for PommesCandidateId();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      char v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = v21
      + *(void *)(*(void *)(type metadata accessor for PommesBridgeResultCandidateState(0) - 8) + 72) * v14;

  return outlined assign with take of PommesBridgeResultCandidateState(a1, v22);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v26;

  return swift_bridgeObjectRetain();
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3)
{
  unint64_t v4 = v3;
  char v7 = a2 & 1;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2 & 1);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = v7;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  char v9 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    char v22 = (void *)*v9;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];

      *(void *)(v23 + 8 * v16) = a1;
      return;
    }
    goto LABEL_11;
  }
  a6();
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v20 & 1) != (v25 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v24;
  char v22 = (void *)*v9;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  uint64_t v26 = (uint64_t *)(v22[6] + 16 * v16);
  *uint64_t v26 = a2;
  v26[1] = a3;
  *(void *)(v22[7] + 8 * v16) = a1;
  uint64_t v27 = v22[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v22[2] = v29;

  swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  char v9 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    char v22 = (void *)*v9;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v23 + 8 * v16) = a1;
      return result;
    }
    goto LABEL_11;
  }
  a6();
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  char v22 = (void *)*v9;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  uint64_t v27 = (uint64_t *)(v22[6] + 16 * v16);
  uint64_t *v27 = a2;
  v27[1] = a3;
  *(void *)(v22[7] + 8 * v16) = a1;
  uint64_t v28 = v22[2];
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v22[2] = v30;

  return swift_bridgeObjectRetain();
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(unsigned char *)(a5[7] + result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  void *v6 = a2;
  v6[1] = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  *BOOL v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for PommesCandidateId();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t result = outlined init with take of PommesBridgeResultCandidateState(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v56 = a8;
  uint64_t v53 = a7;
  uint64_t v50 = a6;
  uint64_t v48 = a5;
  uint64_t v47 = a4;
  uint64_t v49 = a2;
  uint64_t v54 = a11;
  uint64_t v55 = a10;
  uint64_t v51 = a9;
  uint64_t v52 = a12;
  uint64_t v57 = a13;
  v60[3] = a16;
  v60[4] = a17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v60);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a16 - 8) + 32))(boxed_opaque_existential_1, a14, a16);
  type metadata accessor for OS_dispatch_queue();
  uint64_t v20 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v20 - 8);
  static DispatchQoS.userInitiated.getter();
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v21 - 8);
  static OS_dispatch_queue.Attributes.concurrent.getter();
  uint64_t v22 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  unint64_t v25 = (char *)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v23 + 104))(v25, *MEMORY[0x1E4FBCB40], v22);
  static OS_dispatch_queue.global(qos:)();
  uint64_t v26 = v22;
  uint64_t v27 = a1;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v26);
  uint64_t v28 = v48;
  uint64_t v29 = v47;
  uint64_t v30 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v30);
  (*(void (**)(char *, void))(v32 + 104))((char *)&v47 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  uint64_t v33 = v49;
  uint64_t v34 = v50;
  uint64_t v35 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_OWORD *)(a15 + 112) = 0u;
  *(_OWORD *)(a15 + 128) = 0u;
  *(_OWORD *)(a15 + 144) = 0u;
  *(void *)(a15 + 160) = 0;
  *(void *)(a15 + 16) = v35;
  *(void *)(a15 + 24) = v27;
  *(void *)(a15 + 32) = v33;
  *(void *)(a15 + 40) = a3;
  *(void *)(a15 + 48) = v29;
  *(void *)(a15 + 56) = v28;
  if (v34)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v36 = v34;
    uint64_t v37 = v51;
  }
  else
  {
    type metadata accessor for AnalyticsComponentIdGenerator();
    memset(v58, 0, sizeof(v58));
    uint64_t v59 = 0;
    uint64_t v38 = swift_allocObject();
    type metadata accessor for ProfileSliceResolutionRequestInstrumentationUtil();
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = 0;
    *(void *)(v39 + 24) = v38;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v37 = v51;
    uint64_t v36 = specialized static ProfileSliceResolvingDataProvider.make(mediaUserStateCenter:instrumentationUtil:muxContextManager:)((uint64_t)v58, v39, v51);
    swift_release();
    outlined destroy of MediaUserStateCenter?((uint64_t)v58, &demangling cache variable for type metadata for MediaUserStateCenter?);
  }
  uint64_t v41 = v53;
  uint64_t v40 = v54;
  *(void *)(a15 + 64) = v36;
  *(void *)(a15 + 72) = v41;
  uint64_t v42 = v55;
  *(void *)(a15 + 80) = v56;
  *(void *)(a15 + 88) = v37;
  *(void *)(a15 + 96) = v40;
  *(void *)(a15 + 104) = v42;
  *(void *)(a15 + 112) = v52;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v43 = v42;
  swift_release();
  *(void *)(a15 + 120) = v57;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  outlined init with copy of AppDataProviding((uint64_t)v60, (uint64_t)v58);
  swift_beginAccess();
  outlined assign with take of PommesAppChecking?((uint64_t)v58, a15 + 128);
  swift_endAccess();
  unint64_t v44 = *(void (**)(uint64_t))(**(void **)(a15 + 40) + 160);
  swift_retain();
  v44(1);
  swift_release();
  uint64_t v45 = *(void (**)(uint64_t))(**(void **)(a15 + 48) + 160);
  swift_retain();
  v45(1);
  swift_release();
  (*(void (**)(uint64_t))(**(void **)(a15 + 56) + 160))(1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  return a15;
}

unint64_t lazy protocol witness table accessor for type PegasusError and conformance PegasusError()
{
  unint64_t result = lazy protocol witness table cache variable for type PegasusError and conformance PegasusError;
  if (!lazy protocol witness table cache variable for type PegasusError and conformance PegasusError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PegasusError and conformance PegasusError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PegasusError and conformance PegasusError;
  if (!lazy protocol witness table cache variable for type PegasusError and conformance PegasusError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PegasusError and conformance PegasusError);
  }
  return result;
}

uint64_t partial apply for closure #1 in DataProviderManager.addNavigationAppInfoSlice(to:for:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DataProviderManager.addNavigationAppInfoSlice(to:for:)(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in DataProviderManager.addSiriKitAppInfoSlice(to:for:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DataProviderManager.addSiriKitAppInfoSlice(to:for:)(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in DataProviderManager.waitForPrepare(timeout:)()
{
  return closure #1 in DataProviderManager.waitForPrepare(timeout:)(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1C909C29C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 248))();
}

uint64_t type metadata accessor for DataProviderManager()
{
  return self;
}

uint64_t method lookup function for DataProviderManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DataProviderManager);
}

uint64_t dispatch thunk of DataProviderManager.appChecking.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of DataProviderManager.setServiceHelper(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of DataProviderManager.getServiceHelper()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of DataProviderManager.__allocating_init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of DataProviderManager.prepareForSearchAtSessionStart()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of DataProviderManager.prepareForSearchAtPommesRequestStart()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of DataProviderManager.tearDown()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of DataProviderManager.resolveProfileSlice(to:with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of DataProviderManager.addAmpStorefront(to:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of DataProviderManager.addAppInfoSlice(to:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of DataProviderManager.addNavigationAppInfoSlice(to:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of DataProviderManager.addSiriKitAppInfoSlice(to:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of DataProviderManager.addMarketplaceInfo(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of DataProviderManager.addUIScale(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of DataProviderManager.addTemperatureUnit(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of DataProviderManager.addMuxSettings(to:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of DataProviderManager.userContentAllowed()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of DataProviderManager.getQueueState()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of DataProviderManager.addProviderData(to:searchRequest:queryContext:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of DataProviderManager.addClientExperienceSignals(to:for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of DataProviderManager.addPairedDevices(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t outlined assign with take of PommesAppChecking?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesAppChecking?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in AnyDataProvider.waitForPrepare(timeout:)()
{
  return partial apply for closure #1 in AnyDataProvider.waitForPrepare(timeout:)();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg504_s21h103InformationSearch19DataProviderManagerC19appendProfileSlices33_025996E41686C8D59143D5DC4568B6E8LL_2to10d6API013f1_g4_a9_i62_aR7RequestVSayAG0t1_u1_a1_v1_H5SliceVG_AItFAG0t1_u1_a1_v1_rC5K9VANXEfU0_SayAF0f1_g1_h1_i1_T5SliceVGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  BOOL v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (v8)
  {
    uint64_t v22 = v2;
    uint64_t v29 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v9 = v29;
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v10 = v5 + 16;
    unint64_t v25 = (*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64);
    uint64_t v26 = v11;
    uint64_t v12 = a1 + v25;
    uint64_t v13 = *(void *)(v10 + 56);
    uint64_t v23 = (void (**)(unint64_t, char *, uint64_t))(v10 + 16);
    uint64_t v24 = v13;
    do
    {
      uint64_t v14 = v10;
      v26(v7, v12, v4);
      uint64_t v15 = v4;
      uint64_t v16 = v27;
      swift_bridgeObjectRetain();
      uint64_t v17 = (void (*)(char *, void))Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.profileSlices.modify();
      specialized Array.append<A>(contentsOf:)(v16);
      v17(v28, 0);
      uint64_t v29 = v9;
      unint64_t v19 = *(void *)(v9 + 16);
      unint64_t v18 = *(void *)(v9 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t v9 = v29;
      }
      *(void *)(v9 + 16) = v19 + 1;
      uint64_t v20 = v24;
      (*v23)(v9 + v25 + v19 * v24, v7, v15);
      v12 += v20;
      --v8;
      uint64_t v4 = v15;
      uint64_t v10 = v14;
    }
    while (v8);
  }
  return v9;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_AHs5NeverOTg504_s12d13NLUTypes0A23_f1_g1_hi13VACIgnr_A2Cs5j175OIegnrzr_TR04_s21a167InformationSearch28PommesBridgeRequestProcessorC25updatePSCParseForFallback33_8DFE86024D401B7CABDD6F200033BF3CLL7prStateSbAA0de15ResultCandidateS0Vz_tF0A8lM27_c1_d1_eF7VAKcfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v42 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v3 = *(void *)(v42 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v42);
  long long v46 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v45 = (char *)&v32 - v6;
  uint64_t v44 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v7 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  id v43 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if (v13)
  {
    uint64_t v47 = v1;
    uint64_t v50 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    unint64_t v40 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v15 = (void (**)(char *, char *, uint64_t))(a1 + v40);
    uint64_t v16 = *(void *)(v10 + 72);
    uint64_t v38 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v39 = v16;
    unsigned int v37 = *MEMORY[0x1E4FA2780];
    uint64_t v35 = (uint64_t (**)(char *, uint64_t))(v3 + 8);
    uint64_t v36 = (void (**)(char *, void, uint64_t))(v3 + 104);
    uint64_t v32 = (void (**)(char *, char *, uint64_t))(v10 + 16);
    uint64_t v33 = (void (**)(unint64_t, char *, uint64_t))(v10 + 32);
    uint64_t v41 = v9;
    uint64_t v34 = v12;
    uint64_t v17 = v42;
    do
    {
      unint64_t v18 = v43;
      Siri_Nlu_External_UserParse.parser.getter();
      unint64_t v19 = v45;
      Siri_Nlu_External_Parser.parserID.getter();
      (*v38)(v18, v44);
      uint64_t v20 = v46;
      (*v36)(v46, v37, v17);
      lazy protocol witness table accessor for type UserID and conformance UserID((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v22 = v48;
      uint64_t v21 = v49;
      uint64_t v23 = *v35;
      (*v35)(v20, v17);
      uint64_t v24 = v23(v19, v17);
      if (v21 == v22)
      {
        MEMORY[0x1F4188790](v24);
        *(&v32 - 2) = v15;
        lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, MEMORY[0x1E4FA2808]);
        unint64_t v25 = v34;
        uint64_t v26 = v41;
        uint64_t v27 = v47;
        static Message.with(_:)();
        uint64_t v47 = v27;
      }
      else
      {
        unint64_t v25 = v34;
        uint64_t v26 = v41;
        (*v32)(v34, (char *)v15, v41);
      }
      uint64_t v14 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1);
        uint64_t v14 = v50;
      }
      unint64_t v29 = *(void *)(v14 + 16);
      unint64_t v28 = *(void *)(v14 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        uint64_t v14 = v50;
      }
      *(void *)(v14 + 16) = v29 + 1;
      uint64_t v30 = v39;
      (*v33)(v14 + v40 + v29 * v39, v25, v26);
      uint64_t v50 = v14;
      uint64_t v15 = (void (**)(char *, char *, uint64_t))((char *)v15 + v30);
      --v13;
    }
    while (v13);
  }
  return v14;
}

uint64_t PommesBridgeRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int8 a17)
{
  swift_allocObject();
  uint64_t v19 = specialized PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  swift_release();
  swift_release();
  return v19;
}

uint64_t PommesBridgeResultCandidateState.parseState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PommesBridgeResultCandidateState.ParseState(v1, a1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
}

uint64_t PommesBridgeResultCandidateState.userId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 20);
  uint64_t v4 = type metadata accessor for UserID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t PommesBridgeResultCandidateState.userId.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 20);
  uint64_t v4 = type metadata accessor for UserID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*PommesBridgeResultCandidateState.userId.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.voiceIdClassification.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 24));
}

uint64_t PommesBridgeResultCandidateState.voiceIdClassification.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for PommesBridgeResultCandidateState(0);
  *(void *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*PommesBridgeResultCandidateState.voiceIdClassification.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

void *PommesBridgeResultCandidateState.speechPackage.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 28));
  id v2 = v1;
  return v1;
}

uint64_t PommesBridgeResultCandidateState.utterance.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesBridgeResultCandidateState.started.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 36));
}

uint64_t PommesBridgeResultCandidateState.started.setter(char a1)
{
  uint64_t result = type metadata accessor for PommesBridgeResultCandidateState(0);
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*PommesBridgeResultCandidateState.started.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.finished.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 40));
}

uint64_t PommesBridgeResultCandidateState.finished.setter(char a1)
{
  uint64_t result = type metadata accessor for PommesBridgeResultCandidateState(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*PommesBridgeResultCandidateState.finished.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.selected.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 44));
}

uint64_t PommesBridgeResultCandidateState.selected.setter(char a1)
{
  uint64_t result = type metadata accessor for PommesBridgeResultCandidateState(0);
  *(unsigned char *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*PommesBridgeResultCandidateState.selected.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.fallback.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 48));
}

uint64_t PommesBridgeResultCandidateState.fallback.setter(char a1)
{
  uint64_t result = type metadata accessor for PommesBridgeResultCandidateState(0);
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*PommesBridgeResultCandidateState.fallback.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.isGestureBased.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 52));
}

uint64_t PommesBridgeResultCandidateState.isGestureBased.setter(char a1)
{
  uint64_t result = type metadata accessor for PommesBridgeResultCandidateState(0);
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*PommesBridgeResultCandidateState.isGestureBased.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.eagerSearchInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PommesBridgeResultCandidateState(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 56), a1, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
}

uint64_t PommesBridgeResultCandidateState.eagerSearchInfo.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PommesBridgeResultCandidateState(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 56), &demangling cache variable for type metadata for PommesSearchEagerInfo?);
}

uint64_t (*PommesBridgeResultCandidateState.eagerSearchInfo.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.pommesCandidateId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v2, (uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      long long v35 = *(_OWORD *)v6;
      uint64_t v8 = *((void *)v6 + 2);
      uint64_t v9 = *((void *)v6 + 3);
      uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      uint64_t v11 = (uint64_t)&v6[v10[16]];
      uint64_t v12 = (uint64_t)&v6[v10[24]];
      uint64_t v13 = (uint64_t)&v6[v10[28]];
      *(_OWORD *)a1 = v35;
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v9;
      uint64_t v14 = *MEMORY[0x1E4F9FE58];
      uint64_t v15 = type metadata accessor for PommesCandidateId();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(a1, v14, v15);
      outlined destroy of MediaUserStateCenter?(v13, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      outlined destroy of MediaUserStateCenter?(v12, &demangling cache variable for type metadata for SiriUserInput?);
      uint64_t v16 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
    }
    else
    {
      uint64_t v23 = *(void **)v6;
      swift_bridgeObjectRelease();
      uint64_t v11 = (uint64_t)&v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                                + 64)];
      id v24 = objc_msgSend(v23, sel_refId);
      if (v24)
      {
        unint64_t v25 = v24;
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;

        *(void *)a1 = v26;
        *(void *)(a1 + 8) = v28;
      }
      else
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v32 = 0;
          _os_log_impl(&dword_1C8F83000, v30, v31, "No refId associated with SARDRunPOMMESRequest. Using empty string for PommesCandidateId. This should never happened.", v32, 2u);
          MEMORY[0x1CB77E470](v32, -1, -1);
        }

        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0xE000000000000000;
      }
      uint64_t v33 = *MEMORY[0x1E4F9FE48];
      uint64_t v34 = type metadata accessor for PommesCandidateId();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 104))(a1, v33, v34);
      uint64_t v16 = (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
    }
    return outlined destroy of MediaUserStateCenter?(v11, v16);
  }
  else
  {
    uint64_t v17 = *(void *)v6;
    uint64_t v18 = *((void *)v6 + 1);
    uint64_t v19 = (uint64_t)&v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool))
                              + 48)];
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v18;
    uint64_t v20 = *MEMORY[0x1E4F9FE50];
    uint64_t v21 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(a1, v20, v21);
    return outlined destroy of NLXResultCandidate(v19, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  }
}

uint64_t PommesBridgeResultCandidateState.userParses.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v25 - v6;
  uint64_t v8 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (uint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v1, (uint64_t)v13, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      outlined init with take of PommesSearchReason?((uint64_t)&v13[v15[16]], (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v7, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      uint64_t v16 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v5, 1, v16) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v22 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v16);
        uint64_t v18 = NLParseResponse.userParses.getter();

        outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      }
      uint64_t v23 = &v13[v15[24]];
      outlined destroy of MediaUserStateCenter?((uint64_t)&v13[v15[28]], &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      uint64_t v21 = &demangling cache variable for type metadata for SiriUserInput?;
      uint64_t v20 = (uint64_t)v23;
    }
    else
    {

      uint64_t v18 = *((void *)v13 + 1);
      uint64_t v20 = (uint64_t)&v13[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                                 + 64)];
      uint64_t v21 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
    }
    outlined destroy of MediaUserStateCenter?(v20, v21);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    outlined init with take of NLXResultCandidate((uint64_t)&v13[*(int *)(v19 + 48)], (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    uint64_t v18 = *v10;
    swift_bridgeObjectRetain();
    outlined destroy of NLXResultCandidate((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  }
  return v18;
}

uint64_t PommesBridgeResultCandidateState.fallbackParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (id *)((char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v2, (uint64_t)v15, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      outlined init with take of PommesSearchReason?((uint64_t)v15 + v17[16], (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v9, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      uint64_t v18 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v7, 1, v18) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        uint64_t v20 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a1, 1, 1, v20);
      }
      else
      {
        id v24 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v18);
        NLParseResponse.fallbackParse.getter();

        outlined destroy of MediaUserStateCenter?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      }
      uint64_t v25 = (uint64_t)v15 + v17[24];
      outlined destroy of MediaUserStateCenter?((uint64_t)v15 + v17[28], &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      return outlined destroy of MediaUserStateCenter?(v25, &demangling cache variable for type metadata for SiriUserInput?);
    }
    else
    {

      swift_bridgeObjectRelease();
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
      return outlined init with take of PommesSearchReason?((uint64_t)v15 + *(int *)(v23 + 64), a1, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    outlined init with take of NLXResultCandidate((uint64_t)v15 + *(int *)(v21 + 48), (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    outlined init with copy of MediaUserStateCenter?((uint64_t)&v12[*(int *)(v10 + 20)], a1, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    return outlined destroy of NLXResultCandidate((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  }
}

uint64_t PommesBridgeResultCandidateState.responseVariantResult.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v28 - v6;
  uint64_t v8 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (void **)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v1, (uint64_t)v13, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      outlined init with take of PommesSearchReason?((uint64_t)v13 + v15[16], (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v7, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      uint64_t v16 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v5, 1, v16) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        uint64_t v18 = 0;
        uint64_t v7 = v5;
      }
      else
      {
        uint64_t v23 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v16);
        uint64_t v18 = NLParseResponse.responseVariantResult.getter();
      }
      outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      id v24 = (char *)v13 + v15[24];
      outlined destroy of MediaUserStateCenter?((uint64_t)v13 + v15[28], &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      uint64_t v25 = &demangling cache variable for type metadata for SiriUserInput?;
      uint64_t v26 = (uint64_t)v24;
    }
    else
    {
      uint64_t v20 = *v13;
      swift_bridgeObjectRelease();
      id v21 = objc_msgSend(v20, sel_responseVariantResult);
      if (v21)
      {
        uint64_t v22 = v21;
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {

        uint64_t v18 = 0;
      }
      uint64_t v26 = (uint64_t)v13
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                   + 64);
      uint64_t v25 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
    }
    outlined destroy of MediaUserStateCenter?(v26, v25);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    outlined init with take of NLXResultCandidate((uint64_t)v13 + *(int *)(v19 + 48), (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    uint64_t v18 = *(void *)&v10[*(int *)(v8 + 24)];
    swift_bridgeObjectRetain();
    outlined destroy of NLXResultCandidate((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  }
  return v18;
}

uint64_t PommesBridgeResultCandidateState.tcuMappedResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v2, (uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    uint64_t v8 = (uint64_t)&v6[v7[16]];
    uint64_t v9 = (uint64_t)&v6[v7[24]];
    uint64_t v10 = (uint64_t)&v6[v7[28]];
    outlined init with take of PommesSearchReason?(v8, a1, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    outlined destroy of MediaUserStateCenter?(v10, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    return outlined destroy of MediaUserStateCenter?(v9, &demangling cache variable for type metadata for SiriUserInput?);
  }
  else
  {
    outlined destroy of NLXResultCandidate((uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    uint64_t v12 = type metadata accessor for TCUMappedNLResponse();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
}

uint64_t PommesBridgeResultCandidateState.tcuId.getter()
{
  uint64_t v1 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v0, (uint64_t)v3, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = *((void *)v3 + 2);
    uint64_t v5 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    uint64_t v6 = (uint64_t)&v3[v5[16]];
    uint64_t v7 = (uint64_t)&v3[v5[24]];
    outlined destroy of MediaUserStateCenter?((uint64_t)&v3[v5[28]], &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    outlined destroy of MediaUserStateCenter?(v7, &demangling cache variable for type metadata for SiriUserInput?);
    outlined destroy of MediaUserStateCenter?(v6, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  }
  else
  {
    outlined destroy of NLXResultCandidate((uint64_t)v3, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    return 0;
  }
  return v4;
}

uint64_t PommesBridgeResultCandidateState.requestType.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (void **)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v1, (uint64_t)v4, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of NLXResultCandidate((uint64_t)v4, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    return 0;
  }
  uint64_t v5 = *v4;
  swift_bridgeObjectRelease();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
  outlined destroy of MediaUserStateCenter?((uint64_t)v4 + *(int *)(v6 + 64), &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  id v7 = objc_msgSend(v5, sel_requestType);
  if (!v7)
  {

    return 0;
  }
  uint64_t v8 = v7;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v9;
}

uint64_t PommesBridgeResultCandidateState.setRunPommesRequest(userParses:fallbackParse:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for PommesCandidateId();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v28 - v10;
  uint64_t v12 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (void *)((char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v2, (uint64_t)v14, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v15 = *v14;
    swift_bridgeObjectRelease();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
    outlined destroy of MediaUserStateCenter?((uint64_t)v14 + *(int *)(v16 + 64), &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    outlined destroy of NLXResultCandidate((uint64_t)v2, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    uint64_t v17 = (uint64_t)v2 + *(int *)(v16 + 64);
    *uint64_t v2 = v15;
    v2[1] = a1;
    outlined init with copy of MediaUserStateCenter?(a2, v17, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    swift_storeEnumTagMultiPayload();
    return swift_bridgeObjectRetain();
  }
  else
  {
    outlined destroy of NLXResultCandidate((uint64_t)v14, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v11);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v29 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      v28[1] = v22 + 4;
      uint64_t v24 = PommesCandidateId.description.getter();
      v28[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void (**)(char *, uint64_t))(v6 + 8);
      v26(v9, v5);
      _os_log_impl(&dword_1C8F83000, v20, v21, "Attempting to set user parses while not on the runPommesRequest state path for %s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v23, -1, -1);
      MEMORY[0x1CB77E470](v22, -1, -1);

      return ((uint64_t (*)(char *, uint64_t))v26)(v11, v5);
    }
    else
    {

      uint64_t v27 = *(void (**)(char *, uint64_t))(v6 + 8);
      v27(v9, v5);
      return ((uint64_t (*)(char *, uint64_t))v27)(v11, v5);
    }
  }
}

uint64_t PommesBridgeResultCandidateState.setParseResponse(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PommesCandidateId();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v39 - v8;
  uint64_t v10 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v1, (uint64_t)v12, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v41 = *(_OWORD *)v12;
    uint64_t v19 = *((void *)v12 + 2);
    uint64_t v39 = *((void *)v12 + 3);
    uint64_t v40 = v19;
    uint64_t v20 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    uint64_t v21 = (uint64_t)&v12[v20[16]];
    char v22 = v12[v20[20]];
    uint64_t v23 = (uint64_t)&v12[v20[28]];
    outlined init with take of PommesSearchReason?((uint64_t)&v12[v20[24]], (uint64_t)v18, &demangling cache variable for type metadata for SiriUserInput?);
    outlined init with take of PommesSearchReason?(v23, (uint64_t)v15, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    outlined destroy of MediaUserStateCenter?(v21, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    outlined destroy of NLXResultCandidate(v1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    uint64_t v24 = v1 + v20[16];
    uint64_t v25 = v20[20];
    uint64_t v26 = v1 + v20[24];
    uint64_t v27 = v1 + v20[28];
    *(_OWORD *)uint64_t v1 = v41;
    uint64_t v28 = v39;
    *(void *)(v1 + 16) = v40;
    *(void *)(v1 + 24) = v28;
    outlined init with copy of MediaUserStateCenter?(a1, v24, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    *(unsigned char *)(v1 + v25) = v22;
    outlined init with take of PommesSearchReason?((uint64_t)v18, v26, &demangling cache variable for type metadata for SiriUserInput?);
    outlined init with take of PommesSearchReason?((uint64_t)v15, v27, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    outlined destroy of NLXResultCandidate((uint64_t)v12, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v9);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    os_log_type_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v43 = v34;
      *(_DWORD *)uint64_t v33 = 136315138;
      *(void *)&long long v41 = v33 + 4;
      uint64_t v35 = PommesCandidateId.description.getter();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unsigned int v37 = *(void (**)(char *, uint64_t))(v4 + 8);
      v37(v7, v3);
      _os_log_impl(&dword_1C8F83000, v31, v32, "Attempting to set TCU-mapped user parses while not on the TRP state path for %s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v34, -1, -1);
      MEMORY[0x1CB77E470](v33, -1, -1);

      return ((uint64_t (*)(char *, uint64_t))v37)(v9, v3);
    }
    else
    {

      uint64_t v38 = *(void (**)(char *, uint64_t))(v4 + 8);
      v38(v7, v3);
      return ((uint64_t (*)(char *, uint64_t))v38)(v9, v3);
    }
  }
}

Swift::Void __swiftcall PommesBridgeResultCandidateState.setHasTTResponse(_:)(Swift::Bool a1)
{
  LODWORD(v46) = a1;
  uint64_t v2 = type metadata accessor for PommesCandidateId();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t v9 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v1, (uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v45 = *(_OWORD *)v11;
    uint64_t v21 = *((void *)v11 + 2);
    uint64_t v44 = *((void *)v11 + 3);
    char v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    uint64_t v23 = (uint64_t)&v11[v22[24]];
    uint64_t v24 = (uint64_t)&v11[v22[28]];
    outlined init with take of PommesSearchReason?((uint64_t)&v11[v22[16]], (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    outlined init with take of PommesSearchReason?(v23, (uint64_t)v17, &demangling cache variable for type metadata for SiriUserInput?);
    outlined init with take of PommesSearchReason?(v24, (uint64_t)v14, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    outlined destroy of NLXResultCandidate(v1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    uint64_t v25 = v1 + v22[16];
    uint64_t v26 = v22[20];
    uint64_t v27 = v1 + v22[24];
    uint64_t v28 = v1 + v22[28];
    *(_OWORD *)uint64_t v1 = v45;
    uint64_t v29 = v44;
    *(void *)(v1 + 16) = v21;
    *(void *)(v1 + 24) = v29;
    outlined init with take of PommesSearchReason?((uint64_t)v20, v25, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    *(unsigned char *)(v1 + v26) = v46 & 1;
    outlined init with take of PommesSearchReason?((uint64_t)v17, v27, &demangling cache variable for type metadata for SiriUserInput?);
    outlined init with take of PommesSearchReason?((uint64_t)v14, v28, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    outlined destroy of NLXResultCandidate((uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v8);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    uint64_t v31 = v2;
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v46 = v31;
      uint64_t v35 = (uint8_t *)v34;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v48 = v36;
      *(_DWORD *)uint64_t v35 = 136315138;
      uint64_t v37 = PommesCandidateId.description.getter();
      uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = *(void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v40 = v6;
      uint64_t v41 = v46;
      v39(v40, v46);
      _os_log_impl(&dword_1C8F83000, v32, v33, "Attempting to set hasTTResponse while not on the TRP state path for %s", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v36, -1, -1);
      MEMORY[0x1CB77E470](v35, -1, -1);

      v39(v8, v41);
    }
    else
    {

      uint64_t v42 = *(void (**)(char *, uint64_t))(v3 + 8);
      v42(v6, v31);
      v42(v8, v31);
    }
  }
}

uint64_t PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, uint64_t a13, uint64_t a14)
{
  int v50 = a7;
  int v51 = a8;
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  int v49 = a11;
  int v46 = a10;
  int v43 = a12;
  uint64_t v42 = a13;
  uint64_t v17 = type metadata accessor for NLXResultCandidate();
  uint64_t v18 = v17 - 8;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (uint64_t *)((char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v41);
  uint64_t v25 = (uint64_t *)((char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  *(unsigned char *)(a9 + v26[13]) = 0;
  uint64_t v27 = a9 + v26[14];
  uint64_t v28 = type metadata accessor for PommesSearchEagerInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
  uint64_t v30 = (uint64_t)v25 + *(int *)(v29 + 48);
  uint64_t v40 = *(int *)(v29 + 64);
  *uint64_t v25 = a1;
  v25[1] = a2;
  outlined init with copy of MediaUserStateCenter?(a14, (uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v31 = (uint64_t)v20 + *(int *)(v18 + 28);
  uint64_t v32 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  os_log_type_t v33 = (void *)((char *)v20 + *(int *)(v18 + 32));
  *os_log_type_t v33 = 0;
  v33[1] = 0;
  *uint64_t v20 = v42;
  outlined assign with take of MediaUserStateCenter?((uint64_t)v23, v31, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *os_log_type_t v33 = 0;
  v33[1] = 0;
  outlined init with take of NLXResultCandidate((uint64_t)v20, v30, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  outlined destroy of MediaUserStateCenter?(a14, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *((unsigned char *)v25 + v40) = v43;
  swift_storeEnumTagMultiPayload();
  outlined init with take of NLXResultCandidate((uint64_t)v25, a9, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  uint64_t v34 = a9 + v26[5];
  uint64_t v35 = type metadata accessor for UserID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32))(v34, v44, v35);
  *(void *)(a9 + v26[7]) = v45;
  uint64_t v37 = (void *)(a9 + v26[8]);
  uint64_t v38 = v48;
  void *v37 = v47;
  v37[1] = v38;
  *(unsigned char *)(a9 + v26[9]) = v50;
  *(unsigned char *)(a9 + v26[10]) = v51;
  *(unsigned char *)(a9 + v26[11]) = v46;
  *(unsigned char *)(a9 + v26[12]) = v49;
  *(void *)(a9 + v26[6]) = 0;
  return result;
}

uint64_t PommesBridgeResultCandidateState.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for GestureInput();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UserID();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v14 = v13 - 8;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = a1;
  uint64_t v18 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v29 = v19;
  uint64_t v30 = v18;

  id v20 = v17;
  UserIdAwareResultCandidateMessageBase.userId.getter();

  uint64_t v21 = GestureBasedResultCandidateMessage.gesture.getter();
  uint64_t v22 = MEMORY[0x1CB77B3D0](v21);
  uint64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (!v24)
  {
    uint64_t v22 = 0;
    uint64_t v24 = 0xE000000000000000;
  }
  uint64_t v25 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v5, 1, 1, v25);
  PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)(v30, v29, (uint64_t)v12, 0, v22, v24, 0, 0, (uint64_t)v16, 0, 0, 0, MEMORY[0x1E4FBC860], (uint64_t)v5);

  uint64_t v26 = v31;
  uint64_t result = outlined init with take of NLXResultCandidate((uint64_t)v16, v31, type metadata accessor for PommesBridgeResultCandidateState);
  *(unsigned char *)(v26 + *(int *)(v14 + 60)) = 1;
  return result;
}

uint64_t PommesBridgeResultCandidateState.init(trpCandidateId:tcuId:userId:speechPackage:utterance:started:finished:selected:fallback:hasTTResponse:parseResponse:originalUserInput:rewriteReason:voiceIdClassification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, char a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v22 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  *((unsigned char *)a9 + v22[13]) = 0;
  uint64_t v23 = (char *)a9 + v22[14];
  uint64_t v24 = type metadata accessor for PommesSearchEagerInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  uint64_t v25 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  uint64_t v26 = (uint64_t)a9 + v25[16];
  uint64_t v27 = v25[20];
  uint64_t v28 = (uint64_t)a9 + v25[24];
  uint64_t v29 = (uint64_t)a9 + v25[28];
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  outlined init with take of PommesSearchReason?(a15, v26, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  *((unsigned char *)a9 + v27) = a14;
  outlined init with take of PommesSearchReason?(a16, v28, &demangling cache variable for type metadata for SiriUserInput?);
  outlined init with take of PommesSearchReason?(a17, v29, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v30 = (char *)a9 + v22[5];
  uint64_t v31 = type metadata accessor for UserID();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 32))(v30, a5, v31);
  *(void *)((char *)a9 + v22[7]) = a6;
  os_log_type_t v33 = (void *)((char *)a9 + v22[8]);
  *os_log_type_t v33 = a7;
  v33[1] = a8;
  *((unsigned char *)a9 + v22[9]) = a10;
  *((unsigned char *)a9 + v22[10]) = a11;
  *((unsigned char *)a9 + v22[11]) = a12;
  *((unsigned char *)a9 + v22[12]) = a13;
  *(void *)((char *)a9 + v22[6]) = a18;
  return result;
}

uint64_t PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  int v43 = a5;
  int v44 = a6;
  int v42 = a4;
  uint64_t v46 = a7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = &v41[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  id v17 = &v41[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *((unsigned char *)v17 + *(int *)(v15 + 52)) = 0;
  uint64_t v18 = (char *)v17 + *(int *)(v15 + 56);
  uint64_t v19 = type metadata accessor for PommesSearchEagerInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  unint64_t v20 = closure #1 in PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)(a1);
  closure #2 in PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)(a1, (uint64_t)v12);
  uint64_t v21 = (uint64_t)v17
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
               + 64);
  *id v17 = a1;
  v17[1] = v20;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v12, v21, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = (char *)v17 + v13[5];
  uint64_t v23 = type metadata accessor for UserID();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v45 = a2;
  v25(v22, a2, v23);
  id v26 = a1;
  id v27 = objc_msgSend(v26, sel_recognition);
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v29 = SASRecognition.toAFSpeechPackage(utteranceStart:processedAudioDuration:isFinal:)();
  }
  else
  {
    uint64_t v29 = 0;
  }
  *(void *)((char *)v17 + v13[7]) = v29;
  uint64_t v30 = closure #3 in PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)(v26);
  uint64_t v31 = (void *)((char *)v17 + v13[8]);
  *uint64_t v31 = v30;
  v31[1] = v32;
  *((unsigned char *)v17 + v13[9]) = a3 & 1;
  *((unsigned char *)v17 + v13[10]) = v42 & 1;
  *((unsigned char *)v17 + v13[11]) = v43 & 1;
  *((unsigned char *)v17 + v13[12]) = v44 & 1;
  id v33 = objc_msgSend(v26, sel_userIdentityClassification);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v34 = String.axLowercasedFirstLetter.getter();
  uint64_t v36 = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = (void *)MEMORY[0x1CB77CA90](v34, v36);
  swift_bridgeObjectRelease();
  uint64_t v38 = AFUserIdentityClassficationGetFromName();

  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v45, v23);
  outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *(void *)((char *)v17 + v13[6]) = v38;
  uint64_t v39 = v46;
  outlined init with take of NLXResultCandidate((uint64_t)v17, v46, type metadata accessor for PommesBridgeResultCandidateState);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(v14 + 56))(v39, 0, 1, v13);
}

unint64_t closure #1 in PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)(void *a1)
{
  uint64_t v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v40 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v41 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v35 = (char *)v32 - v10;
  id v11 = objc_msgSend(a1, sel_nlUserParses);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    switch(v15 >> 62)
    {
      case 1uLL:
        if ((int)v13 != v13 >> 32) {
          goto LABEL_4;
        }
        goto LABEL_18;
      case 2uLL:
        if (*(void *)(v13 + 16) == *(void *)(v13 + 24)) {
          goto LABEL_18;
        }
        goto LABEL_4;
      case 3uLL:
        goto LABEL_18;
      default:
        if ((v15 & 0xFF000000000000) == 0)
        {
LABEL_18:
          outlined consume of Data._Representation(v13, v15);
          goto LABEL_19;
        }
LABEL_4:
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        uint64_t v16 = JSONDecoder.init()();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
        lazy protocol witness table accessor for type [Data] and conformance <A> [A]();
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        uint64_t v30 = v43;
        uint64_t v19 = *(void *)(v43 + 16);
        if (v19)
        {
          void v32[2] = v16;
          uint64_t v33 = v13;
          unint64_t v34 = v15;
          uint64_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
          uint64_t v39 = (void (**)(char *, void, uint64_t, uint64_t))(v36 + 56);
          uint64_t v37 = (void (**)(char *, char *, uint64_t))(v36 + 32);
          swift_bridgeObjectRetain();
          v32[1] = v30;
          id v17 = (unint64_t *)(v30 + 40);
          unint64_t v18 = MEMORY[0x1E4FBC860];
          do
          {
            unint64_t v42 = v18;
            uint64_t v21 = *(v17 - 1);
            unint64_t v20 = *v17;
            uint64_t v45 = 0;
            long long v43 = 0u;
            long long v44 = 0u;
            outlined copy of Data._Representation(v21, v20);
            outlined copy of Data._Representation(v21, v20);
            BinaryDecodingOptions.init()();
            lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, MEMORY[0x1E4FA2808]);
            Message.init(serializedData:extensions:partial:options:)();
            unint64_t v18 = v42;
            (*v39)(v6, 0, 1, v7);
            outlined consume of Data._Representation(v21, v20);
            if ((*v38)(v6, 1, v7) == 1)
            {
              outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
            }
            else
            {
              uint64_t v22 = *v37;
              uint64_t v23 = v35;
              (*v37)(v35, v6, v7);
              v22(v41, v23, v7);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1, v18);
              }
              unint64_t v25 = *(void *)(v18 + 16);
              unint64_t v24 = *(void *)(v18 + 24);
              if (v25 >= v24 >> 1) {
                unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v18);
              }
              *(void *)(v18 + 16) = v25 + 1;
              v22((char *)(v18+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(void *)(v36 + 72) * v25), v41, v7);
            }
            v17 += 2;
            --v19;
          }
          while (v19);
          swift_bridgeObjectRelease();
          uint64_t v13 = v33;
          unint64_t v15 = v34;
        }
        else
        {
          unint64_t v18 = MEMORY[0x1E4FBC860];
        }
        outlined consume of Data._Representation(v13, v15);
        swift_release();
        swift_bridgeObjectRelease();
        break;
    }
  }
  else
  {
LABEL_19:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_1C8F83000, v27, v28, "nlUserParses from SARDRunPOMMESRequest are nil", v29, 2u);
      MEMORY[0x1CB77E470](v29, -1, -1);
    }

    return MEMORY[0x1E4FBC860];
  }
  return v18;
}

uint64_t closure #2 in PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v4 - 8);
  id v5 = objc_msgSend(a1, sel_nlFallbackParse);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    switch(v9 >> 62)
    {
      case 1uLL:
        if ((int)v7 != v7 >> 32) {
          goto LABEL_4;
        }
        goto LABEL_8;
      case 2uLL:
        if (*(void *)(v7 + 16) == *(void *)(v7 + 24)) {
          goto LABEL_8;
        }
        goto LABEL_4;
      case 3uLL:
        goto LABEL_8;
      default:
        if ((v9 & 0xFF000000000000) != 0)
        {
LABEL_4:
          uint64_t v10 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
          BinaryDecodingOptions.init()();
          lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type Siri_Nlu_External_DelegatedUserDialogAct and conformance Siri_Nlu_External_DelegatedUserDialogAct, MEMORY[0x1E4FA2990]);
          Message.init(serializedData:extensions:partial:options:)();
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a2, 0, 1, v10);
        }
LABEL_8:
        outlined consume of Data._Representation(v7, v9);
        break;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl(&dword_1C8F83000, v12, v13, "nlFallbackParse from SARDRunPOMMESRequest is nil", v14, 2u);
    MEMORY[0x1CB77E470](v14, -1, -1);
  }

  uint64_t v15 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);

  return v16(a2, 1, 1, v15);
}

uint64_t closure #3 in PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_utterance);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v3 = 0x3E6C696E3CLL;
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1C8F83000, v5, v6, "No utterance provided by SARDRunPOMMESRequest. Using <nil>.", v7, 2u);
      MEMORY[0x1CB77E470](v7, -1, -1);
    }
  }
  return v3;
}

const char *PommesBridgeRequestProcessor.nilUtterance.unsafeMutableAddressor()
{
  return "<nil>";
}

uint64_t (*PommesBridgeRequestProcessor.isRequestFinished.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t PommesBridgeRequestProcessor.pommesStateHolder.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + direct field offset for PommesBridgeRequestProcessor.pommesStateHolder);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t PommesBridgeRequestProcessor.sessionState.setter(uint64_t a1)
{
  uint64_t v3 = v1 + direct field offset for PommesBridgeRequestProcessor.sessionState;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v3, &demangling cache variable for type metadata for ConversationSessionState?);
  return swift_endAccess();
}

uint64_t (*PommesBridgeRequestProcessor.sessionState.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t PommesBridgeRequestProcessor.isCandidateRequest.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for PommesBridgeRequestProcessor.isCandidateRequest);
  swift_beginAccess();
  return *v1;
}

void *PommesBridgeRequestProcessor.PommesParserId.unsafeMutableAddressor()
{
  return &static PommesBridgeRequestProcessor.PommesParserId;
}

unint64_t static PommesBridgeRequestProcessor.PommesParserId.getter()
{
  return 0xD000000000000010;
}

uint64_t static PommesBridgeRequestProcessor.nilUtterance.getter()
{
  return 0x3E6C696E3CLL;
}

uint64_t key path setter for PommesBridgeRequestProcessor.timeout : PommesBridgeRequestProcessor(uint64_t a1, void **a2)
{
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  MEMORY[0x1F4188790](v4);
  os_log_type_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(class metadata base offset for PommesBridgeRequestProcessor + **a2 + 248))(v6);
}

uint64_t PommesBridgeRequestProcessor.timeout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for PommesBridgeRequestProcessor.timeout;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PommesBridgeRequestProcessor.timeout.setter(uint64_t a1)
{
  uint64_t v3 = v1 + direct field offset for PommesBridgeRequestProcessor.timeout;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*PommesBridgeRequestProcessor.timeout.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int8 a17)
{
  uint64_t v17 = specialized PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  swift_release();
  swift_release();
  return v17;
}

uint64_t static PommesBridgeRequestProcessor.configuredTimeout(isServerFallbackDisabled:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  id v4 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  uint64_t v5 = (void *)MEMORY[0x1CB77CA90](0xD000000000000011, 0x80000001C919E9E0);
  id v6 = objc_msgSend(v4, sel_initWithSuiteName_, v5);

  if (v6
    && (uint64_t v7 = (void *)MEMORY[0x1CB77CA90](0xD00000000000001BLL, 0x80000001C91A0710),
        id v8 = objc_msgSend(v6, sel_integerForKey_, v7),
        v7,
        v6,
        v8))
  {
    *a2 = (uint64_t)v8;
    uint64_t v9 = (unsigned int *)MEMORY[0x1E4FBCAC0];
  }
  else
  {
    uint64_t v10 = 5;
    if (a1) {
      uint64_t v10 = 8;
    }
    *a2 = v10;
    uint64_t v9 = (unsigned int *)MEMORY[0x1E4FBCAE0];
  }
  uint64_t v11 = *v9;
  uint64_t v12 = type metadata accessor for DispatchTimeInterval();
  os_log_type_t v13 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104);

  return v13(a2, v11, v12);
}

uint64_t PommesBridgeRequestProcessor.handleStartTextRequestMessage(_:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(class metadata base offset for PommesBridgeRequestProcessor
                                                    + *v1
                                                    + 328))(a1, 0);
}

uint64_t PommesBridgeRequestProcessor.handleStartRequestMessage(_:location:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for InputOrigin();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v37[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *(void *)((char *)v0 + direct field offset for PommesBridgeRequestProcessor.pommesSearch);
  uint64_t v7 = RequestMessageBase.requestId.getter();
  (*(void (**)(uint64_t))(*(void *)v6 + 304))(v7);
  swift_bridgeObjectRelease();
  StartRequestMessageBase.inputOrigin.getter();
  uint64_t v8 = InputOrigin.aceInputOrigin.getter();
  uint64_t v10 = v9;
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v11 = (void *)((char *)v1 + direct field offset for PommesBridgeRequestProcessor.aceInputOrigin);
  *uint64_t v11 = v8;
  v11[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t result = StartRequestMessageBase.optionalRequestContextData.getter();
  if (result)
  {
    os_log_type_t v13 = (void *)result;
    uint64_t v14 = MessageBase.assistantId.getter();
    uint64_t v51 = v15;
    uint64_t v52 = v14;
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v53 = v37;
    uint64_t v47 = v16;
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void *)(v17 + 64);
    MEMORY[0x1F4188790](v16);
    SessionMessageBase.sessionId.getter();
    uint64_t v19 = RequestMessageBase.requestId.getter();
    uint64_t v48 = v20;
    uint64_t v49 = v19;
    int v50 = v37;
    MEMORY[0x1F4188790](v19);
    uint64_t v21 = &v37[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 16))(v21, v21, v16);
    uint64_t v22 = RequestContextData.audioSource.getter();
    uint64_t v45 = v23;
    uint64_t v46 = v22;
    uint64_t v24 = RequestContextData.audioDestination.getter();
    uint64_t v43 = v25;
    uint64_t v44 = v24;
    uint64_t v26 = RequestContextData.responseMode.getter();
    uint64_t v41 = v27;
    uint64_t v42 = v26;
    int v40 = RequestContextData.isEyesFree.getter();
    int v38 = RequestContextData.isVoiceTriggerEnabled.getter();
    LOBYTE(v18) = RequestContextData.isTextToSpeechEnabled.getter();
    char v28 = RequestContextData.isTriggerlessFollowup.getter();
    uint64_t v29 = RequestContextData.bargeInModes.getter();
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    uint64_t v39 = v37;
    MEMORY[0x1F4188790](v30 - 8);
    uint64_t v32 = &v37[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
    RequestContextData.approximatePreviousTTSInterval.getter();
    uint64_t v33 = RequestContextData.deviceRestrictions.getter();
    type metadata accessor for PommesRequestContext();
    swift_allocObject();
    uint64_t v34 = PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(v52, v51, (uint64_t)v21, v49, v48, v46, v45, v44, v43, v42, v41, v40 & 1, v38 & 1, v18 & 1, 0, v28 & 1, v29, (uint64_t)v32, v33);
    (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v21, v47);
    *(void *)((char *)v1 + direct field offset for PommesBridgeRequestProcessor.pommesRequestContext) = v34;
    swift_retain();
    uint64_t v35 = swift_release();
    uint64_t v36 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 120))(v35);
    specialized Sequence.forEach(_:)(v36, (void (*)(char *, uint64_t))partial apply for closure #1 in PommesBridgeRequestProcessor.setRequestContextAndBeginSearchIfReady(_:));

    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in PommesBridgeRequestProcessor.setRequestContextAndBeginSearchIfReady(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for PommesCandidateId();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *a3 + 448))(a2);
  if (result)
  {
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v8);
    (*(void (**)(char *))(class metadata base offset for PommesBridgeRequestProcessor + *a3 + 456))(v8);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return result;
}

uint64_t PommesBridgeRequestProcessor.handleRunPommesRequest(command:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v87 = type metadata accessor for PommesCandidateId();
  uint64_t v85 = *(void *)(v87 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v87);
  uint64_t v80 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  id v83 = (uint64_t *)((char *)&v76 - v6);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v79 = (uint64_t)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v76 - v10;
  uint64_t v12 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v81 = (uint64_t)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v76 - v16;
  uint64_t v18 = type metadata accessor for UserID();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v89 = v18;
  uint64_t v90 = v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  unsigned int v88 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  unsigned int v91 = (char *)&v76 - v22;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
  id v25 = a1;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  unsigned int v86 = v2;
  if (v28)
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v77 = (void *)swift_slowAlloc();
    uint64_t v82 = v24;
    uint64_t v78 = v11;
    *(_DWORD *)uint64_t v29 = 138412290;
    v93[0] = (uint64_t)v25;
    id v30 = v25;
    uint64_t v84 = v17;
    id v31 = v30;
    uint64_t v11 = v78;
    uint64_t v24 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v32 = v77;
    void *v77 = v25;

    uint64_t v17 = v84;
    _os_log_impl(&dword_1C8F83000, v26, v27, "PommesBridgeRequestProcessor received SARDRunPOMMESRequest: %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v32, -1, -1);
    MEMORY[0x1CB77E470](v29, -1, -1);
  }
  else
  {
  }
  id v33 = objc_msgSend(v25, sel_userId);
  if (v33)
  {
    uint64_t v34 = v33;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    UserID.init(sharedUserId:)();
  }
  else
  {
    static UserID.defaultUserId.getter();
  }
  uint64_t v35 = (uint64_t)v88;
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v88, v91, v89);
  id v36 = v25;
  PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)(v36, v35, 0, 0, 0, 0, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_1C8F83000, v37, v38, "Not handling SARDRunPOMMESRequest because unable to create PommesBridgeResultCandidateState", v39, 2u);
      MEMORY[0x1CB77E470](v39, -1, -1);
    }
  }
  else
  {
    outlined init with take of NLXResultCandidate((uint64_t)v11, (uint64_t)v17, type metadata accessor for PommesBridgeResultCandidateState);
    id v40 = objc_msgSend(v36, sel_refId);
    if (v40)
    {
      uint64_t v41 = v40;
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v44 = v43;

      uint64_t v45 = v83;
      *id v83 = v42;
      v45[1] = v44;
      uint64_t v84 = v17;
      uint64_t v46 = v85;
      uint64_t v47 = *(void (**)(void))(v85 + 104);
      uint64_t v82 = v24;
      uint64_t v48 = v13;
      uint64_t v49 = v45;
      unsigned int v88 = (char *)v12;
      uint64_t v50 = v87;
      v47();
      uint64_t v51 = v86;
      uint64_t v52 = *(void *)((char *)v86 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
      uint64_t v53 = RequestProcessorBase.requestId.getter();
      uint64_t v55 = v54;
      uint64_t v56 = RequestProcessorBase.rootLevelRequestId.getter();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v52 + 128))(v49, v53, v55, v56, v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v58 = v46;
      uint64_t v17 = v84;
      uint64_t v59 = (uint64_t)v80;
      (*(void (**)(char *, uint64_t *, uint64_t))(v58 + 16))(v80, v49, v50);
      uint64_t v60 = v79;
      outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v17, v79, type metadata accessor for PommesBridgeResultCandidateState);
      (*(void (**)(uint64_t, void, uint64_t, char *))(v48 + 56))(v60, 0, 1, v88);
      uint64_t v61 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                         + *v51
                                                                                         + 136))(v93);
      specialized Dictionary.subscript.setter(v60, v59);
      v61(v93, 0);
      uint64_t v62 = v81;
      outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v17, v81, type metadata accessor for PommesBridgeResultCandidateState);
      uint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = (uint8_t *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        v93[0] = v66;
        *(_DWORD *)uint64_t v65 = 136315138;
        uint64_t v67 = PommesBridgeResultCandidateState.description.getter();
        uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of NLXResultCandidate(v62, type metadata accessor for PommesBridgeResultCandidateState);
        _os_log_impl(&dword_1C8F83000, v63, v64, "Created %s", v65, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v66, -1, -1);
        MEMORY[0x1CB77E470](v65, -1, -1);
      }
      else
      {
        outlined destroy of NLXResultCandidate(v62, type metadata accessor for PommesBridgeResultCandidateState);
      }

      os_log_type_t v72 = v86;
      char v73 = (*(uint64_t (**)(char *))(class metadata base offset for PommesBridgeRequestProcessor + *v86 + 448))(v17);
      uint64_t v74 = v83;
      if (v73) {
        (*(void (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor + *v72 + 456))(v83);
      }
      (*(void (**)(uint64_t *, uint64_t))(v85 + 8))(v74, v87);
    }
    else
    {
      uint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v69, v70))
      {
        char v71 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v71 = 0;
        _os_log_impl(&dword_1C8F83000, v69, v70, "Not handling SARDRunPOMMESRequest because no refId provided", v71, 2u);
        MEMORY[0x1CB77E470](v71, -1, -1);
      }
    }
    outlined destroy of NLXResultCandidate((uint64_t)v17, type metadata accessor for PommesBridgeResultCandidateState);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v91, v89);
}

uint64_t PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v76 = (uint64_t)v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PommesCandidateId();
  uint64_t v81 = *(void *)(v4 - 8);
  uint64_t v82 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v85 = (uint64_t)v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v84 = (void *)((char *)v74 - v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v77 = (char *)v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UserID();
  MEMORY[0x1F4188790](v10 - 8);
  int v75 = (char *)v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v78 = *(void *)(v12 - 8);
  uint64_t v79 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v83 = (uint64_t)v74 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for InsightRequestSummaryLogger();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for insightRequestSummaryLogger != -1) {
    swift_once();
  }
  uint64_t v24 = __swift_project_value_buffer(v20, (uint64_t)static Logger.insightRequestSummaryLogger);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v24, v20);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v86;
  *(void *)(v25 + 24) = a1;
  swift_retain();
  id v26 = a1;
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
  uint64_t v29 = v26;
  id v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v80 = v15;
  if (v32)
  {
    id v33 = (uint8_t *)swift_slowAlloc();
    v74[0] = swift_slowAlloc();
    *(_DWORD *)id v33 = 138412290;
    v88[0] = (uint64_t)v29;
    uint64_t v34 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v35 = v74[0];
    *(void *)v74[0] = v29;

    _os_log_impl(&dword_1C8F83000, v30, v31, "PommesBridge handling message: %@", v33, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v35, -1, -1);
    MEMORY[0x1CB77E470](v33, -1, -1);
  }
  else
  {

    id v30 = v29;
  }
  uint64_t v36 = 0x3E6C696E3CLL;

  uint64_t v37 = (void *)AsrResultCandidateMessage.speechPackage.getter();
  id v38 = objc_msgSend(v37, sel_recognition);

  v74[1] = v28;
  if (v38)
  {
    uint64_t v39 = AFSpeechRecognition.toAsrHypotheses()();

    uint64_t v40 = *(void *)(v39 + 16);
    uint64_t v41 = type metadata accessor for Siri_Nlu_External_AsrHypothesis();
    uint64_t v42 = *(void *)(v41 - 8);
    if (v40)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v19, v39+ ((*(unsigned __int8 *)(*(void *)(v41 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v41 - 8) + 80)), v41);
      uint64_t v43 = 0;
    }
    else
    {
      uint64_t v43 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v19, v43, 1, v41);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v19, 1, v41) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
      uint64_t v44 = 0xE500000000000000;
    }
    else
    {
      uint64_t v36 = Siri_Nlu_External_AsrHypothesis.utterance.getter();
      uint64_t v44 = v45;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v19, v41);
    }
  }
  else
  {
    uint64_t v44 = 0xE500000000000000;
  }
  uint64_t v46 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v48 = v47;
  uint64_t v49 = (uint64_t)v75;
  UserIdAwareResultCandidateMessageBase.userId.getter();
  uint64_t v50 = AsrResultCandidateMessage.speechPackage.getter();
  uint64_t v51 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v52 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v77, 1, 1, v51);
  uint64_t v53 = v83;
  PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)(v46, v48, v49, v50, v36, v44, 0, 0, v83, 0, 0, 0, MEMORY[0x1E4FBC860], v52);
  uint64_t v54 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v55 = v84;
  *uint64_t v84 = v54;
  v55[1] = v56;
  uint64_t v58 = v81;
  uint64_t v57 = v82;
  (*(void (**)(uint64_t *, void, uint64_t))(v81 + 104))(v55, *MEMORY[0x1E4F9FE50], v82);
  uint64_t v59 = v85;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v58 + 16))(v85, v55, v57);
  uint64_t v60 = v76;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v53, v76, type metadata accessor for PommesBridgeResultCandidateState);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v60, 0, 1, v79);
  uint64_t v61 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v86
                                                                                     + 136))(v88);
  specialized Dictionary.subscript.setter(v60, v59);
  v61(v88, 0);
  uint64_t v62 = (uint64_t)v80;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v53, (uint64_t)v80, type metadata accessor for PommesBridgeResultCandidateState);
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = (uint8_t *)swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    v88[0] = v66;
    *(_DWORD *)uint64_t v65 = 136315138;
    uint64_t v67 = PommesBridgeResultCandidateState.description.getter();
    uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NLXResultCandidate(v62, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C8F83000, v63, v64, "Created %s", v65, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v66, -1, -1);
    MEMORY[0x1CB77E470](v65, -1, -1);
  }
  else
  {
    outlined destroy of NLXResultCandidate(v62, type metadata accessor for PommesBridgeResultCandidateState);
  }

  uint64_t v69 = v85;
  uint64_t v70 = v83;
  PommesBridgeResultCandidateState.pommesCandidateId.getter(v85);
  PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)(v69);
  uint64_t v71 = v82;
  os_log_type_t v72 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
  v72(v69, v82);
  v72((uint64_t)v84, v71);
  return outlined destroy of NLXResultCandidate(v70, type metadata accessor for PommesBridgeResultCandidateState);
}

uint64_t PommesBridgeRequestProcessor.handleTRPCandidateRequestMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl(&dword_1C8F83000, v6, v7, "PommesBridge handling message: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v9, -1, -1);
    MEMORY[0x1CB77E470](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = TRPCandidateRequestMessage.tcuToContextList.getter();
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    uint64_t v13 = v11 + 40;
    do
    {
      closure #1 in PommesBridgeRequestProcessor.handleTRPCandidateRequestMessage(_:)(*(void **)(v13 - 8), v13, (uint64_t)v5, v2);
      v13 += 48;
      --v12;
    }
    while (v12);
  }
  return swift_bridgeObjectRelease();
}

id closure #1 in PommesBridgeRequestProcessor.handleTRPCandidateRequestMessage(_:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v83 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v76 = (uint64_t)v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PommesCandidateId();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v81 = v8;
  uint64_t v82 = v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  int v75 = (char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (void *)((char *)v72 - v12);
  uint64_t v14 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v77 = (uint64_t)v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (void *)((char *)v72 - v18);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  uint64_t v78 = v24;
  uint64_t v79 = v23;
  id result = objc_msgSend(a1, sel_speechPackage);
  if (!result)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v26 = result;
  uint64_t v80 = 0x3E6C696E3CLL;
  id v27 = objc_msgSend(result, sel_recognition);

  if (v27)
  {
    v72[0] = a1;
    v72[1] = a3;
    uint64_t v73 = v15;
    uint64_t v28 = AFSpeechRecognition.toAsrHypotheses()();

    uint64_t v29 = *(void *)(v28 + 16);
    uint64_t v30 = type metadata accessor for Siri_Nlu_External_AsrHypothesis();
    uint64_t v31 = *(void *)(v30 - 8);
    if (v29)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v31 + 16))(v22, v28 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80)), v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v22, 0, 1, v30);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v22, 1, 1, v30);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for Siri_Nlu_External_AsrHypothesis();
    int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v22, 1, v30);
    uint64_t v15 = v73;
    if (v32 == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v22, &demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
      unint64_t v74 = 0xE500000000000000;
    }
    else
    {
      uint64_t v80 = Siri_Nlu_External_AsrHypothesis.utterance.getter();
      unint64_t v74 = v33;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v22, v30);
    }
    a1 = (void *)v72[0];
  }
  else
  {
    unint64_t v74 = 0xE500000000000000;
  }
  id result = objc_msgSend(a1, sel_tcuId);
  if (!result) {
    goto LABEL_20;
  }
  uint64_t v34 = result;
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;

  TRPCandidateRequestMessageBase.userId.getter();
  id v38 = objc_msgSend(a1, sel_speechPackage);
  uint64_t v39 = a1;
  uint64_t v40 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  uint64_t v41 = (char *)v19 + v40[16];
  uint64_t v42 = type metadata accessor for TCUMappedNLResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 1, 1, v42);
  uint64_t v43 = (char *)v19 + v40[24];
  uint64_t v44 = type metadata accessor for SiriUserInput();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
  uint64_t v45 = (char *)v19 + v40[28];
  uint64_t v46 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 1, 1, v46);
  *((unsigned char *)v19 + v14[13]) = 0;
  uint64_t v47 = (char *)v19 + v14[14];
  uint64_t v48 = type metadata accessor for PommesSearchEagerInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 1, 1, v48);
  uint64_t v49 = v40[20];
  uint64_t v50 = v78;
  uint64_t v51 = v79;
  *uint64_t v19 = v79;
  v19[1] = v50;
  v19[2] = v35;
  void v19[3] = v37;
  uint64_t v52 = v50;
  *((unsigned char *)v19 + v49) = 0;
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  swift_storeEnumTagMultiPayload();
  *(uint64_t *)((char *)v19 + v14[7]) = (uint64_t)v38;
  uint64_t v53 = (uint64_t *)((char *)v19 + v14[8]);
  unint64_t v54 = v74;
  *uint64_t v53 = v80;
  v53[1] = v54;
  *((unsigned char *)v19 + v14[9]) = 0;
  *((unsigned char *)v19 + v14[10]) = 0;
  *((unsigned char *)v19 + v14[11]) = 0;
  *((unsigned char *)v19 + v14[12]) = 0;
  *(uint64_t *)((char *)v19 + v14[6]) = 0;
  swift_bridgeObjectRetain();
  id result = objc_msgSend(v39, sel_tcuId);
  if (!result)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v55 = result;
  uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v58 = v57;

  *uint64_t v13 = v51;
  v13[1] = v52;
  v13[2] = v56;
  v13[3] = v58;
  uint64_t v60 = v81;
  uint64_t v59 = v82;
  (*(void (**)(void *, void, uint64_t))(v82 + 104))(v13, *MEMORY[0x1E4F9FE58], v81);
  uint64_t v61 = (uint64_t)v75;
  (*(void (**)(char *, void *, uint64_t))(v59 + 16))(v75, v13, v60);
  uint64_t v62 = v76;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v19, v76, type metadata accessor for PommesBridgeResultCandidateState);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v15 + 56))(v62, 0, 1, v14);
  uint64_t v63 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v83
                                                                                     + 136))(v85);
  specialized Dictionary.subscript.setter(v62, v61);
  v63(v85, 0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v64 = type metadata accessor for Logger();
  __swift_project_value_buffer(v64, (uint64_t)static Logger.pommes);
  uint64_t v65 = v77;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v19, v77, type metadata accessor for PommesBridgeResultCandidateState);
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v67))
  {
    unint64_t v68 = (uint8_t *)swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    v85[0] = v69;
    *(_DWORD *)unint64_t v68 = 136315138;
    uint64_t v80 = (uint64_t)v13;
    uint64_t v70 = PommesBridgeResultCandidateState.description.getter();
    uint64_t v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v85);
    uint64_t v13 = (void *)v80;
    uint64_t v60 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NLXResultCandidate(v65, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C8F83000, v66, v67, "Created %s", v68, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v69, -1, -1);
    MEMORY[0x1CB77E470](v68, -1, -1);
  }
  else
  {
    outlined destroy of NLXResultCandidate(v65, type metadata accessor for PommesBridgeResultCandidateState);
  }

  PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)((uint64_t)v13);
  (*(void (**)(void *, uint64_t))(v82 + 8))(v13, v60);
  return (id)outlined destroy of NLXResultCandidate((uint64_t)v19, type metadata accessor for PommesBridgeResultCandidateState);
}

uint64_t PommesBridgeRequestProcessor.handleGestureBasedResultCandidateMessage(_:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v93 = (uint64_t)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PommesCandidateId();
  uint64_t v96 = *(void *)(v4 - 8);
  uint64_t v97 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unsigned int v91 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (uint64_t *)((char *)&v78 - v7);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v9 - 8);
  unsigned int v88 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for GestureInput();
  uint64_t v84 = *(void *)(v11 - 8);
  uint64_t v85 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v82 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UserID();
  MEMORY[0x1F4188790](v13 - 8);
  unsigned int v86 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v89 = *(void *)(v15 - 8);
  uint64_t v90 = v15;
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v83 = (uint64_t)&v78 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v78 - v21;
  uint64_t v23 = type metadata accessor for InsightRequestSummaryLogger();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  id v26 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
  id v29 = a1;
  uint64_t v87 = v28;
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v95 = v22;
  uint64_t v92 = v18;
  if (v32)
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v81 = v23;
    uint64_t v34 = (uint8_t *)v33;
    uint64_t v79 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 138412290;
    v99[0] = (uint64_t)v29;
    id v35 = v29;
    uint64_t v80 = v26;
    id v36 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v37 = v79;
    *uint64_t v79 = v29;

    id v26 = v80;
    _os_log_impl(&dword_1C8F83000, v30, v31, "PommesBridge handling message: %@", v34, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v37, -1, -1);
    id v38 = v34;
    uint64_t v23 = v81;
    MEMORY[0x1CB77E470](v38, -1, -1);
  }
  else
  {
  }
  if (one-time initialization token for insightRequestSummaryLogger != -1) {
    swift_once();
  }
  uint64_t v39 = __swift_project_value_buffer(v23, (uint64_t)static Logger.insightRequestSummaryLogger);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v39, v23);
  uint64_t v40 = swift_allocObject();
  uint64_t v41 = v94;
  *(void *)(v40 + 16) = v94;
  *(void *)(v40 + 24) = v29;
  id v42 = v29;
  swift_retain();
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  id v43 = v42;
  uint64_t v44 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v46 = v45;
  id v47 = v43;
  uint64_t v48 = (uint64_t)v86;
  UserIdAwareResultCandidateMessageBase.userId.getter();

  uint64_t v49 = v82;
  uint64_t v50 = GestureBasedResultCandidateMessage.gesture.getter();
  uint64_t v51 = MEMORY[0x1CB77B3D0](v50);
  uint64_t v53 = v52;
  (*(void (**)(char *, uint64_t))(v84 + 8))(v49, v85);
  if (!v53)
  {
    uint64_t v51 = 0;
    uint64_t v53 = 0xE000000000000000;
  }
  uint64_t v54 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v55 = v88;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v88, 1, 1, v54);
  uint64_t v77 = (uint64_t)v55;
  uint64_t v56 = v83;
  PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)(v44, v46, v48, 0, v51, v53, 0, 0, v83, 0, 0, 0, MEMORY[0x1E4FBC860], v77);

  uint64_t v57 = (uint64_t)v95;
  outlined init with take of NLXResultCandidate(v56, (uint64_t)v95, type metadata accessor for PommesBridgeResultCandidateState);
  uint64_t v58 = v90;
  *(unsigned char *)(v57 + *(int *)(v90 + 52)) = 1;
  uint64_t *v8 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v8[1] = v59;
  uint64_t v61 = v96;
  uint64_t v60 = v97;
  (*(void (**)(uint64_t *, void, uint64_t))(v96 + 104))(v8, *MEMORY[0x1E4F9FE50], v97);
  uint64_t v62 = (uint64_t)v91;
  (*(void (**)(char *, uint64_t *, uint64_t))(v61 + 16))(v91, v8, v60);
  uint64_t v63 = v93;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v57, v93, type metadata accessor for PommesBridgeResultCandidateState);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56))(v63, 0, 1, v58);
  uint64_t v64 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v41
                                                                                     + 136))(v99);
  specialized Dictionary.subscript.setter(v63, v62);
  v64(v99, 0);
  uint64_t v65 = (uint64_t)v92;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v57, (uint64_t)v92, type metadata accessor for PommesBridgeResultCandidateState);
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = swift_slowAlloc();
    uint64_t v69 = v96;
    uint64_t v70 = (uint8_t *)v68;
    unint64_t v71 = v8;
    uint64_t v72 = swift_slowAlloc();
    v99[0] = v72;
    *(_DWORD *)uint64_t v70 = 136315138;
    uint64_t v73 = PommesBridgeResultCandidateState.description.getter();
    uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NLXResultCandidate(v65, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C8F83000, v66, v67, "Created %s", v70, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v72, -1, -1);
    MEMORY[0x1CB77E470](v70, -1, -1);

    (*(void (**)(uint64_t *, uint64_t))(v69 + 8))(v71, v97);
    uint64_t v75 = (uint64_t)v95;
  }
  else
  {

    outlined destroy of NLXResultCandidate(v65, type metadata accessor for PommesBridgeResultCandidateState);
    (*(void (**)(uint64_t *, uint64_t))(v96 + 8))(v8, v97);
    uint64_t v75 = v57;
  }
  return outlined destroy of NLXResultCandidate(v75, type metadata accessor for PommesBridgeResultCandidateState);
}

uint64_t PommesBridgeRequestProcessor.handleTextBasedTRPCandidateMessage(_:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v77 = (uint64_t)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PommesCandidateId();
  uint64_t v81 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v76 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v80 = (uint64_t *)((char *)&v70 - v7);
  uint64_t v8 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v75 = *((void *)v8 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v78 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v70 - v11);
  uint64_t v13 = type metadata accessor for InsightRequestSummaryLogger();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v73 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  id v18 = a1;
  uint64_t v74 = v17;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v79 = v4;
  if (v21)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v70 = (void *)swift_slowAlloc();
    unint64_t v71 = v8;
    uint64_t v72 = v13;
    *(_DWORD *)uint64_t v22 = 138412290;
    v84[0] = (uint64_t)v18;
    id v23 = v18;
    uint64_t v8 = v71;
    uint64_t v13 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v24 = v70;
    *uint64_t v70 = v18;

    _os_log_impl(&dword_1C8F83000, v19, v20, "PommesBridge handling message: %@", v22, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v24, -1, -1);
    MEMORY[0x1CB77E470](v22, -1, -1);
  }
  else
  {
  }
  if (one-time initialization token for insightRequestSummaryLogger != -1) {
    swift_once();
  }
  uint64_t v25 = __swift_project_value_buffer(v13, (uint64_t)static Logger.insightRequestSummaryLogger);
  id v26 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v73, v25, v13);
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v82;
  *(void *)(v27 + 16) = v82;
  *(void *)(v27 + 24) = v18;
  id v29 = v18;
  swift_retain();
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v13);
  uint64_t v30 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  uint64_t v32 = v31;
  uint64_t v33 = TextBasedTRPCandidateMessage.tcuId.getter();
  uint64_t v35 = v34;
  TRPCandidateRequestMessageBase.userId.getter();
  uint64_t v36 = TextBasedTRPCandidateMessage.utterance.getter();
  uint64_t v72 = v37;
  uint64_t v73 = (char *)v36;
  id v38 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  uint64_t v39 = (char *)v12 + v38[16];
  uint64_t v40 = type metadata accessor for TCUMappedNLResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
  uint64_t v41 = (char *)v12 + v38[24];
  uint64_t v42 = type metadata accessor for SiriUserInput();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 1, 1, v42);
  id v43 = (char *)v12 + v38[28];
  uint64_t v44 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
  *((unsigned char *)v12 + v8[13]) = 0;
  uint64_t v45 = (char *)v12 + v8[14];
  uint64_t v46 = type metadata accessor for PommesSearchEagerInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 1, 1, v46);
  uint64_t v47 = v38[20];
  *uint64_t v12 = v30;
  v12[1] = v32;
  _OWORD v12[2] = v33;
  v12[3] = v35;
  *((unsigned char *)v12 + v47) = 0;
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  swift_storeEnumTagMultiPayload();
  *(uint64_t *)((char *)v12 + v8[7]) = 0;
  uint64_t v48 = (char **)((char *)v12 + v8[8]);
  uint64_t v49 = v72;
  *uint64_t v48 = v73;
  v48[1] = (char *)v49;
  *((unsigned char *)v12 + v8[9]) = 0;
  *((unsigned char *)v12 + v8[10]) = 0;
  *((unsigned char *)v12 + v8[11]) = 0;
  *((unsigned char *)v12 + v8[12]) = 0;
  *(uint64_t *)((char *)v12 + v8[6]) = 0;
  uint64_t v50 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  uint64_t v52 = v51;
  uint64_t v53 = TextBasedTRPCandidateMessage.tcuId.getter();
  uint64_t v55 = v79;
  uint64_t v54 = v80;
  *uint64_t v80 = v50;
  v54[1] = v52;
  v54[2] = v53;
  v54[3] = v56;
  uint64_t v57 = v81;
  (*(void (**)(uint64_t *, void, uint64_t))(v81 + 104))(v54, *MEMORY[0x1E4F9FE58], v55);
  uint64_t v58 = (uint64_t)v76;
  (*(void (**)(char *, uint64_t *, uint64_t))(v57 + 16))(v76, v54, v55);
  uint64_t v59 = v77;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v12, v77, type metadata accessor for PommesBridgeResultCandidateState);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v75 + 56))(v59, 0, 1, v8);
  uint64_t v60 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v28
                                                                                     + 136))(v84);
  specialized Dictionary.subscript.setter(v59, v58);
  v60(v84, 0);
  uint64_t v61 = v78;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v12, v78, type metadata accessor for PommesBridgeResultCandidateState);
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v64 = (uint8_t *)swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    v84[0] = v65;
    *(_DWORD *)uint64_t v64 = 136315138;
    uint64_t v66 = PommesBridgeResultCandidateState.description.getter();
    uint64_t v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NLXResultCandidate(v61, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C8F83000, v62, v63, "Created %s", v64, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v65, -1, -1);
    MEMORY[0x1CB77E470](v64, -1, -1);
  }
  else
  {
    outlined destroy of NLXResultCandidate(v61, type metadata accessor for PommesBridgeResultCandidateState);
  }

  uint64_t v68 = v80;
  PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)((uint64_t)v80);
  (*(void (**)(uint64_t *, uint64_t))(v81 + 8))(v68, v55);
  return outlined destroy of NLXResultCandidate((uint64_t)v12, type metadata accessor for PommesBridgeResultCandidateState);
}

uint64_t PommesBridgeRequestProcessor.handleRewrittenUtteranceCandidateMessage(_:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v79 = (uint64_t)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PommesCandidateId();
  uint64_t v83 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v78 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v82 = (uint64_t *)((char *)&v72 - v7);
  uint64_t v8 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v77 = *((void *)v8 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v80 = (uint64_t)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v72 - v11);
  uint64_t v13 = type metadata accessor for InsightRequestSummaryLogger();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  id v19 = a1;
  uint64_t v76 = v18;
  os_log_type_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v81 = v4;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v75 = v13;
    uint64_t v24 = (uint8_t *)v23;
    uint64_t v72 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 138412290;
    uint64_t v73 = (uint64_t)v8;
    v86[0] = (uint64_t)v19;
    id v25 = v19;
    uint64_t v74 = v14;
    id v26 = v25;
    uint64_t v8 = (int *)v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v27 = v72;
    void *v72 = v19;

    uint64_t v14 = v74;
    _os_log_impl(&dword_1C8F83000, v20, v21, "PommesBridge handling message: %@", v24, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v27, -1, -1);
    uint64_t v28 = v24;
    uint64_t v13 = v75;
    MEMORY[0x1CB77E470](v28, -1, -1);
  }
  else
  {
  }
  if (one-time initialization token for insightRequestSummaryLogger != -1) {
    swift_once();
  }
  uint64_t v29 = __swift_project_value_buffer(v13, (uint64_t)static Logger.insightRequestSummaryLogger);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v29, v13);
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = v84;
  *(void *)(v30 + 16) = v84;
  *(void *)(v30 + 24) = v19;
  id v32 = v19;
  swift_retain();
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v73 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  uint64_t v34 = v33;
  uint64_t v35 = TextBasedTRPCandidateMessage.tcuId.getter();
  uint64_t v37 = v36;
  TRPCandidateRequestMessageBase.userId.getter();
  uint64_t v38 = TextBasedTRPCandidateMessage.utterance.getter();
  uint64_t v74 = v39;
  uint64_t v75 = v38;
  uint64_t v40 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  uint64_t v41 = (char *)v12 + v40[16];
  uint64_t v42 = type metadata accessor for TCUMappedNLResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 1, 1, v42);
  id v43 = (char *)v12 + v40[24];
  RewrittenUtteranceCandidateMessage.originalUserInput.getter();
  uint64_t v44 = type metadata accessor for SiriUserInput();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 0, 1, v44);
  uint64_t v45 = (char *)v12 + v40[28];
  RewrittenUtteranceCandidateMessage.rewriteReason.getter();
  uint64_t v46 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 0, 1, v46);
  *((unsigned char *)v12 + v8[13]) = 0;
  uint64_t v47 = (char *)v12 + v8[14];
  uint64_t v48 = type metadata accessor for PommesSearchEagerInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 1, 1, v48);
  uint64_t v49 = v40[20];
  *uint64_t v12 = v73;
  v12[1] = v34;
  _OWORD v12[2] = v35;
  v12[3] = v37;
  *((unsigned char *)v12 + v49) = 0;
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  swift_storeEnumTagMultiPayload();
  *(uint64_t *)((char *)v12 + v8[7]) = 0;
  uint64_t v50 = (uint64_t *)((char *)v12 + v8[8]);
  uint64_t v51 = v74;
  *uint64_t v50 = v75;
  v50[1] = v51;
  *((unsigned char *)v12 + v8[9]) = 0;
  *((unsigned char *)v12 + v8[10]) = 0;
  *((unsigned char *)v12 + v8[11]) = 0;
  *((unsigned char *)v12 + v8[12]) = 0;
  *(uint64_t *)((char *)v12 + v8[6]) = 0;
  uint64_t v52 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  uint64_t v54 = v53;
  uint64_t v55 = TextBasedTRPCandidateMessage.tcuId.getter();
  uint64_t v57 = v81;
  uint64_t v56 = v82;
  *uint64_t v82 = v52;
  v56[1] = v54;
  void v56[2] = v55;
  v56[3] = v58;
  uint64_t v59 = v83;
  (*(void (**)(uint64_t *, void, uint64_t))(v83 + 104))(v56, *MEMORY[0x1E4F9FE58], v57);
  uint64_t v60 = (uint64_t)v78;
  (*(void (**)(char *, uint64_t *, uint64_t))(v59 + 16))(v78, v56, v57);
  uint64_t v61 = v79;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v12, v79, type metadata accessor for PommesBridgeResultCandidateState);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v77 + 56))(v61, 0, 1, v8);
  uint64_t v62 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v31
                                                                                     + 136))(v86);
  specialized Dictionary.subscript.setter(v61, v60);
  v62(v86, 0);
  uint64_t v63 = v80;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v12, v80, type metadata accessor for PommesBridgeResultCandidateState);
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v66 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    v86[0] = v67;
    *(_DWORD *)uint64_t v66 = 136315138;
    uint64_t v68 = PommesBridgeResultCandidateState.description.getter();
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NLXResultCandidate(v63, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C8F83000, v64, v65, "Created %s", v66, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v67, -1, -1);
    MEMORY[0x1CB77E470](v66, -1, -1);
  }
  else
  {
    outlined destroy of NLXResultCandidate(v63, type metadata accessor for PommesBridgeResultCandidateState);
  }

  uint64_t v70 = v82;
  PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)((uint64_t)v82);
  (*(void (**)(uint64_t *, uint64_t))(v83 + 8))(v70, v57);
  return outlined destroy of NLXResultCandidate((uint64_t)v12, type metadata accessor for PommesBridgeResultCandidateState);
}

void PommesBridgeRequestProcessor.handleTTResponseMessage(_:)(void *a1)
{
  uint64_t v208 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  MEMORY[0x1F4188790](v208);
  v207 = (char *)&v203 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v3 - 8);
  v211 = (char *)&v203 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v212 = type metadata accessor for SelectedUserAttributes();
  uint64_t v218 = *(void *)(v212 - 8);
  MEMORY[0x1F4188790](v212);
  v209 = (char *)&v203 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v213 = (uint64_t)&v203 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v217 = (uint64_t)&v203 - v9;
  uint64_t v10 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  v228 = (char *)&v203 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v225 = type metadata accessor for ServerFallbackReason();
  uint64_t v227 = *(void *)(v225 - 8);
  MEMORY[0x1F4188790](v225);
  v204 = (char *)&v203 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ServerFallbackReason?, ServerFallbackReason?));
  MEMORY[0x1F4188790](v215);
  uint64_t v222 = (uint64_t)&v203 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  uint64_t v15 = MEMORY[0x1F4188790](v206);
  v205 = (char *)&v203 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v210 = (uint64_t)&v203 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v220 = (uint64_t)&v203 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v221 = (uint64_t)&v203 - v22;
  MEMORY[0x1F4188790](v21);
  v224 = (char *)&v203 - v23;
  uint64_t v24 = type metadata accessor for PommesCandidateId();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v216 = (uint64_t)&v203 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  v229 = (uint64_t *)((char *)&v203 - v28);
  uint64_t v214 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v29 = MEMORY[0x1F4188790](v214);
  v223 = (char *)&v203 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  id v32 = (char *)&v203 - v31;
  uint64_t v33 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v34 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  v233 = (char *)&v203 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = (void *)type metadata accessor for TTResponseMessage.MitigationDecision();
  uint64_t v236 = *(v238 - 1);
  uint64_t v36 = MEMORY[0x1F4188790](v238);
  v235 = (char *)&v203 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  v237 = ((char *)&v203 - v38);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  uint64_t v40 = __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
  id v41 = a1;
  uint64_t v239 = v40;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  BOOL v44 = os_log_type_enabled(v42, v43);
  uint64_t v231 = v24;
  uint64_t v232 = v25;
  uint64_t v226 = v11;
  uint64_t v234 = v34;
  v219 = (int *)v10;
  if (v44)
  {
    uint64_t v45 = swift_slowAlloc();
    uint64_t v230 = v33;
    uint64_t v46 = (uint8_t *)v45;
    uint64_t v47 = swift_slowAlloc();
    v203 = v32;
    uint64_t v48 = (void *)v47;
    *(_DWORD *)uint64_t v46 = 138412290;
    uint64_t v243 = (uint64_t)v41;
    id v49 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v48 = v41;

    _os_log_impl(&dword_1C8F83000, v42, v43, "PommesBridge handling message: %@", v46, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v50 = v48;
    id v32 = v203;
    MEMORY[0x1CB77E470](v50, -1, -1);
    uint64_t v51 = v46;
    uint64_t v33 = v230;
    MEMORY[0x1CB77E470](v51, -1, -1);
  }
  else
  {
  }
  uint64_t v52 = (uint64_t)v237;
  TTResponseMessage.mitigationDecision.getter();
  uint64_t v53 = v235;
  uint64_t v54 = v236;
  uint64_t v55 = v238;
  (*(void (**)(char *, void, void *))(v236 + 104))(v235, *MEMORY[0x1E4FA2068], v238);
  lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, MEMORY[0x1E4FA2088]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v56 = v243;
  uint64_t v57 = v242;
  uint64_t v58 = *(void (**)(char *, void *))(v54 + 8);
  v58(v53, v55);
  v58((char *)v52, v55);
  if (v56 == v57)
  {
    id v59 = v41;
    swift_retain_n();
    id v60 = v59;
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = swift_slowAlloc();
      uint64_t v239 = swift_slowAlloc();
      uint64_t v243 = v239;
      *(_DWORD *)uint64_t v63 = 136315394;
      uint64_t v64 = RequestProcessorBase.requestId.getter();
      uint64_t v242 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v243);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 12) = 2048;
      uint64_t v66 = (uint64_t)v237;
      TTResponseMessage.mitigationDecision.getter();
      uint64_t v67 = TTResponseMessage.MitigationDecision.rawValue.getter();
      v58((char *)v66, v238);

      uint64_t v242 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v68 = "Returning because TTResponseMessage forceMitigated - requestId: %s with mitigatedDecision: %ld";
LABEL_12:
      _os_log_impl(&dword_1C8F83000, v61, v62, v68, (uint8_t *)v63, 0x16u);
      uint64_t v75 = v239;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v75, -1, -1);
      MEMORY[0x1CB77E470](v63, -1, -1);

      return;
    }
LABEL_13:

    swift_release_n();
    return;
  }
  TTResponseMessage.tcuMappedNLResponse.getter();
  uint64_t v69 = v234;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v234 + 48))(v32, 1, v33) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    id v70 = v41;
    swift_retain_n();
    id v60 = v70;
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = swift_slowAlloc();
      uint64_t v239 = swift_slowAlloc();
      uint64_t v243 = v239;
      *(_DWORD *)uint64_t v63 = 136315394;
      uint64_t v71 = RequestProcessorBase.requestId.getter();
      uint64_t v242 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, &v243);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 12) = 2048;
      uint64_t v73 = (uint64_t)v237;
      TTResponseMessage.mitigationDecision.getter();
      uint64_t v74 = TTResponseMessage.MitigationDecision.rawValue.getter();
      v58((char *)v73, v238);

      uint64_t v242 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v68 = "Returning because TTResponseMessage contains no tcuMappedNLResponse for requestId: %s with mitigatedDecision: %ld";
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v233, v32, v33);
  uint64_t v76 = v41;
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.debug.getter();
  BOOL v79 = os_log_type_enabled(v77, v78);
  uint64_t v230 = v33;
  if (v79)
  {
    uint64_t v80 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v80 = 134217984;
    uint64_t v81 = (uint64_t)v237;
    TTResponseMessage.mitigationDecision.getter();
    uint64_t v82 = TTResponseMessage.MitigationDecision.rawValue.getter();
    v58((char *)v81, v238);
    uint64_t v243 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1C8F83000, v77, v78, "TTResponseMessage contains tcuMappedNLResponse with mitigationDecision: %ld", v80, 0xCu);
    MEMORY[0x1CB77E470](v80, -1, -1);
  }
  else
  {

    uint64_t v77 = v76;
  }

  uint64_t v83 = v76;
  uint64_t v84 = Logger.logObject.getter();
  os_log_type_t v85 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v84, v85))
  {
    unsigned int v86 = (uint8_t *)swift_slowAlloc();
    uint64_t v87 = swift_slowAlloc();
    uint64_t v243 = v87;
    *(_DWORD *)unsigned int v86 = 136315138;
    TTResponseMessage.tcuMappedNLResponse.getter();
    uint64_t v88 = String.init<A>(describing:)();
    uint64_t v242 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, &v243);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v84, v85, "PommesBridgeRequestProcessor received messages: %s", v86, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v87, -1, -1);
    MEMORY[0x1CB77E470](v86, -1, -1);
  }
  else
  {
  }
  uint64_t v90 = v231;
  uint64_t v91 = v232;
  uint64_t v92 = v225;
  uint64_t v93 = v227;
  v237 = v83;
  uint64_t v94 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  uint64_t v96 = v95;
  uint64_t v97 = TCUMappedNLResponse.tcuId.getter();
  uint64_t v98 = v229;
  uint64_t *v229 = v94;
  v98[1] = v96;
  v98[2] = v97;
  v98[3] = v99;
  (*(void (**)(uint64_t *, void, uint64_t))(v91 + 104))(v98, *MEMORY[0x1E4F9FE58], v90);
  uint64_t v100 = *(void *)((char *)v240 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
  uint64_t v101 = RequestProcessorBase.requestId.getter();
  uint64_t v103 = v102;
  uint64_t v104 = RequestProcessorBase.rootLevelRequestId.getter();
  uint64_t v105 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v100 + 128);
  uint64_t v236 = v100;
  v105(v98, v101, v103, v104, v106);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v107 = (void *)TCUMappedNLResponse.nlResponse.getter();
  uint64_t v108 = (uint64_t)v224;
  v238 = v107;
  NLParseResponse.serverFallbackReason.getter();
  uint64_t v109 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  LODWORD(v101) = v109(v108, 1, v92);
  outlined destroy of MediaUserStateCenter?(v108, &demangling cache variable for type metadata for ServerFallbackReason?);
  uint64_t v110 = (uint64_t)v228;
  if (v101 != 1)
  {
    uint64_t v119 = v221;
    NLParseResponse.serverFallbackReason.getter();
    uint64_t v120 = v220;
    (*(void (**)(uint64_t, void, uint64_t))(v93 + 104))(v220, *MEMORY[0x1E4FA25F8], v92);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v93 + 56))(v120, 0, 1, v92);
    uint64_t v121 = v222;
    uint64_t v122 = v222 + *(int *)(v215 + 48);
    outlined init with copy of MediaUserStateCenter?(v119, v222, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined init with copy of MediaUserStateCenter?(v120, v122, &demangling cache variable for type metadata for ServerFallbackReason?);
    if (v109(v121, 1, v92) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v120, &demangling cache variable for type metadata for ServerFallbackReason?);
      uint64_t v121 = v222;
      outlined destroy of MediaUserStateCenter?(v119, &demangling cache variable for type metadata for ServerFallbackReason?);
      int v123 = v109(v122, 1, v92);
      uint64_t v91 = v232;
      if (v123 == 1)
      {
        outlined destroy of MediaUserStateCenter?(v121, &demangling cache variable for type metadata for ServerFallbackReason?);
        uint64_t v110 = (uint64_t)v228;
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v124 = v210;
      outlined init with copy of MediaUserStateCenter?(v121, v210, &demangling cache variable for type metadata for ServerFallbackReason?);
      if (v109(v122, 1, v92) != 1)
      {
        uint64_t v199 = v227;
        v200 = v204;
        (*(void (**)(char *, uint64_t, uint64_t))(v227 + 32))(v204, v122, v92);
        lazy protocol witness table accessor for type UserID and conformance UserID((unint64_t *)&lazy protocol witness table cache variable for type ServerFallbackReason and conformance ServerFallbackReason, MEMORY[0x1E4FA2600]);
        char v201 = dispatch thunk of static Equatable.== infix(_:_:)();
        v202 = *(void (**)(char *, uint64_t))(v199 + 8);
        v202(v200, v92);
        outlined destroy of MediaUserStateCenter?(v220, &demangling cache variable for type metadata for ServerFallbackReason?);
        outlined destroy of MediaUserStateCenter?(v221, &demangling cache variable for type metadata for ServerFallbackReason?);
        v202((char *)v124, v92);
        outlined destroy of MediaUserStateCenter?(v121, &demangling cache variable for type metadata for ServerFallbackReason?);
        uint64_t v91 = v232;
        uint64_t v110 = (uint64_t)v228;
        if (v201) {
          goto LABEL_21;
        }
LABEL_31:
        uint64_t v125 = v238;
        uint64_t v126 = Logger.logObject.getter();
        os_log_type_t v127 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v126, v127))
        {
          uint64_t v128 = swift_slowAlloc();
          uint64_t v129 = swift_slowAlloc();
          uint64_t v243 = v129;
          *(_DWORD *)uint64_t v128 = 136315394;
          NLParseResponse.serverFallbackReason.getter();
          uint64_t v130 = String.init<A>(describing:)();
          uint64_t v242 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v131, &v243);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v128 + 12) = 2080;
          NLParseResponse.responseStatusCode.getter();
          uint64_t v132 = String.init<A>(describing:)();
          uint64_t v242 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v133, &v243);
          uint64_t v134 = v232;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C8F83000, v126, v127, "Returning because tcuMappedNLResponse indicates server fallback\n    serverFallbackReason: %s\n    responseStatusCode: %s", (uint8_t *)v128, 0x16u);
          swift_arrayDestroy();
          uint64_t v135 = v231;
          MEMORY[0x1CB77E470](v129, -1, -1);
          MEMORY[0x1CB77E470](v128, -1, -1);

          uint64_t v136 = v236;
        }
        else
        {

          uint64_t v136 = v236;
          uint64_t v135 = v231;
          uint64_t v134 = v91;
        }
        v192 = v240;
        uint64_t v193 = RequestProcessorBase.requestId.getter();
        uint64_t v195 = v194;
        uint64_t v196 = RequestProcessorBase.rootLevelRequestId.getter();
        v197 = v229;
        (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v136 + 144))(4, v229, v193, v195, v196, v198);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        closure #1 in PommesBridgeRequestProcessor.handleTTResponseMessage(_:)((uint64_t)v237, v192);

        (*(void (**)(uint64_t *, uint64_t))(v134 + 8))(v197, v135);
        goto LABEL_51;
      }
      outlined destroy of MediaUserStateCenter?(v220, &demangling cache variable for type metadata for ServerFallbackReason?);
      outlined destroy of MediaUserStateCenter?(v221, &demangling cache variable for type metadata for ServerFallbackReason?);
      (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v124, v92);
      uint64_t v91 = v232;
    }
    outlined destroy of MediaUserStateCenter?(v121, &demangling cache variable for type metadata for (ServerFallbackReason?, ServerFallbackReason?));
    goto LABEL_31;
  }
LABEL_21:
  uint64_t v111 = (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v240 + 120))();
  if (*(void *)(v111 + 16))
  {
    unint64_t v112 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v98);
    uint64_t v113 = v218;
    uint64_t v114 = v219;
    uint64_t v115 = v226;
    if (v116)
    {
      uint64_t v117 = v217;
      outlined init with copy of PommesBridgeResultCandidateState.ParseState(*(void *)(v111 + 56) + *(void *)(v226 + 72) * v112, v217, type metadata accessor for PommesBridgeResultCandidateState);
      unint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v115 + 56);
      v118(v117, 0, 1, v114);
    }
    else
    {
      unint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v226 + 56);
      uint64_t v117 = v217;
      v118(v217, 1, 1, v219);
    }
  }
  else
  {
    uint64_t v115 = v226;
    unint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v226 + 56);
    uint64_t v117 = v217;
    uint64_t v114 = v219;
    v118(v217, 1, 1, v219);
    uint64_t v113 = v218;
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v115 + 48))(v117, 1, v114) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v117, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    swift_retain_n();
    uint64_t v137 = Logger.logObject.getter();
    os_log_type_t v138 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v137, v138))
    {
      unint64_t v139 = (uint8_t *)swift_slowAlloc();
      uint64_t v140 = swift_slowAlloc();
      uint64_t v243 = v140;
      *(_DWORD *)unint64_t v139 = 136315138;
      uint64_t v141 = RequestProcessorBase.requestId.getter();
      uint64_t v242 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v142, &v243);
      uint64_t v143 = v231;
      uint64_t v144 = v232;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v145 = v143;
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v137, v138, "Do not have prior state for this TTResponseMessage for requestId: %s", v139, 0xCu);
      swift_arrayDestroy();
      uint64_t v146 = v140;
      uint64_t v98 = v229;
      MEMORY[0x1CB77E470](v146, -1, -1);
      MEMORY[0x1CB77E470](v139, -1, -1);

      uint64_t v148 = v236;
      uint64_t v147 = (uint64_t)v237;
    }
    else
    {

      swift_release_n();
      uint64_t v148 = v236;
      uint64_t v147 = (uint64_t)v237;
      uint64_t v145 = v231;
      uint64_t v144 = v91;
    }
    id v157 = v240;
    uint64_t v158 = RequestProcessorBase.requestId.getter();
    uint64_t v160 = v159;
    uint64_t v161 = RequestProcessorBase.rootLevelRequestId.getter();
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v148 + 144))(5, v98, v158, v160, v161, v162);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    closure #1 in PommesBridgeRequestProcessor.handleTTResponseMessage(_:)(v147, v157);

    (*(void (**)(uint64_t *, uint64_t))(v144 + 8))(v98, v145);
LABEL_51:
    (*(void (**)(char *, uint64_t))(v234 + 8))(v233, v230);
    return;
  }
  outlined init with take of NLXResultCandidate(v117, v110, type metadata accessor for PommesBridgeResultCandidateState);
  PommesBridgeResultCandidateState.setHasTTResponse(_:)(1);
  uint64_t v149 = v110;
  uint64_t v150 = (uint64_t)v223;
  TTResponseMessage.tcuMappedNLResponse.getter();
  PommesBridgeResultCandidateState.setParseResponse(_:)(v150);
  uint64_t v151 = v150;
  uint64_t v152 = v149;
  outlined destroy of MediaUserStateCenter?(v151, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  *(unsigned char *)(v149 + v114[11]) = 1;
  uint64_t v153 = v211;
  TTResponseMessage.selectedUserAttributes.getter();
  uint64_t v154 = (uint64_t)v153;
  uint64_t v155 = v153;
  uint64_t v156 = v212;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v155, 1, v212) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v154, &demangling cache variable for type metadata for SelectedUserAttributes?);
  }
  else
  {
    uint64_t v163 = v209;
    (*(void (**)(char *, uint64_t, uint64_t))(v113 + 32))(v209, v154, v156);
    uint64_t v164 = SelectedUserAttributes.classification.getter();
    uint64_t v165 = v156;
    uint64_t v166 = v164;
    v167 = v163;
    uint64_t v152 = v149;
    (*(void (**)(char *, uint64_t))(v113 + 8))(v167, v165);
    *(void *)(v149 + v114[6]) = v166;
  }
  uint64_t v168 = v216;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v232 + 16))(v216, v98, v231);
  uint64_t v169 = v213;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v152, v213, type metadata accessor for PommesBridgeResultCandidateState);
  v118(v169, 0, 1, v114);
  unint64_t v170 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                      + *v240
                                                                                      + 136))(&v243);
  specialized Dictionary.subscript.setter(v169, v168);
  v170(&v243, 0);
  uint64_t v171 = Logger.logObject.getter();
  os_log_type_t v172 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v171, v172))
  {
    uint64_t v173 = (uint8_t *)swift_slowAlloc();
    uint64_t v174 = swift_slowAlloc();
    uint64_t v243 = v174;
    *(_DWORD *)uint64_t v173 = 136315138;
    swift_beginAccess();
    uint64_t v175 = PommesBridgeResultCandidateState.description.getter();
    uint64_t v242 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v175, v176, &v243);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v171, v172, "Fetched %s", v173, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v174, -1, -1);
    MEMORY[0x1CB77E470](v173, -1, -1);
  }

  v177 = Logger.logObject.getter();
  os_log_type_t v178 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v177, v178))
  {
    v179 = (uint8_t *)swift_slowAlloc();
    uint64_t v180 = swift_slowAlloc();
    uint64_t v243 = v180;
    *(_DWORD *)v179 = 136315138;
    swift_beginAccess();
    v181 = (uint64_t *)(v152 + v114[8]);
    uint64_t v182 = *v181;
    unint64_t v183 = v181[1];
    swift_bridgeObjectRetain();
    uint64_t v241 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v182, v183, &v243);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v152 = (uint64_t)v228;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v177, v178, "Extracted Pommes query:\n    prState utterance: \"%s\"", v179, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v180, -1, -1);
    MEMORY[0x1CB77E470](v179, -1, -1);
  }

  uint64_t v184 = v231;
  uint64_t v185 = v232;
  v186 = v229;
  uint64_t v187 = v230;
  uint64_t v188 = v234;
  swift_beginAccess();
  if ((*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v240 + 448))(v152))
  {
    uint64_t v189 = v152;
    uint64_t v190 = v216;
    PommesBridgeResultCandidateState.pommesCandidateId.getter(v216);
    (*(void (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v240 + 456))(v190);

    v191 = *(void (**)(uint64_t, uint64_t))(v185 + 8);
    v191(v190, v184);
    v191((uint64_t)v186, v184);
    (*(void (**)(char *, uint64_t))(v188 + 8))(v233, v187);
    outlined destroy of NLXResultCandidate(v189, type metadata accessor for PommesBridgeResultCandidateState);
  }
  else
  {

    (*(void (**)(uint64_t *, uint64_t))(v185 + 8))(v186, v184);
    (*(void (**)(char *, uint64_t))(v188 + 8))(v233, v187);
    outlined destroy of NLXResultCandidate(v152, type metadata accessor for PommesBridgeResultCandidateState);
  }
}

void closure #1 in PommesBridgeRequestProcessor.handleTTResponseMessage(_:)(uint64_t a1, void *a2)
{
  uint64_t v34 = a2;
  uint64_t v2 = type metadata accessor for UserID();
  uint64_t v33 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PommesSearchReason();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for PommesError();
  uint64_t v8 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  TTResponseMessage.tcuMappedNLResponse.getter();
  uint64_t v14 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  }
  else
  {
    uint64_t v29 = TCUMappedNLResponse.tcuId.getter();
    uint64_t v30 = v2;
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    uint64_t v18 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
    uint64_t v20 = v19;
    uint64_t v21 = v8;
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FA23D8], v35);
    uint64_t v22 = v31;
    uint64_t v23 = v32;
    (*(void (**)(char *, void, uint64_t))(v31 + 104))(v7, *MEMORY[0x1E4F9FE98], v32);
    TRPCandidateRequestMessageBase.userId.getter();
    uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *))(class metadata base offset for PommesBridgeRequestProcessor + *v34 + 552))(v18, v20, v29, v17, v10, v7, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v30);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v23);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v35);
    if (v24)
    {
      RequestProcessorBase.messagePublisher.getter();
      __swift_project_boxed_opaque_existential_1(v36, v36[3]);
      dispatch thunk of MessagePublishing.postMessage(_:)();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      return;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_1C8F83000, v26, v27, "PommesBridgeRequestProcessor failed to build noQuery message", v28, 2u);
    MEMORY[0x1CB77E470](v28, -1, -1);
  }
}

uint64_t PommesBridgeRequestProcessor.handleResultSelectedMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v53 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v54 = (uint64_t)&v47 - v7;
  uint64_t v8 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v55 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for PommesCandidateId();
  uint64_t v11 = *(void *)(v56 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v56);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (uint64_t *)((char *)&v47 - v15);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  id v19 = a1;
  uint64_t v51 = v18;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v52 = v14;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v48 = v8;
    uint64_t v24 = (uint8_t *)v23;
    uint64_t v25 = swift_slowAlloc();
    id v49 = v2;
    uint64_t v47 = (void *)v25;
    uint64_t v50 = v11;
    *(_DWORD *)uint64_t v24 = 138412290;
    v57[0] = v19;
    uint64_t v26 = v10;
    id v27 = v19;
    uint64_t v11 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v28 = v47;
    *uint64_t v47 = v19;

    uint64_t v10 = v26;
    _os_log_impl(&dword_1C8F83000, v20, v21, "PommesBridge handling resultSelectedMessage: %@", v24, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v2 = v49;
    MEMORY[0x1CB77E470](v28, -1, -1);
    uint64_t v29 = v24;
    uint64_t v8 = v48;
    MEMORY[0x1CB77E470](v29, -1, -1);
  }
  else
  {
  }
  *uint64_t v16 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v16[1] = v30;
  uint64_t v31 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(v11 + 104))(v16, *MEMORY[0x1E4F9FE50], v56);
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 120))(v31);
  uint64_t v33 = v55;
  if (*(void *)(v32 + 16))
  {
    unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
    uint64_t v35 = v54;
    if (v36)
    {
      outlined init with copy of PommesBridgeResultCandidateState.ParseState(*(void *)(v32 + 56) + *(void *)(v33 + 72) * v34, v54, type metadata accessor for PommesBridgeResultCandidateState);
      uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56);
      v37(v35, 0, 1, v8);
    }
    else
    {
      uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56);
      v37(v54, 1, 1, v8);
    }
  }
  else
  {
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56);
    uint64_t v35 = v54;
    v37(v54, 1, 1, v8);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v35, 1, v8) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&dword_1C8F83000, v38, v39, "ResultSelectedMessage received before setting Pommes RC state", v40, 2u);
      MEMORY[0x1CB77E470](v40, -1, -1);
    }
  }
  else
  {
    outlined init with take of NLXResultCandidate(v35, (uint64_t)v10, type metadata accessor for PommesBridgeResultCandidateState);
    v10[*(int *)(v8 + 44)] = 1;
    uint64_t v41 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t *, uint64_t))(v11 + 16))(v52, v16, v56);
    uint64_t v42 = v53;
    outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v10, v53, type metadata accessor for PommesBridgeResultCandidateState);
    v37(v42, 0, 1, v8);
    os_log_type_t v43 = (void (*)(void *, void))(*(uint64_t (**)(void *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v2
                                                                                     + 136))(v57);
    specialized Dictionary.subscript.setter(v42, v41);
    v43(v57, 0);
    if ((*(uint64_t (**)(char *))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 448))(v10))
    {
      PommesBridgeResultCandidateState.pommesCandidateId.getter(v41);
      (*(void (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 456))(v41);
      BOOL v44 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      uint64_t v45 = v56;
      v44(v41, v56);
      outlined destroy of NLXResultCandidate((uint64_t)v10, type metadata accessor for PommesBridgeResultCandidateState);
      return ((uint64_t (*)(uint64_t *, uint64_t))v44)(v16, v45);
    }
    outlined destroy of NLXResultCandidate((uint64_t)v10, type metadata accessor for PommesBridgeResultCandidateState);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 8))(v16, v56);
}

uint64_t PommesBridgeRequestProcessor.handleFallbackToPommesMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UserID();
  uint64_t v105 = *(void *)(v4 - 8);
  uint64_t v106 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v102 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PommesSearchReason();
  uint64_t v103 = *(void *)(v6 - 8);
  uint64_t v104 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v101 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v98 = (uint64_t)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v107 = (uint64_t)&v95 - v11;
  uint64_t v109 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v12 = *(char **)(v109 - 8);
  MEMORY[0x1F4188790](v109);
  uint64_t v14 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PommesCandidateId();
  uint64_t v111 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v99 = (uint64_t)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  id v19 = (char *)&v95 - v18;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v108 = v12;
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  id v22 = a1;
  uint64_t v110 = v21;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  id v112 = v22;
  if (v25)
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    v116[0] = v27;
    uint64_t v100 = v14;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v97 = v15;
    uint64_t v96 = v2;
    uint64_t v28 = FallbackToPommesMessage.delegatedUserDialogActs.getter();
    uint64_t v29 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v30 = v19;
    uint64_t v31 = MEMORY[0x1CB77CDC0](v28, v29);
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    uint64_t v34 = v31;
    id v19 = v30;
    v115[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v33, v116);
    uint64_t v2 = v96;
    uint64_t v15 = v97;
    uint64_t v14 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v23, v24, "PommesBridgeRequestProcessor received FallbackToPommesMessage with DUDAs: %s", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v27, -1, -1);
    MEMORY[0x1CB77E470](v26, -1, -1);
  }
  else
  {
  }
  FallbackToPommesMessage.pommesCandidateId.getter();
  uint64_t v35 = *(void *)((char *)v2 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
  uint64_t v36 = RequestProcessorBase.requestId.getter();
  uint64_t v38 = v37;
  uint64_t v39 = RequestProcessorBase.rootLevelRequestId.getter();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v35 + 128))(v19, v36, v38, v39, v40);
  swift_bridgeObjectRelease();
  uint64_t v41 = swift_bridgeObjectRelease();
  uint64_t v42 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 120))(v41);
  os_log_type_t v43 = (int *)v109;
  if (*(void *)(v42 + 16))
  {
    unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19);
    uint64_t v46 = v107;
    uint64_t v45 = v108;
    if (v47)
    {
      outlined init with copy of PommesBridgeResultCandidateState.ParseState(*(void *)(v42 + 56) + *((void *)v108 + 9) * v44, v107, type metadata accessor for PommesBridgeResultCandidateState);
      uint64_t v48 = (void (*)(uint64_t, uint64_t, uint64_t, int *))*((void *)v45 + 7);
      v48(v46, 0, 1, v43);
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v46 = v107;
    uint64_t v45 = v108;
  }
  uint64_t v48 = (void (*)(uint64_t, uint64_t, uint64_t, int *))*((void *)v45 + 7);
  v48(v46, 1, 1, v43);
LABEL_11:
  swift_bridgeObjectRelease();
  if ((*((unsigned int (**)(uint64_t, uint64_t, int *))v45 + 6))(v46, 1, v43) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    swift_retain_n();
    id v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      v116[0] = v52;
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v53 = RequestProcessorBase.requestId.getter();
      v115[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v49, v50, "Do not have prior state for this FallbackToPommesMessage for requestId: %s", v51, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v52, -1, -1);
      MEMORY[0x1CB77E470](v51, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v77 = v103;
    uint64_t v76 = v104;
    uint64_t v78 = (uint64_t)v101;
    (*(void (**)(char *, void, uint64_t))(v103 + 104))(v101, *MEMORY[0x1E4F9FE90], v104);
    uint64_t v79 = (uint64_t)v102;
    FallbackToPommesMessage.userId.getter();
    PommesBridgeRequestProcessor.publishNoQueryErrorMessage(pommesCandidateId:searchReason:userId:)((uint64_t)v19, v78, v79);
    (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v79, v106);
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v78, v76);
    return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v19, v15);
  }
  else
  {
    outlined init with take of NLXResultCandidate(v46, (uint64_t)v14, type metadata accessor for PommesBridgeResultCandidateState);
    if (specialized PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)((uint64_t)v14))
    {
      v14[v43[10]] = 0;
      v14[v43[12]] = 1;
      uint64_t v55 = *(void (**)(uint64_t, char *, uint64_t))(v111 + 16);
      uint64_t v56 = v99;
      uint64_t v108 = v19;
      v55(v99, v19, v15);
      uint64_t v57 = v98;
      outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v14, v98, type metadata accessor for PommesBridgeResultCandidateState);
      v48(v57, 0, 1, v43);
      uint64_t v58 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                         + *v2
                                                                                         + 136))(v116);
      specialized Dictionary.subscript.setter(v57, v56);
      v58(v116, 0);
      id v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.debug.getter();
      BOOL v61 = os_log_type_enabled(v59, v60);
      uint64_t v100 = v14;
      if (v61)
      {
        os_log_type_t v62 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        v116[0] = v63;
        *(_DWORD *)os_log_type_t v62 = 136315138;
        swift_beginAccess();
        os_log_type_t v43 = (int *)v109;
        uint64_t v64 = PommesBridgeResultCandidateState.description.getter();
        v115[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v59, v60, "Fetched %s", v62, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v63, -1, -1);
        MEMORY[0x1CB77E470](v62, -1, -1);
      }

      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = (uint8_t *)swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        v116[0] = v69;
        *(_DWORD *)uint64_t v68 = 136315138;
        id v112 = v68 + 4;
        uint64_t v14 = v100;
        swift_beginAccess();
        id v70 = (uint64_t *)&v14[v43[8]];
        uint64_t v71 = v15;
        unint64_t v72 = v2;
        uint64_t v73 = *v70;
        unint64_t v74 = v70[1];
        swift_bridgeObjectRetain();
        uint64_t v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v2 = v72;
        uint64_t v15 = v71;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v66, v67, "Extracted Pommes query:\n    prState utterance: \"%s\"", v68, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v69, -1, -1);
        MEMORY[0x1CB77E470](v68, -1, -1);

        uint64_t v75 = v108;
      }
      else
      {

        uint64_t v75 = v108;
        uint64_t v14 = v100;
      }
      swift_beginAccess();
      uint64_t v93 = v99;
      PommesBridgeResultCandidateState.pommesCandidateId.getter(v99);
      (*(void (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 456))(v93);
      uint64_t v94 = *(void (**)(uint64_t, uint64_t))(v111 + 8);
      v94(v93, v15);
      v94((uint64_t)v75, v15);
    }
    else
    {
      uint64_t v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v81, v82))
      {
        uint64_t v83 = (uint8_t *)swift_slowAlloc();
        uint64_t v84 = v14;
        uint64_t v85 = swift_slowAlloc();
        v115[0] = v85;
        *(_DWORD *)uint64_t v83 = 136315138;
        uint64_t v108 = v19;
        swift_beginAccess();
        uint64_t v86 = PommesBridgeResultCandidateState.description.getter();
        uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v115);
        id v19 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v81, v82, "Unable to override PommesCandidateResultState's PSC score %s", v83, 0xCu);
        swift_arrayDestroy();
        uint64_t v88 = v85;
        uint64_t v14 = v84;
        MEMORY[0x1CB77E470](v88, -1, -1);
        MEMORY[0x1CB77E470](v83, -1, -1);
      }

      uint64_t v90 = v103;
      uint64_t v89 = v104;
      uint64_t v91 = (uint64_t)v101;
      (*(void (**)(char *, void, uint64_t))(v103 + 104))(v101, *MEMORY[0x1E4F9FE90], v104);
      uint64_t v92 = (uint64_t)v102;
      FallbackToPommesMessage.userId.getter();
      PommesBridgeRequestProcessor.publishNoQueryErrorMessage(pommesCandidateId:searchReason:userId:)((uint64_t)v19, v91, v92);
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v92, v106);
      (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v91, v89);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v19, v15);
    }
    return outlined destroy of NLXResultCandidate((uint64_t)v14, type metadata accessor for PommesBridgeResultCandidateState);
  }
}

void PommesBridgeRequestProcessor.search(pommesCandidateId:)(uint64_t a1)
{
  void (*v91)(long long *__return_ptr);
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t (*v103)(char *, uint64_t, uint64_t);
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  id v114;
  void *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t (*v146)(char *, char *, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t);
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  os_log_type_t v161;
  uint8_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  void *v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void (*v175)(uint64_t, uint64_t (*)(uint64_t, char), uint64_t);
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  NSObject *v181;
  os_log_type_t v182;
  BOOL v183;
  uint64_t v184;
  uint8_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  NSObject *v189;
  os_log_type_t v190;
  uint8_t *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void (*v203)(long long *, void);
  id *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  NSObject *v209;
  os_log_type_t v210;
  uint8_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  NSObject *v229;
  os_log_type_t v230;
  uint8_t *v231;
  uint8_t *v232;
  char *v233;
  uint64_t v234;
  void *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  void v242[3];
  int v243;
  uint64_t v244;
  char *v245;
  char *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  int *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  void (*v277)(uint64_t, void, uint64_t, int *);
  uint64_t v278;
  uint64_t v279;
  void *v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  void *v287;
  long long aBlock;
  long long v289;
  uint64_t (*v290)();
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  long long v294;
  long long v295;

  uint64_t v3 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v4 = *((void *)v3 - 1);
  MEMORY[0x1F4188790](v3);
  v253 = (uint64_t)v242 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v264 = type metadata accessor for PommesSearchEagerInfo(0);
  v266 = *(void *)(v264 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v264);
  v251 = (uint64_t)v242 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  v252 = (uint64_t)v242 - v9;
  MEMORY[0x1F4188790](v8);
  v257 = (uint64_t)v242 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  v263 = (uint64_t)v242 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  v276 = (uint64_t)v242 - v14;
  v262 = type metadata accessor for InsightRequestSummaryLogger();
  v261 = *(void *)(v262 - 8);
  MEMORY[0x1F4188790](v262);
  v260 = (char *)v242 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v274 = type metadata accessor for PommesSearchRequest(0);
  v273 = *(void *)(v274 - 8);
  MEMORY[0x1F4188790](v274);
  v275 = (uint64_t)v242 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  v272 = (char *)v242 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  v282 = (uint64_t)v242 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1F4188790](v21 - 8);
  v281 = (char *)v242 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for PommesContext();
  v280 = *(void **)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  v255 = (char *)v242 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1F4188790](v25 - 8);
  v256 = (uint64_t)v242 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v27 - 8);
  v246 = (char *)v242 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x1F4188790](v29 - 8);
  uint64_t v31 = (char *)v242 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v249 = *(void *)(v248 - 8);
  MEMORY[0x1F4188790](v248);
  v245 = (char *)v242 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v270);
  v271 = (char *)v242 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v269 = type metadata accessor for ConversationSessionKey();
  v268 = *(void **)(v269 - 8);
  MEMORY[0x1F4188790](v269);
  v267 = (uint64_t)v242 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v258);
  v250 = (int *)((char *)v242 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v284 = type metadata accessor for UserID();
  v283 = *(void *)(v284 - 8);
  MEMORY[0x1F4188790](v284);
  v286 = (char *)v242 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for PommesCandidateId();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)v242 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v39);
  v279 = (uint64_t)v242 - v42;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  uint64_t v44 = MEMORY[0x1F4188790](v43 - 8);
  v278 = (uint64_t)v242 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v48 = (char *)v242 - v47;
  id v49 = *(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 120);
  v287 = v1;
  uint64_t v50 = v49(v46);
  uint64_t v51 = *(void *)(v50 + 16);
  v285 = a1;
  v247 = v31;
  if (v51 && (unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v53 & 1) != 0))
  {
    uint64_t v54 = v23;
    outlined init with copy of PommesBridgeResultCandidateState.ParseState(*(void *)(v50 + 56) + *(void *)(v4 + 72) * v52, (uint64_t)v48, type metadata accessor for PommesBridgeResultCandidateState);
    uint64_t v55 = *(void (**)(uint64_t, void, uint64_t, int *))(v4 + 56);
    uint64_t v56 = v48;
    uint64_t v57 = 0;
  }
  else
  {
    uint64_t v54 = v23;
    uint64_t v55 = *(void (**)(uint64_t, void, uint64_t, int *))(v4 + 56);
    uint64_t v56 = v48;
    uint64_t v57 = 1;
  }
  v277 = v55;
  v55((uint64_t)v56, v57, 1, v3);
  swift_bridgeObjectRelease();
  uint64_t v58 = swift_allocBox();
  uint64_t v60 = v59;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v4 + 48))(v48, 1, v3) != 1)
  {
    v265 = v58;
    outlined init with take of NLXResultCandidate((uint64_t)v48, v60, type metadata accessor for PommesBridgeResultCandidateState);
    *(unsigned char *)(v60 + v3[9]) = 1;
    uint64_t v68 = v279;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v279, v285, v37);
    uint64_t v69 = v278;
    outlined init with copy of PommesBridgeResultCandidateState.ParseState(v60, v278, type metadata accessor for PommesBridgeResultCandidateState);
    v242[2] = v4 + 56;
    v277(v69, 0, 1, v3);
    id v70 = v287;
    uint64_t v71 = *(uint64_t (**)(long long *))(class metadata base offset for PommesBridgeRequestProcessor
                                               + *v287
                                               + 136);
    v242[1] = class metadata base offset for PommesBridgeRequestProcessor + *v287 + 136;
    v242[0] = v71;
    unint64_t v72 = (void (*)(long long *, void))v71(&aBlock);
    specialized Dictionary.subscript.setter(v69, v68);
    v72(&aBlock, 0);
    uint64_t v73 = (uint64_t *)(v60 + v3[8]);
    uint64_t v74 = v73[1];
    v259 = *v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v283 + 16))(v286, v60 + v3[5], v284);
    uint64_t v75 = v3[13];
    int v76 = *(unsigned __int8 *)(v60 + v3[12]);
    v254 = v60;
    BOOL v77 = *(unsigned char *)(v60 + v75) == 1;
    v244 = v75;
    if (v77)
    {
      uint64_t v78 = one-time initialization token for pommes;
      swift_bridgeObjectRetain();
      uint64_t v79 = v54;
      if (v78 != -1) {
        swift_once();
      }
      uint64_t v80 = type metadata accessor for Logger();
      __swift_project_value_buffer(v80, (uint64_t)static Logger.pommes);
      uint64_t v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v81, v82)) {
        goto LABEL_17;
      }
      uint64_t v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v83 = 0;
      uint64_t v84 = "Handling request for gesture based RC";
    }
    else
    {
      uint64_t v85 = *(void *)((char *)v70 + direct field offset for PommesBridgeRequestProcessor.aceInputOrigin + 8);
      uint64_t v79 = v54;
      if (!v85)
      {
        swift_bridgeObjectRetain();
        goto LABEL_27;
      }
      uint64_t v86 = *(void *)((char *)v70 + direct field offset for PommesBridgeRequestProcessor.aceInputOrigin);
      if (v86 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v85 == v87)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if ((v88 & 1) == 0) {
          goto LABEL_27;
        }
      }
      if (objc_msgSend(self, sel_isIntuitiveConversationAnnounceEnabled))
      {
LABEL_27:
        v250 = v3;
        v258 = v74;
        v270 = swift_allocBox();
        uint64_t v90 = v89;
        uint64_t v91 = *(void (**)(long long *__return_ptr))(class metadata base offset for PommesBridgeRequestProcessor
                                                            + *v70
                                                            + 144);
        v91(&aBlock);
        uint64_t v243 = v76;
        if (*((void *)&v289 + 1))
        {
          outlined init with copy of AppDataProviding((uint64_t)&aBlock, (uint64_t)&v292);
          outlined destroy of MediaUserStateCenter?((uint64_t)&aBlock, &demangling cache variable for type metadata for ConversationSessionState?);
          __swift_project_boxed_opaque_existential_1(&v292, v293);
          uint64_t v92 = v268;
          uint64_t v93 = v79;
          uint64_t v94 = v90;
          uint64_t v95 = v267;
          uint64_t v96 = v269;
          ((void (*)(uint64_t, void, uint64_t))v268[13])(v267, *MEMORY[0x1E4FA2628], v269);
          dispatch thunk of ConversationSessionState.value(forKey:userId:)();
          uint64_t v97 = v95;
          uint64_t v90 = v94;
          uint64_t v79 = v93;
          ((void (*)(uint64_t, uint64_t))v92[1])(v97, v96);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v292);
          if (*((void *)&v295 + 1))
          {
            uint64_t v98 = swift_dynamicCast();
            uint64_t v99 = v280;
            ((void (*)(uint64_t, void, uint64_t, uint64_t))v280[7])(v90, v98 ^ 1u, 1, v93);
            goto LABEL_32;
          }
        }
        else
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)&aBlock, &demangling cache variable for type metadata for ConversationSessionState?);
          v294 = 0u;
          v295 = 0u;
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)&v294, (uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v99 = v280;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v280[7])(v90, 1, 1, v79);
LABEL_32:
        uint64_t v100 = v90;
        uint64_t v101 = v90;
        uint64_t v102 = v271;
        outlined init with copy of MediaUserStateCenter?(v100, (uint64_t)v271, &demangling cache variable for type metadata for PommesContext?);
        uint64_t v103 = (uint64_t (*)(char *, uint64_t, uint64_t))v99[6];
        uint64_t v104 = v103(v102, 1, v79);
        uint64_t v105 = (uint64_t)v102;
        uint64_t v106 = v101;
        uint64_t v107 = outlined destroy of MediaUserStateCenter?(v105, &demangling cache variable for type metadata for PommesContext?);
        if (v104 == 1) {
          goto LABEL_40;
        }
        ((void (*)(long long *__return_ptr, uint64_t))v91)(&aBlock, v107);
        if (*((void *)&v289 + 1))
        {
          outlined init with copy of AppDataProviding((uint64_t)&aBlock, (uint64_t)&v292);
          outlined destroy of MediaUserStateCenter?((uint64_t)&aBlock, &demangling cache variable for type metadata for ConversationSessionState?);
          uint64_t v108 = v79;
          __swift_project_boxed_opaque_existential_1(&v292, v293);
          uint64_t v109 = v268;
          uint64_t v110 = v267;
          uint64_t v111 = v269;
          ((void (*)(uint64_t, void, uint64_t))v268[13])(v267, *MEMORY[0x1E4FA2658], v269);
          dispatch thunk of ConversationSessionState.value(forKey:userId:)();
          id v112 = v110;
          uint64_t v106 = v101;
          ((void (*)(uint64_t, uint64_t))v109[1])(v112, v111);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v292);
          if (*((void *)&v295 + 1))
          {
            type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
            if (swift_dynamicCast())
            {
              uint64_t v113 = (char *)aBlock;
              uint64_t v114 = objc_msgSend((id)aBlock, sel_promptContextProto);
              if (v114)
              {
                uint64_t v115 = v114;
                v271 = v113;
                char v116 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v118 = v117;

                v290 = 0;
                aBlocuint64_t k = 0u;
                v289 = 0u;
                outlined copy of Data._Representation(v116, v118);
                BinaryDecodingOptions.init()();
                lazy protocol witness table accessor for type UserID and conformance UserID((unint64_t *)&lazy protocol witness table cache variable for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext, MEMORY[0x1E4FA2B58]);
                uint64_t v119 = v247;
                uint64_t v120 = v248;
                Message.init(serializedData:extensions:partial:options:)();
                uint64_t v227 = v249;
                (*(void (**)(char *, void, uint64_t, uint64_t))(v249 + 56))(v119, 0, 1, v120);
                (*(void (**)(char *, char *, uint64_t))(v227 + 32))(v245, v119, v120);
                if (one-time initialization token for pommes != -1) {
                  swift_once();
                }
                v228 = type metadata accessor for Logger();
                __swift_project_value_buffer(v228, (uint64_t)static Logger.pommes);
                v229 = Logger.logObject.getter();
                uint64_t v230 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v229, v230))
                {
                  uint64_t v231 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v231 = 0;
                  _os_log_impl(&dword_1C8F83000, v229, v230, "Adding promptContext to PommesContext", v231, 2u);
                  uint64_t v232 = v231;
                  uint64_t v120 = v248;
                  MEMORY[0x1CB77E470](v232, -1, -1);
                }

                if (v103((char *)v106, 1, v108))
                {
                  (*(void (**)(char *, uint64_t))(v249 + 8))(v245, v120);

                  outlined consume of Data._Representation(v116, v118);
                }
                else
                {
                  v233 = v245;
                  PommesContext.update(with:)();

                  outlined consume of Data._Representation(v116, v118);
                  (*(void (**)(char *, uint64_t))(v249 + 8))(v233, v120);
                }
                uint64_t v79 = v108;
              }
              else
              {
              }
            }
LABEL_40:
            uint64_t v121 = v103((char *)v106, 1, v79);
            uint64_t v122 = MEMORY[0x1E4FBC860];
            int v123 = MEMORY[0x1E4FBC860];
            uint64_t v124 = v282;
            uint64_t v125 = (uint64_t)v281;
            uint64_t v126 = v287;
            if (!v121)
            {
              os_log_type_t v127 = v280;
              uint64_t v128 = v255;
              ((void (*)(char *, uint64_t, uint64_t))v280[2])(v255, v106, v79);
              uint64_t v129 = v79;
              uint64_t v130 = v256;
              PommesContext.exportLegacyNLContext()();
              ((void (*)(char *, uint64_t))v127[1])(v128, v129);
              unint64_t v131 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
              uint64_t v132 = *(void *)(v131 - 8);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131) == 1)
              {
                outlined destroy of MediaUserStateCenter?(v130, &demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
                int v123 = MEMORY[0x1E4FBC860];
              }
              else
              {
                int v123 = MEMORY[0x1CB779A00]();
                (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v130, v131);
              }
            }
            if (*(unsigned char *)(v254 + v244) == 1)
            {
              unint64_t v133 = *(void *)(v123 + 16);
              swift_bridgeObjectRelease();
              uint64_t v134 = v265;
              if (!v133)
              {
                if (one-time initialization token for pommes != -1) {
                  swift_once();
                }
                uint64_t v135 = type metadata accessor for Logger();
                __swift_project_value_buffer(v135, (uint64_t)static Logger.pommes);
                uint64_t v136 = Logger.logObject.getter();
                uint64_t v137 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v136, v137))
                {
                  os_log_type_t v138 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)os_log_type_t v138 = 0;
                  _os_log_impl(&dword_1C8F83000, v136, v137, "POMMES might not be expecting a confirmation, continuing to use the gesture based RC", v138, 2u);
                  MEMORY[0x1CB77E470](v138, -1, -1);
                }
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v134 = v265;
            }
            if (*(void *)((char *)v126 + direct field offset for PommesBridgeRequestProcessor.pommesRequestContext))
            {
              unint64_t v139 = *(void *)((char *)v126 + direct field offset for PommesBridgeRequestProcessor.pommesRequestContext);
            }
            else
            {
              v271 = (char *)RequestProcessorBase.assistantId.getter();
              v269 = v140;
              uint64_t v141 = type metadata accessor for UUID();
              v280 = v242;
              unint64_t v142 = *(void **)(v141 - 8);
              uint64_t v143 = v142[8];
              MEMORY[0x1F4188790](v141);
              uint64_t v144 = (char *)v242 - ((v143 + 15) & 0xFFFFFFFFFFFFFFF0);
              RequestProcessorBase.sessionId.getter();
              v267 = RequestProcessorBase.requestId.getter();
              v256 = v145;
              v268 = v242;
              MEMORY[0x1F4188790](v267);
              uint64_t v146 = (uint64_t (*)(char *, char *, uint64_t))v142[2];
              uint64_t v147 = v146(v144, v144, v141);
              v255 = (char *)v242;
              MEMORY[0x1F4188790](v147);
              v146(v144, v144, v141);
              uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
              MEMORY[0x1F4188790](v148 - 8);
              uint64_t v150 = (char *)v242 - ((v149 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v151 = type metadata accessor for DateInterval();
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v151 - 8) + 56))(v150, 1, 1, v151);
              type metadata accessor for PommesRequestContext();
              swift_allocObject();
              uint64_t v239 = v150;
              uint64_t v126 = v287;
              uint64_t v152 = v282;
              unint64_t v139 = PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)((uint64_t)v271, v269, (uint64_t)v144, v267, v256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v122, (uint64_t)v239, v122);
              uint64_t v153 = (void (*)(char *, uint64_t))v142[1];
              uint64_t v134 = v265;
              v153(v144, v141);
              uint64_t v125 = (uint64_t)v281;
              uint64_t v154 = v144;
              uint64_t v124 = v152;
              v153(v154, v141);
            }
            uint64_t v155 = (uint64_t)v272;
            if (*(void *)((char *)v126 + direct field offset for PommesBridgeRequestProcessor.aceInputOrigin + 8))
            {
              swift_retain();
              swift_bridgeObjectRetain();
              uint64_t v156 = InputOrigin.init(aceValue:)();
            }
            else
            {
              id v157 = type metadata accessor for InputOrigin();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v157 - 8) + 56))(v125, 1, 1, v157);
              uint64_t v156 = swift_retain();
            }
            MEMORY[0x1F4188790](v156);
            uint64_t v158 = v258;
            v242[-10] = v259;
            v242[-9] = v158;
            uint64_t v234 = v134;
            v235 = v126;
            uint64_t v236 = v286;
            v237 = v139;
            v238 = v270;
            uint64_t v239 = (char *)v125;
            LOBYTE(v240) = v243;
            uint64_t v241 = v285;
            PommesSearchRequest.init(_:)((void (*)(void *))partial apply for closure #3 in PommesBridgeRequestProcessor.search(pommesCandidateId:), v124);
            outlined init with copy of MediaUserStateCenter?(v124, v155, &demangling cache variable for type metadata for PommesSearchRequest?);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v273 + 48))(v155, 1, v274) == 1)
            {
              swift_bridgeObjectRelease();
              outlined destroy of MediaUserStateCenter?(v155, &demangling cache variable for type metadata for PommesSearchRequest?);
              if (one-time initialization token for pommes != -1) {
                swift_once();
              }
              uint64_t v159 = type metadata accessor for Logger();
              __swift_project_value_buffer(v159, (uint64_t)static Logger.pommes);
              uint64_t v160 = Logger.logObject.getter();
              uint64_t v161 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v160, v161))
              {
                uint64_t v162 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v162 = 0;
                _os_log_impl(&dword_1C8F83000, v160, v161, "Unable to construct PommesSearchRequest! Search will not complete", v162, 2u);
                MEMORY[0x1CB77E470](v162, -1, -1);
              }

              swift_release();
              uint64_t v163 = v124;
            }
            else
            {
              v285 = v139;
              uint64_t v164 = v275;
              outlined init with take of NLXResultCandidate(v155, v275, type metadata accessor for PommesSearchRequest);
              if (one-time initialization token for insightRequestSummaryLogger != -1) {
                swift_once();
              }
              uint64_t v165 = v262;
              uint64_t v166 = __swift_project_value_buffer(v262, (uint64_t)static Logger.insightRequestSummaryLogger);
              v167 = v261;
              uint64_t v168 = v260;
              (*(void (**)(char *, uint64_t, uint64_t))(v261 + 16))(v260, v166, v165);
              uint64_t v169 = (void *)swift_allocObject();
              unint64_t v170 = v287;
              v169[2] = v287;
              v169[3] = v134;
              uint64_t v171 = v258;
              v169[4] = v259;
              v169[5] = v171;
              swift_retain();
              swift_retain();
              InsightRequestSummaryLogger.emitDebug(_:)();
              swift_release();
              (*(void (**)(char *, uint64_t))(v167 + 8))(v168, v165);
              os_log_type_t v172 = *(void *)((char *)v170 + direct field offset for PommesBridgeRequestProcessor.pommesSearch);
              uint64_t v173 = swift_allocObject();
              swift_weakInit();
              uint64_t v174 = swift_allocObject();
              *(void *)(v174 + 16) = v173;
              *(void *)(v174 + 24) = v134;
              uint64_t v175 = *(void (**)(uint64_t, uint64_t (*)(uint64_t, char), uint64_t))(*(void *)v172 + 240);
              swift_retain();
              swift_retain();
              unint64_t v176 = v276;
              v175(v164, partial apply for closure #4 in PommesBridgeRequestProcessor.search(pommesCandidateId:), v174);
              swift_release();
              swift_release();
              v177 = v263;
              outlined init with copy of MediaUserStateCenter?(v176, v263, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
              os_log_type_t v178 = v264;
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v266 + 48))(v177, 1, v264) != 1)
              {
                v186 = v257;
                outlined init with take of NLXResultCandidate(v177, v257, type metadata accessor for PommesSearchEagerInfo);
                if (one-time initialization token for pommes != -1) {
                  swift_once();
                }
                uint64_t v187 = type metadata accessor for Logger();
                __swift_project_value_buffer(v187, (uint64_t)static Logger.pommes);
                uint64_t v188 = v252;
                outlined init with copy of PommesBridgeResultCandidateState.ParseState(v186, v252, type metadata accessor for PommesSearchEagerInfo);
                uint64_t v189 = Logger.logObject.getter();
                uint64_t v190 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v189, v190))
                {
                  v191 = (uint8_t *)swift_slowAlloc();
                  v192 = swift_slowAlloc();
                  *(void *)&aBlocuint64_t k = v192;
                  *(_DWORD *)v191 = 136315138;
                  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v188, v251, type metadata accessor for PommesSearchEagerInfo);
                  uint64_t v193 = String.init<A>(describing:)();
                  v292 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v193, v194, (uint64_t *)&aBlock);
                  v186 = v257;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  uint64_t v125 = (uint64_t)v281;
                  swift_bridgeObjectRelease();
                  outlined destroy of NLXResultCandidate(v188, type metadata accessor for PommesSearchEagerInfo);
                  _os_log_impl(&dword_1C8F83000, v189, v190, "Updating prState with eager search information: %s", v191, 0xCu);
                  swift_arrayDestroy();
                  MEMORY[0x1CB77E470](v192, -1, -1);
                  MEMORY[0x1CB77E470](v191, -1, -1);
                }
                else
                {
                  outlined destroy of NLXResultCandidate(v188, type metadata accessor for PommesSearchEagerInfo);
                }

                uint64_t v195 = v178;
                uint64_t v196 = v254;
                swift_beginAccess();
                v197 = v196;
                uint64_t v198 = v253;
                outlined init with copy of PommesBridgeResultCandidateState.ParseState(v197, v253, type metadata accessor for PommesBridgeResultCandidateState);
                uint64_t v199 = (uint64_t)v250;
                v200 = v198 + v250[14];
                outlined destroy of MediaUserStateCenter?(v200, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
                outlined init with copy of PommesBridgeResultCandidateState.ParseState(v186, v200, type metadata accessor for PommesSearchEagerInfo);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v266 + 56))(v200, 0, 1, v195);
                char v201 = v279;
                PommesBridgeResultCandidateState.pommesCandidateId.getter(v279);
                v202 = v278;
                outlined init with copy of PommesBridgeResultCandidateState.ParseState(v198, v278, type metadata accessor for PommesBridgeResultCandidateState);
                v277(v202, 0, 1, (int *)v199);
                v203 = (void (*)(long long *, void))((uint64_t (*)(long long *))v242[0])(&aBlock);
                specialized Dictionary.subscript.setter(v202, v201);
                v203(&aBlock, 0);
                swift_release();
                outlined destroy of NLXResultCandidate(v186, type metadata accessor for PommesSearchEagerInfo);
                outlined destroy of MediaUserStateCenter?(v276, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
                outlined destroy of NLXResultCandidate(v275, type metadata accessor for PommesSearchRequest);
                outlined destroy of MediaUserStateCenter?(v282, &demangling cache variable for type metadata for PommesSearchRequest?);
                outlined destroy of MediaUserStateCenter?(v125, &demangling cache variable for type metadata for InputOrigin?);
                (*(void (**)(char *, uint64_t))(v283 + 8))(v286, v284);
                outlined destroy of NLXResultCandidate(v198, type metadata accessor for PommesBridgeResultCandidateState);
                goto LABEL_79;
              }
              outlined destroy of MediaUserStateCenter?(v177, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
              v179 = v282;
              if (one-time initialization token for pommes != -1) {
                swift_once();
              }
              uint64_t v180 = type metadata accessor for Logger();
              __swift_project_value_buffer(v180, (uint64_t)static Logger.pommes);
              v181 = Logger.logObject.getter();
              uint64_t v182 = static os_log_type_t.debug.getter();
              unint64_t v183 = os_log_type_enabled(v181, v182);
              uint64_t v184 = v275;
              if (v183)
              {
                uint64_t v185 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v185 = 0;
                _os_log_impl(&dword_1C8F83000, v181, v182, "No eager information available at POMMES search start", v185, 2u);
                MEMORY[0x1CB77E470](v185, -1, -1);
              }

              swift_release();
              outlined destroy of MediaUserStateCenter?(v276, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
              outlined destroy of NLXResultCandidate(v184, type metadata accessor for PommesSearchRequest);
              uint64_t v163 = v179;
            }
            outlined destroy of MediaUserStateCenter?(v163, &demangling cache variable for type metadata for PommesSearchRequest?);
            outlined destroy of MediaUserStateCenter?(v125, &demangling cache variable for type metadata for InputOrigin?);
            (*(void (**)(char *, uint64_t))(v283 + 8))(v286, v284);
LABEL_79:
            swift_release();
LABEL_80:
            swift_release();
            return;
          }
        }
        else
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)&aBlock, &demangling cache variable for type metadata for ConversationSessionState?);
          v294 = 0u;
          v295 = 0u;
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)&v294, (uint64_t *)&demangling cache variable for type metadata for Any?);
        goto LABEL_40;
      }
      v204 = (id *)v250;
      outlined init with copy of PommesBridgeResultCandidateState.ParseState(v254, (uint64_t)v250, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        swift_bridgeObjectRelease();
        outlined destroy of NLXResultCandidate((uint64_t)v204, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
        v207 = v265;
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v208 = type metadata accessor for Logger();
        __swift_project_value_buffer(v208, (uint64_t)static Logger.pommes);
        v209 = Logger.logObject.getter();
        uint64_t v210 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v209, v210))
        {
          v211 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v211 = 0;
          _os_log_impl(&dword_1C8F83000, v209, v210, "Pommes doesn't handle request for clientGenerated inputOrigin when intuitive conversation announce feature flag is disabled", v211, 2u);
          MEMORY[0x1CB77E470](v211, -1, -1);
        }

        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
        uint64_t v212 = type metadata accessor for DispatchQoS.QoSClass();
        uint64_t v213 = *(void *)(v212 - 8);
        MEMORY[0x1F4188790](v212);
        uint64_t v215 = (char *)v242 - ((v214 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *, void, uint64_t))(v213 + 104))(v215, *MEMORY[0x1E4FBCB40], v212);
        v285 = static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v213 + 8))(v215, v212);
        uint64_t v216 = swift_allocObject();
        swift_weakInit();
        uint64_t v217 = swift_allocObject();
        *(void *)(v217 + 16) = v216;
        *(void *)(v217 + 24) = v207;
        v290 = partial apply for closure #1 in PommesBridgeRequestProcessor.search(pommesCandidateId:);
        v291 = v217;
        *(void *)&aBlocuint64_t k = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&v289 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        *((void *)&v289 + 1) = &block_descriptor_12;
        uint64_t v218 = _Block_copy(&aBlock);
        v282 = type metadata accessor for DispatchQoS();
        v287 = v242;
        v219 = *(void *)(v282 - 8);
        MEMORY[0x1F4188790](v282);
        uint64_t v221 = (char *)v242 - ((v220 + 15) & 0xFFFFFFFFFFFFFFF0);
        swift_retain();
        swift_retain();
        static DispatchQoS.unspecified.getter();
        uint64_t v222 = type metadata accessor for DispatchWorkItemFlags();
        v281 = (char *)v242;
        v223 = *(void *)(v222 - 8);
        MEMORY[0x1F4188790](v222);
        uint64_t v225 = (char *)v242 - ((v224 + 15) & 0xFFFFFFFFFFFFFFF0);
        v292 = MEMORY[0x1E4FBC860];
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAEF0]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v226 = (void *)v285;
        MEMORY[0x1CB77D180](0, v221, v225, v218);
        _Block_release(v218);

        (*(void (**)(char *, uint64_t))(v223 + 8))(v225, v222);
        (*(void (**)(char *, uint64_t))(v219 + 8))(v221, v282);
        (*(void (**)(char *, uint64_t))(v283 + 8))(v286, v284);
        swift_release();
        swift_release();
        goto LABEL_80;
      }

      swift_bridgeObjectRelease();
      v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
      outlined destroy of MediaUserStateCenter?((uint64_t)v204 + *(int *)(v205 + 64), &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v206 = type metadata accessor for Logger();
      __swift_project_value_buffer(v206, (uint64_t)static Logger.pommes);
      uint64_t v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v81, v82))
      {
LABEL_17:

        goto LABEL_27;
      }
      uint64_t v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v83 = 0;
      uint64_t v84 = "Allow Pommes to handle SARDRunPOMMESRequest";
    }
    _os_log_impl(&dword_1C8F83000, v81, v82, v84, v83, 2u);
    MEMORY[0x1CB77E470](v83, -1, -1);
    goto LABEL_17;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v48, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  swift_deallocBox();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  __swift_project_value_buffer(v61, (uint64_t)static Logger.pommes);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v41, v285, v37);
  os_log_type_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v64 = (uint8_t *)swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    *(void *)&aBlocuint64_t k = v65;
    *(_DWORD *)uint64_t v64 = 136315138;
    uint64_t v66 = PommesCandidateId.description.getter();
    v292 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v37);
    _os_log_impl(&dword_1C8F83000, v62, v63, "Unable to retrieve mutable prState for pommesCandidateId=%s", v64, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v65, -1, -1);
    MEMORY[0x1CB77E470](v64, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v37);
  }
}

uint64_t closure #1 in PommesBridgeRequestProcessor.search(pommesCandidateId:)()
{
  uint64_t v0 = type metadata accessor for PommesCandidateId();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = &v12[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for PommesBridgeResultCandidateState(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = swift_projectBox();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = (void *)result;
    swift_beginAccess();
    outlined init with copy of PommesBridgeResultCandidateState.ParseState(v7, (uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v3);
    outlined destroy of NLXResultCandidate((uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState);
    lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
    uint64_t v10 = (void *)swift_allocError();
    *uint64_t v11 = 0;
    (*(void (**)(unsigned char *, void *, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor
                                                     + *v9
                                                     + 472))(v3, v10, 1);

    swift_release();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return result;
}

uint64_t closure #3 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11)
{
  v237 = a7;
  uint64_t v238 = a5;
  uint64_t v233 = a3;
  uint64_t v232 = a2;
  uint64_t v224 = a11;
  v242[3] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v207 = (uint64_t)&v190 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v196 = (char *)&v190 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v203 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v199 = *(void *)(v203 - 8);
  MEMORY[0x1F4188790](v203);
  char v201 = (char *)&v190 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = type metadata accessor for SiriUserInput();
  uint64_t v210 = *(void *)(v209 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v209);
  v200 = (char *)&v190 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v202 = (char *)&v190 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v219 = (uint64_t)&v190 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
  uint64_t v26 = MEMORY[0x1F4188790](v25 - 8);
  uint64_t v208 = (uint64_t)&v190 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v218 = (uint64_t)&v190 - v28;
  uint64_t v198 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v29 = MEMORY[0x1F4188790](v198);
  uint64_t v197 = (uint64_t)&v190 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v205 = (uint64_t)&v190 - v32;
  MEMORY[0x1F4188790](v31);
  uint64_t v215 = (uint64_t)&v190 - v33;
  uint64_t v206 = type metadata accessor for NLXResultCandidate();
  uint64_t v34 = MEMORY[0x1F4188790](v206);
  uint64_t v204 = (uint64_t)&v190 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v34);
  uint64_t v216 = (uint64_t *)((char *)&v190 - v36);
  uint64_t v222 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v222);
  uint64_t v223 = (uint64_t)&v190 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v214);
  uint64_t v213 = (uint64_t)&v190 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v230 = type metadata accessor for PommesCandidateId();
  uint64_t v229 = *(void *)(v230 - 8);
  MEMORY[0x1F4188790](v230);
  uint64_t v40 = (char *)&v190 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v231 = type metadata accessor for PommesBridgeResultCandidateState(0);
  MEMORY[0x1F4188790](v231);
  uint64_t v42 = (char *)&v190 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  uint64_t v43 = MEMORY[0x1F4188790](v212);
  uint64_t v211 = (uint64_t)&v190 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v43);
  uint64_t v46 = (char *)&v190 - v45;
  uint64_t v234 = type metadata accessor for UserID();
  uint64_t v47 = *(void *)(v234 - 8);
  MEMORY[0x1F4188790](v234);
  id v49 = (char *)&v190 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v236 = a4;
  uint64_t v221 = swift_projectBox();
  uint64_t v235 = a8;
  uint64_t v227 = swift_projectBox();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  int v228 = a10;
  uint64_t v50 = type metadata accessor for Logger();
  uint64_t v51 = __swift_project_value_buffer(v50, (uint64_t)static Logger.pommes);
  unint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
  uint64_t v226 = a6;
  v52(v49, a6, v234);
  uint64_t v225 = a9;
  outlined init with copy of MediaUserStateCenter?(a9, (uint64_t)v46, &demangling cache variable for type metadata for InputOrigin?);
  swift_retain_n();
  unint64_t v53 = v233;
  swift_bridgeObjectRetain_n();
  uint64_t v54 = v238;
  swift_retain_n();
  uint64_t v55 = v237;
  swift_retain_n();
  swift_retain_n();
  uint64_t v217 = v51;
  uint64_t v56 = Logger.logObject.getter();
  uint64_t v220 = v46;
  uint64_t v57 = v54;
  uint64_t v58 = v56;
  int v59 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v58, (os_log_type_t)v59))
  {
    int v192 = v59;
    uint64_t v194 = v58;
    uint64_t v195 = a1;
    uint64_t v60 = swift_slowAlloc();
    v191 = (void *)swift_slowAlloc();
    uint64_t v193 = swift_slowAlloc();
    v242[0] = v193;
    *(_DWORD *)uint64_t v60 = 136317442;
    swift_bridgeObjectRetain();
    id v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v232, v53, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v60 + 12) = 2080;
    uint64_t v61 = v57;
    uint64_t v62 = v221;
    swift_beginAccess();
    outlined init with copy of PommesBridgeResultCandidateState.ParseState(v62, (uint64_t)v42, type metadata accessor for PommesBridgeResultCandidateState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v40);
    outlined destroy of NLXResultCandidate((uint64_t)v42, type metadata accessor for PommesBridgeResultCandidateState);
    uint64_t v63 = PommesCandidateId.description.getter();
    unint64_t v65 = v64;
    (*(void (**)(char *, uint64_t))(v229 + 8))(v40, v230);
    id v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v65, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v60 + 22) = 1024;
    LODWORD(v63) = *(unsigned __int8 *)(v61 + direct field offset for PommesBridgeRequestProcessor.isMultiUser);
    swift_release();
    LODWORD(v241) = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v60 + 28) = 2080;
    lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
    uint64_t v66 = v234;
    uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
    id v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v66);
    *(_WORD *)(v60 + 38) = 2080;
    id v241 = v237;
    type metadata accessor for PommesRequestContext();
    swift_retain();
    uint64_t v69 = String.init<A>(describing:)();
    id v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v60 + 48) = 2080;
    uint64_t v71 = v227;
    swift_beginAccess();
    outlined init with copy of MediaUserStateCenter?(v71, v213, &demangling cache variable for type metadata for PommesContext?);
    uint64_t v72 = String.init<A>(describing:)();
    id v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v60 + 58) = 2080;
    uint64_t v74 = (uint64_t)v220;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v220, v211, &demangling cache variable for type metadata for InputOrigin?);
    uint64_t v75 = String.init<A>(describing:)();
    id v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v74, &demangling cache variable for type metadata for InputOrigin?);
    *(_WORD *)(v60 + 68) = 2080;
    swift_beginAccess();
    uint64_t v77 = v231;
    id v241 = *(id *)(v62 + *(int *)(v231 + 28));
    id v78 = v241;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AFSpeechPackage?);
    uint64_t v79 = String.init<A>(describing:)();
    id v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v60 + 78) = 1024;
    LODWORD(v241) = v228 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v60 + 84) = 2112;
    swift_beginAccess();
    uint64_t v81 = *(int *)(v77 + 28);
    os_log_type_t v82 = *(void **)(v62 + v81);
    if (v82)
    {
      id v241 = *(id *)(v62 + v81);
      id v83 = v82;
    }
    else
    {
      id v241 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v195;
    uint64_t v85 = v225;
    uint64_t v87 = v194;
    char v88 = v191;
    void *v191 = v82;
    swift_release_n();
    _os_log_impl(&dword_1C8F83000, v87, (os_log_type_t)v192, "Constructing Pommes search request:\n    utterance: \"%s\",\n    %s,\n    isMultiUser: %{BOOL}d,\n    userId=%s,\n    requestContext: %s,\n    pommesContext: %s,\n    inputOrigin: %s,\n    asrSpeechPackage: %s,\n    isFallback=%{BOOL}d,\n    isGestureBased=%@", (uint8_t *)v60, 0x5Eu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v88, -1, -1);
    uint64_t v89 = v193;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v89, -1, -1);
    MEMORY[0x1CB77E470](v60, -1, -1);

    uint64_t v84 = v238;
    unint64_t v53 = v233;
    uint64_t v86 = v237;
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v234);
    swift_release_n();
    swift_release_n();
    outlined destroy of MediaUserStateCenter?((uint64_t)v220, &demangling cache variable for type metadata for InputOrigin?);

    swift_release_n();
    uint64_t v84 = v57;
    uint64_t v85 = v225;
    uint64_t v86 = v55;
    uint64_t v62 = v221;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v232;
  a1[1] = v53;
  uint64_t v90 = (int *)type metadata accessor for PommesSearchRequest.Builder(0);
  uint64_t v91 = (uint64_t)a1 + v90[6];
  outlined destroy of MediaUserStateCenter?(v91, &demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v92 = v229;
  uint64_t v93 = v230;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v229 + 16))(v91, v224, v230);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v92 + 56))(v91, 0, 1, v93);
  uint64_t v94 = RequestProcessorBase.rootLevelRequestId.getter();
  uint64_t v96 = v95;
  uint64_t v97 = (uint64_t *)((char *)a1 + v90[7]);
  swift_bridgeObjectRelease();
  *uint64_t v97 = v94;
  v97[1] = v96;
  *((unsigned char *)a1 + v90[9]) = *(unsigned char *)(v84 + direct field offset for PommesBridgeRequestProcessor.isMultiUser);
  uint64_t v98 = v90[8];
  swift_retain();
  swift_release();
  *(uint64_t *)((char *)a1 + v98) = (uint64_t)v86;
  uint64_t v99 = v227;
  swift_beginAccess();
  uint64_t v100 = (uint64_t)a1 + v90[11];
  outlined destroy of MediaUserStateCenter?(v100, &demangling cache variable for type metadata for PommesContext?);
  outlined init with copy of MediaUserStateCenter?(v99, v100, &demangling cache variable for type metadata for PommesContext?);
  outlined assign with copy of InputOrigin?(v85, (uint64_t)a1 + v90[12], &demangling cache variable for type metadata for InputOrigin?);
  swift_beginAccess();
  uint64_t v101 = v231;
  uint64_t v102 = *(void **)(v62 + *(int *)(v231 + 28));
  uint64_t v103 = (char *)v90[17];
  uint64_t v104 = *(void **)&v103[(void)a1];
  id v105 = v102;

  *(void *)&v103[(void)a1] = v102;
  *((unsigned char *)a1 + v90[18]) = v228 & 1;
  uint64_t v106 = UserID.sharedUserId.getter();
  uint64_t v108 = v107;
  uint64_t v109 = (uint64_t *)((char *)a1 + v90[19]);
  swift_bridgeObjectRelease();
  *uint64_t v109 = v106;
  v109[1] = v108;
  swift_beginAccess();
  *(uint64_t *)((char *)a1 + v90[20]) = *(void *)(v62 + *(int *)(v101 + 24));
  *((unsigned char *)a1 + v90[21]) = *(unsigned char *)(v62 + *(int *)(v101 + 52));
  uint64_t v110 = v223;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v62, v223, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    uint64_t v126 = v216;
    outlined init with take of NLXResultCandidate(v110 + *(int *)(v125 + 48), (uint64_t)v216, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    uint64_t v127 = (uint64_t)v126;
    uint64_t v128 = v204;
    outlined init with copy of PommesBridgeResultCandidateState.ParseState(v127, v204, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    uint64_t v129 = Logger.logObject.getter();
    os_log_type_t v130 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v129, v130))
    {
      unint64_t v131 = (uint8_t *)swift_slowAlloc();
      uint64_t v132 = swift_slowAlloc();
      uint64_t v240 = v132;
      *(_DWORD *)unint64_t v131 = 136315138;
      uint64_t v133 = NLXResultCandidate.description.getter();
      uint64_t v239 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v134, &v240);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of NLXResultCandidate(v128, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
      _os_log_impl(&dword_1C8F83000, v129, v130, "Pommes search request parse detail: %s", v131, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v132, -1, -1);
      MEMORY[0x1CB77E470](v131, -1, -1);
    }
    else
    {
      outlined destroy of NLXResultCandidate(v128, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    }

    uint64_t v150 = v216;
    uint64_t v151 = *v216;
    uint64_t v152 = v90[14];
    swift_bridgeObjectRelease();
    *(uint64_t *)((char *)a1 + v152) = v151;
    uint64_t v153 = v206;
    uint64_t v154 = (void *)((char *)v150 + *(int *)(v206 + 24));
    uint64_t v155 = *v154;
    uint64_t v156 = v154[1];
    id v157 = (uint64_t *)((char *)a1 + v90[16]);
    swift_bridgeObjectRelease();
    *id v157 = v155;
    v157[1] = v156;
    *((unsigned char *)a1 + v90[10]) = 0;
    uint64_t v158 = (uint64_t)v150 + *(int *)(v153 + 20);
    uint64_t v159 = (uint64_t)a1 + v90[15];
    return outlined assign with take of MediaUserStateCenter?(v158, v159, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v136 = *(void **)v110;
    uint64_t v135 = *(void *)(v110 + 8);
    uint64_t v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
    uint64_t v138 = v207;
    outlined init with take of PommesSearchReason?(v110 + *(int *)(v137 + 64), v207, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    uint64_t v139 = v90[14];
    swift_bridgeObjectRelease();
    *(uint64_t *)((char *)a1 + v139) = v135;
    id v140 = objc_msgSend(v136, sel_responseVariantResult);
    if (v140)
    {
      uint64_t v141 = v140;
      uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v144 = v143;
    }
    else
    {

      uint64_t v142 = 0;
      uint64_t v144 = 0;
    }
    uint64_t v180 = (uint64_t *)((char *)a1 + v90[16]);
    swift_bridgeObjectRelease();
    *uint64_t v180 = v142;
    v180[1] = v144;
    *((unsigned char *)a1 + v90[10]) = *(unsigned char *)(v238 + direct field offset for PommesBridgeRequestProcessor.isOnlyUserInHome);
    uint64_t v159 = (uint64_t)a1 + v90[15];
    uint64_t v158 = v138;
    return outlined assign with take of MediaUserStateCenter?(v158, v159, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  }
  v237 = v103;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v112 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  uint64_t v113 = v110 + v112[16];
  uint64_t v114 = v110 + v112[24];
  uint64_t v115 = v110 + v112[28];
  uint64_t v116 = v215;
  outlined init with take of PommesSearchReason?(v113, v215, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  outlined init with take of PommesSearchReason?(v114, v218, &demangling cache variable for type metadata for SiriUserInput?);
  outlined init with take of PommesSearchReason?(v115, v219, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  uint64_t v117 = v205;
  outlined init with copy of MediaUserStateCenter?(v116, v205, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  unint64_t v118 = Logger.logObject.getter();
  os_log_type_t v119 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v118, v119))
  {
    uint64_t v120 = (uint8_t *)swift_slowAlloc();
    uint64_t v121 = swift_slowAlloc();
    uint64_t v240 = v121;
    *(_DWORD *)uint64_t v120 = 136315138;
    outlined init with copy of MediaUserStateCenter?(v117, v197, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    uint64_t v122 = String.init<A>(describing:)();
    uint64_t v239 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v123, &v240);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v117, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    _os_log_impl(&dword_1C8F83000, v118, v119, "Pommes search request parse detail: %s", v120, 0xCu);
    swift_arrayDestroy();
    uint64_t v124 = v121;
    uint64_t v116 = v215;
    MEMORY[0x1CB77E470](v124, -1, -1);
    MEMORY[0x1CB77E470](v120, -1, -1);
  }
  else
  {
    outlined destroy of MediaUserStateCenter?(v117, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  }

  uint64_t v145 = v210;
  uint64_t v146 = v209;
  outlined assign with copy of InputOrigin?(v116, (uint64_t)a1 + v90[13], (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  *((unsigned char *)a1 + v90[10]) = *(unsigned char *)(v238 + direct field offset for PommesBridgeRequestProcessor.isOnlyUserInHome);
  uint64_t v147 = v218;
  uint64_t v148 = v208;
  outlined init with copy of MediaUserStateCenter?(v218, v208, &demangling cache variable for type metadata for SiriUserInput?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v145 + 48))(v148, 1, v146) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v219, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    outlined destroy of MediaUserStateCenter?(v147, &demangling cache variable for type metadata for SiriUserInput?);
    outlined destroy of MediaUserStateCenter?(v116, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    return outlined destroy of MediaUserStateCenter?(v148, &demangling cache variable for type metadata for SiriUserInput?);
  }
  else
  {
    uint64_t v160 = v202;
    (*(void (**)(char *, uint64_t, uint64_t))(v145 + 32))(v202, v148, v146);
    uint64_t v161 = v201;
    PommesBridgeRequestProcessor.buildRewriteMessage(rewriteUtterance:rewriteReason:)(v232, v233, v219);
    uint64_t v162 = (uint64_t)a1 + v90[5];
    outlined destroy of MediaUserStateCenter?(v162, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    uint64_t v163 = v199;
    uint64_t v164 = v161;
    uint64_t v165 = v203;
    (*(void (**)(uint64_t, char *, uint64_t))(v199 + 16))(v162, v164, v203);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v163 + 56))(v162, 0, 1, v165);
    uint64_t v166 = v200;
    (*(void (**)(char *, char *, uint64_t))(v145 + 16))(v200, v160, v146);
    int v167 = (*(uint64_t (**)(char *, uint64_t))(v145 + 88))(v166, v146);
    if (v167 == *MEMORY[0x1E4FA22C0])
    {
      (*(void (**)(char *, uint64_t))(v145 + 96))(v166, v146);
      uint64_t v168 = *(void **)v166;
      uint64_t v169 = v237;
      unint64_t v170 = *(void **)&v237[(void)a1];
      id v171 = v168;

      *(void *)&v169[(void)a1] = v168;
      id v172 = objc_msgSend(v171, sel_recognition);
      if (v172)
      {
        uint64_t v173 = v172;
        uint64_t v174 = AFSpeechRecognition.toAsrHypotheses()();

        uint64_t v175 = *(void *)(v174 + 16);
        uint64_t v176 = type metadata accessor for Siri_Nlu_External_AsrHypothesis();
        uint64_t v177 = *(void *)(v176 - 8);
        if (v175)
        {
          uint64_t v178 = (uint64_t)v196;
          (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v176 - 8) + 16))(v196, v174+ ((*(unsigned __int8 *)(*(void *)(v176 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v176 - 8) + 80)), v176);
          uint64_t v179 = 0;
        }
        else
        {
          uint64_t v179 = 1;
          uint64_t v178 = (uint64_t)v196;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v177 + 56))(v178, v179, 1, v176);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v177 + 48))(v178, 1, v176) == 1)
        {

          (*(void (**)(char *, uint64_t))(v163 + 8))(v201, v203);
          (*(void (**)(char *, uint64_t))(v145 + 8))(v202, v146);
          outlined destroy of MediaUserStateCenter?(v219, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
          outlined destroy of MediaUserStateCenter?(v218, &demangling cache variable for type metadata for SiriUserInput?);
          outlined destroy of MediaUserStateCenter?(v215, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
          return outlined destroy of MediaUserStateCenter?(v178, &demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
        }
        else
        {
          uint64_t v187 = Siri_Nlu_External_AsrHypothesis.utterance.getter();
          uint64_t v189 = v188;

          (*(void (**)(char *, uint64_t))(v163 + 8))(v201, v203);
          (*(void (**)(char *, uint64_t))(v145 + 8))(v202, v146);
          outlined destroy of MediaUserStateCenter?(v219, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
          outlined destroy of MediaUserStateCenter?(v218, &demangling cache variable for type metadata for SiriUserInput?);
          outlined destroy of MediaUserStateCenter?(v215, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
          (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v178, v176);
          uint64_t result = swift_bridgeObjectRelease();
          *a1 = v187;
          a1[1] = v189;
        }
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v163 + 8))(v201, v203);
        (*(void (**)(char *, uint64_t))(v145 + 8))(v202, v146);
        outlined destroy of MediaUserStateCenter?(v219, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
        outlined destroy of MediaUserStateCenter?(v218, &demangling cache variable for type metadata for SiriUserInput?);
        return outlined destroy of MediaUserStateCenter?(v116, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      }
    }
    else if (v167 == *MEMORY[0x1E4FA22B8])
    {
      (*(void (**)(char *, uint64_t))(v163 + 8))(v201, v203);
      (*(void (**)(char *, uint64_t))(v145 + 8))(v202, v146);
      outlined destroy of MediaUserStateCenter?(v219, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      outlined destroy of MediaUserStateCenter?(v147, &demangling cache variable for type metadata for SiriUserInput?);
      outlined destroy of MediaUserStateCenter?(v116, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      (*(void (**)(char *, uint64_t))(v145 + 96))(v166, v146);
      uint64_t v181 = *(void *)v166;
      uint64_t v182 = *((void *)v166 + 1);
      uint64_t result = swift_bridgeObjectRelease();
      *a1 = v181;
      a1[1] = v182;
    }
    else
    {
      unint64_t v183 = Logger.logObject.getter();
      os_log_type_t v184 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v183, v184))
      {
        uint64_t v185 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v185 = 0;
        _os_log_impl(&dword_1C8F83000, v183, v184, "originalUserInput is nil or unknown type", v185, 2u);
        MEMORY[0x1CB77E470](v185, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v163 + 8))(v201, v203);
      v186 = *(void (**)(char *, uint64_t))(v145 + 8);
      v186(v202, v146);
      outlined destroy of MediaUserStateCenter?(v219, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      outlined destroy of MediaUserStateCenter?(v147, &demangling cache variable for type metadata for SiriUserInput?);
      outlined destroy of MediaUserStateCenter?(v116, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      return ((uint64_t (*)(char *, uint64_t))v186)(v200, v146);
    }
  }
  return result;
}

uint64_t implicit closure #5 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v57._uint64_t countAndFlagsBits = a3;
  v57._object = a4;
  uint64_t v4 = type metadata accessor for PommesCandidateId();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v53 = (uint64_t)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PommesBridgeResultCandidateState(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v51 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = swift_projectBox();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  uint64_t v8 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InsightRequestSummaryKey, String))
             - 8);
  uint64_t v9 = *(void *)(*(void *)v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v11 = swift_allocObject();
  uint64_t v54 = v11;
  *(_OWORD *)(v11 + 16) = xmmword_1C9198790;
  unint64_t v12 = v11 + v10;
  unint64_t v13 = v11 + v10 + v8[14];
  static InsightRequestSummaryKey.bridgeName.getter();
  strcpy((char *)v13, "PommesBridge");
  *(unsigned char *)(v13 + 13) = 0;
  *(_WORD *)(v13 + 14) = -5120;
  uint64_t v14 = (void *)(v12 + v9 + v8[14]);
  static InsightRequestSummaryKey.messageDescription.getter();
  *uint64_t v14 = 0xD000000000000017;
  v14[1] = 0x80000001C919C000;
  uint64_t v15 = (void *)(v12 + 2 * v9 + v8[14]);
  static InsightRequestSummaryKey.assistantId.getter();
  uint64_t v58 = 0;
  unint64_t v59 = 0xE000000000000000;
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = RequestProcessorBase.assistantId.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  String.append(_:)(v18);
  unint64_t v19 = v59;
  *uint64_t v15 = v58;
  v15[1] = v19;
  uint64_t v20 = (void *)(v12 + 3 * v9 + v8[14]);
  static InsightRequestSummaryKey.sessionId.getter();
  uint64_t v58 = 0;
  unint64_t v59 = 0xE000000000000000;
  v21._uint64_t countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  String.append(_:)(v21);
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestProcessorBase.sessionId.getter();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BC10]);
  v26._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  v27._uint64_t countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  String.append(_:)(v27);
  unint64_t v28 = v59;
  *uint64_t v20 = v58;
  v20[1] = v28;
  uint64_t v29 = (void *)(v12 + 4 * v9 + v8[14]);
  static InsightRequestSummaryKey.requestId.getter();
  uint64_t v58 = 0;
  unint64_t v59 = 0xE000000000000000;
  v30._uint64_t countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = RequestProcessorBase.requestId.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  String.append(_:)(v32);
  unint64_t v33 = v59;
  *uint64_t v29 = v58;
  v29[1] = v33;
  uint64_t v34 = (void *)(v12 + 5 * v9 + v8[14]);
  static InsightRequestSummaryKey.resultCandidateId.getter();
  uint64_t v60 = 0;
  unint64_t v61 = 0xE000000000000000;
  v35._uint64_t countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  String.append(_:)(v35);
  uint64_t v36 = v52;
  swift_beginAccess();
  uint64_t v37 = v51;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v36, v51, type metadata accessor for PommesBridgeResultCandidateState);
  uint64_t v38 = v53;
  PommesBridgeResultCandidateState.pommesCandidateId.getter(v53);
  outlined destroy of NLXResultCandidate(v37, type metadata accessor for PommesBridgeResultCandidateState);
  uint64_t v39 = PommesCandidateId.asResultCandidateId.getter();
  uint64_t v41 = v40;
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v38, v56);
  v42._uint64_t countAndFlagsBits = v39;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = 0;
  v43._object = (void *)0xE000000000000000;
  String.append(_:)(v43);
  unint64_t v44 = v61;
  *uint64_t v34 = v60;
  v34[1] = v44;
  uint64_t v45 = (void *)(v12 + 6 * v9 + v8[14]);
  static InsightRequestSummaryKey.utterance.getter();
  uint64_t v60 = 0;
  unint64_t v61 = 0xE000000000000000;
  v46._uint64_t countAndFlagsBits = 0;
  v46._object = (void *)0xE000000000000000;
  String.append(_:)(v46);
  String.append(_:)(v57);
  v47._uint64_t countAndFlagsBits = 0;
  v47._object = (void *)0xE000000000000000;
  String.append(_:)(v47);
  unint64_t v48 = v61;
  *uint64_t v45 = v60;
  v45[1] = v48;
  return v54;
}

uint64_t closure #4 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for PommesCandidateId();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for PommesBridgeResultCandidateState(0);
  MEMORY[0x1F4188790](v8 - 8);
  unint64_t v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = swift_projectBox();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    unint64_t v13 = (void *)result;
    swift_beginAccess();
    outlined init with copy of PommesBridgeResultCandidateState.ParseState(v11, (uint64_t)v10, type metadata accessor for PommesBridgeResultCandidateState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v7);
    outlined destroy of NLXResultCandidate((uint64_t)v10, type metadata accessor for PommesBridgeResultCandidateState);
    (*(void (**)(unsigned char *, uint64_t, void))(class metadata base offset for PommesBridgeRequestProcessor
                                                     + *v13
                                                     + 472))(v7, a1, a2 & 1);
    swift_release();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t PommesBridgeRequestProcessor.buildRewriteMessage(rewriteUtterance:rewriteReason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewriteType();
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  Swift::String v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  Swift::String v18 = (char *)&v24 - v17;
  Apple_Parsec_Siri_V2alpha_RewrittenUtterance.init()();
  swift_bridgeObjectRetain();
  MEMORY[0x1CB778C20](a1, a2);
  outlined init with copy of MediaUserStateCenter?(a3, (uint64_t)v11, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  int v20 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v12);
  Swift::String v21 = *(void (**)(char *, void, uint64_t))(v24 + 104);
  uint64_t v22 = (uint64_t (**)(char *, uint64_t))(v13 + 8);
  if (v20 == *MEMORY[0x1E4FA21E0])
  {
    v21(v8, *MEMORY[0x1E4F88E20], v25);
    Apple_Parsec_Siri_V2alpha_RewrittenUtterance.rewriteType.setter();
    return (*v22)(v18, v12);
  }
  else
  {
    v21(v8, *MEMORY[0x1E4F88E40], v25);
    Apple_Parsec_Siri_V2alpha_RewrittenUtterance.rewriteType.setter();
    uint64_t v23 = *v22;
    (*v22)(v18, v12);
    return v23(v16, v12);
  }
}

uint64_t implicit closure #1 in closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v44[1] = a5;
  v44[2] = a2;
  Swift::String v46 = a3;
  uint64_t v47 = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InsightRequestSummaryKey, String));
  uint64_t v6 = *(void *)(*(void *)(v5 - 8) + 72);
  unint64_t v7 = (*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1C91987A0;
  uint64_t v45 = v8;
  unint64_t v9 = v8 + v7;
  unint64_t v10 = v8 + v7 + *(int *)(v5 + 48);
  static InsightRequestSummaryKey.bridgeName.getter();
  strcpy((char *)v10, "PommesBridge");
  *(unsigned char *)(v10 + 13) = 0;
  *(_WORD *)(v10 + 14) = -5120;
  uint64_t v11 = (void *)(v9 + v6 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.messageDescription.getter();
  *uint64_t v11 = 0xD000000000000018;
  v11[1] = 0x80000001C919C020;
  uint64_t v12 = (void *)(v9 + 2 * v6 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.assistantId.getter();
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = RequestProcessorBase.assistantId.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.append(_:)(v15);
  *uint64_t v12 = 0;
  v12[1] = 0xE000000000000000;
  Swift::String v16 = (void *)(v9 + 3 * v6 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.sessionId.getter();
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  String.append(_:)(v17);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  Swift::String v21 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestProcessorBase.sessionId.getter();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BC10]);
  v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v23._uint64_t countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.append(_:)(v23);
  unint64_t v24 = v49;
  *Swift::String v16 = v48;
  v16[1] = v24;
  uint64_t v25 = (void *)(v9 + 4 * v6 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.requestId.getter();
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  v26._uint64_t countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = RequestProcessorBase.requestId.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  String.append(_:)(v28);
  unint64_t v29 = v49;
  *uint64_t v25 = v48;
  v25[1] = v29;
  Swift::String v30 = (void *)(v9 + 5 * v6 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.resultCandidateId.getter();
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  v31._uint64_t countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = PommesCandidateId.asResultCandidateId.getter();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  String.append(_:)(v33);
  unint64_t v34 = v49;
  void *v30 = v48;
  v30[1] = v34;
  Swift::String v35 = (void *)(v9 + 6 * v6 + *(int *)(v5 + 48));
  if (one-time initialization token for isFromTimeoutHandler != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for InsightRequestSummaryKey();
  uint64_t v37 = __swift_project_value_buffer(v36, (uint64_t)static PommesInsightRequestSummaryKey.isFromTimeoutHandler);
  uint64_t v38 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16);
  v38(v9 + 6 * v6, v37, v36);
  *Swift::String v35 = 0x65736C6166;
  v35[1] = 0xE500000000000000;
  uint64_t v39 = *(int *)(v5 + 48);
  if (*v46 != -1) {
    swift_once();
  }
  uint64_t v40 = v9 - v6 + 8 * v6;
  uint64_t v41 = (void *)(v40 + v39);
  uint64_t v42 = __swift_project_value_buffer(v36, v47);
  v38(v40, v42, v36);
  *uint64_t v41 = 1702195828;
  v41[1] = 0xE400000000000000;
  return v45;
}

uint64_t implicit closure #12 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v66 = a2;
  uint64_t v67 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InsightRequestSummaryKey, String));
  uint64_t v8 = *(void *)(*(void *)(v7 - 8) + 72);
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C91987A0;
  uint64_t v68 = v10;
  unint64_t v11 = v10 + v9;
  unint64_t v12 = v10 + v9 + *(int *)(v7 + 48);
  static InsightRequestSummaryKey.bridgeName.getter();
  strcpy((char *)v12, "PommesBridge");
  *(unsigned char *)(v12 + 13) = 0;
  *(_WORD *)(v12 + 14) = -5120;
  Swift::String v13 = (void *)(v11 + v8 + *(int *)(v7 + 48));
  static InsightRequestSummaryKey.messageDescription.getter();
  *Swift::String v13 = 0xD000000000000015;
  v13[1] = 0x80000001C919C040;
  if (one-time initialization token for pommesError != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for InsightRequestSummaryKey();
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static PommesInsightRequestSummaryKey.pommesError);
  uint64_t v16 = *(void *)(v14 - 8);
  unint64_t v64 = *(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 16);
  uint64_t v65 = v14;
  uint64_t v63 = v16 + 16;
  v64(v11 + 2 * v8, v15, v14);
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  String.append(_:)(v17);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
  uint64_t v18 = type metadata accessor for PommesError();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1, v18) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
    uint64_t v20 = 0;
    Swift::String v21 = (void *)0xE000000000000000;
  }
  else
  {
    uint64_t v20 = PommesError.rawValue.getter();
    Swift::String v21 = v22;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v18);
  }
  Swift::String v23 = (void *)(v11 + 2 * v8 + *(int *)(v7 + 48));
  v24._uint64_t countAndFlagsBits = v20;
  v24._object = v21;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  String.append(_:)(v25);
  unint64_t v26 = v70;
  *Swift::String v23 = v69;
  v23[1] = v26;
  Swift::String v27 = (void *)(v11 + 3 * v8 + *(int *)(v7 + 48));
  static InsightRequestSummaryKey.assistantId.getter();
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  v28._uint64_t countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = RequestProcessorBase.assistantId.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  String.append(_:)(v30);
  unint64_t v31 = v70;
  void *v27 = v69;
  v27[1] = v31;
  uint64_t v32 = 4 * v8;
  Swift::String v33 = (void *)(v11 + 4 * v8 + *(int *)(v7 + 48));
  static InsightRequestSummaryKey.sessionId.getter();
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  v34._uint64_t countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  String.append(_:)(v34);
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v61 = (uint64_t)&v61;
  uint64_t v62 = v7;
  uint64_t v36 = v8;
  uint64_t v37 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v39 = (char *)&v61 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestProcessorBase.sessionId.getter();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BC10]);
  v40._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v35);
  uint64_t v41 = v36;
  v42._uint64_t countAndFlagsBits = 0;
  v42._object = (void *)0xE000000000000000;
  String.append(_:)(v42);
  unint64_t v43 = v70;
  *Swift::String v33 = v69;
  v33[1] = v43;
  unint64_t v44 = v11 + v32 + v36;
  uint64_t v45 = v62;
  Swift::String v46 = (void *)(v44 + *(int *)(v62 + 48));
  static InsightRequestSummaryKey.requestId.getter();
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  v47._uint64_t countAndFlagsBits = 0;
  v47._object = (void *)0xE000000000000000;
  String.append(_:)(v47);
  v48._uint64_t countAndFlagsBits = RequestProcessorBase.requestId.getter();
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  v49._uint64_t countAndFlagsBits = 0;
  v49._object = (void *)0xE000000000000000;
  String.append(_:)(v49);
  unint64_t v50 = v70;
  *Swift::String v46 = v69;
  v46[1] = v50;
  uint64_t v51 = (void *)(v11 + 6 * v41 + *(int *)(v45 + 48));
  static InsightRequestSummaryKey.resultCandidateId.getter();
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  v52._uint64_t countAndFlagsBits = 0;
  v52._object = (void *)0xE000000000000000;
  String.append(_:)(v52);
  v53._uint64_t countAndFlagsBits = PommesCandidateId.asResultCandidateId.getter();
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  v54._uint64_t countAndFlagsBits = 0;
  v54._object = (void *)0xE000000000000000;
  String.append(_:)(v54);
  unint64_t v55 = v70;
  *uint64_t v51 = v69;
  v51[1] = v55;
  uint64_t v56 = *(int *)(v45 + 48);
  if (one-time initialization token for isFromTimeoutHandler != -1) {
    swift_once();
  }
  Swift::String v57 = (void *)(v11 - v41 + 8 * v41 + v56);
  uint64_t v58 = v65;
  uint64_t v59 = __swift_project_value_buffer(v65, (uint64_t)static PommesInsightRequestSummaryKey.isFromTimeoutHandler);
  v64(v11 - v41 + 8 * v41, v59, v58);
  *Swift::String v57 = 0x65736C6166;
  v57[1] = 0xE500000000000000;
  return v68;
}

uint64_t PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t v30 = type metadata accessor for PommesCandidateId();
  uint64_t v2 = *(void *)(v30 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  MEMORY[0x1F4188790](v30);
  uint64_t v35 = RequestProcessorBase.requestQueue.getter();
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v33 = v4;
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v32 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v30 - v7;
  static DispatchTime.now()();
  uint64_t v9 = type metadata accessor for DispatchTimeInterval();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  Swift::String v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 240))(v11);
  MEMORY[0x1CB77C970](v8, v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v36 + 8);
  v36 += 8;
  Swift::String v34 = v14;
  v14(v8, v4);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v31, v30);
  unint64_t v17 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v18 + v17, (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  aBlock[4] = partial apply for closure #1 in PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t aBlock[3] = &block_descriptor_75;
  uint64_t v19 = _Block_copy(aBlock);
  uint64_t v31 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  Swift::String v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  unint64_t v26 = (char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAEF0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  Swift::String v27 = v32;
  Swift::String v28 = (void *)v35;
  MEMORY[0x1CB77D140](v32, v22, v26, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v31);
  v34(v27, v33);
  swift_release();
  return swift_release();
}

void *closure #1 in PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = (void *)swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *result + 488))(a2);
    return (void *)swift_release();
  }
  return result;
}

void PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)(NSObject *a1)
{
  os_log_t v196 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v175 = (uint64_t)&v168 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  MEMORY[0x1F4188790](v173);
  uint64_t v174 = (char *)&v168 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PommesError();
  uint64_t v182 = *(void *)(v5 - 8);
  uint64_t v183 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v176 = (char *)&v168 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v178 = (char *)&v168 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v168 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PommesSearchReason();
  uint64_t v186 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v177 = (char *)&v168 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v180 = (char *)&v168 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v168 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v193 = (char *)&v168 - v20;
  uint64_t v21 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v187 = *((void *)v21 - 1);
  uint64_t v188 = v21;
  MEMORY[0x1F4188790](v21);
  uint64_t v185 = (uint64_t)&v168 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for InsightRequestSummaryLogger();
  Class isa = v23[-1].isa;
  os_log_t v192 = v23;
  MEMORY[0x1F4188790](v23);
  uint64_t v190 = (char *)&v168 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for PommesCandidateId();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v194 = v25;
  uint64_t v195 = v26;
  uint64_t v27 = *(void *)(v26 + 64);
  uint64_t v28 = MEMORY[0x1F4188790](v25);
  Swift::String v29 = (char *)&v168 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v179 = (char *)&v168 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  os_log_type_t v184 = (char *)&v168 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v189 = (char *)&v168 - v35;
  MEMORY[0x1F4188790](v34);
  uint64_t v37 = (char *)&v168 - v36;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (shouldContinue: Bool, prState: PommesBridgeResultCandidateState?));
  uint64_t v39 = MEMORY[0x1F4188790](v38);
  uint64_t v41 = (char *)&v168 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = MEMORY[0x1F4188790](v39);
  unint64_t v44 = (char *)&v168 - v43;
  if ((*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 96))(v42))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.pommes);
    os_log_t v196 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v196, v46))
    {
      Swift::String v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v47 = 0;
      _os_log_impl(&dword_1C8F83000, v196, v46, "Not posting pommes timeout message, request finished", v47, 2u);
      MEMORY[0x1CB77E470](v47, -1, -1);
    }
    os_log_t v48 = v196;

    return;
  }
  uint64_t v171 = v12;
  uint64_t v49 = (uint64_t)&v44[*(int *)(v38 + 48)];
  id v172 = v1;
  char v50 = PommesBridgeRequestProcessor.fetchAndUpdateState(_:)(v49, (uint64_t)v196);
  uint64_t v181 = v44;
  *unint64_t v44 = v50 & 1;
  if ((v50 & 1) == 0)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.pommes);
    uint64_t v63 = v195;
    uint64_t v64 = v194;
    uint64_t v193 = *(char **)(v195 + 16);
    ((void (*)(char *, os_log_t, uint64_t))v193)(v37, v196, v194);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      v197[0] = v68;
      *(_DWORD *)uint64_t v67 = 136315138;
      uint64_t v69 = PommesCandidateId.description.getter();
      uint64_t v198 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v197);
      uint64_t v64 = v194;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v195 + 8))(v37, v64);
      _os_log_impl(&dword_1C8F83000, v65, v66, "Not posting pommes timeout message, %s finished", v67, 0xCu);
      swift_arrayDestroy();
      uint64_t v71 = v68;
      uint64_t v63 = v195;
      MEMORY[0x1CB77E470](v71, -1, -1);
      MEMORY[0x1CB77E470](v67, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v37, v64);
    }

    uint64_t v75 = v172;
    if (one-time initialization token for insightRequestSummaryLogger != -1) {
      swift_once();
    }
    os_log_t v76 = v192;
    uint64_t v77 = __swift_project_value_buffer((uint64_t)v192, (uint64_t)static Logger.insightRequestSummaryLogger);
    id v78 = v190;
    Class v79 = isa;
    (*((void (**)(char *, uint64_t, os_log_t))isa + 2))(v190, v77, v76);
    unint64_t v80 = v189;
    ((void (*)(char *, os_log_t, uint64_t))v193)(v189, v196, v64);
    unint64_t v81 = (*(unsigned __int8 *)(v63 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
    uint64_t v82 = swift_allocObject();
    *(void *)(v82 + 16) = v75;
    (*(void (**)(unint64_t, char *, uint64_t))(v63 + 32))(v82 + v81, v80, v64);
    swift_retain();
    InsightRequestSummaryLogger.emitDebug(_:)();
    swift_release();
    (*((void (**)(char *, os_log_t))v79 + 1))(v78, v76);
    goto LABEL_26;
  }
  uint64_t v51 = (uint64_t)&v41[*(int *)(v38 + 48)];
  *uint64_t v41 = v50 & 1;
  outlined init with copy of MediaUserStateCenter?(v49, v51, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  Swift::String v52 = v188;
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v187 + 48))(v51, 1, v188) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v51, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    uint64_t v53 = v195;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.pommes);
    uint64_t v55 = v194;
    (*(void (**)(char *, os_log_t, uint64_t))(v53 + 16))(v29, v196, v194);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      v197[0] = v59;
      *(_DWORD *)uint64_t v58 = 136315138;
      uint64_t v60 = PommesCandidateId.description.getter();
      uint64_t v198 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, v197);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v29, v55);
      _os_log_impl(&dword_1C8F83000, v56, v57, "Not posting pommes timeout message, no Pommes state for %s", v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v59, -1, -1);
      MEMORY[0x1CB77E470](v58, -1, -1);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v53 + 8))(v29, v55);
    }
LABEL_26:
    uint64_t v83 = (uint64_t)v181;
LABEL_27:
    outlined destroy of MediaUserStateCenter?(v83, (uint64_t *)&demangling cache variable for type metadata for (shouldContinue: Bool, prState: PommesBridgeResultCandidateState?));
    return;
  }
  uint64_t v72 = v185;
  outlined init with take of NLXResultCandidate(v51, v185, type metadata accessor for PommesBridgeResultCandidateState);
  outlined init with copy of MediaUserStateCenter?(v72 + v52[14], (uint64_t)v11, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
  uint64_t v73 = type metadata accessor for PommesSearchEagerInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v73 - 8) + 48))(v11, 1, v73) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
    uint64_t v74 = v193;
    (*(void (**)(char *, void, uint64_t))(v186 + 104))(v193, *MEMORY[0x1E4F9FE98], v171);
  }
  else
  {
    uint64_t v84 = v186;
    uint64_t v85 = v171;
    (*(void (**)(char *, char *, uint64_t))(v186 + 16))(v19, v11, v171);
    outlined destroy of NLXResultCandidate((uint64_t)v11, type metadata accessor for PommesSearchEagerInfo);
    uint64_t v74 = v193;
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v193, v19, v85);
  }
  uint64_t v86 = v172;
  uint64_t v87 = *(void *)((char *)v172 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
  uint64_t v88 = RequestProcessorBase.requestId.getter();
  uint64_t v90 = v89;
  uint64_t v91 = RequestProcessorBase.rootLevelRequestId.getter();
  os_log_t v92 = v196;
  (*(void (**)(uint64_t, os_log_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v87 + 144))(3, v196, v88, v90, v91, v93);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v94 = v194;
  uint64_t v95 = v195;
  uint64_t v97 = v195 + 16;
  uint64_t v96 = *(void (**)(char *, os_log_t, uint64_t))(v195 + 16);
  uint64_t v98 = (uint64_t *)v184;
  v96(v184, v92, v194);
  int v99 = (*(uint64_t (**)(uint64_t *, uint64_t))(v95 + 88))(v98, v94);
  BOOL v100 = v99 == *MEMORY[0x1E4F9FE50];
  uint64_t v169 = v96;
  if (v100)
  {
    uint64_t v170 = v97;
    (*(void (**)(uint64_t *, uint64_t))(v95 + 96))(v98, v94);
    uint64_t v101 = *v98;
    uint64_t v102 = v98[1];
    uint64_t v104 = v182;
    uint64_t v103 = v183;
    uint64_t v105 = (uint64_t)v178;
    (*(void (**)(char *, void, uint64_t))(v182 + 104))(v178, *MEMORY[0x1E4FA23E8], v183);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v105, 0, 1, v103);
    uint64_t v106 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                       + *v86
                                                                                       + 520))(v101, v102, 0, v105, v74);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v105, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
    uint64_t v107 = (uint64_t)v181;
    uint64_t v108 = v86;
    if (!v106)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v109 = type metadata accessor for Logger();
      __swift_project_value_buffer(v109, (uint64_t)static Logger.pommes);
      uint64_t v110 = Logger.logObject.getter();
      os_log_type_t v111 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v110, v111)) {
        goto LABEL_62;
      }
      id v112 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v112 = 0;
      uint64_t v113 = "Could not construct PommesResultCandidate message, buildCandidateMessage returned nil";
      goto LABEL_61;
    }
    goto LABEL_44;
  }
  if (v99 == *MEMORY[0x1E4F9FE58])
  {
    uint64_t v170 = v97;
    (*(void (**)(uint64_t *, uint64_t))(v95 + 96))(v98, v194);
    uint64_t v114 = *v98;
    uint64_t v115 = v98[1];
    uint64_t v116 = v98[2];
    uint64_t v117 = v98[3];
    uint64_t v118 = v72;
    uint64_t v119 = v72 + v188[5];
    uint64_t v121 = v182;
    uint64_t v120 = v183;
    uint64_t v122 = v176;
    (*(void (**)(char *, void, uint64_t))(v182 + 104))(v176, *MEMORY[0x1E4FA23E8], v183);
    uint64_t v123 = v116;
    uint64_t v108 = v172;
    uint64_t v124 = v119;
    uint64_t v72 = v118;
    uint64_t v74 = v193;
    uint64_t v106 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v172 + 552))(v114, v115, v123, v117, v122, v193, v124);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v120);
    uint64_t v107 = (uint64_t)v181;
    if (!v106)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v125 = type metadata accessor for Logger();
      __swift_project_value_buffer(v125, (uint64_t)static Logger.pommes);
      uint64_t v110 = Logger.logObject.getter();
      os_log_type_t v111 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v110, v111)) {
        goto LABEL_62;
      }
      id v112 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v112 = 0;
      uint64_t v113 = "Could not construct PommesTRPCandidateMessage message, buildTRPCommonErrorMessage returned nil";
LABEL_61:
      _os_log_impl(&dword_1C8F83000, v110, v111, v113, v112, 2u);
      int v167 = v112;
      uint64_t v107 = (uint64_t)v181;
      MEMORY[0x1CB77E470](v167, -1, -1);
LABEL_62:

      (*(void (**)(char *, uint64_t))(v186 + 8))(v74, v171);
      outlined destroy of NLXResultCandidate(v72, type metadata accessor for PommesBridgeResultCandidateState);
      uint64_t v83 = v107;
      goto LABEL_27;
    }
    goto LABEL_44;
  }
  uint64_t v107 = (uint64_t)v181;
  if (v99 == *MEMORY[0x1E4F9FE48])
  {
    uint64_t v170 = v97;
    (*(void (**)(uint64_t *, uint64_t))(v95 + 96))(v98, v194);
    swift_bridgeObjectRelease();
    uint64_t v126 = (uint64_t)v174;
    (*(void (**)(char *, void, uint64_t))(v182 + 104))(v174, *MEMORY[0x1E4FA23E8], v183);
    swift_storeEnumTagMultiPayload();
    uint64_t v127 = v175;
    outlined init with copy of PommesBridgeResultCandidateState.ParseState(v72, v175, type metadata accessor for PommesBridgeResultCandidateState);
    (*(void (**)(uint64_t, void, uint64_t, int *))(v187 + 56))(v127, 0, 1, v188);
    uint64_t v108 = v172;
    uint64_t v106 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                      + *v172
                                                                      + 528))(v126, v127, v74);
    outlined destroy of MediaUserStateCenter?(v127, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    outlined destroy of MediaUserStateCenter?(v126, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
    if (!v106)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v166 = type metadata accessor for Logger();
      __swift_project_value_buffer(v166, (uint64_t)static Logger.pommes);
      uint64_t v110 = Logger.logObject.getter();
      os_log_type_t v111 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v110, v111)) {
        goto LABEL_62;
      }
      id v112 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v112 = 0;
      uint64_t v113 = "Could not construct RunPommesResponseMessage, buildRunPommesResponseMessage returned nil";
      goto LABEL_61;
    }
LABEL_44:
    uint64_t v188 = v106;
    if (one-time initialization token for insightRequestSummaryLogger != -1) {
      swift_once();
    }
    os_log_t v128 = v192;
    uint64_t v129 = __swift_project_value_buffer((uint64_t)v192, (uint64_t)static Logger.insightRequestSummaryLogger);
    unint64_t v131 = v190;
    Class v130 = isa;
    (*((void (**)(char *, uint64_t, os_log_t))isa + 2))(v190, v129, v128);
    uint64_t v132 = v189;
    uint64_t v133 = v194;
    unint64_t v134 = v169;
    v169(v189, v196, v194);
    uint64_t v135 = v195;
    unint64_t v136 = (*(unsigned __int8 *)(v195 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80);
    uint64_t v137 = swift_allocObject();
    *(void *)(v137 + 16) = v108;
    (*(void (**)(unint64_t, char *, uint64_t))(v135 + 32))(v137 + v136, v132, v133);
    swift_retain();
    InsightRequestSummaryLogger.emitDebug(_:)();
    swift_release();
    (*((void (**)(char *, os_log_t))v130 + 1))(v131, v128);
    uint64_t v138 = v186;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v139 = type metadata accessor for Logger();
    __swift_project_value_buffer(v139, (uint64_t)static Logger.pommes);
    id v140 = v179;
    v134(v179, v196, v133);
    uint64_t v141 = *(void (**)(char *, char *, uint64_t))(v138 + 16);
    uint64_t v142 = v180;
    uint64_t v143 = v171;
    v141(v180, v193, v171);
    uint64_t v144 = Logger.logObject.getter();
    os_log_type_t v145 = static os_log_type_t.debug.getter();
    int v146 = v145;
    if (os_log_type_enabled(v144, v145))
    {
      uint64_t v147 = swift_slowAlloc();
      uint64_t v190 = (char *)v141;
      uint64_t v148 = v138;
      uint64_t v149 = v147;
      os_log_t v196 = (os_log_t)swift_slowAlloc();
      v197[0] = (uint64_t)v196;
      *(_DWORD *)uint64_t v149 = 136315394;
      uint64_t v150 = v195;
      os_log_t v192 = v144;
      uint64_t v151 = PommesCandidateId.description.getter();
      uint64_t v198 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v152, v197);
      LODWORD(isa) = v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v150 + 8))(v140, v194);
      *(_WORD *)(v149 + 12) = 2080;
      ((void (*)(char *, char *, uint64_t))v190)(v177, v142, v143);
      uint64_t v153 = String.init<A>(describing:)();
      uint64_t v198 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v153, v154, v197);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v155 = *(void (**)(char *, uint64_t))(v148 + 8);
      v155(v142, v143);
      uint64_t v144 = v192;
      _os_log_impl(&dword_1C8F83000, v192, (os_log_type_t)isa, "Posting pommes result candidate with timeout error for %s; search reason was %s",
        (uint8_t *)v149,
        0x16u);
      os_log_t v156 = v196;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v156, -1, -1);
      MEMORY[0x1CB77E470](v149, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v195 + 8))(v140, v133);
      uint64_t v155 = *(void (**)(char *, uint64_t))(v138 + 8);
      v155(v142, v143);
    }

    uint64_t v157 = v143;
    RequestProcessorBase.messagePublisher.getter();
    __swift_project_boxed_opaque_existential_1(v197, v197[3]);
    uint64_t v158 = v188;
    dispatch thunk of MessagePublishing.postMessage(_:)();

    v155(v193, v157);
    outlined destroy of NLXResultCandidate(v185, type metadata accessor for PommesBridgeResultCandidateState);
    outlined destroy of MediaUserStateCenter?((uint64_t)v181, (uint64_t *)&demangling cache variable for type metadata for (shouldContinue: Bool, prState: PommesBridgeResultCandidateState?));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v197);
    return;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v159 = type metadata accessor for Logger();
  __swift_project_value_buffer(v159, (uint64_t)static Logger.pommes);
  uint64_t v160 = Logger.logObject.getter();
  os_log_type_t v161 = static os_log_type_t.error.getter();
  BOOL v162 = os_log_type_enabled(v160, v161);
  uint64_t v163 = v194;
  if (v162)
  {
    uint64_t v164 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v164 = 0;
    _os_log_impl(&dword_1C8F83000, v160, v161, "Unexpected pommesCandidateId. Not posting timeoutMessage.", v164, 2u);
    uint64_t v165 = v164;
    uint64_t v107 = (uint64_t)v181;
    MEMORY[0x1CB77E470](v165, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v186 + 8))(v74, v171);
  outlined destroy of NLXResultCandidate(v72, type metadata accessor for PommesBridgeResultCandidateState);
  outlined destroy of MediaUserStateCenter?(v107, (uint64_t *)&demangling cache variable for type metadata for (shouldContinue: Bool, prState: PommesBridgeResultCandidateState?));
  (*(void (**)(uint64_t *, uint64_t))(v95 + 8))(v98, v163);
}

uint64_t implicit closure #2 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InsightRequestSummaryKey, String));
  uint64_t v3 = *(void *)(*(void *)(v2 - 8) + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C91987A0;
  uint64_t v42 = v5;
  unint64_t v6 = v5 + v4;
  unint64_t v7 = v5 + v4 + *(int *)(v2 + 48);
  static InsightRequestSummaryKey.bridgeName.getter();
  strcpy((char *)v7, "PommesBridge");
  *(unsigned char *)(v7 + 13) = 0;
  *(_WORD *)(v7 + 14) = -5120;
  uint64_t v8 = (void *)(v6 + v3 + *(int *)(v2 + 48));
  static InsightRequestSummaryKey.messageDescription.getter();
  void *v8 = 0xD000000000000018;
  v8[1] = 0x80000001C919C020;
  uint64_t v9 = (void *)(v6 + 2 * v3 + *(int *)(v2 + 48));
  static InsightRequestSummaryKey.assistantId.getter();
  uint64_t v43 = 0;
  unint64_t v44 = 0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = RequestProcessorBase.assistantId.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  String.append(_:)(v12);
  *uint64_t v9 = 0;
  v9[1] = 0xE000000000000000;
  uint64_t v13 = (void *)(v6 + 3 * v3 + *(int *)(v2 + 48));
  static InsightRequestSummaryKey.sessionId.getter();
  uint64_t v43 = 0;
  unint64_t v44 = 0xE000000000000000;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  String.append(_:)(v14);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestProcessorBase.sessionId.getter();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BC10]);
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.append(_:)(v20);
  unint64_t v21 = v44;
  *uint64_t v13 = v43;
  v13[1] = v21;
  uint64_t v22 = (void *)(v6 + 4 * v3 + *(int *)(v2 + 48));
  static InsightRequestSummaryKey.requestId.getter();
  uint64_t v43 = 0;
  unint64_t v44 = 0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = RequestProcessorBase.requestId.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  String.append(_:)(v25);
  unint64_t v26 = v44;
  *uint64_t v22 = v43;
  v22[1] = v26;
  uint64_t v27 = (void *)(v6 + 5 * v3 + *(int *)(v2 + 48));
  static InsightRequestSummaryKey.resultCandidateId.getter();
  uint64_t v43 = 0;
  unint64_t v44 = 0xE000000000000000;
  v28._uint64_t countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = PommesCandidateId.asResultCandidateId.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  String.append(_:)(v30);
  unint64_t v31 = v44;
  void *v27 = v43;
  v27[1] = v31;
  uint64_t v32 = (void *)(v6 + 6 * v3 + *(int *)(v2 + 48));
  if (one-time initialization token for isFromTimeoutHandler != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for InsightRequestSummaryKey();
  uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static PommesInsightRequestSummaryKey.isFromTimeoutHandler);
  uint64_t v35 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16);
  v35(v6 + 6 * v3, v34, v33);
  *uint64_t v32 = 1702195828;
  v32[1] = 0xE400000000000000;
  uint64_t v36 = *(int *)(v2 + 48);
  if (one-time initialization token for isRcFinished != -1) {
    swift_once();
  }
  uint64_t v37 = v6 - v3 + 8 * v3;
  uint64_t v38 = (void *)(v37 + v36);
  uint64_t v39 = __swift_project_value_buffer(v33, (uint64_t)static PommesInsightRequestSummaryKey.isRcFinished);
  v35(v37, v39, v33);
  *uint64_t v38 = 1702195828;
  v38[1] = 0xE400000000000000;
  return v42;
}

uint64_t implicit closure #5 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  uint64_t v2 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InsightRequestSummaryKey, String))
             - 8);
  uint64_t v3 = *(void *)(*(void *)v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C9198790;
  uint64_t v38 = v5;
  unint64_t v6 = v5 + v4;
  unint64_t v7 = v5 + v4 + v2[14];
  static InsightRequestSummaryKey.bridgeName.getter();
  strcpy((char *)v7, "PommesBridge");
  *(unsigned char *)(v7 + 13) = 0;
  *(_WORD *)(v7 + 14) = -5120;
  uint64_t v8 = (void *)(v6 + v3 + v2[14]);
  static InsightRequestSummaryKey.messageDescription.getter();
  void *v8 = 0xD000000000000015;
  v8[1] = 0x80000001C919C040;
  uint64_t v9 = (void *)(v6 + 2 * v3 + v2[14]);
  static InsightRequestSummaryKey.assistantId.getter();
  uint64_t v39 = 0;
  unint64_t v40 = 0xE000000000000000;
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = RequestProcessorBase.assistantId.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  String.append(_:)(v12);
  *uint64_t v9 = 0;
  v9[1] = 0xE000000000000000;
  uint64_t v13 = (void *)(v6 + 3 * v3 + v2[14]);
  static InsightRequestSummaryKey.sessionId.getter();
  uint64_t v39 = 0;
  unint64_t v40 = 0xE000000000000000;
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  String.append(_:)(v14);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestProcessorBase.sessionId.getter();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BC10]);
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.append(_:)(v20);
  unint64_t v21 = v40;
  *uint64_t v13 = v39;
  v13[1] = v21;
  uint64_t v22 = (void *)(v6 + 4 * v3 + v2[14]);
  static InsightRequestSummaryKey.requestId.getter();
  uint64_t v39 = 0;
  unint64_t v40 = 0xE000000000000000;
  v23._uint64_t countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = RequestProcessorBase.requestId.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  String.append(_:)(v25);
  unint64_t v26 = v40;
  *uint64_t v22 = v39;
  v22[1] = v26;
  uint64_t v27 = (void *)(v6 + 5 * v3 + v2[14]);
  static InsightRequestSummaryKey.resultCandidateId.getter();
  uint64_t v39 = 0;
  unint64_t v40 = 0xE000000000000000;
  v28._uint64_t countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = PommesCandidateId.asResultCandidateId.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  String.append(_:)(v30);
  unint64_t v31 = v40;
  void *v27 = v39;
  v27[1] = v31;
  uint64_t v32 = v2[14];
  if (one-time initialization token for isFromTimeoutHandler != -1) {
    swift_once();
  }
  uint64_t v33 = (void *)(v6 + 6 * v3 + v32);
  uint64_t v34 = type metadata accessor for InsightRequestSummaryKey();
  uint64_t v35 = __swift_project_value_buffer(v34, (uint64_t)static PommesInsightRequestSummaryKey.isFromTimeoutHandler);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v6 + 6 * v3, v35, v34);
  *uint64_t v33 = 1702195828;
  v33[1] = 0xE400000000000000;
  return v38;
}

void PommesBridgeRequestProcessor.publishNoQueryErrorMessage(pommesCandidateId:searchReason:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v67 = a3;
  uint64_t v71 = a2;
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  MEMORY[0x1F4188790](v64);
  uint64_t v65 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v63 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PommesError();
  uint64_t v69 = *(void *)(v9 - 8);
  uint64_t v70 = v9;
  MEMORY[0x1F4188790](v9);
  os_log_type_t v66 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v68 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PommesCandidateId();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (uint64_t *)((char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void *)((char *)v3 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
  uint64_t v18 = RequestProcessorBase.requestId.getter();
  uint64_t v20 = v19;
  uint64_t v21 = RequestProcessorBase.rootLevelRequestId.getter();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 144);
  uint64_t v23 = v13;
  v22(5, a1, v18, v20, v21, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  int v25 = (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 88))(v16, v13);
  if (v25 == *MEMORY[0x1E4F9FE50])
  {
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v16, v13);
    uint64_t v26 = *v16;
    uint64_t v27 = v16[1];
    uint64_t v29 = (uint64_t)v68;
    uint64_t v28 = v69;
    uint64_t v30 = v70;
    (*(void (**)(char *, void, uint64_t))(v69 + 104))(v68, *MEMORY[0x1E4FA23D8], v70);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v29, 0, 1, v30);
    unint64_t v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                        + *v4
                                                                                        + 520))(v26, v27, 0, v29, v71);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v29, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
    if (!v31) {
      goto LABEL_19;
    }
LABEL_18:
    id v58 = v31;
    RequestProcessorBase.messagePublisher.getter();
    __swift_project_boxed_opaque_existential_1(v72, v72[3]);
    dispatch thunk of MessagePublishing.postMessage(_:)();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
    return;
  }
  uint64_t v32 = v3;
  uint64_t v34 = v69;
  uint64_t v33 = v70;
  uint64_t v35 = v71;
  if (v25 == *MEMORY[0x1E4F9FE58])
  {
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v16, v23);
    uint64_t v36 = *v16;
    uint64_t v37 = v16[1];
    uint64_t v39 = v16[2];
    uint64_t v38 = v16[3];
    unint64_t v40 = v66;
    (*(void (**)(char *, void, uint64_t))(v34 + 104))(v66, *MEMORY[0x1E4FA23D8], v33);
    unint64_t v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v32 + 552))(v36, v37, v39, v38, v40, v35, v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v33);
    if (!v31) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v25 != *MEMORY[0x1E4F9FE48])
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.pommes);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl(&dword_1C8F83000, v53, v54, "Unexpected pommesCandidateId", v55, 2u);
      MEMORY[0x1CB77E470](v55, -1, -1);
    }

    (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v23);
    goto LABEL_19;
  }
  (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v16, v23);
  uint64_t v41 = swift_bridgeObjectRelease();
  uint64_t v42 = v3;
  uint64_t v43 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v3 + 120))(v41);
  if (*(void *)(v43 + 16) && (unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v45 & 1) != 0))
  {
    unint64_t v46 = v44;
    uint64_t v47 = *(void *)(v43 + 56);
    uint64_t v48 = type metadata accessor for PommesBridgeResultCandidateState(0);
    uint64_t v49 = *(void *)(v48 - 8);
    uint64_t v50 = v47 + *(void *)(v49 + 72) * v46;
    uint64_t v51 = v63;
    outlined init with copy of PommesBridgeResultCandidateState.ParseState(v50, v63, type metadata accessor for PommesBridgeResultCandidateState);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56))(v51, 0, 1, v48);
  }
  else
  {
    uint64_t v56 = type metadata accessor for PommesBridgeResultCandidateState(0);
    uint64_t v51 = v63;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v63, 1, 1, v56);
  }
  uint64_t v57 = (uint64_t)v65;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v57, *MEMORY[0x1E4FA23D8], v33);
  swift_storeEnumTagMultiPayload();
  unint64_t v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor
                                                                     + *v42
                                                                     + 528))(v57, v51, v35);
  outlined destroy of MediaUserStateCenter?(v57, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  outlined destroy of MediaUserStateCenter?(v51, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  if (v31) {
    goto LABEL_18;
  }
LABEL_19:
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v59 = type metadata accessor for Logger();
  __swift_project_value_buffer(v59, (uint64_t)static Logger.pommes);
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v62 = 0;
    _os_log_impl(&dword_1C8F83000, v60, v61, "PommesBridgeRequestProcessor failed to build noQuery message", v62, 2u);
    MEMORY[0x1CB77E470](v62, -1, -1);
  }
}

uint64_t closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v20 - v9;
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4FA2780], v4);
  lazy protocol witness table accessor for type UserID and conformance UserID((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v16 = v20[2];
  uint64_t v15 = v20[3];
  uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_UserParse();
  if (v15 != v16) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a2, a1, v18);
  }
  MEMORY[0x1F4188790](v18);
  v20[-2] = a1;
  lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, MEMORY[0x1E4FA2808]);
  return static Message.with(_:)();
}

uint64_t closure #1 in closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_Parser();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v1 = Siri_Nlu_External_Span.matcherNames.getter();
  MEMORY[0x1CB779800](v1);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_UserParse.parser.setter();
  Siri_Nlu_External_UserParse.probability.setter();
  return Siri_Nlu_External_UserParse.comparableProbability.setter();
}

uint64_t closure #2 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = (void *)TCUMappedNLResponse.nlResponse.getter();
  uint64_t v10 = NLParseResponse.userParses.getter();

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_AHs5NeverOTg504_s12d13NLUTypes0A23_f1_g1_hi13VACIgnr_A2Cs5J11OIegnrzr_TRA2HIgnr_Tf1cn_nTf4ng_n(v10, a3, a4);
  swift_bridgeObjectRelease();
  NLParseResponse.Builder.userParses.setter();
  uint64_t v11 = (void *)TCUMappedNLResponse.nlResponse.getter();
  NLParseResponse.responseStatusCode.getter();

  uint64_t v12 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 0, 1, v12);
  return NLParseResponse.Builder.responseStatusCode.setter();
}

uint64_t PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)v10, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1C8F83000, v16, v17, "Unable to construct RunPommesResponseMessage without PR state", v18, 2u);
      MEMORY[0x1CB77E470](v18, -1, -1);
    }

    return 0;
  }
  uint64_t v19 = outlined init with take of NLXResultCandidate((uint64_t)v10, (uint64_t)v14, type metadata accessor for PommesBridgeResultCandidateState);
  MEMORY[0x1F4188790](v19);
  *(&v36 - 2) = (uint64_t)v14;
  id v20 = objc_allocWithZone((Class)type metadata accessor for NLParseResponse());
  uint64_t v21 = NLParseResponse.init(build:)();
  if (!v21)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_1C8F83000, v28, v29, "Could not construct NLParseResponse needed for RunPommesResponse message, constructor failure", v30, 2u);
      MEMORY[0x1CB77E470](v30, -1, -1);
    }

    goto LABEL_20;
  }
  uint64_t v22 = (void *)v21;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  *(&v36 - 6) = v4;
  *(&v36 - 5) = a1;
  *(&v36 - 4) = v23;
  *(&v36 - 3) = a3;
  *(&v36 - 2) = (uint64_t)v14;
  id v24 = objc_allocWithZone((Class)type metadata accessor for RunPommesResponseMessage());
  uint64_t v25 = RunPommesResponseMessage.init(build:)();
  if (!v25)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_1C8F83000, v32, v33, "Could not construct RunPommesResponseMessage message, constructor failure", v34, 2u);
      MEMORY[0x1CB77E470](v34, -1, -1);
    }

LABEL_20:
    outlined destroy of NLXResultCandidate((uint64_t)v14, type metadata accessor for PommesBridgeResultCandidateState);
    return 0;
  }
  uint64_t v26 = v25;

  outlined destroy of NLXResultCandidate((uint64_t)v14, type metadata accessor for PommesBridgeResultCandidateState);
  return v26;
}

uint64_t closure #1 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  PommesBridgeResultCandidateState.userParses.getter();
  NLParseResponse.Builder.userParses.setter();
  PommesBridgeResultCandidateState.fallbackParse.getter((uint64_t)v5);
  NLParseResponse.Builder.fallbackParse.setter();
  uint64_t v6 = *MEMORY[0x1E4FA2878];
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 104))(v2, v6, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v2, 0, 1, v7);
  return NLParseResponse.Builder.responseStatusCode.setter();
}

uint64_t closure #2 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v32 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RunPommesResponseMessage.UserInput?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *MEMORY[0x1E4FA2320];
  uint64_t v20 = type metadata accessor for MessageSource();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 104))(v18, v19, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  RunPommesResponseMessage.Builder.source.setter();
  RequestProcessorBase.assistantId.getter();
  RunPommesResponseMessage.Builder.assistantId.setter();
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v22 - 8);
  id v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestProcessorBase.sessionId.getter();
  uint64_t v25 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 0, 1, v25);
  RunPommesResponseMessage.Builder.sessionId.setter();
  RequestProcessorBase.requestId.getter();
  RunPommesResponseMessage.Builder.requestId.setter();
  outlined init with copy of MediaUserStateCenter?(v32, (uint64_t)v15, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v15, 0, 1, v26);
  RunPommesResponseMessage.Builder.pommesResult.setter();
  id v27 = a4;
  RunPommesResponseMessage.Builder.nlResponse.setter();
  uint64_t v28 = type metadata accessor for PommesSearchReason();
  uint64_t v29 = *(void *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v12, v33, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v12, 0, 1, v28);
  RunPommesResponseMessage.Builder.pommesSearchReason.setter();
  closure #1 in closure #2 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)(v34, v9);
  return RunPommesResponseMessage.Builder.userInput.setter();
}

uint64_t closure #1 in closure #2 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (void **)((char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(a1, (uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of NLXResultCandidate((uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v24 = 0;
      _os_log_impl(&dword_1C8F83000, v22, v23, "Attempting to build RunPommesResponseMessage with incorrect PommesBridgeResultCandidateState", v24, 2u);
      MEMORY[0x1CB77E470](v24, -1, -1);
    }

    goto LABEL_28;
  }
  uint64_t v7 = *v6;
  swift_bridgeObjectRelease();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
  outlined destroy of MediaUserStateCenter?((uint64_t)v6 + *(int *)(v8 + 64), &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  id v9 = objc_msgSend(v7, sel_requestType);
  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_21;
  }
  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v13)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
LABEL_22:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v27)) {
      goto LABEL_27;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    uint64_t v29 = "Unexpected requestType for SARDRunPOMMESRequest";
LABEL_26:
    _os_log_impl(&dword_1C8F83000, v26, v27, v29, v28, 2u);
    MEMORY[0x1CB77E470](v28, -1, -1);
LABEL_27:

LABEL_28:
    uint64_t v30 = type metadata accessor for RunPommesResponseMessage.UserInput();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(a2, 1, 1, v30);
  }
  if (v14 == v11 && v13 == v15)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v17)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    uint64_t v32 = *(void **)(a1 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 28));
    if (v32)
    {
      id v33 = v32;

      *a2 = v33;
      uint64_t v34 = *MEMORY[0x1E4FA2150];
      uint64_t v35 = type metadata accessor for RunPommesResponseMessage.UserInput();
      uint64_t v36 = *(void *)(v35 - 8);
      (*(void (**)(void *, uint64_t, uint64_t))(v36 + 104))(a2, v34, v35);
      return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(a2, 0, 1, v35);
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v27)) {
      goto LABEL_27;
    }
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    uint64_t v29 = "Unable to build RunPommesResponseMessage with type SARDRequestTypeSPEECHValue without AFSpeechPackage";
    goto LABEL_26;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v11 && v13 == v18)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_37;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0) {
    goto LABEL_22;
  }

LABEL_37:
  uint64_t v38 = (void *)(a1 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 32));
  uint64_t v39 = v38[1];
  *a2 = *v38;
  a2[1] = v39;
  uint64_t v40 = *MEMORY[0x1E4FA2148];
  uint64_t v41 = type metadata accessor for RunPommesResponseMessage.UserInput();
  uint64_t v42 = *(void *)(v41 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v42 + 104))(a2, v40, v41);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(a2, 0, 1, v41);
  return swift_bridgeObjectRetain();
}

uint64_t PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:pommesResult:searchReason:userId:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for PommesTRPCandidateMessage());
  uint64_t v1 = PommesTRPCandidateMessage.init(build:)();
  if (!v1)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1C8F83000, v3, v4, "Could not construct PommesTRPCandidateMessage message, constructor failure", v5, 2u);
      MEMORY[0x1CB77E470](v5, -1, -1);
    }
  }
  return v1;
}

uint64_t closure #1 in PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:pommesResult:searchReason:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v35 = a7;
  uint64_t v36 = a8;
  v34[1] = a6;
  v34[2] = a5;
  v34[0] = a3;
  uint64_t v37 = a9;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>?);
  MEMORY[0x1F4188790](v15 - 8);
  char v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v18 - 8);
  char v20 = (char *)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *MEMORY[0x1E4FA2320];
  uint64_t v22 = type metadata accessor for MessageSource();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 104))(v20, v21, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  PommesTRPCandidateMessage.Builder.source.setter();
  RequestProcessorBase.assistantId.getter();
  PommesTRPCandidateMessage.Builder.assistantId.setter();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v26 = (char *)v34 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestProcessorBase.sessionId.getter();
  uint64_t v27 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 0, 1, v27);
  PommesTRPCandidateMessage.Builder.sessionId.setter();
  RequestProcessorBase.requestId.getter();
  PommesTRPCandidateMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  PommesTRPCandidateMessage.Builder.trpCandidateId.setter();
  swift_bridgeObjectRetain();
  PommesTRPCandidateMessage.Builder.tcuId.setter();
  outlined init with copy of MediaUserStateCenter?(v35, (uint64_t)v17, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v17, 0, 1, v28);
  PommesTRPCandidateMessage.Builder.pommesResult.setter();
  uint64_t v29 = type metadata accessor for PommesSearchReason();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v14, v36, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v14, 0, 1, v29);
  PommesTRPCandidateMessage.Builder.searchReason.setter();
  uint64_t v31 = type metadata accessor for UserID();
  uint64_t v32 = *(void *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v11, v37, v31);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v11, 0, 1, v31);
  return PommesTRPCandidateMessage.Builder.userId.setter();
}

uint64_t PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:response:searchReason:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a7;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v16 = a5;
  swift_storeEnumTagMultiPayload();
  char v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                                 + *v7
                                                                                                 + 536);
  id v18 = a5;
  uint64_t v19 = v17(a1, a2, a3, a4, v16, a6, v22);
  outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  return v19;
}

uint64_t PommesBridgeRequestProcessor.buildTRPErrorMessage(trpId:tcuId:error:searchReason:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  MEMORY[0x1F4188790](v15);
  char v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for PommesError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v17, a5, v18);
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                                + *v7
                                                                                                + 536))(a1, a2, a3, a4, v17, a6, a7);
  outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  return v19;
}

void PommesBridgeRequestProcessor.__allocating_init(_:_:_:_:_:_:)()
{
}

void PommesBridgeRequestProcessor.init(_:_:_:_:_:_:)()
{
}

void PommesBridgeRequestProcessor.__allocating_init(assistantId:sessionId:requestId:name:messagePublisher:serviceHelper:rootRequestId:)()
{
}

void PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:name:messagePublisher:serviceHelper:rootRequestId:)()
{
}

void PommesBridgeRequestProcessor.__allocating_init(assistantId:sessionId:requestId:name:messagePublisher:serviceHelper:rootLevelRequestId:)()
{
}

void PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:name:messagePublisher:serviceHelper:rootLevelRequestId:)()
{
}

uint64_t PommesBridgeRequestProcessor.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridgeRequestProcessor.sessionState, &demangling cache variable for type metadata for ConversationSessionState?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + direct field offset for PommesBridgeRequestProcessor.timeout;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

uint64_t PommesBridgeRequestProcessor.deinit()
{
  uint64_t v0 = RequestProcessorBase.deinit();
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridgeRequestProcessor.sessionState, &demangling cache variable for type metadata for ConversationSessionState?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + direct field offset for PommesBridgeRequestProcessor.timeout;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_AHs5NeverOTg504_s12d13NLUTypes0A23_f1_g1_hi13VACIgnr_A2Cs5J11OIegnrzr_TRA2HIgnr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v5 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (v8)
  {
    v15[1] = v3;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v9 = v20;
    unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v10 = a1 + v16;
    uint64_t v11 = *(void *)(v5 + 72);
    do
    {
      v18(v10);
      uint64_t v20 = v9;
      unint64_t v13 = *(void *)(v9 + 16);
      unint64_t v12 = *(void *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v9 = v20;
      }
      *(void *)(v9 + 16) = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v16 + v13 * v11, v7, v17);
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: PommesCandidateId, value: PommesBridgeResultCandidateState));
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v24 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v25 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v25) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v24 + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v25) {
        return swift_release();
      }
      unint64_t v21 = *(void *)(v24 + 8 * v12);
      if (!v21)
      {
        int64_t v12 = v20 + 2;
        if (v20 + 2 >= v25) {
          return swift_release();
        }
        unint64_t v21 = *(void *)(v24 + 8 * v12);
        if (!v21)
        {
          int64_t v12 = v20 + 3;
          if (v20 + 3 >= v25) {
            return swift_release();
          }
          unint64_t v21 = *(void *)(v24 + 8 * v12);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v10 = (v21 - 1) & v21;
    unint64_t v14 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_5:
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = type metadata accessor for PommesCandidateId();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v6, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v16);
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = v17
        + *(void *)(*(void *)(type metadata accessor for PommesBridgeResultCandidateState(0) - 8) + 72) * v14;
    uint64_t v19 = (uint64_t)&v6[*(int *)(v4 + 48)];
    outlined init with copy of PommesBridgeResultCandidateState.ParseState(v18, v19, type metadata accessor for PommesBridgeResultCandidateState);
    a2(v6, v19);
    uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (key: PommesCandidateId, value: PommesBridgeResultCandidateState));
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v25) {
    return swift_release();
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21)
  {
    int64_t v12 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v25) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v24 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v55 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v56 = (char *)v53 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  os_log_type_t v54 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v53 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v53 - v16;
  uint64_t v18 = type metadata accessor for NLXResultCandidate();
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  unint64_t v21 = (void *)((char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v53 - v22;
  uint64_t v24 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = a1;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(a1, (uint64_t)v26, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    outlined init with take of NLXResultCandidate((uint64_t)&v26[*(int *)(v33 + 48)], (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v23, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    uint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v35 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_AHs5NeverOTg504_s12d13NLUTypes0A23_f1_g1_hi13VACIgnr_A2Cs5j175OIegnrzr_TR04_s21a167InformationSearch28PommesBridgeRequestProcessorC25updatePSCParseForFallback33_8DFE86024D401B7CABDD6F200033BF3CLL7prStateSbAA0de15ResultCandidateS0Vz_tF0A8lM27_c1_d1_eF7VAKcfU_Tf3nnnpf_nTf1cn_n(v34);
    swift_bridgeObjectRelease_n();
    *unint64_t v21 = v35;
    PommesBridgeResultCandidateState.setNLXResultCandidate(_:)((uint64_t)v21);
    outlined destroy of NLXResultCandidate((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    outlined destroy of NLXResultCandidate((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    return 1;
  }
  if (EnumCaseMultiPayload != 1)
  {

    uint64_t v36 = *((void *)v26 + 1);
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
    outlined init with take of PommesSearchReason?((uint64_t)&v26[*(int *)(v37 + 64)], (uint64_t)v4, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    uint64_t v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_AHs5NeverOTg504_s12d13NLUTypes0A23_f1_g1_hi13VACIgnr_A2Cs5j175OIegnrzr_TR04_s21a167InformationSearch28PommesBridgeRequestProcessorC25updatePSCParseForFallback33_8DFE86024D401B7CABDD6F200033BF3CLL7prStateSbAA0de15ResultCandidateS0Vz_tF0A8lM27_c1_d1_eF7VAKcfU_Tf3nnnpf_nTf1cn_n(v36);
    swift_bridgeObjectRelease();
    PommesBridgeResultCandidateState.setRunPommesRequest(userParses:fallbackParse:)(v38, (uint64_t)v4);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    return 1;
  }
  swift_bridgeObjectRelease();
  uint64_t v28 = *((void *)v26 + 2);
  uint64_t v29 = *((void *)v26 + 3);
  uint64_t v30 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  outlined init with take of PommesSearchReason?((uint64_t)&v26[v30[16]], (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v17, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v31 = v6;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v5) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    uint64_t v32 = 0;
  }
  else
  {
    v53[2] = v28;
    uint64_t v39 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v40 = v56;
    uint64_t v41 = v39(v56, v15, v5);
    MEMORY[0x1F4188790](v41);
    v53[-4] = v40;
    v53[-3] = closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:);
    v53[-2] = 0;
    id v42 = objc_allocWithZone((Class)type metadata accessor for NLParseResponse());
    uint64_t v32 = NLParseResponse.init(build:)();
    if (v32)
    {
      v53[1] = v29;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)static Logger.pommes);
      unint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        unint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v46 = 0;
        _os_log_impl(&dword_1C8F83000, v44, v45, "Assigning overridden TCUMappedNLResponse to prState", v46, 2u);
        MEMORY[0x1CB77E470](v46, -1, -1);
      }

      id v47 = (id)v32;
      uint64_t v48 = v55;
      TCUMappedNLResponse.init(tcuId:nlResponse:)();
      uint64_t v49 = (uint64_t)v54;
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v54, v48, v5);
      uint64_t v32 = 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v49, 0, 1, v5);
      PommesBridgeResultCandidateState.setParseResponse(_:)(v49);

      outlined destroy of MediaUserStateCenter?(v49, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      uint64_t v50 = *(void (**)(char *, uint64_t))(v31 + 8);
      v50(v48, v5);
      outlined destroy of MediaUserStateCenter?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v50(v56, v5);
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v40, v5);
    }
  }
  uint64_t v51 = (uint64_t)&v26[v30[24]];
  outlined destroy of MediaUserStateCenter?((uint64_t)&v26[v30[28]], &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  outlined destroy of MediaUserStateCenter?(v51, &demangling cache variable for type metadata for SiriUserInput?);
  return v32;
}

uint64_t specialized PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int8 a17)
{
  void (*v24)(void *__return_ptr, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned char v36[12];
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void v51[3];
  uint64_t v52;
  uint64_t v53;

  uint64_t v49 = a5;
  uint64_t v50 = a8;
  uint64_t v43 = a7;
  unint64_t v44 = a1;
  id v47 = a6;
  uint64_t v48 = a4;
  os_log_type_t v45 = a2;
  unint64_t v46 = a9;
  uint64_t v40 = a3;
  uint64_t v41 = a10;
  uint64_t v38 = a16;
  uint64_t v39 = a17;
  uint64_t v37 = a15;
  id v42 = a11;
  *(unsigned char *)(v17 + direct field offset for PommesBridgeRequestProcessor.isRequestFinished) = 0;
  *(void *)(v17 + direct field offset for PommesBridgeRequestProcessor.pommesStateHolder) = MEMORY[0x1E4FBC868];
  uint64_t v18 = v17 + direct field offset for PommesBridgeRequestProcessor.sessionState;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(void *)(v18 + 32) = 0;
  uint64_t v19 = (void *)(v17 + direct field offset for PommesBridgeRequestProcessor.aceInputOrigin);
  *uint64_t v19 = 0;
  v19[1] = 0;
  *(void *)(v17 + direct field offset for PommesBridgeRequestProcessor.pommesRequestContext) = 0;
  *(void *)(v17 + direct field offset for PommesBridgeRequestProcessor.pommesSearch) = a12;
  uint64_t v20 = type metadata accessor for DispatchTimeInterval();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (uint64_t *)&v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for PommesBridgeRequestProcessor(0);
  uint64_t v24 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)a12 + 152);
  swift_retain();
  uint64_t v25 = swift_retain();
  v24(v51, v25);
  uint64_t v27 = v52;
  uint64_t v26 = v53;
  __swift_project_boxed_opaque_existential_1(v51, v52);
  uint64_t v28 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v26 + 8))(0, v27, v26);
  static PommesBridgeRequestProcessor.configuredTimeout(isServerFallbackDisabled:)(v28 & 1, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v21 + 32))(v17 + direct field offset for PommesBridgeRequestProcessor.timeout, v23, v20);
  *(double *)(v17 + direct field offset for PommesBridgeRequestProcessor.pommesDUDAThreshold) = specialized static PommesBridgeRequestProcessor.configuredScoreThreshold()();
  swift_beginAccess();
  outlined assign with copy of InputOrigin?(a13, v18, &demangling cache variable for type metadata for ConversationSessionState?);
  swift_endAccess();
  *(void *)(v17 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil) = a14;
  *(unsigned char *)(v17 + direct field offset for PommesBridgeRequestProcessor.isMultiUser) = v37;
  *(unsigned char *)(v17 + direct field offset for PommesBridgeRequestProcessor.isCandidateRequest) = v38;
  *(unsigned char *)(v17 + direct field offset for PommesBridgeRequestProcessor.isOnlyUserInHome) = v39;
  swift_retain();
  swift_release();
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v32 = v40;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v30 + 16))(&v36[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v40, v29);
  uint64_t v33 = v41;
  outlined init with copy of AppDataProviding(v41, (uint64_t)v51);
  uint64_t v34 = RequestProcessorBase.init(assistantId:sessionId:requestId:name:messagePublisher:serviceHelper:rootLevelRequestId:)();
  outlined destroy of MediaUserStateCenter?(a13, &demangling cache variable for type metadata for ConversationSessionState?);
  __swift_destroy_boxed_opaque_existential_1(v33);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v29);
  return v34;
}

uint64_t outlined destroy of NLXResultCandidate(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in PommesBridgeRequestProcessor.setRequestContextAndBeginSearchIfReady(_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in PommesBridgeRequestProcessor.setRequestContextAndBeginSearchIfReady(_:)(a1, a2, v2);
}

uint64_t partial apply for implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)()
{
  return implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24), 0xD00000000000001ELL, 0x80000001C919BF30, MEMORY[0x1E4FA21A0]);
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.handleGestureBasedResultCandidateMessage(_:)()
{
  return implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24), 0xD000000000000027, 0x80000001C919C060, MEMORY[0x1E4FA21A0]);
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.handleTextBasedTRPCandidateMessage(_:)()
{
  return implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24), 0xD000000000000021, 0x80000001C919BF80, MEMORY[0x1E4FA2158]);
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.handleRewrittenUtteranceCandidateMessage(_:)()
{
  return implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24), 0xD000000000000027, 0x80000001C919BFB0, MEMORY[0x1E4FA2158]);
}

uint64_t partial apply for closure #3 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(uint64_t *a1)
{
  return closure #3 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(char **)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(unsigned char *)(v1 + 80), *(void *)(v1 + 88));
}

uint64_t sub_1C90B4948()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for implicit closure #5 in PommesBridgeRequestProcessor.search(pommesCandidateId:)()
{
  return implicit closure #5 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1C90B499C()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #4 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(uint64_t a1, char a2)
{
  return closure #4 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(a1, a2 & 1);
}

uint64_t partial apply for closure #1 in PommesBridgeRequestProcessor.search(pommesCandidateId:)()
{
  return closure #1 in PommesBridgeRequestProcessor.search(pommesCandidateId:)();
}

uint64_t sub_1C90B49F0()
{
  uint64_t v1 = type metadata accessor for PommesCandidateId();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t sub_1C90B4AD0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)()
{
  return partial apply for implicit closure #2 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(&one-time initialization token for isRcFinished, (uint64_t)static PommesInsightRequestSummaryKey.isRcFinished, (uint64_t)one-time initialization function for isRcFinished);
}

uint64_t sub_1C90B4B08()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v13 = *(void *)(v1 + 64);
  uint64_t v4 = type metadata accessor for PommesCandidateId();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = type metadata accessor for PommesError();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v3, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v3, v8);
  }
  uint64_t v10 = v2 | v6 | 7;
  unint64_t v11 = (((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v11, v4);

  return MEMORY[0x1F4186498](v0, v11 + v7, v10);
}

uint64_t partial apply for implicit closure #12 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(type metadata accessor for PommesCandidateId() - 8);
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = v0 + ((v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return implicit closure #12 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(v0 + v2, v5, v6);
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)()
{
  return partial apply for implicit closure #2 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)(implicit closure #2 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:));
}

uint64_t partial apply for implicit closure #5 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)()
{
  return partial apply for implicit closure #2 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)(implicit closure #5 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:));
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for PommesCandidateId() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t partial apply for closure #1 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)()
{
  return closure #1 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)();
}

uint64_t partial apply for closure #2 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)(uint64_t a1)
{
  return closure #2 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t partial apply for closure #1 in PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:pommesResult:searchReason:userId:)(uint64_t a1)
{
  return closure #1 in PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:pommesResult:searchReason:userId:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_1C90B4EB4@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + **a1 + 96))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C90B4F20(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + **a2 + 104))(*a1);
}

uint64_t sub_1C90B4F84@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + **a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1C90B4FEC(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + **a2 + 128);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1C90B505C(void **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + **a1 + 144))();
}

uint64_t sub_1C90B50BC(uint64_t a1, void **a2)
{
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v4, &demangling cache variable for type metadata for ConversationSessionState?);
  return (*(uint64_t (**)(unsigned char *))(class metadata base offset for PommesBridgeRequestProcessor + **a2 + 152))(v4);
}

uint64_t sub_1C90B513C@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + **a1 + 168))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C90B51A8(char *a1, void *a2)
{
  char v2 = *a1;
  uint64_t v3 = (unsigned char *)(*a2 + direct field offset for PommesBridgeRequestProcessor.isCandidateRequest);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = v2;
  return result;
}

uint64_t sub_1C90B51F8(void **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + **a1 + 240))();
}

char *initializeBufferWithCopyOfBuffer for PommesBridgeResultCandidateState(char *a1, char **a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *(void *)a1 = *a2;
    a1 = &v17[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
    return a1;
  }
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v18 = *a2;
    uint64_t v19 = a2[1];
    *(void *)a1 = *a2;
    *((void *)a1 + 1) = v19;
    uint64_t v20 = v18;
    swift_bridgeObjectRetain();
    uint64_t v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                 + 64);
    uint64_t v22 = &a1[v21];
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_17:
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(v26);
      memcpy(v22, v23, *(void *)(*(void *)(v44 - 8) + 64));
      goto LABEL_21;
    }
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v27 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v27;
      swift_bridgeObjectRetain();
      uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
      uint64_t v28 = *(int *)(v75 + 48);
      uint64_t v29 = &a1[v28];
      uint64_t v30 = (char *)a2 + v28;
      *(void *)&a1[v28] = *(char **)((char *)a2 + v28);
      uint64_t v73 = type metadata accessor for NLXResultCandidate();
      uint64_t v74 = v29;
      uint64_t v31 = *(int *)(v73 + 20);
      __dst = &v29[v31];
      uint64_t v32 = &v30[v31];
      uint64_t v33 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      swift_bridgeObjectRetain();
      if (v35(v32, 1, v33))
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(__dst, v32, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(__dst, v32, v33);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
      }
      uint64_t v45 = *(int *)(v73 + 24);
      unint64_t v46 = &v74[v45];
      id v47 = &v30[v45];
      uint64_t v48 = *((void *)v47 + 1);
      *(void *)unint64_t v46 = *(void *)v47;
      *((void *)v46 + 1) = v48;
      a1[*(int *)(v75 + 64)] = *((unsigned char *)a2 + *(int *)(v75 + 64));
      swift_bridgeObjectRetain();
      goto LABEL_21;
    }
    uint64_t v8 = a2[1];
    *(void *)a1 = *a2;
    *((void *)a1 + 1) = v8;
    uint64_t v9 = a2[3];
    *((void *)a1 + 2) = a2[2];
    *((void *)a1 + 3) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    uint64_t v11 = v10[16];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for TCUMappedNLResponse();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    a1[v10[20]] = *((unsigned char *)a2 + v10[20]);
    uint64_t v37 = v10[24];
    uint64_t v38 = &a1[v37];
    uint64_t v39 = (char *)a2 + v37;
    uint64_t v40 = type metadata accessor for SiriUserInput();
    uint64_t v41 = *(void *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
      memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    uint64_t v43 = v10[28];
    uint64_t v22 = &a1[v43];
    uint64_t v23 = (char *)a2 + v43;
    uint64_t v24 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
      goto LABEL_17;
    }
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_21:
  swift_storeEnumTagMultiPayload();
  uint64_t v49 = a3[5];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = (char *)a2 + v49;
  uint64_t v52 = type metadata accessor for UserID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
  uint64_t v53 = a3[7];
  *(void *)&a1[a3[6]] = *(char **)((char *)a2 + a3[6]);
  os_log_type_t v54 = *(char **)((char *)a2 + v53);
  *(void *)&a1[v53] = v54;
  uint64_t v55 = a3[8];
  uint64_t v56 = a3[9];
  uint64_t v57 = &a1[v55];
  id v58 = (char **)((char *)a2 + v55);
  uint64_t v59 = v58[1];
  *(void *)uint64_t v57 = *v58;
  *((void *)v57 + 1) = v59;
  a1[v56] = *((unsigned char *)a2 + v56);
  uint64_t v60 = a3[11];
  a1[a3[10]] = *((unsigned char *)a2 + a3[10]);
  a1[v60] = *((unsigned char *)a2 + v60);
  uint64_t v61 = a3[13];
  a1[a3[12]] = *((unsigned char *)a2 + a3[12]);
  uint64_t v62 = a3[14];
  uint64_t v63 = &a1[v62];
  uint64_t v64 = (char *)a2 + v62;
  a1[v61] = *((unsigned char *)a2 + v61);
  uint64_t v65 = type metadata accessor for PommesSearchEagerInfo(0);
  uint64_t v66 = *(void *)(v65 - 8);
  uint64_t v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
  id v68 = v54;
  swift_bridgeObjectRetain();
  if (v67(v64, 1, v65))
  {
    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
    memcpy(v63, v64, *(void *)(*(void *)(v69 - 8) + 64));
  }
  else
  {
    uint64_t v70 = type metadata accessor for PommesSearchReason();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v70 - 8) + 16))(v63, v64, v70);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
  }
  return a1;
}

void *assignWithCopy for PommesBridgeResultCandidateState(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of NLXResultCandidate((uint64_t)a1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v14 = (void *)*a2;
      *a1 = *a2;
      a1[1] = a2[1];
      id v15 = v14;
      swift_bridgeObjectRetain();
      uint64_t v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                   + 64);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_18:
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(v21);
        memcpy(v17, v18, *(void *)(*(void *)(v41 - 8) + 64));
LABEL_20:
        swift_storeEnumTagMultiPayload();
        goto LABEL_21;
      }
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
        uint64_t v22 = *(int *)(v66 + 48);
        uint64_t v23 = (char *)a1 + v22;
        uint64_t v24 = (char *)a2 + v22;
        *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
        uint64_t v64 = type metadata accessor for NLXResultCandidate();
        uint64_t v65 = v23;
        uint64_t v25 = *(int *)(v64 + 20);
        __dst = &v23[v25];
        uint64_t v26 = &v24[v25];
        uint64_t v27 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        uint64_t v28 = *(void *)(v27 - 8);
        uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
        swift_bridgeObjectRetain();
        if (v29(v26, 1, v27))
        {
          uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
          memcpy(__dst, v26, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dst, v26, v27);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
        }
        uint64_t v37 = *(int *)(v64 + 24);
        uint64_t v38 = &v65[v37];
        uint64_t v39 = &v24[v37];
        *(void *)uint64_t v38 = *(void *)v39;
        *((void *)v38 + 1) = *((void *)v39 + 1);
        *((unsigned char *)a1 + *(int *)(v66 + 64)) = *((unsigned char *)a2 + *(int *)(v66 + 64));
        swift_bridgeObjectRetain();
        goto LABEL_20;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      uint64_t v8 = v7[16];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *((unsigned char *)a1 + v7[20]) = *((unsigned char *)a2 + v7[20]);
      uint64_t v31 = v7[24];
      uint64_t v32 = (char *)a1 + v31;
      uint64_t v33 = (char *)a2 + v31;
      uint64_t v34 = type metadata accessor for SiriUserInput();
      uint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
        memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      uint64_t v40 = v7[28];
      uint64_t v17 = (char *)a1 + v40;
      uint64_t v18 = (char *)a2 + v40;
      uint64_t v19 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
        goto LABEL_18;
      }
    }
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v42 = a3[5];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  uint64_t v45 = type metadata accessor for UserID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 24))(v43, v44, v45);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v46 = a3[7];
  id v47 = *(void **)((char *)a1 + v46);
  uint64_t v48 = *(void **)((char *)a2 + v46);
  *(void *)((char *)a1 + v46) = v48;
  id v49 = v48;

  uint64_t v50 = a3[8];
  uint64_t v51 = (void *)((char *)a1 + v50);
  uint64_t v52 = (void *)((char *)a2 + v50);
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  uint64_t v53 = a3[14];
  os_log_type_t v54 = (char *)a1 + v53;
  uint64_t v55 = (char *)a2 + v53;
  uint64_t v56 = type metadata accessor for PommesSearchEagerInfo(0);
  uint64_t v57 = *(void *)(v56 - 8);
  id v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  LODWORD(v44) = v58(v54, 1, v56);
  int v59 = v58(v55, 1, v56);
  if (!v44)
  {
    if (!v59)
    {
      uint64_t v63 = type metadata accessor for PommesSearchReason();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 24))(v54, v55, v63);
      return a1;
    }
    outlined destroy of NLXResultCandidate((uint64_t)v54, type metadata accessor for PommesSearchEagerInfo);
    goto LABEL_26;
  }
  if (v59)
  {
LABEL_26:
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
    memcpy(v54, v55, *(void *)(*(void *)(v61 - 8) + 64));
    return a1;
  }
  uint64_t v60 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v54, v55, v60);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  return a1;
}

uint64_t initializeWithTake for PommesBridgeResultCandidateState(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v15 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v15;
    uint64_t v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                 + 64);
    uint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (const void *)(a2 + v16);
    uint64_t v19 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_15:
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(v21);
      memcpy(v17, v18, *(void *)(*(void *)(v39 - 8) + 64));
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  if (EnumCaseMultiPayload == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    uint64_t v9 = v8[16];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (const void *)(a2 + v9);
    uint64_t v12 = type metadata accessor for TCUMappedNLResponse();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(unsigned char *)(a1 + v8[20]) = *(unsigned char *)(a2 + v8[20]);
    uint64_t v32 = v8[24];
    uint64_t v33 = (void *)(a1 + v32);
    uint64_t v34 = (const void *)(a2 + v32);
    uint64_t v35 = type metadata accessor for SiriUserInput();
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v36 + 32))(v33, v34, v35);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    uint64_t v38 = v8[28];
    uint64_t v17 = (void *)(a1 + v38);
    uint64_t v18 = (const void *)(a2 + v38);
    uint64_t v19 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
      goto LABEL_15;
    }
LABEL_16:
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    goto LABEL_19;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
  uint64_t v22 = *(int *)(v56 + 48);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  uint64_t v25 = type metadata accessor for NLXResultCandidate();
  uint64_t v26 = *(int *)(v25 + 20);
  uint64_t v27 = (void *)(v23 + v26);
  uint64_t v28 = (const void *)(v24 + v26);
  uint64_t v29 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v27, v28, v29);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  *(_OWORD *)(v23 + *(int *)(v25 + 24)) = *(_OWORD *)(v24 + *(int *)(v25 + 24));
  *(unsigned char *)(a1 + *(int *)(v56 + 64)) = *(unsigned char *)(a2 + *(int *)(v56 + 64));
LABEL_19:
  swift_storeEnumTagMultiPayload();
  uint64_t v40 = a3[5];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  uint64_t v43 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 32))(v41, v42, v43);
  uint64_t v44 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v44) = *(void *)(a2 + v44);
  uint64_t v45 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v45) = *(unsigned char *)(a2 + v45);
  uint64_t v46 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v46) = *(unsigned char *)(a2 + v46);
  uint64_t v47 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v48 = a3[14];
  id v49 = (void *)(a1 + v48);
  uint64_t v50 = (const void *)(a2 + v48);
  *(unsigned char *)(a1 + v47) = *(unsigned char *)(a2 + v47);
  uint64_t v51 = type metadata accessor for PommesSearchEagerInfo(0);
  uint64_t v52 = *(void *)(v51 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
  {
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    uint64_t v54 = type metadata accessor for PommesSearchReason();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v54 - 8) + 32))(v49, v50, v54);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  }
  return a1;
}

uint64_t sub_1C90B6838(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for UserID();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v14 = *(void *)(a1 + a3[8] + 8);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    return (v14 + 1);
  }
  else
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[14];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_1C90B69C0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = type metadata accessor for UserID();
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[8] + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[14];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void type metadata completion function for PommesBridgeResultCandidateState()
{
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UserID();
    if (v1 <= 0x3F)
    {
      type metadata accessor for PommesSearchEagerInfo?(319, &lazy cache variable for type metadata for PommesSearchEagerInfo?, (void (*)(uint64_t))type metadata accessor for PommesSearchEagerInfo);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

char *initializeBufferWithCopyOfBuffer for PommesBridgeResultCandidateState.ParseState(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    a1 = &v16[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v17 = *a2;
      uint64_t v18 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v18;
      uint64_t v19 = v17;
      swift_bridgeObjectRetain();
      uint64_t v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                   + 64);
      uint64_t v21 = &a1[v20];
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v7;
      uint64_t v8 = a2[3];
      *((void *)a1 + 2) = a2[2];
      *((void *)a1 + 3) = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      uint64_t v10 = v9[16];
      uint64_t v11 = &a1[v10];
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      a1[v9[20]] = *((unsigned char *)a2 + v9[20]);
      uint64_t v37 = v9[24];
      uint64_t v38 = &a1[v37];
      uint64_t v39 = (char *)a2 + v37;
      uint64_t v40 = type metadata accessor for SiriUserInput();
      uint64_t v41 = *(void *)(v40 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
        memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
      uint64_t v43 = v9[28];
      uint64_t v44 = &a1[v43];
      uint64_t v45 = (char *)a2 + v43;
      uint64_t v46 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
      uint64_t v47 = *(void *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
        memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      }
    }
    else
    {
      uint64_t v26 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v26;
      swift_bridgeObjectRetain();
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
      uint64_t v27 = *(int *)(v57 + 48);
      uint64_t v28 = &a1[v27];
      uint64_t v29 = (char *)a2 + v27;
      *(void *)&a1[v27] = *(char **)((char *)a2 + v27);
      uint64_t v30 = type metadata accessor for NLXResultCandidate();
      uint64_t v31 = *(int *)(v30 + 20);
      __dst = &v28[v31];
      uint64_t v55 = v30;
      uint64_t v56 = v29;
      uint64_t v32 = &v29[v31];
      uint64_t v33 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v34 = *(void *)(v33 - 8);
      uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      swift_bridgeObjectRetain();
      if (v35(v32, 1, v33))
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(__dst, v32, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(__dst, v32, v33);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
      }
      uint64_t v49 = *(int *)(v55 + 24);
      uint64_t v50 = &v28[v49];
      uint64_t v51 = &v56[v49];
      uint64_t v52 = *((void *)v51 + 1);
      *(void *)uint64_t v50 = *(void *)v51;
      *((void *)v50 + 1) = v52;
      a1[*(int *)(v57 + 64)] = *((unsigned char *)a2 + *(int *)(v57 + 64));
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for PommesBridgeResultCandidateState.ParseState(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of NLXResultCandidate((uint64_t)a1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = (void *)*a2;
      *a1 = *a2;
      a1[1] = a2[1];
      id v13 = v12;
      swift_bridgeObjectRetain();
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                   + 64);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_18:
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(v19);
        memcpy(v15, v16, *(void *)(*(void *)(v39 - 8) + 64));
LABEL_20:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
        uint64_t v20 = *(int *)(v42 + 48);
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
        uint64_t v41 = type metadata accessor for NLXResultCandidate();
        uint64_t v23 = *(int *)(v41 + 20);
        __dst = &v21[v23];
        uint64_t v24 = &v22[v23];
        uint64_t v25 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        uint64_t v26 = *(void *)(v25 - 8);
        uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
        swift_bridgeObjectRetain();
        if (v27(v24, 1, v25))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
          memcpy(__dst, v24, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v26 + 16))(__dst, v24, v25);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
        }
        uint64_t v35 = *(int *)(v41 + 24);
        uint64_t v36 = &v21[v35];
        uint64_t v37 = &v22[v35];
        *(void *)uint64_t v36 = *(void *)v37;
        *((void *)v36 + 1) = *((void *)v37 + 1);
        *((unsigned char *)a1 + *(int *)(v42 + 64)) = *((unsigned char *)a2 + *(int *)(v42 + 64));
        swift_bridgeObjectRetain();
        goto LABEL_20;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v5 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      uint64_t v6 = v5[16];
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      *((unsigned char *)a1 + v5[20]) = *((unsigned char *)a2 + v5[20]);
      uint64_t v29 = v5[24];
      uint64_t v30 = (char *)a1 + v29;
      uint64_t v31 = (char *)a2 + v29;
      uint64_t v32 = type metadata accessor for SiriUserInput();
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
        memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      uint64_t v38 = v5[28];
      uint64_t v15 = (char *)a1 + v38;
      uint64_t v16 = (char *)a2 + v38;
      uint64_t v17 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
        goto LABEL_18;
      }
    }
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    goto LABEL_20;
  }
  return a1;
}

uint64_t initializeWithTake for PommesBridgeResultCandidateState.ParseState(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v13 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v13;
    uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                 + 64);
    uint64_t v15 = (void *)(a1 + v14);
    uint64_t v16 = (const void *)(a2 + v14);
    uint64_t v17 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_15:
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(v19);
      memcpy(v15, v16, *(void *)(*(void *)(v38 - 8) + 64));
      goto LABEL_19;
    }
LABEL_16:
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    goto LABEL_19;
  }
  if (EnumCaseMultiPayload == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    uint64_t v7 = v6[16];
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    uint64_t v10 = type metadata accessor for TCUMappedNLResponse();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(unsigned char *)(a1 + v6[20]) = *(unsigned char *)(a2 + v6[20]);
    uint64_t v31 = v6[24];
    uint64_t v32 = (void *)(a1 + v31);
    uint64_t v33 = (const void *)(a2 + v31);
    uint64_t v34 = type metadata accessor for SiriUserInput();
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    uint64_t v37 = v6[28];
    uint64_t v15 = (void *)(a1 + v37);
    uint64_t v16 = (const void *)(a2 + v37);
    uint64_t v17 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
  uint64_t v21 = *(int *)(v20 + 48);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  uint64_t v24 = type metadata accessor for NLXResultCandidate();
  uint64_t v25 = *(int *)(v24 + 20);
  uint64_t v26 = (void *)(v22 + v25);
  uint64_t v27 = (const void *)(v23 + v25);
  uint64_t v28 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  *(_OWORD *)(v22 + *(int *)(v24 + 24)) = *(_OWORD *)(v23 + *(int *)(v24 + 24));
  *(unsigned char *)(a1 + *(int *)(v20 + 64)) = *(unsigned char *)(a2 + *(int *)(v20 + 64));
LABEL_19:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for PommesBridgeResultCandidateState.ParseState(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of NLXResultCandidate(a1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v13;
      uint64_t v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                   + 64);
      uint64_t v15 = (void *)(a1 + v14);
      uint64_t v16 = (const void *)(a2 + v14);
      uint64_t v17 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_18:
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(v19);
        memcpy(v15, v16, *(void *)(*(void *)(v38 - 8) + 64));
LABEL_20:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
        uint64_t v21 = *(int *)(v20 + 48);
        uint64_t v22 = a1 + v21;
        uint64_t v23 = a2 + v21;
        *(void *)(a1 + v21) = *(void *)(a2 + v21);
        uint64_t v24 = type metadata accessor for NLXResultCandidate();
        uint64_t v25 = *(int *)(v24 + 20);
        uint64_t v26 = (void *)(v22 + v25);
        uint64_t v27 = (const void *)(v23 + v25);
        uint64_t v28 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        uint64_t v29 = *(void *)(v28 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
        {
          uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
          memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v26, v27, v28);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        }
        *(_OWORD *)(v22 + *(int *)(v24 + 24)) = *(_OWORD *)(v23 + *(int *)(v24 + 24));
        *(unsigned char *)(a1 + *(int *)(v20 + 64)) = *(unsigned char *)(a2 + *(int *)(v20 + 64));
        goto LABEL_20;
      }
      long long v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      uint64_t v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      uint64_t v7 = v6[16];
      uint64_t v8 = (void *)(a1 + v7);
      uint64_t v9 = (const void *)(a2 + v7);
      uint64_t v10 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      *(unsigned char *)(a1 + v6[20]) = *(unsigned char *)(a2 + v6[20]);
      uint64_t v31 = v6[24];
      uint64_t v32 = (void *)(a1 + v31);
      uint64_t v33 = (const void *)(a2 + v31);
      uint64_t v34 = type metadata accessor for SiriUserInput();
      uint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
        memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v35 + 32))(v32, v33, v34);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      uint64_t v37 = v6[28];
      uint64_t v15 = (void *)(a1 + v37);
      uint64_t v16 = (const void *)(a2 + v37);
      uint64_t v17 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
        goto LABEL_18;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    goto LABEL_20;
  }
  return a1;
}

void type metadata completion function for PommesBridgeResultCandidateState.ParseState()
{
  type metadata accessor for NLXResultCandidate();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    uint64_t v17 = &v16;
    uint64_t v9 = &unk_1C91988B0;
    uint64_t v10 = &unk_1C91988B0;
    type metadata accessor for PommesSearchEagerInfo?(319, (unint64_t *)&lazy cache variable for type metadata for TCUMappedNLResponse?, MEMORY[0x1E4FA25B0]);
    if (v2 <= 0x3F)
    {
      uint64_t v11 = *(void *)(v1 - 8) + 64;
      uint64_t v12 = &unk_1C91988C8;
      type metadata accessor for PommesSearchEagerInfo?(319, &lazy cache variable for type metadata for SiriUserInput?, MEMORY[0x1E4FA22C8]);
      if (v4 <= 0x3F)
      {
        uint64_t v13 = *(void *)(v3 - 8) + 64;
        type metadata accessor for PommesSearchEagerInfo?(319, &lazy cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?, MEMORY[0x1E4FA21E8]);
        if (v6 <= 0x3F)
        {
          uint64_t v14 = *(void *)(v5 - 8) + 64;
          swift_getTupleTypeLayout();
          uint64_t v18 = &v15;
          type metadata accessor for PommesSearchEagerInfo?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, MEMORY[0x1E4FA2990]);
          if (v7 <= 0x3F)
          {
            swift_getTupleTypeLayout3();
            uint64_t v19 = &v8;
            swift_initEnumMetadataMultiPayload();
          }
        }
      }
    }
  }
}

void type metadata accessor for PommesSearchEagerInfo?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata completion function for PommesBridgeRequestProcessor()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for PommesBridgeRequestProcessor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesBridgeRequestProcessor);
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.isRequestFinished.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 96))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.isRequestFinished.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 104))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.isRequestFinished.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 112))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.pommesStateHolder.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 120))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.pommesStateHolder.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 128))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.pommesStateHolder.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 136))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.sessionState.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 144))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.sessionState.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 152))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.sessionState.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 160))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.isCandidateRequest.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 168))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.timeout.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 240))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.timeout.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 248))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.timeout.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 256))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + v0 + 264))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartSpeechRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 288))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartTextRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 296))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartLocalRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 304))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartChildSpeechRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 312))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartChildTextRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 320))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartRequestMessage(_:location:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 328))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleRequestContextMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 336))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleRunPommesRequest(command:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 352))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 360))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleTRPCandidateRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 368))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleTextBasedResultCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 376))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleGestureBasedResultCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 384))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleTextBasedTRPCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 392))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleRewrittenUtteranceCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 400))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleNLResultCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 408))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleTTResponseMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 416))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleResultSelectedMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 424))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleFallbackToPommesMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 432))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartCandidateRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 440))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.isReady(prState:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 448))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.search(pommesCandidateId:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 456))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(class metadata base offset for PommesBridgeRequestProcessor
                                                             + *v3
                                                             + 472))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 488))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.buildCandidateMessage(_:pommesRes:error:searchReason:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 520))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 528))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:pommesResult:searchReason:userId:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 536))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:response:searchReason:userId:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 544))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.buildTRPErrorMessage(trpId:tcuId:error:searchReason:userId:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 552))();
}

uint64_t ObjC metadata update function for PommesBridgeRequestProcessor()
{
  return type metadata accessor for PommesBridgeRequestProcessor(0);
}

uint64_t partial apply for implicit closure #1 in closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)()
{
  return partial apply for implicit closure #2 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(one-time initialization token for isRequestFinished, (uint64_t)static PommesInsightRequestSummaryKey.isRequestFinished, (uint64_t)one-time initialization function for isRequestFinished);
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for PommesCandidateId() - 8);
  return implicit closure #1 in closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(*(void *)(v3 + 16), v3 + ((*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), a1, a2, a3);
}

uint64_t partial apply for closure #2 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)(uint64_t a1)
{
  return closure #2 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)()
{
  return closure #1 in closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)();
}

uint64_t objectdestroy_44Tm()
{
  uint64_t v1 = type metadata accessor for PommesCandidateId();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

void *partial apply for closure #1 in PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for PommesCandidateId() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)(v2, v3);
}

uint64_t outlined assign with copy of InputOrigin?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t closure #1 in closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)partial apply()
{
  return partial apply for closure #1 in closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)();
}

uint64_t static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(uint64_t a1)
{
  if (one-time initialization token for serialQueue != -1) {
    a1 = swift_once();
  }
  MEMORY[0x1F4188790](a1);
  type metadata accessor for DomainAffinityKVStore();
  OS_dispatch_queue.sync<A>(execute:)();
  return v2;
}

void *one-time initialization function for singletonInstances()
{
  uint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  static DomainAffinityKVStoreManager.singletonInstances = result;
  return result;
}

uint64_t one-time initialization function for serialQueue()
{
  type metadata accessor for OS_dispatch_queue();
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBCB40], v0);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v4 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v5);
  v10[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v6);
  (*(void (**)(char *, void))(v8 + 104))((char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static DomainAffinityKVStoreManager.serialQueue = result;
  return result;
}

void closure #1 in static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (one-time initialization token for singletonInstances != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static DomainAffinityKVStoreManager.singletonInstances;
  if (!*((void *)static DomainAffinityKVStoreManager.singletonInstances + 2))
  {
LABEL_10:
    swift_endAccess();
    type metadata accessor for DomainAffinityKVStore();
    swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v9 = DomainAffinityKVStore.init(name:)(a1, a2);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = static DomainAffinityKVStoreManager.singletonInstances;
    static DomainAffinityKVStoreManager.singletonInstances = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a1, a2, isUniquelyReferenced_nonNull_native);
    static DomainAffinityKVStoreManager.singletonInstances = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      uint64_t v20 = v21[0];
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v22 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v11, v18, "[DomainAffinityKVStoreManager] Created new DomainAffinityKVStore singleton instance for %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v20, -1, -1);
      char v15 = v19;
      goto LABEL_14;
    }
LABEL_15:

    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v9 = *(void **)(v6[7] + 8 * v7);
  swift_endAccess();
  swift_retain();
  swift_bridgeObjectRelease();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v11, v12)) {
    goto LABEL_15;
  }
  uint64_t v13 = (uint8_t *)swift_slowAlloc();
  uint64_t v14 = swift_slowAlloc();
  v21[0] = v14;
  *(_DWORD *)uint64_t v13 = 136315138;
  swift_bridgeObjectRetain();
  uint64_t v22 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v21);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1C8F83000, v11, v12, "[DomainAffinityKVStoreManager] Found existing DomainAffinityKVStore singleton instance for %s", v13, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1CB77E470](v14, -1, -1);
  char v15 = v13;
LABEL_14:
  MEMORY[0x1CB77E470](v15, -1, -1);

LABEL_16:
  *a3 = v9;
}

void partial apply for closure #1 in static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(void *a1@<X8>)
{
  closure #1 in static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t type metadata accessor for DomainAffinityKVStore()
{
  uint64_t result = type metadata singleton initialization cache for DomainAffinityKVStore;
  if (!type metadata singleton initialization cache for DomainAffinityKVStore) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t DomainAffinityKVStoreManager.deinit()
{
  return v0;
}

uint64_t DomainAffinityKVStoreManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DomainAffinityKVStore.dictStore.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DomainAffinityKVStore.dictStore.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DomainAffinityKVStore.dictStore.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

void *DomainAffinityKVStore.init(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v6 = MEMORY[0x1E4FBC860];
  _OWORD v3[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  URL.init(fileURLWithPath:isDirectory:)();
  unint64_t v7 = (void *)((char *)v3 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name);
  *unint64_t v7 = a1;
  v7[1] = a2;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:isDirectory:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))((uint64_t)v3 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_assetDir, v11, v8);
  type metadata accessor for OS_dispatch_queue();
  unint64_t v26 = 0;
  unint64_t v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  unint64_t v26 = 0xD000000000000018;
  unint64_t v27 = 0x80000001C91A0910;
  uint64_t v12 = *v7;
  uint64_t v13 = (void *)v7[1];
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0x516C61697265535DLL;
  v15._object = (void *)0xEC00000065756575;
  String.append(_:)(v15);
  uint64_t v16 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4FBCB40], v16);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v20 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v21);
  unint64_t v26 = v6;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v22);
  (*(void (**)(char *, void))(v24 + 104))((char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  *(void *)((char *)v3 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_serialQueue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  (*(void (**)(void))(*v3 + 184))();
  return v3;
}

uint64_t DomainAffinityKVStore.maximumDomainAffinity(forKey:usingNormalizer:)()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 160))();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = specialized Sequence.max(by:)(v1);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  if (!v4) {
    return 0;
  }
  return v2;
}

uint64_t specialized Sequence.max(by:)(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = 1 << v3;
  uint64_t v5 = -1;
  if (1 << v3 < 64) {
    uint64_t v5 = ~(-1 << (1 << v3));
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = __clz(__rbit64(v6));
    unint64_t v9 = (v6 - 1) & v6;
    int64_t v10 = (unint64_t)(v4 + 63) >> 6;
    while (2)
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 16 * v8);
      float v12 = *(float *)(*(void *)(a1 + 56) + 4 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9)
      {
LABEL_6:
        unint64_t v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v15 = v14 | (v7 << 6);
        goto LABEL_7;
      }
      while (1)
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          break;
        }
        if (v17 >= v10) {
          goto LABEL_27;
        }
        unint64_t v18 = *(void *)(v2 + 8 * v17);
        ++v7;
        if (!v18)
        {
          uint64_t v7 = v17 + 1;
          if (v17 + 1 >= v10) {
            goto LABEL_27;
          }
          unint64_t v18 = *(void *)(v2 + 8 * v7);
          if (!v18)
          {
            uint64_t v7 = v17 + 2;
            if (v17 + 2 >= v10) {
              goto LABEL_27;
            }
            unint64_t v18 = *(void *)(v2 + 8 * v7);
            if (!v18)
            {
              uint64_t v7 = v17 + 3;
              if (v17 + 3 >= v10) {
                goto LABEL_27;
              }
              unint64_t v18 = *(void *)(v2 + 8 * v7);
              if (!v18)
              {
                int64_t v19 = v17 + 4;
                if (v19 >= v10)
                {
LABEL_27:
                  swift_release();
                  return v11;
                }
                unint64_t v18 = *(void *)(v2 + 8 * v19);
                if (!v18)
                {
                  while (1)
                  {
                    uint64_t v7 = v19 + 1;
                    if (__OFADD__(v19, 1)) {
                      break;
                    }
                    if (v7 >= v10) {
                      goto LABEL_27;
                    }
                    unint64_t v18 = *(void *)(v2 + 8 * v7);
                    ++v19;
                    if (v18) {
                      goto LABEL_24;
                    }
                  }
                  __break(1u);
LABEL_44:
                  uint64_t v21 = 0;
                  uint64_t v22 = 6;
                  if (v10 > 6) {
                    uint64_t v22 = v10;
                  }
                  uint64_t v23 = v22 - 6;
                  while (v23 != v21)
                  {
                    unint64_t v20 = *(void *)(a1 + 112 + 8 * v21++);
                    if (v20)
                    {
                      uint64_t v7 = v21 + 5;
                      goto LABEL_31;
                    }
                  }
                  return 0;
                }
                uint64_t v7 = v19;
              }
            }
          }
        }
LABEL_24:
        unsigned int v13 = v18 - 1;
        unint64_t v9 = (v18 - 1) & v18;
        unint64_t v15 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_7:
        float v16 = *(float *)(*(void *)(a1 + 56) + 4 * v15);
        if (v12 < v16)
        {
          uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 16 * v15);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          float v12 = v16;
          if (v9) {
            goto LABEL_6;
          }
        }
        else if (v9)
        {
          goto LABEL_6;
        }
      }
      __break(1u);
LABEL_38:
      if (v13 >= 9)
      {
        unint64_t v20 = *(void *)(a1 + 96);
        if (v20)
        {
          uint64_t v7 = 4;
        }
        else
        {
          unint64_t v20 = *(void *)(a1 + 104);
          if (!v20) {
            goto LABEL_44;
          }
          uint64_t v7 = 5;
        }
LABEL_31:
        unint64_t v9 = (v20 - 1) & v20;
        unint64_t v8 = __clz(__rbit64(v20)) + (v7 << 6);
        continue;
      }
      break;
    }
  }
  else
  {
    unsigned int v13 = v3 & 0x3F;
    if (v13 > 6)
    {
      int64_t v10 = (unint64_t)(v4 + 63) >> 6;
      unint64_t v20 = *(void *)(a1 + 72);
      if (v20)
      {
        uint64_t v7 = 1;
        goto LABEL_31;
      }
      if (v13 >= 8)
      {
        unint64_t v20 = *(void *)(a1 + 80);
        if (v20)
        {
          uint64_t v7 = 2;
        }
        else
        {
          unint64_t v20 = *(void *)(a1 + 88);
          if (!v20) {
            goto LABEL_38;
          }
          uint64_t v7 = 3;
        }
        goto LABEL_31;
      }
    }
  }
  return 0;
}

uint64_t DomainAffinityKVStore.domainAffinities(forKey:usingNormalizer:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = v3;
  uint64_t v7 = a3();
  unint64_t v9 = v8;
  int64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 120);
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = v10(v11);
  if (*(void *)(v12 + 16) && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v15 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_retain_n();
  int64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    os_log_type_t v27 = v18;
    uint64_t v28 = a1;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v29 = v26;
    *(_DWORD *)uint64_t v19 = 136315906;
    uint64_t v20 = *(void *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name);
    unint64_t v21 = *(void *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name + 8);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    if (!v15) {
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    }
    swift_bridgeObjectRetain();
    uint64_t v22 = Dictionary.description.getter();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, a2, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 32) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v17, v27, "[DomainAffinityKVStore][%s] Found (value: %s) for (key: %s, normalizedKey: %s)", (uint8_t *)v19, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v26, -1, -1);
    MEMORY[0x1CB77E470](v19, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  return v15;
}

void DomainAffinityKVStore.setDomainAffinities(_:forKey:usingNormalizer:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, unint64_t))
{
  uint64_t v5 = v4;
  uint64_t v8 = a4(a2, a3);
  unint64_t v10 = v9;
  uint64_t v11 = *(uint64_t (**)(uint64_t *))(*(void *)v4 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = (void (*)(uint64_t *, void))v11(v29);
  char v14 = v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v28 = *v14;
  *char v14 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v8, v10, isUniquelyReferenced_nonNull_native);
  *char v14 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12(v29, 0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  int64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    v29[0] = v26;
    *(_DWORD *)uint64_t v19 = 136315906;
    uint64_t v25 = v8;
    uint64_t v20 = *(void *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name);
    unint64_t v21 = *(void *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name + 8);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v22 = Dictionary.description.getter();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 32) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v10, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v17, v18, "[DomainAffinityKVStore][%s] Updated (value: %s) for (key: %s, normalizedKey: %s)", (uint8_t *)v19, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v26, -1, -1);
    MEMORY[0x1CB77E470](v19, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
}

Swift::Void __swiftcall DomainAffinityKVStore.clear()()
{
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v2 = *(void (**)(unint64_t))(*(void *)v0 + 128);

  v2(v1);
}

Swift::Void __swiftcall DomainAffinityKVStore.load()()
{
  unint64_t v1 = *(NSObject **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_serialQueue);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in DomainAffinityKVStore.load();
  *(void *)(v2 + 24) = v0;
  void v4[4] = partial apply for thunk for @callee_guaranteed () -> ();
  void v4[5] = v2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed () -> ();
  v4[3] = &block_descriptor_13;
  uint64_t v3 = _Block_copy(v4);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v1) {
    __break(1u);
  }
}

void closure #1 in DomainAffinityKVStore.load()(uint64_t a1)
{
  void (*v11)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23[2];
  uint64_t v24;

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static PerformanceUtil.shared;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v23[0] = 0xD000000000000016;
  v23[1] = 0x80000001C91A0860;
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name);
  uint64_t v3 = *(void **)(a1 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name + 8);
  swift_bridgeObjectRetain();
  unint64_t v21 = v4;
  v5._uint64_t countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  uint64_t v22 = (unint64_t)v3;
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x292864616F6C2E5DLL;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v11 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t))(*(void *)v2 + 200);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : [String : Float]]);
  v11(&v24, 0xD000000000000016, 0x80000001C91A0860, 0, v10, "SiriInformationSearch/DomainAffinityKVStore.swift", 49, 2, 107, "load()", 6, 2, partial apply for closure #1 in closure #1 in DomainAffinityKVStore.load(), a1, v12);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)a1 + 128))(v24);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  unint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
  swift_retain_n();
  char v14 = Logger.logObject.getter();
  uint64_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    int64_t v17 = swift_slowAlloc();
    v23[0] = v17;
    *(_DWORD *)uint64_t v16 = 136315394;
    os_log_type_t v18 = v22;
    swift_bridgeObjectRetain();
    unint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v18, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v19 = swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2048;
    uint64_t v20 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(v19) + 16);
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v24 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C8F83000, v14, v15, "[DomainAffinityKVStore][%s] Loaded %ld entries from disk", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v17, -1, -1);
    MEMORY[0x1CB77E470](v16, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t closure #1 in closure #1 in DomainAffinityKVStore.load()()
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  uint64_t v1 = Data.init(contentsOf:options:)();
  if (!v0)
  {
    uint64_t v3 = v1;
    unint64_t v4 = v2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : [String : Float]]);
    lazy protocol witness table accessor for type [String : [String : Float]] and conformance <> [A : B]();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v3, v4);
  }
  return swift_release();
}

Swift::Void __swiftcall DomainAffinityKVStore.save()()
{
  uint64_t v1 = *(NSObject **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_serialQueue);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in DomainAffinityKVStore.save();
  *(void *)(v2 + 24) = v0;
  void v4[4] = thunk for @callee_guaranteed () -> ()partial apply;
  void v4[5] = v2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed () -> ();
  v4[3] = &block_descriptor_7_0;
  uint64_t v3 = _Block_copy(v4);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v1) {
    __break(1u);
  }
}

void closure #1 in DomainAffinityKVStore.save()(uint64_t a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static PerformanceUtil.shared;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v19[0] = 0xD000000000000016;
  v19[1] = 0x80000001C91A0860;
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name);
  uint64_t v3 = *(void **)(a1 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name + 8);
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x2928657661732E5DLL;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  (*(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t))(*(void *)v2 + 200))(0xD000000000000016, 0x80000001C91A0860, 0, v10, "SiriInformationSearch/DomainAffinityKVStore.swift", 49, 2, 121, "save()", 6, 2, partial apply for closure #1 in closure #1 in DomainAffinityKVStore.save(), a1, MEMORY[0x1E4FBC848] + 8);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
  swift_retain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    v19[0] = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, (unint64_t)v3, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v16 = swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2048;
    uint64_t v17 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(v16) + 16);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v18 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C8F83000, v12, v13, "[DomainAffinityKVStore][%s] Saved %ld entries to disk", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v15, -1, -1);
    MEMORY[0x1CB77E470](v14, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t closure #1 in closure #1 in DomainAffinityKVStore.save()(uint64_t a1)
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  (*(void (**)(void))(*(void *)a1 + 120))();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : [String : Float]]);
  lazy protocol witness table accessor for type [String : [String : Float]] and conformance <> [A : B]();
  uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v5 = v4;
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v1)
  {
    Data.write(to:options:)();
    return outlined consume of Data._Representation(v3, v5);
  }
  return result;
}

uint64_t DomainAffinityKVStore.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_baseAssetsDir;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  swift_bridgeObjectRelease();
  v3(v0 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_assetDir, v2);

  return v0;
}

uint64_t DomainAffinityKVStore.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_baseAssetsDir;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  swift_bridgeObjectRelease();
  v3(v0 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_assetDir, v2);

  return swift_deallocClassInstance();
}

void partial apply for closure #1 in DomainAffinityKVStore.load()()
{
  closure #1 in DomainAffinityKVStore.load()(v0);
}

uint64_t sub_1C90BBF5C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in DomainAffinityKVStore.save()()
{
  closure #1 in DomainAffinityKVStore.save()(v0);
}

uint64_t sub_1C90BBF74()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1C90BBF84@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1C90BBFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 128);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for DomainAffinityKVStoreManager()
{
  return self;
}

uint64_t method lookup function for DomainAffinityKVStoreManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DomainAffinityKVStoreManager);
}

uint64_t ObjC metadata update function for DomainAffinityKVStore()
{
  return type metadata accessor for DomainAffinityKVStore();
}

uint64_t type metadata completion function for DomainAffinityKVStore()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for DomainAffinityKVStore(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DomainAffinityKVStore);
}

uint64_t dispatch thunk of DomainAffinityKVStore.dictStore.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.dictStore.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.dictStore.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.maximumDomainAffinity(forKey:usingNormalizer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.domainAffinities(forKey:usingNormalizer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.setDomainAffinities(_:forKey:usingNormalizer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.clear()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.load()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.save()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t partial apply for closure #1 in closure #1 in DomainAffinityKVStore.save()()
{
  return closure #1 in closure #1 in DomainAffinityKVStore.save()(v0);
}

uint64_t partial apply for closure #1 in closure #1 in DomainAffinityKVStore.load()()
{
  return closure #1 in closure #1 in DomainAffinityKVStore.load()();
}

Class protocol witness for LNMetadataProviding.actionsConforming(to:logicalType:bundleIdentifier:) in conformance LNMetadataProvider(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return @nonobjc LNMetadataProvider.actionsConforming(to:logicalType:bundleIdentifier:)(a1, a2, a3, a4);
}

uint64_t dispatch thunk of LNMetadataProviding.actionsConforming(to:logicalType:bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

Class @nonobjc LNMetadataProvider.actionsConforming(to:logicalType:bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v14[1] = *(id *)MEMORY[0x1E4F143B8];
  type metadata accessor for LNSystemProtocol();
  lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject();
  v8.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  if (a4) {
    a4 = (void *)MEMORY[0x1CB77CA90](a3, a4);
  }
  v14[0] = 0;
  id v9 = objc_msgSend(v4, sel_actionsConformingToSystemProtocols_logicalType_bundleIdentifier_error_, v8.super.isa, a2, a4, v14);

  id v10 = v14[0];
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : LNActionMetadata]);
    v8.super.Class isa = (Class)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v11 = v10;
  }
  else
  {
    id v12 = v14[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v8.super.isa;
}

unint64_t type metadata accessor for LNSystemProtocol()
{
  unint64_t result = lazy cache variable for type metadata for LNSystemProtocol;
  if (!lazy cache variable for type metadata for LNSystemProtocol)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject;
  if (!lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject)
  {
    type metadata accessor for LNSystemProtocol();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject);
  }
  return result;
}

uint64_t PluginWarmupHandler.pluginIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PluginWarmupHandler.warmupComponents.getter()
{
  return swift_bridgeObjectRetain();
}

void *PluginWarmupHandler.__allocating_init(pluginIdentifier:warmupComponents:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

void *PluginWarmupHandler.init(pluginIdentifier:warmupComponents:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

uint64_t sub_1C90BC720()
{
  outlined consume of FeatureFlag(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x1F4186498](v0, 49, 7);
}

uint64_t PluginWarmupHandler.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PluginWarmupHandler.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PluginWarmupHandler()
{
  return self;
}

uint64_t method lookup function for PluginWarmupHandler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PluginWarmupHandler);
}

uint64_t dispatch thunk of PluginWarmupHandler.__allocating_init(pluginIdentifier:warmupComponents:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PluginWarmupHandler.warmup(request:serviceHelper:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t specialized Collection<>.merge<A>(with:by:isAscending:)(unint64_t a1, uint64_t a2, char a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v37 = MEMORY[0x1E4FBC860];
  if (a4 >> 62)
  {
LABEL_104:
    uint64_t v34 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = a4 & 0xFFFFFFFFFFFFFF8;
    uint64_t v6 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8;
  unint64_t v29 = a1;
  unint64_t v10 = v4 & 0xC000000000000001;
  unint64_t v30 = v4;
  v4 += 32;
  unint64_t v32 = a1 + 32;
  unint64_t v33 = a1 & 0xC000000000000001;
  a1 >>= 62;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            if ((uint64_t)v8 >= v6)
            {
              if (a1)
              {
                swift_bridgeObjectRetain();
                uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if ((uint64_t)v7 >= v28) {
                  return v37;
                }
              }
              else if ((int64_t)v7 >= *(void *)(v9 + 16))
              {
                return v37;
              }
            }
            if (v8 != v6) {
              break;
            }
            if (v33)
            {
              MEMORY[0x1CB77D510](v7, v29);
            }
            else
            {
              if ((v7 & 0x8000000000000000) != 0) {
                goto LABEL_101;
              }
              if (v7 >= *(void *)(v9 + 16)) {
                goto LABEL_102;
              }
              id v13 = *(id *)(v32 + 8 * v7);
            }
            MEMORY[0x1CB77CD90]();
            if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            BOOL v12 = __OFADD__(v7++, 1);
            if (v12) {
              goto LABEL_103;
            }
            unint64_t v8 = v6;
          }
          if (!a1) {
            break;
          }
          swift_bridgeObjectRetain();
          uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v7 != v14) {
            goto LABEL_28;
          }
LABEL_10:
          if (v10)
          {
            MEMORY[0x1CB77D510](v8, v30);
          }
          else
          {
            if ((v8 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
              goto LABEL_104;
            }
            if (v8 >= *(void *)(v34 + 16)) {
              goto LABEL_89;
            }
            id v11 = *(id *)(v4 + 8 * v8);
          }
          MEMORY[0x1CB77CD90]();
          if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          BOOL v12 = __OFADD__(v8++, 1);
          if (v12) {
            goto LABEL_90;
          }
        }
        if (v7 == *(void *)(v9 + 16)) {
          goto LABEL_10;
        }
LABEL_28:
        if (a3) {
          break;
        }
        if (v10)
        {
          id v19 = (id)MEMORY[0x1CB77D510](v8, v30);
        }
        else
        {
          if ((v8 & 0x8000000000000000) != 0) {
            goto LABEL_94;
          }
          if (v8 >= *(void *)(v34 + 16)) {
            goto LABEL_95;
          }
          id v19 = *(id *)(v4 + 8 * v8);
        }
        uint64_t v20 = v19;
        swift_getAtKeyPath();

        if (v33)
        {
          id v21 = (id)MEMORY[0x1CB77D510](v7, v29);
        }
        else
        {
          if ((v7 & 0x8000000000000000) != 0) {
            goto LABEL_96;
          }
          if (v7 >= *(void *)(v9 + 16)) {
            goto LABEL_98;
          }
          id v21 = *(id *)(v32 + 8 * v7);
        }
        uint64_t v22 = v21;
        swift_getAtKeyPath();

        if (v36 < v35)
        {
          if (v33) {
            MEMORY[0x1CB77D510](v7, v29);
          }
          else {
            id v27 = *(id *)(v32 + 8 * v7);
          }
          MEMORY[0x1CB77CD90]();
          if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t result = specialized Array._endMutation()();
          BOOL v12 = __OFADD__(v7++, 1);
          if (v12) {
            goto LABEL_105;
          }
        }
        else
        {
          if (v10) {
            MEMORY[0x1CB77D510](v8, v30);
          }
          else {
            id v24 = *(id *)(v4 + 8 * v8);
          }
          MEMORY[0x1CB77CD90]();
          if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          BOOL v12 = __OFADD__(v8++, 1);
          if (v12) {
            goto LABEL_100;
          }
        }
      }
      if (v10)
      {
        id v15 = (id)MEMORY[0x1CB77D510](v8, v30);
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0) {
          goto LABEL_91;
        }
        if (v8 >= *(void *)(v34 + 16)) {
          goto LABEL_92;
        }
        id v15 = *(id *)(v4 + 8 * v8);
      }
      uint64_t v16 = v15;
      swift_getAtKeyPath();

      if (v33)
      {
        id v17 = (id)MEMORY[0x1CB77D510](v7, v29);
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0) {
          goto LABEL_93;
        }
        if (v7 >= *(void *)(v9 + 16)) {
          goto LABEL_97;
        }
        id v17 = *(id *)(v32 + 8 * v7);
      }
      uint64_t v18 = v17;
      swift_getAtKeyPath();

      if (v36 >= v35) {
        break;
      }
      if (v10) {
        MEMORY[0x1CB77D510](v8, v30);
      }
      else {
        id v23 = *(id *)(v4 + 8 * v8);
      }
      MEMORY[0x1CB77CD90]();
      if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      BOOL v12 = __OFADD__(v8++, 1);
      if (v12) {
        goto LABEL_99;
      }
    }
    if (v33) {
      MEMORY[0x1CB77D510](v7, v29);
    }
    else {
      id v25 = *(id *)(v32 + 8 * v7);
    }
    MEMORY[0x1CB77CD90]();
    if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t result = specialized Array._endMutation()();
    BOOL v12 = __OFADD__(v7++, 1);
  }
  while (!v12);
  __break(1u);
LABEL_105:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.max(by:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_25;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (v2)
  {
    do
    {
      unint64_t v21 = v1 & 0xC000000000000001;
      if ((v1 & 0xC000000000000001) != 0)
      {
        unint64_t v4 = (void *)MEMORY[0x1CB77D510](0, v1);
      }
      else
      {
        if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        unint64_t v4 = *(id *)(v1 + 32);
      }
      uint64_t v22 = v4;
      if (v2 == 1)
      {
LABEL_7:
        unint64_t v5 = v22;
        goto LABEL_27;
      }
      uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
      unint64_t v6 = 1;
      unint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
      while (1)
      {
        if (v21)
        {
          unint64_t v8 = (void *)MEMORY[0x1CB77D510](v6, v1);
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_23;
          }
          if (v6 >= *(void *)(v20 + 16)) {
            goto LABEL_24;
          }
          unint64_t v8 = *(id *)(v1 + 8 * v6 + 32);
        }
        unint64_t v5 = v8;
        unint64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          break;
        }
        unint64_t v10 = v1;
        uint64_t v11 = v2;
        BOOL v12 = (void *)(*(uint64_t (**)(void))((*v7 & *v22) + 0xB8))();
        uint64_t v13 = (*(uint64_t (**)(void))((*v7 & *v12) + 0xE0))();

        unint64_t v14 = *(void *)(v13 + 16);
        uint64_t v15 = swift_bridgeObjectRelease();
        uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t))((*v7 & *v5) + 0xB8))(v15);
        uint64_t v17 = (*(uint64_t (**)(void))((*v7 & *v16) + 0xE0))();

        unint64_t v18 = *(void *)(v17 + 16);
        swift_bridgeObjectRelease();
        if (v14 < v18)
        {

          uint64_t v22 = v5;
          ++v6;
          uint64_t v2 = v11;
          BOOL v19 = v9 == v11;
          unint64_t v1 = v10;
          if (v19) {
            goto LABEL_27;
          }
        }
        else
        {

          ++v6;
          uint64_t v2 = v11;
          BOOL v19 = v9 == v11;
          unint64_t v1 = v10;
          if (v19) {
            goto LABEL_7;
          }
        }
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v2 = result;
    }
    while (result);
  }
  unint64_t v5 = 0;
LABEL_27:
  swift_bridgeObjectRelease();
  return (uint64_t)v5;
}

uint64_t AudioRanker.__allocating_init(localeIdentifier:)()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = type metadata accessor for Locale();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  unint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Locale.init(identifier:)();
  id v5 = objc_allocWithZone(MEMORY[0x1E4F9FBE0]);
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  id v7 = objc_msgSend(v5, sel_initWithLocale_, isa);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  *(void *)(v0 + 16) = v7;
  return v0;
}

uint64_t AudioRanker.init(localeIdentifier:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Locale.init(identifier:)();
  id v6 = objc_allocWithZone(MEMORY[0x1E4F9FBE0]);
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  id v8 = objc_msgSend(v6, sel_initWithLocale_, isa);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)(v1 + 16) = v8;
  return v1;
}

uint64_t AudioRanker.rank(query:clientCandidate:serverCandidate:clientSignals:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v232 = a4;
  uint64_t v222 = a1;
  uint64_t v256 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v249 = *(void *)(v256 - 8);
  MEMORY[0x1F4188790](v256);
  uint64_t v257 = (uint64_t)&v215 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v254 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LibraryResultTypedScoreMultiplier();
  uint64_t v255 = *(void *)(v254 - 8);
  MEMORY[0x1F4188790](v254);
  unint64_t v8 = (unint64_t)&v215 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t isUniquelyReferenced_nonNull_native = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientRankingOverrides();
  uint64_t v10 = *(void *)(isUniquelyReferenced_nonNull_native - 8);
  uint64_t v11 = MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
  uint64_t v13 = (char *)&v215 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v217 = (char *)&v215 - v14;
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  uint64_t v234 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v221 = (char *)&v215 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v251 = type metadata accessor for Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact();
  uint64_t v245 = *(void *)(v251 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v251);
  uint64_t v243 = (char *)&v215 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v242 = (char *)&v215 - v19;
  uint64_t v246 = type metadata accessor for Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.ClientMusicSuggestionImpactInfo();
  uint64_t v248 = *(void *)(v246 - 8);
  MEMORY[0x1F4188790](v246);
  v247 = (char *)&v215 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v225 = (uint64_t)&v215 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v252 = (uint64_t)&v215 - v24;
  uint64_t v228 = type metadata accessor for Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo();
  uint64_t v227 = *(void *)(v228 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v228);
  v253 = (char *)&v215 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  v250 = (char *)&v215 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v229 = (char *)&v215 - v29;
  uint64_t v260 = a3;
  unint64_t v261 = a2;
  uint64_t v30 = one-time initialization token for pommes;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30 != -1) {
    goto LABEL_76;
  }
  while (1)
  {
    uint64_t v31 = type metadata accessor for Logger();
    uint64_t v32 = __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v244 = v32;
    uint64_t v231 = v15;
    unint64_t v226 = v8;
    uint64_t v220 = isUniquelyReferenced_nonNull_native;
    uint64_t v219 = v10;
    uint64_t v218 = v13;
    if (v35)
    {
      float v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      unint64_t v258 = v37;
      *(_DWORD *)float v36 = 136315138;
      swift_beginAccess();
      uint64_t v38 = type metadata accessor for AudioItemCandidate(0);
      uint64_t v39 = swift_bridgeObjectRetain();
      uint64_t v40 = MEMORY[0x1CB77CDF0](v39, v38);
      unint64_t v42 = v41;
      swift_bridgeObjectRelease();
      uint64_t v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, (uint64_t *)&v258);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v33, v34, "AudioRanker#rank clientCandidate: %s", v36, 0xCu);
      swift_arrayDestroy();
      uint64_t v15 = v231;
      MEMORY[0x1CB77E470](v37, -1, -1);
      MEMORY[0x1CB77E470](v36, -1, -1);
    }

    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      unint64_t v258 = v46;
      *(_DWORD *)uint64_t v45 = 136315138;
      id v241 = (void (**)(char *, uint64_t))(v45 + 4);
      swift_beginAccess();
      uint64_t v47 = type metadata accessor for AudioItemCandidate(0);
      uint64_t v48 = swift_bridgeObjectRetain();
      uint64_t v49 = MEMORY[0x1CB77CDF0](v48, v47);
      unint64_t v51 = v50;
      swift_bridgeObjectRelease();
      uint64_t v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, (uint64_t *)&v258);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v43, v44, "AudioRanker#rank serverCandidate: %s", v45, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v46, -1, -1);
      MEMORY[0x1CB77E470](v45, -1, -1);
    }

    uint64_t v52 = v253;
    uint64_t v53 = v252;
    outlined init with copy of Apple_Parsec_Siri_V2alpha_ClientSignals?(v232, v252);
    uint64_t v54 = v234 + 48;
    uint64_t v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v234 + 48);
    unsigned int v56 = v55(v53, 1, v15);
    uint64_t v224 = v54;
    uint64_t v223 = v55;
    if (v56 == 1)
    {
      outlined destroy of Apple_Parsec_Siri_V2alpha_ClientSignals?(v53);
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v57, v58))
      {
        int v59 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v59 = 0;
        _os_log_impl(&dword_1C8F83000, v57, v58, "AudioRanker#rank musicRankingInfluenceImpactInfo: NOT_AVAILABLE ", v59, 2u);
        MEMORY[0x1CB77E470](v59, -1, -1);
      }
    }
    else
    {
      uint64_t v60 = v250;
      Apple_Parsec_Siri_V2alpha_ClientSignals.musicRankingInfluenceImpactInfo.getter();
      (*(void (**)(uint64_t, uint64_t))(v234 + 8))(v53, v15);
      uint64_t v61 = v227;
      uint64_t v62 = v229;
      uint64_t v63 = v228;
      (*(void (**)(char *, char *, uint64_t))(v227 + 32))(v229, v60, v228);
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v52, v62, v63);
      uint64_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = (uint8_t *)swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        unint64_t v258 = v67;
        *(_DWORD *)uint64_t v66 = 136315138;
        lazy protocol witness table accessor for type Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact and conformance Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact(&lazy protocol witness table cache variable for type Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo and conformance Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo, MEMORY[0x1E4F89B28]);
        uint64_t v68 = Message.debugDescription.getter();
        uint64_t v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, (uint64_t *)&v258);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v70 = *(void (**)(char *, uint64_t))(v61 + 8);
        v70(v52, v63);
        _os_log_impl(&dword_1C8F83000, v64, v65, "AudioRanker#rank musicRankingInfluenceImpactInfo: %s", v66, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v67, -1, -1);
        MEMORY[0x1CB77E470](v66, -1, -1);
      }
      else
      {
        uint64_t v70 = *(void (**)(char *, uint64_t))(v61 + 8);
        v70(v52, v63);
      }

      uint64_t v71 = v247;
      uint64_t v72 = v251;
      uint64_t v73 = Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.suggestionImpactInfo.getter();
      uint64_t v74 = *(void *)(v73 + 16);
      if (v74)
      {
        uint64_t v216 = v70;
        uint64_t v240 = *(void (**)(char *))(v248 + 16);
        unint64_t v75 = (*(unsigned __int8 *)(v248 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v248 + 80);
        uint64_t v215 = v73;
        os_log_t v76 = (char *)(v73 + v75);
        unsigned int v239 = *MEMORY[0x1E4F89A80];
        uint64_t v238 = v245 + 104;
        unsigned int v236 = *MEMORY[0x1E4F89AB0];
        id v241 = (void (**)(char *, uint64_t))(v248 + 8);
        v248 += 16;
        uint64_t v233 = *(void *)(v248 + 56);
        long long v235 = xmmword_1C9195D60;
        uint64_t v237 = v245 + 8;
        uint64_t v77 = v242;
        while (1)
        {
          uint64_t v251 = v74;
          v250 = v76;
          v240(v71);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact>);
          id v78 = (void *)v245;
          uint64_t v79 = *(void *)(v245 + 72);
          unint64_t v80 = (*(unsigned __int8 *)(v245 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v245 + 80);
          uint64_t v81 = swift_allocObject();
          *(_OWORD *)(v81 + 16) = v235;
          v253 = (char *)v81;
          uint64_t v82 = v81 + v80;
          uint64_t v83 = (void (*)(uint64_t, void, uint64_t))v78[13];
          v83(v82, v239, v72);
          uint64_t v84 = v82 + v79;
          v83(v82 + v79, v236, v72);
          Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.ClientMusicSuggestionImpactInfo.impact.getter();
          uint64_t v85 = (void (*)(char *, uint64_t, uint64_t))v78[2];
          uint64_t v86 = v243;
          uint64_t v252 = v82;
          v85(v243, v82, v72);
          lazy protocol witness table accessor for type Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact and conformance Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact(&lazy protocol witness table cache variable for type Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact and conformance Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact, MEMORY[0x1E4F89AC0]);
          LOBYTE(v79) = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v87 = (void (*)(char *, uint64_t))v78[1];
          v87(v86, v72);
          if (v79) {
            break;
          }
          v85(v86, v84, v72);
          char v88 = dispatch thunk of static Equatable.== infix(_:_:)();
          v87(v86, v72);
          v87(v77, v72);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          if (v88) {
            goto LABEL_71;
          }
          uint64_t v71 = v247;
          (*v241)(v247, v246);
          os_log_t v76 = &v250[v233];
          uint64_t v74 = v251 - 1;
          if (v251 == 1)
          {
            swift_bridgeObjectRelease();
            v216(v229, v228);
            goto LABEL_20;
          }
        }
        v87(v77, v72);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
LABEL_71:
        swift_bridgeObjectRelease();
        uint64_t v185 = Logger.logObject.getter();
        os_log_type_t v186 = static os_log_type_t.info.getter();
        BOOL v187 = os_log_type_enabled(v185, v186);
        uint64_t v188 = v247;
        if (v187)
        {
          uint64_t v189 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v189 = 0;
          _os_log_impl(&dword_1C8F83000, v185, v186, "AudioRanker#rank musicRankingInfluenceImpactInfo: Top result from the server is a slotted result. Ignoring the client results and returning the server results", v189, 2u);
          MEMORY[0x1CB77E470](v189, -1, -1);
        }

        (*v241)(v188, v246);
        v216(v229, v228);
        swift_beginAccess();
        uint64_t v190 = v260;
        goto LABEL_89;
      }
      swift_bridgeObjectRelease();
      v70(v229, v228);
    }
LABEL_20:
    uint64_t v89 = v222;
    swift_beginAccess();
    swift_beginAccess();
    AudioRanker.featurise(clientCandidate:serverCandidate:with:)(&v261, &v260, v89);
    swift_endAccess();
    swift_endAccess();
    uint64_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v90, v91))
    {
      os_log_t v92 = (uint8_t *)swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      unint64_t v258 = v93;
      *(_DWORD *)os_log_t v92 = 136315138;
      uint64_t v94 = type metadata accessor for AudioItemCandidate(0);
      uint64_t v95 = swift_bridgeObjectRetain();
      uint64_t v96 = MEMORY[0x1CB77CDF0](v95, v94);
      unint64_t v98 = v97;
      swift_bridgeObjectRelease();
      uint64_t v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v98, (uint64_t *)&v258);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v90, v91, "AudioRanker#rank Post featurise-clientCandidate: %s", v92, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v93, -1, -1);
      MEMORY[0x1CB77E470](v92, -1, -1);
    }

    int v99 = Logger.logObject.getter();
    os_log_type_t v100 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v99, v100))
    {
      uint64_t v101 = (uint8_t *)swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      unint64_t v258 = v102;
      *(_DWORD *)uint64_t v101 = 136315138;
      uint64_t v103 = type metadata accessor for AudioItemCandidate(0);
      uint64_t v104 = swift_bridgeObjectRetain();
      uint64_t v105 = MEMORY[0x1CB77CDF0](v104, v103);
      unint64_t v107 = v106;
      swift_bridgeObjectRelease();
      uint64_t v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v107, (uint64_t *)&v258);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v99, v100, "AudioRanker#rank Post featurise-serverCandidate: %s", v101, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v102, -1, -1);
      MEMORY[0x1CB77E470](v101, -1, -1);
    }

    unint64_t v108 = swift_bridgeObjectRetain();
    uint64_t v109 = (void *)specialized Sequence.max(by:)(v108);
    uint64_t v110 = swift_bridgeObjectRelease();
    os_log_type_t v111 = (void *)MEMORY[0x1E4FBC8C8];
    if (v109)
    {
      id v112 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v109) + 0xB8))(v110);

      uint64_t v114 = (*(uint64_t (**)(uint64_t))((*v111 & *v112) + 0xE0))(v113);
      unint64_t v115 = *(void *)(v114 + 16);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v115 = 1;
    }
    unint64_t v116 = swift_bridgeObjectRetain();
    uint64_t v117 = (void *)specialized Sequence.max(by:)(v116);
    uint64_t v118 = swift_bridgeObjectRelease();
    if (v117)
    {
      uint64_t v119 = (void *)(*(uint64_t (**)(uint64_t))((*v111 & *v117) + 0xB8))(v118);

      uint64_t v121 = (*(uint64_t (**)(uint64_t))((*v111 & *v119) + 0xE0))(v120);
      unint64_t v122 = *(void *)(v121 + 16);
      swift_bridgeObjectRelease();
      if (v122 <= v115) {
        unint64_t v122 = v115;
      }
    }
    else if (v115 <= 1)
    {
      unint64_t v122 = 1;
    }
    else
    {
      unint64_t v122 = v115;
    }
    swift_beginAccess();
    uint64_t v123 = *(void (**)(unint64_t *, unint64_t))(*(void *)v230 + 112);
    v123(&v261, v122);
    swift_endAccess();
    swift_beginAccess();
    v123((unint64_t *)&v260, v122);
    swift_endAccess();
    uint64_t v124 = Logger.logObject.getter();
    os_log_type_t v125 = static os_log_type_t.debug.getter();
    BOOL v126 = os_log_type_enabled(v124, v125);
    v250 = 0;
    if (v126)
    {
      uint64_t v127 = (uint8_t *)swift_slowAlloc();
      uint64_t v128 = swift_slowAlloc();
      unint64_t v258 = v128;
      *(_DWORD *)uint64_t v127 = 136315138;
      uint64_t v129 = type metadata accessor for AudioItemCandidate(0);
      uint64_t v130 = swift_bridgeObjectRetain();
      uint64_t v131 = MEMORY[0x1CB77CDF0](v130, v129);
      unint64_t v133 = v132;
      swift_bridgeObjectRelease();
      uint64_t v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v131, v133, (uint64_t *)&v258);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v124, v125, "AudioRanker#rank Post score-clientCandidate: %s", v127, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v128, -1, -1);
      MEMORY[0x1CB77E470](v127, -1, -1);
    }

    uint64_t v134 = v260;
    swift_bridgeObjectRetain_n();
    uint64_t v135 = Logger.logObject.getter();
    os_log_type_t v136 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v135, v136))
    {
      uint64_t v137 = (uint8_t *)swift_slowAlloc();
      uint64_t v138 = swift_slowAlloc();
      unint64_t v258 = v138;
      *(_DWORD *)uint64_t v137 = 136315138;
      uint64_t v139 = type metadata accessor for AudioItemCandidate(0);
      uint64_t v140 = MEMORY[0x1CB77CDF0](v134, v139);
      uint64_t v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v141, (uint64_t *)&v258);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v135, v136, "AudioRanker#rank Post score-serverCandidate: %s", v137, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v138, -1, -1);
      MEMORY[0x1CB77E470](v137, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v142 = v234;
    uint64_t v143 = v257;
    uint64_t v144 = (char *)v226;
    uint64_t v145 = v225;
    outlined init with copy of Apple_Parsec_Siri_V2alpha_ClientSignals?(v232, v225);
    uint64_t v146 = v231;
    if (v223(v145, 1, v231) == 1)
    {
      outlined destroy of Apple_Parsec_Siri_V2alpha_ClientSignals?(v145);
      goto LABEL_81;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v142 + 32))(v221, v145, v146);
    uint64_t v147 = v217;
    Apple_Parsec_Siri_V2alpha_ClientSignals.clientRankingOverrides.getter();
    Apple_Parsec_Siri_V2alpha_ClientRankingOverrides.libraryResultUniversalScoreMultiplier.getter();
    float v149 = v148;
    uint64_t v150 = *(void (**)(char *, uint64_t))(v219 + 8);
    uint64_t v151 = v147;
    uint64_t v152 = v220;
    v150(v151, v220);
    float v153 = v149 >= 0.001 ? v149 : 1.0;
    unint64_t v154 = v218;
    uint64_t v155 = Apple_Parsec_Siri_V2alpha_ClientSignals.clientRankingOverrides.getter();
    uint64_t v156 = MEMORY[0x1CB7791A0](v155);
    v150(v154, v152);
    uint64_t v157 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    uint64_t v10 = *(void *)(v156 + 16);
    if (!v10) {
      break;
    }
    v253 = *(char **)(v255 + 16);
    uint64_t v15 = v156 + ((*(unsigned __int8 *)(v255 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v255 + 80));
    uint64_t v251 = v249 + 16;
    uint64_t v158 = (void (**)(uint64_t, uint64_t))(v249 + 8);
    uint64_t v159 = (void (**)(char *, uint64_t))(v255 + 8);
    v255 += 16;
    uint64_t v252 = *(void *)(v255 + 56);
    uint64_t v248 = v156;
    swift_bridgeObjectRetain();
    uint64_t v160 = v254;
    while (1)
    {
      uint64_t v161 = ((uint64_t (*)(char *, uint64_t, uint64_t))v253)(v144, v15, v160);
      uint64_t v162 = MEMORY[0x1CB779530](v161);
      uint64_t v13 = v144;
      float v163 = MEMORY[0x1CB779540](v162);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v258 = (unint64_t)v157;
      unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v143);
      uint64_t v165 = v157[2];
      BOOL v166 = (v164 & 1) == 0;
      uint64_t v167 = v165 + v166;
      if (__OFADD__(v165, v166)) {
        break;
      }
      char v168 = v164;
      if (v157[3] < v167)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v167, isUniquelyReferenced_nonNull_native);
        unint64_t v169 = specialized __RawDictionaryStorage.find<A>(_:)(v257);
        if ((v168 & 1) != (v170 & 1)) {
          goto LABEL_92;
        }
        unint64_t v8 = v169;
        goto LABEL_52;
      }
      uint64_t v160 = v254;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
LABEL_52:
        uint64_t v160 = v254;
      }
      float v171 = v153 * v163;
      uint64_t v157 = (void *)v258;
      if (v168)
      {
        *(float *)(*(void *)(v258 + 56) + 4 * v8) = v171;
        uint64_t v143 = v257;
      }
      else
      {
        *(void *)(v258 + 8 * (v8 >> 6) + 64) |= 1 << v8;
        uint64_t v143 = v257;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v249 + 16))(v157[6] + *(void *)(v249 + 72) * v8, v257, v256);
        *(float *)(v157[7] + 4 * v8) = v171;
        uint64_t v172 = v157[2];
        BOOL v173 = __OFADD__(v172, 1);
        uint64_t v174 = v172 + 1;
        if (v173) {
          goto LABEL_75;
        }
        v157[2] = v174;
      }
      swift_bridgeObjectRelease();
      (*v158)(v143, v256);
      uint64_t v144 = v13;
      (*v159)(v13, v160);
      v15 += v252;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_59;
      }
    }
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    swift_once();
  }
LABEL_59:
  swift_bridgeObjectRelease();
  unint64_t v175 = v261;
  if (v261 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v176 = _CocoaArrayWrapper.endIndex.getter();
    if (!v176) {
      goto LABEL_78;
    }
LABEL_61:
    if (v176 >= 1)
    {
      uint64_t v177 = 0;
      do
      {
        if ((v175 & 0xC000000000000001) != 0) {
          uint64_t v180 = (void *)MEMORY[0x1CB77D510](v177, v175);
        }
        else {
          uint64_t v180 = *(id *)(v175 + 8 * v177 + 32);
        }
        uint64_t v181 = v180;
        float v182 = v153;
        if (v157[2])
        {
          unint64_t v183 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v180 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType);
          float v182 = v153;
          if (v184) {
            float v182 = *(float *)(v157[7] + 4 * v183);
          }
        }
        ++v177;
        uint64_t v178 = (void (*)(unint64_t *, void))(*(uint64_t (**)(unint64_t *))((*MEMORY[0x1E4FBC8C8] & *v181) + 0xB0))(&v258);
        float *v179 = v182 * *v179;
        v178(&v258, 0);
      }
      while (v176 != v177);
      goto LABEL_78;
    }
    __break(1u);
LABEL_92:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    uint64_t v176 = *(void *)((v261 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v176) {
      goto LABEL_61;
    }
LABEL_78:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v191 = Logger.logObject.getter();
    os_log_type_t v192 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v191, v192))
    {
      uint64_t v193 = (uint8_t *)swift_slowAlloc();
      uint64_t v194 = swift_slowAlloc();
      unint64_t v258 = v194;
      *(_DWORD *)uint64_t v193 = 136315138;
      uint64_t v195 = type metadata accessor for AudioItemCandidate(0);
      uint64_t v196 = swift_bridgeObjectRetain();
      uint64_t v197 = MEMORY[0x1CB77CDF0](v196, v195);
      unint64_t v199 = v198;
      swift_bridgeObjectRelease();
      uint64_t v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v197, v199, (uint64_t *)&v258);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v191, v192, "AudioRanker#rank Post multipliers-clientCandidate: %s", v193, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v194, -1, -1);
      MEMORY[0x1CB77E470](v193, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v234 + 8))(v221, v231);
LABEL_81:
    v200 = v250;
    unint64_t v201 = v261;
    if ((v261 & 0x8000000000000000) != 0 || (v261 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v202 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v201);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v202 = v261 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n();
    }
    unint64_t v258 = v202;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v258);
    if (!v200)
    {
      swift_bridgeObjectRelease();
      unint64_t v203 = v258;
      unint64_t v261 = v258;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      uint64_t v204 = Logger.logObject.getter();
      os_log_type_t v205 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v204, v205))
      {
        uint64_t v206 = (uint8_t *)swift_slowAlloc();
        uint64_t v207 = swift_slowAlloc();
        unint64_t v258 = v207;
        *(_DWORD *)uint64_t v206 = 136315138;
        uint64_t v208 = type metadata accessor for AudioItemCandidate(0);
        uint64_t v209 = MEMORY[0x1CB77CDF0](v203, v208);
        uint64_t v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v209, v210, (uint64_t *)&v258);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v204, v205, "AudioRanker#rank Post sorting by score-clientCandidate: %s", v206, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v207, -1, -1);
        MEMORY[0x1CB77E470](v206, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      unint64_t v211 = v260;
      uint64_t KeyPath = swift_getKeyPath();
      swift_bridgeObjectRetain();
      unint64_t v213 = swift_bridgeObjectRetain();
      uint64_t v190 = specialized Collection<>.merge<A>(with:by:isAscending:)(v213, KeyPath, 0, v211);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_89:
      swift_bridgeObjectRelease();
      return v190;
    }
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void key path getter for AudioItemCandidate.score : AudioItemCandidate(void **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA0))();
}

uint64_t key path setter for AudioItemCandidate.score : AudioItemCandidate(float *a1, void **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA8))(*a1);
}

uint64_t AudioRanker.featurise(clientCandidate:serverCandidate:with:)(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Featuriser>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9198780;
  uint64_t v9 = type metadata accessor for AudioTypeFeaturiser(0);
  swift_allocObject();
  uint64_t v10 = swift_retain();
  uint64_t v11 = specialized AudioTypeFeaturiser.init(query:)(v10);
  swift_release();
  *(void *)(inited + 32) = v11;
  uint64_t v54 = inited + 32;
  *(void *)(inited + 56) = v9;
  *(void *)(inited + 64) = &protocol witness table for AudioTypeFeaturiser;
  uint64_t matched = type metadata accessor for SourceMatchFeaturiser();
  swift_allocObject();
  uint64_t v13 = swift_retain();
  uint64_t v14 = specialized SourceMatchFeaturiser.init(query:)(v13);
  swift_release();
  *(void *)(inited + 96) = matched;
  *(void *)(inited + 104) = &protocol witness table for SourceMatchFeaturiser;
  *(void *)(inited + 72) = v14;
  uint64_t v15 = type metadata accessor for GlideFeaturiser();
  swift_allocObject();
  uint64_t v16 = swift_retain();
  uint64_t v17 = specialized GlideFeaturiser.init(query:)(v16);
  swift_release();
  *(void *)(inited + 136) = v15;
  *(void *)(inited + 144) = &protocol witness table for GlideFeaturiser;
  *(void *)(inited + 112) = v17;
  uint64_t v18 = *(void **)(v4 + 16);
  uint64_t v19 = type metadata accessor for EntityNameFeaturiser();
  swift_allocObject();
  swift_retain();
  uint64_t v20 = EntityNameFeaturiser.init(query:localizedTokenizer:)(a3, v18);
  *(void *)(inited + 176) = v19;
  *(void *)(inited + 184) = &protocol witness table for EntityNameFeaturiser;
  *(void *)(inited + 152) = v20;
  uint64_t v21 = type metadata accessor for SourcePriorityFeaturiser();
  swift_allocObject();
  uint64_t v22 = swift_retain();
  uint64_t v23 = SourcePriorityFeaturiser.init(query:)(v22);
  *(void *)(inited + 216) = v21;
  *(void *)(inited + 224) = &protocol witness table for SourcePriorityFeaturiser;
  *(void *)(inited + 192) = v23;
  uint64_t v24 = type metadata accessor for DownloadedFeaturiser();
  swift_allocObject();
  uint64_t v25 = swift_retain();
  uint64_t v26 = specialized DownloadedFeaturiser.init(query:)(v25);
  swift_release();
  *(void *)(inited + 256) = v24;
  *(void *)(inited + 264) = &protocol witness table for DownloadedFeaturiser;
  *(void *)(inited + 232) = v26;
  unint64_t v27 = *a1;
  if (*a1 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v58 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v28 = *a2;
  if ((unint64_t)*a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v29 < 0) {
      __break(1u);
    }
    uint64_t v51 = v28 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    uint64_t v51 = v28 & 0xFFFFFFFFFFFFFF8;
    uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v30 = 0;
  unint64_t v55 = v27 & 0xC000000000000001;
  uint64_t v56 = v29;
  unint64_t v57 = v28 & 0xC000000000000001;
  a2 = (uint64_t *)v27;
  uint64_t v52 = v28;
  do
  {
    uint64_t v31 = (void *)(v54 + 40 * v30);
    if (v58)
    {
      if (v58 < 1)
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      uint64_t v53 = v30;
      uint64_t v32 = v54 + 40 * v30;
      unint64_t v33 = (uint64_t *)(v32 + 24);
      os_log_type_t v34 = (uint64_t *)(v32 + 32);
      swift_bridgeObjectRetain_n();
      uint64_t v35 = 0;
      do
      {
        if (v55) {
          id v36 = (id)MEMORY[0x1CB77D510](v35, v27);
        }
        else {
          id v36 = *(id *)(v27 + 8 * v35 + 32);
        }
        uint64_t v37 = v36;
        ++v35;
        id v59 = v36;
        uint64_t v38 = *v33;
        uint64_t v39 = *v34;
        __swift_project_boxed_opaque_existential_1(v31, *v33);
        id v40 = v37;
        Featuriser.featurise(candidate:)((uint64_t)&v59, v38, v39);
        id v41 = v59;

        unint64_t v27 = (unint64_t)a2;
      }
      while (v58 != v35);
      swift_bridgeObjectRelease_n();
      uint64_t v28 = v52;
      uint64_t v30 = v53;
      uint64_t v29 = v56;
    }
    if (v29)
    {
      if (!v57)
      {
        uint64_t v42 = *(void *)(v51 + 16);
        if (!v42 || v29 > v42) {
          goto LABEL_26;
        }
      }
      uint64_t v43 = 0;
      uint64_t v44 = v54 + 40 * v30;
      uint64_t v45 = (uint64_t *)(v44 + 24);
      uint64_t v46 = (uint64_t *)(v44 + 32);
      do
      {
        if (v57) {
          id v47 = (id)MEMORY[0x1CB77D510](v43, v28);
        }
        else {
          id v47 = *(id *)(v28 + 8 * v43 + 32);
        }
        id v59 = v47;
        uint64_t v48 = *v45;
        uint64_t v49 = *v46;
        __swift_project_boxed_opaque_existential_1(v31, *v45);
        (*(void (**)(id *, uint64_t, uint64_t, uint64_t))(v49 + 16))(&v59, v43, v48, v49);

        ++v43;
        uint64_t v29 = v56;
      }
      while (v56 != v43);
    }
    ++v30;
    unint64_t v27 = (unint64_t)a2;
  }
  while (v30 != 6);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Featuriser);
  return swift_arrayDestroy();
}

Swift::Void __swiftcall AudioRanker.score(items:maxCandidateFieldCount:)(Swift::OpaquePointer *items, Swift::Int maxCandidateFieldCount)
{
  unint64_t rawValue = (unint64_t)items->_rawValue;
  if (!((unint64_t)items->_rawValue >> 62))
  {
    uint64_t v4 = *(void *)((rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v4) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_10;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      if ((rawValue & 0xC000000000000001) != 0) {
        uint64_t v6 = (void *)MEMORY[0x1CB77D510](v5, rawValue);
      }
      else {
        uint64_t v6 = *(id *)(rawValue + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      ++v5;
      unint64_t v8 = v6;
      closure #1 in AudioRanker.score(items:maxCandidateFieldCount:)(&v8, maxCandidateFieldCount);
    }
    while (v4 != v5);
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t closure #1 in AudioRanker.score(items:maxCandidateFieldCount:)(void **a1, int64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = *(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xB8);
  uint64_t v6 = (void *)v5();
  float v7 = (*(float (**)(void))((*v4 & *v6) + 0xC8))();

  unint64_t v8 = (void *)v5();
  float v9 = (*(float (**)(void))((*v4 & *v8) + 0xB0))();

  uint64_t v10 = (void *)v5();
  float v11 = (*(float (**)(void))((*v4 & *v10) + 0x98))();

  uint64_t v12 = (void *)v5();
  uint64_t v13 = (*(uint64_t (**)(void))((*v4 & *v12) + 0xE0))();

  uint64_t v14 = (void *)v5();
  int64_t v15 = (*(uint64_t (**)(void))((*v4 & *v14) + 0xF8))();

  uint64_t v16 = (void *)v5();
  uint64_t v17 = (*(uint64_t (**)(void))((*v4 & *v16) + 0x110))();

  specialized static EntityNameFeaturiser.score(_:_:_:_:)(v13, v15, v17, a2);
  float v19 = v18;
  uint64_t v20 = swift_bridgeObjectRelease();
  uint64_t v21 = (void *)((uint64_t (*)(uint64_t))v5)(v20);
  float v22 = (*(float (**)(void))((*v4 & *v21) + 0x140))();

  uint64_t v23 = (void *)v5();
  float v24 = (*(float (**)(void))((*v4 & *v23) + 0x128))();

  float v25 = (float)((float)(v22 * v24) * 2.2) + 1.0;
  if (v22 < 0.001) {
    float v25 = 1.0;
  }
  float v26 = (float)((float)((float)(v7 * v9) * v11) * v19) * v25;
  unint64_t v27 = (void *)v5();
  float v28 = (*(float (**)(void))((*v4 & *v27) + 0x158))();

  uint64_t v29 = (void *)v5();
  (*(void (**)(void))((*v4 & *v29) + 0x128))();

  return (*(uint64_t (**)(float))((*v4 & *v3) + 0xA8))(v26 * v28);
}

uint64_t AudioRanker.deinit()
{
  return v0;
}

uint64_t AudioRanker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AudioRanking.rank(query:clientCandidate:serverCandidate:clientSignals:) in conformance AudioRanker()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 < v4)
  {
    if (v4 >= 0) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = v4 + 1;
    }
    if (v4 >= -1)
    {
      Swift::Int v7 = v5;
      unint64_t v108 = a1;
      if (v4 < 2)
      {
        uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
        uint64_t v120 = MEMORY[0x1E4FBC860];
        __dst = (void **)((MEMORY[0x1E4FBC860] & 0xFFFFFFFFFFFFFF8) + 32);
        if (v4 != 1)
        {
          unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
          if (v13 < 2) {
            goto LABEL_112;
          }
          goto LABEL_99;
        }
      }
      else
      {
        uint64_t v8 = v6 >> 1;
        type metadata accessor for AudioItemCandidate(0);
        uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
        __dst = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
        uint64_t v120 = v9;
      }
      Swift::Int v11 = 0;
      uint64_t v12 = *a1;
      uint64_t v110 = *a1 + 16;
      Swift::Int v111 = v7;
      uint64_t v109 = *a1 - 8;
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      Swift::Int v116 = v4;
      uint64_t v119 = *a1;
      while (1)
      {
        Swift::Int v14 = v11++;
        Swift::Int v115 = v14;
        if (v11 < v4)
        {
          id v112 = v10;
          int64_t v15 = *(void **)(v12 + 8 * v11);
          uint64_t v16 = *(void **)(v12 + 8 * v14);
          uint64_t v17 = (void *)MEMORY[0x1E4FBC8C8];
          float v18 = *(float (**)(void))((*MEMORY[0x1E4FBC8C8] & *v15) + 0xA0);
          float v19 = v15;
          uint64_t v20 = v16;
          float v21 = v18();
          Swift::Int v4 = v116;
          float v22 = v21;
          float v23 = (*(float (**)(void))((*v17 & *v20) + 0xA0))();

          Swift::Int v11 = v14 + 2;
          if (v14 + 2 < v116)
          {
            float v24 = (id *)(v110 + 8 * v14);
            while (1)
            {
              float v25 = *(v24 - 1);
              float v26 = (void *)MEMORY[0x1E4FBC8C8];
              unint64_t v27 = *(float (**)(void))((*MEMORY[0x1E4FBC8C8] & *(void *)*v24) + 0xA0);
              id v28 = *v24;
              uint64_t v29 = v25;
              float v30 = v27();
              float v31 = (*(float (**)(void))((*v26 & *v29) + 0xA0))();

              if (v23 < v22 == v31 >= v30) {
                break;
              }
              ++v11;
              ++v24;
              Swift::Int v4 = v116;
              if (v116 == v11)
              {
                Swift::Int v11 = v116;
                goto LABEL_22;
              }
            }
            Swift::Int v4 = v116;
          }
LABEL_22:
          uint64_t v10 = v112;
          uint64_t v12 = v119;
          if (v23 < v22)
          {
            if (v11 < v14) {
              goto LABEL_136;
            }
            if (v14 < v11)
            {
              uint64_t v32 = (uint64_t *)(v109 + 8 * v11);
              Swift::Int v33 = v11;
              Swift::Int v34 = v14;
              uint64_t v35 = (uint64_t *)(v119 + 8 * v14);
              do
              {
                if (v34 != --v33)
                {
                  if (!v119) {
                    goto LABEL_141;
                  }
                  uint64_t v36 = *v35;
                  *uint64_t v35 = *v32;
                  *uint64_t v32 = v36;
                }
                ++v34;
                --v32;
                ++v35;
              }
              while (v34 < v33);
            }
          }
        }
        if (v11 < v4)
        {
          if (__OFSUB__(v11, v14)) {
            goto LABEL_134;
          }
          if (v11 - v14 < v111)
          {
            if (__OFADD__(v14, v111)) {
              goto LABEL_137;
            }
            if (v14 + v111 >= v4) {
              Swift::Int v37 = v4;
            }
            else {
              Swift::Int v37 = v14 + v111;
            }
            if (v37 < v14)
            {
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
              break;
            }
            if (v11 != v37)
            {
              uint64_t v113 = v10;
              Swift::Int v114 = v37;
              uint64_t v38 = v109 + 8 * v11;
              do
              {
                uint64_t v39 = *(void **)(v12 + 8 * v11);
                Swift::Int v40 = v14;
                uint64_t v117 = v38;
                while (1)
                {
                  id v41 = *(void **)v38;
                  uint64_t v42 = (void *)MEMORY[0x1E4FBC8C8];
                  uint64_t v43 = *(float (**)(void))((*MEMORY[0x1E4FBC8C8] & *v39) + 0xA0);
                  uint64_t v44 = v39;
                  uint64_t v45 = v41;
                  float v46 = v43();
                  float v47 = (*(float (**)(void))((*v42 & *v45) + 0xA0))();

                  if (v47 >= v46) {
                    break;
                  }
                  uint64_t v12 = v119;
                  if (!v119) {
                    goto LABEL_139;
                  }
                  uint64_t v48 = *(void **)v38;
                  uint64_t v39 = *(void **)(v38 + 8);
                  *(void *)uint64_t v38 = v39;
                  *(void *)(v38 + 8) = v48;
                  v38 -= 8;
                  if (v11 == ++v40) {
                    goto LABEL_42;
                  }
                }
                uint64_t v12 = v119;
LABEL_42:
                ++v11;
                uint64_t v38 = v117 + 8;
                Swift::Int v14 = v115;
              }
              while (v11 != v114);
              Swift::Int v11 = v114;
              uint64_t v10 = v113;
            }
          }
        }
        if (v11 < v14) {
          goto LABEL_129;
        }
        uint64_t v49 = v10;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v10 = v49;
        }
        else {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v49 + 2) + 1, 1, v49);
        }
        unint64_t v51 = *((void *)v10 + 2);
        unint64_t v50 = *((void *)v10 + 3);
        unint64_t v13 = v51 + 1;
        uint64_t v12 = v119;
        if (v51 >= v50 >> 1)
        {
          os_log_type_t v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, v10);
          uint64_t v12 = v119;
          uint64_t v10 = v100;
        }
        *((void *)v10 + 2) = v13;
        uint64_t v52 = v10 + 32;
        uint64_t v53 = &v10[16 * v51 + 32];
        *(void *)uint64_t v53 = v14;
        *((void *)v53 + 1) = v11;
        if (v51)
        {
          while (1)
          {
            unint64_t v54 = v13 - 1;
            if (v13 >= 4)
            {
              id v59 = &v52[16 * v13];
              uint64_t v60 = *((void *)v59 - 8);
              uint64_t v61 = *((void *)v59 - 7);
              BOOL v65 = __OFSUB__(v61, v60);
              uint64_t v62 = v61 - v60;
              if (v65) {
                goto LABEL_118;
              }
              uint64_t v64 = *((void *)v59 - 6);
              uint64_t v63 = *((void *)v59 - 5);
              BOOL v65 = __OFSUB__(v63, v64);
              uint64_t v57 = v63 - v64;
              char v58 = v65;
              if (v65) {
                goto LABEL_119;
              }
              unint64_t v66 = v13 - 2;
              uint64_t v67 = &v52[16 * v13 - 32];
              uint64_t v69 = *(void *)v67;
              uint64_t v68 = *((void *)v67 + 1);
              BOOL v65 = __OFSUB__(v68, v69);
              uint64_t v70 = v68 - v69;
              if (v65) {
                goto LABEL_121;
              }
              BOOL v65 = __OFADD__(v57, v70);
              uint64_t v71 = v57 + v70;
              if (v65) {
                goto LABEL_124;
              }
              if (v71 >= v62)
              {
                uint64_t v89 = &v52[16 * v54];
                uint64_t v91 = *(void *)v89;
                uint64_t v90 = *((void *)v89 + 1);
                BOOL v65 = __OFSUB__(v90, v91);
                uint64_t v92 = v90 - v91;
                if (v65) {
                  goto LABEL_128;
                }
                BOOL v82 = v57 < v92;
                goto LABEL_86;
              }
            }
            else
            {
              if (v13 != 3)
              {
                uint64_t v83 = *((void *)v10 + 4);
                uint64_t v84 = *((void *)v10 + 5);
                BOOL v65 = __OFSUB__(v84, v83);
                uint64_t v76 = v84 - v83;
                char v77 = v65;
                goto LABEL_80;
              }
              uint64_t v56 = *((void *)v10 + 4);
              uint64_t v55 = *((void *)v10 + 5);
              BOOL v65 = __OFSUB__(v55, v56);
              uint64_t v57 = v55 - v56;
              char v58 = v65;
            }
            if (v58) {
              goto LABEL_120;
            }
            unint64_t v66 = v13 - 2;
            uint64_t v72 = &v52[16 * v13 - 32];
            uint64_t v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            BOOL v75 = __OFSUB__(v73, v74);
            uint64_t v76 = v73 - v74;
            char v77 = v75;
            if (v75) {
              goto LABEL_123;
            }
            id v78 = &v52[16 * v54];
            uint64_t v80 = *(void *)v78;
            uint64_t v79 = *((void *)v78 + 1);
            BOOL v65 = __OFSUB__(v79, v80);
            uint64_t v81 = v79 - v80;
            if (v65) {
              goto LABEL_126;
            }
            if (__OFADD__(v76, v81)) {
              goto LABEL_127;
            }
            if (v76 + v81 >= v57)
            {
              BOOL v82 = v57 < v81;
LABEL_86:
              if (v82) {
                unint64_t v54 = v66;
              }
              goto LABEL_88;
            }
LABEL_80:
            if (v77) {
              goto LABEL_122;
            }
            uint64_t v85 = &v52[16 * v54];
            uint64_t v87 = *(void *)v85;
            uint64_t v86 = *((void *)v85 + 1);
            BOOL v65 = __OFSUB__(v86, v87);
            uint64_t v88 = v86 - v87;
            if (v65) {
              goto LABEL_125;
            }
            if (v88 < v76) {
              goto LABEL_14;
            }
LABEL_88:
            unint64_t v93 = v54 - 1;
            if (v54 - 1 >= v13)
            {
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
              goto LABEL_138;
            }
            if (!v12) {
              goto LABEL_140;
            }
            uint64_t v94 = v10;
            uint64_t v95 = &v52[16 * v93];
            uint64_t v96 = *(void *)v95;
            unint64_t v97 = &v52[16 * v54];
            uint64_t v98 = *((void *)v97 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v12 + 8 * *(void *)v95), (id *)(v12 + 8 * *(void *)v97), v12 + 8 * v98, __dst);
            if (v1) {
              goto LABEL_112;
            }
            if (v98 < v96) {
              goto LABEL_115;
            }
            if (v54 > *((void *)v94 + 2)) {
              goto LABEL_116;
            }
            *(void *)uint64_t v95 = v96;
            *(void *)&v52[16 * v93 + 8] = v98;
            unint64_t v99 = *((void *)v94 + 2);
            if (v54 >= v99) {
              goto LABEL_117;
            }
            unint64_t v13 = v99 - 1;
            memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
            uint64_t v10 = v94;
            *((void *)v94 + 2) = v99 - 1;
            uint64_t v12 = v119;
            if (v99 <= 2) {
              goto LABEL_14;
            }
          }
        }
        unint64_t v13 = 1;
LABEL_14:
        Swift::Int v4 = v116;
        if (v11 >= v116)
        {
          uint64_t v2 = v1;
          if (v13 < 2)
          {
LABEL_112:
            swift_bridgeObjectRelease();
            *(void *)((v120 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
            specialized Array._endMutation()();
            swift_bridgeObjectRelease();
            return;
          }
LABEL_99:
          uint64_t v101 = *v108;
          while (1)
          {
            unint64_t v102 = v13 - 2;
            if (v13 < 2) {
              goto LABEL_130;
            }
            if (!v101) {
              goto LABEL_142;
            }
            uint64_t v103 = v10;
            uint64_t v104 = *(void *)&v10[16 * v102 + 32];
            uint64_t v105 = *(void *)&v10[16 * v13 + 24];
            specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v101 + 8 * v104), (id *)(v101 + 8 * *(void *)&v10[16 * v13 + 16]), v101 + 8 * v105, __dst);
            if (v2) {
              goto LABEL_112;
            }
            if (v105 < v104) {
              goto LABEL_131;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v103);
            }
            if (v102 >= *((void *)v103 + 2)) {
              goto LABEL_132;
            }
            unint64_t v106 = &v103[16 * v102 + 32];
            *(void *)unint64_t v106 = v104;
            *((void *)v106 + 1) = v105;
            unint64_t v107 = *((void *)v103 + 2);
            if (v13 > v107) {
              goto LABEL_133;
            }
            memmove(&v103[16 * v13 + 16], &v103[16 * v13 + 32], 16 * (v107 - v13));
            uint64_t v10 = v103;
            *((void *)v103 + 2) = v107 - 1;
            unint64_t v13 = v107 - 1;
            if (v107 <= 2) {
              goto LABEL_112;
            }
          }
        }
      }
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v4 < 0) {
    goto LABEL_135;
  }
  if (v4) {
    specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
  }
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  void *v15;
  id v16;
  id v17;
  float v18;
  float v19;
  float v20;
  float v21;
  id *v22;
  void *v23;
  id v24;
  id v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t *v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t *v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  void *v37;
  Swift::Int v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  float v43;
  float v44;
  float v45;
  float v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  Swift::Int v114;
  Swift::Int v115;
  Swift::Int v116;
  Swift::Int v117;
  void **v118;
  uint64_t v119;

  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0) {
      goto LABEL_132;
    }
    if (v4) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    }
    return;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_140;
  }
  Swift::Int v7 = v5;
  uint64_t v110 = a1;
  if (v4 < 2)
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v119 = MEMORY[0x1E4FBC860];
    uint64_t v118 = (void **)((MEMORY[0x1E4FBC860] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_98:
      unint64_t v102 = v10;
      if (v13 >= 2)
      {
        uint64_t v103 = *v110;
        do
        {
          uint64_t v104 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_127;
          }
          if (!v103) {
            goto LABEL_139;
          }
          uint64_t v105 = v102;
          unint64_t v106 = *(void *)&v102[16 * v104 + 32];
          unint64_t v107 = *(void *)&v102[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v103 + 8 * v106), (id *)(v103 + 8 * *(void *)&v102[16 * v13 + 16]), v103 + 8 * v107, v118);
          if (v2) {
            break;
          }
          if (v107 < v106) {
            goto LABEL_128;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v105 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v105);
          }
          if (v104 >= *((void *)v105 + 2)) {
            goto LABEL_129;
          }
          unint64_t v108 = &v105[16 * v104 + 32];
          *(void *)unint64_t v108 = v106;
          *((void *)v108 + 1) = v107;
          uint64_t v109 = *((void *)v105 + 2);
          if (v13 > v109) {
            goto LABEL_130;
          }
          memmove(&v105[16 * v13 + 16], &v105[16 * v13 + 32], 16 * (v109 - v13));
          unint64_t v102 = v105;
          *((void *)v105 + 2) = v109 - 1;
          unint64_t v13 = v109 - 1;
        }
        while (v109 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v8 = v6 >> 1;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SEMSpanMatchResult);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v118 = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v119 = v9;
  }
  Swift::Int v114 = v7;
  Swift::Int v11 = 0;
  uint64_t v12 = *a1;
  Swift::Int v111 = *a1 - 8;
  id v112 = *a1 + 16;
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v115 = v4;
  while (1)
  {
    Swift::Int v14 = v11++;
    Swift::Int v116 = v14;
    if (v11 < v4)
    {
      int64_t v15 = *(void **)(v12 + 8 * v14);
      uint64_t v16 = *(id *)(v12 + 8 * v11);
      uint64_t v17 = v15;
      objc_msgSend(v16, sel_score);
      float v19 = v18;
      objc_msgSend(v17, sel_score);
      float v21 = v20;

      Swift::Int v11 = v14 + 2;
      if (v14 + 2 < v4)
      {
        float v22 = (id *)(v112 + 8 * v14);
        while (1)
        {
          float v23 = *(v22 - 1);
          float v24 = *v22;
          float v25 = v23;
          objc_msgSend(v24, sel_score);
          unint64_t v27 = v26;
          objc_msgSend(v25, sel_score);
          uint64_t v29 = v28;

          if (v21 < v19 == v29 >= v27) {
            break;
          }
          ++v11;
          ++v22;
          if (v4 == v11)
          {
            Swift::Int v11 = v4;
            break;
          }
        }
        Swift::Int v14 = v116;
      }
      if (v21 < v19)
      {
        if (v11 < v14) {
          goto LABEL_133;
        }
        if (v14 < v11)
        {
          float v30 = (uint64_t *)(v111 + 8 * v11);
          float v31 = v11;
          uint64_t v32 = v14;
          Swift::Int v33 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v32 != --v31)
            {
              if (!v12) {
                goto LABEL_138;
              }
              Swift::Int v34 = *v33;
              *Swift::Int v33 = *v30;
              char *v30 = v34;
            }
            ++v32;
            --v30;
            ++v33;
          }
          while (v32 < v31);
        }
      }
    }
    if (v11 >= v4) {
      goto LABEL_47;
    }
    if (__OFSUB__(v11, v14)) {
      goto LABEL_131;
    }
    if (v11 - v14 >= v114) {
      goto LABEL_47;
    }
    if (__OFADD__(v14, v114)) {
      goto LABEL_134;
    }
    uint64_t v35 = v14 + v114 >= v4 ? v4 : v14 + v114;
    if (v35 < v14) {
      break;
    }
    if (v11 != v35)
    {
      uint64_t v113 = v10;
      uint64_t v36 = v111 + 8 * v11;
      do
      {
        Swift::Int v37 = *(void **)(v12 + 8 * v11);
        uint64_t v38 = v14;
        uint64_t v39 = v36;
        do
        {
          Swift::Int v40 = *(void **)v39;
          id v41 = v37;
          uint64_t v42 = v40;
          objc_msgSend(v41, sel_score);
          uint64_t v44 = v43;
          objc_msgSend(v42, sel_score);
          float v46 = v45;

          if (v46 >= v44) {
            break;
          }
          if (!v12) {
            goto LABEL_136;
          }
          float v47 = *(void **)v39;
          Swift::Int v37 = *(void **)(v39 + 8);
          *(void *)uint64_t v39 = v37;
          *(void *)(v39 + 8) = v47;
          v39 -= 8;
          ++v38;
        }
        while (v11 != v38);
        ++v11;
        v36 += 8;
        Swift::Int v14 = v116;
      }
      while (v11 != v35);
      Swift::Int v11 = v35;
      uint64_t v10 = v113;
    }
LABEL_47:
    if (v11 < v14) {
      goto LABEL_126;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    uint64_t v49 = *((void *)v10 + 2);
    uint64_t v48 = *((void *)v10 + 3);
    unint64_t v13 = v49 + 1;
    if (v49 >= v48 >> 1) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v49 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v13;
    unint64_t v50 = v10 + 32;
    unint64_t v51 = &v10[16 * v49 + 32];
    *(void *)unint64_t v51 = v14;
    *((void *)v51 + 1) = v11;
    if (v49)
    {
      uint64_t v117 = v11;
      while (1)
      {
        uint64_t v52 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v57 = &v50[16 * v13];
          char v58 = *((void *)v57 - 8);
          id v59 = *((void *)v57 - 7);
          uint64_t v63 = __OFSUB__(v59, v58);
          uint64_t v60 = v59 - v58;
          if (v63) {
            goto LABEL_115;
          }
          uint64_t v62 = *((void *)v57 - 6);
          uint64_t v61 = *((void *)v57 - 5);
          uint64_t v63 = __OFSUB__(v61, v62);
          uint64_t v55 = v61 - v62;
          uint64_t v56 = v63;
          if (v63) {
            goto LABEL_116;
          }
          uint64_t v64 = v13 - 2;
          BOOL v65 = &v50[16 * v13 - 32];
          uint64_t v67 = *(void *)v65;
          unint64_t v66 = *((void *)v65 + 1);
          uint64_t v63 = __OFSUB__(v66, v67);
          uint64_t v68 = v66 - v67;
          if (v63) {
            goto LABEL_118;
          }
          uint64_t v63 = __OFADD__(v55, v68);
          uint64_t v69 = v55 + v68;
          if (v63) {
            goto LABEL_121;
          }
          if (v69 >= v60)
          {
            uint64_t v87 = &v50[16 * v52];
            uint64_t v89 = *(void *)v87;
            uint64_t v88 = *((void *)v87 + 1);
            uint64_t v63 = __OFSUB__(v88, v89);
            uint64_t v90 = v88 - v89;
            if (v63) {
              goto LABEL_125;
            }
            uint64_t v80 = v55 < v90;
            goto LABEL_85;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v81 = *((void *)v10 + 4);
            BOOL v82 = *((void *)v10 + 5);
            uint64_t v63 = __OFSUB__(v82, v81);
            uint64_t v74 = v82 - v81;
            BOOL v75 = v63;
            goto LABEL_79;
          }
          unint64_t v54 = *((void *)v10 + 4);
          uint64_t v53 = *((void *)v10 + 5);
          uint64_t v63 = __OFSUB__(v53, v54);
          uint64_t v55 = v53 - v54;
          uint64_t v56 = v63;
        }
        if (v56) {
          goto LABEL_117;
        }
        uint64_t v64 = v13 - 2;
        uint64_t v70 = &v50[16 * v13 - 32];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        uint64_t v73 = __OFSUB__(v71, v72);
        uint64_t v74 = v71 - v72;
        BOOL v75 = v73;
        if (v73) {
          goto LABEL_120;
        }
        uint64_t v76 = &v50[16 * v52];
        id v78 = *(void *)v76;
        char v77 = *((void *)v76 + 1);
        uint64_t v63 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v63) {
          goto LABEL_123;
        }
        if (__OFADD__(v74, v79)) {
          goto LABEL_124;
        }
        if (v74 + v79 >= v55)
        {
          uint64_t v80 = v55 < v79;
LABEL_85:
          if (v80) {
            uint64_t v52 = v64;
          }
          goto LABEL_87;
        }
LABEL_79:
        if (v75) {
          goto LABEL_119;
        }
        uint64_t v83 = &v50[16 * v52];
        uint64_t v85 = *(void *)v83;
        uint64_t v84 = *((void *)v83 + 1);
        uint64_t v63 = __OFSUB__(v84, v85);
        uint64_t v86 = v84 - v85;
        if (v63) {
          goto LABEL_122;
        }
        if (v86 < v74) {
          goto LABEL_14;
        }
LABEL_87:
        uint64_t v91 = v52 - 1;
        if (v52 - 1 >= v13)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        uint64_t v92 = v12;
        if (!v12) {
          goto LABEL_137;
        }
        unint64_t v93 = v10;
        uint64_t v94 = &v50[16 * v91];
        uint64_t v95 = *(void *)v94;
        uint64_t v96 = v50;
        unint64_t v97 = v52;
        uint64_t v98 = &v50[16 * v52];
        unint64_t v99 = *((void *)v98 + 1);
        os_log_type_t v100 = v92;
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v92 + 8 * *(void *)v94), (id *)(v92 + 8 * *(void *)v98), v92 + 8 * v99, v118);
        if (v1) {
          goto LABEL_95;
        }
        if (v99 < v95) {
          goto LABEL_112;
        }
        if (v97 > *((void *)v93 + 2)) {
          goto LABEL_113;
        }
        *(void *)uint64_t v94 = v95;
        *(void *)&v96[16 * v91 + 8] = v99;
        uint64_t v101 = *((void *)v93 + 2);
        if (v97 >= v101) {
          goto LABEL_114;
        }
        uint64_t v10 = v93;
        unint64_t v13 = v101 - 1;
        memmove(v98, v98 + 16, 16 * (v101 - 1 - v97));
        unint64_t v50 = v96;
        *((void *)v93 + 2) = v101 - 1;
        uint64_t v12 = v100;
        Swift::Int v11 = v117;
        if (v101 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_14:
    Swift::Int v4 = v115;
    if (v11 >= v115)
    {
      uint64_t v2 = v1;
      goto LABEL_98;
    }
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v19 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
    uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
LABEL_5:
    Swift::Int v7 = *(void **)(v19 + 8 * v4);
    uint64_t v8 = a1;
    uint64_t v18 = v5;
    while (1)
    {
      uint64_t v9 = *(void **)v5;
      uint64_t v10 = *(float (**)(void))((*v6 & *v7) + 0xA0);
      Swift::Int v11 = v7;
      uint64_t v12 = v9;
      float v13 = v10();
      float v14 = (*(float (**)(void))((*v6 & *v12) + 0xA0))();

      if (v14 >= v13)
      {
LABEL_4:
        ++v4;
        uint64_t v5 = v18 + 8;
        if (v4 == a2) {
          return;
        }
        goto LABEL_5;
      }
      if (!v19) {
        break;
      }
      int64_t v15 = *(void **)v5;
      Swift::Int v7 = *(void **)(v5 + 8);
      *(void *)uint64_t v5 = v7;
      *(void *)(v5 + 8) = v15;
      v5 -= 8;
      if (v4 == ++v8) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  float v14;
  float v15;
  float v16;
  float v17;
  void *v18;

  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = *a4;
    Swift::Int v7 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v8 = *(void **)(v6 + 8 * v4);
    uint64_t v9 = a1;
    uint64_t v10 = v7;
    while (1)
    {
      Swift::Int v11 = *(void **)v10;
      uint64_t v12 = v8;
      float v13 = v11;
      objc_msgSend(v12, sel_score);
      int64_t v15 = v14;
      objc_msgSend(v13, sel_score);
      uint64_t v17 = v16;

      if (v17 >= v15)
      {
LABEL_4:
        ++v4;
        v7 += 8;
        if (v4 == a2) {
          return;
        }
        goto LABEL_5;
      }
      if (!v6) {
        break;
      }
      uint64_t v18 = *(void **)v10;
      uint64_t v8 = *(void **)(v10 + 8);
      *(void *)uint64_t v10 = v8;
      *(void *)(v10 + 8) = v18;
      v10 -= 8;
      if (v4 == ++v9) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, id *a2, unint64_t a3, void **__dst)
{
  uint64_t v4 = __dst;
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = (char *)a2 - (char *)__src;
  int64_t v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v8 = (char *)a2 - (char *)__src;
  }
  uint64_t v9 = v8 >> 3;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v11 = a3 - (void)a2;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v44 = __src;
  uint64_t v43 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 >= -7)
    {
      if (__dst != a2 || &a2[v12] <= __dst) {
        memmove(__dst, a2, 8 * v12);
      }
      float v22 = &v4[v12];
      uint64_t v42 = v22;
      uint64_t v44 = v5;
      Swift::Int v37 = v6;
      if (v6 < v5 && v10 >= 8)
      {
        float v23 = (id *)(a3 - 8);
        float v24 = v5;
        uint64_t v36 = v4;
        do
        {
          uint64_t v39 = v23 + 1;
          id v41 = v5;
          float v26 = v22 - 1;
          float v25 = *(v22 - 1);
          unint64_t v27 = *--v24;
          unint64_t v28 = (unint64_t)v22;
          uint64_t v29 = *(float (**)(void))((*MEMORY[0x1E4FBC8C8] & *v25) + 0xA0);
          float v30 = v25;
          float v31 = v27;
          float v32 = v29();
          float v33 = (*(float (**)(void))((*MEMORY[0x1E4FBC8C8] & *v31) + 0xA0))();

          if (v33 >= v32)
          {
            uint64_t v42 = v26;
            if ((unint64_t)v39 < v28 || (unint64_t)v23 >= v28)
            {
              *float v23 = *v26;
              float v24 = v41;
              float v22 = v26;
              Swift::Int v34 = v36;
            }
            else
            {
              Swift::Int v34 = v36;
              if (v39 != (id *)v28) {
                *float v23 = *v26;
              }
              float v24 = v41;
              float v22 = v26;
            }
          }
          else
          {
            if (v39 != v41 || v23 >= v41) {
              *float v23 = *v24;
            }
            uint64_t v44 = v24;
            Swift::Int v34 = v36;
            float v22 = (void **)v28;
          }
          if (v24 <= v37) {
            break;
          }
          --v23;
          uint64_t v5 = v24;
        }
        while (v22 > v34);
      }
      goto LABEL_44;
    }
  }
  else if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst) {
      memmove(__dst, __src, 8 * v9);
    }
    uint64_t v38 = &v4[v9];
    uint64_t v42 = v38;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      float v13 = (void *)MEMORY[0x1E4FBC8C8];
      do
      {
        float v14 = *v4;
        int64_t v15 = *(float (**)(void))((*v13 & *(void *)*v5) + 0xA0);
        uint64_t v16 = v4;
        id v17 = *v5;
        uint64_t v18 = v14;
        float v19 = v15();
        float v20 = (*(float (**)(void))((*v13 & *v18) + 0xA0))();

        if (v20 >= v19)
        {
          if (v6 != v16) {
            id *v6 = *v16;
          }
          uint64_t v4 = v16 + 1;
          uint64_t v43 = v16 + 1;
          float v21 = v5;
        }
        else
        {
          float v21 = v5 + 1;
          uint64_t v4 = v16;
          if (v6 < v5 || v6 >= v21 || v6 != v5) {
            id *v6 = *v5;
          }
        }
        ++v6;
        if (v4 >= v38) {
          break;
        }
        uint64_t v5 = v21;
      }
      while ((unint64_t)v21 < a3);
      uint64_t v44 = v6;
    }
LABEL_44:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v44, &v43, &v42);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of Apple_Parsec_Siri_V2alpha_ClientSignals?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1C90C0BC4(void **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xA0))();
}

uint64_t sub_1C90C0C20(float *a1, void **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xA8))(*a1);
}

uint64_t lazy protocol witness table accessor for type Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact and conformance Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of AudioRanking.rank(query:clientCandidate:serverCandidate:clientSignals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t type metadata accessor for AudioRanker()
{
  return self;
}

uint64_t method lookup function for AudioRanker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioRanker);
}

uint64_t dispatch thunk of AudioRanker.__allocating_init(localeIdentifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of AudioRanker.rank(query:clientCandidate:serverCandidate:clientSignals:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of AudioRanker.score(items:maxCandidateFieldCount:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

void *PommesSearchRequest.PommesPreferAltParserId.unsafeMutableAddressor()
{
  return &static PommesSearchRequest.PommesPreferAltParserId;
}

void *PommesSearchRequest.PommesPhaseTwoParserId.unsafeMutableAddressor()
{
  return &static PommesSearchRequest.PommesPhaseTwoParserId;
}

void *PommesSearchRequest.PommesGeoParserId.unsafeMutableAddressor()
{
  return &static PommesSearchRequest.PommesGeoParserId;
}

unint64_t static PommesSearchRequest.PommesParserId.getter()
{
  return 0xD000000000000010;
}

unint64_t static PommesSearchRequest.PommesPreferAltParserId.getter()
{
  return 0xD000000000000024;
}

unint64_t static PommesSearchRequest.PommesPhaseTwoParserId.getter()
{
  return 0xD000000000000018;
}

unint64_t static PommesSearchRequest.PommesGeoParserId.getter()
{
  return 0xD000000000000014;
}

uint64_t one-time initialization function for PommesMultiClassParserIds()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for PommesMultiClassParserIds);
  uint64_t result = swift_arrayDestroy();
  static PommesSearchRequest.PommesMultiClassParserIds = v0;
  return result;
}

uint64_t *PommesSearchRequest.PommesMultiClassParserIds.unsafeMutableAddressor()
{
  if (one-time initialization token for PommesMultiClassParserIds != -1) {
    swift_once();
  }
  return &static PommesSearchRequest.PommesMultiClassParserIds;
}

uint64_t static PommesSearchRequest.PommesMultiClassParserIds.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for PommesMultiClassParserIds);
}

uint64_t one-time initialization function for PommesPhaseTwoAllowedDeviceClasses()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DeviceClass>);
  uint64_t v0 = type metadata accessor for DeviceClass();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C9198B60;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x1E4FA50A0], v0);
  v6(v5 + v2, *MEMORY[0x1E4FA5090], v0);
  v6(v5 + 2 * v2, *MEMORY[0x1E4FA50B0], v0);
  v6(v5 + 3 * v2, *MEMORY[0x1E4FA50A8], v0);
  v6(v5 + 4 * v2, *MEMORY[0x1E4FA50B8], v0);
  uint64_t v7 = specialized Set.init(_nonEmptyArrayLiteral:)(v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t result = swift_deallocClassInstance();
  static PommesSearchRequest.PommesPhaseTwoAllowedDeviceClasses = v7;
  return result;
}

uint64_t *PommesSearchRequest.PommesPhaseTwoAllowedDeviceClasses.unsafeMutableAddressor()
{
  if (one-time initialization token for PommesPhaseTwoAllowedDeviceClasses != -1) {
    swift_once();
  }
  return &static PommesSearchRequest.PommesPhaseTwoAllowedDeviceClasses;
}

uint64_t static PommesSearchRequest.PommesPhaseTwoAllowedDeviceClasses.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for PommesPhaseTwoAllowedDeviceClasses);
}

unint64_t one-time initialization function for PommesMultiClassAllowedDeviceClasses()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Set<DeviceClass>)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9194790;
  *(void *)(inited + 32) = 0xD000000000000024;
  *(void *)(inited + 40) = 0x80000001C919BE80;
  if (one-time initialization token for PommesPhaseTwoAllowedDeviceClasses != -1) {
    swift_once();
  }
  uint64_t v1 = static PommesSearchRequest.PommesPhaseTwoAllowedDeviceClasses;
  *(void *)(inited + 48) = static PommesSearchRequest.PommesPhaseTwoAllowedDeviceClasses;
  *(void *)(inited + 56) = 0xD000000000000018;
  *(void *)(inited + 64) = 0x80000001C919BEB0;
  *(void *)(inited + 72) = v1;
  *(void *)(inited + 80) = 0xD000000000000014;
  *(void *)(inited + 88) = 0x80000001C919BED0;
  *(void *)(inited + 96) = v1;
  swift_bridgeObjectRetain_n();
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses = result;
  return result;
}

uint64_t *PommesSearchRequest.PommesMultiClassAllowedDeviceClasses.unsafeMutableAddressor()
{
  if (one-time initialization token for PommesMultiClassAllowedDeviceClasses != -1) {
    swift_once();
  }
  return &static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses;
}

uint64_t static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for PommesMultiClassAllowedDeviceClasses);
}

uint64_t static PommesSearchRequest.getRewriteFromParsers(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage)?);
  MEMORY[0x1F4188790](v4 - 8);
  float v32 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v6 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  int64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage));
  uint64_t v14 = *(void *)(v13 - 8);
  int64_t v15 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56);
  uint64_t v33 = a2;
  float v30 = v15;
  uint64_t v31 = v13;
  v29[1] = v14 + 56;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v15)(a2, 1, 1);
  uint64_t v37 = *(void *)(a1 + 16);
  if (v37)
  {
    uint64_t v17 = *(void *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
    uint64_t v36 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    uint64_t v35 = *(void *)(v17 + 72);
    uint64_t v41 = v10 + 16;
    uint64_t v18 = (void (**)(char *, uint64_t))(v10 + 8);
    float v19 = (void (**)(char *, uint64_t))(v6 + 8);
    v29[0] = a1;
    swift_bridgeObjectRetain();
    uint64_t v20 = 0;
    uint64_t v34 = v10;
    while (1)
    {
      uint64_t v21 = Siri_Nlu_External_Span.matcherNames.getter();
      uint64_t v22 = *(void *)(v21 + 16);
      if (!v22)
      {
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      uint64_t v38 = v21;
      uint64_t v39 = v20;
      unint64_t v23 = v21 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      uint64_t v24 = *(void *)(v10 + 72);
      float v25 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
      v25(v12, v23, v9);
      while (1)
      {
        if ((Siri_Nlu_External_UserDialogAct.hasDelegated.getter() & 1) == 0) {
          goto LABEL_7;
        }
        Siri_Nlu_External_UserDialogAct.delegated.getter();
        if (Siri_Nlu_External_DelegatedUserDialogAct.hasRewrite.getter()) {
          break;
        }
        (*v19)(v8, v40);
LABEL_7:
        (*v18)(v12, v9);
        v23 += v24;
        if (!--v22)
        {
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
        v25(v12, v23, v9);
      }
      swift_bridgeObjectRelease();
      uint64_t v27 = v31;
      uint64_t v26 = (uint64_t)v32;
      Siri_Nlu_External_DelegatedUserDialogAct.rewrittenUtterance.getter();
      Siri_Nlu_External_DelegatedUserDialogAct.rewrite.getter();
      (*v19)(v8, v40);
      (*v18)(v12, v9);
      uint64_t v28 = v33;
      outlined destroy of MediaUserStateCenter?(v33, (uint64_t *)&demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage)?);
      v30(v26, 0, 1, v27);
      outlined init with take of PommesSearchReason?(v26, v28, (uint64_t *)&demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage)?);
LABEL_14:
      uint64_t v10 = v34;
      uint64_t v20 = v39;
LABEL_4:
      if (++v20 == v37) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t specialized Sequence.filter(_:)(uint64_t a1)
{
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  uint64_t v41 = *(void *)(v39 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v39);
  uint64_t v37 = (uint64_t)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v34 - v5;
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v38 = (uint64_t)&v34 - v8;
  uint64_t result = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v34 - v10;
  int64_t v12 = 0;
  uint64_t v43 = MEMORY[0x1E4FBC860];
  uint64_t v40 = a1;
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v14 = a1 + 64;
  uint64_t v13 = v15;
  uint64_t v16 = 1 << *(unsigned char *)(v14 - 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v13;
  uint64_t v35 = v14;
  int64_t v36 = (unint64_t)(v16 + 63) >> 6;
  if ((v17 & v13) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v21 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v21 < v36)
    {
      unint64_t v22 = *(void *)(v35 + 8 * v21);
      int64_t v23 = v12 + 1;
      if (v22) {
        goto LABEL_22;
      }
      int64_t v23 = v12 + 2;
      if (v12 + 2 >= v36) {
        goto LABEL_30;
      }
      unint64_t v22 = *(void *)(v35 + 8 * v23);
      if (v22) {
        goto LABEL_22;
      }
      int64_t v23 = v12 + 3;
      if (v12 + 3 >= v36) {
        goto LABEL_30;
      }
      unint64_t v22 = *(void *)(v35 + 8 * v23);
      if (v22) {
        goto LABEL_22;
      }
      int64_t v23 = v12 + 4;
      if (v12 + 4 >= v36) {
        goto LABEL_30;
      }
      unint64_t v22 = *(void *)(v35 + 8 * v23);
      if (v22)
      {
LABEL_22:
        unint64_t v18 = (v22 - 1) & v22;
        int64_t v42 = v23;
        for (unint64_t i = __clz(__rbit64(v22)) + (v23 << 6); ; unint64_t i = v19 | (v12 << 6))
        {
          uint64_t v25 = *(void *)(v41 + 72);
          uint64_t v26 = v38;
          outlined init with copy of MediaUserStateCenter?(*(void *)(v40 + 56) + v25 * i, v38, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
          outlined init with take of PommesSearchReason?(v26, (uint64_t)v11, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
          uint64_t v27 = *(int *)(v39 + 48);
          uint64_t v28 = *(int *)(v39 + 64);
          uint64_t v29 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
          uint64_t v30 = *(void *)(v29 - 8);
          (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v6, v11, v29);
          *(void *)&v6[v27] = *(void *)&v11[v27];
          LODWORD(v27) = v11[v28];
          v6[v28] = v27;
          (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v29);
          if (v27 == 1)
          {
            outlined init with take of PommesSearchReason?((uint64_t)v11, v37, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
            uint64_t v31 = v43;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
              uint64_t v31 = v43;
            }
            unint64_t v33 = *(void *)(v31 + 16);
            unint64_t v32 = *(void *)(v31 + 24);
            if (v33 >= v32 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
              uint64_t v31 = v43;
            }
            *(void *)(v31 + 16) = v33 + 1;
            uint64_t result = outlined init with take of PommesSearchReason?(v37, v31+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ v33 * v25, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
            int64_t v12 = v42;
            if (!v18) {
              goto LABEL_7;
            }
          }
          else
          {
            uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
            int64_t v12 = v42;
            if (!v18) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v19 = __clz(__rbit64(v18));
          v18 &= v18 - 1;
          int64_t v42 = v12;
        }
      }
      uint64_t v24 = v12 + 5;
      if (v12 + 5 < v36)
      {
        unint64_t v22 = *(void *)(v35 + 8 * v24);
        if (v22)
        {
          int64_t v23 = v12 + 5;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v23 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            goto LABEL_32;
          }
          if (v23 >= v36) {
            break;
          }
          unint64_t v22 = *(void *)(v35 + 8 * v23);
          ++v24;
          if (v22) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_30:
    swift_release();
    return v43;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  uint64_t v2 = &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  unint64_t v51 = *(void *)(v48 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v48);
  int64_t v42 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v41 - v6;
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  float v47 = (uint64_t)&v41 - v9;
  uint64_t result = MEMORY[0x1F4188790](v8);
  int64_t v12 = (char *)&v41 - v11;
  uint64_t v13 = 0;
  uint64_t v52 = MEMORY[0x1E4FBC860];
  uint64_t v49 = a1;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v15 = a1 + 64;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *(unsigned char *)(v15 - 32);
  unint64_t v18 = -1;
  if (v17 < 64) {
    unint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  uint64_t v43 = v15;
  uint64_t v44 = (unint64_t)(v17 + 63) >> 6;
  float v46 = "onScreenAppBundleID";
  uint64_t v45 = 0x80000001C919BE60;
  if ((v18 & v14) != 0) {
    goto LABEL_7;
  }
LABEL_8:
  while (2)
  {
    int64_t v23 = v13 + 1;
    if (!__OFADD__(v13, 1))
    {
      if (v23 < v44)
      {
        uint64_t v24 = *(void *)(v43 + 8 * v23);
        uint64_t v25 = v13 + 1;
        if (v24) {
          goto LABEL_23;
        }
        uint64_t v25 = v13 + 2;
        if (v13 + 2 >= v44) {
          goto LABEL_33;
        }
        uint64_t v24 = *(void *)(v43 + 8 * v25);
        if (v24) {
          goto LABEL_23;
        }
        uint64_t v25 = v13 + 3;
        if (v13 + 3 >= v44) {
          goto LABEL_33;
        }
        uint64_t v24 = *(void *)(v43 + 8 * v25);
        if (v24) {
          goto LABEL_23;
        }
        uint64_t v25 = v13 + 4;
        if (v13 + 4 >= v44) {
          goto LABEL_33;
        }
        uint64_t v24 = *(void *)(v43 + 8 * v25);
        if (v24)
        {
LABEL_23:
          unint64_t v19 = (v24 - 1) & v24;
          int64_t v21 = v25;
          for (unint64_t i = __clz(__rbit64(v24)) + (v25 << 6); ; unint64_t i = v20 | (v13 << 6))
          {
            uint64_t v27 = *(void *)(v49 + 56);
            unint64_t v50 = *(void *)(v51 + 72);
            uint64_t v28 = v47;
            outlined init with copy of MediaUserStateCenter?(v27 + v50 * i, v47, v2);
            uint64_t v29 = v2;
            outlined init with take of PommesSearchReason?(v28, (uint64_t)v12, v2);
            uint64_t v30 = *(int *)(v48 + 48);
            uint64_t v31 = *(int *)(v48 + 64);
            unint64_t v32 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
            unint64_t v33 = *(void *)(v32 - 8);
            (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v7, v12, v32);
            *(void *)&v7[v30] = *(void *)&v12[v30];
            v7[v31] = v12[v31];
            uint64_t v34 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
            int64_t v36 = v35;
            (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v32);
            if (v34 == 0xD000000000000010 && v36 == v45) {
              break;
            }
            uint64_t v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t v2 = v29;
            uint64_t v13 = v21;
            if (v37) {
              goto LABEL_6;
            }
            outlined init with take of PommesSearchReason?((uint64_t)v12, v42, v2);
            uint64_t v38 = v52;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1);
              uint64_t v38 = v52;
            }
            uint64_t v40 = *(void *)(v38 + 16);
            uint64_t v39 = *(void *)(v38 + 24);
            if (v40 >= v39 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
              uint64_t v38 = v52;
            }
            *(void *)(v38 + 16) = v40 + 1;
            uint64_t result = outlined init with take of PommesSearchReason?(v42, v38+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ v40 * v50, v2);
            if (!v19) {
              goto LABEL_8;
            }
LABEL_7:
            uint64_t v20 = __clz(__rbit64(v19));
            v19 &= v19 - 1;
            int64_t v21 = v13;
          }
          swift_bridgeObjectRelease();
          uint64_t v2 = v29;
          uint64_t v13 = v21;
LABEL_6:
          uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v12, v2);
          if (!v19) {
            continue;
          }
          goto LABEL_7;
        }
        uint64_t v26 = v13 + 5;
        if (v13 + 5 < v44)
        {
          uint64_t v24 = *(void *)(v43 + 8 * v26);
          if (v24)
          {
            uint64_t v25 = v13 + 5;
            goto LABEL_23;
          }
          while (1)
          {
            uint64_t v25 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_35;
            }
            if (v25 >= v44) {
              break;
            }
            uint64_t v24 = *(void *)(v43 + 8 * v25);
            ++v26;
            if (v24) {
              goto LABEL_23;
            }
          }
        }
      }
LABEL_33:
      swift_release();
      return v52;
    }
    break;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t static PommesSearchRequest.convertToPommesDelegatedUDA(fallbackParse:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.setter();
  return 0;
}

uint64_t outlined assign with take of (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier;
  if (!lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier)
  {
    type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier);
  }
  return result;
}

uint64_t sub_1C90C2010()
{
  outlined consume of FeatureFlag(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x1F4186498](v0, 49, 7);
}

uint64_t dispatch thunk of AppSearchViewProvider.isSearchViewVisible(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t AssistantDataSnapshot.MeCard.ContactAddress.label.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.ContactAddress.street.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.ContactAddress.city.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.ContactAddress.state.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.ContactAddress.zipCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.ContactAddress.countryCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

double AssistantDataSnapshot.MeCard.ContactAddress.init(_:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized AssistantDataSnapshot.MeCard.ContactAddress.init(_:)(a1, (uint64_t *)v7);
  long long v3 = v7[3];
  a2[2] = v7[2];
  a2[3] = v3;
  long long v4 = v7[5];
  a2[4] = v7[4];
  a2[5] = v4;
  double result = *(double *)v7;
  long long v6 = v7[1];
  *a2 = v7[0];
  a2[1] = v6;
  return result;
}

uint64_t AssistantDataSnapshot.MeCard.givenName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.middleName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.familyName.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.nickName.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.fullName.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.addresses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AssistantDataSnapshot.MeCard.contactIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 AssistantDataSnapshot.MeCard.init(_:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  specialized AssistantDataSnapshot.MeCard.init(_:)(a1, (uint64_t *)v6);
  long long v3 = v6[5];
  *(_OWORD *)(a2 + 64) = v6[4];
  *(_OWORD *)(a2 + 80) = v3;
  *(void *)(a2 + 96) = v7;
  long long v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = (__n128)v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t AssistantDataSnapshot.ContentRestriction.movieRestriction.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AssistantDataSnapshot.ContentRestriction.movieRestriction.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t AssistantDataSnapshot.ContentRestriction.tvRestriction.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AssistantDataSnapshot.ContentRestriction.tvRestriction.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*AssistantDataSnapshot.ContentRestriction.tvRestriction.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

id AssistantDataSnapshot.ContentRestriction.init(_:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_movieRestriction);
  objc_msgSend(a1, sel_tvRestriction);

  return v2;
}

void AssistantDataSnapshot.Source.hash(into:)(uint64_t a1, char a2)
{
}

BOOL static AssistantDataSnapshot.Source.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

Swift::Int AssistantDataSnapshot.Source.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t AssistantDataSnapshot.source.getter()
{
  return *v0;
}

uint64_t AssistantDataSnapshot.countryCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.meCards.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AssistantDataSnapshot.contentRestrictions.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t AssistantDataSnapshot.uiScale.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t AssistantDataSnapshot.temperatureUnit.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.allowUserGeneratedContent.getter()
{
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t AssistantDataSnapshot.censorSpeech.getter()
{
  return *(unsigned __int8 *)(v0 + 89);
}

double AssistantDataSnapshot.init(source:countryCode:meCards:contentRestrictions:uiScale:allowUserGeneratedContent:censorSpeech:temperatureUnit:)@<D0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, _OWORD *a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  specialized AssistantDataSnapshot.init(source:countryCode:meCards:contentRestrictions:uiScale:allowUserGeneratedContent:censorSpeech:temperatureUnit:)(a1 & 1, a2, a3, a4, a5, a6, a7 & 1, a8, (uint64_t)v16, a10, a11, a12);
  long long v13 = v16[3];
  a9[2] = v16[2];
  a9[3] = v13;
  a9[4] = v17[0];
  *(_OWORD *)((char *)a9 + 74) = *(_OWORD *)((char *)v17 + 10);
  double result = *(double *)v16;
  long long v15 = v16[1];
  *a9 = v16[0];
  a9[1] = v15;
  return result;
}

double AssistantDataSnapshot.init(_:replacementMeCards:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  specialized AssistantDataSnapshot.init(_:replacementMeCards:)(a1, v7);

  long long v4 = v7[3];
  a2[2] = v7[2];
  a2[3] = v4;
  a2[4] = v8[0];
  *(_OWORD *)((char *)a2 + 74) = *(_OWORD *)((char *)v8 + 10);
  double result = *(double *)v7;
  long long v6 = v7[1];
  *a2 = v7[0];
  a2[1] = v6;
  return result;
}

uint64_t AssistantDataSnapshot.description.getter()
{
  v30[0] = 0;
  v30[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(190);
  uint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  v1._uint64_t countAndFlagsBits = 0xD000000000000028;
  v1._object = (void *)0x80000001C91A0AC0;
  String.append(_:)(v1);
  outlined init with take of PommesSearchReason?(v0 + 8, (uint64_t)v31, &demangling cache variable for type metadata for String?);
  outlined init with take of PommesSearchReason?((uint64_t)v31, (uint64_t)v30, &demangling cache variable for type metadata for String?);
  outlined retain of String?((uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v2._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x656D202020200A2CLL;
  v3._object = (void *)0xEF203A7364726143;
  String.append(_:)(v3);
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = MEMORY[0x1CB77CDC0](v4, &type metadata for AssistantDataSnapshot.MeCard);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v9._object = (void *)0x80000001C91A0AF0;
  String.append(_:)(v9);
  outlined init with take of PommesSearchReason?(v0 + 32, (uint64_t)v30, &demangling cache variable for type metadata for AssistantDataSnapshot.ContentRestriction?);
  outlined init with take of PommesSearchReason?((uint64_t)v30, (uint64_t)v26, &demangling cache variable for type metadata for AssistantDataSnapshot.ContentRestriction?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssistantDataSnapshot.ContentRestriction?);
  v10._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x6975202020200A2CLL;
  v11._object = (void *)0xEF203A656C616353;
  String.append(_:)(v11);
  outlined init with take of PommesSearchReason?(v0 + 56, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for Double?);
  outlined init with take of PommesSearchReason?((uint64_t)v29, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for Double?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
  v12._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0xD000000000000021;
  v13._object = (void *)0x80000001C91A0B10;
  String.append(_:)(v13);
  if (*(unsigned char *)(v0 + 88)) {
    uint64_t v14 = 1702195828;
  }
  else {
    uint64_t v14 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 88)) {
    unint64_t v15 = 0xE400000000000000;
  }
  else {
    unint64_t v15 = 0xE500000000000000;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x80000001C91A0B40;
  v17._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v17);
  if (*(unsigned char *)(v0 + 89)) {
    uint64_t v18 = 1702195828;
  }
  else {
    uint64_t v18 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 89)) {
    unint64_t v19 = 0xE400000000000000;
  }
  else {
    unint64_t v19 = 0xE500000000000000;
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 0xD000000000000017;
  v21._object = (void *)0x80000001C91A0B60;
  String.append(_:)(v21);
  outlined init with take of PommesSearchReason?(v0 + 72, (uint64_t)v26, &demangling cache variable for type metadata for String?);
  outlined init with take of PommesSearchReason?((uint64_t)v26, (uint64_t)&v25, &demangling cache variable for type metadata for String?);
  outlined retain of String?((uint64_t)v26);
  v22._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 2689580;
  v23._object = (void *)0xE300000000000000;
  String.append(_:)(v23);
  return v27;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AssistantDataSnapshot()
{
  return AssistantDataSnapshot.description.getter();
}

void specialized AssistantDataSnapshot.MeCard.ContactAddress.init(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_label);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v7;
    uint64_t v35 = v6;
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
  }
  id v8 = objc_msgSend(a1, sel_street);
  if (v8)
  {
    Swift::String v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v32 = v11;
    uint64_t v33 = v10;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
  }
  id v12 = objc_msgSend(a1, sel_city);
  if (v12)
  {
    Swift::String v13 = v12;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v15 = 0;
  }
  id v16 = objc_msgSend(a1, sel_stateCode);
  if (v16)
  {
    Swift::String v17 = v16;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v20 = 0;
  }
  id v21 = objc_msgSend(a1, sel_postalCode);
  if (v21)
  {
    Swift::String v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v25 = 0;
  }
  id v26 = objc_msgSend(a1, sel_countryCode);
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;
  }
  else
  {

    uint64_t v28 = 0;
    uint64_t v30 = 0;
  }
  *a2 = v35;
  a2[1] = v34;
  a2[2] = v33;
  a2[3] = v32;
  a2[4] = v31;
  a2[5] = v15;
  a2[6] = v18;
  a2[7] = v20;
  a2[8] = v23;
  a2[9] = v25;
  a2[10] = v28;
  a2[11] = v30;
}

uint64_t specialized AssistantDataSnapshot.MeCard.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  Swift::String v2 = a1;
  id v4 = objc_msgSend(a1, sel_firstName);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  id v9 = objc_msgSend(v2, sel_middleName);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v69 = v12;
    uint64_t v70 = v11;
  }
  else
  {
    uint64_t v69 = 0;
    uint64_t v70 = 0;
  }
  id v13 = objc_msgSend(v2, sel_lastName);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v16;
    uint64_t v68 = v15;
  }
  else
  {
    uint64_t v67 = 0;
    uint64_t v68 = 0;
  }
  id v17 = objc_msgSend(v2, sel_nickName);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v65 = v20;
    uint64_t v66 = v19;
  }
  else
  {
    uint64_t v65 = 0;
    uint64_t v66 = 0;
  }
  id v21 = objc_msgSend(v2, sel_fullName);
  if (v21)
  {
    Swift::String v22 = v21;
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v63 = v23;
  }
  else
  {
    uint64_t v64 = 0;
    uint64_t v63 = 0;
  }
  id v24 = objc_msgSend(v2, sel_addresses);
  uint64_t v25 = MEMORY[0x1E4FBC860];
  uint64_t v71 = v8;
  if (!v24) {
    goto LABEL_30;
  }
  id v26 = v24;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SALocation);
  unint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v28) {
      goto LABEL_19;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v28) {
    goto LABEL_29;
  }
LABEL_19:
  uint64_t v72 = v25;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28 & ~(v28 >> 63), 0);
  if (v28 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v61 = v2;
  uint64_t v62 = (uint64_t *)v6;
  uint64_t v30 = 0;
  uint64_t v25 = v72;
  do
  {
    if ((v27 & 0xC000000000000001) != 0) {
      id v31 = (id)MEMORY[0x1CB77D510](v30, v27);
    }
    else {
      id v31 = *(id *)(v27 + 8 * v30 + 32);
    }
    specialized AssistantDataSnapshot.MeCard.ContactAddress.init(_:)(v31, (uint64_t *)v73);
    uint64_t v72 = v25;
    unint64_t v33 = *(void *)(v25 + 16);
    unint64_t v32 = *(void *)(v25 + 24);
    if (v33 >= v32 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
      uint64_t v25 = v72;
    }
    ++v30;
    *(void *)(v25 + 16) = v33 + 1;
    uint64_t v34 = (_OWORD *)(v25 + 96 * v33);
    long long v35 = v73[1];
    v34[2] = v73[0];
    void v34[3] = v35;
    long long v36 = v73[2];
    long long v37 = v73[3];
    long long v38 = v73[5];
    v34[6] = v73[4];
    v34[7] = v38;
    v34[4] = v36;
    v34[5] = v37;
  }
  while (v28 != v30);
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t)v62;
  Swift::String v2 = v61;
LABEL_30:
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v40 = *(void *)(*(void *)(v39 - 8) + 64);
  MEMORY[0x1F4188790](v39 - 8);
  unint64_t v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF0;
  int64_t v42 = (char *)&v60 - v41;
  uint64_t v43 = v2;
  id v44 = objc_msgSend(v2, sel_identifier);
  uint64_t v62 = &v60;
  if (MEMORY[0x1F4188790](v44))
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v45 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))((char *)&v60 - v41, 0, 1, v45);
  }
  else
  {
    uint64_t v45 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))((char *)&v60 - v41, 1, 1, v45);
  }
  outlined init with take of PommesSearchReason?((uint64_t)&v60 - v41, (uint64_t)&v60 - v41, &demangling cache variable for type metadata for URL?);
  type metadata accessor for URL();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48))((char *)&v60 - v41, 1, v45);
  if (v47)
  {

    uint64_t result = outlined destroy of URL?((uint64_t)&v60 - v41);
    uint64_t v48 = 0;
    uint64_t v49 = 0;
  }
  else
  {
    uint64_t v61 = &v60;
    MEMORY[0x1F4188790](v47);
    uint64_t v51 = v6;
    uint64_t v52 = (char *)&v60 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v52, v42, v45);
    outlined destroy of URL?((uint64_t)v42);
    uint64_t v48 = URL.absoluteString.getter();
    uint64_t v49 = v53;

    unint64_t v54 = v52;
    uint64_t v6 = v51;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v54, v45);
  }
  uint64_t v55 = v71;
  *a2 = v6;
  a2[1] = v55;
  uint64_t v56 = v69;
  a2[2] = v70;
  a2[3] = v56;
  uint64_t v57 = v67;
  a2[4] = v68;
  a2[5] = v57;
  uint64_t v58 = v65;
  a2[6] = v66;
  a2[7] = v58;
  uint64_t v59 = v63;
  a2[8] = v64;
  a2[9] = v59;
  a2[10] = v25;
  a2[11] = v48;
  a2[12] = v49;
  return result;
}

void specialized AssistantDataSnapshot.init(source:countryCode:meCards:contentRestrictions:uiScale:allowUserGeneratedContent:censorSpeech:temperatureUnit:)(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  if (a4 >> 62) {
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v20 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  char v37 = a8;
  uint64_t v35 = a3;
  uint64_t v36 = a6;
  if (v20)
  {
    uint64_t v39 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
    if (v20 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v21 = 0;
    uint64_t v22 = v39;
    do
    {
      if ((a4 & 0xC000000000000001) != 0) {
        uint64_t v23 = (uint64_t *)MEMORY[0x1CB77D510](v21, a4);
      }
      else {
        uint64_t v23 = (uint64_t *)*(id *)(a4 + 8 * v21 + 32);
      }
      specialized AssistantDataSnapshot.MeCard.init(_:)(v23, (uint64_t *)v40);
      unint64_t v25 = *(void *)(v39 + 16);
      unint64_t v24 = *(void *)(v39 + 24);
      if (v25 >= v24 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      }
      ++v21;
      *(void *)(v39 + 16) = v25 + 1;
      uint64_t v26 = v39 + 104 * v25;
      long long v27 = v40[0];
      long long v28 = v40[2];
      *(_OWORD *)(v26 + 48) = v40[1];
      *(_OWORD *)(v26 + 64) = v28;
      *(_OWORD *)(v26 + 32) = v27;
      long long v29 = v40[3];
      long long v30 = v40[4];
      long long v31 = v40[5];
      *(void *)(v26 + 128) = v41;
      *(_OWORD *)(v26 + 96) = v30;
      *(_OWORD *)(v26 + 112) = v31;
      *(_OWORD *)(v26 + 80) = v29;
    }
    while (v20 != v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = MEMORY[0x1E4FBC860];
  }
  if (a5)
  {
    id v32 = a5;
    id v33 = objc_msgSend(v32, sel_movieRestriction);
    id v34 = objc_msgSend(v32, sel_tvRestriction);
  }
  else
  {
    id v33 = 0;
    id v34 = 0;
  }
  *(unsigned char *)a9 = a1 & 1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = v35;
  *(void *)(a9 + 24) = v22;
  *(void *)(a9 + 32) = v33;
  *(void *)(a9 + 40) = v34;
  *(unsigned char *)(a9 + 48) = a5 == 0;
  *(void *)(a9 + 56) = v36;
  *(unsigned char *)(a9 + 64) = a7 & 1;
  *(void *)(a9 + 72) = a11;
  *(void *)(a9 + 80) = a12;
  *(unsigned char *)(a9 + 88) = v37 & 1;
  *(unsigned char *)(a9 + 89) = a10 & 1;
}

double specialized AssistantDataSnapshot.init(_:replacementMeCards:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(a1, sel_countryCode);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  id v9 = objc_msgSend(a1, sel_mediaContentRatingRestrictions);
  id v10 = objc_msgSend(a1, sel_uiScale);
  uint64_t v11 = v10;
  if (v10)
  {
    objc_msgSend(v10, sel_doubleValue);
    uint64_t v13 = v12;

    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v14 = 0;
  }
  id v15 = objc_msgSend(a1, sel_allowUserGeneratedContent);
  if (v15)
  {
    uint64_t v16 = v15;
    char v17 = objc_msgSend(v15, sel_BOOLValue);
  }
  else
  {
    char v17 = 1;
  }
  char v42 = objc_msgSend(a1, sel_censorSpeech);
  id v18 = objc_msgSend(a1, sel_temperatureUnit);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v21;
    uint64_t v41 = v20;
  }
  else
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v39 = a2;
    unint64_t v25 = v11;
    char v26 = v17;
    uint64_t v27 = v14;
    id v28 = v9;
    uint64_t v29 = v8;
    uint64_t v30 = v6;
    long long v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v31 = 0;
    _os_log_impl(&dword_1C8F83000, v23, v24, "#AssistantData Creating snapshot with SAPerson card(s)", v31, 2u);
    id v32 = v31;
    uint64_t v6 = v30;
    uint64_t v8 = v29;
    id v9 = v28;
    uint64_t v14 = v27;
    char v17 = v26;
    uint64_t v11 = v25;
    a2 = v39;
    MEMORY[0x1CB77E470](v32, -1, -1);
  }

  id v33 = objc_msgSend(a1, sel_meCards);
  if (v33)
  {
    id v34 = v33;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAPerson);
    unint64_t v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v35 = MEMORY[0x1E4FBC860];
  }
  specialized AssistantDataSnapshot.init(source:countryCode:meCards:contentRestrictions:uiScale:allowUserGeneratedContent:censorSpeech:temperatureUnit:)(0, v6, v8, v35, v9, v14, v11 == 0, v17, (uint64_t)v43, v42, v41, v40);
  long long v36 = v43[3];
  a2[2] = v43[2];
  a2[3] = v36;
  a2[4] = v44[0];
  *(_OWORD *)((char *)a2 + 74) = *(_OWORD *)((char *)v44 + 10);
  double result = *(double *)v43;
  long long v38 = v43[1];
  *a2 = v43[0];
  a2[1] = v38;
  return result;
}

unint64_t lazy protocol witness table accessor for type AssistantDataSnapshot.Source and conformance AssistantDataSnapshot.Source()
{
  unint64_t result = lazy protocol witness table cache variable for type AssistantDataSnapshot.Source and conformance AssistantDataSnapshot.Source;
  if (!lazy protocol witness table cache variable for type AssistantDataSnapshot.Source and conformance AssistantDataSnapshot.Source)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AssistantDataSnapshot.Source and conformance AssistantDataSnapshot.Source);
  }
  return result;
}

uint64_t assignWithCopy for AssistantDataSnapshot(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  return a1;
}

__n128 __swift_memcpy90_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AssistantDataSnapshot(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  return a1;
}

ValueMetadata *type metadata accessor for AssistantDataSnapshot()
{
  return &type metadata for AssistantDataSnapshot;
}

uint64_t destroy for AssistantDataSnapshot.MeCard()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AssistantDataSnapshot.MeCard(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AssistantDataSnapshot.MeCard(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for AssistantDataSnapshot.MeCard(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssistantDataSnapshot.MeCard(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssistantDataSnapshot.MeCard(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssistantDataSnapshot.MeCard()
{
  return &type metadata for AssistantDataSnapshot.MeCard;
}

uint64_t destroy for AssistantDataSnapshot.MeCard.ContactAddress()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AssistantDataSnapshot.MeCard.ContactAddress(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AssistantDataSnapshot.MeCard.ContactAddress(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void *assignWithTake for AssistantDataSnapshot.MeCard.ContactAddress(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssistantDataSnapshot.MeCard.ContactAddress(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AssistantDataSnapshot.MeCard.ContactAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssistantDataSnapshot.MeCard.ContactAddress()
{
  return &type metadata for AssistantDataSnapshot.MeCard.ContactAddress;
}

ValueMetadata *type metadata accessor for AssistantDataSnapshot.ContentRestriction()
{
  return &type metadata for AssistantDataSnapshot.ContentRestriction;
}

unsigned char *storeEnumTagSinglePayload for AssistantDataSnapshot.Source(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C90C3FDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssistantDataSnapshot.Source()
{
  return &type metadata for AssistantDataSnapshot.Source;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, char a10)
{
  uint64_t v16 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v17 = a8 + v16[5];
  *(void *)uint64_t v17 = a3;
  *(void *)(v17 + 8) = a4;
  *(unsigned char *)(v17 + 16) = a5;
  *(void *)(a8 + v16[6]) = a6;
  uint64_t v18 = a8 + v16[7];
  *(void *)uint64_t v18 = a7;
  *(void *)(v18 + 8) = a9;
  *(unsigned char *)(v18 + 16) = a10;
  uint64_t v19 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(a1);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = (uint64_t *)(a8 + v16[8]);
  *uint64_t v22 = v19;
  v22[1] = v21;
  uint64_t v23 = type metadata accessor for Date();
  os_log_type_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32);

  return v24(a8, a2, v23);
}

const char *PerformanceUtil.Ticket.maxDescriptionLength.unsafeMutableAddressor()
{
  return "d";
}

uint64_t static PerformanceUtil.Ticket.maxDescriptionLength.getter()
{
  return 100;
}

uint64_t PerformanceUtil.Ticket.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t PerformanceUtil.Ticket.fileId.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for PerformanceUtil.Ticket(0) + 20));
}

uint64_t PerformanceUtil.Ticket.lineNumber.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for PerformanceUtil.Ticket(0) + 24));
}

uint64_t PerformanceUtil.Ticket.callingFunction.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for PerformanceUtil.Ticket(0) + 28));
}

uint64_t PerformanceUtil.Ticket.description.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PerformanceUtil.Ticket(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PerformanceUtil.Measurement.ticket.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PerformanceUtil.Ticket(v1, a1, type metadata accessor for PerformanceUtil.Ticket);
}

double PerformanceUtil.Measurement.duration.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for PerformanceUtil.Measurement(0) + 20));
}

BOOL static PerformanceUtil.Measurement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static PerformanceUtil.Ticket.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for PerformanceUtil.Measurement(0);
  return *(double *)(a1 + *(int *)(v4 + 20)) == *(double *)(a2 + *(int *)(v4 + 20));
}

uint64_t PerformanceUtil.Measurement.init(ticket:duration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWObTm_1(a1, a2, type metadata accessor for PerformanceUtil.Ticket);
  uint64_t result = type metadata accessor for PerformanceUtil.Measurement(0);
  *(double *)(a2 + *(int *)(result + 20)) = a3;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PerformanceUtil.Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (specialized static PerformanceUtil.Ticket.== infix(_:_:)(a1, a2) & 1) != 0
      && *(double *)(a1 + *(int *)(a3 + 20)) == *(double *)(a2 + *(int *)(a3 + 20));
}

uint64_t PerformanceUtil.__allocating_init(analyticsComponentIdGenerator:trialClient:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  PerformanceUtil.init(analyticsComponentIdGenerator:trialClient:)(a1, a2);
  return v4;
}

uint64_t static PerformanceUtil.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

void *PerformanceUtil.TrialNamespace.unsafeMutableAddressor()
{
  return &static PerformanceUtil.TrialNamespace;
}

unint64_t static PerformanceUtil.TrialNamespace.getter()
{
  return 0xD000000000000017;
}

id PerformanceUtil.trialClient.getter()
{
  return *(id *)(v0 + 16);
}

id PerformanceUtil.mockStream.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = *(id *)(v0 + 24);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    uint64_t v4 = *(void **)(v0 + 24);
    *(void *)(v0 + 24) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t PerformanceUtil.mockStream.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return MEMORY[0x1F41817F8]();
}

void (*PerformanceUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = PerformanceUtil.mockStream.getter();
  return PerformanceUtil.mockStream.modify;
}

void PerformanceUtil.mockStream.modify(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  id v3 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = v2;
}

uint64_t PerformanceUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t key path setter for PerformanceUtil.measurements : PerformanceUtil(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 40) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t PerformanceUtil.init(analyticsComponentIdGenerator:trialClient:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 40) = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E00]), sel_init);
  id v5 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  unsigned int v6 = (void *)MEMORY[0x1CB77CA90](0xD000000000000015, 0x80000001C919C770);
  id v7 = objc_msgSend(v5, sel_initWithSuiteName_, v6);

  if (v7)
  {
    uint64_t v8 = (void *)MEMORY[0x1CB77CA90](0xD000000000000022, 0x80000001C91A0BA0);
    unsigned __int8 v9 = objc_msgSend(v7, sel_BOOLForKey_, v8);
  }
  else
  {
    unsigned __int8 v9 = 0;
  }
  *(unsigned char *)(v2 + 56) = v9;
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 16) = a2;
  return v2;
}

Swift::Void __swiftcall PerformanceUtil.resetMeasurements()()
{
  uint64_t v1 = *(void **)(v0 + 48);
  objc_msgSend(v1, sel_lock);
  swift_beginAccess();
  *(void *)(v0 + 40) = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_unlock);
}

Swift::Void __swiftcall PerformanceUtil.emitMeasurements(requestId:resultCandidateId:)(Swift::String_optional requestId, Swift::String_optional resultCandidateId)
{
  object = resultCandidateId.value._object;
  uint64_t countAndFlagsBits = resultCandidateId.value._countAndFlagsBits;
  id v5 = requestId.value._object;
  uint64_t v6 = requestId.value._countAndFlagsBits;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v7 - 8);
  unsigned __int8 v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (object)
  {
    *unsigned __int8 v9 = countAndFlagsBits;
    v9[1] = (uint64_t)object;
    uint64_t v10 = *MEMORY[0x1E4F9FE50];
    uint64_t v11 = type metadata accessor for PommesCandidateId();
    uint64_t v12 = *(void *)(v11 - 8);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 104))(v9, v10, v11);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  else
  {
    uint64_t v13 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 1, 1, v13);
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = AFIsInternalInstall();
  (*(void (**)(uint64_t, void *, uint64_t *, uint64_t))(*(void *)v2 + 248))(v6, v5, v9, v14);
  outlined destroy of PommesCandidateId?((uint64_t)v9);
}

id *PerformanceUtil.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t PerformanceUtil.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Emittable.mockStream.getter in conformance PerformanceUtil()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t protocol witness for Emittable.analyticsComponentIdGenerator.getter in conformance PerformanceUtil()
{
  return swift_retain();
}

uint64_t specialized static PerformanceUtil.Ticket.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v56 = (uint64_t)&v52 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v57 = (uint64_t)&v52 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v55 = (char *)&v52 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v52 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v52 - v18;
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v52 - v21;
  MEMORY[0x1F4188790](v20);
  os_log_type_t v24 = (char *)&v52 - v23;
  char v25 = static Date.== infix(_:_:)();
  outlined init with copy of PerformanceUtil.Ticket(a1, (uint64_t)v24, type metadata accessor for PerformanceUtil.Ticket);
  outlined init with copy of PerformanceUtil.Ticket(a2, (uint64_t)v22, type metadata accessor for PerformanceUtil.Ticket);
  if ((v25 & 1) == 0)
  {
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v22, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v24, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PerformanceUtil.Ticket(a1, (uint64_t)v19, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PerformanceUtil.Ticket(a2, (uint64_t)v16, type metadata accessor for PerformanceUtil.Ticket);
    uint64_t v32 = (uint64_t)v55;
    goto LABEL_9;
  }
  unint64_t v54 = v7;
  uint64_t v26 = StaticString.description.getter();
  uint64_t v28 = v27;
  uint64_t v53 = v4;
  if (v26 == StaticString.description.getter() && v28 == v29)
  {
    swift_bridgeObjectRelease_n();
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v22, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v24, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PerformanceUtil.Ticket(a1, (uint64_t)v19, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PerformanceUtil.Ticket(a2, (uint64_t)v16, type metadata accessor for PerformanceUtil.Ticket);
    uint64_t v7 = v54;
    uint64_t v32 = (uint64_t)v55;
    goto LABEL_11;
  }
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of PerformanceUtil.Measurement((uint64_t)v22, type metadata accessor for PerformanceUtil.Ticket);
  outlined destroy of PerformanceUtil.Measurement((uint64_t)v24, type metadata accessor for PerformanceUtil.Ticket);
  outlined init with copy of PerformanceUtil.Ticket(a1, (uint64_t)v19, type metadata accessor for PerformanceUtil.Ticket);
  outlined init with copy of PerformanceUtil.Ticket(a2, (uint64_t)v16, type metadata accessor for PerformanceUtil.Ticket);
  uint64_t v7 = v54;
  uint64_t v32 = (uint64_t)v55;
  if ((v31 & 1) == 0)
  {
LABEL_9:
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v16, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v19, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PerformanceUtil.Ticket(a1, v32, type metadata accessor for PerformanceUtil.Ticket);
    uint64_t v33 = v57;
    outlined init with copy of PerformanceUtil.Ticket(a2, v57, type metadata accessor for PerformanceUtil.Ticket);
LABEL_15:
    outlined destroy of PerformanceUtil.Measurement(v33, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of PerformanceUtil.Measurement(v32, type metadata accessor for PerformanceUtil.Ticket);
    uint64_t v43 = a1;
    uint64_t v42 = v56;
    outlined init with copy of PerformanceUtil.Ticket(v43, v56, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PerformanceUtil.Ticket(a2, (uint64_t)v7, type metadata accessor for PerformanceUtil.Ticket);
    char v44 = 0;
    goto LABEL_16;
  }
LABEL_11:
  uint64_t v34 = v53;
  uint64_t v35 = *(void *)&v19[*(int *)(v53 + 24)];
  outlined destroy of PerformanceUtil.Measurement((uint64_t)v19, type metadata accessor for PerformanceUtil.Ticket);
  uint64_t v36 = *(void *)&v16[*(int *)(v34 + 24)];
  outlined destroy of PerformanceUtil.Measurement((uint64_t)v16, type metadata accessor for PerformanceUtil.Ticket);
  outlined init with copy of PerformanceUtil.Ticket(a1, v32, type metadata accessor for PerformanceUtil.Ticket);
  uint64_t v33 = v57;
  outlined init with copy of PerformanceUtil.Ticket(a2, v57, type metadata accessor for PerformanceUtil.Ticket);
  if (v35 != v36) {
    goto LABEL_15;
  }
  uint64_t v37 = StaticString.description.getter();
  uint64_t v39 = v38;
  if (v37 == StaticString.description.getter() && v39 == v40)
  {
    swift_bridgeObjectRelease_n();
    outlined destroy of PerformanceUtil.Measurement(v33, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of PerformanceUtil.Measurement(v32, type metadata accessor for PerformanceUtil.Ticket);
    uint64_t v41 = a1;
    uint64_t v42 = v56;
    outlined init with copy of PerformanceUtil.Ticket(v41, v56, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PerformanceUtil.Ticket(a2, (uint64_t)v7, type metadata accessor for PerformanceUtil.Ticket);
  }
  else
  {
    char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of PerformanceUtil.Measurement(v33, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of PerformanceUtil.Measurement(v32, type metadata accessor for PerformanceUtil.Ticket);
    uint64_t v47 = a1;
    uint64_t v42 = v56;
    outlined init with copy of PerformanceUtil.Ticket(v47, v56, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PerformanceUtil.Ticket(a2, (uint64_t)v7, type metadata accessor for PerformanceUtil.Ticket);
    char v44 = 0;
    if ((v46 & 1) == 0) {
      goto LABEL_16;
    }
  }
  uint64_t v48 = *(int *)(v34 + 32);
  uint64_t v49 = *(void *)(v42 + v48);
  uint64_t v50 = *(void *)(v42 + v48 + 8);
  uint64_t v51 = &v7[v48];
  if (v49 == *(void *)v51 && v50 == *((void *)v51 + 1)) {
    char v44 = 1;
  }
  else {
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
LABEL_16:
  outlined destroy of PerformanceUtil.Measurement(v42, type metadata accessor for PerformanceUtil.Ticket);
  outlined destroy of PerformanceUtil.Measurement((uint64_t)v7, type metadata accessor for PerformanceUtil.Ticket);
  return v44 & 1;
}

uint64_t sub_1C90C515C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_1C90C51A8(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 136))(*a1);
}

uint64_t sub_1C90C51FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for PerformanceUtil()
{
  return self;
}

uint64_t method lookup function for PerformanceUtil(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PerformanceUtil);
}

uint64_t dispatch thunk of PerformanceUtil.mockStream.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PerformanceUtil.mockStream.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PerformanceUtil.mockStream.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of PerformanceUtil.measurements.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PerformanceUtil.__allocating_init(analyticsComponentIdGenerator:trialClient:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 200))(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v15 + 208) + **(int **)(*(void *)v15 + 208));
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v16 + 16) = v18;
  void *v18 = v16;
  v18[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:block:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PerformanceUtil.resetMeasurements()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of PerformanceUtil.emitMeasurements(requestId:resultCandidateId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:isInternalInstall:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t *initializeBufferWithCopyOfBuffer for PerformanceUtil.Ticket(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    long long v12 = *(_OWORD *)v11;
    v10[16] = v11[16];
    *(_OWORD *)uint64_t v10 = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = (char *)a1 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    v15[16] = v16[16];
    uint64_t v17 = (uint64_t *)((char *)a1 + v14);
    uint64_t v18 = (uint64_t *)((char *)a2 + v14);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for PerformanceUtil.Ticket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PerformanceUtil.Ticket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for PerformanceUtil.Ticket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = (long long *)(a2 + v7);
  long long v11 = *v10;
  *(unsigned char *)(v9 + 16) = *((unsigned char *)v10 + 16);
  uint64_t v12 = *(void *)(a2 + v8);
  *(_OWORD *)uint64_t v9 = v11;
  *(void *)(a1 + v8) = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  uint64_t v17 = (void *)(a1 + v14);
  uint64_t v18 = (uint64_t *)(a2 + v14);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PerformanceUtil.Ticket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C90C59A4);
}

uint64_t sub_1C90C59A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PerformanceUtil.Ticket(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C90C5A7C);
}

uint64_t sub_1C90C5A7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for PerformanceUtil.Ticket()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PerformanceUtil.Measurement(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
    uint64_t v9 = v8[5];
    unint64_t v10 = (char *)a1 + v9;
    long long v11 = (char *)a2 + v9;
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    v10[16] = v11[16];
    *(uint64_t *)((char *)a1 + v8[6]) = *(uint64_t *)((char *)a2 + v8[6]);
    uint64_t v12 = v8[7];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    v13[16] = v14[16];
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    uint64_t v15 = v8[8];
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for PerformanceUtil.Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
  uint64_t v11 = v7[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  uint64_t v14 = v7[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for PerformanceUtil.Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
  uint64_t v11 = v7[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(a1 + v7[8]) = *(_OWORD *)(a2 + v7[8]);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PerformanceUtil.Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
  uint64_t v11 = v7[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  uint64_t v14 = v7[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for PerformanceUtil.Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C90C5FEC);
}

uint64_t sub_1C90C5FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PerformanceUtil.Ticket(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PerformanceUtil.Measurement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C90C606C);
}

uint64_t sub_1C90C606C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PerformanceUtil.Ticket(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for PerformanceUtil.Measurement()
{
  uint64_t result = type metadata accessor for PerformanceUtil.Ticket(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t closure #2 in PhoneCallExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v16 - v7;
  uint64_t v9 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.phoneCall.getter();
  uint64_t v10 = MEMORY[0x1CB779200](v9);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (v13)
  {
    type metadata accessor for PhoneCallExperience();
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
    uint64_t v14 = PhoneCallExperience.__allocating_init(phoneCall:queryConfidenceScore:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    uint64_t v14 = 0;
  }
  *a1 = v14;
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallExperiencesResolver()
{
  return &type metadata for PhoneCallExperiencesResolver;
}

uint64_t partial apply for closure #2 in PhoneCallExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in PhoneCallExperiencesResolver.buildExperiences(from:with:)(a1);
}

uint64_t static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v93 = a5;
  uint64_t v99 = a3;
  uint64_t v105 = a1;
  uint64_t v7 = type metadata accessor for SportsResolverMetrics();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v98 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsResolverMetrics?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v94 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v97 = (char *)&v84 - v13;
  uint64_t v92 = a4;
  uint64_t v103 = type metadata accessor for SportsPersonalizationSelection();
  uint64_t v101 = *(void *)(v103 - 8);
  MEMORY[0x1F4188790](v103);
  os_log_type_t v100 = (char *)&v84 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v102 = (uint64_t)&v84 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v84 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v87 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v84 - v26;
  uint64_t v91 = type metadata accessor for SportsResolverConfig();
  uint64_t v90 = *(void *)(v91 - 8);
  MEMORY[0x1F4188790](v91);
  uint64_t v104 = (char *)&v84 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)v22, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v29 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v30 = *(void *)(v29 - 8);
  char v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  unsigned int v32 = v31(v22, 1, v29);
  uint64_t v95 = v7;
  uint64_t v96 = v8;
  uint64_t v89 = v18;
  uint64_t v88 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v31;
  if (v32 == 1)
  {
    uint64_t v33 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?;
    uint64_t v34 = (uint64_t)v22;
LABEL_8:
    outlined destroy of MediaUserStateCenter?(v34, v33);
    goto LABEL_10;
  }
  uint64_t v35 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v29);
  uint64_t v36 = *(void *)(v35 + 16);
  uint64_t v37 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  uint64_t v38 = *(void *)(v37 - 8);
  if (v36)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v27, v35+ ((*(unsigned __int8 *)(*(void *)(v37 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v37 - 8) + 80)), v37);
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v39 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v27, v39, 1, v37);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v27, 1, v37) == 1)
  {
    uint64_t v33 = &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?;
    uint64_t v34 = (uint64_t)v27;
    goto LABEL_8;
  }
  Apple_Parsec_Siri_Context_ResultEntity.name.getter();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v37);
LABEL_10:
  uint64_t v40 = (uint64_t)v104;
  uint64_t v42 = v100;
  uint64_t v41 = v101;
  SportsResolverConfig.init(intentTypeName:bundleId:)();
  uint64_t v43 = a2;
  uint64_t v44 = v102;
  outlined init with copy of MediaUserStateCenter?(v43, v102, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  uint64_t v45 = v103;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v42, v105, v103);
  uint64_t v46 = v41;
  uint64_t v47 = Logger.logObject.getter();
  int v48 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v47, (os_log_type_t)v48))
  {
    int v86 = v48;
    uint64_t v49 = swift_slowAlloc();
    uint64_t v85 = swift_slowAlloc();
    v107[0] = v85;
    *(_DWORD *)uint64_t v49 = 136315394;
    uint64_t v50 = (uint64_t)v89;
    outlined init with copy of MediaUserStateCenter?(v44, (uint64_t)v89, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    if (v88(v50, 1, v29) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v50, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      unint64_t v51 = 0xE700000000000000;
      uint64_t v53 = v96;
      uint64_t v52 = (uint64_t)v97;
      uint64_t v54 = 0x6E776F6E6B6E75;
    }
    else
    {
      uint64_t v59 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v50, v29);
      uint64_t v60 = *(void *)(v59 + 16);
      uint64_t v61 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
      uint64_t v62 = *(void *)(v61 - 8);
      uint64_t v54 = 0x6E776F6E6B6E75;
      if (v60)
      {
        uint64_t v63 = (uint64_t)v87;
        (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v61 - 8) + 16))(v87, v59+ ((*(unsigned __int8 *)(*(void *)(v61 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v61 - 8) + 80)), v61);
        uint64_t v64 = 0;
      }
      else
      {
        uint64_t v64 = 1;
        uint64_t v63 = (uint64_t)v87;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v63, v64, 1, v61);
      swift_bridgeObjectRelease();
      int v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v63, 1, v61);
      uint64_t v53 = v96;
      uint64_t v52 = (uint64_t)v97;
      if (v65 == 1)
      {
        outlined destroy of MediaUserStateCenter?(v63, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
        unint64_t v51 = 0xE700000000000000;
      }
      else
      {
        uint64_t v54 = Apple_Parsec_Siri_Context_ResultEntity.name.getter();
        unint64_t v51 = v66;
        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v63, v61);
      }
    }
    uint64_t v67 = v102;
    uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v51, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v67, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    *(_WORD *)(v49 + 12) = 2080;
    uint64_t v68 = v103;
    uint64_t v58 = v93;
    uint64_t v69 = v100;
    uint64_t v70 = SportsPersonalizationSelection<A>.debugDescription.getter(v103, v93);
    uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v101 + 8))(v69, v68);
    _os_log_impl(&dword_1C8F83000, v47, (os_log_type_t)v86, "Logging sports personalization metrics: intent=%s selection=%s", (uint8_t *)v49, 0x16u);
    uint64_t v72 = v85;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v72, -1, -1);
    MEMORY[0x1CB77E470](v49, -1, -1);

    uint64_t v56 = v98;
    uint64_t v40 = (uint64_t)v104;
    uint64_t v57 = (uint64_t)v94;
    uint64_t v55 = v95;
  }
  else
  {

    outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v42, v45);
    uint64_t v55 = v95;
    uint64_t v53 = v96;
    uint64_t v52 = (uint64_t)v97;
    uint64_t v56 = v98;
    uint64_t v58 = v93;
    uint64_t v57 = (uint64_t)v94;
  }
  closure #1 in static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(v105, v40, v92, v58, v52);
  outlined init with copy of MediaUserStateCenter?(v52, v57, &demangling cache variable for type metadata for SportsResolverMetrics?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v57, 1, v55) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for SportsResolverMetrics?);
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v40, v91);
    return outlined destroy of MediaUserStateCenter?(v57, &demangling cache variable for type metadata for SportsResolverMetrics?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v56, v57, v55);
    SportsResolverMetrics.logSportsMetric()();
    if (v74)
    {
      id v75 = v74;
      id v76 = v74;
      char v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        uint64_t v80 = swift_slowAlloc();
        v107[0] = v80;
        *(_DWORD *)uint64_t v79 = 136315138;
        swift_getErrorValue();
        uint64_t v81 = Error.localizedDescription.getter();
        uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C8F83000, v77, v78, "Logging sports metrics failed with: %s", v79, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v80, -1, -1);
        MEMORY[0x1CB77E470](v79, -1, -1);

        (*(void (**)(char *, uint64_t))(v53 + 8))(v98, v55);
        uint64_t v83 = (uint64_t)v97;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v55);
        uint64_t v83 = v52;
      }
      outlined destroy of MediaUserStateCenter?(v83, &demangling cache variable for type metadata for SportsResolverMetrics?);
      return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v104, v91);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v55);
      outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for SportsResolverMetrics?);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 8))(v40, v91);
    }
  }
}

uint64_t closure #1 in static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SportsResolverConfig();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for SportsPersonalizationSelection();
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v24 - v17;
  (*(void (**)(char *, uint64_t))(v19 + 16))((char *)&v24 - v17, a1);
  int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 2, a3);
  if (v20)
  {
    if (v20 == 1)
    {
      uint64_t v21 = type metadata accessor for SportsResolverMetrics();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a5, 1, 1, v21);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
    SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v18, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
    (*(void (**)(uint64_t))(v25 + 8))(a3);
    SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a3);
  }
  uint64_t v23 = type metadata accessor for SportsResolverMetrics();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a5, 0, 1, v23);
}

uint64_t dispatch thunk of SportsPersonalizationResultMetric.recommendationFound.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for SportsPersonalizationMetrics()
{
  return &type metadata for SportsPersonalizationMetrics;
}

uint64_t SmartPlayPreflightClient.__allocating_init(dataProviderManager:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

unint64_t static SmartPlayPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD000000000000018;
}

uint64_t SmartPlayPreflightClient.dataProviderManager.getter()
{
  return swift_retain();
}

uint64_t SmartPlayPreflightClient.init(dataProviderManager:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

Swift::Bool __swiftcall SmartPlayPreflightClient.isLocalPlaybackResumable()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioState();
  uint64_t v44 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v43 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v45 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  int v48 = (char *)&v43 - v15;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v46 = __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = v11;
    uint64_t v20 = v2;
    uint64_t v21 = v12;
    uint64_t v22 = v1;
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_1C8F83000, v17, v18, "SmartPlayPreflightClient#isLocalPlaybackResumable", v23, 2u);
    uint64_t v24 = v23;
    uint64_t v1 = v22;
    uint64_t v12 = v21;
    uint64_t v2 = v20;
    uint64_t v11 = v19;
    MEMORY[0x1CB77E470](v24, -1, -1);
  }

  (*(void (**)(void))(**(void **)(v1 + 16) + 408))();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_1C8F83000, v25, v26, "SmartPlayPreflightClient#isLocalPlaybackResumable queue state is nil", v27, 2u);
      MEMORY[0x1CB77E470](v27, -1, -1);
    }

    char v28 = 0;
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    uint64_t v30 = v44;
    uint64_t v47 = v11;
    uint64_t v31 = v11;
    unsigned int v32 = v48;
    v29(v48, v10, v31);
    Apple_Parsec_Siri_V2alpha_AmpUserState.ampSubscriptionStatus.getter();
    (*(void (**)(char *, void, uint64_t))(v30 + 104))(v5, *MEMORY[0x1E4F88D30], v2);
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioState and conformance Apple_Parsec_Siri_V2alpha_AudioState();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v34 = v49;
    uint64_t v33 = v50;
    uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
    v35(v5, v2);
    v35(v7, v2);
    uint64_t v36 = v45;
    uint64_t v37 = v47;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v45, v32, v47);
    if (v33 == v34) {
      char v28 = Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.hasAudioQueueStateItem.getter();
    }
    else {
      char v28 = 0;
    }
    uint64_t v38 = *(void (**)(char *, uint64_t))(v12 + 8);
    v38(v36, v37);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 67109120;
      LODWORD(v50) = v28 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v39, v40, "SmartPlayPreflightClient#isLocalPlaybackResumable: %{BOOL}d", v41, 8u);
      MEMORY[0x1CB77E470](v41, -1, -1);
    }

    v38(v48, v47);
  }
  return v28 & 1;
}

uint64_t SmartPlayPreflightClient.deinit()
{
  swift_release();
  return v0;
}

uint64_t SmartPlayPreflightClient.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance SmartPlayPreflightClient()
{
  return 0xD000000000000018;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioState and conformance Apple_Parsec_Siri_V2alpha_AudioState()
{
  unint64_t result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioState and conformance Apple_Parsec_Siri_V2alpha_AudioState;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioState and conformance Apple_Parsec_Siri_V2alpha_AudioState)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioState();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioState and conformance Apple_Parsec_Siri_V2alpha_AudioState);
  }
  return result;
}

uint64_t partial apply for closure #2 in SmartPlayPreflightClient.handle(pommesSearchRequest:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 96))();
  *a1 = result & 1;
  return result;
}

uint64_t type metadata accessor for SmartPlayPreflightClient()
{
  return self;
}

uint64_t method lookup function for SmartPlayPreflightClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SmartPlayPreflightClient);
}

uint64_t dispatch thunk of SmartPlayPreflightClient.__allocating_init(dataProviderManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of SmartPlayPreflightClient.isLocalPlaybackResumable()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SmartPlayPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t ResponseCache.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = 0;
  type metadata accessor for AnalyticsComponentIdGenerator();
  uint64_t v1 = swift_allocObject();
  type metadata accessor for PommesCacheInstrumentationUtil();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = v1;
  *(void *)(v0 + 16) = v2;
  return v0;
}

void one-time initialization function for sqliteTransient()
{
  static ResponseCache.sqliteTransient = -1;
}

void *ResponseCache.sqliteFileName.unsafeMutableAddressor()
{
  return &static ResponseCache.sqliteFileName;
}

unint64_t static ResponseCache.sqliteFileName.getter()
{
  return 0xD000000000000011;
}

uint64_t ResponseCache.cacheInstrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t ResponseCache.init()()
{
  *(void *)(v0 + 24) = 0;
  type metadata accessor for AnalyticsComponentIdGenerator();
  uint64_t v1 = swift_allocObject();
  type metadata accessor for PommesCacheInstrumentationUtil();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = v1;
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t ResponseCache.deinit()
{
  (*(void (**)(void))(*(void *)v0 + 144))();
  swift_release();
  return v0;
}

uint64_t ResponseCache.__deallocating_deinit()
{
  ResponseCache.deinit();

  return swift_deallocClassInstance();
}

const char *ResponseCache.DBError.init(db:)(sqlite3 *a1)
{
  if (!a1) {
    return 0;
  }
  unsigned int v1 = sqlite3_errcode(a1);
  uint64_t v2 = v1;
  switch(v1)
  {
    case 0u:
      return (const char *)v2;
    case 0x65u:
      return 0;
    case 0x64u:
      return 0;
  }
  uint64_t result = sqlite3_errstr(v1);
  if (result)
  {
    String.init(cString:)();
    return (const char *)v2;
  }
  __break(1u);
  return result;
}

const char *ResponseCache.DBError.init(errorCode:)(unsigned int a1)
{
  if (a1 == 101) {
    return 0;
  }
  if (a1 == 100) {
    return 0;
  }
  uint64_t v1 = a1;
  if (!a1) {
    return (const char *)v1;
  }
  uint64_t result = sqlite3_errstr(a1);
  if (result)
  {
    String.init(cString:)();
    return (const char *)v1;
  }
  __break(1u);
  return result;
}

uint64_t ResponseCache.DBError.description.getter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = 0x4F5F4554494C5153;
  switch((unint64_t)a3)
  {
    case 0uLL:
      return result;
    case 1uLL:
      uint64_t result = 0x525F4554494C5153;
      break;
    case 2uLL:
      uint64_t result = 0x445F4554494C5153;
      break;
    case 3uLL:
      uint64_t result = 0x7274706C6C756ELL;
      break;
    case 4uLL:
      uint64_t result = 0x6E65704F746F6ELL;
      break;
    case 5uLL:
      uint64_t result = 0x44746F4E68746170;
      break;
    default:
      v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._uint64_t countAndFlagsBits = 44;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = 0xE90000000000004BLL;
      v7._object = a3;
      String.append(_:)(v7);
      v8._uint64_t countAndFlagsBits = 41;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      uint64_t result = 0x28726F727265;
      break;
  }
  return result;
}

BOOL ResponseCache.isOpen.getter()
{
  return *(void *)(v0 + 24) != 0;
}

void ResponseCache.open(directoryPath:flags:)(uint64_t a1, int a2)
{
  uint64_t v4 = v2;
  v45[1] = *(sqlite3 **)MEMORY[0x1E4F143B8];
  Swift::String v6 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 128))(v7))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1C8F83000, v11, v12, "ResponseCache : Cache database already open", v13, 2u);
      MEMORY[0x1CB77E470](v13, -1, -1);
    }

    return;
  }
  Date.init()();
  uint64_t v14 = &v9[v6[5]];
  *(void *)uint64_t v14 = "SiriInformationSearch/ResponseCache.swift";
  *((void *)v14 + 1) = 41;
  unsigned char v14[16] = 2;
  *(void *)&v9[v6[6]] = 145;
  uint64_t v15 = &v9[v6[7]];
  *(void *)uint64_t v15 = "open(directoryPath:flags:)";
  *((void *)v15 + 1) = 26;
  v15[16] = 2;
  uint64_t v16 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000012);
  uint64_t v17 = (uint64_t *)&v9[v6[8]];
  *uint64_t v17 = v16;
  v17[1] = v18;
  if (URL.hasDirectoryPath.getter())
  {
    URL.path.getter();
    uint64_t v19 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    int v20 = access((const char *)(v19 + 32), 0);
    swift_release();
    if (!v20) {
      goto LABEL_11;
    }
    id v21 = objc_msgSend(self, sel_defaultManager);
    uint64_t v22 = URL.path.getter();
    uint64_t v23 = (void *)MEMORY[0x1CB77CA90](v22);
    swift_bridgeObjectRelease();
    v45[0] = 0;
    unsigned int v24 = objc_msgSend(v21, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v23, 1, 0, v45);

    if (v24)
    {
      uint64_t v25 = v45[0];
LABEL_11:
      uint64_t v26 = type metadata accessor for URL();
      uint64_t v27 = *(void *)(v26 - 8);
      LODWORD(v42) = a2;
      uint64_t v28 = v27;
      MEMORY[0x1F4188790](v26);
      uint64_t v30 = (char *)&v41 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v31 = URL.path.getter();
      unint64_t v33 = v32;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v26);
      v45[0] = 0;
      swift_bridgeObjectRetain();
      specialized static ResponseCache.sqlite_run(closure:)(v31, v33, v45, v42);
      if (v3)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        uint64_t v42 = v31;
        swift_bridgeObjectRelease();
        *(sqlite3 **)(v4 + 24) = v45[0];
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v36 = type metadata accessor for Logger();
        __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
        swift_bridgeObjectRetain();
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = (uint8_t *)swift_slowAlloc();
          uint64_t v40 = swift_slowAlloc();
          uint64_t v44 = v40;
          *(_DWORD *)uint64_t v39 = 136315138;
          uint64_t v41 = v39 + 4;
          swift_bridgeObjectRetain();
          uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v33, &v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C8F83000, v37, v38, "ResponseCache : Opened database @ %s", v39, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v40, -1, -1);
          MEMORY[0x1CB77E470](v39, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        ResponseCache.createTables()();
      }
      goto LABEL_21;
    }
    uint64_t v35 = v45[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  else
  {
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    swift_allocError();
    *uint64_t v34 = 0;
    v34[1] = 0;
    v34[2] = 5;
    swift_willThrow();
  }
LABEL_21:
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v9, 0);
  outlined destroy of PerformanceUtil.Ticket((uint64_t)v9);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ResponseCache.close()()
{
  if ((*((uint64_t (**)(void))*v0 + 16))())
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    MEMORY[0x1F4188790](v1 - 8);
    uint64_t v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
    closure #1 in ResponseCache.close()((uint64_t)v0, (uint64_t)v3);
    int v4 = sqlite3_close(v0[3]);
    v0[3] = 0;
    if (!v4)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        unsigned int v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unsigned int v24 = 0;
        _os_log_impl(&dword_1C8F83000, v22, v23, "ResponseCache : Closed database", v24, 2u);
        MEMORY[0x1CB77E470](v24, -1, -1);
      }

      specialized ResponseCache.markPurgeable(_:)((uint64_t)v3);
      goto LABEL_24;
    }
    unsigned int v5 = v4;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v27 = (uint64_t)&v27;
      uint64_t v11 = v10;
      uint64_t v29 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      LODWORD(v28) = v5;
      uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v7, v8, "ResponseCache : Database close failed : %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v11, -1, -1);
      MEMORY[0x1CB77E470](v9, -1, -1);
    }

    if (v5 == 101)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 2;
      goto LABEL_23;
    }
    if (v5 == 100)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 1;
LABEL_23:
      lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
      swift_allocError();
      *uint64_t v26 = v14;
      v26[1] = v15;
      _OWORD v26[2] = v16;
      swift_willThrow();
LABEL_24:
      outlined destroy of MediaUserStateCenter?((uint64_t)v3, &demangling cache variable for type metadata for URL?);
      return;
    }
    if (sqlite3_errstr(v5))
    {
      uint64_t v15 = String.init(cString:)();
      uint64_t v16 = v25;
      uint64_t v14 = v5;
      goto LABEL_23;
    }
    __break(1u);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      int v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v20 = 0;
      _os_log_impl(&dword_1C8F83000, v18, v19, "ResponseCache : Ignoring request to close because database is not open", v20, 2u);
      MEMORY[0x1CB77E470](v20, -1, -1);
    }
  }
}

uint64_t closure #1 in ResponseCache.close()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (sqlite3_db_filename(*(sqlite3 **)(a1 + 24), "main") && (MEMORY[0x1CB77CB60](), v3))
  {
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    uint64_t v4 = type metadata accessor for URL();
    unsigned int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v6 = v4;
    uint64_t v7 = a2;
    uint64_t v8 = 0;
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_1C8F83000, v10, v11, "ResponseCache : Unable to obtain file name for DB", v12, 2u);
      MEMORY[0x1CB77E470](v12, -1, -1);
    }

    uint64_t v13 = type metadata accessor for URL();
    unsigned int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v6 = v13;
    uint64_t v7 = a2;
    uint64_t v8 = 1;
  }

  return v5(v7, v8, 1, v6);
}

uint64_t ResponseCache.store(response:expiration:)(uint64_t a1, double a2)
{
  uint64_t v3 = (uint64_t)v2;
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v123 = (char *)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v119 - v12;
  uint64_t v128 = PommesResponse.metadataDomainName.getter();
  uint64_t v129 = v14;
  uint64_t v15 = v2[2];
  uint64_t v16 = PommesResponse.requestId.getter();
  uint64_t v18 = v17;
  PommesResponse.pommesCandidateId.getter();
  if ((~*(void *)&a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_54;
  }
  if (a2 <= -1.0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (a2 >= 4294967300.0)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, void))(*(void *)v15 + 152))(v16, v18, v13, v128, v129, 8, a2);
  swift_bridgeObjectRelease();
  uint64_t v19 = outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for PommesCandidateId?);
  if (((*(uint64_t (**)(uint64_t))(*v2 + 128))(v19) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v47 = PommesResponse.requestId.getter();
    uint64_t v49 = v48;
    PommesResponse.pommesCandidateId.getter();
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v15 + 160))(v47, v49, v13, 1);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for PommesCandidateId?);
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    swift_allocError();
    *uint64_t v50 = 0;
    v50[1] = 0;
    v50[2] = 4;
    swift_willThrow();
    return 1;
  }
  uint64_t v120 = v15;
  Date.init()();
  int v20 = &v8[v6[5]];
  *(void *)int v20 = "SiriInformationSearch/ResponseCache.swift";
  *((void *)v20 + 1) = 41;
  v20[16] = 2;
  *(void *)&v8[v6[6]] = 216;
  uint64_t v21 = &v8[v6[7]];
  *(void *)uint64_t v21 = "store(response:expiration:)";
  *((void *)v21 + 1) = 27;
  v21[16] = 2;
  uint64_t v126 = a1;
  uint64_t v22 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000013);
  uint64_t v23 = v6[8];
  uint64_t v121 = v8;
  unsigned int v24 = (uint64_t *)&v8[v23];
  *unsigned int v24 = v22;
  v24[1] = v25;
  unint64_t v132 = 0;
  unint64_t v133 = 0xE000000000000000;
  _StringGuts.grow(_:)(84);
  v26._uint64_t countAndFlagsBits = 0xD000000000000018;
  v26._object = (void *)0x80000001C91A0E20;
  String.append(_:)(v26);
  v27._uint64_t countAndFlagsBits = 0x6361437972657571;
  v27._object = (void *)0xEA00000000006568;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = 0x220A282022;
  v28._object = (void *)0xE500000000000000;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 0x636E617265747475;
  v29._object = (void *)0xED00006873614865;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = 571092002;
  v30._object = (void *)0xE400000000000000;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = 0x636E617265747475;
  v31._object = (void *)0xE900000000000065;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = 571092002;
  v32._object = (void *)0xE400000000000000;
  String.append(_:)(v32);
  v33._uint64_t countAndFlagsBits = 0x6E69616D6F64;
  v33._object = (void *)0xE600000000000000;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = 571092002;
  v34._object = (void *)0xE400000000000000;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = 0x65736E6F70736572;
  v35._object = (void *)0xE800000000000000;
  String.append(_:)(v35);
  v36._uint64_t countAndFlagsBits = 571092002;
  v36._object = (void *)0xE400000000000000;
  String.append(_:)(v36);
  v37._object = (void *)0xEA00000000006E6FLL;
  v37._uint64_t countAndFlagsBits = 0x6974617269707865;
  String.append(_:)(v37);
  v38._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v38._object = (void *)0x80000001C91A0E40;
  String.append(_:)(v38);
  uint64_t v40 = v132;
  uint64_t v39 = v133;
  PommesResponse.searchRequestUtterance.getter();
  uint64_t v42 = v41;
  PommesResponse.sharedUserId.getter();
  uint64_t v44 = v43;
  uint64_t v122 = v42;
  sqlite3_int64 v45 = String.hashValue.getter();
  if (AFSupportsMultiUser())
  {
    if (v44)
    {
      uint64_t v46 = String.hashValue.getter();
      swift_bridgeObjectRelease();
      v45 ^= v46;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28DA8]), sel_initRequiringSecureCoding_, 1);
  dispatch thunk of PommesResponse.encode(cachingCoder:)();
  id v119 = v51;
  id v52 = objc_msgSend(v51, sel_encodedData);
  uint64_t v53 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v125 = v54;

  unint64_t v132 = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v55 = v127;
  specialized static ResponseCache.sqlite_run(closure:)(v3, (uint64_t)v40, v39, &v132);
  uint64_t v56 = v55;
  uint64_t v124 = v53;
  if (v55)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
LABEL_29:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    __swift_project_value_buffer(v66, (uint64_t)static Logger.pommes);
    id v67 = v56;
    id v68 = v56;
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      unint64_t v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v72 = (sqlite3_stmt *)swift_slowAlloc();
      uint64_t v131 = (uint64_t)v56;
      unint64_t v132 = v72;
      *(_DWORD *)unint64_t v71 = 136315138;
      id v73 = v56;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v74 = String.init<A>(describing:)();
      uint64_t v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, (uint64_t *)&v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v69, v70, "ResponseCache : Database INSERT INTO operation failed : %s", v71, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v72, -1, -1);
      MEMORY[0x1CB77E470](v71, -1, -1);
    }
    else
    {
    }
    uint64_t v76 = (uint64_t)v121;
    id v77 = v119;
    uint64_t v78 = PommesResponse.requestId.getter();
    uint64_t v80 = v79;
    PommesResponse.pommesCandidateId.getter();
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v120 + 160))(v78, v80, v13, 2);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for PommesCandidateId?);
    swift_willThrow();
    outlined consume of Data._Representation(v124, v125);

    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v76, 0);
    uint64_t v81 = v76;
LABEL_37:
    outlined destroy of PerformanceUtil.Ticket(v81);
    return 1;
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v6 = (int *)v132;
  uint64_t v57 = 1;
  int v58 = sqlite3_bind_int64(v132, 1, v45);
  if (v58)
  {
    unsigned int v59 = v58;
    if (v58 == 100)
    {
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      goto LABEL_26;
    }
    if (v58 == 101)
    {
LABEL_15:
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v57 = 2;
LABEL_26:
      lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
      uint64_t v56 = (void *)swift_allocError();
      *int v65 = v60;
      v65[1] = v61;
      v65[2] = v57;
      swift_willThrow();
      swift_bridgeObjectRelease();
LABEL_27:
      swift_bridgeObjectRelease();
LABEL_28:
      sqlite3_finalize(v132);
      goto LABEL_29;
    }
LABEL_24:
    if (sqlite3_errstr(v59)) {
      goto LABEL_25;
    }
    __break(1u);
    goto LABEL_84;
  }
  if (one-time initialization token for sqliteTransient != -1) {
    swift_once();
  }
  uint64_t v62 = (void (__cdecl *)(void *))static ResponseCache.sqliteTransient;
  uint64_t v63 = String.utf8CString.getter();
  unsigned int v59 = sqlite3_bind_text((sqlite3_stmt *)v6, 2, (const char *)(v63 + 32), -1, v62);
  swift_release();
  if (v59)
  {
    if (v59 == 100)
    {
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v57 = 1;
      goto LABEL_26;
    }
    if (v59 == 101) {
      goto LABEL_15;
    }
    if (sqlite3_errstr(v59))
    {
LABEL_25:
      uint64_t v61 = String.init(cString:)();
      uint64_t v57 = v64;
      uint64_t v60 = v59;
      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  uint64_t v83 = (void (__cdecl *)(void *))static ResponseCache.sqliteTransient;
  uint64_t v84 = String.utf8CString.getter();
  unsigned int v85 = sqlite3_bind_text((sqlite3_stmt *)v6, 3, (const char *)(v84 + 32), -1, v83);
  swift_release();
  if (v85)
  {
    if (v85 == 100)
    {
      uint64_t v86 = 0;
      uint64_t v87 = 0;
      uint64_t v88 = 1;
      goto LABEL_48;
    }
    if (v85 == 101)
    {
      uint64_t v86 = 0;
      uint64_t v87 = 0;
      uint64_t v88 = 2;
LABEL_48:
      lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
      uint64_t v56 = (void *)swift_allocError();
      void *v92 = v86;
      v92[1] = v87;
      v92[2] = v88;
      swift_willThrow();
      goto LABEL_27;
    }
    uint64_t result = (uint64_t)sqlite3_errstr(v85);
    if (result)
    {
      uint64_t v87 = String.init(cString:)();
      uint64_t v88 = v91;
      uint64_t v86 = v85;
      goto LABEL_48;
    }
    __break(1u);
    goto LABEL_86;
  }
  swift_bridgeObjectRelease();
  uint64_t v90 = v124;
  unint64_t v89 = v125;
  outlined copy of Data._Representation(v124, v125);
  specialized static ResponseCache.sqlite_run(closure:)(v90, v89, (uint64_t *)&v132);
  outlined consume of Data._Representation(v90, v89);
  int v93 = sqlite3_bind_double((sqlite3_stmt *)v6, 5, a2);
  if (v93)
  {
    unsigned int v94 = v93;
    if (v93 == 100)
    {
      uint64_t v95 = 0;
      uint64_t v96 = 0;
      uint64_t v97 = 1;
    }
    else if (v93 == 101)
    {
      uint64_t v95 = 0;
      uint64_t v96 = 0;
      uint64_t v97 = 2;
    }
    else
    {
      uint64_t result = (uint64_t)sqlite3_errstr(v93);
      if (!result)
      {
LABEL_86:
        __break(1u);
        goto LABEL_87;
      }
      uint64_t v96 = String.init(cString:)();
      uint64_t v97 = v113;
      uint64_t v95 = v94;
    }
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    uint64_t v56 = (void *)swift_allocError();
    *Swift::Int v114 = v95;
    v114[1] = v96;
    v114[2] = v97;
    swift_willThrow();
    goto LABEL_28;
  }
LABEL_56:
  unsigned int v98 = sqlite3_step((sqlite3_stmt *)v6);
  uint64_t v99 = v98;
  switch(v98)
  {
    case 0u:
      uint64_t v115 = 0;
      uint64_t v116 = 0;
LABEL_82:
      lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
      uint64_t v56 = (void *)swift_allocError();
      *uint64_t v118 = v99;
      v118[1] = v115;
      v118[2] = v116;
      swift_willThrow();
      sqlite3_finalize(v132);
      goto LABEL_29;
    case 0x64u:
      uint64_t v99 = 0;
      uint64_t v115 = 0;
      uint64_t v116 = 1;
      goto LABEL_82;
    case 0x65u:
      LODWORD(v129) = sqlite3_changes(*(sqlite3 **)(v3 + 24));
      if (one-time initialization token for pommes == -1)
      {
LABEL_60:
        uint64_t v100 = type metadata accessor for Logger();
        __swift_project_value_buffer(v100, (uint64_t)static Logger.pommes);
        uint64_t v101 = Logger.logObject.getter();
        os_log_type_t v102 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v101, v102))
        {
          uint64_t v103 = (uint8_t *)swift_slowAlloc();
          uint64_t v104 = swift_slowAlloc();
          *(_DWORD *)uint64_t v103 = 136315138;
          uint64_t v131 = v104;
          if ((int)v129 <= 0) {
            uint64_t v105 = 0x657461647075;
          }
          else {
            uint64_t v105 = 0x65726F7473;
          }
          if ((int)v129 <= 0) {
            unint64_t v106 = 0xE600000000000000;
          }
          else {
            unint64_t v106 = 0xE500000000000000;
          }
          uint64_t v130 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v106, &v131);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C8F83000, v101, v102, "ResponseCache : %s cache entry complete", v103, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v104, -1, -1);
          MEMORY[0x1CB77E470](v103, -1, -1);
        }

        sqlite3_finalize(v132);
        uint64_t v107 = PommesResponse.requestId.getter();
        uint64_t v109 = v108;
        uint64_t v110 = (uint64_t)v123;
        PommesResponse.pommesCandidateId.getter();
        if ((int)v129 >= 1) {
          uint64_t v111 = 1;
        }
        else {
          uint64_t v111 = 2;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v120 + 168))(v107, v109, v110, v111);
        outlined consume of Data._Representation(v124, v125);

        swift_bridgeObjectRelease();
        outlined destroy of MediaUserStateCenter?(v110, &demangling cache variable for type metadata for PommesCandidateId?);
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        uint64_t v112 = (uint64_t)v121;
        (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v121, 0);
        uint64_t v81 = v112;
        goto LABEL_37;
      }
LABEL_84:
      swift_once();
      goto LABEL_60;
  }
  uint64_t result = (uint64_t)sqlite3_errstr(v98);
  if (result)
  {
    uint64_t v115 = String.init(cString:)();
    uint64_t v116 = v117;
    goto LABEL_82;
  }
LABEL_87:
  __break(1u);
  return result;
}

const char *ResponseCache.fetchResponse(with:domainWarmup:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v135 = a2;
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v136 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v136);
  uint64_t v140 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v133 = (uint64_t)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v127 - v9;
  uint64_t v11 = (void *)v3[2];
  uint64_t v137 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v12 = (uint64_t *)(a1 + *(int *)(v137 + 32));
  uint64_t v13 = v12[1];
  uint64_t v139 = (void *)*v12;
  uint64_t v141 = a1;
  PommesSearchRequest.pommesCandidateId.getter((uint64_t)v10);
  uint64_t v14 = type metadata accessor for PommesCandidateId();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
  uint64_t v17 = v15 + 56;
  v16(v10, 0, 1, v14);
  (*(void (**)(void *, uint64_t, char *))(*(void *)v11 + 128))(v139, v13, v10);
  uint64_t v18 = outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v19 = *(uint64_t (**)(uint64_t))(*v3 + 128);
  uint64_t v139 = v3;
  if ((v19(v18) & 1) == 0)
  {
    uint64_t v43 = (void *)*v12;
    uint64_t v44 = v12[1];
    PommesSearchRequest.pommesCandidateId.getter((uint64_t)v10);
    v16(v10, 0, 1, v14);
    (*(void (**)(void *, uint64_t, char *, uint64_t))(*(void *)v11 + 136))(v43, v44, v10, 1);
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for PommesCandidateId?);
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    swift_allocError();
    *sqlite3_int64 v45 = 0;
    v45[1] = 0;
    void v45[2] = 4;
    swift_willThrow();
    return (const char *)v11;
  }
  uint64_t v128 = v10;
  uint64_t v129 = v17;
  uint64_t v134 = v12;
  uint64_t v130 = (void (*)(uint64_t, void, uint64_t, uint64_t))v16;
  uint64_t v131 = v14;
  unint64_t v132 = v11;
  int v20 = v140;
  Date.init()();
  uint64_t v21 = (int *)v136;
  uint64_t v22 = &v20[*(int *)(v136 + 20)];
  *(void *)uint64_t v22 = "SiriInformationSearch/ResponseCache.swift";
  *((void *)v22 + 1) = 41;
  v22[16] = 2;
  *(void *)&v20[v21[6]] = 289;
  uint64_t v23 = &v20[v21[7]];
  *(void *)uint64_t v23 = "fetchResponse(with:domainWarmup:)";
  *((void *)v23 + 1) = 33;
  v23[16] = 2;
  uint64_t v24 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000013);
  uint64_t v25 = (uint64_t *)&v20[v21[8]];
  *uint64_t v25 = v24;
  v25[1] = v26;
  *(void *)&long long __dst = 0;
  *((void *)&__dst + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(61);
  v27._uint64_t countAndFlagsBits = 0x2A205443454C4553;
  v27._object = (void *)0xEF22204D4F524620;
  String.append(_:)(v27);
  v28._uint64_t countAndFlagsBits = 0x6361437972657571;
  v28._object = (void *)0xEA00000000006568;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = 0xA45524548572022;
  v29._object = (void *)0xE900000000000022;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = 0x636E617265747475;
  v30._object = (void *)0xED00006873614865;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = 0x4E41203F203D2022;
  v31._object = (void *)0xEB00000000220A44;
  String.append(_:)(v31);
  v32._object = (void *)0xE900000000000065;
  v32._uint64_t countAndFlagsBits = 0x636E617265747475;
  String.append(_:)(v32);
  v33._uint64_t countAndFlagsBits = 0x4E41203F203D2022;
  v33._object = (void *)0xEB00000000220A44;
  String.append(_:)(v33);
  v34._object = (void *)0xEA00000000006E6FLL;
  v34._uint64_t countAndFlagsBits = 0x6974617269707865;
  String.append(_:)(v34);
  v35._uint64_t countAndFlagsBits = 0x3B3F203D3E2022;
  v35._object = (void *)0xE700000000000000;
  String.append(_:)(v35);
  long long v36 = __dst;
  uint64_t v37 = *(void *)(v141 + *(int *)(v137 + 84) + 8);
  sqlite3_int64 v38 = String.hashValue.getter();
  if (AFSupportsMultiUser() && v37) {
    v38 ^= String.hashValue.getter();
  }
  uint64_t v142 = 0;
  uint64_t v39 = (uint64_t)v139;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v40 = v138;
  specialized static ResponseCache.sqlite_run(closure:)(v39, v36, *((uint64_t *)&v36 + 1), &v142);
  uint64_t v41 = v40;
  if (v40)
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    uint64_t v42 = v134;
LABEL_31:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v73 = type metadata accessor for Logger();
    __swift_project_value_buffer(v73, (uint64_t)static Logger.pommes);
    id v74 = v41;
    id v75 = v41;
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc();
      uint64_t v79 = swift_slowAlloc();
      uint64_t v142 = (sqlite3_stmt *)v41;
      *(void *)&long long __dst = v79;
      *(_DWORD *)uint64_t v78 = 136315138;
      id v80 = v41;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v81 = String.init<A>(describing:)();
      uint64_t v11 = v41;
      uint64_t v142 = (sqlite3_stmt *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, (uint64_t *)&__dst);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v76, v77, "ResponseCache : SELECT failed : %s", v78, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v79, -1, -1);
      MEMORY[0x1CB77E470](v78, -1, -1);

      uint64_t v84 = v131;
      uint64_t v83 = v132;
      unsigned int v85 = v130;
    }
    else
    {

      uint64_t v84 = v131;
      uint64_t v83 = v132;
      unsigned int v85 = v130;
      uint64_t v11 = v41;
    }
    uint64_t v86 = (uint64_t)v128;
    uint64_t v87 = *v42;
    uint64_t v88 = v42[1];
    PommesSearchRequest.pommesCandidateId.getter((uint64_t)v128);
    v85(v86, 0, 1, v84);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v83 + 136))(v87, v88, v86, 2);
    outlined destroy of MediaUserStateCenter?(v86, &demangling cache variable for type metadata for PommesCandidateId?);
    swift_willThrow();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v89 = (uint64_t)v140;
    (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v140, 0);
    outlined destroy of PerformanceUtil.Ticket(v89);
    return (const char *)v11;
  }
  uint64_t v138 = 0;
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v46 = type metadata accessor for Date();
  uint64_t v47 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v49 = (char *)&v127 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  double v51 = v50;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v46);
  id v52 = v142;
  uint64_t v53 = 1;
  int v54 = sqlite3_bind_int64(v142, 1, v38);
  uint64_t v55 = (uint64_t)v140;
  if (!v54)
  {
    if (one-time initialization token for sqliteTransient != -1) {
      swift_once();
    }
    uint64_t v60 = (void (__cdecl *)(void *))static ResponseCache.sqliteTransient;
    uint64_t v61 = String.utf8CString.getter();
    unsigned int v62 = sqlite3_bind_text(v52, 2, (const char *)(v61 + 32), -1, v60);
    swift_release();
    uint64_t v63 = v134;
    if (v62)
    {
      if (v62 != 100)
      {
        if (v62 == 101)
        {
LABEL_17:
          uint64_t v64 = 0;
          uint64_t v65 = 0;
          uint64_t v66 = 2;
LABEL_30:
          lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
          uint64_t v41 = (void *)swift_allocError();
          void *v72 = v64;
          v72[1] = v65;
          void v72[2] = v66;
          swift_willThrow();
          sqlite3_finalize(v142);
          uint64_t v42 = v63;
          goto LABEL_31;
        }
        uint64_t result = sqlite3_errstr(v62);
        if (!result) {
          goto LABEL_75;
        }
LABEL_29:
        uint64_t v65 = String.init(cString:)();
        uint64_t v66 = v71;
        uint64_t v64 = v62;
        goto LABEL_30;
      }
      goto LABEL_27;
    }
    int v70 = sqlite3_bind_double(v52, 3, v51);
    if (v70)
    {
      unsigned int v62 = v70;
      if (v70 != 100)
      {
        if (v70 == 101) {
          goto LABEL_17;
        }
        if (sqlite3_errstr(v70)) {
          goto LABEL_29;
        }
        __break(1u);
      }
LABEL_27:
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      uint64_t v66 = 1;
      goto LABEL_30;
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v90 = type metadata accessor for Logger();
    uint64_t v91 = __swift_project_value_buffer(v90, (uint64_t)static Logger.pommes);
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.debug.getter();
    BOOL v94 = os_log_type_enabled(v92, v93);
    uint64_t v137 = v91;
    if (v94)
    {
      uint64_t v95 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v95 = 134217984;
      *(double *)&long long __dst = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v92, v93, "ResponseCache : Fetching cached responses with expiration threshold %f", v95, 0xCu);
      MEMORY[0x1CB77E470](v95, -1, -1);
    }

    uint64_t v96 = v142;
    if (sqlite3_step(v142) != 100)
    {
      uint64_t v11 = 0;
      uint64_t v97 = 0;
      uint64_t v139 = 0;
LABEL_68:
      sqlite3_finalize(v96);
      uint64_t v123 = v133;
      uint64_t v124 = *v134;
      uint64_t v125 = v134[1];
      PommesSearchRequest.pommesCandidateId.getter(v133);
      v130(v123, 0, 1, v131);
      if (v11) {
        uint64_t v126 = 1;
      }
      else {
        uint64_t v126 = 3;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v132 + 144))(v124, v125, v123, v126, v97, v139);
      swift_bridgeObjectRelease();
      outlined destroy of MediaUserStateCenter?(v123, &demangling cache variable for type metadata for PommesCandidateId?);
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v55, 0);
      outlined destroy of PerformanceUtil.Ticket(v55);
      return (const char *)v11;
    }
    uint64_t v11 = 0;
    uint64_t v97 = 0;
    uint64_t v139 = 0;
    *((void *)&v98 + 1) = 0x7FFFFFFFLL;
    long long v127 = xmmword_1C9198FA0;
    *(void *)&long long v98 = 136315138;
    long long v136 = v98;
    uint64_t v128 = (char *)(MEMORY[0x1E4FBC840] + 8);
    while (1)
    {
      uint64_t v99 = sqlite3_column_blob(v96, 3);
      if (!v99) {
        break;
      }
      uint64_t v100 = v99;
      int v101 = sqlite3_column_bytes(v96, 3);
      if (v101 >= 1)
      {
        unsigned int v102 = v101;
        if (sqlite3_column_text(v96, 2))
        {
          uint64_t v103 = String.init(cString:)();
          unint64_t v105 = v104;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRelease();
          unint64_t v106 = Logger.logObject.getter();
          os_log_type_t v107 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v106, v107))
          {
            uint64_t v108 = swift_slowAlloc();
            uint64_t v139 = v100;
            uint64_t v109 = v108;
            uint64_t v110 = swift_slowAlloc();
            *(void *)&long long __dst = v110;
            *(_DWORD *)uint64_t v109 = v136;
            swift_bridgeObjectRetain();
            *(void *)(v109 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v105, (uint64_t *)&__dst);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C8F83000, v106, v107, "ResponseCache : warmup domain %s", (uint8_t *)v109, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1CB77E470](v110, -1, -1);
            uint64_t v111 = v109;
            uint64_t v100 = v139;
            MEMORY[0x1CB77E470](v111, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v135 + 184))(v141, v103, v105);
          swift_bridgeObjectRelease();
          uint64_t v139 = (void *)v105;
        }
        else
        {
          uint64_t v103 = v97;
        }
        if (v102 <= 0xE)
        {
          uint64_t v97 = v103;
          *(void *)((char *)&__dst + 6) = 0;
          *(void *)&long long __dst = 0;
          BYTE14(__dst) = v102;
          memcpy(&__dst, v100, v102);
          unint64_t v119 = __dst;
          unint64_t v120 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          uint64_t v97 = v103;
          if (v102 >= 0x7FFFFFFF)
          {
            uint64_t v121 = __DataStorage.init(bytes:length:)();
            type metadata accessor for Data.RangeReference();
            unint64_t v119 = swift_allocObject();
            *(_OWORD *)(v119 + 16) = v127;
            unint64_t v120 = v121 | 0x8000000000000000;
          }
          else
          {
            unint64_t v119 = (unint64_t)v102 << 32;
            unint64_t v120 = __DataStorage.init(bytes:length:)() | 0x4000000000000000;
          }
        }
        uint64_t v122 = specialized ResponseCache.hydratePommesResponse(response:pommesSearchRequest:componentsWarmedUp:)(v119, v120);

        outlined consume of Data._Representation(v119, v120);
        swift_bridgeObjectRelease();
        uint64_t v96 = v142;
        uint64_t v11 = (void *)v122;
        goto LABEL_48;
      }
      uint64_t v112 = Logger.logObject.getter();
      os_log_type_t v118 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v112, v118))
      {
        Swift::Int v114 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::Int v114 = 0;
        uint64_t v115 = v112;
        os_log_type_t v116 = v118;
        uint64_t v117 = "ResponseCache : Cached POMMES response 0 bytes";
LABEL_46:
        _os_log_impl(&dword_1C8F83000, v115, v116, v117, v114, 2u);
        MEMORY[0x1CB77E470](v114, -1, -1);
      }
LABEL_47:

LABEL_48:
      if (sqlite3_step(v96) != 100) {
        goto LABEL_68;
      }
    }
    uint64_t v112 = Logger.logObject.getter();
    os_log_type_t v113 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v112, v113)) {
      goto LABEL_47;
    }
    Swift::Int v114 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::Int v114 = 0;
    uint64_t v115 = v112;
    os_log_type_t v116 = v113;
    uint64_t v117 = "ResponseCache : Cached POMMES response is nil";
    goto LABEL_46;
  }
  unsigned int v56 = v54;
  if (v54 == 100)
  {
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v57 = v134;
    goto LABEL_21;
  }
  uint64_t v57 = v134;
  if (v54 == 101)
  {
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v53 = 2;
LABEL_21:
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    uint64_t v41 = (void *)swift_allocError();
    *uint64_t v69 = v58;
    v69[1] = v59;
    v69[2] = v53;
    swift_willThrow();
    sqlite3_finalize(v142);
    uint64_t v42 = v57;
    goto LABEL_31;
  }
  uint64_t result = sqlite3_errstr(v54);
  if (result)
  {
    uint64_t v59 = String.init(cString:)();
    uint64_t v53 = v68;
    uint64_t v58 = v56;
    goto LABEL_21;
  }
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

uint64_t ResponseCache.delete(path:requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v64[1] = *(sqlite3 **)MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(v5 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 176))(a2, a3, a4, a5);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v14 = URL.path.getter();
  uint64_t v16 = v15;
  uint64_t v17 = v10;
  uint64_t v18 = v14;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v17);
  uint64_t v19 = v16;
  uint64_t v20 = String.utf8CString.getter();
  int v21 = access((const char *)(v20 + 32), 0);
  swift_release();
  if (!v21)
  {
    uint64_t v28 = v61;
    uint64_t v60 = a2;
    uint64_t v29 = a3;
    v64[0] = 0;
    swift_bridgeObjectRetain();
    Swift::String v30 = v62;
    specialized static ResponseCache.sqlite_run(closure:)(v18, v16, v64);
    uint64_t v31 = v18;
    uint64_t v23 = v30;
    if (v30)
    {
      swift_bridgeObjectRelease_n();
LABEL_17:
      uint64_t v25 = a4;
      uint64_t v26 = v29;
      uint64_t v27 = v60;
      uint64_t v22 = v9;
      goto LABEL_18;
    }
    unsigned int v62 = (void *)v31;
    swift_bridgeObjectRelease();
    ppStmt[0] = 0;
    ppStmt[1] = (sqlite3_stmt *)0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    ppStmt[0] = 0;
    int v32 = sqlite3_prepare_v2(v64[0], "SELECT COUNT(*) FROM \"queryCache\"", -1, ppStmt, 0);
    if (v32)
    {
      LODWORD(v33) = v32;
      if (v32 == 100)
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 1;
        goto LABEL_16;
      }
      if (v32 == 101)
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 2;
LABEL_16:
        lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
        uint64_t v23 = (void *)swift_allocError();
        *uint64_t v40 = v33;
        v40[1] = v34;
        v40[2] = v35;
        swift_willThrow();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      if (sqlite3_errstr(v32))
      {
        uint64_t v34 = String.init(cString:)();
        uint64_t v35 = v39;
        uint64_t v33 = v33;
        goto LABEL_16;
      }
      __break(1u);
    }
    else
    {
      long long v36 = ppStmt[0];
      if (sqlite3_step(ppStmt[0]) == 100)
      {
        uint64_t v37 = v28;
        do
          uint64_t v38 = sqlite3_column_int(v36, 0);
        while (sqlite3_step(v36) == 100);
      }
      else
      {
        uint64_t v38 = 0;
        uint64_t v37 = v28;
      }
      uint64_t v52 = sqlite3_finalize(v36);
      (*(void (**)(uint64_t))(*(void *)v37 + 144))(v52);
      id v53 = objc_msgSend(self, sel_defaultManager);
      int v54 = (void *)MEMORY[0x1CB77CA90](v62, v19);
      swift_bridgeObjectRelease();
      ppStmt[0] = 0;
      unsigned __int8 v55 = objc_msgSend(v53, sel_removeItemAtPath_error_, v54, ppStmt);

      if ((v55 & 1) == 0)
      {
        uint64_t v58 = ppStmt[0];
        uint64_t v23 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        goto LABEL_17;
      }
      if ((v38 & 0x80000000) == 0)
      {
        unsigned int v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 192);
        uint64_t v57 = ppStmt[0];
        return v56(v60, v29, a4, v38);
      }
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 184))(a2, a3, a4, 1);
  lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
  uint64_t v23 = (void *)swift_allocError();
  *uint64_t v24 = 0;
  v24[1] = 0;
  v24[2] = 5;
  swift_willThrow();
  uint64_t v25 = a4;
  uint64_t v26 = a3;
  uint64_t v27 = a2;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v22 + 184))(v27, v26, v25, 2);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static Logger.pommes);
  id v42 = v23;
  id v43 = v23;
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = (sqlite3_stmt *)swift_slowAlloc();
    ppStmt[0] = v47;
    *(_DWORD *)uint64_t v46 = 136315138;
    v64[0] = (sqlite3 *)v23;
    id v48 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v49 = String.init<A>(describing:)();
    v64[0] = (sqlite3 *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, (uint64_t *)ppStmt);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C8F83000, v44, v45, "ResponseCache : purge failed : %s", v46, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v47, -1, -1);
    MEMORY[0x1CB77E470](v46, -1, -1);
  }
  else
  {
  }
  return swift_willThrow();
}

uint64_t ResponseCache.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v7 = v6;
  uint64_t v8 = v5;
  v64[2] = *(sqlite3_stmt **)MEMORY[0x1E4F143B8];
  uint64_t v14 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v8 + 16);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 176))(a1, a2, a3, a4);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v8 + 128))(v18) & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 184))(a1, a2, a3, 1);
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    swift_allocError();
    *uint64_t v25 = 0;
    v25[1] = 0;
    v25[2] = 4;
    swift_willThrow();
    return v8;
  }
  uint64_t v62 = a1;
  Date.init()();
  uint64_t v19 = &v16[v14[5]];
  *(void *)uint64_t v19 = "SiriInformationSearch/ResponseCache.swift";
  *((void *)v19 + 1) = 41;
  v19[16] = 2;
  *(void *)&v16[v14[6]] = 415;
  uint64_t v20 = &v16[v14[7]];
  *(void *)uint64_t v20 = "purge(expirationThreshold:requestId:pommesCandidateId:reason:)";
  *((void *)v20 + 1) = 62;
  v20[16] = 2;
  uint64_t v21 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001ALL);
  uint64_t v22 = (uint64_t *)&v16[v14[8]];
  *uint64_t v22 = v21;
  v22[1] = v23;
  v64[0] = 0;
  v64[1] = (sqlite3_stmt *)0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v64[0] = 0;
  uint64_t v24 = swift_retain();
  specialized static ResponseCache.sqlite_run(closure:)(v24, 0xD000000000000030, 0x80000001C91A0F00, v64);
  if (v6)
  {
    swift_release();
LABEL_23:
    uint64_t v34 = v62;
    goto LABEL_24;
  }
  uint64_t v61 = a2;
  swift_release();
  uint64_t v26 = v64[0];
  uint64_t v27 = 1;
  int v28 = sqlite3_bind_double(v64[0], 1, a5);
  if (v28)
  {
    unsigned int v29 = v28;
    if (v28 == 100)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      goto LABEL_22;
    }
    if (v28 == 101)
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v27 = 2;
LABEL_22:
      lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
      uint64_t v7 = (void *)swift_allocError();
      *uint64_t v40 = v30;
      v40[1] = v31;
      v40[2] = v27;
      swift_willThrow();
      sqlite3_finalize(v64[0]);
      a2 = v61;
      goto LABEL_23;
    }
    if (sqlite3_errstr(v28))
    {
      uint64_t v31 = String.init(cString:)();
      uint64_t v27 = v39;
      uint64_t v30 = v29;
      goto LABEL_22;
    }
    __break(1u);
    goto LABEL_40;
  }
  unsigned int v32 = sqlite3_step(v26);
  uint64_t v33 = v32;
  uint64_t v34 = v62;
  if (!v32)
  {
    uint64_t v56 = 0;
    uint64_t v8 = 0;
    goto LABEL_36;
  }
  if (v32 == 100)
  {
    uint64_t v33 = 0;
    uint64_t v56 = 0;
    uint64_t v8 = 1;
    goto LABEL_36;
  }
  if (v32 != 101)
  {
    if (!sqlite3_errstr(v32))
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v56 = String.init(cString:)();
    uint64_t v8 = v57;
LABEL_36:
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    uint64_t v7 = (void *)swift_allocError();
    *uint64_t v58 = v33;
    v58[1] = v56;
    _OWORD v58[2] = v8;
    swift_willThrow();
    sqlite3_finalize(v64[0]);
    a2 = v61;
LABEL_24:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.pommes);
    id v42 = v7;
    id v43 = v7;
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc();
      uint64_t v60 = v16;
      uint64_t v47 = (uint8_t *)v46;
      id v48 = (sqlite3_stmt *)swift_slowAlloc();
      uint64_t v61 = a2;
      uint64_t v49 = v48;
      uint64_t v63 = (uint64_t)v7;
      v64[0] = v48;
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v8 = (uint64_t)(v47 + 12);
      uint64_t v59 = a3;
      id v50 = v7;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v51 = String.init<A>(describing:)();
      uint64_t v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, (uint64_t *)v64);
      a3 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v34 = v62;
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v44, v45, "ResponseCache : DELETE FROM failed : %s", v47, 0xCu);
      swift_arrayDestroy();
      id v53 = v49;
      a2 = v61;
      MEMORY[0x1CB77E470](v53, -1, -1);
      int v54 = v47;
      uint64_t v16 = v60;
      MEMORY[0x1CB77E470](v54, -1, -1);
    }
    else
    {
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 184))(v34, a2, a3, 2);
    swift_willThrow();
    if (one-time initialization token for shared == -1) {
      goto LABEL_30;
    }
LABEL_37:
    swift_once();
LABEL_30:
    (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v16, 0);
    outlined destroy of PerformanceUtil.Ticket((uint64_t)v16);
    return v8;
  }
  uint64_t v8 = sqlite3_changes(*(sqlite3 **)(v8 + 24));
  sqlite3_finalize(v26);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.pommes);
  long long v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 67109120;
    uint64_t v34 = v62;
    LODWORD(v64[0]) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v36, v37, "ResponseCache : Successfully purged %d expired entries", v38, 8u);
    MEMORY[0x1CB77E470](v38, -1, -1);
  }

  if ((v8 & 0x80000000) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 192))(v34, v61, a3, v8);
    if (one-time initialization token for shared == -1) {
      goto LABEL_30;
    }
    goto LABEL_37;
  }
LABEL_41:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ResponseCache.purge(response:reason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v68[2] = *(sqlite3_stmt **)MEMORY[0x1E4F143B8];
  uint64_t v5 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = PommesResponse.requestId.getter();
  uint64_t v66 = v11;
  uint64_t v64 = v10;
  PommesResponse.pommesCandidateId.getter();
  PommesResponse.searchRequestUtterance.getter();
  PommesResponse.sharedUserId.getter();
  uint64_t v13 = v12;
  uint64_t v14 = String.hashValue.getter();
  if (AFSupportsMultiUser())
  {
    if (v13)
    {
      uint64_t v15 = String.hashValue.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sqlite3_int64 v61 = v15 ^ v14;
      goto LABEL_7;
    }
    sqlite3_int64 v61 = v14;
  }
  else
  {
    sqlite3_int64 v61 = v14;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v16 = *(void *)(v3 + 16);
  uint64_t v17 = v65;
  uint64_t v18 = v66;
  uint64_t v19 = (uint64_t)v64;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v16 + 176))(v65, v66, v64, a2);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v3 + 128))(v20) & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 184))(v17, v18, v19, 1);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    swift_allocError();
    void *v30 = 0;
    v30[1] = 0;
    v30[2] = 4;
    swift_willThrow();
LABEL_39:
    outlined destroy of MediaUserStateCenter?(v19, &demangling cache variable for type metadata for PommesCandidateId?);
    return v3;
  }
  Date.init()();
  uint64_t v21 = &v7[v5[5]];
  *(void *)uint64_t v21 = "SiriInformationSearch/ResponseCache.swift";
  *((void *)v21 + 1) = 41;
  v21[16] = 2;
  *(void *)&v7[v5[6]] = 461;
  uint64_t v22 = &v7[v5[7]];
  *(void *)uint64_t v22 = "purge(response:reason:)";
  *((void *)v22 + 1) = 23;
  v22[16] = 2;
  uint64_t v23 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001FLL);
  uint64_t v24 = v5[8];
  uint64_t v62 = v7;
  uint64_t v25 = (uint64_t *)&v7[v24];
  *uint64_t v25 = v23;
  v25[1] = v26;
  v68[0] = 0;
  v68[1] = (sqlite3_stmt *)0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v68[0] = 0;
  uint64_t v27 = swift_retain();
  int v28 = v63;
  specialized static ResponseCache.sqlite_run(closure:)(v27, 0xD000000000000033, 0x80000001C91A0F60, v68);
  unsigned int v29 = v28;
  if (v28)
  {
    swift_release();
LABEL_30:
    uint64_t v39 = (uint64_t)v62;
LABEL_31:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
    id v48 = v29;
    id v49 = v29;
    id v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v3 = swift_slowAlloc();
      v68[0] = (sqlite3_stmt *)v3;
      *(_DWORD *)uint64_t v52 = 136315394;
      uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x65736E6F70736572, 0xE800000000000000, (uint64_t *)v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v52 + 12) = 2080;
      uint64_t v67 = (uint64_t)v29;
      id v53 = v29;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v54 = String.init<A>(describing:)();
      uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v39 = (uint64_t)v62;
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v50, v51, "ResponseCache : DELETE FROM WHERE %s failed : %s", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v3, -1, -1);
      MEMORY[0x1CB77E470](v52, -1, -1);
    }
    else
    {
    }
    uint64_t v19 = (uint64_t)v64;
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v16 + 184))(v65, v66, v64, 2);
    swift_bridgeObjectRelease();
    swift_willThrow();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v39, 0);
    outlined destroy of PerformanceUtil.Ticket(v39);
    goto LABEL_39;
  }
  swift_release();
  uint64_t v31 = v68[0];
  uint64_t v32 = 1;
  int v33 = sqlite3_bind_int64(v68[0], 1, v61);
  if (v33)
  {
    unsigned int v34 = v33;
    if (v33 == 100)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      goto LABEL_29;
    }
    if (v33 == 101)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v32 = 2;
LABEL_29:
      lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
      unsigned int v29 = (void *)swift_allocError();
      *uint64_t v46 = v35;
      v46[1] = v36;
      v46[2] = v32;
      swift_willThrow();
      sqlite3_finalize(v68[0]);
      goto LABEL_30;
    }
    if (sqlite3_errstr(v33))
    {
      uint64_t v36 = String.init(cString:)();
      uint64_t v32 = v45;
      uint64_t v35 = v34;
      goto LABEL_29;
    }
    __break(1u);
    goto LABEL_47;
  }
  unsigned int v37 = sqlite3_step(v31);
  uint64_t v38 = v37;
  uint64_t v39 = (uint64_t)v62;
  if (!v37)
  {
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    goto LABEL_45;
  }
  if (v37 == 100)
  {
    uint64_t v38 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 1;
    goto LABEL_45;
  }
  if (v37 != 101)
  {
    if (!sqlite3_errstr(v37))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    uint64_t v57 = String.init(cString:)();
    uint64_t v58 = v59;
LABEL_45:
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    unsigned int v29 = (void *)swift_allocError();
    *uint64_t v60 = v38;
    v60[1] = v57;
    v60[2] = v58;
    swift_willThrow();
    sqlite3_finalize(v68[0]);
    goto LABEL_31;
  }
  uint64_t v3 = sqlite3_changes(*(sqlite3 **)(v3 + 24));
  sqlite3_finalize(v31);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    id v43 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v43 = 67109120;
    uint64_t v39 = (uint64_t)v62;
    LODWORD(v68[0]) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v41, v42, "ResponseCache : Successfully purged response with %d entries deleted", v43, 8u);
    MEMORY[0x1CB77E470](v43, -1, -1);
  }

  uint64_t v44 = (uint64_t)v64;
  if ((v3 & 0x80000000) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v16 + 192))(v65, v66, v64, v3);
    swift_bridgeObjectRelease();
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v39, 0);
    outlined destroy of PerformanceUtil.Ticket(v39);
    outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for PommesCandidateId?);
    return v3;
  }
LABEL_48:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)(uint64_t a1)
{
  uint64_t v13 = (NSURL *)*MEMORY[0x1E4F143B8];
  URL._bridgeToObjectiveC()(v13);
  uint64_t v3 = v2;
  id v12 = 0;
  id v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v2, &v12);

  id v5 = v12;
  if (v4)
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    id v8 = v5;
    v7(a1, v6);
  }
  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

uint64_t closure #1 in ResponseCache.markPurgeable(_:)(void *a1, int a2, uint64_t a3, void *a4)
{
  uint64_t result = ffsctl(a2, 0xC0084A44uLL, a1, 0);
  if (result)
  {
    int v7 = result;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C91947A0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v12;
    uint64_t v13 = type metadata accessor for URL();
    *(void *)(inited + 72) = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(boxed_opaque_existential_1, a3, v13);
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    id v15 = objc_allocWithZone(MEMORY[0x1E4F28C50]);
    uint64_t v16 = (void *)MEMORY[0x1CB77CA90](v8, v10);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v18 = objc_msgSend(v15, sel_initWithDomain_code_userInfo_, v16, v7, isa);

    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v20, v21, "ResponseCache : Unable to mark cache as purgeable error=%d", v22, 8u);
      MEMORY[0x1CB77E470](v22, -1, -1);
    }

    uint64_t result = swift_willThrow();
    *a4 = v18;
  }
  return result;
}

const char *ResponseCache.createTables()()
{
  uint64_t v1 = v0;
  pStmt[2] = *(sqlite3_stmt **)MEMORY[0x1E4F143B8];
  pStmt[1] = (sqlite3_stmt *)0xE000000000000000;
  _StringGuts.grow(_:)(159);
  v2._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v2._object = (void *)0x80000001C91A1000;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = 0x6361437972657571;
  v3._object = (void *)0xEA00000000006568;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = 0x220A282022;
  v4._object = (void *)0xE500000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = 0x636E617265747475;
  v5._object = (void *)0xED00006873614865;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = 0xD000000000000021;
  v6._object = (void *)0x80000001C91A1020;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0x636E617265747475;
  v7._object = (void *)0xE900000000000065;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  v8._object = (void *)0x80000001C91A1050;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 0x6E69616D6F64;
  v9._object = (void *)0xE600000000000000;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0xD000000000000015;
  v10._object = (void *)0x80000001C91A1050;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = 0x65736E6F70736572;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = 0xD000000000000012;
  v12._object = (void *)0x80000001C91A1070;
  String.append(_:)(v12);
  v13._object = (void *)0xEA00000000006E6FLL;
  v13._uint64_t countAndFlagsBits = 0x6974617269707865;
  String.append(_:)(v13);
  v14._object = (void *)0x80000001C91A1090;
  v14._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v14);
  pStmt[0] = 0;
  uint64_t v15 = swift_retain();
  specialized static ResponseCache.sqlite_run(closure:)(v15, 0, 0xE000000000000000, pStmt);
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_16:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
    id v30 = v1;
    id v31 = v1;
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      unsigned int v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v39 = v35;
      *(_DWORD *)unsigned int v34 = 136315138;
      id v36 = v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v37 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v32, v33, "ResponseCache : CREATE TABLE failed : %s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v35, -1, -1);
      MEMORY[0x1CB77E470](v34, -1, -1);
    }
    else
    {
    }
    return (const char *)swift_willThrow();
  }
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v16 = pStmt[0];
  unsigned int v17 = sqlite3_step(pStmt[0]);
  uint64_t v18 = v17;
  if (!v17)
  {
    uint64_t v25 = v17;
    uint64_t v26 = v17;
LABEL_15:
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    uint64_t v1 = (void *)swift_allocError();
    void *v28 = v18;
    v28[1] = v25;
    v28[2] = v26;
    swift_willThrow();
    sqlite3_finalize(pStmt[0]);
    goto LABEL_16;
  }
  if (v17 == 100)
  {
    uint64_t v18 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 1;
    goto LABEL_15;
  }
  if (v17 != 101)
  {
    uint64_t result = sqlite3_errstr(v17);
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v25 = String.init(cString:)();
    uint64_t v26 = v27;
    goto LABEL_15;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v39 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6361437972657571, 0xEA00000000006568, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v20, v21, "ResponseCache : Table created : \"%s\"", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v23, -1, -1);
    MEMORY[0x1CB77E470](v22, -1, -1);
  }

  return (const char *)sqlite3_finalize(v16);
}

void specialized ResponseCache.markPurgeable(_:)(uint64_t a1)
{
  v40[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2);
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  Swift::String v6 = (char *)&v32 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  MEMORY[0x1F4188790](v7 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v37((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), 1, v2) == 1)
  {
    uint64_t v36 = v3;
    outlined destroy of MediaUserStateCenter?((uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v10);
    unint64_t v11 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
    outlined init with copy of URL?(a1, (uint64_t)&v32 - v11);
    Swift::String v12 = Logger.logObject.getter();
    int v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, (os_log_type_t)v13))
    {
      int v34 = v13;
      uint64_t v35 = &v32;
      Swift::String v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v32 = (uint64_t)&v32;
      uint64_t v33 = v15;
      v40[0] = v15;
      *(_DWORD *)Swift::String v14 = 136315138;
      MEMORY[0x1F4188790](v15);
      outlined init with copy of URL?((uint64_t)&v32 - v11, (uint64_t)&v32 - v11);
      if (v37((char *)&v32 - v11, 1, v2) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)&v32 - v11, &demangling cache variable for type metadata for URL?);
        unint64_t v16 = 0xE600000000000000;
        uint64_t v17 = 0x3E656E6F6E3CLL;
      }
      else
      {
        uint64_t v17 = URL.path.getter();
        unint64_t v16 = v23;
        (*(void (**)(char *, uint64_t))(v36 + 8))((char *)&v32 - v11, v2);
      }
      id v39 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of MediaUserStateCenter?((uint64_t)&v32 - v11, &demangling cache variable for type metadata for URL?);
      _os_log_impl(&dword_1C8F83000, v12, (os_log_type_t)v34, "ResponseCache : Unable to mark %s purgeable because no file path exists", v14, 0xCu);
      uint64_t v24 = v33;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v24, -1, -1);
      MEMORY[0x1CB77E470](v14, -1, -1);
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)&v32 - v11, &demangling cache variable for type metadata for URL?);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))((char *)&v32 - v5, (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
    unint64_t v18 = type metadata accessor for NSFileHandle();
    MEMORY[0x1F4188790](v18);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)&v32 - v5, (char *)&v32 - v5, v2);
    uint64_t v19 = v38;
    id v20 = @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)((uint64_t)&v32 - v5);
    if (v19)
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))((char *)&v32 - v5, v2);
    }
    else
    {
      os_log_type_t v21 = v20;
      int v22 = objc_msgSend(v20, sel_fileDescriptor);
      v40[0] = 65541;
      closure #1 in ResponseCache.markPurgeable(_:)(v40, v22, (uint64_t)&v32 - v5, &v39);
      id v39 = 0;
      if (objc_msgSend(v21, sel_closeAndReturnError_, &v39))
      {
        uint64_t v25 = one-time initialization token for pommes;
        id v26 = v39;
        if (v25 != -1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
        int v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v28, v29))
        {
          id v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v30 = 0;
          _os_log_impl(&dword_1C8F83000, v28, v29, "ResponseCache : Database marked purgeable", v30, 2u);
          MEMORY[0x1CB77E470](v30, -1, -1);
        }
      }
      else
      {
        id v31 = v39;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError()
{
  unint64_t result = lazy protocol witness table cache variable for type ResponseCache.DBError and conformance ResponseCache.DBError;
  if (!lazy protocol witness table cache variable for type ResponseCache.DBError and conformance ResponseCache.DBError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResponseCache.DBError and conformance ResponseCache.DBError);
  }
  return result;
}

uint64_t specialized static ResponseCache.sqlite_run(closure:)(uint64_t a1, uint64_t a2, sqlite3 **a3, int a4)
{
  uint64_t v6 = String.utf8CString.getter();
  LODWORD(v7) = sqlite3_open_v2((const char *)(v6 + 32), a3, a4, 0);
  uint64_t result = swift_release();
  switch(v7)
  {
    case 0x65:
      uint64_t v7 = 0;
      uint64_t v9 = 0;
      uint64_t v11 = 2;
      break;
    case 0x64:
      uint64_t v7 = 0;
      uint64_t v9 = 0;
      uint64_t v11 = 1;
      break;
    case 0:
      return result;
    default:
      uint64_t result = (uint64_t)sqlite3_errstr(v7);
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v9 = String.init(cString:)();
      uint64_t v11 = v10;
      uint64_t v7 = v7;
      break;
  }
  lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
  swift_allocError();
  *Swift::String v12 = v7;
  v12[1] = v9;
  _OWORD v12[2] = v11;
  return swift_willThrow();
}

id specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)()
{
  v6[1] = *(id *)MEMORY[0x1E4F143B8];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  id v2 = objc_msgSend(v0, sel_initForReadingFromData_error_, isa, v6);

  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t specialized ResponseCache.hydratePommesResponse(response:pommesSearchRequest:componentsWarmedUp:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_allocWithZone(MEMORY[0x1E4F28DB8]);
  outlined copy of Data._Representation(a1, a2);
  id v8 = specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)();
  outlined consume of Data._Representation(a1, a2);
  if (!v8)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      Swift::String v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v12 = 0;
      _os_log_impl(&dword_1C8F83000, v10, v11, "ResponseCache : Failed to hydrate POMMES response : nil unarchiver", v12, 2u);
      MEMORY[0x1CB77E470](v12, -1, -1);
    }
    goto LABEL_6;
  }
  type metadata accessor for PommesResponse();
  type metadata accessor for PommesSearchRequest(0);
  swift_bridgeObjectRetain();
  uint64_t v10 = v8;
  PommesSearchRequest.pommesCandidateId.getter((uint64_t)v6);
  uint64_t v15 = type metadata accessor for PommesCandidateId();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v6, 0, 1, v15);
  swift_bridgeObjectRetain();
  uint64_t v16 = PommesResponse.__allocating_init(cachingCoder:requestId:pommesCandidateId:componentsWarmedUp:)();
  if (!v16)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
    int v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1C8F83000, v22, v23, "ResponseCache : Failed to instantiate PommesResponse from cachingCoder", v24, 2u);
      MEMORY[0x1CB77E470](v24, -1, -1);

      return 0;
    }

LABEL_6:
    return 0;
  }
  uint64_t v13 = v16;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    id v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v20 = 0;
    _os_log_impl(&dword_1C8F83000, v18, v19, "ResponseCache : Successfully hydrated response", v20, 2u);
    MEMORY[0x1CB77E470](v20, -1, -1);
  }
  else
  {
  }
  return v13;
}

uint64_t specialized closure #5 in ResponseCache.store(response:expiration:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _OWORD v26[2] = *MEMORY[0x1E4F143B8];
  id v3 = (sqlite3_stmt *)a3;
  uint64_t v5 = a1;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_39:
        swift_once();
LABEL_30:
        id v7 = (void (__cdecl *)(void *))static ResponseCache.sqliteTransient;
        id v8 = (sqlite3_stmt *)v5;
        int v9 = 0;
        return sqlite3_bind_blob(v8, 4, v26, v9, v7);
      }
      outlined copy of Data._Representation(a1, a2);
      os_log_type_t v11 = (char *)__DataStorage._bytes.getter();
      if (v11)
      {
        uint64_t v12 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v5, v12))
        {
          __break(1u);
          goto LABEL_45;
        }
        v11 += (int)v5 - v12;
      }
      uint64_t v13 = __DataStorage._length.getter();
      if (v13 >= v10) {
        uint64_t v6 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v6 = v13;
      }
      if (v11)
      {
        if (v6 >= (uint64_t)0xFFFFFFFF80000000)
        {
          if (v6 > 0x7FFFFFFF)
          {
            __break(1u);
LABEL_15:
            uint64_t v14 = *(void *)(v5 + 16);
            uint64_t v15 = *(void *)(v5 + 24);
            swift_retain();
            swift_retain();
            uint64_t v16 = (char *)__DataStorage._bytes.getter();
            if (!v16)
            {
LABEL_18:
              BOOL v18 = __OFSUB__(v15, v14);
              uint64_t v19 = v15 - v14;
              if (v18)
              {
                __break(1u);
              }
              else
              {
                uint64_t v20 = __DataStorage._length.getter();
                if (v20 >= v19) {
                  uint64_t v21 = v19;
                }
                else {
                  uint64_t v21 = v20;
                }
                if (v16) {
                  uint64_t v19 = v21;
                }
                else {
                  uint64_t v19 = 0;
                }
                if (v19 >= (uint64_t)0xFFFFFFFF80000000)
                {
                  if (v19 <= 0x7FFFFFFF)
                  {
                    id v3 = *(sqlite3_stmt **)v3;
                    if (one-time initialization token for sqliteTransient == -1)
                    {
LABEL_28:
                      uint64_t v22 = sqlite3_bind_blob(v3, 4, v16, v19, (void (__cdecl *)(void *))static ResponseCache.sqliteTransient);
                      swift_release();
                      swift_release();
                      return v22;
                    }
LABEL_43:
                    swift_once();
                    goto LABEL_28;
                  }
LABEL_42:
                  __break(1u);
                  goto LABEL_43;
                }
              }
              __break(1u);
              goto LABEL_42;
            }
            uint64_t v17 = __DataStorage._offset.getter();
            if (!__OFSUB__(v14, v17))
            {
              v16 += v14 - v17;
              goto LABEL_18;
            }
LABEL_45:
            __break(1u);
          }
          goto LABEL_33;
        }
        __break(1u);
LABEL_37:
        swift_once();
LABEL_3:
        id v7 = (void (__cdecl *)(void *))static ResponseCache.sqliteTransient;
        id v8 = (sqlite3_stmt *)v5;
        int v9 = v6;
        return sqlite3_bind_blob(v8, 4, v26, v9, v7);
      }
      LODWORD(v6) = 0;
LABEL_33:
      uint64_t v24 = *(sqlite3_stmt **)v3;
      if (one-time initialization token for sqliteTransient != -1) {
        swift_once();
      }
      uint64_t v25 = sqlite3_bind_blob(v24, 4, v11, v6, (void (__cdecl *)(void *))static ResponseCache.sqliteTransient);
      outlined consume of Data._Representation(v5, a2);
      return v25;
    case 2uLL:
      goto LABEL_15;
    case 3uLL:
      memset(v26, 0, 14);
      uint64_t v5 = *a3;
      if (one-time initialization token for sqliteTransient == -1) {
        goto LABEL_30;
      }
      goto LABEL_39;
    default:
      v26[0] = a1;
      LOWORD(v26[1]) = a2;
      BYTE2(v26[1]) = BYTE2(a2);
      BYTE3(v26[1]) = BYTE3(a2);
      BYTE4(v26[1]) = BYTE4(a2);
      BYTE5(v26[1]) = BYTE5(a2);
      uint64_t v5 = *a3;
      LODWORD(v6) = BYTE6(a2);
      if (one-time initialization token for sqliteTransient == -1) {
        goto LABEL_3;
      }
      goto LABEL_37;
  }
}

uint64_t specialized static ResponseCache.sqlite_run(closure:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t result = specialized closure #5 in ResponseCache.store(response:expiration:)(a1, a2, a3);
  if (result == 101)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v7 = 2;
  }
  else
  {
    LODWORD(v4) = result;
    if (result == 100)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v7 = 1;
    }
    else
    {
      if (!result) {
        return result;
      }
      uint64_t result = (uint64_t)sqlite3_errstr(result);
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v5 = String.init(cString:)();
      uint64_t v7 = v6;
      uint64_t v4 = v4;
    }
  }
  lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
  swift_allocError();
  void *v8 = v4;
  v8[1] = v5;
  _OWORD v8[2] = v7;
  return swift_willThrow();
}

uint64_t specialized static ResponseCache.sqlite_run(closure:)(uint64_t a1, uint64_t a2, sqlite3 **a3)
{
  uint64_t v4 = String.utf8CString.getter();
  LODWORD(v5) = sqlite3_open_v2((const char *)(v4 + 32), a3, 2, 0);
  uint64_t result = swift_release();
  switch(v5)
  {
    case 0x65:
      uint64_t v5 = 0;
      uint64_t v7 = 0;
      uint64_t v9 = 2;
      break;
    case 0x64:
      uint64_t v5 = 0;
      uint64_t v7 = 0;
      uint64_t v9 = 1;
      break;
    case 0:
      return result;
    default:
      uint64_t result = (uint64_t)sqlite3_errstr(v5);
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = String.init(cString:)();
      uint64_t v9 = v8;
      uint64_t v5 = v5;
      break;
  }
  lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
  swift_allocError();
  *uint64_t v10 = v5;
  v10[1] = v7;
  void v10[2] = v9;
  return swift_willThrow();
}

uint64_t specialized static ResponseCache.sqlite_run(closure:)(uint64_t a1, uint64_t a2, uint64_t a3, sqlite3_stmt **a4)
{
  uint64_t v5 = *(sqlite3 **)(a1 + 24);
  uint64_t v6 = String.utf8CString.getter();
  LODWORD(v7) = sqlite3_prepare_v2(v5, (const char *)(v6 + 32), -1, a4, 0);
  uint64_t result = swift_release();
  switch(v7)
  {
    case 0x65:
      uint64_t v7 = 0;
      uint64_t v9 = 0;
      uint64_t v11 = 2;
      break;
    case 0x64:
      uint64_t v7 = 0;
      uint64_t v9 = 0;
      uint64_t v11 = 1;
      break;
    case 0:
      return result;
    default:
      uint64_t result = (uint64_t)sqlite3_errstr(v7);
      if (!result)
      {
        __break(1u);
        return result;
      }
      uint64_t v9 = String.init(cString:)();
      uint64_t v11 = v10;
      uint64_t v7 = v7;
      break;
  }
  lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
  swift_allocError();
  *uint64_t v12 = v7;
  v12[1] = v9;
  _OWORD v12[2] = v11;
  return swift_willThrow();
}

uint64_t type metadata accessor for ResponseCache()
{
  return self;
}

uint64_t method lookup function for ResponseCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ResponseCache);
}

uint64_t dispatch thunk of ResponseCache.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ResponseCache.isOpen.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ResponseCache.open(directoryPath:flags:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of ResponseCache.close()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ResponseCache.store(response:expiration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))() & 1;
}

uint64_t dispatch thunk of ResponseCache.fetchResponse(with:domainWarmup:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ResponseCache.delete(path:requestId:pommesCandidateId:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of ResponseCache.purge(expirationThreshold:requestId:pommesCandidateId:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of ResponseCache.purge(response:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

unint64_t destroy for ResponseCache.DBError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 16);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ResponseCache.DBError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ResponseCache.DBError(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 2);
  if (*(void *)(a1 + 16) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ResponseCache.DBError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    return a1;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseCache.DBError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF9 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483642);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 5;
  if (v4 >= 7) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ResponseCache.DBError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 5;
    }
  }
  return result;
}

uint64_t getEnumTag for ResponseCache.DBError(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for ResponseCache.DBError(void *result, int a2)
{
  if (a2 < 0)
  {
    result[1] = 0;
    result[2] = 0;
    *unint64_t result = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result[2] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ResponseCache.DBError()
{
  return &type metadata for ResponseCache.DBError;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSFileHandle()
{
  unint64_t result = lazy cache variable for type metadata for NSFileHandle;
  if (!lazy cache variable for type metadata for NSFileHandle)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSFileHandle);
  }
  return result;
}

uint64_t ProfileSliceResolutionRequestInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  return result;
}

id ProfileSliceResolutionRequestInstrumentationUtil.mockStream.getter()
{
  unint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = *(id *)(v0 + 16);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    uint64_t v4 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v3;
    id v2 = v3;

    unint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t ProfileSliceResolutionRequestInstrumentationUtil.mockStream.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F41817F8]();
}

void (*ProfileSliceResolutionRequestInstrumentationUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = ProfileSliceResolutionRequestInstrumentationUtil.mockStream.getter();
  return PommesCacheInstrumentationUtil.mockStream.modify;
}

uint64_t ProfileSliceResolutionRequestInstrumentationUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t ProfileSliceResolutionRequestInstrumentationUtil.init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = a1;
  return v1;
}

uint64_t ProfileSliceResolutionRequestInstrumentationUtil.logProfileSliceResolutionRequestStarted(requestId:pommesCandidateId:profileSliceLabel:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v5 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1148]), sel_init);
  if (!v7)
  {
    uint64_t v8 = v6;
LABEL_10:

LABEL_11:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_1C8F83000, v23, v24, "Unable to log ProfileSliceResolutionRequestStarted event", v25, 2u);
      MEMORY[0x1CB77E470](v25, -1, -1);
    }

    return 0;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1160]), sel_init);
  if (!v9)
  {

    goto LABEL_10;
  }
  uint64_t v10 = v9;
  unint64_t v11 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
  if ((v11 & 0x8000000000000000) == 0 && !HIDWORD(v11))
  {
    objc_msgSend(v10, sel_setSliceLabel_, v11);
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v12 - 8);
    MEMORY[0x1F4188790](v12);
    uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    UUID.init()();
    id v16 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v18 = objc_msgSend(v16, sel_initWithNSUUID_, isa);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    objc_msgSend(v8, sel_setContextId_, v18);
    objc_msgSend(v8, sel_setStartedOrChanged_, v10);
    objc_msgSend(v6, sel_setProfileResolutionRequestContext_, v8);
    uint64_t v19 = self;
    swift_retain();
    id v20 = objc_msgSend(v19, sel_processInfo);
    LOBYTE(v12) = NSProcessInfo.isRunningUnitTests.getter();

    if (v12) {
      id v21 = (id)(*(uint64_t (**)(void))(*(void *)v4 + 96))();
    }
    else {
      id v21 = objc_msgSend(self, sel_sharedStream);
    }
    id v26 = v21;
    swift_release();
    objc_msgSend(v26, sel_emitMessage_, v6);

    swift_unknownObjectRelease();
    return (uint64_t)v18;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void ProfileSliceResolutionRequestInstrumentationUtil.logProfileSliceResolutionRequestEnded(requestId:pommesCandidateId:contextId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  id v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1148]), sel_init);
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1150]), sel_init);
      if (v11)
      {
        uint64_t v12 = v11;
        objc_msgSend(v11, sel_setExists_, 1);
        objc_msgSend(v10, sel_setContextId_, a4);
        objc_msgSend(v10, sel_setEnded_, v12);
        objc_msgSend(v8, sel_setProfileResolutionRequestContext_, v10);
        uint64_t v13 = self;
        swift_retain();
        id v14 = objc_msgSend(v13, sel_processInfo);
        char v15 = NSProcessInfo.isRunningUnitTests.getter();

        if (v15) {
          id v16 = (id)(*(uint64_t (**)(void))(*(void *)v5 + 96))();
        }
        else {
          id v16 = objc_msgSend(self, sel_sharedStream);
        }
        id v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v10 = v8;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v18, "Unable to log ProfileSliceResolutionRequestEnded event", v19, 2u);
    MEMORY[0x1CB77E470](v19, -1, -1);
  }
}

void ProfileSliceResolutionRequestInstrumentationUtil.logProfileSliceResolutionRequestFailed(requestId:pommesCandidateId:contextId:failedReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  id v9 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1148]), sel_init);
    if (v11)
    {
      uint64_t v12 = v11;
      id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1158]), sel_init);
      if (v13)
      {
        id v14 = v13;
        objc_msgSend(v13, sel_setReason_, a5);
        objc_msgSend(v12, sel_setContextId_, a4);
        objc_msgSend(v12, sel_setFailed_, v14);
        objc_msgSend(v10, sel_setProfileResolutionRequestContext_, v12);
        char v15 = self;
        swift_retain();
        id v16 = objc_msgSend(v15, sel_processInfo);
        char v17 = NSProcessInfo.isRunningUnitTests.getter();

        if (v17) {
          id v18 = (id)(*(uint64_t (**)(void))(*(void *)v6 + 96))();
        }
        else {
          id v18 = objc_msgSend(self, sel_sharedStream);
        }
        uint64_t v22 = v18;
        swift_release();
        objc_msgSend(v22, sel_emitMessage_, v10);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v12 = v10;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v20))
  {
    id v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v21 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v20, "Unable to log ProfileSliceResolutionRequestFailed event", v21, 2u);
    MEMORY[0x1CB77E470](v21, -1, -1);
  }
}

uint64_t ProfileSliceResolutionRequestInstrumentationUtil.deinit()
{
  swift_release();
  return v0;
}

uint64_t ProfileSliceResolutionRequestInstrumentationUtil.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Emittable.mockStream.getter in conformance ProfileSliceResolutionRequestInstrumentationUtil()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_1C90CEF74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C90CEFC0(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(void **)a2 + 104))(*a1);
}

uint64_t type metadata accessor for ProfileSliceResolutionRequestInstrumentationUtil()
{
  return self;
}

uint64_t method lookup function for ProfileSliceResolutionRequestInstrumentationUtil(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ProfileSliceResolutionRequestInstrumentationUtil);
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.mockStream.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.mockStream.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.mockStream.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.logProfileSliceResolutionRequestStarted(requestId:pommesCandidateId:profileSliceLabel:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.logProfileSliceResolutionRequestEnded(requestId:pommesCandidateId:contextId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.logProfileSliceResolutionRequestFailed(requestId:pommesCandidateId:contextId:failedReason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

ValueMetadata *type metadata accessor for ParsecAlias()
{
  return &type metadata for ParsecAlias;
}

uint64_t AnalyticsComponentIdGenerator.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AnalyticsComponentIdGenerator.init()()
{
  return v0;
}

uint64_t AnalyticsComponentIdGenerator.deinit()
{
  return v0;
}

uint64_t method lookup function for AnalyticsComponentIdGenerator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AnalyticsComponentIdGenerator);
}

uint64_t dispatch thunk of AnalyticsComponentIdGenerator.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of AnalyticsComponentIdGenerator.derivedIdentifier(for:from:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

id MockEmittableSiriAnalyticsMessageStream.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

uint64_t MockEmittableSiriAnalyticsMessageStream.emittedMessages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MockEmittableSiriAnalyticsMessageStream.emittedMessages.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch39MockEmittableSiriAnalyticsMessageStream_emittedMessages);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MockEmittableSiriAnalyticsMessageStream.emittedMessages.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t MockEmittableSiriAnalyticsMessageStream.emitMessage(_:)(void *a1)
{
  uint64_t v3 = *(NSObject **)&v1[OBJC_IVAR____TtC21SiriInformationSearch39MockEmittableSiriAnalyticsMessageStream_queue];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in MockEmittableSiriAnalyticsMessageStream.emitMessage(_:);
  *(void *)(v5 + 24) = v4;
  v11[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v11[5] = v5;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed () -> ();
  v11[3] = &block_descriptor_15;
  uint64_t v6 = _Block_copy(v11);
  id v7 = v1;
  id v8 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C90CF450()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1C90CF490()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t closure #1 in MockEmittableSiriAnalyticsMessageStream.emitMessage(_:)(void *a1, void *a2)
{
  id v2 = *(uint64_t (**)(unsigned char *))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70);
  id v3 = a2;
  uint64_t v4 = (uint64_t (*)(unsigned char *, void))v2(v8);
  uint64_t v6 = v5;
  MEMORY[0x1CB77CD90]();
  if (*(void *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return v4(v8, 0);
}

uint64_t MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)()
{
  type metadata accessor for Array();
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t closure #1 in MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x60))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SISchemaTopLevelUnionType]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [SISchemaTopLevelUnionType] and conformance [A], &demangling cache variable for type metadata for [SISchemaTopLevelUnionType]);
  uint64_t v3 = Sequence.compactMap<A>(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t closure #1 in closure #1 in MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaTopLevelUnionType);
  id v6 = v5;
  int v7 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v7 ^ 1u, 1, a2);
}

Swift::Void __swiftcall MockEmittableSiriAnalyticsMessageStream.clearEmittedMessages()()
{
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR____TtC21SiriInformationSearch39MockEmittableSiriAnalyticsMessageStream_queue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in MockEmittableSiriAnalyticsMessageStream.clearEmittedMessages();
  *(void *)(v3 + 24) = v2;
  _OWORD v7[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v7[5] = v3;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  v7[3] = &block_descriptor_13_1;
  uint64_t v4 = _Block_copy(v7);
  uint64_t v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
}

id MockEmittableSiriAnalyticsMessageStream.init()()
{
  uint64_t v15 = OBJC_IVAR____TtC21SiriInformationSearch39MockEmittableSiriAnalyticsMessageStream_queue;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v1 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBCB40], v1);
  uint64_t v5 = v0;
  v14[1] = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v6 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  uint64_t v17 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, void))(v11 + 104))((char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  *(void *)&v0[v15] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v5[OBJC_IVAR____TtC21SiriInformationSearch39MockEmittableSiriAnalyticsMessageStream_emittedMessages] = v8;

  uint64_t v12 = (objc_class *)type metadata accessor for MockEmittableSiriAnalyticsMessageStream();
  v16.receiver = v5;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, sel_init);
}

id MockEmittableSiriAnalyticsMessageStream.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized MockEmittableSiriAnalyticsMessageStream.emitMessage(_:timestamp:)(void *a1)
{
  uint64_t v3 = *(NSObject **)&v1[OBJC_IVAR____TtC21SiriInformationSearch39MockEmittableSiriAnalyticsMessageStream_queue];
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in MockEmittableSiriAnalyticsMessageStream.emitMessage(_:timestamp:);
  *(void *)(v5 + 24) = v4;
  v11[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v11[5] = v5;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed () -> ();
  v11[3] = &block_descriptor_26;
  uint64_t v6 = _Block_copy(v11);
  uint64_t v7 = v1;
  id v8 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)(*(void **)(v1 + 24), a1);
}

uint64_t sub_1C90D0054()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in MockEmittableSiriAnalyticsMessageStream.clearEmittedMessages()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x68))(MEMORY[0x1E4FBC860]);
}

uint64_t sub_1C90D00E8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t type metadata accessor for MockEmittableSiriAnalyticsMessageStream()
{
  return self;
}

uint64_t sub_1C90D011C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t sub_1C90D0178(uint64_t a1, void **a2)
{
  objc_super v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x68);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for MockEmittableSiriAnalyticsMessageStream(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MockEmittableSiriAnalyticsMessageStream);
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.emittedMessages.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.emittedMessages.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.emittedMessages.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.emitMessage(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.emitMessage(_:timestamp:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.resolvePartialMessage(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.resolvePartialMessage(_:timestamp:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.enqueueLargeMessageObject(fromPath:assetIdentifier:messageMetadata:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.barrier(completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.clearEmittedMessages()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t partial apply for closure #1 in closure #1 in MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in MockEmittableSiriAnalyticsMessageStream.emitMessage(_:timestamp:)()
{
  return closure #1 in MockEmittableSiriAnalyticsMessageStream.emitMessage(_:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1C90D0468()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t SageSearch.remoteSearchClient.getter()
{
  return swift_retain();
}

uint64_t SageSearch.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  SageSearch.init()();
  return v0;
}

uint64_t SageSearch.init()()
{
  uint64_t v1 = v0;
  type metadata accessor for PegasusProxyForIntelligenceFlow();
  uint64_t v2 = static PegasusProxyForIntelligenceFlow.shared.getter();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)static PommesLocationManager.shared;
  type metadata accessor for SiriEnvironment();
  id v4 = v3;
  static SiriEnvironment.default.getter();
  uint64_t v5 = SiriEnvironment.networkAvailability.getter();
  swift_release();
  type metadata accessor for AnalyticsComponentIdGenerator();
  uint64_t v6 = swift_allocObject();
  type metadata accessor for PegasusInstrumentationUtil();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = v6;
  id v8 = default argument 4 of SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)();
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_init);
  type metadata accessor for SagePegasusProxy();
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = specialized SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)(v2, (uint64_t)v4, v5, v7, (uint64_t)v8, (uint64_t)v9, v10);
  *(void *)(v1 + 16) = v11;
  uint64_t v12 = *(void (**)(uint64_t))(*(void *)v11 + 304);
  uint64_t v13 = swift_retain();
  v12(v13);
  swift_release();
  return v1;
}

BOOL static SageSearch.SageSearchError.SageSearchErrorType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SageSearch.SageSearchError.SageSearchErrorType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int SageSearch.SageSearchError.SageSearchErrorType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void SageSearch.SageSearchError.error.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t SageSearch.SageSearchError.debugMessage.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

SiriInformationSearch::SageSearch::SageSearchError __swiftcall SageSearch.SageSearchError.init(error:debugMessage:)(SiriInformationSearch::SageSearch::SageSearchError::SageSearchErrorType error, Swift::String_optional debugMessage)
{
  *(unsigned char *)uint64_t v2 = *(unsigned char *)error;
  *(Swift::String_optional *)(v2 + 8) = debugMessage;
  result.debugMessage = debugMessage;
  result.error = error;
  return result;
}

uint64_t SageSearch.search(query:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v2 + 104))(a1, a2, 0);
}

uint64_t SageSearch.search(query:location:)()
{
  if (one-time initialization token for sage != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.sage);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C8F83000, v1, v2, "The deprecated search API was called. Pegasus response is always nil.", v3, 2u);
    MEMORY[0x1CB77E470](v3, -1, -1);
  }

  return 0;
}

uint64_t SageSearch.search(query:location:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 120)
                                                                   + **(int **)(*(void *)v3 + 120));
  id v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  void *v8 = v4;
  v8[1] = SageSearch.search(query:location:);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  return v11(a1, a2, v9, a3);
}

uint64_t SageSearch.search(query:location:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {

    a1 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
  return v5(a1);
}

uint64_t SageSearch.search(query:clientEntities:location:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  v5[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v5[9] = swift_task_alloc();
  type metadata accessor for PommesSearchRequest(0);
  v5[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](SageSearch.search(query:clientEntities:location:), 0, 0);
}

uint64_t SageSearch.search(query:clientEntities:location:)()
{
  uint64_t v36 = (void *)v0[10];
  uint64_t v33 = v0[9];
  uint64_t v34 = v0[8];
  uint64_t v32 = v0[4];
  uint64_t v35 = v0[3];
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = swift_task_alloc();
  UUID.init()();
  uint64_t v4 = UUID.uuidString.getter();
  uint64_t v29 = v5;
  uint64_t v30 = v4;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v3, v1);
  uint64_t v28 = v6;
  swift_task_dealloc();
  uint64_t v31 = swift_task_alloc();
  UUID.init()();
  uint64_t v27 = UUID.uuidString.getter();
  uint64_t v8 = v7;
  v6(v31, v1);
  uint64_t v9 = swift_task_alloc();
  UUID.init()();
  uint64_t v10 = swift_task_alloc();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v11(v10, v9, v1);
  uint64_t v12 = swift_task_alloc();
  v11(v12, v10, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  uint64_t v13 = swift_task_alloc();
  uint64_t v14 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  type metadata accessor for PommesRequestContext();
  swift_allocObject();
  uint64_t v15 = PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(v27, v8, v12, v30, v29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, MEMORY[0x1E4FBC860], v13, MEMORY[0x1E4FBC860]);
  v0[11] = v15;
  v28(v10, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  v28(v9, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = swift_task_alloc();
  swift_bridgeObjectRetain();
  UUID.init()();
  uint64_t v17 = UUID.uuidString.getter();
  uint64_t v19 = v18;
  v28(v16, v1);
  uint64_t v20 = type metadata accessor for PommesContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v33, 1, 1, v20);
  uint64_t v21 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v34, 1, 1, v21);
  swift_retain();
  PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:)(v35, v32, v17, v19, 0, v15, v33, v34, v36, MEMORY[0x1E4FBC860], 0);
  swift_task_dealloc();
  uint64_t v22 = (void *)swift_task_alloc();
  v0[12] = v22;
  *uint64_t v22 = v0;
  v22[1] = SageSearch.search(query:clientEntities:location:);
  uint64_t v23 = v0[10];
  uint64_t v24 = v0[6];
  uint64_t v25 = v0[5];
  return SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(v23, v25, v24, 8);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  uint64_t v22 = v0;
  if (one-time initialization token for sage != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.sage);
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[13];
  uint64_t v8 = v0[10];
  if (v6)
  {
    uint64_t v20 = v0[10];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v21 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v11 = dispatch thunk of PommesResponse.experiences.getter();
    uint64_t v12 = type metadata accessor for Experience();
    uint64_t v13 = MEMORY[0x1CB77CDC0](v11, v12);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C8F83000, v4, v5, "Received experiences:\n%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v10, -1, -1);
    MEMORY[0x1CB77E470](v9, -1, -1);

    swift_release();
    uint64_t v16 = v20;
  }
  else
  {

    swift_release();
    uint64_t v16 = v8;
  }
  outlined destroy of PommesSearchRequest(v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v18 = v0[13];
  return v17(v18);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 80);
  swift_release();
  outlined destroy of PommesSearchRequest(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t SageSearch.search(query:clientEntities:location:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = SageSearch.search(query:clientEntities:location:);
  }
  else {
    uint64_t v4 = SageSearch.search(query:clientEntities:location:);
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

uint64_t SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v5[8] = type metadata accessor for PommesSearchRequest(0);
  v5[9] = swift_task_alloc();
  return MEMORY[0x1F4188298](SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:), 0, 0);
}

uint64_t SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = *(void *)(v0[7] + 16);
  outlined init with copy of PommesSearchRequest(v4, v1);
  type metadata accessor for SageSearchRequestProcessor();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized SageSearchRequestProcessor.init(remoteClient:pommesSearchRequest:clientEntities:)(v5, v1, v3);
  v0[10] = v6;
  swift_release();
  uint64_t v7 = (uint64_t *)(v4 + *(int *)(v2 + 32));
  if (v7[1])
  {
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
  }
  else
  {
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = swift_task_alloc();
    UUID.init()();
    uint64_t v8 = UUID.uuidString.getter();
    uint64_t v9 = v13;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v10);
    swift_task_dealloc();
  }
  uint64_t v14 = v0[5];
  uint64_t v15 = v0[6];
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 312);
  swift_bridgeObjectRetain();
  v16(v8, v9, v14);
  swift_bridgeObjectRelease();
  uint64_t v17 = type metadata accessor for PommesResponse();
  uint64_t v18 = swift_task_alloc();
  v0[11] = v18;
  *(void *)(v18 + 16) = v6;
  *(void *)(v18 + 24) = v15;
  uint64_t v19 = (void *)swift_task_alloc();
  v0[12] = v19;
  *uint64_t v19 = v0;
  v19[1] = SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  return MEMORY[0x1F4188080](v0 + 2, v17, v17, 0, 0, &async function pointer to partial apply for closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:), v18, v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[5] = a3;
  void v4[6] = a4;
  v4[3] = a1;
  void v4[4] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:), 0, 0);
}

uint64_t closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v1, 1, 1, v4);
  uint64_t v6 = (void *)swift_allocObject();
  id v6[2] = 0;
  v6[3] = 0;
  v6[4] = v3;
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF21SiriInformationSearch14PommesResponseC_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:), (uint64_t)v6);
  outlined destroy of TaskPriority?(v1);
  v5(v1, 1, 1, v4);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  _OWORD v7[4] = v2;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF21SiriInformationSearch14PommesResponseC_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:), (uint64_t)v7);
  outlined destroy of TaskPriority?(v1);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[8] = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<PommesResponse, Error>);
  void *v8 = v0;
  v8[1] = closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  return MEMORY[0x1F4187E30](v0 + 2, 0, 0, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  }
  else {
    uint64_t v2 = closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)(v0 + 32);
    **(void **)(v0 + 24) = v1;
    uint64_t v3 = *v2;
    uint64_t v4 = type metadata accessor for PommesResponse();
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1CB77CF90](v3, v4, v5, MEMORY[0x1E4FBC0F0]);
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    if (one-time initialization token for sage != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.sage);
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1C8F83000, v8, v9, "SageSearch encountered unknown error", v10, 2u);
      MEMORY[0x1CB77E470](v10, -1, -1);
    }

    lazy protocol witness table accessor for type SageSearch.SageSearchError and conformance SageSearch.SageSearchError();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 1;
    *(void *)(v11 + 8) = 0xD000000000000024;
    *(void *)(v11 + 16) = 0x80000001C91A1210;
    swift_willThrow();
    uint64_t v12 = **(void **)(v0 + 32);
    uint64_t v13 = type metadata accessor for PommesResponse();
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1CB77CF90](v12, v13, v14, MEMORY[0x1E4FBC0F0]);
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v6();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = **(void **)(v0 + 32);
  uint64_t v2 = type metadata accessor for PommesResponse();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x1CB77CF90](v1, v2, v3, MEMORY[0x1E4FBC0F0]);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(void))(*(void *)(*(void *)a4 + 208) + **(int **)(*(void *)a4 + 208));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v5;
  *uint64_t v5 = v4;
  v5[1] = closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  return v7();
}

uint64_t closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 32) = a1;
    return MEMORY[0x1F4188298](closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:), 0, 0);
  }
}

uint64_t closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[5] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  void v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:), 0, 0);
}

uint64_t closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 40);
  static ContinuousClock.Instant.now.getter();
  MEMORY[0x1CB77D5A0](1000000000000000000 * v4, ((v4 >> 63) & 0xF21F494C589C0000) + (((unint64_t)v4 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64));
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 104) = v5;
  *(void *)(v0 + 112) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v2);
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  ContinuousClock.init()();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v6;
  unint64_t v7 = lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock();
  void *v6 = v0;
  v6[1] = closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  uint64_t v8 = *(void *)(v0 + 96);
  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v10 = *(void *)(v0 + 48);
  return MEMORY[0x1F4187DE8](v8, v0 + 16, v9, v10, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[13];
  if (v0)
  {
    uint64_t v4 = v2[12];
    uint64_t v5 = v2[9];
    (*(void (**)(void, void))(v2[7] + 8))(v2[8], v2[6]);
    v3(v4, v5);
    uint64_t v6 = closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  }
  else
  {
    unint64_t v7 = v2[12];
    uint64_t v8 = v2[9];
    (*(void (**)(void, void))(v2[7] + 8))(v2[8], v2[6]);
    v3(v7, v8);
    uint64_t v6 = closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  }
  return MEMORY[0x1F4188298](v6, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  if (one-time initialization token for sage != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.sage);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1C8F83000, v2, v3, "SageSearch timed out waiting for Pegasus", v4, 2u);
    MEMORY[0x1CB77E470](v4, -1, -1);
  }

  lazy protocol witness table accessor for type SageSearch.SageSearchError and conformance SageSearch.SageSearchError();
  swift_allocError();
  *(unsigned char *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0xD000000000000028;
  *(void *)(v5 + 16) = 0x80000001C91A1240;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SageSearch.deinit()
{
  swift_release();
  return v0;
}

uint64_t SageSearch.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t specialized SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(a7 + 64) = type metadata accessor for PommesLocationManager(0);
  *(void *)(a7 + 72) = &protocol witness table for PommesLocationManager;
  *(void *)(a7 + 40) = a2;
  *(void *)(a7 + 144) = type metadata accessor for CNContactStore();
  *(void *)(a7 + 152) = &protocol witness table for CNContactStore;
  *(void *)(a7 + 120) = a6;
  *(void *)(a7 + 16) = 0;
  *(void *)(a7 + 24) = 0;
  *(_OWORD *)(a7 + 104) = xmmword_1C91991D0;
  *(void *)(a7 + 160) = 0;
  *(void *)(a7 + 32) = a1;
  *(void *)(a7 + 80) = a3;
  *(void *)(a7 + 88) = a4;
  *(void *)(a7 + 96) = a5;
  return a7;
}

unint64_t lazy protocol witness table accessor for type SageSearch.SageSearchError.SageSearchErrorType and conformance SageSearch.SageSearchError.SageSearchErrorType()
{
  unint64_t result = lazy protocol witness table cache variable for type SageSearch.SageSearchError.SageSearchErrorType and conformance SageSearch.SageSearchError.SageSearchErrorType;
  if (!lazy protocol witness table cache variable for type SageSearch.SageSearchError.SageSearchErrorType and conformance SageSearch.SageSearchError.SageSearchErrorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SageSearch.SageSearchError.SageSearchErrorType and conformance SageSearch.SageSearchError.SageSearchErrorType);
  }
  return result;
}

uint64_t type metadata accessor for SageSearch()
{
  return self;
}

uint64_t method lookup function for SageSearch(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SageSearch);
}

uint64_t dispatch thunk of SageSearch.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of SageSearch.search(query:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SageSearch.search(query:location:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SageSearch.search(query:location:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v3 + 112)
                                                          + **(int **)(*(void *)v3 + 112));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v8;
  void *v8 = v4;
  v8[1] = dispatch thunk of SageSearch.search(query:location:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of SageSearch.search(query:location:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t dispatch thunk of SageSearch.search(query:clientEntities:location:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v4 + 120)
                                                                   + **(int **)(*(void *)v4 + 120));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v10;
  *uint64_t v10 = v5;
  v10[1] = dispatch thunk of PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v12(a1, a2, a3, a4);
}

uint64_t destroy for SageSearch.SageSearchError()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for SageSearch.SageSearchError(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SageSearch.SageSearchError(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SageSearch.SageSearchError(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SageSearch.SageSearchError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SageSearch.SageSearchError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SageSearch.SageSearchError()
{
  return &type metadata for SageSearch.SageSearchError;
}

unsigned char *storeEnumTagSinglePayload for SageSearch.SageSearchError.SageSearchErrorType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C90D2ED4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SageSearch.SageSearchError.SageSearchErrorType()
{
  return &type metadata for SageSearch.SageSearchError.SageSearchErrorType;
}

uint64_t partial apply for closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  void *v8 = v3;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(a1, a2, v7, v6);
}

uint64_t sub_1C90D2FC0()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(a1, v4, v5, v6);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C90D3114()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(a1, v4, v5, v6);
}

unint64_t lazy protocol witness table accessor for type SageSearch.SageSearchError and conformance SageSearch.SageSearchError()
{
  unint64_t result = lazy protocol witness table cache variable for type SageSearch.SageSearchError and conformance SageSearch.SageSearchError;
  if (!lazy protocol witness table cache variable for type SageSearch.SageSearchError and conformance SageSearch.SageSearchError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SageSearch.SageSearchError and conformance SageSearch.SageSearchError);
  }
  return result;
}

unint64_t type metadata accessor for CNContactStore()
{
  unint64_t result = lazy cache variable for type metadata for CNContactStore;
  if (!lazy cache variable for type metadata for CNContactStore)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CNContactStore);
  }
  return result;
}

uint64_t AudioResult.ItemSource.description.getter()
{
  unint64_t v1 = 0x726576726573;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000011;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E776F6E6B6E75;
  }
}

SiriInformationSearch::AudioResult::ItemSource_optional __swiftcall AudioResult.ItemSource.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  *unint64_t v1 = v2;
  return (SiriInformationSearch::AudioResult::ItemSource_optional)rawValue;
}

uint64_t AudioResult.ItemSource.rawValue.getter()
{
  return *v0;
}

SiriInformationSearch::AudioResult::ItemSource_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AudioResult.ItemSource(Swift::Int *a1)
{
  return AudioResult.ItemSource.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AudioResult.ItemSource(void *a1@<X8>)
{
  *a1 = *v1;
}

void AudioResult.itemSource.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t AudioResult.persistentId.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t AudioResult.audioItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AudioResult.isDownloaded.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded);
}

uint64_t static AudioResult.decodeSiriSyncId(id:)()
{
  uint64_t v1 = Data.init(base64Encoded:options:)();
  uint64_t result = 0;
  if (v0 >> 60 != 15)
  {
    unint64_t v3 = v0;
    uint64_t v4 = type metadata accessor for String.Encoding();
    MEMORY[0x1F4188790](v4 - 8);
    static String.Encoding.utf8.getter();
    uint64_t v5 = String.init(data:encoding:)();
    uint64_t v7 = v6;
    outlined consume of Data?(v1, v3);
    if (v7) {
      return v5;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t AudioResult.__allocating_init(itemSource:persistentId:audioItem:)(unsigned char *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = *a1;
  *(void *)(v8 + 24) = a2;
  *(unsigned char *)(v8 + 32) = a3 & 1;
  uint64_t v9 = v8 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a4, v10);
  *(unsigned char *)(v8 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded) = 0;
  return v8;
}

uint64_t AudioResult.init(itemSource:persistentId:audioItem:)(unsigned char *a1, uint64_t a2, char a3, uint64_t a4)
{
  *(unsigned char *)(v4 + 16) = *a1;
  *(void *)(v4 + 24) = a2;
  *(unsigned char *)(v4 + 32) = a3 & 1;
  uint64_t v6 = v4 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, a4, v7);
  *(unsigned char *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded) = 0;
  return v4;
}

uint64_t AudioResult.__allocating_init(itemSource:audioItem:isDownloaded:)(unsigned char *a1, uint64_t a2, char a3)
{
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = *a1;
  *(void *)(v6 + 24) = 0;
  *(unsigned char *)(v6 + 32) = 0;
  uint64_t v7 = v6 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a2, v8);
  *(unsigned char *)(v6 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded) = a3;
  return v6;
}

uint64_t AudioResult.init(itemSource:audioItem:isDownloaded:)(unsigned char *a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 16) = *a1;
  *(void *)(v3 + 24) = 0;
  *(unsigned char *)(v3 + 32) = 0;
  uint64_t v6 = v3 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, a2, v7);
  *(unsigned char *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded) = a3;
  return v3;
}

uint64_t AudioResult.__allocating_init(vocabularyResult:isDownloaded:)(void *a1, int a2)
{
  LODWORD(v34) = a2;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v32 - v14;
  if (a1)
  {
    uint64_t v33 = v2;
    id v16 = a1;
    Apple_Parsec_Siri_V2alpha_AudioItem.init()();
    dispatch thunk of VocabularyResult.fieldType.getter();
    KVFieldType.audioType.getter();
    Apple_Parsec_Siri_V2alpha_AudioItem.type.setter();
    Apple_Parsec_Siri_V2alpha_AudioItem.type.getter();
    int v17 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
    if (v17 == *MEMORY[0x1E4F88F78] || v17 == *MEMORY[0x1E4F88F80]) {
      goto LABEL_7;
    }
    if (v17 == *MEMORY[0x1E4F88FA0])
    {
      VocabularyResult.semanticValue.getter();
      Apple_Parsec_Siri_V2alpha_AudioItem.artist.setter();
      goto LABEL_15;
    }
    if (v17 == *MEMORY[0x1E4F88F88]
      || v17 == *MEMORY[0x1E4F88FC0]
      || v17 == *MEMORY[0x1E4F88F30]
      || v17 == *MEMORY[0x1E4F88F50]
      || v17 == *MEMORY[0x1E4F88FC8]
      || v17 == *MEMORY[0x1E4F88F90]
      || v17 == *MEMORY[0x1E4F88FA8]
      || v17 == *MEMORY[0x1E4F88F48]
      || v17 == *MEMORY[0x1E4F88F28]
      || v17 == *MEMORY[0x1E4F88F58])
    {
LABEL_7:
      VocabularyResult.semanticValue.getter();
      Apple_Parsec_Siri_V2alpha_AudioItem.title.setter();
LABEL_15:
      VocabularyResult.userId.getter();
      Apple_Parsec_Siri_V2alpha_AudioItem.sharedUserIDFromPlayableMusicAccount.setter();
      char v35 = 2;
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
      uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 120))(&v35, v13, v34 & 1);

      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      return v23;
    }
    uint64_t v25 = v5;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
    uint64_t v27 = v16;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    int v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      LODWORD(v33) = v30;
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = v25;
      *(_DWORD *)uint64_t v31 = 134217984;
      v32[1] = v31 + 4;
      uint64_t v36 = dispatch thunk of VocabularyResult.fieldType.getter();
      uint64_t v25 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C8F83000, v28, (os_log_type_t)v33, "vocabularyResult ontologyLabel ** %ld ** not handled", v31, 0xCu);
      MEMORY[0x1CB77E470](v31, -1, -1);
    }
    else
    {

      uint64_t v28 = v27;
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v4);
    return 0;
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1C8F83000, v20, v21, "cannot create AudioResult from nil vocabularyResult", v22, 2u);
      MEMORY[0x1CB77E470](v22, -1, -1);
    }

    return 0;
  }
}

uint64_t AudioResult.__allocating_init(clientAudioResult:)(void *a1)
{
  uint64_t v2 = (void *)ClientAudioResult.vocabularyResult.getter();
  uint64_t v3 = AudioResult.__allocating_init(vocabularyResult:isDownloaded:)(v2, 0);

  return v3;
}

uint64_t AudioResult.__allocating_init(clientAudioResult:isDownloaded:)(void *a1, int a2)
{
  uint64_t v4 = (void *)ClientAudioResult.vocabularyResult.getter();
  uint64_t v5 = AudioResult.__allocating_init(vocabularyResult:isDownloaded:)(v4, a2);

  return v5;
}

uint64_t AudioResult.__allocating_init(audioItem:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItem?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = &v15[-v11];
  outlined init with copy of Apple_Parsec_Siri_V2alpha_AudioItem?(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of Apple_Parsec_Siri_V2alpha_AudioItem?(a1);
    outlined destroy of Apple_Parsec_Siri_V2alpha_AudioItem?((uint64_t)v5);
    return 0;
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v12, v5, v6);
    char v16 = 1;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(v10, v12, v6);
    uint64_t v13 = (*(uint64_t (**)(char *, unsigned char *, void))(v1 + 120))(&v16, v10, 0);
    outlined destroy of Apple_Parsec_Siri_V2alpha_AudioItem?(a1);
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v12, v6);
  }
  return v13;
}

uint64_t AudioResult.description.getter()
{
  uint64_t v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_AudioItem.type.getter();
  int v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == *MEMORY[0x1E4F88FB8])
  {
    uint64_t v6 = (void *)0xE700000000000000;
    uint64_t v7 = 0x6E776F6E6B6E75;
  }
  else if (v5 == *MEMORY[0x1E4F88F78])
  {
    uint64_t v6 = (void *)0xE400000000000000;
    uint64_t v7 = 1735290739;
  }
  else if (v5 == *MEMORY[0x1E4F88F80])
  {
    uint64_t v6 = (void *)0xE500000000000000;
    uint64_t v7 = 0x6D75626C61;
  }
  else if (v5 == *MEMORY[0x1E4F88FA0])
  {
    uint64_t v6 = (void *)0xE600000000000000;
    uint64_t v7 = 0x747369747261;
  }
  else if (v5 == *MEMORY[0x1E4F88F88])
  {
    uint64_t v6 = (void *)0xE500000000000000;
    uint64_t v7 = 0x65726E6567;
  }
  else if (v5 == *MEMORY[0x1E4F88FC0])
  {
    uint64_t v6 = (void *)0xE800000000000000;
    uint64_t v7 = 0x7473696C79616C70;
  }
  else
  {
    uint64_t v7 = 0x5374736163646F70;
    if (v5 == *MEMORY[0x1E4F88F30])
    {
      uint64_t v6 = (void *)0xEB00000000776F68;
    }
    else if (v5 == *MEMORY[0x1E4F88F50])
    {
      uint64_t v6 = (void *)0xEE0065646F736970;
      uint64_t v7 = 0x4574736163646F70;
    }
    else if (v5 == *MEMORY[0x1E4F88F60])
    {
      uint64_t v6 = (void *)0xEF7473696C79616CLL;
      uint64_t v7 = 0x5074736163646F70;
    }
    else
    {
      uint64_t v6 = (void *)0xEC0000006E6F6974;
      if (v5 == *MEMORY[0x1E4F88F38])
      {
        uint64_t v7 = 0x617453636973756DLL;
      }
      else if (v5 == *MEMORY[0x1E4F88FC8])
      {
        uint64_t v6 = (void *)0xE90000000000006BLL;
        uint64_t v7 = 0x6F6F426F69647561;
      }
      else if (v5 == *MEMORY[0x1E4F88F90])
      {
        uint64_t v6 = (void *)0xE500000000000000;
        uint64_t v7 = 0x6569766F6DLL;
      }
      else if (v5 == *MEMORY[0x1E4F88FA8])
      {
        uint64_t v6 = (void *)0xE600000000000000;
        uint64_t v7 = 0x776F68537674;
      }
      else if (v5 == *MEMORY[0x1E4F88F48])
      {
        uint64_t v6 = (void *)0xED000065646F7369;
        uint64_t v7 = 0x7045776F68537674;
      }
      else if (v5 == *MEMORY[0x1E4F88F28])
      {
        uint64_t v6 = (void *)0xEA00000000006F65;
        uint64_t v7 = 0x646956636973756DLL;
      }
      else if (v5 == *MEMORY[0x1E4F88F58])
      {
        uint64_t v6 = (void *)0xEE006E6F69746174;
      }
      else if (v5 == *MEMORY[0x1E4F88F40])
      {
        uint64_t v7 = 0x6174536F69646172;
      }
      else if (v5 == *MEMORY[0x1E4F88FB0])
      {
        uint64_t v6 = (void *)0xE700000000000000;
        uint64_t v7 = 0x6E6F6974617473;
      }
      else if (v5 == *MEMORY[0x1E4F88F98])
      {
        uint64_t v6 = (void *)0xE500000000000000;
        uint64_t v7 = 0x636973756DLL;
      }
      else if (v5 == *MEMORY[0x1E4F88F68])
      {
        uint64_t v7 = 0xD000000000000017;
        uint64_t v6 = (void *)0x80000001C91A12B0;
      }
      else if (v5 == *MEMORY[0x1E4F88F70])
      {
        uint64_t v6 = (void *)0xE400000000000000;
        uint64_t v7 = 1937204590;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        uint64_t v6 = (void *)0xEC00000044455A49;
        uint64_t v7 = 0x4E474F4345524E55;
      }
    }
  }
  v24[0] = 0;
  v24[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(82);
  v8._uint64_t countAndFlagsBits = 0xD000000000000019;
  v8._object = (void *)0x80000001C91A1290;
  String.append(_:)(v8);
  unint64_t v9 = 0xE600000000000000;
  unint64_t v10 = 0x726576726573;
  if (*(unsigned char *)(v0 + 16) != 1)
  {
    unint64_t v10 = 0xD000000000000011;
    unint64_t v9 = 0x80000001C91A1270;
  }
  if (*(unsigned char *)(v0 + 16)) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0x6E776F6E6B6E75;
  }
  if (*(unsigned char *)(v0 + 16)) {
    unint64_t v12 = v9;
  }
  else {
    unint64_t v12 = 0xE700000000000000;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x69746E656469202CLL;
  v14._object = (void *)0xEE00203A72656966;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = Apple_Parsec_Siri_V2alpha_AudioItem.identifier.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0x747369747261202CLL;
  v16._object = (void *)0xEB0000000022203ALL;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = Apple_Parsec_Siri_V2alpha_AudioItem.artist.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x656C746974202C22;
  v18._object = (void *)0xEB0000000022203ALL;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = Apple_Parsec_Siri_V2alpha_AudioItem.title.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x3A65707974202C22;
  v20._object = (void *)0xE900000000000020;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = v7;
  v21._object = v6;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 32032;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  return v24[0];
}

uint64_t AudioResult.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t AudioResult.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t outlined init with copy of Apple_Parsec_Siri_V2alpha_AudioItem?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItem?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Apple_Parsec_Siri_V2alpha_AudioItem?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItem?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AudioResult.ItemSource and conformance AudioResult.ItemSource()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioResult.ItemSource and conformance AudioResult.ItemSource;
  if (!lazy protocol witness table cache variable for type AudioResult.ItemSource and conformance AudioResult.ItemSource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResult.ItemSource and conformance AudioResult.ItemSource);
  }
  return result;
}

uint64_t ObjC metadata update function for AudioResult()
{
  return type metadata accessor for AudioResult();
}

uint64_t type metadata accessor for AudioResult()
{
  uint64_t result = type metadata singleton initialization cache for AudioResult;
  if (!type metadata singleton initialization cache for AudioResult) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AudioResult()
{
  uint64_t result = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for AudioResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioResult);
}

uint64_t dispatch thunk of AudioResult.__allocating_init(itemSource:persistentId:audioItem:)(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 112))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of AudioResult.__allocating_init(itemSource:audioItem:isDownloaded:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of AudioResult.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

unsigned char *storeEnumTagSinglePayload for AudioResult.ItemSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C90D4A20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioResult.ItemSource()
{
  return &type metadata for AudioResult.ItemSource;
}

uint64_t GlideFeaturiser.__allocating_init(query:)(uint64_t a1)
{
  swift_allocObject();
  uint64_t v2 = specialized GlideFeaturiser.init(query:)(a1);
  swift_release();
  return v2;
}

uint64_t GlideFeaturiser.name.getter()
{
  return String.init<A>(describing:)();
}

uint64_t GlideFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v1 = specialized GlideFeaturiser.init(query:)(a1);
  swift_release();
  return v1;
}

void GlideFeaturiser.featurise(candidate:rankedSlotIndex:)(void **a1)
{
  uint64_t v2 = a1;
  if (*(unsigned char *)(v1 + 16) != 1) {
    goto LABEL_4;
  }
  int v3 = *a1;
  if (*((unsigned char *)*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source))
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    a1 = (void **)swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {
LABEL_4:
      uint64_t v5 = *v2;
      unsigned int v6 = (void *)MEMORY[0x1E4FBC8C8];
      uint64_t v7 = (void *)(*(uint64_t (**)(void **))((*MEMORY[0x1E4FBC8C8] & *v5) + 0xB8))(a1);
      Swift::String v8 = *(void (**)(__n128))((*v6 & *v7) + 0xB8);
      v9.n128_u32[0] = 1.0;
      goto LABEL_7;
    }
  }
  else
  {
    a1 = (void **)swift_bridgeObjectRelease();
  }
  unint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = (void *)(*(uint64_t (**)(void **))((*MEMORY[0x1E4FBC8C8] & *v3) + 0xB8))(a1);
  Swift::String v8 = *(void (**)(__n128))((*v10 & *v7) + 0xB8);
  v9.n128_u32[0] = 1064514355;
LABEL_7:
  id v11 = v7;
  v8(v9);
}

uint64_t GlideFeaturiser.deinit()
{
  return v0;
}

uint64_t GlideFeaturiser.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Featuriser.name.getter in conformance GlideFeaturiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t protocol witness for Featuriser.featurise(candidate:rankedSlotIndex:) in conformance GlideFeaturiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t specialized GlideFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C8F83000, v5, v6, "GlideFeaturiser : isGlideEligible=%{BOOL}d", v7, 8u);
    MEMORY[0x1CB77E470](v7, -1, -1);
  }
  else
  {

    swift_release();
  }
  *(unsigned char *)(v2 + 16) = *(unsigned char *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible);
  return v2;
}

uint64_t type metadata accessor for GlideFeaturiser()
{
  return self;
}

uint64_t method lookup function for GlideFeaturiser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GlideFeaturiser);
}

uint64_t dispatch thunk of GlideFeaturiser.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of GlideFeaturiser.__allocating_init(query:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of GlideFeaturiser.featurise(candidate:rankedSlotIndex:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

id PegasusInstrumentationUtil.mockStream.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = *(id *)(v0 + 16);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    uint64_t v4 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t PegasusInstrumentationUtil.mockStream.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F41817F8]();
}

void (*PegasusInstrumentationUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = PegasusInstrumentationUtil.mockStream.getter();
  return PommesCacheInstrumentationUtil.mockStream.modify;
}

uint64_t PegasusInstrumentationUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t PegasusInstrumentationUtil.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  return result;
}

uint64_t PegasusInstrumentationUtil.init(_:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = a1;
  return v1;
}

void PegasusInstrumentationUtil.logStartOfPegasusRequest(requestId:pommesId:pommesCandidateId:payloadSizeInKB:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v15 = (id)(*(uint64_t (**)(void))(*(void *)v3 + 136))();
  if (v15)
  {
    Swift::String v8 = specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(a1, a2, a3);
    if (v8)
    {
      __n128 v9 = v8;
      objc_msgSend(v8, sel_setPegasusRequestContext_, v15);
      unint64_t v10 = self;
      swift_retain();
      id v11 = objc_msgSend(v10, sel_processInfo);
      char v12 = NSProcessInfo.isRunningUnitTests.getter();

      if (v12) {
        id v13 = (id)(*(uint64_t (**)(void))(*(void *)v4 + 96))();
      }
      else {
        id v13 = objc_msgSend(self, sel_sharedStream);
      }
      Swift::String v14 = v13;
      swift_release();
      objc_msgSend(v14, sel_emitMessage_, v9);

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8, long double a9, long double a10, uint64_t a11)
{
  void (*v59)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(void *@<X8>));
  void *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void (*v69)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void (*)(void *@<X8>));
  void *v70;
  void (*v71)(char *, uint64_t);
  void *v72;
  void *v73;
  void *v74;
  id v75;
  char v76;
  id v77;
  void *v78;
  int v79;
  int *v80;
  uint64_t v81;
  void v82[2];
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  void *v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  void *v97;
  void v98[2];

  uint64_t v95 = a3;
  LODWORD(v90) = a8;
  uint64_t v89 = a7;
  uint64_t v87 = a6;
  uint64_t v91 = (void *)a5;
  os_log_type_t v93 = a1;
  BOOL v94 = a2;
  uint64_t v97 = (void *)type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  uint64_t v92 = *(v97 - 1);
  MEMORY[0x1F4188790](v97);
  uint64_t v86 = (char *)v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v85 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  uint64_t v83 = *(void *)(v85 - 8);
  MEMORY[0x1F4188790](v85);
  uint64_t v84 = (char *)v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  MEMORY[0x1F4188790](v16 - 8);
  Swift::String v18 = (char *)v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v88 = (char *)v82 - v24;
  uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V1alpha_StatusCode();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, a4, v25);
  int v29 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v28, v25);
  int v30 = *MEMORY[0x1E4F88CE0];
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  if (v29 == v30)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v32, v33)) {
      goto LABEL_16;
    }
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    char v35 = "Incorrect logging method called. Should call logFailedPegasusRequest(pommesId:resultCandidateId:reason:).";
LABEL_15:
    _os_log_impl(&dword_1C8F83000, v32, v33, v35, v34, 2u);
    MEMORY[0x1CB77E470](v34, -1, -1);
LABEL_16:

    return;
  }
  id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA10F8]), sel_init);
  if (!v36)
  {
LABEL_11:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.pommes);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v32, v33)) {
      goto LABEL_16;
    }
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    char v35 = "Failed to create the End event and/or context";
    goto LABEL_15;
  }
  id v37 = v36;
  id v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA10F0]), sel_init);
  if (!v38)
  {

    goto LABEL_11;
  }
  id v39 = v38;
  v82[1] = a11;
  objc_msgSend(v37, sel_setStatus_, closure #1 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)(a4));
  specialized PegasusInstrumentationUtil.roundToTwoSigFigs(_:)(a9);
  objc_msgSend(v37, sel_setConfidenceScore_);
  specialized PegasusInstrumentationUtil.roundToTwoSigFigs(_:)(a10);
  objc_msgSend(v37, sel_setPayloadSizeInKB_);
  if (v89) {
    uint64_t v40 = (void *)MEMORY[0x1CB77CA90](v87);
  }
  else {
    uint64_t v40 = 0;
  }
  os_log_type_t v42 = v96;
  id v43 = v97;
  uint64_t v44 = v19;
  objc_msgSend(v37, sel_setPegasusDomain_, v40);

  objc_msgSend(v37, sel_setIsRewrittenUtteranceUsed_, v90 & 1);
  uint64_t v45 = (void *)specialized static PegasusInstrumentationUtil.kfedLatency(from:)();
  objc_msgSend(v37, sel_setKfedLatency_, v45);

  outlined init with copy of MediaUserStateCenter?((uint64_t)v91, (uint64_t)v18, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  int v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
  uint64_t v47 = v92;
  if (v46 == 1)
  {
    id v48 = v42;
    outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  }
  else
  {
    id v49 = v88;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v88, v18, v44);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v23, v49, v44);
    int v50 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v23, v44);
    if (v50 == *MEMORY[0x1E4F88720])
    {
      uint64_t v91 = v39;
      uint64_t v96 = v37;
      (*(void (**)(char *, uint64_t))(v20 + 96))(v23, v44);
      os_log_type_t v51 = v86;
      uint64_t v52 = (*(uint64_t (**)(char *, char *, void *))(v47 + 32))(v86, v23, v43);
      uint64_t v90 = v44;
      uint64_t v53 = v47;
      if (one-time initialization token for shared != -1) {
        uint64_t v52 = swift_once();
      }
      uint64_t v89 = v82;
      uint64_t v54 = static PerformanceUtil.shared;
      MEMORY[0x1F4188790](v52);
      id v48 = v42;
      id v80 = v42;
      uint64_t v81 = (uint64_t)v51;
      uint64_t v55 = type metadata accessor for Date();
      uint64_t v56 = *(void *)(v55 - 8);
      MEMORY[0x1F4188790](v55);
      uint64_t v58 = (char *)v82 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
      Date.init()();
      uint64_t v59 = *(void (**)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(void *@<X8>)))(*(void *)v54 + 200);
      id v80 = &v79;
      uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for POMMESSchemaPOMMESPegasusResponseServerDrivenContext?);
      LOBYTE(v79) = 2;
      v59(v98, 0xD00000000000001CLL, 0x80000001C91A1360, 0, v58, "SiriInformationSearch/PegasusInstrumentationUtil.swift", 54, 2, 150, "logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)", 162, v79, partial apply for closure #3 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:));
      (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v55);
      uint64_t v60 = (void *)v98[0];
      id v37 = v96;
      objc_msgSend(v96, sel_setServerDriven_, v98[0]);

      (*(void (**)(char *, uint64_t))(v20 + 8))(v88, v90);
      (*(void (**)(char *, void *))(v53 + 8))(v86, v97);
      id v39 = v91;
    }
    else if (v50 == *MEMORY[0x1E4F88718])
    {
      uint64_t v91 = v39;
      uint64_t v96 = v37;
      (*(void (**)(char *, uint64_t))(v20 + 96))(v23, v44);
      uint64_t v62 = v83;
      sqlite3_int64 v61 = v84;
      uint64_t v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v83 + 32))(v84, v23, v85);
      uint64_t v90 = v44;
      if (one-time initialization token for shared != -1) {
        uint64_t v63 = swift_once();
      }
      uint64_t v97 = v82;
      uint64_t v64 = static PerformanceUtil.shared;
      MEMORY[0x1F4188790](v63);
      id v48 = v42;
      id v80 = v42;
      uint64_t v81 = (uint64_t)v61;
      uint64_t v65 = type metadata accessor for Date();
      uint64_t v66 = *(void *)(v65 - 8);
      MEMORY[0x1F4188790](v65);
      uint64_t v68 = (char *)v82 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
      Date.init()();
      uint64_t v69 = *(void (**)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void (*)(void *@<X8>)))(*(void *)v64 + 200);
      id v80 = &v79;
      uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for POMMESSchemaPOMMESPegasusResponseClientDrivenContext?);
      LOBYTE(v79) = 2;
      v69(v98, 0xD00000000000001CLL, 0x80000001C91A1470, 0, v68, "SiriInformationSearch/PegasusInstrumentationUtil.swift", 54, 2, 148, "logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)", 162, v79, partial apply for closure #2 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:));
      (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v65);
      id v37 = v96;
      int v70 = (void *)v98[0];
      objc_msgSend(v96, sel_setClientDriven_, v98[0]);

      (*(void (**)(char *, uint64_t))(v20 + 8))(v88, v90);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v84, v85);
      id v39 = v91;
    }
    else
    {
      id v48 = v42;
      uint64_t v71 = *(void (**)(char *, uint64_t))(v20 + 8);
      v71(v88, v44);
      v71(v23, v44);
    }
  }
  objc_msgSend(v39, sel_setEnded_, v37);
  uint64_t v72 = specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(v93, v94, v95);
  if (v72)
  {
    uint64_t v73 = v72;
    objc_msgSend(v72, sel_setPegasusRequestContext_, v39);
    id v74 = self;
    swift_retain();
    id v75 = objc_msgSend(v74, sel_processInfo);
    uint64_t v76 = NSProcessInfo.isRunningUnitTests.getter();

    if (v76) {
      os_log_type_t v77 = (id)(*(uint64_t (**)(void))(*(void *)v48 + 96))();
    }
    else {
      os_log_type_t v77 = objc_msgSend(self, sel_sharedStream);
    }
    uint64_t v78 = v77;
    swift_release();
    objc_msgSend(v78, sel_emitMessage_, v73);

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

uint64_t closure #1 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V1alpha_StatusCode();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E4F88CE8]) {
    goto LABEL_5;
  }
  if (v6 == *MEMORY[0x1E4F88CF8]) {
    return 1;
  }
  if (v6 == *MEMORY[0x1E4F88CE0])
  {
LABEL_5:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
    __n128 v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      _os_log_impl(&dword_1C8F83000, v9, v10, "Unrecognized status from log end of request", v11, 2u);
      MEMORY[0x1CB77E470](v11, -1, -1);
    }

    return 0;
  }
  if (v6 != *MEMORY[0x1E4F88CF0])
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1C8F83000, v13, v14, "Unknown status from log end of request", v15, 2u);
      MEMORY[0x1CB77E470](v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
  return 3;
}

void closure #2 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)(void *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1120]), sel_init);
  id v3 = v2;
  if (v2)
  {
    id v4 = v2;
    objc_msgSend(v4, sel_setType_, closure #1 in PegasusInstrumentationUtil.buildClientDrivenContext(_:)());
  }
  *a1 = v3;
}

void PegasusInstrumentationUtil.logFailedPegasusRequest(requestId:pommesId:pommesCandidateId:reason:errorCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v7 = v6;
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1100]), sel_init);
  if (!v14) {
    goto LABEL_12;
  }
  uint64_t v15 = v14;
  uint64_t v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA10F0]), sel_init);
  if (!v16)
  {

LABEL_12:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_1C8F83000, v27, v24, "Failed to create the Failed event and/or context", v25, 2u);
      MEMORY[0x1CB77E470](v25, -1, -1);
    }
    goto LABEL_17;
  }
  uint64_t v27 = v16;
  objc_msgSend(v15, sel_setReason_, a4);
  if ((a6 & 1) == 0 && a4 == 1)
  {
    if ((a5 & 0x8000000000000000) != 0 || HIDWORD(a5))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    objc_msgSend(v15, sel_setErrorCode_, a5);
  }
  [v27 setFailed:v15];
  uint64_t v17 = specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(a1, a2, a3);
  if (v17)
  {
    Swift::String v18 = v17;
    objc_msgSend(v17, sel_setPegasusRequestContext_, v27);
    uint64_t v19 = self;
    swift_retain();
    id v20 = objc_msgSend(v19, sel_processInfo);
    char v21 = NSProcessInfo.isRunningUnitTests.getter();

    if (v21) {
      id v22 = (id)(*(uint64_t (**)(void))(*(void *)v7 + 96))();
    }
    else {
      id v22 = objc_msgSend(self, sel_sharedStream);
    }
    uint64_t v26 = v22;
    swift_release();
    objc_msgSend(v26, sel_emitMessage_, v18);

    swift_unknownObjectRelease();
    return;
  }

LABEL_17:
}

void PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (**a5)(char *, uint64_t))
{
  uint64_t v129 = a5;
  uint64_t v105 = a3;
  uint64_t v104 = a2;
  uint64_t v103 = a1;
  uint64_t v130 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams();
  uint64_t v5 = *(void *)(v130 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v130);
  int v101 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v108 = (char *)&v98 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v128 = (char *)&v98 - v10;
  uint64_t v112 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  uint64_t v115 = *(void *)(v112 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v112);
  id v13 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v111 = (char *)&v98 - v14;
  uint64_t v123 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  unint64_t v15 = *(void *)(v123 - 8);
  MEMORY[0x1F4188790](v123);
  uint64_t v122 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  uint64_t v124 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v99 = (char *)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  char v21 = (char *)&v98 - v20;
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  uint64_t v126 = *(void *)(v22 - 8);
  long long v127 = (void (**)(char *, uint64_t))v22;
  MEMORY[0x1F4188790](v22);
  uint64_t v125 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v120 = *(void *)(v24 - 8);
  uint64_t v121 = (char *)v24;
  MEMORY[0x1F4188790](v24);
  unint64_t v119 = (void (**)(char *, uint64_t))((char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = (void (*)(char *, uint64_t))type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery();
  uint64_t v27 = *((void *)v26 - 1);
  MEMORY[0x1F4188790](v26);
  int v29 = (char *)&v98 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.getter();
  uint64_t v31 = v30;
  uint64_t v32 = *(char **)(v30 + 16);
  uint64_t v114 = v17;
  os_log_type_t v113 = v21;
  unint64_t v132 = v32;
  uint64_t v100 = v13;
  if (v32)
  {
    uint64_t v117 = (void (**)(char *, uint64_t))v15;
    os_log_type_t v118 = (char *)v5;
    os_log_type_t v33 = 0;
    char v35 = *(void (**)(void, void, void))(v27 + 16);
    uint64_t v34 = v27 + 16;
    uint64_t v131 = (void (*)(char *, unint64_t, void (*)(char *, uint64_t)))v35;
    unint64_t v15 = v30 + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64));
    uint64_t v5 = *(void *)(v34 + 56);
    id v36 = (void (**)(char *, void *))(v34 - 8);
    while (1)
    {
      uint64_t v37 = v34;
      v131(v29, v15, v26);
      swift_bridgeObjectRetain();
      closure #1 in PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)(&v134);
      id v38 = (void (*)(char *, void))*v36;
      (*v36)(v29, v26);
      swift_bridgeObjectRelease();
      unint64_t v39 = v135;
      swift_bridgeObjectRelease();
      if (v39) {
        break;
      }
      ++v33;
      v15 += v5;
      uint64_t v34 = v37;
      if (v132 == v33) {
        goto LABEL_8;
      }
    }
    if (v132 == v33)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      uint64_t v107 = 0;
      unint64_t v40 = 0;
LABEL_12:
      uint64_t v17 = v114;
      char v21 = v113;
      uint64_t v5 = (uint64_t)v118;
      unint64_t v15 = (unint64_t)v117;
      goto LABEL_13;
    }
    if ((unint64_t)v33 < *(void *)(v31 + 16))
    {
      v131(v29, v15, v26);
      closure #1 in PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)(&v134);
      v38(v29, v26);
      unint64_t v40 = v135;
      if (!v135) {
        goto LABEL_70;
      }
      uint64_t v107 = v134;
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  swift_bridgeObjectRelease();
  uint64_t v107 = 0;
  unint64_t v40 = 0;
LABEL_13:
  uint64_t v41 = v121;
  os_log_type_t v42 = v119;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  id v43 = v125;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
  uint64_t v44 = (*(uint64_t (**)(void, char *))(v120 + 8))(v42, v41);
  uint64_t v26 = (void (*)(char *, uint64_t))MEMORY[0x1CB779280](v44);
  (*(void (**)(char *, void **))(v126 + 8))(v43, (void **)v127);
  uint64_t v121 = (char *)*((void *)v26 + 2);
  if (v121)
  {
    unint64_t v102 = v40;
    uint64_t v45 = 0;
    uint64_t v120 = *(void *)(v124 + 16);
    os_log_type_t v118 = (char *)v26 + ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80));
    uint64_t v117 = (void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v116 = *(void *)(v124 + 72);
    uint64_t v126 = v115 + 16;
    long long v127 = (void (**)(char *, uint64_t))(v115 + 8);
    v124 += 16;
    unint64_t v119 = (void (**)(char *, uint64_t))(v124 - 8);
    uint64_t v110 = v26;
    uint64_t v129 = (void (**)(char *, uint64_t))(v5 + 8);
    int v46 = v111;
    while (1)
    {
      uint64_t v5 = (uint64_t)&v118[v116 * (void)v45];
      ((void (*)(char *, uint64_t, uint64_t))v120)(v21, v5, v17);
      swift_bridgeObjectRetain();
      uint64_t v47 = v122;
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter();
      uint64_t v48 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
      (*v117)(v47, v123);
      unint64_t v132 = *(char **)(v48 + 16);
      if (v132) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_16:
      (*v119)(v21, v17);
      swift_bridgeObjectRelease();
      if (++v45 == v121) {
        goto LABEL_33;
      }
    }
    uint64_t v109 = v5;
    uint64_t v125 = v45;
    id v49 = 0;
    unint64_t v50 = v48 + ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80));
    unint64_t v15 = *(void *)(v115 + 72);
    uint64_t v131 = *(void (**)(char *, unint64_t, void (*)(char *, uint64_t)))(v115 + 16);
    uint64_t v5 = v112;
    while (1)
    {
      v131(v46, v50, (void (*)(char *, uint64_t))v5);
      swift_bridgeObjectRetain();
      os_log_type_t v51 = v128;
      uint64_t v52 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
      uint64_t v53 = MEMORY[0x1CB779310](v52);
      unint64_t v55 = v54;
      uint64_t v56 = *v129;
      (*v129)(v51, v130);
      swift_bridgeObjectRelease();
      uint64_t v57 = HIBYTE(v55) & 0xF;
      if ((v55 & 0x2000000000000000) == 0) {
        uint64_t v57 = v53 & 0xFFFFFFFFFFFFLL;
      }
      if (v57) {
        break;
      }
      (*v127)(v46, v5);
      swift_bridgeObjectRelease();
      ++v49;
      v50 += v15;
      if (v132 == v49) {
        goto LABEL_25;
      }
    }
    uint64_t v58 = v108;
    uint64_t v59 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
    MEMORY[0x1CB779310](v59);
    v56(v58, v130);
    uint64_t v26 = *v127;
    (*v127)(v46, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v132 == v49)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      uint64_t v17 = v114;
      char v21 = v113;
      uint64_t v26 = v110;
      uint64_t v45 = v125;
      goto LABEL_16;
    }
    if ((unint64_t)v49 >= *(void *)(v48 + 16)) {
      goto LABEL_67;
    }
    unint64_t v15 = (unint64_t)v100;
    v131(v100, v50, (void (*)(char *, uint64_t))v5);
    uint64_t v62 = v101;
    uint64_t v63 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
    uint64_t v64 = MEMORY[0x1CB779310](v63);
    unint64_t v66 = v65;
    uint64_t v67 = v62;
    uint64_t v68 = v130;
    v56(v67, v130);
    swift_bridgeObjectRelease();
    uint64_t v69 = HIBYTE(v66) & 0xF;
    if ((v66 & 0x2000000000000000) == 0) {
      uint64_t v69 = v64 & 0xFFFFFFFFFFFFLL;
    }
    if (!v69) {
      goto LABEL_71;
    }
    int v70 = v108;
    uint64_t v71 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
    MEMORY[0x1CB779310](v71);
    v56(v70, v68);
    v26((char *)v15, v5);
    swift_bridgeObjectRelease();
    uint64_t v72 = *v119;
    uint64_t v73 = v114;
    (*v119)(v113, v114);
    swift_bridgeObjectRelease();
    uint64_t v26 = v110;
    swift_bridgeObjectRelease();
    if (v125 == v121)
    {
LABEL_33:
      swift_bridgeObjectRelease();
      uint64_t v60 = 0;
      unint64_t v61 = 0;
      unint64_t v40 = v102;
      if (!v102) {
        goto LABEL_42;
      }
      goto LABEL_34;
    }
    if ((unint64_t)v125 >= *((void *)v26 + 2)) {
      goto LABEL_68;
    }
    id v75 = v99;
    ((void (*)(char *, uint64_t, uint64_t))v120)(v99, v109, v73);
    closure #2 in PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)(&v134);
    v72(v75, v73);
    unint64_t v61 = v135;
    unint64_t v40 = v102;
    if (!v135)
    {
LABEL_72:
      __break(1u);
      return;
    }
    uint64_t v60 = v134;
    swift_bridgeObjectRelease();
    if (v40) {
      goto LABEL_34;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v60 = 0;
    unint64_t v61 = 0;
    if (v40)
    {
LABEL_34:
      if (v61 && (v107 == v60 && v40 == v61 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        uint64_t v74 = 2;
        goto LABEL_44;
      }
      goto LABEL_43;
    }
  }
LABEL_42:
  if (v61)
  {
LABEL_43:
    uint64_t v74 = 1;
    goto LABEL_44;
  }
  uint64_t v74 = 3;
LABEL_44:
  int v137 = v74;
  uint64_t v76 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1108]), sel_init);
  if (!v76)
  {
LABEL_69:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    v26((char *)v15, v5);
    __break(1u);
    goto LABEL_72;
  }
  os_log_type_t v77 = v76;
  objc_msgSend(v76, sel_setGeoAppResolutionType_, v74);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v78 = type metadata accessor for Logger();
  __swift_project_value_buffer(v78, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v79 = Logger.logObject.getter();
  os_log_type_t v80 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v79, v80))
  {
    uint64_t v81 = swift_slowAlloc();
    unint64_t v132 = v77;
    uint64_t v82 = v81;
    uint64_t v83 = swift_slowAlloc();
    uint64_t v136 = v83;
    *(_DWORD *)uint64_t v82 = 136315650;
    if (v40) {
      uint64_t v84 = v107;
    }
    else {
      uint64_t v84 = 7104878;
    }
    if (v40) {
      unint64_t v85 = v40;
    }
    else {
      unint64_t v85 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v82 + 12) = 2080;
    if (v61)
    {
      unint64_t v86 = v61;
    }
    else
    {
      uint64_t v60 = 7104878;
      unint64_t v86 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v86, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v82 + 22) = 2080;
    swift_beginAccess();
    uint64_t v87 = POMMESSchemaPOMMESPegasusRequestGeoAppResolutionType.description.getter();
    uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v79, v80, "Third party maps app bundle Id from request is %s, from response is %s). Reporting resolution type: %s.", (uint8_t *)v82, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v83, -1, -1);
    uint64_t v89 = v82;
    os_log_type_t v77 = v132;
    MEMORY[0x1CB77E470](v89, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v90 = v106;
  uint64_t v91 = specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(v103, v104, v105);
  if (v91)
  {
    uint64_t v92 = v91;
    objc_msgSend(v91, sel_setPommesPegasusRequestGeoAppResolutionReported_, v77);
    os_log_type_t v93 = self;
    swift_retain();
    id v94 = objc_msgSend(v93, sel_processInfo);
    char v95 = NSProcessInfo.isRunningUnitTests.getter();

    if (v95) {
      id v96 = (id)(*(uint64_t (**)(void))(*(void *)v90 + 96))();
    }
    else {
      id v96 = objc_msgSend(self, sel_sharedStream);
    }
    uint64_t v97 = v96;
    swift_release();
    objc_msgSend(v97, sel_emitMessage_, v92);

    swift_unknownObjectRelease();
  }
  else
  {
  }
}