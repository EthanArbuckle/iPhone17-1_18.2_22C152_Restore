uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t PommesBridge.currentSessionId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for PommesBridge.currentSessionId;
  swift_beginAccess();
  return outlined init with copy of MediaUserStateCenter?(v3, a1, &demangling cache variable for type metadata for UUID?);
}

uint64_t outlined destroy of MediaUserStateCenter?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PommesBridge.sessionState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for PommesBridge.sessionState;
  swift_beginAccess();
  return outlined init with copy of MediaUserStateCenter?(v3, a1, &demangling cache variable for type metadata for ConversationSessionState?);
}

uint64_t outlined init with take of AppDataProviding(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined init with copy of AppDataProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t PommesBridge.isMultiUser.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for PommesBridge.isMultiUser);
  swift_beginAccess();
  return *v1;
}

uint64_t PommesBridge.isOnlyUserInHome.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for PommesBridge.isOnlyUserInHome);
  swift_beginAccess();
  return *v1;
}

uint64_t type metadata accessor for PommesBridgeRequestProcessor(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesBridgeRequestProcessor);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

double specialized static PommesBridgeRequestProcessor.configuredScoreThreshold()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  uint64_t v1 = (void *)MEMORY[0x1CB77CA90](0xD000000000000011, 0x80000001C919E9E0);
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2) {
    return 0.6;
  }
  uint64_t v3 = (void *)MEMORY[0x1CB77CA90](0xD000000000000013, 0x80000001C91A06F0);
  objc_msgSend(v2, sel_doubleForKey_, v3);
  double v5 = v4;

  if ((*(void *)&v5 & 0x7FF0000000000000) == 0 && (*(void *)&v5 & 0xFFFFFFFFFFFFFLL) == 0) {
    return 0.6;
  }
  return v5;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

Swift::Void __swiftcall PommesSearch.prepareForSearchAtRequestStart(requestId:location:)(Swift::String requestId, CLLocation_optional location)
{
  Class isa = location.value.super.isa;
  object = requestId._object;
  uint64_t countAndFlagsBits = requestId._countAndFlagsBits;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
  v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1C8F83000, v7, v8, "POMMES preparing for search at request start", v9, 2u);
    MEMORY[0x1CB77E470](v9, -1, -1);
  }

  v16[3] = &type metadata for FeatureFlag;
  v16[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  uint64_t v10 = swift_allocObject();
  v16[0] = v10;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(unsigned char *)(v10 + 48) = 3;
  char v11 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if (v11)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, void *, Class))(**(void **)(v2 + 24) + 536))(countAndFlagsBits, object, isa);
    (*(void (**)(uint64_t))(**(void **)(v2 + 40) + 184))(v12);
  }
  else
  {
    v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1C8F83000, v13, v14, "Sphinx FF is disabled, skipping prepareForSearchAtRequestStart", v15, 2u);
      MEMORY[0x1CB77E470](v15, -1, -1);
    }
  }
}

Swift::Void __swiftcall PegasusProxy.prepareForSearchAtRequestStart(requestId:location:)(Swift::String requestId, CLLocation_optional location)
{
  uint64_t v3 = v2;
  Class isa = location.value.super.isa;
  Swift::String v42 = requestId;
  double v5 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v6 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  os_log_type_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v41 - v9;
  char v11 = &unk_1EBCB1000;
  if (isa)
  {
    uint64_t v12 = one-time initialization token for pommes;
    v13 = isa;
    if (v12 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    v15 = v13;
    v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 134283777;
      [(objc_class *)v15 coordinate];
      uint64_t v43 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2049;
      [(objc_class *)v15 coordinate];
      uint64_t v43 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C8F83000, v16, v17, "Received location: (%{private}f, %{private}f) from startSpeechRequest", (uint8_t *)v18, 0x16u);
      uint64_t v21 = v18;
      char v11 = (void *)&unk_1EBCB1000;
      MEMORY[0x1CB77E470](v21, -1, -1);
    }
    else
    {
    }
    uint64_t v22 = v3[15];
    uint64_t v23 = v3[16];
    __swift_project_boxed_opaque_existential_1(v3 + 12, v22);
    (*(void (**)(objc_class *, uint64_t, uint64_t))(v23 + 16))(v15, v22, v23);
  }
  if (v11[280] != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1C8F83000, v25, v26, "Fetching location", v27, 2u);
    MEMORY[0x1CB77E470](v27, -1, -1);
  }

  Date.init()();
  v28 = &v10[v5[5]];
  *(void *)v28 = "SiriInformationSearch/PegasusProxy.swift";
  *((void *)v28 + 1) = 40;
  v28[16] = 2;
  *(void *)&v10[v5[6]] = 365;
  v29 = &v10[v5[7]];
  *(void *)v29 = "prepareForSearchAtRequestStart(requestId:location:)";
  *((void *)v29 + 1) = 51;
  v29[16] = 2;
  uint64_t v30 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000024);
  v31 = (uint64_t *)&v10[v5[8]];
  uint64_t *v31 = v30;
  v31[1] = v32;
  uint64_t v33 = v3[15];
  uint64_t v34 = v3[16];
  __swift_project_boxed_opaque_existential_1(v3 + 12, v33);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
  swift_release();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v10, 0);
  Date.init()();
  v35 = &v8[v5[5]];
  *(void *)v35 = "SiriInformationSearch/PegasusProxy.swift";
  *((void *)v35 + 1) = 40;
  v35[16] = 2;
  *(void *)&v8[v5[6]] = 369;
  v36 = &v8[v5[7]];
  *(void *)v36 = "prepareForSearchAtRequestStart(requestId:location:)";
  *((void *)v36 + 1) = 51;
  v36[16] = 2;
  uint64_t v37 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000048);
  v38 = (uint64_t *)&v8[v5[8]];
  uint64_t *v38 = v37;
  v38[1] = v39;
  uint64_t v40 = (*(uint64_t (**)(void))(*v3 + 352))();
  if (v40)
  {
    (*(void (**)(uint64_t, void *, uint64_t (*)(), void))(*(void *)v40 + 128))(v42._countAndFlagsBits, v42._object, destructiveProjectEnumData for SearchError, 0);
    swift_release();
  }
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v8, 0);
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0((uint64_t)v8, type metadata accessor for PerformanceUtil.Ticket);
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0((uint64_t)v10, type metadata accessor for PerformanceUtil.Ticket);
}

uint64_t type metadata accessor for PommesSearchError(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for PerformanceUtil.Ticket(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PerformanceUtil.Ticket);
}

uint64_t specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(uint64_t a1)
{
  if (String.count.getter() < 101)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      double v5 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)double v5 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v3, v4, "Description is too long. Trimming to %ld characters.", v5, 0xCu);
      MEMORY[0x1CB77E470](v5, -1, -1);
    }

    String.index(_:offsetBy:)();
    uint64_t v6 = String.subscript.getter();
    uint64_t v7 = MEMORY[0x1CB77CB40](v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v8._uint64_t countAndFlagsBits = 3026478;
    v8._object = (void *)0xE300000000000000;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    return v7;
  }
  return a1;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)()
{
  uint64_t v1 = *(void *)(v0 + 120);
  (*(void (**)(uint64_t, void))(**(void **)(v0 + 104) + 184))(v1, *(unsigned __int8 *)(v0 + 144));
  outlined destroy of PerformanceUtil.Measurement(v1, type metadata accessor for PerformanceUtil.Ticket);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;

  uint64_t v2 = *(int **)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v22 = *(int **)(v0 + 88);
  uint64_t v21 = *(unsigned char *)(v0 + 146);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(unsigned char *)(v0 + 145);
  uint64_t v6 = *(void *)(v0 + 56);
  double v5 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 40);
  Swift::String v8 = *(void *)(v0 + 48);
  uint64_t v19 = *(void *)(v0 + 24);
  uint64_t v20 = *(void *)(v0 + 80);
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v1, v7, v9);
  uint64_t v10 = v1 + v2[5];
  *(void *)uint64_t v10 = v8;
  *(void *)(v10 + 8) = v6;
  *(unsigned char *)(v10 + 16) = v4;
  *(void *)(v1 + v2[6]) = v5;
  char v11 = v1 + v2[7];
  *(void *)char v11 = v3;
  *(void *)(v11 + 8) = v20;
  *(unsigned char *)(v11 + 16) = v21;
  swift_bridgeObjectRetain();
  uint64_t v12 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v19);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  v15 = (uint64_t *)(v1 + v2[8]);
  objc_class *v15 = v12;
  v15[1] = v14;
  uint64_t v23 = (uint64_t (*)(uint64_t))((char *)v22 + *v22);
  v16 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v16;
  NSObject *v16 = v0;
  v16[1] = PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:);
  os_log_type_t v17 = *(void *)(v0 + 16);
  return v23(v17);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:);
  }
  else {
    uint64_t v2 = PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 120);
  (*(void (**)(uint64_t, void))(**(void **)(v0 + 104) + 184))(v1, *(unsigned __int8 *)(v0 + 144));
  outlined destroy of PerformanceUtil.Measurement(v1, type metadata accessor for PerformanceUtil.Ticket);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v9 + 96) = v16;
  *(void *)(v9 + 104) = v8;
  *(unsigned char *)(v9 + 146) = v14;
  *(void *)(v9 + 80) = v13;
  *(void *)(v9 + 88) = v15;
  *(_OWORD *)(v9 + 64) = v12;
  *(unsigned char *)(v9 + 145) = a8;
  *(void *)(v9 + 48) = a6;
  *(void *)(v9 + 56) = a7;
  *(unsigned char *)(v9 + 144) = a4;
  *(void *)(v9 + 32) = a3;
  *(void *)(v9 + 40) = a5;
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 112) = type metadata accessor for PerformanceUtil.Ticket(0);
  *(void *)(v9 + 120) = swift_task_alloc();
  return MEMORY[0x1F4188298](PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:), 0, 0);
}

uint64_t PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)@<X0>(uint64_t a1@<X0>, unsigned int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v32 = a7;
  uint64_t v33 = a1;
  int v31 = a6;
  uint64_t v30 = a5;
  unsigned int v38 = a2;
  uint64_t v34 = a8;
  uint64_t v36 = a13;
  uint64_t v37 = a12;
  uint64_t v35 = a14;
  uint64_t v17 = type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v18 = (int *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v20, a3, v21);
  uint64_t v22 = &v20[v18[7]];
  uint64_t v23 = v30;
  *(void *)uint64_t v22 = a4;
  *((void *)v22 + 1) = v23;
  v22[16] = v31;
  *(void *)&v20[v18[8]] = v32;
  uint64_t v24 = &v20[v18[9]];
  *(void *)uint64_t v24 = a9;
  *((void *)v24 + 1) = a10;
  v24[16] = a11;
  swift_bridgeObjectRetain();
  uint64_t v25 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v33);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  v28 = (uint64_t *)&v20[v18[10]];
  uint64_t *v28 = v25;
  v28[1] = v27;
  (*(void (**)(char *, void, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 216))(v20, v38, v37, v36, v35);
  return outlined destroy of PerformanceUtil.Measurement((uint64_t)v20, type metadata accessor for PerformanceUtil.Ticket);
}

uint64_t PerformanceUtil.recordMeasurement<A>(for:logMeasurement:block:)(uint64_t a1, char a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!v4) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 184))(a1, a2 & 1);
  }
  return result;
}

uint64_t PerformanceUtil.recordMeasurement(for:logMeasurement:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PerformanceUtil.Ticket>);
  uint64_t v5 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C91947A0;
  outlined init with copy of PerformanceUtil.Ticket(a1, v7 + v6, type metadata accessor for PerformanceUtil.Ticket);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 192))(v7, a2);

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall PerformanceUtil.recordMeasurement(for:logMeasurement:)(Swift::OpaquePointer a1, Swift::Bool logMeasurement)
{
  uint64_t v3 = v2;
  BOOL v4 = logMeasurement;
  uint64_t v6 = type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v10 = &v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  long long v12 = &v35[-v11];
  uint64_t v13 = type metadata accessor for PerformanceUtil.Measurement(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v40 = v13;
  uint64_t v41 = v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  unsigned int v38 = &v35[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = &v35[-v17];
  int64_t v19 = *((void *)a1._rawValue + 2);
  uint64_t v20 = MEMORY[0x1E4FBC860];
  if (v19)
  {
    BOOL v36 = v4;
    uint64_t v37 = v2;
    uint64_t v42 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    uint64_t v21 = (char *)a1._rawValue
        + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v39 = *(void *)(v7 + 72);
    do
    {
      outlined init with copy of PerformanceUtil.Ticket((uint64_t)v21, (uint64_t)v12, type metadata accessor for PerformanceUtil.Ticket);
      outlined init with copy of PerformanceUtil.Ticket((uint64_t)v12, (uint64_t)v10, type metadata accessor for PerformanceUtil.Ticket);
      uint64_t v22 = type metadata accessor for Date();
      uint64_t v23 = *(void *)(v22 - 8);
      MEMORY[0x1F4188790](v22);
      uint64_t v25 = &v35[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
      Date.init()();
      Date.timeIntervalSince(_:)();
      double v27 = v26;
      (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v25, v22);
      _s21SiriInformationSearch15PerformanceUtilC6TicketVWObTm_1((uint64_t)v10, (uint64_t)v18, type metadata accessor for PerformanceUtil.Ticket);
      *(double *)&v18[*(int *)(v40 + 20)] = v27 * 1000.0;
      outlined destroy of PerformanceUtil.Measurement((uint64_t)v12, type metadata accessor for PerformanceUtil.Ticket);
      uint64_t v20 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1);
        uint64_t v20 = v42;
      }
      unint64_t v29 = *(void *)(v20 + 16);
      unint64_t v28 = *(void *)(v20 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        uint64_t v20 = v42;
      }
      *(void *)(v20 + 16) = v29 + 1;
      _s21SiriInformationSearch15PerformanceUtilC6TicketVWObTm_1((uint64_t)v18, v20+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v29, type metadata accessor for PerformanceUtil.Measurement);
      v21 += v39;
      --v19;
    }
    while (v19);
    uint64_t v3 = v37;
    LOBYTE(v4) = v36;
  }
  uint64_t v30 = (uint64_t)v38;
  if (v4 || *(unsigned char *)(v3 + 56) == 1)
  {
    uint64_t v31 = *(void *)(v20 + 16);
    if (v31)
    {
      uint64_t v32 = v20 + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
      uint64_t v33 = *(void *)(v41 + 72);
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of PerformanceUtil.Ticket(v32, v30, type metadata accessor for PerformanceUtil.Measurement);
        PerformanceUtil.Measurement.log()();
        outlined destroy of PerformanceUtil.Measurement(v30, type metadata accessor for PerformanceUtil.Measurement);
        v32 += v33;
        --v31;
      }
      while (v31);
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v34 = *(void **)(v3 + 48);
  objc_msgSend(v34, sel_lock);
  swift_beginAccess();
  specialized Array.append<A>(contentsOf:)(v20);
  swift_endAccess();
  objc_msgSend(v34, sel_unlock);
}

uint64_t initializeWithCopy for PerformanceUtil.Ticket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = (long long *)(a2 + v7);
  long long v11 = *v10;
  *(unsigned char *)(v9 + 16) = *((unsigned char *)v10 + 16);
  *(_OWORD *)uint64_t v9 = v11;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  uint64_t v16 = (void *)(a1 + v13);
  uint64_t v17 = (void *)(a2 + v13);
  uint64_t v18 = v17[1];
  void *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for PerformanceUtil.Measurement(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PerformanceUtil.Measurement);
}

uint64_t outlined destroy of PerformanceUtil.Measurement(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for PerformanceUtil.Ticket(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PerformanceUtil.Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
  uint64_t v11 = v7[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  uint64_t v14 = v7[8];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = v16[1];
  void *v15 = *v16;
  v15[1] = v17;
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for PerformanceUtil.Measurement(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  type metadata accessor for PerformanceUtil.Ticket(0);

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SignpostToken()
{
  uint64_t result = type metadata singleton initialization cache for SignpostToken;
  if (!type metadata singleton initialization cache for SignpostToken) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t OSSignposter.begin(name:context:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v9 = a3;
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v24 - v15;
  if (a4)
  {
    swift_unknownObjectRetain();
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:object:)();
  }
  else
  {
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
  }
  uint64_t v17 = OSSignposter.logHandle.getter();
  int v26 = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  int v28 = v9;
  double v27 = a1;
  if ((result & 1) == 0)
  {

    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
LABEL_14:
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v22 = OSSignpostIntervalState.init(id:isOpen:)();
    *(void *)a5 = v27;
    *(void *)(a5 + 8) = a2;
    *(unsigned char *)(a5 + 16) = v28;
    uint64_t v23 = type metadata accessor for SignpostToken();
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5 + *(int *)(v23 + 20), v16, v10);
    *(void *)(a5 + *(int *)(v23 + 24)) = v22;
    return result;
  }
  uint64_t v25 = a2;
  if ((v9 & 1) == 0)
  {
    if (a1)
    {
      uint64_t v24 = a1;
LABEL_13:
      int64_t v19 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
      v19(v14, v16, v10);
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_1C8F83000, v17, (os_signpost_type_t)v26, v21, v24, "", v20, 2u);
      MEMORY[0x1CB77E470](v20, -1, -1);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      a2 = v25;
      v19(v14, v16, v10);
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_16;
  }
  if ((unint64_t)a1 >> 32)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (a1 >> 11 != 27)
  {
    if (a1 >> 16 <= 0x10)
    {
      uint64_t v24 = &v29;
      goto LABEL_13;
    }
    goto LABEL_17;
  }
LABEL_18:
  __break(1u);
  return result;
}

void type metadata accessor for CLAccuracyAuthorization(uint64_t a1)
{
}

uint64_t destroy for SignpostToken(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_release();
}

uint64_t PegasusProxy.phoneCallStateManager.getter()
{
  return swift_retain();
}

void PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v11, v12, "Fetching isUserOnPhoneCall status for requestId: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v14, -1, -1);
    MEMORY[0x1CB77E470](v13, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v15 = *(void *)(v5 + 24);
  uint64_t v16 = *(void *)(v5 + 32);
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a2;
  unsigned __int8 v17 = *(unsigned char *)(v5 + 40);
  *(unsigned char *)(v5 + 40) = 0;
  swift_bridgeObjectRetain();
  outlined consume of PommesPhoneCallStateManager.Status(v15, v16, v17);
  uint64_t v18 = *(void **)(v5 + 16);
  if (objc_msgSend(v18, sel_respondsToSelector_, sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C91947A0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v20;
    swift_unknownObjectRetain();
    specialized Set.init(_nonEmptyArrayLiteral:)(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    os_signpost_id_t v21 = (void *)swift_allocObject();
    v21[2] = a1;
    v21[3] = a2;
    v21[4] = v5;
    v21[5] = a3;
    v21[6] = a4;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v23 = (void *)MEMORY[0x1CB77CA90](a1, a2);
    aBlock[4] = (uint64_t)partial apply for closure #1 in PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:completion:);
    aBlock[5] = (uint64_t)v21;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [AFServiceDeviceContext]?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_23;
    uint64_t v24 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v18, sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_, isa, v23, 0, v24);
    _Block_release(v24);
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
  }
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined consume of PommesPhoneCallStateManager.Status(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall PegasusCacheManager.prepare()()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled)) {
    goto LABEL_4;
  }
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
  uint64_t v2 = (void *)MEMORY[0x1CB77CA90](0x635F656C62616E65, 0xEE00676E69686361);
  uint64_t v3 = (void *)MEMORY[0x1CB77CA90](0xD000000000000018, 0x80000001C919BF10);
  id v4 = objc_msgSend(v1, sel_levelForFactor_withNamespaceName_, v2, v3);

  if (v4)
  {
    unsigned int v5 = objc_msgSend(v4, sel_BOOLeanValue);

    if (v5)
    {
LABEL_4:
      uint64_t v18 = *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue);
      uint64_t v6 = swift_allocObject();
      swift_weakInit();
      aBlock[4] = partial apply for closure #1 in PegasusCacheManager.prepare();
      aBlock[5] = v6;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_5;
      uint64_t v7 = _Block_copy(aBlock);
      uint64_t v16 = type metadata accessor for DispatchQoS();
      unsigned __int8 v17 = v15;
      uint64_t v8 = *(void *)(v16 - 8);
      MEMORY[0x1F4188790](v16);
      uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
      v15[1] = v15;
      uint64_t v12 = *(void *)(v11 - 8);
      MEMORY[0x1F4188790](v11);
      uint64_t v14 = (char *)v15 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v19 = MEMORY[0x1E4FBC860];
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAF40]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1CB77D180](0, v10, v14, v7);
      _Block_release(v7);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v16);
      swift_release();
      swift_release();
    }
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [AFServiceDeviceContext]?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  if (a2)
  {
    type metadata accessor for AFServiceDeviceContext();
    uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v3(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for AFServiceDeviceContext()
{
  unint64_t result = lazy cache variable for type metadata for AFServiceDeviceContext;
  if (!lazy cache variable for type metadata for AFServiceDeviceContext)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AFServiceDeviceContext);
  }
  return result;
}

uint64_t partial apply for closure #1 in PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:completion:)(unint64_t a1)
{
  return closure #1 in PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:completion:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40));
}

uint64_t closure #1 in PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:completion:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  if (!a1) {
    goto LABEL_17;
  }
  uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!(a1 >> 62))
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_4;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    long long v34 = 0u;
    long long v35 = 0u;
    goto LABEL_18;
  }
LABEL_4:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v13 = (id)MEMORY[0x1CB77D510](0, a1);
  }
  else
  {
    if (!*(void *)(v10 + 16))
    {
      __break(1u);
      return result;
    }
    id v13 = *(id *)(a1 + 32);
  }
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v14, sel_serializedContextByKey);

  if (!v15) {
    goto LABEL_17;
  }
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v16 + 16) && (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v20 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v16 + 56) + 32 * v19, (uint64_t)&v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((void *)&v35 + 1))
    {
      outlined init with take of Any(&v34, v36);
      id v21 = objc_allocWithZone(MEMORY[0x1E4F4E410]);
      __swift_project_boxed_opaque_existential_1(v36, v37);
      id v22 = objc_msgSend(v21, sel_initWithSerializedBackingStore_, _bridgeAnythingToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      if (objc_msgSend(v22, sel_callState))
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);

        uint64_t v24 = 1;
      }
      else
      {
        unint64_t v23 = (unint64_t)objc_msgSend(v22, sel_callState);

        uint64_t v24 = (v23 >> 3) & 1;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      }
      goto LABEL_19;
    }
  }
  else
  {
    long long v34 = 0u;
    long long v35 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_18:
  outlined destroy of Any?((uint64_t)&v34);
  uint64_t v24 = 0;
LABEL_19:
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  int v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    v36[0] = v29;
    *(_DWORD *)uint64_t v28 = 67109378;
    LODWORD(v34) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 8) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&long long v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v26, v27, "Retrieved isUserOnPhoneCall status: %{BOOL}d for requestId: %s", (uint8_t *)v28, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v29, -1, -1);
    MEMORY[0x1CB77E470](v28, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (v24) {
    char v30 = 2;
  }
  else {
    char v30 = 1;
  }
  uint64_t v31 = *(void *)(a4 + 24);
  uint64_t v32 = *(void *)(a4 + 32);
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  unsigned __int8 v33 = *(unsigned char *)(a4 + 40);
  *(unsigned char *)(a4 + 40) = v30;
  swift_bridgeObjectRetain();
  outlined consume of PommesPhoneCallStateManager.Status(v31, v32, v33);
  return a5(v24);
}

void PommesBridgeRequestProcessor.handleRequestContextMessage(_:)(void *a1)
{
  uint64_t v2 = direct field offset for PommesBridgeRequestProcessor.pommesRequestContext;
  if (*(void *)((char *)v1 + direct field offset for PommesBridgeRequestProcessor.pommesRequestContext))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
    v46 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v4))
    {
      unsigned int v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v5 = 0;
      _os_log_impl(&dword_1C8F83000, v46, v4, "Got RequestContextMessage when we already have RequestContextData in scope. This may be due to a temporary transition period where RequestContext is being sent twice for compatibility. Ignoring this message.", v5, 2u);
      MEMORY[0x1CB77E470](v5, -1, -1);
    }
  }
  else
  {
    uint64_t v6 = v1;
    id v7 = a1;
    uint64_t v8 = MessageBase.assistantId.getter();
    uint64_t v44 = v9;
    uint64_t v45 = v8;
    uint64_t v10 = type metadata accessor for UUID();
    v46 = &v34;
    MEMORY[0x1F4188790](v10 - 8);
    uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v13 = v7;
    SessionMessageBase.sessionId.getter();

    id v14 = v13;
    uint64_t v15 = RequestMessageBase.requestId.getter();
    uint64_t v42 = v16;
    uint64_t v43 = v15;

    uint64_t v17 = RequestContextMessage.audioSource.getter();
    uint64_t v40 = v18;
    uint64_t v41 = v17;
    uint64_t v19 = RequestContextMessage.audioDestination.getter();
    uint64_t v38 = v20;
    uint64_t v39 = v19;
    uint64_t v21 = RequestContextMessage.responseMode.getter();
    uint64_t v36 = v22;
    uint64_t v37 = v21;
    int v35 = RequestContextMessage.isEyesFree.getter();
    char v23 = RequestContextMessage.isVoiceTriggerEnabled.getter();
    char v24 = RequestContextMessage.isTextToSpeechEnabled.getter();
    char v25 = RequestContextMessage.isTriggerlessFollowup.getter();
    uint64_t v26 = RequestContextMessage.bargeInModes.getter();
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    uint64_t v34 = (uint64_t)&v34;
    MEMORY[0x1F4188790](v27 - 8);
    uint64_t v29 = (char *)&v34 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
    RequestContextMessage.approximatePreviousTTSInterval.getter();
    uint64_t v30 = RequestContextMessage.deviceRestrictions.getter();
    type metadata accessor for PommesRequestContext();
    swift_allocObject();
    uint64_t v31 = PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(v45, v44, (uint64_t)v12, v43, v42, v41, v40, v39, v38, v37, v36, v35 & 1, v23 & 1, v24 & 1, 0, v25 & 1, v26, (uint64_t)v29, v30);

    *(void *)((char *)v6 + v2) = v31;
    swift_retain();
    uint64_t v32 = swift_release();
    uint64_t v33 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v6 + 120))(v32);
    specialized Sequence.forEach(_:)(v33, (void (*)(char *, uint64_t))partial apply for closure #1 in PommesBridgeRequestProcessor.setRequestContextAndBeginSearchIfReady(_:));
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for PommesRequestContext()
{
  uint64_t result = type metadata singleton initialization cache for PommesRequestContext;
  if (!type metadata singleton initialization cache for PommesRequestContext) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v24 = v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_sessionId;
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  uint64_t v25 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v24, a3, v25);
  uint64_t v26 = (void *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  *uint64_t v26 = a4;
  v26[1] = a5;
  uint64_t v27 = (void *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioSource);
  void *v27 = a6;
  v27[1] = a7;
  uint64_t v28 = (void *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioDestination);
  void *v28 = a8;
  v28[1] = a9;
  uint64_t v29 = (void *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_responseMode);
  void *v29 = a10;
  v29[1] = a11;
  *(unsigned char *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isEyesFree) = a12;
  *(unsigned char *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isVoiceTriggerEnabled) = a13;
  *(unsigned char *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTextToSpeechEnabled) = a14;
  *(unsigned char *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isPushOffRequest) = 0;
  *(unsigned char *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTriggerlessFollowup) = a15;
  *(void *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_bargeInModes) = a16;
  outlined init with take of DateInterval?(a17, v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_approximatePreviousTTSInterval);
  *(void *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_deviceRestrictions) = a18;
  return v18;
}

uint64_t outlined init with take of DateInterval?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PommesBridgeRequestProcessor.handleTextBasedResultCandidateMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v72 = (uint64_t)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PommesCandidateId();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v79 = v6;
  uint64_t v80 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  v77 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)((char *)&v65 - v10);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v12 - 8);
  v74 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UserID();
  MEMORY[0x1F4188790](v14 - 8);
  v71 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v75 = *(void *)(v16 - 8);
  uint64_t v76 = v16;
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v65 - v20;
  uint64_t v22 = type metadata accessor for InsightRequestSummaryLogger();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  v70 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  id v27 = a1;
  uint64_t v73 = v26;
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  v78 = v19;
  if (v30)
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    v69 = v11;
    v66 = (void *)v32;
    v68 = v21;
    *(_DWORD *)uint64_t v31 = 138412290;
    v82[0] = (uint64_t)v27;
    id v33 = v27;
    uint64_t v67 = v23;
    id v34 = v33;
    uint64_t v21 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    int v35 = v66;
    void *v66 = v27;

    uint64_t v23 = v67;
    _os_log_impl(&dword_1C8F83000, v28, v29, "PommesBridge handling message: %@", v31, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v11 = v69;
    MEMORY[0x1CB77E470](v35, -1, -1);
    MEMORY[0x1CB77E470](v31, -1, -1);
  }
  else
  {
  }
  if (one-time initialization token for insightRequestSummaryLogger != -1) {
    swift_once();
  }
  uint64_t v36 = __swift_project_value_buffer(v22, (uint64_t)static Logger.insightRequestSummaryLogger);
  uint64_t v37 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v70, v36, v22);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v2;
  *(void *)(v38 + 24) = v27;
  id v39 = v27;
  swift_retain();
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v37, v22);
  uint64_t v40 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v42 = v41;
  uint64_t v43 = (uint64_t)v71;
  UserIdAwareResultCandidateMessageBase.userId.getter();
  uint64_t v44 = TextBasedResultCandidateMessage.utterance.getter();
  uint64_t v46 = v45;
  uint64_t v47 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v48 = (uint64_t)v74;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v74, 1, 1, v47);
  PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)(v40, v42, v43, 0, v44, v46, 0, 0, (uint64_t)v21, 0, 0, 0, MEMORY[0x1E4FBC860], v48);
  *uint64_t v11 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v11[1] = v49;
  uint64_t v50 = v79;
  uint64_t v51 = v80;
  (*(void (**)(uint64_t *, void, uint64_t))(v80 + 104))(v11, *MEMORY[0x1E4F9FE50], v79);
  uint64_t v52 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t *, uint64_t))(v51 + 16))(v77, v11, v50);
  uint64_t v53 = v72;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v21, v72, type metadata accessor for PommesBridgeResultCandidateState);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v75 + 56))(v53, 0, 1, v76);
  v54 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v2
                                                                                     + 136))(v82);
  specialized Dictionary.subscript.setter(v53, v52);
  v54(v82, 0);
  uint64_t v55 = (uint64_t)v78;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v21, (uint64_t)v78, type metadata accessor for PommesBridgeResultCandidateState);
  v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc();
    v59 = v21;
    uint64_t v60 = swift_slowAlloc();
    v82[0] = v60;
    *(_DWORD *)v58 = 136315138;
    uint64_t v61 = PommesBridgeResultCandidateState.description.getter();
    uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NLXResultCandidate(v55, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C8F83000, v56, v57, "Created %s", v58, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v60, -1, -1);
    MEMORY[0x1CB77E470](v58, -1, -1);

    (*(void (**)(uint64_t *, uint64_t))(v80 + 8))(v11, v79);
    uint64_t v63 = (uint64_t)v59;
  }
  else
  {

    outlined destroy of NLXResultCandidate(v55, type metadata accessor for PommesBridgeResultCandidateState);
    (*(void (**)(uint64_t *, uint64_t))(v80 + 8))(v11, v79);
    uint64_t v63 = (uint64_t)v21;
  }
  return outlined destroy of NLXResultCandidate(v63, type metadata accessor for PommesBridgeResultCandidateState);
}

uint64_t type metadata accessor for NLXResultCandidate()
{
  uint64_t result = type metadata singleton initialization cache for NLXResultCandidate;
  if (!type metadata singleton initialization cache for NLXResultCandidate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for PommesBridgeResultCandidateState(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, type metadata singleton initialization cache for PommesBridgeResultCandidateState);
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.handleTextBasedResultCandidateMessage(_:)()
{
  return implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24), 0xD000000000000024, 0x80000001C919BF50, MEMORY[0x1E4FA21A0]);
}

uint64_t implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v40 = a2;
  uint64_t v41 = a5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  uint64_t v7 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InsightRequestSummaryKey, String))
             - 8);
  uint64_t v8 = *(void *)(*(void *)v7 + 72);
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v7 + 80);
  uint64_t v10 = swift_allocObject();
  uint64_t v39 = v10;
  *(_OWORD *)(v10 + 16) = xmmword_1C9198780;
  unint64_t v11 = v10 + v9;
  unint64_t v12 = v10 + v9 + v7[14];
  static InsightRequestSummaryKey.bridgeName.getter();
  strcpy((char *)v12, "PommesBridge");
  *(unsigned char *)(v12 + 13) = 0;
  *(_WORD *)(v12 + 14) = -5120;
  uint64_t v13 = (void *)(v11 + v8 + v7[14]);
  static InsightRequestSummaryKey.messageDescription.getter();
  void *v13 = a3;
  v13[1] = a4;
  uint64_t v14 = (void *)(v11 + 2 * v8 + v7[14]);
  static InsightRequestSummaryKey.assistantId.getter();
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = RequestProcessorBase.assistantId.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  String.append(_:)(v17);
  *uint64_t v14 = 0;
  v14[1] = 0xE000000000000000;
  uint64_t v18 = (void *)(v11 + 3 * v8 + v7[14]);
  static InsightRequestSummaryKey.sessionId.getter();
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  v19._uint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  String.append(_:)(v19);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestProcessorBase.sessionId.getter();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BC10]);
  v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  String.append(_:)(v25);
  unint64_t v26 = v43;
  *uint64_t v18 = v42;
  v18[1] = v26;
  id v27 = (void *)(v11 + 4 * v8 + v7[14]);
  static InsightRequestSummaryKey.requestId.getter();
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  v28._uint64_t countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = RequestProcessorBase.requestId.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  String.append(_:)(v30);
  unint64_t v31 = v43;
  void *v27 = v42;
  v27[1] = v31;
  uint64_t v32 = (void *)(v11 + 5 * v8 + v7[14]);
  static InsightRequestSummaryKey.resultCandidateId.getter();
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  v33._uint64_t countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = v41();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  String.append(_:)(v35);
  unint64_t v36 = v43;
  *uint64_t v32 = v42;
  v32[1] = v36;
  return v39;
}

uint64_t lazy protocol witness table accessor for type UserID and conformance UserID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t outlined assign with take of MediaUserStateCenter?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of Siri_Nlu_External_DelegatedUserDialogAct?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of NLXResultCandidate(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s21SiriInformationSearch18NLXResultCandidateVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for PommesBridgeResultCandidateState.ParseState(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesBridgeResultCandidateState.ParseState);
}

uint64_t outlined init with copy of PommesBridgeResultCandidateState.ParseState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *initializeWithCopy for PommesBridgeResultCandidateState(void *a1, uint64_t a2, int *a3)
{
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    Swift::String v16 = *(void **)a2;
    uint64_t v17 = *(void *)(a2 + 8);
    *a1 = *(void *)a2;
    a1[1] = v17;
    id v18 = v16;
    swift_bridgeObjectRetain();
    uint64_t v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                 + 64);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (const void *)(a2 + v19);
    uint64_t v22 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      Swift::String v24 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_15:
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(v24);
      memcpy(v20, v21, *(void *)(*(void *)(v42 - 8) + 64));
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *a1 = *(void *)a2;
    a1[1] = v7;
    uint64_t v8 = *(void *)(a2 + 24);
    a1[2] = *(void *)(a2 + 16);
    a1[3] = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    uint64_t v10 = v9[16];
    unint64_t v11 = (char *)a1 + v10;
    unint64_t v12 = (const void *)(a2 + v10);
    uint64_t v13 = type metadata accessor for TCUMappedNLResponse();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *((unsigned char *)a1 + v9[20]) = *(unsigned char *)(a2 + v9[20]);
    uint64_t v35 = v9[24];
    unint64_t v36 = (char *)a1 + v35;
    uint64_t v37 = (const void *)(a2 + v35);
    uint64_t v38 = type metadata accessor for SiriUserInput();
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    uint64_t v41 = v9[28];
    uint64_t v20 = (char *)a1 + v41;
    uint64_t v21 = (const void *)(a2 + v41);
    uint64_t v22 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
    uint64_t v23 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      Swift::String v24 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
      goto LABEL_15;
    }
LABEL_16:
    (*(void (**)(char *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    goto LABEL_19;
  }
  uint64_t v25 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v25;
  swift_bridgeObjectRetain();
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
  uint64_t v26 = *(int *)(v73 + 48);
  id v27 = (char *)a1 + v26;
  uint64_t v28 = a2 + v26;
  *(void *)((char *)a1 + v26) = *(void *)(a2 + v26);
  uint64_t v71 = type metadata accessor for NLXResultCandidate();
  uint64_t v72 = v27;
  uint64_t v29 = *(int *)(v71 + 20);
  __dst = &v27[v29];
  Swift::String v30 = (const void *)(v28 + v29);
  uint64_t v31 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v32 = *(void *)(v31 - 8);
  Swift::String v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v32 + 48);
  swift_bridgeObjectRetain();
  if (v33(v30, 1, v31))
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(__dst, v30, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v32 + 16))(__dst, v30, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
  }
  uint64_t v43 = *(int *)(v71 + 24);
  uint64_t v44 = &v72[v43];
  uint64_t v45 = (void *)(v28 + v43);
  uint64_t v46 = v45[1];
  *(void *)uint64_t v44 = *v45;
  *((void *)v44 + 1) = v46;
  *((unsigned char *)a1 + *(int *)(v73 + 64)) = *(unsigned char *)(a2 + *(int *)(v73 + 64));
  swift_bridgeObjectRetain();
LABEL_19:
  swift_storeEnumTagMultiPayload();
  uint64_t v47 = a3[5];
  uint64_t v48 = (char *)a1 + v47;
  uint64_t v49 = a2 + v47;
  uint64_t v50 = type metadata accessor for UserID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
  uint64_t v51 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v52 = *(void **)(a2 + v51);
  *(void *)((char *)a1 + v51) = v52;
  uint64_t v53 = a3[8];
  uint64_t v54 = a3[9];
  uint64_t v55 = (void *)((char *)a1 + v53);
  v56 = (void *)(a2 + v53);
  uint64_t v57 = v56[1];
  *uint64_t v55 = *v56;
  v55[1] = v57;
  *((unsigned char *)a1 + v54) = *(unsigned char *)(a2 + v54);
  uint64_t v58 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *((unsigned char *)a1 + v58) = *(unsigned char *)(a2 + v58);
  uint64_t v59 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v60 = a3[14];
  uint64_t v61 = (char *)a1 + v60;
  unint64_t v62 = (const void *)(a2 + v60);
  *((unsigned char *)a1 + v59) = *(unsigned char *)(a2 + v59);
  uint64_t v63 = type metadata accessor for PommesSearchEagerInfo(0);
  uint64_t v64 = *(void *)(v63 - 8);
  uint64_t v65 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v64 + 48);
  id v66 = v52;
  swift_bridgeObjectRetain();
  if (v65(v62, 1, v63))
  {
    uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
    memcpy(v61, v62, *(void *)(*(void *)(v67 - 8) + 64));
  }
  else
  {
    uint64_t v68 = type metadata accessor for PommesSearchReason();
    (*(void (**)(char *, const void *, uint64_t))(*(void *)(v68 - 8) + 16))(v61, v62, v68);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
  }
  return a1;
}

uint64_t storeEnumTagSinglePayload for PommesBridgeResultCandidateState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C90B69C0);
}

uint64_t (*PommesBridgeRequestProcessor.pommesStateHolder.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PommesBridgeResultCandidateState(0);
  MEMORY[0x1F4188790](v9);
  unint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  }
  else
  {
    outlined init with take of NLXResultCandidate(a1, (uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for PommesCandidateId();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t getEnumTagSinglePayload for PommesBridgeResultCandidateState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C90B6838);
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of PommesBridgeResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesBridgeResultCandidateState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PommesBridgeResultCandidateState.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PommesCandidateId();
  uint64_t v71 = *(void *)(v2 - 8);
  uint64_t v72 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v71 - v12;
  uint64_t v14 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(v0, (uint64_t)v19, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      uint64_t v22 = (uint64_t)&v19[v21[24]];
      uint64_t v23 = (uint64_t)&v19[v21[28]];
      outlined init with take of PommesSearchReason?((uint64_t)&v19[v21[16]], (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      strcpy((char *)v73, "response: ");
      BYTE3(v73[1]) = 0;
      HIDWORD(v73[1]) = -369098752;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v13, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v24._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      uint64_t v25 = v73[0];
      uint64_t v26 = (void *)v73[1];
      outlined destroy of MediaUserStateCenter?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined destroy of MediaUserStateCenter?(v23, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      outlined destroy of MediaUserStateCenter?(v22, &demangling cache variable for type metadata for SiriUserInput?);
    }
    else
    {

      uint64_t v30 = *((void *)v19 + 1);
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
      outlined init with take of PommesSearchReason?((uint64_t)&v19[*(int *)(v31 + 64)], (uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      v73[0] = 0;
      v73[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      strcpy((char *)v73, "userParses: (");
      HIWORD(v73[1]) = -4864;
      uint64_t v32 = type metadata accessor for Siri_Nlu_External_UserParse();
      uint64_t v33 = MEMORY[0x1CB77CDF0](v30, v32);
      uint64_t v35 = v34;
      swift_bridgeObjectRelease();
      v36._uint64_t countAndFlagsBits = v33;
      v36._object = v35;
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      v37._uint64_t countAndFlagsBits = 0xD000000000000013;
      v37._object = (void *)0x80000001C91A04A0;
      String.append(_:)(v37);
      v38._uint64_t countAndFlagsBits = Optional.debugDescription.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._uint64_t countAndFlagsBits = 41;
      v39._object = (void *)0xE100000000000000;
      String.append(_:)(v39);
      uint64_t v25 = v73[0];
      uint64_t v26 = (void *)v73[1];
      outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    outlined init with take of NLXResultCandidate((uint64_t)&v19[*(int *)(v27 + 48)], (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    v73[0] = 0;
    v73[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v73, "userParses: (");
    HIWORD(v73[1]) = -4864;
    v28._uint64_t countAndFlagsBits = NLXResultCandidate.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._uint64_t countAndFlagsBits = 41;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    uint64_t v25 = v73[0];
    uint64_t v26 = (void *)v73[1];
    outlined destroy of NLXResultCandidate((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  }
  v73[0] = 0;
  v73[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(103);
  v40._uint64_t countAndFlagsBits = 0xD000000000000015;
  v40._object = (void *)0x80000001C91A04C0;
  String.append(_:)(v40);
  PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v4);
  uint64_t v41 = PommesCandidateId.description.getter();
  uint64_t v43 = v42;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v4, v72);
  v44._uint64_t countAndFlagsBits = v41;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  v45._object = (void *)0x80000001C91A04E0;
  v45._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v45);
  uint64_t v46 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v47 = *(void **)(v0 + v46[7]);
  if (v47)
  {
    id v48 = objc_msgSend(v47, sel_description);
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v51 = v50;
  }
  else
  {
    uint64_t v49 = 1701736302;
    uint64_t v51 = (void *)0xE400000000000000;
  }
  v52._uint64_t countAndFlagsBits = v49;
  v52._object = v51;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._uint64_t countAndFlagsBits = 0x617265747475202CLL;
  v53._object = (void *)0xEE0022203A65636ELL;
  String.append(_:)(v53);
  uint64_t v54 = (uint64_t *)(v1 + v46[8]);
  uint64_t v55 = *v54;
  v56 = (void *)v54[1];
  swift_bridgeObjectRetain();
  v57._uint64_t countAndFlagsBits = v55;
  v57._object = v56;
  String.append(_:)(v57);
  swift_bridgeObjectRelease();
  v58._uint64_t countAndFlagsBits = 0x73696E6966202C22;
  v58._object = (void *)0xED0000203A646568;
  String.append(_:)(v58);
  if (*(unsigned char *)(v1 + v46[10])) {
    uint64_t v59 = 1702195828;
  }
  else {
    uint64_t v59 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + v46[10])) {
    unint64_t v60 = 0xE400000000000000;
  }
  else {
    unint64_t v60 = 0xE500000000000000;
  }
  unint64_t v61 = v60;
  String.append(_:)(*(Swift::String *)&v59);
  swift_bridgeObjectRelease();
  v62._uint64_t countAndFlagsBits = 0x7463656C6573202CLL;
  v62._object = (void *)0xEC000000203A6465;
  String.append(_:)(v62);
  if (*(unsigned char *)(v1 + v46[11])) {
    uint64_t v63 = 1702195828;
  }
  else {
    uint64_t v63 = 0x65736C6166;
  }
  if (*(unsigned char *)(v1 + v46[11])) {
    unint64_t v64 = 0xE400000000000000;
  }
  else {
    unint64_t v64 = 0xE500000000000000;
  }
  unint64_t v65 = v64;
  String.append(_:)(*(Swift::String *)&v63);
  swift_bridgeObjectRelease();
  v66._uint64_t countAndFlagsBits = 8236;
  v66._object = (void *)0xE200000000000000;
  String.append(_:)(v66);
  v67._uint64_t countAndFlagsBits = v25;
  v67._object = v26;
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  v68._uint64_t countAndFlagsBits = 0x644972657375202CLL;
  v68._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v68);
  type metadata accessor for UserID();
  lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
  v69._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v69);
  swift_bridgeObjectRelease();
  return v73[0];
}

void *initializeWithCopy for PommesBridgeResultCandidateState.ParseState(void *a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v14 = *(void **)a2;
    uint64_t v15 = *(void *)(a2 + 8);
    *a1 = *(void *)a2;
    a1[1] = v15;
    id v16 = v14;
    swift_bridgeObjectRetain();
    uint64_t v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                 + 64);
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (const void *)(a2 + v17);
    uint64_t v20 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_15:
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(v22);
      memcpy(v18, v19, *(void *)(*(void *)(v41 - 8) + 64));
      goto LABEL_19;
    }
LABEL_16:
    (*(void (**)(char *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    goto LABEL_19;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *a1 = *(void *)a2;
    a1[1] = v5;
    uint64_t v6 = *(void *)(a2 + 24);
    a1[2] = *(void *)(a2 + 16);
    a1[3] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    uint64_t v8 = v7[16];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (const void *)(a2 + v8);
    uint64_t v11 = type metadata accessor for TCUMappedNLResponse();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *((unsigned char *)a1 + v7[20]) = *(unsigned char *)(a2 + v7[20]);
    uint64_t v34 = v7[24];
    uint64_t v35 = (char *)a1 + v34;
    Swift::String v36 = (const void *)(a2 + v34);
    uint64_t v37 = type metadata accessor for SiriUserInput();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    uint64_t v40 = v7[28];
    uint64_t v18 = (char *)a1 + v40;
    uint64_t v19 = (const void *)(a2 + v40);
    uint64_t v20 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  uint64_t v23 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v23;
  swift_bridgeObjectRetain();
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
  uint64_t v24 = *(int *)(v49 + 48);
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = a2 + v24;
  *(void *)((char *)a1 + v24) = *(void *)(a2 + v24);
  uint64_t v27 = type metadata accessor for NLXResultCandidate();
  uint64_t v28 = *(int *)(v27 + 20);
  __dst = &v25[v28];
  uint64_t v48 = v27;
  Swift::String v29 = (const void *)(v26 + v28);
  uint64_t v30 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48);
  swift_bridgeObjectRetain();
  if (v32(v29, 1, v30))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(__dst, v29, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v31 + 16))(__dst, v29, v30);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
  }
  uint64_t v42 = *(int *)(v48 + 24);
  uint64_t v43 = &v25[v42];
  Swift::String v44 = (void *)(v26 + v42);
  uint64_t v45 = v44[1];
  *(void *)uint64_t v43 = *v44;
  *((void *)v43 + 1) = v45;
  *((unsigned char *)a1 + *(int *)(v49 + 64)) = *(unsigned char *)(a2 + *(int *)(v49 + 64));
  swift_bridgeObjectRetain();
LABEL_19:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t NLXResultCandidate.description.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(67);
  v13[0] = *(void *)(*(void *)v0 + 16);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000001C91A1B70;
  v5._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v5);
  uint64_t v6 = type metadata accessor for NLXResultCandidate();
  outlined init with copy of Siri_Nlu_External_DelegatedUserDialogAct?(v0 + *(int *)(v6 + 20), (uint64_t)v3);
  v7._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0xD000000000000022;
  v8._object = (void *)0x80000001C91A1B90;
  String.append(_:)(v8);
  uint64_t v9 = (void *)(v0 + *(int *)(v6 + 24));
  uint64_t v10 = v9[1];
  v13[0] = *v9;
  v13[1] = v10;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v11._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t destroy for NLXResultCandidate(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

uint64_t PommesCandidateId.description.getter()
{
  uint64_t v1 = type metadata accessor for PommesCandidateId();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  int v5 = (*(uint64_t (**)(uint64_t *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == *MEMORY[0x1E4F9FE50])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    uint64_t v6 = *v4;
    uint64_t v7 = v4[1];
    uint64_t v8 = 0x203A64496372;
    unint64_t v9 = 0xE600000000000000;
LABEL_7:
    uint64_t v23 = v8;
    unint64_t v24 = v9;
    uint64_t v17 = v7;
    String.append(_:)(*(Swift::String *)&v6);
    goto LABEL_8;
  }
  if (v5 == *MEMORY[0x1E4F9FE58])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    uint64_t v10 = *v4;
    Swift::String v11 = (void *)v4[1];
    uint64_t v13 = v4[2];
    uint64_t v12 = (void *)v4[3];
    uint64_t v23 = 0;
    unint64_t v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    uint64_t v23 = 0x203A6449707274;
    unint64_t v24 = 0xE700000000000000;
    v14._uint64_t countAndFlagsBits = v10;
    v14._object = v11;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 0x203A644975637420;
    v15._object = (void *)0xE800000000000000;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = v13;
    v16._object = v12;
    String.append(_:)(v16);
LABEL_8:
    swift_bridgeObjectRelease();
    return v23;
  }
  if (v5 == *MEMORY[0x1E4F9FE48])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    uint64_t v6 = *v4;
    uint64_t v7 = v4[1];
    uint64_t v8 = 0x203A6449666572;
    unint64_t v9 = 0xE700000000000000;
    goto LABEL_7;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_1C8F83000, v20, v21, "Unexpected pommesCandidateId. Returning empty string for description.", v22, 2u);
    MEMORY[0x1CB77E470](v22, -1, -1);
  }

  (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(v4, v1);
  return 0;
}

uint64_t destroy for PommesBridgeResultCandidateState(id *a1, int *a2)
{
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {

    swift_bridgeObjectRelease();
    unint64_t v9 = (char *)a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                + 64);
    uint64_t v10 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (!EnumCaseMultiPayload)
    {
      swift_bridgeObjectRelease();
      int v5 = (char *)a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool))
                  + 48);
      swift_bridgeObjectRelease();
      uint64_t v6 = &v5[*(int *)(type metadata accessor for NLXResultCandidate() + 20)];
      uint64_t v7 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v8 = *(void *)(v7 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
      }
      swift_bridgeObjectRelease();
    }
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  uint64_t v20 = (char *)a1 + v19[16];
  uint64_t v21 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v22 = *(void *)(v21 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21)) {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
  }
  uint64_t v23 = (char *)a1 + v19[24];
  uint64_t v24 = type metadata accessor for SiriUserInput();
  uint64_t v25 = *(void *)(v24 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24)) {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
  }
  unint64_t v9 = (char *)a1 + v19[28];
  uint64_t v10 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
LABEL_8:
  }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
LABEL_9:
  uint64_t v12 = (char *)a1 + a2[5];
  uint64_t v13 = type metadata accessor for UserID();
  (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);

  swift_bridgeObjectRelease();
  Swift::String v14 = (char *)a1 + a2[14];
  uint64_t v15 = type metadata accessor for PommesSearchEagerInfo(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15);
  if (!result)
  {
    uint64_t v17 = type metadata accessor for PommesSearchReason();
    uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8);
    return v18(v14, v17);
  }
  return result;
}

Swift::Void __swiftcall PommesLocationManager.locationManagerDidChangeAuthorization(_:)(CLLocationManager a1)
{
  void (*v15)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(void *@<X8>));
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  int *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _DWORD *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  _DWORD *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _DWORD *v58;
  uint64_t v59;
  void v60[2];
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  Class v67;
  char *v68;
  char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  Class isa = a1.super.isa;
  uint64_t v2 = type metadata accessor for LocationStatus(0);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v63 = (char *)v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  Swift::String v68 = (char *)v60 - v6;
  MEMORY[0x1F4188790](v5);
  Swift::String v66 = (char *)v60 - v7;
  Swift::String v62 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v62);
  Swift::String v69 = (char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [(objc_class *)isa authorizationStatus];
  v70 = (int)v9;
  if (one-time initialization token for shared != -1) {
    id v9 = (id)swift_once();
  }
  uint64_t v10 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v9);
  Swift::String v67 = isa;
  Swift::String v58 = isa;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  Swift::String v14 = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v15 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(void *@<X8>)))(*(void *)v10 + 200);
  type metadata accessor for CLAccuracyAuthorization(0);
  Swift::String v58 = &v57;
  uint64_t v59 = v16;
  LOBYTE(v57) = 2;
  v15(&v73, 0xD000000000000037, 0x80000001C91A41A0, 0, v14, "SiriInformationSearch/PommesLocationManager.swift", 49, 2, 379, "locationManagerDidChangeAuthorization(_:)", 41, v57, partial apply for closure #1 in PommesLocationManager.locationManagerDidChangeAuthorization(_:));
  uint64_t v17 = *(void (**)(char *, uint64_t))(v12 + 8);
  unint64_t v64 = v12 + 8;
  unint64_t v65 = v11;
  v17(v14, v11);
  uint64_t v18 = v73;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  uint64_t v21 = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.debug.getter();
  uint64_t v23 = os_log_type_enabled(v21, v22);
  uint64_t v24 = v70;
  if (v23)
  {
    uint64_t v25 = swift_slowAlloc();
    v60[1] = v20;
    uint64_t v26 = v25;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v73 = v27;
    *(_DWORD *)uint64_t v26 = 136315394;
    unint64_t v61 = v17;
    LODWORD(v72) = v24;
    type metadata accessor for CLAuthorizationStatus(0);
    uint64_t v28 = String.init<A>(describing:)();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    uint64_t v72 = v18;
    uint64_t v30 = String.init<A>(describing:)();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v73);
    uint64_t v24 = v70;
    uint64_t v17 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v21, v22, "Auth Change: %s, %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v27, -1, -1);
    MEMORY[0x1CB77E470](v26, -1, -1);
  }

  if ((v24 - 3) > 1)
  {
    MEMORY[0x1F4188790](v32);
    Swift::String v58 = v49;
    uint64_t v51 = v50;
    Swift::String v52 = (uint64_t)v63;
    OS_dispatch_queue.sync<A>(execute:)();

    if (swift_getEnumCaseMultiPayload() == 1)
    {
      Swift::String v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date));
      v17((char *)(v52 + *(int *)(v53 + 48)), v65);
      if (one-time initialization token for loc != -1) {
        swift_once();
      }
      uint64_t v54 = type metadata accessor for OSSignposter();
      __swift_project_value_buffer(v54, (uint64_t)static Signposter.loc);
      OSSignposter.end(name:context:message:)("locationManager.startup", 23, 2, v71, 0x726F687475616E75, 0xEC00000064657A69);
    }
    else
    {
      outlined destroy of LocationStatus(v52, type metadata accessor for LocationStatus);
    }
    v56 = (uint64_t)v68;
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter(v56);
  }
  else
  {
    uint64_t v33 = v69;
    Date.init()();
    uint64_t v34 = (int *)v62;
    uint64_t v35 = &v33[*(int *)(v62 + 20)];
    *(void *)uint64_t v35 = "SiriInformationSearch/PommesLocationManager.swift";
    *((void *)v35 + 1) = 49;
    v35[16] = 2;
    *(void *)&v33[v34[6]] = 383;
    Swift::String v36 = &v33[v34[7]];
    *(void *)Swift::String v36 = "locationManagerDidChangeAuthorization(_:)";
    *((void *)v36 + 1) = 41;
    v36[16] = 2;
    uint64_t v37 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000003CLL);
    uint64_t v38 = (uint64_t *)&v33[v34[8]];
    unsigned char *v38 = v37;
    v38[1] = v39;
    MEMORY[0x1F4188790](v37);
    Swift::String v58 = v40;
    uint64_t v42 = v41;
    uint64_t v43 = (uint64_t)v66;
    OS_dispatch_queue.sync<A>(execute:)();

    if (swift_getEnumCaseMultiPayload() == 1)
    {
      Swift::String v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date));
      v17((char *)(v43 + *(int *)(v44 + 48)), v65);
      uint64_t v45 = Logger.logObject.getter();
      uint64_t v46 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl(&dword_1C8F83000, v45, v46, "Received Auth Change while in pending state. Setting state to unknown so we can re-request our location", v47, 2u);
        MEMORY[0x1CB77E470](v47, -1, -1);
      }

      uint64_t v48 = (uint64_t)v68;
      swift_storeEnumTagMultiPayload();
      PommesLocationManager.status.setter(v48);
    }
    else
    {
      outlined destroy of LocationStatus(v43, type metadata accessor for LocationStatus);
    }
    PommesLocationManager.requestLocation(with:accuracyAuthorization:didAuthorizationChange:)(v67, v18, 1);
    uint64_t v55 = (uint64_t)v69;
    (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v69, 0);
    outlined destroy of LocationStatus(v55, type metadata accessor for PerformanceUtil.Ticket);
  }
}

id partial apply for closure #1 in PommesLocationManager.locationManagerDidChangeAuthorization(_:)@<X0>(void *a1@<X8>)
{
  return partial apply for closure #1 in PommesLocationManager.locationManager(_:didUpdateLocations:)(a1);
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
}

Swift::Void __swiftcall PommesLocationManager.locationManager(_:didUpdateLocations:)(CLLocationManager _, Swift::OpaquePointer didUpdateLocations)
{
  void (*v53)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(void *@<X8>));
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  int v71;
  _DWORD *v72;
  uint64_t v73;
  uint8_t *v74;
  objc_class *v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84[2];

  uint64_t v3 = v2;
  uint64_t internal = (uint64_t)_._internal;
  Class isa = _.super.isa;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LocationStatus(0);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v79 = (char *)&v74 - v14;
  MEMORY[0x1F4188790](v13);
  Swift::String v16 = (char *)&v74 - v15;
  v78 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue;
  uint64_t v17 = *(void **)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  v82 = v2;
  id v18 = v17;
  uint64_t v19 = 0;
  OS_dispatch_queue.sync<A>(execute:)();

  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of LocationStatus((uint64_t)v16, type metadata accessor for LocationStatus);
    goto LABEL_5;
  }
  uint64_t v20 = &v16[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                    + 48)];
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  if (one-time initialization token for loc != -1) {
    goto LABEL_34;
  }
  while (1)
  {
    uint64_t v22 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v22, (uint64_t)static Signposter.loc);
    OSSignposter.end(name:context:message:)("locationManager.startup", 23, 2, (uint64_t)v3, 0, 0xE000000000000000);
LABEL_5:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v77 = v24;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v80 = v8;
    uint64_t v81 = v9;
    if (v27)
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v76 = v3;
      Swift::String v29 = (uint8_t *)v28;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v75 = isa;
      uint64_t v31 = v30;
      v84[0] = v30;
      *(_DWORD *)Swift::String v29 = 136315138;
      v74 = v29 + 4;
      uint64_t v32 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for CLLocation);
      uint64_t v33 = swift_bridgeObjectRetain();
      uint64_t v8 = (char *)MEMORY[0x1CB77CDC0](v33, v32);
      uint64_t v34 = v19;
      uint64_t v35 = v12;
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v8, v37, v84);
      uint64_t v9 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v12 = v35;
      uint64_t v19 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v25, v26, "Location Update: %s", v29, 0xCu);
      swift_arrayDestroy();
      uint64_t v38 = v31;
      Class isa = v75;
      MEMORY[0x1CB77E470](v38, -1, -1);
      uint64_t v39 = v29;
      uint64_t v3 = v76;
      MEMORY[0x1CB77E470](v39, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    if ((unint64_t)internal >> 62) {
      break;
    }
    uint64_t v40 = *(void *)((internal & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v40) {
      goto LABEL_29;
    }
LABEL_12:
    if ((internal & 0xC000000000000001) != 0)
    {
      id v41 = (id)MEMORY[0x1CB77D510](0, internal);
LABEL_15:
      uint64_t v42 = v41;
      uint64_t v43 = swift_bridgeObjectRelease();
      MEMORY[0x1F4188790](v43);
      uint64_t v72 = v3;
      id v45 = v44;
      uint64_t v46 = v79;
      OS_dispatch_queue.sync<A>(execute:)();

      uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if ((EnumCaseMultiPayload - 2) < 4)
      {
LABEL_16:
        v78 = (uint64_t)v42;
        uint64_t v79 = v12;
        if (one-time initialization token for shared != -1) {
          uint64_t EnumCaseMultiPayload = swift_once();
        }
        uint64_t v48 = static PerformanceUtil.shared;
        MEMORY[0x1F4188790](EnumCaseMultiPayload);
        uint64_t v72 = isa;
        uint64_t v49 = type metadata accessor for Date();
        uint64_t v50 = *(void *)(v49 - 8);
        MEMORY[0x1F4188790](v49);
        Swift::String v52 = (char *)&v74 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
        Date.init()();
        Swift::String v53 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(void *@<X8>)))(*(void *)v48 + 200);
        type metadata accessor for CLAccuracyAuthorization(0);
        uint64_t v72 = &v71;
        uint64_t v73 = v54;
        LOBYTE(v71) = 2;
        v53(v84, 0xD000000000000033, 0x80000001C91A4250, 0, v52, "SiriInformationSearch/PommesLocationManager.swift", 49, 2, 418, "locationManager(_:didUpdateLocations:)", 38, v71, partial apply for closure #1 in PommesLocationManager.locationManager(_:didUpdateLocations:));
        (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v49);
        uint64_t v55 = v84[0];
        uint64_t v42 = (void *)v78;
        uint64_t v12 = v79;
        goto LABEL_19;
      }
      if (EnumCaseMultiPayload)
      {
        unint64_t v64 = v46[8];
        unint64_t v65 = &v46[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                          + 48)];
        if (v64)
        {
          Swift::String v66 = type metadata accessor for Date();
          uint64_t EnumCaseMultiPayload = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v66 - 8) + 8))(v65, v66);
          goto LABEL_16;
        }
        uint64_t v55 = *(void *)v46;
        Swift::String v67 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t))(*(void *)(v67 - 8) + 8))(v65, v67);
      }
      else
      {
        uint64_t v55 = *((void *)v46 + 1);
      }
LABEL_19:
      *(void *)uint64_t v12 = v42;
      *((void *)v12 + 1) = v55;
      v12[16] = 0;
      swift_storeEnumTagMultiPayload();
      v56 = v42;
      PommesLocationManager.status.setter((uint64_t)v12);
      Swift::String v57 = swift_allocObject();
      *(void *)(v57 + 16) = v3;
      *(void *)(v57 + 24) = v55;
      Swift::String v58 = v3;
      uint64_t v59 = (uint64_t)v80;
      static TaskPriority.userInitiated.getter();
      unint64_t v60 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v59, 0, 1, v60);
      unint64_t v61 = swift_allocObject();
      swift_unknownObjectWeakInit();
      Swift::String v62 = (void *)swift_allocObject();
      v62[2] = 0;
      v62[3] = 0;
      v62[4] = v61;
      v62[5] = v56;
      v62[6] = partial apply for closure #2 in PommesLocationManager.locationManager(_:didUpdateLocations:);
      v62[7] = v57;
      uint64_t v63 = v56;
      swift_retain();
      _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v59, (uint64_t)&closure #1 in PommesLocationManager.shiftedLocation(for:completion:)partial apply, (uint64_t)v62);
      swift_release();
      outlined destroy of MediaUserStateCenter?(v59, &demangling cache variable for type metadata for TaskPriority?);

      swift_release();
      return;
    }
    if (*(void *)((internal & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v41 = *(id *)(internal + 32);
      goto LABEL_15;
    }
    __break(1u);
LABEL_34:
    swift_once();
  }
  if (internal < 0) {
    uint64_t v8 = (char *)internal;
  }
  else {
    uint64_t v8 = (char *)(internal & 0xFFFFFFFFFFFFFF8);
  }
  swift_bridgeObjectRetain();
  if (_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_12;
  }
LABEL_29:
  swift_bridgeObjectRelease();
  Swift::String v68 = Logger.logObject.getter();
  Swift::String v69 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v68, v69))
  {
    v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_1C8F83000, v68, v69, "No locations", v70, 2u);
    MEMORY[0x1CB77E470](v70, -1, -1);
  }

  swift_storeEnumTagMultiPayload();
  PommesLocationManager.status.setter((uint64_t)v12);
}

uint64_t OSSignposter.end(name:context:message:)(const char *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int v39 = a3;
  uint64_t v43 = (char *)a1;
  uint64_t v9 = (const char *)type metadata accessor for OSSignpostError();
  uint64_t v41 = *((void *)v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v40 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OSSignpostID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  id v44 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v34 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v38 = a5;
  uint64_t v42 = v9;
  if (a4)
  {
    swift_unknownObjectRetain();
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:object:)();
  }
  else
  {
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
  }
  unint64_t v36 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v36(v17, v19, v11);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  swift_bridgeObjectRetain_n();
  uint64_t v20 = OSSignposter.logHandle.getter();
  uint64_t v21 = v44;
  OSSignpostIntervalState.signpostID.getter();
  int v37 = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_8;
  }
  os_log_t v34 = (os_log_t)v20;
  unint64_t v35 = a6;
  if ((v39 & 1) == 0)
  {
    uint64_t v23 = v42;
    uint64_t v24 = v40;
    uint64_t v20 = v41;
    if (!v43)
    {
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_8:
      swift_bridgeObjectRelease_n();

      uint64_t v25 = *(void (**)(char *, uint64_t))(v12 + 8);
      v25(v21, v11);
      v25(v19, v11);
      return swift_release();
    }
    goto LABEL_13;
  }
  uint64_t v23 = v42;
  uint64_t v24 = v40;
  uint64_t v20 = v41;
  if ((unint64_t)v43 >> 32)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v43 >> 11 == 27)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  if (v43 >> 16 > 0x10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v43 = &v47;
LABEL_13:
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  if ((*(unsigned int (**)(char *, const char *))(v20 + 88))(v24, v23) == *MEMORY[0x1E4FBD340])
  {
    char v26 = 0;
    char v27 = 0;
    uint64_t v42 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, const char *))(v20 + 8))(v24, v23);
    uint64_t v42 = "%s";
    char v27 = 2;
    char v26 = 1;
  }
  v36(v17, v44, v11);
  uint64_t v28 = swift_slowAlloc();
  uint64_t v29 = swift_slowAlloc();
  uint64_t v46 = v29;
  *(unsigned char *)uint64_t v28 = v27;
  *(unsigned char *)(v28 + 1) = v26;
  *(_WORD *)(v28 + 2) = 2080;
  unint64_t v30 = v35;
  swift_bridgeObjectRetain();
  uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v30, &v46);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  os_signpost_id_t v31 = OSSignpostID.rawValue.getter();
  os_log_t v32 = v34;
  _os_signpost_emit_with_name_impl(&dword_1C8F83000, v34, (os_signpost_type_t)v37, v31, v43, v42, (uint8_t *)v28, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1CB77E470](v29, -1, -1);
  MEMORY[0x1CB77E470](v28, -1, -1);

  uint64_t v33 = *(void (**)(char *, uint64_t))(v12 + 8);
  v33(v44, v11);
  v33(v19, v11);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v33)(v17, v11);
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  unint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AppData].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(textMatchScore: Float, itemTypeMatchScore: Float)>);
  unint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AppData].Iterator._Variant();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  unint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AppData].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AppData>);
  unint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AppData].Iterator._Variant();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, identifier: String)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MUXUserInfo>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PommesUsoTask>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(beginIndex: Int, parenOpen: Character)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UsoIdentifier]>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<KVFieldType>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, AppData)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Siri_Nlu_External_Span, RREntity)>, &demangling cache variable for type metadata for (Siri_Nlu_External_Span, RREntity));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent>, MEMORY[0x1E4F895C0], MEMORY[0x1E4F895C0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)>, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_SiriCommandBuilder>, MEMORY[0x1E4F886E8], MEMORY[0x1E4F886E8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>, MEMORY[0x1E4FA2CF0], MEMORY[0x1E4FA2CF0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_AsrTokenInformation>, MEMORY[0x1E4FA2958], MEMORY[0x1E4FA2958]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSlice>, MEMORY[0x1E4F88EF0], MEMORY[0x1E4F88EF0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>, MEMORY[0x1E4FA3DB8], MEMORY[0x1E4FA3DB8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AmpUserState>, MEMORY[0x1E4F88EE0], MEMORY[0x1E4F88EE0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ClientEntity>, MEMORY[0x1E4F88EC8], MEMORY[0x1E4F88EC8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AppInfo>, MEMORY[0x1E4F889A8], MEMORY[0x1E4F889A8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ClientComponent.OneOf_Component>, MEMORY[0x1E4F891C0], MEMORY[0x1E4F891C0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)>, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ContactAddress>, MEMORY[0x1E4F89130], MEMORY[0x1E4F89130]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x1F418BB78], MEMORY[0x1F418BC40]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PimsSuggestionMetadata>, MEMORY[0x1E4FA3D78], MEMORY[0x1E4FA3D78]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_LibrarySearchTerm>, MEMORY[0x1E4F89298], MEMORY[0x1E4F89298]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<PerformanceUtil.Measurement>, type metadata accessor for PerformanceUtil.Measurement, type metadata accessor for PerformanceUtil.Measurement);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_Restriction>, MEMORY[0x1E4F88E18], MEMORY[0x1E4F88E18]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_AsrHypothesis>, MEMORY[0x1E4FA2818], MEMORY[0x1E4FA2818]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserParse>, MEMORY[0x1E4FA2808], MEMORY[0x1E4FA2808]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>, MEMORY[0x1E4F89328], MEMORY[0x1E4F89328]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>, MEMORY[0x1E4FA2858], MEMORY[0x1E4FA2858]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SpanProperty>, MEMORY[0x1E4FA2C80], MEMORY[0x1E4FA2C80]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PommesRenderOptions.PromptType>, MEMORY[0x1E4F9FF20], MEMORY[0x1E4F9FF20]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)>, &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonAudio.RadioType>);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonAudio.Decade>);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t PommesBridgeRequestProcessor.handleNLResultCandidateMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v137 = type metadata accessor for PommesSearchReason();
  uint64_t v136 = *(void *)(v137 - 8);
  MEMORY[0x1F4188790](v137);
  v135 = (char *)v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1F4188790](v5 - 8);
  v134 = (char *)v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v7 - 8);
  v131 = (char *)v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for NLXResultCandidate();
  uint64_t v9 = MEMORY[0x1F4188790](v129);
  v130 = (void *)((char *)v127 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v132 = (uint64_t)v127 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v133 = (uint64_t)v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v127 - v15;
  uint64_t v144 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v17 = *(void *)(v144 - 8);
  MEMORY[0x1F4188790](v144);
  uint64_t v19 = (char *)v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v20 = (void (*)(char *, uint64_t, uint64_t, uint64_t))type metadata accessor for InsightRequestSummaryLogger();
  v140 = (void (**)(char *, uint64_t, void (*)(void, void, void, void)))*((void *)v20 - 1);
  v141 = v20;
  MEMORY[0x1F4188790](v20);
  v139 = (char *)v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for PommesCandidateId();
  uint64_t v146 = *(void *)(v22 - 8);
  uint64_t v147 = v22;
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v138 = (uint64_t)v127 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  v148 = (void *)((char *)v127 - v25);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
  id v28 = a1;
  uint64_t v145 = v27;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v142 = v17;
  v143 = v19;
  if (v31)
  {
    uint64_t v32 = swift_slowAlloc();
    v128 = v2;
    uint64_t v33 = (uint8_t *)v32;
    uint64_t v34 = swift_slowAlloc();
    v151[0] = v34;
    *(_DWORD *)uint64_t v33 = 136315138;
    v127[1] = v33 + 4;
    uint64_t v35 = NLResultCandidateMessageBase.userParses.getter();
    unint64_t v36 = v16;
    uint64_t v37 = specialized Sequence<>.summarizedDescription.getter(v35);
    unint64_t v39 = v38;
    swift_bridgeObjectRelease();
    uint64_t v40 = v37;
    uint64_t v16 = v36;
    uint64_t v150 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, v151);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v17 = v142;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v29, v30, "PommesBridgeRequestProcessor received messages: %s", v33, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v34, -1, -1);
    uint64_t v41 = v33;
    uint64_t v2 = v128;
    MEMORY[0x1CB77E470](v41, -1, -1);
  }
  else
  {
  }
  uint64_t v42 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v43 = v147;
  id v44 = v148;
  uint64_t *v148 = v42;
  v44[1] = v45;
  (*(void (**)(uint64_t *, void, uint64_t))(v146 + 104))(v44, *MEMORY[0x1E4F9FE50], v43);
  uint64_t v46 = *(void *)((char *)v2 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
  uint64_t v47 = RequestProcessorBase.requestId.getter();
  uint64_t v49 = v48;
  uint64_t v50 = RequestProcessorBase.rootLevelRequestId.getter();
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v46 + 128))(v44, v47, v49, v50, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for insightRequestSummaryLogger != -1) {
    swift_once();
  }
  Swift::String v52 = v141;
  uint64_t v53 = __swift_project_value_buffer((uint64_t)v141, (uint64_t)static Logger.insightRequestSummaryLogger);
  uint64_t v54 = v140;
  uint64_t v55 = v139;
  ((void (**)(char *, uint64_t, void (*)(char *, uint64_t, uint64_t, uint64_t)))v140)[2](v139, v53, v52);
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = v2;
  *(void *)(v56 + 24) = v28;
  id v57 = v28;
  swift_retain();
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  uint64_t v58 = ((uint64_t (*)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))v54[1])(v55, v52);
  uint64_t v59 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 120))(v58);
  if (*(void *)(v59 + 16))
  {
    unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v148);
    uint64_t v61 = v144;
    if (v62)
    {
      outlined init with copy of PommesBridgeResultCandidateState.ParseState(*(void *)(v59 + 56) + *(void *)(v17 + 72) * v60, (uint64_t)v16, type metadata accessor for PommesBridgeResultCandidateState);
      uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
      v63(v16, 0, 1, v61);
    }
    else
    {
      uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
      v63(v16, 1, 1, v144);
    }
  }
  else
  {
    uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    uint64_t v61 = v144;
    v63(v16, 1, 1, v144);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v61) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    swift_retain_n();
    unint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v64, v65))
    {
      Swift::String v66 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      v151[0] = v67;
      *(_DWORD *)Swift::String v66 = 136315138;
      uint64_t v68 = RequestProcessorBase.requestId.getter();
      uint64_t v150 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v64, v65, "Do not have prior state for this NLResultCandidateMessage for requestId: %s", v66, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v67, -1, -1);
      MEMORY[0x1CB77E470](v66, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v103 = RequestProcessorBase.requestId.getter();
    uint64_t v105 = v104;
    uint64_t v106 = RequestProcessorBase.rootLevelRequestId.getter();
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v46 + 144))(5, v148, v103, v105, v106, v107);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v108 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
    uint64_t v110 = v109;
    uint64_t v111 = *MEMORY[0x1E4FA23D8];
    uint64_t v112 = type metadata accessor for PommesError();
    uint64_t v113 = *(void *)(v112 - 8);
    uint64_t v114 = (uint64_t)v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v113 + 104))(v134, v111, v112);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v113 + 56))(v114, 0, 1, v112);
    uint64_t v115 = v136;
    v116 = v135;
    uint64_t v117 = v137;
    (*(void (**)(char *, void, uint64_t))(v136 + 104))(v135, *MEMORY[0x1E4F9FE98], v137);
    v118 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                        + *v2
                                                                                        + 520))(v108, v110, 0, v114, v116);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
    outlined destroy of MediaUserStateCenter?(v114, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
    if (v118)
    {
      RequestProcessorBase.messagePublisher.getter();
      __swift_project_boxed_opaque_existential_1(v151, v151[3]);
      dispatch thunk of MessagePublishing.postMessage(_:)();

      (*(void (**)(uint64_t *, uint64_t))(v146 + 8))(v148, v147);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v151);
    }
    else
    {
      v124 = Logger.logObject.getter();
      os_log_type_t v125 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v124, v125))
      {
        v126 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v126 = 0;
        _os_log_impl(&dword_1C8F83000, v124, v125, "PommesBridgeRequestProcessor failed to build noQuery message", v126, 2u);
        MEMORY[0x1CB77E470](v126, -1, -1);
      }

      return (*(uint64_t (**)(uint64_t *, uint64_t))(v146 + 8))(v148, v147);
    }
  }
  else
  {
    uint64_t v70 = (uint64_t)v143;
    outlined init with take of NLXResultCandidate((uint64_t)v16, (uint64_t)v143, type metadata accessor for PommesBridgeResultCandidateState);
    PommesBridgeResultCandidateState.setHasNLResultCandidate(_:)(1);
    uint64_t v71 = NLResultCandidateMessageBase.userParses.getter();
    uint64_t v72 = (uint64_t)v131;
    NLResultCandidateMessageBase.fallbackParse.getter();
    uint64_t v73 = NLResultCandidateMessageBase.responseVariantResult.getter();
    v140 = (void (**)(char *, uint64_t, void (*)(void, void, void, void)))v57;
    uint64_t v75 = v74;
    uint64_t v76 = v129;
    uint64_t v77 = *(int *)(v129 + 20);
    v78 = v130;
    v141 = v63;
    uint64_t v79 = (uint64_t)v130 + v77;
    uint64_t v80 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v79, 1, 1, v80);
    uint64_t v81 = (uint64_t *)((char *)v78 + *(int *)(v76 + 24));
    *uint64_t v81 = 0;
    v81[1] = 0;
    uint64_t *v78 = v71;
    outlined assign with take of MediaUserStateCenter?(v72, v79, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    swift_bridgeObjectRelease();
    *uint64_t v81 = v73;
    v81[1] = v75;
    uint64_t v82 = v132;
    outlined init with take of NLXResultCandidate((uint64_t)v78, v132, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    PommesBridgeResultCandidateState.setNLXResultCandidate(_:)(v82);
    outlined destroy of NLXResultCandidate(v82, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    uint64_t v83 = NLResultCandidateMessage.voiceIdClassification.getter();
    if (v84) {
      uint64_t v85 = 0;
    }
    else {
      uint64_t v85 = v83;
    }
    *(void *)(v70 + *(int *)(v61 + 24)) = v85;
    uint64_t v86 = v138;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v146 + 16))(v138, v148, v147);
    uint64_t v87 = v133;
    outlined init with copy of PommesBridgeResultCandidateState.ParseState(v70, v133, type metadata accessor for PommesBridgeResultCandidateState);
    v141((char *)v87, 0, 1, v61);
    v88 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                       + *v2
                                                                                       + 136))(v151);
    specialized Dictionary.subscript.setter(v87, v86);
    v88(v151, 0);
    v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v89, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc();
      uint64_t v92 = swift_slowAlloc();
      v151[0] = v92;
      *(_DWORD *)v91 = 136315138;
      swift_beginAccess();
      uint64_t v93 = PommesBridgeResultCandidateState.description.getter();
      uint64_t v150 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v89, v90, "Fetched %s", v91, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v92, -1, -1);
      MEMORY[0x1CB77E470](v91, -1, -1);
    }

    v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v95, v96))
    {
      v97 = (uint8_t *)swift_slowAlloc();
      uint64_t v98 = swift_slowAlloc();
      v151[0] = v98;
      *(_DWORD *)v97 = 136315138;
      uint64_t v99 = (uint64_t)v143;
      swift_beginAccess();
      v100 = (uint64_t *)(v99 + *(int *)(v144 + 32));
      uint64_t v102 = *v100;
      unint64_t v101 = v100[1];
      swift_bridgeObjectRetain();
      uint64_t v149 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v101, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v95, v96, "Extracted Pommes query:\n    prState utterance: \"%s\"", v97, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v98, -1, -1);
      MEMORY[0x1CB77E470](v97, -1, -1);
    }
    else
    {

      uint64_t v99 = (uint64_t)v143;
    }
    swift_beginAccess();
    if ((*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 448))(v99))
    {
      uint64_t v120 = v138;
      PommesBridgeResultCandidateState.pommesCandidateId.getter(v138);
      (*(void (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 456))(v120);
      v121 = *(void (**)(uint64_t, uint64_t))(v146 + 8);
      uint64_t v122 = v120;
      uint64_t v123 = v147;
      v121(v122, v147);
      v121((uint64_t)v148, v123);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v146 + 8))(v148, v147);
    }
    return outlined destroy of NLXResultCandidate(v99, type metadata accessor for PommesBridgeResultCandidateState);
  }
}

uint64_t specialized Sequence<>.summarizedDescription.getter(uint64_t a1)
{
  uint64_t v28 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v2 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v5 = *(void *)(a1 + 16);
  uint64_t v30 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  uint64_t v24 = a1;
  if (v5)
  {
    uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    uint64_t v6 = v2 + 16;
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v6 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 64));
    uint64_t v26 = *(void *)(v6 + 56);
    uint64_t v27 = v7;
    uint64_t v25 = (void (**)(char *, uint64_t))(v6 - 8);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v9 = v28;
      uint64_t v10 = v6;
      v27(v4, v8, v28);
      uint64_t v11 = Siri_Nlu_External_UserParse.summarizedDescription.getter();
      uint64_t v13 = v12;
      (*v25)(v4, v9);
      uint64_t v14 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1);
        uint64_t v14 = v30;
      }
      unint64_t v16 = *(void *)(v14 + 16);
      unint64_t v15 = *(void *)(v14 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v14 = v30;
      }
      *(void *)(v14 + 16) = v16 + 1;
      unint64_t v17 = v14 + 16 * v16;
      *(void *)(v17 + 32) = v11;
      *(void *)(v17 + 40) = v13;
      v8 += v26;
      --v5;
      uint64_t v6 = v10;
    }
    while (v5);
  }
  else
  {
    uint64_t v14 = v30;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  uint64_t v30 = 91;
  unint64_t v31 = 0xE100000000000000;
  uint64_t v29 = v14;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v20 = v19;
  swift_release();
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 93;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return v30;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ClientEntity>, MEMORY[0x1E4F88EC8]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>, MEMORY[0x1E4F88FD0]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_Span>, MEMORY[0x1E4FA2750]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>, MEMORY[0x1E4FA2CF0]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, MEMORY[0x1E4FA3E10]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AppVocabularyConcept>, MEMORY[0x1E4F89538]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>, MEMORY[0x1E4F88ED0]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)>, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SportsPersonalizationEntity>, MEMORY[0x1E4F9FE08]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ASRInterpretation>, MEMORY[0x1E4F89280]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ClientEntityAlignment>, MEMORY[0x1E4F89558]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSlice>, MEMORY[0x1E4F88EF0]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<PerformanceUtil.Measurement>, type metadata accessor for PerformanceUtil.Measurement);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_PegasusSearchQuery>, MEMORY[0x1E4F88648]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_InterpretationToken>, MEMORY[0x1E4F894F8]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>, MEMORY[0x1E4F89328]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : String]>, &demangling cache variable for type metadata for [String : String]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItem>, MEMORY[0x1E4F88BE0]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioAttribute>, MEMORY[0x1E4F890B8]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserParse>, MEMORY[0x1E4FA2808]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)>, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ContactAddress>, MEMORY[0x1E4F89130]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_PegasusSemanticValue>, MEMORY[0x1E4F88640]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_RenderedDialogComponent>, MEMORY[0x1E4F89780]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[UsoIdentifier]>, &demangling cache variable for type metadata for [UsoIdentifier]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_PegasusDisplayHint>, MEMORY[0x1E4F88630]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SpanProperty>, MEMORY[0x1E4FA2C80]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoEntitySpan>, MEMORY[0x1E4FA2CA0]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceLabel>, MEMORY[0x1E4F89300]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace>, MEMORY[0x1E4F88E78]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.PlayVideoIntentMetadata.VideoCategory>, MEMORY[0x1E4F89858]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.ShowInAppStringSearchResultsIntentMetadata.StringSearchScope>, MEMORY[0x1E4F89828]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<VideoCategory?>, &demangling cache variable for type metadata for VideoCategory?);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<StringSearchScope?>, &demangling cache variable for type metadata for StringSearchScope?);
  *uint64_t v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    void v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  int64_t v14 = *(void *)(v13 + 72);
  uint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  unint64_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  Swift::String v21 = (char *)v16 + v20;
  Swift::String v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  uint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AssistantDataSnapshot.MeCard.ContactAddress>);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PommesUsoTask>);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AssistantDataSnapshot.MeCard>);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[104 * v8] || v12 >= &v13[104 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data?>);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<MediaUserState>);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MediaUserState);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  Swift::String v21 = (char *)v16 + v20;
  Swift::String v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Siri_Nlu_External_UserParse.summarizedDescription.getter()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v20 = v0;
  uint64_t v21 = v1;
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_Parser.AlgorithmType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(106);
  v12._uint64_t countAndFlagsBits = 0xD000000000000018;
  v12._object = (void *)0x80000001C91A0730;
  String.append(_:)(v12);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.algorithm.getter();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v9 + 8);
  v13(v11, v8);
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v14._uint64_t countAndFlagsBits = 0xD000000000000017;
  v14._object = (void *)0x80000001C91A0750;
  String.append(_:)(v14);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  v13(v11, v8);
  uint64_t v15 = v20;
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v3, v15);
  v16._object = (void *)0x80000001C91A0770;
  v16._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v16);
  Siri_Nlu_External_UserParse.probability.getter();
  Double.write<A>(to:)();
  v17._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v17._object = (void *)0x80000001C91A0790;
  String.append(_:)(v17);
  Siri_Nlu_External_UserParse.comparableProbability.getter();
  Double.write<A>(to:)();
  v18._uint64_t countAndFlagsBits = 8194604;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  return v22;
}

uint64_t specialized PommesBridgeInstrumentationUtil.getRCIdAndTRPId(pommesCandidateId:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PommesCandidateId();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E4F9FE50]) {
    goto LABEL_5;
  }
  if (v6 == *MEMORY[0x1E4F9FE58])
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = *(void *)v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    return v7;
  }
  if (v6 == *MEMORY[0x1E4F9FE48])
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    return *(void *)v5;
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      Swift::String v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v12 = 0;
      _os_log_impl(&dword_1C8F83000, v10, v11, "Unknown PommesCandidateId. Setting resultCandidateId and trpId to empty string.", v12, 2u);
      MEMORY[0x1CB77E470](v12, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.handleNLResultCandidateMessage(_:)()
{
  return implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24), 0xD00000000000001DLL, 0x80000001C919BFE0, MEMORY[0x1E4FA21A0]);
}

uint64_t PommesBridgeRequestProcessor.pommesStateHolder.getter()
{
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall PommesBridgeResultCandidateState.setHasNLResultCandidate(_:)(Swift::Bool a1)
{
  uint64_t v3 = type metadata accessor for PommesCandidateId();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v10);
  Swift::String v12 = (uint64_t *)((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v1, (uint64_t)v12, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of NLXResultCandidate((uint64_t)v12, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v9);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    Swift::String v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v35 = v20;
      uint64_t v33 = v3;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v21 = PommesCandidateId.description.getter();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v23 = *(void (**)(char *, uint64_t))(v4 + 8);
      uint64_t v24 = v7;
      uint64_t v25 = v33;
      v23(v24, v33);
      _os_log_impl(&dword_1C8F83000, v17, v18, "Attempting to set hasResultCandidate while not on the RC state path for %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v20, -1, -1);
      MEMORY[0x1CB77E470](v19, -1, -1);

      v23(v9, v25);
    }
    else
    {

      unint64_t v31 = *(void (**)(char *, uint64_t))(v4 + 8);
      v31(v7, v3);
      v31(v9, v3);
    }
  }
  else
  {
    uint64_t v26 = *v12;
    uint64_t v27 = v12[1];
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    outlined init with take of NLXResultCandidate((uint64_t)v12 + *(int *)(v28 + 48), (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    outlined destroy of NLXResultCandidate((uint64_t)v1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    uint64_t v29 = (uint64_t)v1 + *(int *)(v28 + 48);
    uint64_t v30 = *(int *)(v28 + 64);
    *uint64_t v1 = v26;
    v1[1] = v27;
    outlined init with take of NLXResultCandidate((uint64_t)v15, v29, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    *((unsigned char *)v1 + v30) = a1;
    swift_storeEnumTagMultiPayload();
  }
}

uint64_t destroy for PommesBridgeResultCandidateState.ParseState(id *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {

    swift_bridgeObjectRelease();
    uint64_t v7 = (char *)a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                + 64);
    uint64_t v8 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v17 = *(void *)(v8 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v7, 1, v8);
    if (result) {
      return result;
    }
LABEL_16:
    uint64_t v16 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
    return v16(v7, v8);
  }
  if (result != 1)
  {
    if (!result)
    {
      swift_bridgeObjectRelease();
      uint64_t v3 = (char *)a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool))
                  + 48);
      swift_bridgeObjectRelease();
      uint64_t v4 = &v3[*(int *)(type metadata accessor for NLXResultCandidate() + 20)];
      uint64_t v5 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v6 = *(void *)(v5 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
      }
      return swift_bridgeObjectRelease();
    }
    return result;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  uint64_t v10 = (char *)a1 + v9[16];
  uint64_t v11 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v12 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  uint64_t v13 = (char *)a1 + v9[24];
  uint64_t v14 = type metadata accessor for SiriUserInput();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14)) {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  }
  uint64_t v7 = (char *)a1 + v9[28];
  uint64_t v8 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
  uint64_t v17 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v7, 1, v8);
  if (!result) {
    goto LABEL_16;
  }
  return result;
}

uint64_t PommesBridgeResultCandidateState.setNLXResultCandidate(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PommesCandidateId();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v30 - v8;
  uint64_t v10 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (void *)((char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v1, (uint64_t)v12, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of NLXResultCandidate((uint64_t)v12, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v9);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v31 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      v30[1] = v16 + 4;
      uint64_t v18 = PommesCandidateId.description.getter();
      v30[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void (**)(char *, uint64_t))(v4 + 8);
      v20(v7, v3);
      _os_log_impl(&dword_1C8F83000, v14, v15, "Attempting to set RC-based user parses while not on the RC state path for %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v17, -1, -1);
      MEMORY[0x1CB77E470](v16, -1, -1);

      return ((uint64_t (*)(char *, uint64_t))v20)(v9, v3);
    }
    else
    {

      uint64_t v29 = *(void (**)(char *, uint64_t))(v4 + 8);
      v29(v7, v3);
      return ((uint64_t (*)(char *, uint64_t))v29)(v9, v3);
    }
  }
  else
  {
    uint64_t v22 = *v12;
    uint64_t v23 = v12[1];
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    uint64_t v25 = (uint64_t)v12 + *(int *)(v24 + 48);
    char v26 = *((unsigned char *)v12 + *(int *)(v24 + 64));
    outlined destroy of NLXResultCandidate(v25, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    outlined destroy of NLXResultCandidate((uint64_t)v1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    uint64_t v27 = (uint64_t)v1 + *(int *)(v24 + 48);
    uint64_t v28 = *(int *)(v24 + 64);
    *uint64_t v1 = v22;
    v1[1] = v23;
    outlined init with copy of PommesBridgeResultCandidateState.ParseState(a1, v27, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    *((unsigned char *)v1 + v28) = v26;
    return swift_storeEnumTagMultiPayload();
  }
}

void *initializeWithCopy for NLXResultCandidate(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (void *)((char *)a1 + v13);
  os_log_type_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined assign with take of PommesBridgeResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesBridgeResultCandidateState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t assignWithTake for PommesBridgeResultCandidateState(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of NLXResultCandidate(a1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v15 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v15;
      uint64_t v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                   + 64);
      uint64_t v17 = (void *)(a1 + v16);
      uint64_t v18 = (const void *)(a2 + v16);
      uint64_t v19 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_18:
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(v21);
        memcpy(v17, v18, *(void *)(*(void *)(v39 - 8) + 64));
LABEL_20:
        swift_storeEnumTagMultiPayload();
        goto LABEL_21;
      }
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
        uint64_t v22 = *(int *)(v64 + 48);
        uint64_t v23 = a1 + v22;
        uint64_t v24 = a2 + v22;
        *(void *)(a1 + v22) = *(void *)(a2 + v22);
        uint64_t v25 = type metadata accessor for NLXResultCandidate();
        uint64_t v26 = *(int *)(v25 + 20);
        uint64_t v27 = (void *)(v23 + v26);
        uint64_t v28 = (const void *)(v24 + v26);
        uint64_t v29 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        uint64_t v30 = *(void *)(v29 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        {
          uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
          memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v27, v28, v29);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
        }
        *(_OWORD *)(v23 + *(int *)(v25 + 24)) = *(_OWORD *)(v24 + *(int *)(v25 + 24));
        *(unsigned char *)(a1 + *(int *)(v64 + 64)) = *(unsigned char *)(a2 + *(int *)(v64 + 64));
        goto LABEL_20;
      }
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      uint64_t v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      uint64_t v9 = v8[16];
      uint64_t v10 = (void *)(a1 + v9);
      uint64_t v11 = (const void *)(a2 + v9);
      uint64_t v12 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(unsigned char *)(a1 + v8[20]) = *(unsigned char *)(a2 + v8[20]);
      uint64_t v32 = v8[24];
      uint64_t v33 = (void *)(a1 + v32);
      uint64_t v34 = (const void *)(a2 + v32);
      uint64_t v35 = type metadata accessor for SiriUserInput();
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v36 + 32))(v33, v34, v35);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      uint64_t v38 = v8[28];
      uint64_t v17 = (void *)(a1 + v38);
      uint64_t v18 = (const void *)(a2 + v38);
      uint64_t v19 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
        goto LABEL_18;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v40 = a3[5];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = a2 + v40;
  uint64_t v43 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 40))(v41, v42, v43);
  uint64_t v44 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v45 = *(void **)(a1 + v44);
  *(void *)(a1 + v44) = *(void *)(a2 + v44);

  uint64_t v46 = a3[8];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (uint64_t *)(a2 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  *uint64_t v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v51) = *(unsigned char *)(a2 + v51);
  uint64_t v52 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v52) = *(unsigned char *)(a2 + v52);
  uint64_t v53 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  uint64_t v54 = (void *)(a1 + v53);
  uint64_t v55 = (void *)(a2 + v53);
  uint64_t v56 = type metadata accessor for PommesSearchEagerInfo(0);
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v57 + 48);
  LODWORD(v42) = v58(v54, 1, v56);
  int v59 = v58(v55, 1, v56);
  if (!v42)
  {
    if (!v59)
    {
      uint64_t v63 = type metadata accessor for PommesSearchReason();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v63 - 8) + 40))(v54, v55, v63);
      return a1;
    }
    outlined destroy of NLXResultCandidate((uint64_t)v54, type metadata accessor for PommesSearchEagerInfo);
    goto LABEL_26;
  }
  if (v59)
  {
LABEL_26:
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
    memcpy(v54, v55, *(void *)(*(void *)(v61 - 8) + 64));
    return a1;
  }
  uint64_t v60 = type metadata accessor for PommesSearchReason();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v60 - 8) + 32))(v54, v55, v60);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  return a1;
}

uint64_t PommesBridgeRequestProcessor.isReady(prState:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v67 = (uint64_t)&v66 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v66 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v66 - v12;
  uint64_t v14 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v66 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v66 - v21;
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(a1, (uint64_t)&v66 - v21, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v22, (uint64_t)v20, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    swift_bridgeObjectRelease();
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    uint64_t v39 = (uint64_t)&v20[*(int *)(v38 + 48)];
    if ((v20[*(int *)(v38 + 64)] & 1) == 0)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
      outlined init with copy of PommesBridgeResultCandidateState.ParseState(a1, (uint64_t)v13, type metadata accessor for PommesBridgeResultCandidateState);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        uint64_t v69 = v44;
        *(_DWORD *)uint64_t v43 = 136315138;
        uint64_t v45 = PommesBridgeResultCandidateState.description.getter();
        uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of NLXResultCandidate((uint64_t)v13, type metadata accessor for PommesBridgeResultCandidateState);
        _os_log_impl(&dword_1C8F83000, v41, v42, "search cannot continue because has not received NLResultCandidate yet %s", v43, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v44, -1, -1);
        MEMORY[0x1CB77E470](v43, -1, -1);
      }
      else
      {
        outlined destroy of NLXResultCandidate((uint64_t)v13, type metadata accessor for PommesBridgeResultCandidateState);
      }

      outlined destroy of NLXResultCandidate(v39, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
      goto LABEL_35;
    }
    outlined destroy of NLXResultCandidate((uint64_t)&v20[*(int *)(v38 + 48)], (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
LABEL_18:
    outlined destroy of NLXResultCandidate((uint64_t)v22, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    if (*(unsigned char *)(a1 + *(int *)(v3 + 36)))
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
      outlined init with copy of PommesBridgeResultCandidateState.ParseState(a1, (uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        uint64_t v69 = v51;
        *(_DWORD *)uint64_t v50 = 136315138;
        uint64_t v52 = PommesBridgeResultCandidateState.description.getter();
        uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of NLXResultCandidate((uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState);
        uint64_t v54 = "search cannot continue because prState has been previously started for rcId %s";
        uint64_t v55 = v48;
        os_log_type_t v56 = v49;
LABEL_28:
        _os_log_impl(&dword_1C8F83000, v55, v56, v54, v50, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v51, -1, -1);
LABEL_29:
        MEMORY[0x1CB77E470](v50, -1, -1);
LABEL_38:

        return 0;
      }
      uint64_t v62 = (uint64_t)v6;
    }
    else
    {
      if ((*(unsigned char *)(a1 + *(int *)(v3 + 40)) & 1) == 0)
      {
        if (*(void *)((char *)v1 + direct field offset for PommesBridgeRequestProcessor.pommesRequestContext)) {
          return 1;
        }
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v64 = type metadata accessor for Logger();
        __swift_project_value_buffer(v64, (uint64_t)static Logger.pommes);
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v48, v65)) {
          goto LABEL_38;
        }
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl(&dword_1C8F83000, v48, v65, "search cannot continue because pommesRequestContext has not been set yet", v50, 2u);
        goto LABEL_29;
      }
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      __swift_project_value_buffer(v57, (uint64_t)static Logger.pommes);
      uint64_t v58 = v67;
      outlined init with copy of PommesBridgeResultCandidateState.ParseState(a1, v67, type metadata accessor for PommesBridgeResultCandidateState);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v48, v59))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        uint64_t v69 = v51;
        *(_DWORD *)uint64_t v50 = 136315138;
        uint64_t v60 = PommesBridgeResultCandidateState.description.getter();
        uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of NLXResultCandidate(v58, type metadata accessor for PommesBridgeResultCandidateState);
        uint64_t v54 = "search cannot continue because prState has been previously finished for rcId %s";
        uint64_t v55 = v48;
        os_log_type_t v56 = v59;
        goto LABEL_28;
      }
      uint64_t v62 = v58;
    }
    outlined destroy of NLXResultCandidate(v62, type metadata accessor for PommesBridgeResultCandidateState);
    goto LABEL_38;
  }
  if (EnumCaseMultiPayload != 1) {
    goto LABEL_18;
  }
  outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v22, (uint64_t)v17, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  int v25 = v17[v24[20]];
  uint64_t v26 = (uint64_t)&v17[v24[16]];
  uint64_t v27 = (uint64_t)&v17[v24[24]];
  uint64_t v28 = (uint64_t)&v17[v24[28]];
  if (v25 == 1
    && ((*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 168))() & 1) == 0)
  {
    outlined destroy of MediaUserStateCenter?(v28, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    outlined destroy of MediaUserStateCenter?(v27, &demangling cache variable for type metadata for SiriUserInput?);
    outlined destroy of MediaUserStateCenter?(v26, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    goto LABEL_18;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
  outlined init with copy of PommesBridgeResultCandidateState.ParseState(a1, (uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    uint64_t v67 = v26;
    uint64_t v33 = (uint8_t *)v32;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v69 = v34;
    *(_DWORD *)uint64_t v33 = 136315138;
    uint64_t v66 = v28;
    uint64_t v35 = PommesBridgeResultCandidateState.description.getter();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v69);
    uint64_t v28 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of NLXResultCandidate((uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C8F83000, v30, v31, "search cannot continue because request is candidate request or no TTResponseMessage received yet %s", v33, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v34, -1, -1);
    uint64_t v37 = v33;
    uint64_t v26 = v67;
    MEMORY[0x1CB77E470](v37, -1, -1);
  }
  else
  {
    outlined destroy of NLXResultCandidate((uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState);
  }

  outlined destroy of MediaUserStateCenter?(v28, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  outlined destroy of MediaUserStateCenter?(v27, &demangling cache variable for type metadata for SiriUserInput?);
  outlined destroy of MediaUserStateCenter?(v26, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
LABEL_35:
  outlined destroy of NLXResultCandidate((uint64_t)v22, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  return 0;
}

uint64_t type metadata accessor for PommesSearchRequest(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesSearchRequest);
}

uint64_t PommesBridgeRequestProcessor.sessionState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for PommesBridgeRequestProcessor.sessionState;
  swift_beginAccess();
  return outlined init with copy of MediaUserStateCenter?(v3, a1, &demangling cache variable for type metadata for ConversationSessionState?);
}

uint64_t outlined init with copy of TCUMappedNLResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of MediaUserStateCenter?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for PommesSearchRequest.ParseState(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesSearchRequest.ParseState);
}

uint64_t static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v285 = a2;
  v293 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v4 - 8);
  v290 = (char *)&v280 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v366 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  uint64_t v327 = *(void *)(v366 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v366);
  uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)&v280 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  v284 = (char *)&v280 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  v288 = (char *)&v280 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  v291 = (char *)&v280 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v287 = (uint64_t)&v280 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  v281 = (char *)&v280 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v282 = (uint64_t)&v280 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  v283 = (char *)&v280 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  v295 = (char *)&v280 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v320 = (uint64_t)&v280 - v26;
  MEMORY[0x1F4188790](v25);
  v315 = (char *)&v280 - v27;
  uint64_t v348 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage));
  uint64_t v28 = *(void *)(v348 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v348);
  v297 = (char *)&v280 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v319 = (uint64_t)&v280 - v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  MEMORY[0x1F4188790](v32 - 8);
  v325 = (char *)&v280 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v328 = type metadata accessor for DeviceClass();
  uint64_t v34 = *(void *)(v328 - 8);
  MEMORY[0x1F4188790](v328);
  uint64_t v326 = (uint64_t)&v280 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  uint64_t v37 = MEMORY[0x1F4188790](v36 - 8);
  uint64_t v289 = (uint64_t)&v280 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v280 - v40;
  MEMORY[0x1F4188790](v39);
  uint64_t v337 = (uint64_t)&v280 - v42;
  uint64_t v349 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v296 = *(void *)(v349 - 8);
  uint64_t v43 = MEMORY[0x1F4188790](v349);
  v292 = (char *)&v280 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v43);
  v336 = (char *)&v280 - v45;
  uint64_t v357 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v339 = *(void *)(v357 - 8);
  uint64_t v46 = MEMORY[0x1F4188790](v357);
  v303 = (char *)&v280 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v46);
  v356 = (char *)&v280 - v48;
  uint64_t v355 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v49 = *(void *)(v355 - 8);
  MEMORY[0x1F4188790](v355);
  v354 = (char *)&v280 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v365 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_DelegatedUserDialogAct, Double, Bool));
  uint64_t v51 = MEMORY[0x1F4188790](v365);
  v314 = (char *)&v280 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v51);
  uint64_t v54 = (char *)&v280 - v53;
  uint64_t v338 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v298 = *(void *)(v338 - 8);
  MEMORY[0x1F4188790](v338);
  v368 = (char *)&v280 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v351 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v343 = *(void *)(v351 - 8);
  uint64_t v56 = MEMORY[0x1F4188790](v351);
  v335 = (char *)&v280 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v56);
  v329 = (char *)&v280 - v58;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage)?);
  uint64_t v60 = MEMORY[0x1F4188790](v59 - 8);
  uint64_t v313 = (uint64_t)&v280 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v60);
  uint64_t v316 = (uint64_t)&v280 - v62;
  if (one-time initialization token for pommes != -1) {
    goto LABEL_112;
  }
  while (1)
  {
    uint64_t v63 = type metadata accessor for Logger();
    uint64_t v64 = __swift_project_value_buffer(v63, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain();
    uint64_t v340 = v64;
    os_log_type_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.debug.getter();
    BOOL v67 = os_log_type_enabled(v65, v66);
    v294 = v41;
    if (v67)
    {
      uint64_t v68 = v34;
      uint64_t v69 = isUniquelyReferenced_nonNull_native;
      uint64_t v70 = v49;
      uint64_t v71 = v28;
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v72 = 134217984;
      v370[0] = *(void *)(a1 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v65, v66, "Extract DUDA: considering %ld user parses", v72, 0xCu);
      uint64_t v73 = v72;
      uint64_t v28 = v71;
      uint64_t v49 = v70;
      uint64_t isUniquelyReferenced_nonNull_native = v69;
      uint64_t v34 = v68;
      MEMORY[0x1CB77E470](v73, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    uint64_t v41 = v329;
    static PommesSearchRequest.getRewriteFromParsers(_:)(a1, v316);
    unint64_t v74 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    unint64_t v75 = v74;
    uint64_t v76 = *(void *)(a1 + 16);
    uint64_t v286 = isUniquelyReferenced_nonNull_native;
    uint64_t v301 = v76;
    if (v76) {
      break;
    }
    uint64_t isUniquelyReferenced_nonNull_native = v74;
LABEL_67:
    uint64_t v181 = swift_bridgeObjectRetain();
    uint64_t v182 = specialized Sequence.filter(_:)(v181);
    uint64_t v183 = *(void *)(v182 + 16);
    uint64_t v34 = v327;
    uint64_t v184 = (uint64_t)v295;
    if (v183)
    {
      uint64_t v185 = v182 + ((*(unsigned __int8 *)(v327 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v327 + 80));
      uint64_t v186 = *(void *)(v327 + 72);
      double v187 = 0.0;
      do
      {
        outlined init with copy of MediaUserStateCenter?(v185, v184, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
        double v187 = v187 + *(double *)(v184 + *(int *)(v366 + 48));
        outlined destroy of MediaUserStateCenter?(v184, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
        v185 += v186;
        --v183;
      }
      while (v183);
      swift_bridgeObjectRelease();
      uint64_t v34 = v327;
    }
    else
    {
      swift_bridgeObjectRelease();
      double v187 = 0.0;
    }
    v188 = Logger.logObject.getter();
    os_log_type_t v189 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v188, v189))
    {
      v190 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v190 = 134217984;
      *(double *)v370 = v187;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v188, v189, "Extract DUDA: synthesized combined POMMES parse score is %f", v190, 0xCu);
      MEMORY[0x1CB77E470](v190, -1, -1);
    }

    if (*(void *)(isUniquelyReferenced_nonNull_native + 16))
    {
      unint64_t v191 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000001C919BE60);
      if (v192)
      {
        uint64_t v193 = v366;
        uint64_t v194 = *(int *)(v366 + 48);
        uint64_t v195 = *(int *)(v366 + 64);
        uint64_t v363 = isUniquelyReferenced_nonNull_native;
        uint64_t v196 = v282;
        outlined init with copy of MediaUserStateCenter?(*(void *)(isUniquelyReferenced_nonNull_native + 56) + *(void *)(v34 + 72) * v191, v282, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
        uint64_t v197 = *(int *)(v193 + 48);
        uint64_t v198 = *(int *)(v193 + 64);
        uint64_t v28 = v296 + 32;
        uint64_t v199 = (uint64_t)v283;
        unint64_t v369 = *(void *)(v296 + 32);
        ((void (*)(char *, uint64_t, uint64_t))v369)(v283, v196, v349);
        double v200 = *(double *)(v196 + v197);
        *(double *)(v199 + v194) = v200;
        char v201 = *(unsigned char *)(v196 + v198);
        *(unsigned char *)(v199 + v195) = v201;
        if (specialized static PommesSearchRequest.pommesDUDAThreshold.getter() <= v200
          || v187 < specialized static PommesSearchRequest.pommesDUDAThreshold.getter())
        {
          v202 = Logger.logObject.getter();
          os_log_type_t v203 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v202, v203))
          {
            v204 = (uint8_t *)swift_slowAlloc();
            char v205 = v201;
            uint64_t v206 = swift_slowAlloc();
            v370[0] = v206;
            *(_DWORD *)v204 = 136315138;
            uint64_t v371 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x80000001C919BE60, v370);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_1C8F83000, v202, v203, "Extract DUDA: primary parse class is usable alone, or combined parse is not usable; returning with %s",
              v204,
              0xCu);
            swift_arrayDestroy();
            uint64_t v207 = v206;
            char v201 = v205;
            MEMORY[0x1CB77E470](v207, -1, -1);
            MEMORY[0x1CB77E470](v204, -1, -1);
          }

          outlined destroy of MediaUserStateCenter?(v316, (uint64_t *)&demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage)?);
          uint64_t v208 = v366;
          v209 = (char *)*(int *)(v366 + 48);
          v210 = (char *)*(int *)(v366 + 64);
          v367 = v209;
          v368 = v210;
          uint64_t v211 = v296;
          v212 = v295;
          uint64_t v213 = v349;
          (*(void (**)(char *, uint64_t, uint64_t))(v296 + 16))(v295, v199, v349);
          *(double *)&v209[(void)v212] = v200;
          v210[(void)v212] = v201;
          v214 = v293;
          v215 = (void (*)(char *, uint64_t, uint64_t))v369;
          ((void (*)(char *, char *, uint64_t))v369)(v293, v212, v213);
          uint64_t v216 = *(int *)(v208 + 48);
          LOBYTE(v210) = v201;
          uint64_t v217 = *(int *)(v208 + 64);
          uint64_t v218 = v199;
          v219 = v281;
          v215(v281, v218, v213);
          *(double *)&v219[v216] = v200;
          v219[v217] = (char)v210;
          *(double *)&v367[(void)v214] = v200;
          v368[(void)v214] = 0;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v327 + 56))(v214, 0, 1, v208);
          (*(void (**)(char *, uint64_t))(v211 + 8))(v219, v213);
          return swift_bridgeObjectRelease();
        }
        outlined destroy of MediaUserStateCenter?(v199, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
        uint64_t isUniquelyReferenced_nonNull_native = v363;
      }
    }
    uint64_t v220 = swift_bridgeObjectRetain();
    uint64_t v221 = specialized Sequence.filter(_:)(v220);
    uint64_t v54 = (char *)v221;
    uint64_t v41 = *(char **)(v221 + 16);
    if (!v41)
    {
      v224 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
      uint64_t v223 = (uint64_t)v294;
      v224(v294, 1, 1, v366);
LABEL_86:
      swift_bridgeObjectRelease();
      uint64_t v225 = v289;
      outlined init with copy of MediaUserStateCenter?(v223, v289, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
      int v226 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v225, 1, v366);
      uint64_t v227 = (uint64_t)v290;
      v228 = v292;
      if (v226 == 1)
      {
        outlined destroy of MediaUserStateCenter?(v225, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
        outlined init with copy of MediaUserStateCenter?(v285, v227, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        uint64_t v229 = v296;
        uint64_t v230 = v349;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v296 + 48))(v227, 1, v349) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v227, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
LABEL_105:
          v276 = Logger.logObject.getter();
          os_log_type_t v277 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v276, v277))
          {
            v278 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v278 = 0;
            _os_log_impl(&dword_1C8F83000, v276, v277, "Extract DUDA: no parse meets criteria; returning nil", v278, 2u);
            MEMORY[0x1CB77E470](v278, -1, -1);
          }

          outlined destroy of MediaUserStateCenter?(v223, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
          outlined destroy of MediaUserStateCenter?(v316, (uint64_t *)&demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage)?);
          v224(v293, 1, 1, v366);
          return swift_bridgeObjectRelease();
        }
        (*(void (**)(char *, uint64_t, uint64_t))(v229 + 32))(v228, v227, v230);
        if ((specialized static PommesSearchRequest.isSupportedExternalParseId(externalParseId:)(0xD000000000000018, 0x80000001C919BEB0) & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v229 + 8))(v228, v230);
          uint64_t v223 = (uint64_t)v294;
          goto LABEL_105;
        }
        unint64_t v369 = (unint64_t)v224;
        uint64_t v363 = isUniquelyReferenced_nonNull_native;
        v263 = Logger.logObject.getter();
        os_log_type_t v264 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v263, v264))
        {
          v265 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v265 = 0;
          _os_log_impl(&dword_1C8F83000, v263, v264, "Convert general fallback parse to PSC DUDA.", v265, 2u);
          MEMORY[0x1CB77E470](v265, -1, -1);
        }

        uint64_t v260 = v366;
        uint64_t v266 = *(int *)(v366 + 48);
        uint64_t v267 = *(int *)(v366 + 64);
        uint64_t v268 = v296;
        v269 = v293;
        v270 = v292;
        (*(void (**)(char *, char *, uint64_t))(v296 + 16))(v293, v292, v230);
        Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.setter();
        (*(void (**)(char *, uint64_t))(v268 + 8))(v270, v230);
        outlined destroy of MediaUserStateCenter?((uint64_t)v294, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
        outlined destroy of MediaUserStateCenter?(v316, (uint64_t *)&demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage)?);
        *(void *)&v269[v266] = 0;
        v269[v267] = 0;
        v271 = v269;
      }
      else
      {
        unint64_t v369 = (unint64_t)v224;
        uint64_t v363 = isUniquelyReferenced_nonNull_native;
        uint64_t v231 = v225;
        uint64_t v232 = v366;
        uint64_t v233 = *(int *)(v366 + 48);
        uint64_t v234 = *(int *)(v366 + 64);
        uint64_t v235 = v296;
        v236 = v291;
        uint64_t v237 = v349;
        v367 = *(char **)(v296 + 32);
        v368 = (char *)(v296 + 32);
        ((void (*)(char *, uint64_t, uint64_t))v367)(v291, v231, v349);
        uint64_t v238 = *(void *)(v231 + v233);
        *(void *)&v236[v233] = v238;
        LOBYTE(v233) = *(unsigned char *)(v231 + v234);
        v236[v234] = v233;
        uint64_t v239 = *(int *)(v232 + 48);
        uint64_t v240 = *(int *)(v232 + 64);
        uint64_t v241 = (uint64_t)v284;
        v242 = v236;
        uint64_t v243 = v286;
        uint64_t v244 = v237;
        v245 = *(void (**)(char *, char *, uint64_t))(v235 + 16);
        v245(v284, v242, v244);
        *(void *)(v241 + v239) = v238;
        *(unsigned char *)(v241 + v240) = v233;
        outlined init with take of PommesSearchReason?(v241, v243, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
        v246 = Logger.logObject.getter();
        os_log_type_t v247 = static os_log_type_t.debug.getter();
        int v248 = v247;
        if (os_log_type_enabled(v246, v247))
        {
          LODWORD(v365) = v248;
          v249 = (uint8_t *)swift_slowAlloc();
          uint64_t v364 = swift_slowAlloc();
          v370[0] = v364;
          v362 = v249;
          *(_DWORD *)v249 = 136315138;
          v361 = v249 + 4;
          uint64_t v250 = *(int *)(v366 + 48);
          uint64_t v251 = v243;
          uint64_t v252 = *(int *)(v366 + 64);
          v253 = v295;
          uint64_t v254 = v349;
          v245(v295, (char *)v251, v349);
          *(void *)&v253[v250] = *(void *)(v251 + v250);
          v253[v252] = *(unsigned char *)(v251 + v252);
          uint64_t v255 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
          unint64_t v257 = v256;
          (*(void (**)(char *, uint64_t))(v235 + 8))(v253, v254);
          uint64_t v371 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v255, v257, v370);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of MediaUserStateCenter?(v251, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
          v258 = v362;
          _os_log_impl(&dword_1C8F83000, v246, (os_log_type_t)v365, "Extract DUDA: combined parse class is usable; returning with %s",
            v362,
            0xCu);
          uint64_t v259 = v364;
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v259, -1, -1);
          MEMORY[0x1CB77E470](v258, -1, -1);

          outlined destroy of MediaUserStateCenter?((uint64_t)v294, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
          outlined destroy of MediaUserStateCenter?(v316, (uint64_t *)&demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage)?);
          uint64_t v260 = v366;
          uint64_t v261 = v254;
        }
        else
        {

          outlined destroy of MediaUserStateCenter?(v243, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
          outlined destroy of MediaUserStateCenter?(v223, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
          outlined destroy of MediaUserStateCenter?(v316, (uint64_t *)&demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage)?);
          v253 = v295;
          uint64_t v260 = v366;
          uint64_t v261 = v349;
        }
        uint64_t v272 = *(int *)(v260 + 48);
        uint64_t v273 = *(int *)(v260 + 64);
        v274 = (void (*)(uint64_t, char *, uint64_t))v367;
        ((void (*)(char *, char *, uint64_t))v367)(v253, v291, v261);
        v275 = v293;
        v274((uint64_t)v293, v253, v261);
        *(double *)&v275[v272] = v187;
        v275[v273] = 0;
        v271 = v275;
      }
      ((void (*)(char *, void, uint64_t, uint64_t))v369)(v271, 0, 1, v260);
      return swift_bridgeObjectRelease();
    }
    uint64_t v222 = v221 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
    a1 = v287;
    outlined init with copy of MediaUserStateCenter?(v222, v287, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    uint64_t v49 = (uint64_t)v288;
    if (v41 == (char *)1)
    {
LABEL_84:
      uint64_t v223 = (uint64_t)v294;
      outlined init with take of PommesSearchReason?(a1, (uint64_t)v294, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      v224 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
      v224((char *)v223, 0, 1, v366);
      goto LABEL_86;
    }
    unint64_t v262 = 1;
    while (v262 < *((void *)v54 + 2))
    {
      outlined init with copy of MediaUserStateCenter?(v222 + *(void *)(v34 + 72) * v262, v49, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      if (*(double *)(a1 + *(int *)(v366 + 48)) >= *(double *)(v49 + *(int *)(v366 + 48)))
      {
        outlined destroy of MediaUserStateCenter?(v49, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      }
      else
      {
        outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
        outlined init with take of PommesSearchReason?(v49, a1, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      }
      if (v41 == (char *)++v262) {
        goto LABEL_84;
      }
    }
LABEL_111:
    __break(1u);
LABEL_112:
    swift_once();
  }
  v342 = *(void (**)(char *, unint64_t, uint64_t))(v343 + 16);
  unint64_t v300 = a1 + ((*(unsigned __int8 *)(v343 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v343 + 80));
  uint64_t v299 = *(void *)(v343 + 72);
  uint64_t v359 = v298 + 16;
  v358 = (void (**)(uint64_t, uint64_t))(v298 + 8);
  unsigned int v334 = *MEMORY[0x1E4FA2780];
  uint64_t v347 = v339 + 104;
  v353 = (void (**)(char *, uint64_t))(v49 + 8);
  uint64_t v346 = v339 + 8;
  v333 = (void (**)(char *, uint64_t))(v296 + 8);
  v332 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v327 + 56);
  v331 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v327 + 48);
  unsigned int v345 = *MEMORY[0x1E4FA27A8];
  v343 += 16;
  v341 = (void (**)(char *, uint64_t))(v343 - 8);
  v324 = &v372;
  v323 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  v317 = (void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
  v318 = (void (**)(uint64_t, uint64_t))(v34 + 8);
  v312 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  v311 = (void (**)(char *, char *, char *))(v296 + 16);
  v310 = (void (**)(char *, char *, char *))(v296 + 32);
  uint64_t v280 = a1;
  swift_bridgeObjectRetain();
  uint64_t v77 = 0;
  *((void *)&v78 + 1) = 4;
  long long v330 = xmmword_1C9195D60;
  *(void *)&long long v78 = 136315906;
  long long v322 = v78;
  uint64_t v321 = MEMORY[0x1E4FBC840] + 8;
  uint64_t isUniquelyReferenced_nonNull_native = v75;
  uint64_t v79 = v338;
  uint64_t v49 = (uint64_t)v368;
  uint64_t v80 = v351;
  v360 = v54;
  while (1)
  {
    v342(v41, v300 + v299 * v77, v80);
    uint64_t v81 = Siri_Nlu_External_Span.matcherNames.getter();
    a1 = *(void *)(v81 + 16);
    if (a1) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_8:
    ++v77;
    uint64_t v80 = v351;
    (*v341)(v41, v351);
    if (v77 == v301)
    {
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
  }
  uint64_t v305 = v77;
  unint64_t v82 = (*(unsigned __int8 *)(v298 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v298 + 80);
  uint64_t v304 = v81;
  unint64_t v369 = v81 + v82;
  v361 = *(uint8_t **)(v298 + 72);
  v362 = *(uint8_t **)(v298 + 16);
  ((void (*)(uint64_t, unint64_t, uint64_t))v362)(v49, v81 + v82, v79);
  while (1)
  {
    if ((Siri_Nlu_External_UserDialogAct.hasDelegated.getter() & 1) == 0)
    {
      (*v358)(v49, v79);
      goto LABEL_12;
    }
    uint64_t v364 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_Parser.ParserIdentifier>);
    uint64_t v83 = v339;
    uint64_t v84 = *(void *)(v339 + 72);
    unint64_t v85 = (*(unsigned __int8 *)(v339 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v339 + 80);
    uint64_t v86 = swift_allocObject();
    *(_OWORD *)(v86 + 16) = v330;
    unint64_t v87 = v86 + v85;
    uint64_t v88 = isUniquelyReferenced_nonNull_native;
    v89 = v41;
    os_log_type_t v90 = *(void (**)(char *, void, uint64_t))(v83 + 104);
    uint64_t v91 = v357;
    v90((char *)v87, v334, v357);
    v344 = v90;
    v90((char *)(v87 + v84), v345, v91);
    uint64_t v41 = v89;
    uint64_t v92 = v88;
    uint64_t v93 = specialized Set.init(_nonEmptyArrayLiteral:)(v86);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v94 = *(int *)(v365 + 48);
    uint64_t v95 = *(int *)(v365 + 64);
    Siri_Nlu_External_UserDialogAct.delegated.getter();
    Siri_Nlu_External_UserParse.comparableProbability.getter();
    *(void *)&v54[v94] = v96;
    v97 = v354;
    Siri_Nlu_External_UserParse.parser.getter();
    uint64_t v98 = (uint64_t)v356;
    Siri_Nlu_External_Parser.parserID.getter();
    uint64_t v99 = v97;
    uint64_t v54 = v360;
    v352 = *v353;
    v352(v99, v355);
    LOBYTE(v86) = specialized Set.contains(_:)(v98, v93);
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void *)(v83 + 8);
    ((void (*)(uint64_t, uint64_t))v34)(v98, v91);
    v54[v95] = v86 & 1;
    v100 = v336;
    Siri_Nlu_External_UserDialogAct.delegated.getter();
    unint64_t v101 = (char *)Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
    uint64_t v28 = v102;
    (*v333)(v100, v349);
    uint64_t v103 = *(void *)(v92 + 16);
    v367 = v101;
    if (v103)
    {
      swift_bridgeObjectRetain();
      unint64_t v104 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v101, v28);
      uint64_t v105 = v337;
      uint64_t v106 = v351;
      if (v107)
      {
        uint64_t v108 = v327;
        outlined init with copy of MediaUserStateCenter?(*(void *)(v92 + 56) + *(void *)(v327 + 72) * v104, v337, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v366);
      }
      else
      {
        (*v332)(v337, 1, 1, v366);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v105 = v337;
      (*v332)(v337, 1, 1, v366);
      uint64_t v106 = v351;
    }
    uint64_t v363 = v92;
    double v109 = -1.0;
    if (!(*v331)(v105, 1, v366)) {
      double v109 = *(double *)(v105 + *(int *)(v366 + 48));
    }
    outlined destroy of MediaUserStateCenter?(v105, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    uint64_t v110 = v335;
    v342(v335, (unint64_t)v41, v106);
    swift_bridgeObjectRetain_n();
    uint64_t v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v111, v112))
    {
      uint64_t v113 = v110;
      uint64_t v114 = swift_slowAlloc();
      uint64_t v115 = swift_slowAlloc();
      uint64_t v350 = v34;
      uint64_t v116 = v115;
      v370[0] = v115;
      *(_DWORD *)uint64_t v114 = v322;
      uint64_t v117 = v354;
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      v352(v117, v355);
      uint64_t v54 = v360;
      uint64_t v118 = String.init<A>(describing:)();
      uint64_t v371 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v119, v370);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v120 = v113;
      uint64_t v41 = v329;
      (*v341)(v120, v351);
      *(_WORD *)(v114 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v371 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v367, v28, v370);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v114 + 22) = 2048;
      swift_beginAccess();
      uint64_t v371 = *(void *)&v54[*(int *)(v365 + 48)];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v114 + 32) = 2048;
      uint64_t v371 = *(void *)&v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v111, v112, "Extract DUDA: considering %s %s, comparing score %f > %f", (uint8_t *)v114, 0x2Au);
      swift_arrayDestroy();
      uint64_t v121 = v116;
      uint64_t v34 = v350;
      MEMORY[0x1CB77E470](v121, -1, -1);
      MEMORY[0x1CB77E470](v114, -1, -1);
    }
    else
    {
      (*v341)(v110, v106);

      swift_bridgeObjectRelease_n();
    }
    uint64_t v122 = v348;
    uint64_t isUniquelyReferenced_nonNull_native = v363;
    a1 = v364;
    if (one-time initialization token for PommesMultiClassParserIds != -1) {
      swift_once();
    }
    uint64_t v123 = (void (*)(void, void, void))v367;
    if ((specialized Set.contains(_:)((uint64_t)v367, v28, static PommesSearchRequest.PommesMultiClassParserIds) & 1) == 0) {
      goto LABEL_58;
    }
    uint64_t v350 = v28;
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentDevice.getter();
    swift_release();
    uint64_t v124 = (uint64_t)v325;
    dispatch thunk of CurrentDevice.deviceClass.getter();
    swift_release();
    uint64_t v125 = v328;
    if ((*v323)(v124, 1, v328) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v124, &demangling cache variable for type metadata for DeviceClass?);
      uint64_t v28 = v350;
      goto LABEL_39;
    }
    (*v317)(v326, v124, v125);
    if (one-time initialization token for PommesMultiClassAllowedDeviceClasses != -1) {
      swift_once();
    }
    uint64_t v126 = static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses;
    uint64_t v28 = v350;
    if (!*(void *)(static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses + 16)) {
      goto LABEL_38;
    }
    swift_bridgeObjectRetain();
    unint64_t v127 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v123, v28);
    if ((v128 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_38:
      (*v318)(v326, v125);
      goto LABEL_39;
    }
    uint64_t v129 = *(void *)(*(void *)(v126 + 56) + 8 * v127);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v130 = objc_msgSend(self, sel_processInfo);
    char v131 = NSProcessInfo.isRunningUnitTests.getter();

    if (v131)
    {
      uint64_t v132 = v326;
      char v133 = specialized Set.contains(_:)(v326, v129);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v370[3] = (uint64_t)&type metadata for FeatureFlag;
      v370[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
      uint64_t v175 = swift_allocObject();
      v370[0] = v175;
      *(void *)(v175 + 16) = 7;
      *(void *)(v175 + 24) = 0;
      *(void *)(v175 + 32) = 0;
      *(void *)(v175 + 40) = 0;
      *(unsigned char *)(v175 + 48) = 3;
      char v133 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v370);
      uint64_t v132 = v326;
    }
    (*v318)(v132, v328);
    uint64_t v122 = v348;
    if ((v133 & 1) == 0) {
      goto LABEL_58;
    }
LABEL_39:
    swift_beginAccess();
    if (v109 < *(double *)&v54[*(int *)(v365 + 48)]) {
      break;
    }
LABEL_58:
    uint64_t v49 = (uint64_t)v368;
    uint64_t v79 = v338;
    (*v358)((uint64_t)v368, v338);
    swift_bridgeObjectRelease();
LABEL_63:
    outlined destroy of MediaUserStateCenter?((uint64_t)v54, &demangling cache variable for type metadata for (Siri_Nlu_External_DelegatedUserDialogAct, Double, Bool));
LABEL_12:
    v369 += (unint64_t)v361;
    if (!--a1)
    {
      swift_bridgeObjectRelease();
      uint64_t v77 = v305;
      goto LABEL_8;
    }
    ((void (*)(uint64_t, unint64_t, uint64_t))v362)(v49, v369, v79);
  }
  uint64_t v134 = v313;
  outlined init with copy of MediaUserStateCenter?(v316, v313, (uint64_t *)&demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage)?);
  if ((*v312)(v134, 1, v122) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v134, (uint64_t *)&demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage)?);
    uint64_t v41 = (char *)v349;
  }
  else
  {
    uint64_t v135 = *(int *)(v122 + 48);
    uint64_t v136 = v319;
    uint64_t v137 = v319 + v135;
    uint64_t v138 = v134 + v135;
    uint64_t v139 = type metadata accessor for Google_Protobuf_StringValue();
    uint64_t v308 = *(void *)(v139 - 8);
    v140 = *(void (**)(uint64_t, uint64_t))(v308 + 32);
    uint64_t v309 = v139;
    v140(v136, v134);
    uint64_t v141 = type metadata accessor for Siri_Nlu_External_RewriteMessage();
    uint64_t v142 = *(void *)(v141 - 8);
    v143 = *(void (**)(uint64_t, uint64_t))(v142 + 32);
    uint64_t v307 = v137;
    uint64_t v306 = v141;
    v143(v137, v138);
    uint64_t v144 = v354;
    Siri_Nlu_External_UserParse.parser.getter();
    uint64_t v145 = v356;
    Siri_Nlu_External_Parser.parserID.getter();
    v352(v144, v355);
    uint64_t v146 = v303;
    uint64_t v147 = v357;
    v344(v303, v345, v357);
    lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v148 = v370[0];
    uint64_t v149 = v371;
    ((void (*)(char *, uint64_t))v34)(v146, v147);
    ((void (*)(char *, uint64_t))v34)(v145, v147);
    if (v148 == v149)
    {
      uint64_t v150 = v348;
      v151 = v297;
      v302 = &v297[*(int *)(v348 + 48)];
      v152 = v302;
      uint64_t v153 = v308;
      v352 = *(void (**)(char *, uint64_t))(v308 + 16);
      uint64_t v154 = v309;
      ((void (*)(char *, uint64_t, uint64_t))v352)(v297, v319, v309);
      v344 = *(void (**)(char *, uint64_t, uint64_t))(v142 + 16);
      uint64_t v34 = v307;
      uint64_t v155 = v306;
      v344(v152, v307, v306);
      swift_beginAccess();
      Siri_Nlu_External_DelegatedUserDialogAct.rewrittenUtterance.setter();
      (*(void (**)(char *, uint64_t))(v142 + 8))(v302, v155);
      v156 = &v151[*(int *)(v150 + 48)];
      uint64_t v157 = v319;
      ((void (*)(char *, uint64_t, uint64_t))v352)(v151, v319, v154);
      v344(v156, v34, v155);
      Siri_Nlu_External_DelegatedUserDialogAct.rewrite.setter();
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v153 + 8))(v151, v154);
      v158 = Logger.logObject.getter();
      os_log_type_t v159 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v158, v159))
      {
        v160 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v160 = 0;
        _os_log_impl(&dword_1C8F83000, v158, v159, "Extract DUDA: patching rewrite for overrides", v160, 2u);
        MEMORY[0x1CB77E470](v160, -1, -1);
      }

      outlined destroy of MediaUserStateCenter?(v157, &demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage));
      uint64_t v41 = (char *)v349;
      uint64_t isUniquelyReferenced_nonNull_native = v363;
    }
    else
    {
      outlined destroy of MediaUserStateCenter?(v319, &demangling cache variable for type metadata for (Google_Protobuf_StringValue, Siri_Nlu_External_RewriteMessage));
      uint64_t v41 = (char *)v349;
    }
    a1 = v364;
  }
  uint64_t v161 = *(int *)(v365 + 48);
  uint64_t v162 = *(int *)(v365 + 64);
  v163 = v314;
  v164 = v360;
  (*v311)(v314, v360, v41);
  uint64_t v165 = *(void *)&v164[v161];
  *(void *)&v163[v161] = v165;
  LOBYTE(v161) = v164[v162];
  v163[v162] = v161;
  uint64_t v166 = *(int *)(v366 + 48);
  uint64_t v49 = *(int *)(v366 + 64);
  uint64_t v28 = (uint64_t)v315;
  (*v310)(v315, v163, v41);
  *(void *)(v28 + v166) = v165;
  *(unsigned char *)(v28 + v49) = v161;
  outlined init with take of PommesSearchReason?(v28, v320, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  uint64_t v167 = isUniquelyReferenced_nonNull_native;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v370[0] = v167;
  uint64_t v54 = v367;
  unint64_t v169 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v367, v350);
  uint64_t v170 = *(void *)(v167 + 16);
  BOOL v171 = (v168 & 1) == 0;
  uint64_t v172 = v170 + v171;
  if (__OFADD__(v170, v171))
  {
    __break(1u);
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
  uint64_t v28 = v168;
  if (*(void *)(v167 + 24) >= v172)
  {
    uint64_t v54 = v360;
    uint64_t v79 = v338;
    uint64_t v49 = (uint64_t)v368;
    uint64_t v41 = v329;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t isUniquelyReferenced_nonNull_native = v370[0];
      if ((v168 & 1) == 0) {
        goto LABEL_60;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t isUniquelyReferenced_nonNull_native = v370[0];
      if ((v28 & 1) == 0) {
        goto LABEL_60;
      }
    }
    goto LABEL_55;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v172, isUniquelyReferenced_nonNull_native);
  unint64_t v173 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v54, v350);
  uint64_t v54 = v360;
  uint64_t v79 = v338;
  uint64_t v49 = (uint64_t)v368;
  uint64_t v41 = v329;
  if ((v28 & 1) == (v174 & 1))
  {
    unint64_t v169 = v173;
    uint64_t isUniquelyReferenced_nonNull_native = v370[0];
    if ((v28 & 1) == 0)
    {
LABEL_60:
      *(void *)(isUniquelyReferenced_nonNull_native + 8 * (v169 >> 6) + 64) |= 1 << v169;
      v176 = (void *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v169);
      uint64_t v177 = v350;
      void *v176 = v367;
      v176[1] = v177;
      outlined init with take of PommesSearchReason?(v320, *(void *)(isUniquelyReferenced_nonNull_native + 56) + *(void *)(v327 + 72) * v169, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      uint64_t v178 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
      BOOL v179 = __OFADD__(v178, 1);
      uint64_t v180 = v178 + 1;
      if (v179) {
        goto LABEL_110;
      }
      *(void *)(isUniquelyReferenced_nonNull_native + 16) = v180;
      swift_bridgeObjectRetain();
      goto LABEL_62;
    }
LABEL_55:
    outlined assign with take of (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)(v320, *(void *)(isUniquelyReferenced_nonNull_native + 56) + *(void *)(v327 + 72) * v169);
LABEL_62:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*v358)(v49, v79);
    goto LABEL_63;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

double specialized static PommesSearchRequest.resolvedScore(_:isFallback:)(uint64_t a1, char a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v81 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v81 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v81 - v21;
  if (a2)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_1C8F83000, v24, v25, "POMMES request is for fallback. Forcing effective PSC score to 1.0.", v26, 2u);
      MEMORY[0x1CB77E470](v26, -1, -1);
    }

    return 1.0;
  }
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v9, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_1C8F83000, v29, v30, "No delegated UDA found. Setting effective PSC score to 0.0.", v31, 2u);
      MEMORY[0x1CB77E470](v31, -1, -1);
    }

    goto LABEL_25;
  }
  uint64_t v86 = v14;
  uint64_t v83 = v6;
  uint64_t v32 = *(int *)(v10 + 48);
  uint64_t v33 = *(int *)(v10 + 64);
  uint64_t v34 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v35 = *(void **)(v34 - 8);
  uint64_t v36 = (void (*)(char *, char *, uint64_t))v35[4];
  uint64_t v84 = (void (*)(char *, uint64_t))(v35 + 4);
  unint64_t v85 = v36;
  v36(v22, v9, v34);
  double v27 = *(double *)&v9[v32];
  *(double *)&v22[v32] = v27;
  char v37 = v9[v33];
  v22[v33] = v37;
  uint64_t v38 = *(int *)(v10 + 48);
  uint64_t v39 = *(int *)(v10 + 64);
  unint64_t v87 = (void (*)(char *, char *, uint64_t))v35[2];
  uint64_t v88 = v35 + 2;
  v87(v20, v22, v34);
  *(double *)&v20[v38] = v27;
  v20[v39] = v37;
  uint64_t v40 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
  uint64_t v42 = v41;
  uint64_t v43 = v22;
  uint64_t v46 = (void (*)(char *, uint64_t))v35[1];
  uint64_t v45 = (void (*)(char *, char *, uint64_t))(v35 + 1);
  uint64_t v44 = v46;
  v46(v20, v34);
  LOBYTE(v40) = specialized static PommesSearchRequest.isSupportedExternalParseId(externalParseId:)(v40, v42);
  swift_bridgeObjectRelease();
  if ((v40 & 1) == 0)
  {
    uint64_t v84 = v44;
    unint64_t v85 = v45;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.pommes);
    uint64_t v50 = *(int *)(v10 + 48);
    uint64_t v51 = *(int *)(v10 + 64);
    uint64_t v52 = v34;
    v87(v17, v43, v34);
    *(double *)&v17[v50] = v27;
    v17[v51] = v37;
    uint64_t v53 = (uint64_t)v86;
    outlined init with take of PommesSearchReason?((uint64_t)v17, (uint64_t)v86, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    uint64_t v54 = Logger.logObject.getter();
    int v55 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v54, (os_log_type_t)v55))
    {

      outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      uint64_t v65 = (uint64_t)v43;
LABEL_24:
      outlined destroy of MediaUserStateCenter?(v65, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
LABEL_25:
      double v27 = 0.0;
      goto LABEL_26;
    }
    int v82 = v55;
    uint64_t v56 = swift_slowAlloc();
    uint64_t v81 = swift_slowAlloc();
    double v90 = *(double *)&v81;
    *(_DWORD *)uint64_t v56 = 136315394;
    uint64_t v57 = *(int *)(v10 + 48);
    uint64_t v58 = *(int *)(v10 + 64);
    v87(v20, (char *)v53, v52);
    *(void *)&v20[v57] = *(void *)(v53 + v57);
    v20[v58] = *(unsigned char *)(v53 + v58);
    uint64_t v59 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
    unint64_t v61 = v60;
    v84(v20, v52);
    uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v61, (uint64_t *)&v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    *(_WORD *)(v56 + 12) = 2080;
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentDevice.getter();
    swift_release();
    uint64_t v62 = (uint64_t)v83;
    dispatch thunk of CurrentDevice.deviceClass.getter();
    swift_release();
    uint64_t v63 = type metadata accessor for DeviceClass();
    uint64_t v64 = *(void *)(v63 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v62, &demangling cache variable for type metadata for DeviceClass?);
    }
    else
    {
      Swift::String_optional v66 = DeviceClass.stringValue()();
      uint64_t countAndFlagsBits = v66.value._countAndFlagsBits;
      object = v66.value._object;
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v63);
      if (v66.value._object)
      {
LABEL_23:
        os_log_type_t v69 = v82;
        uint64_t v70 = v81;
        uint64_t v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, (uint64_t *)&v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v54, v69, "externalParseID: %s is unsupported in current DeviceClass %s. Setting effective PSC score to 0.0.", (uint8_t *)v56, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v70, -1, -1);
        MEMORY[0x1CB77E470](v56, -1, -1);

        uint64_t v65 = (uint64_t)v43;
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease();
    object = (void *)0xE700000000000000;
    uint64_t countAndFlagsBits = 0x6E776F6E6B6E75;
    goto LABEL_23;
  }
  uint64_t v47 = *(int *)(v10 + 48);
  uint64_t v48 = *(int *)(v10 + 64);
  v85(v20, v43, v34);
  *(double *)&v20[v47] = v27;
  v20[v48] = v37;
  v44(v20, v34);
LABEL_26:
  id v71 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  uint64_t v72 = (void *)MEMORY[0x1CB77CA90](0xD000000000000012, 0x80000001C91A0AA0);
  id v73 = objc_msgSend(v71, sel_initWithSuiteName_, v72);

  if (v73)
  {
    unint64_t v74 = (void *)MEMORY[0x1CB77CA90](0x7265766F20435350, 0xEC00000065646972);
    id v75 = objc_msgSend(v73, sel_stringForKey_, v74);

    if (v75)
    {

      if (one-time initialization token for overrides != -1) {
        swift_once();
      }
      uint64_t v76 = type metadata accessor for Logger();
      __swift_project_value_buffer(v76, (uint64_t)static Logger.overrides);
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v79 = 134217984;
        double v90 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C8F83000, v77, v78, "WARNING: POMMES override enabled in CDM for PSC score. This may lead to unintended user-facing behavior. Effective PSC score: %f", v79, 0xCu);
        MEMORY[0x1CB77E470](v79, -1, -1);
      }
    }
  }
  return v27;
}

uint64_t specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v64 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v91 = *(void (**)(char *, char *, uint64_t))(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v77 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v89 = (char *)&v61 - v7;
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v79 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  Swift::String_optional v66 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v61 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  os_log_type_t v78 = (char *)&v61 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v61 - v21;
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v63 = (char *)&v61 - v24;
  MEMORY[0x1F4188790](v23);
  BOOL v67 = (char *)&v61 - v25;
  uint64_t v95 = MEMORY[0x1E4FBC860];
  unint64_t v26 = *(void *)(a1 + 16);
  uint64_t v80 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v81 = v26;
  if (!v26) {
    goto LABEL_24;
  }
  unint64_t v28 = 0;
  uint64_t v92 = v79 + 16;
  uint64_t v29 = (void (**)(void, void))(v9 + 8);
  unsigned int v71 = *MEMORY[0x1E4FA2798];
  os_log_type_t v30 = (void (*)(char *, char *, uint64_t))((char *)v91 + 104);
  uint64_t v31 = (void (**)(char *, uint64_t))((char *)v91 + 8);
  unsigned int v68 = *MEMORY[0x1E4FA27A8];
  unint64_t v74 = (void (**)(char *, uint64_t))(v79 + 8);
  uint64_t v65 = (void (**)(char *, char *, uint64_t))(v79 + 32);
  unint64_t v62 = v81 - 1;
  uint64_t v87 = v8;
  uint64_t v88 = v29;
  uint64_t v84 = v11;
  unint64_t v85 = (void (**)(char *, uint64_t))((char *)v91 + 8);
  uint64_t v86 = (void (*)(char *, char *, uint64_t))((char *)v91 + 104);
  uint64_t v73 = v12;
  uint64_t v72 = v17;
  id v75 = v22;
  while (2)
  {
    unint64_t v32 = v81;
    if (v28 > v81) {
      unint64_t v32 = v28;
    }
    unint64_t v76 = v32;
    unint64_t v33 = v28;
    while (1)
    {
      if (v76 == v33)
      {
        __break(1u);
        return result;
      }
      uint64_t v35 = *(void *)(v79 + 72);
      unint64_t v70 = (*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
      unint64_t v90 = v33;
      uint64_t v69 = v35;
      uint64_t v91 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
      v91(v22, (char *)(v80 + v70 + v35 * v33), v12);
      Siri_Nlu_External_UserParse.parser.getter();
      uint64_t v36 = v8;
      char v37 = v89;
      Siri_Nlu_External_Parser.parserID.getter();
      uint64_t v83 = (void (*)(char *, uint64_t))*v29;
      v83(v11, v36);
      uint64_t v38 = v77;
      int v82 = *(void (**)(char *, void, uint64_t))v30;
      v82(v77, v71, v4);
      lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v40 = v93;
      uint64_t v39 = v94;
      uint64_t v41 = v38;
      uint64_t v42 = *v31;
      (*v31)(v41, v4);
      v42(v37, v4);
      uint64_t v43 = v78;
      v91(v78, v22, v12);
      if (v39 == v40)
      {
        BOOL v44 = 1;
      }
      else
      {
        uint64_t v45 = v84;
        Siri_Nlu_External_UserParse.parser.getter();
        uint64_t v46 = v89;
        Siri_Nlu_External_Parser.parserID.getter();
        v83(v45, v87);
        v82(v41, v68, v4);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        BOOL v44 = v94 == v93;
        v42(v41, v4);
        v42(v46, v4);
      }
      uint64_t v47 = *v74;
      uint64_t v12 = v73;
      (*v74)(v43, v73);
      uint64_t v48 = v72;
      uint64_t v22 = v75;
      v91(v72, v75, v12);
      if (v44) {
        break;
      }
      v47(v48, v12);
      uint64_t v11 = v84;
      uint64_t v29 = v88;
      unint64_t v34 = v90;
LABEL_7:
      unint64_t v33 = v34 + 1;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v47)(v22, v12);
      os_log_type_t v30 = v86;
      uint64_t v8 = v87;
      uint64_t v31 = v85;
      if (v81 == v33) {
        goto LABEL_24;
      }
    }
    Siri_Nlu_External_UserParse.comparableProbability.getter();
    double v50 = v49;
    v47(v48, v12);
    uint64_t v11 = v84;
    uint64_t v29 = v88;
    unint64_t v34 = v90;
    if (v50 <= 0.05) {
      goto LABEL_7;
    }
    uint64_t v51 = *v65;
    uint64_t v52 = v63;
    (*v65)(v63, v22, v12);
    uint64_t v91 = v51;
    v51(v67, v52, v12);
    uint64_t v53 = v64;
    Siri_Nlu_External_UserParse.firstUserDialogAct.getter(v64);
    uint64_t v54 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    uint64_t v55 = *(void *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v53, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      goto LABEL_18;
    }
    char v56 = Siri_Nlu_External_UserDialogAct.hasDelegated.getter();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v53, v54);
    if (v56)
    {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v47)(v67, v12);
      uint64_t v22 = v75;
    }
    else
    {
LABEL_18:
      v91(v66, v67, v12);
      uint64_t v57 = v95;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v22 = v75;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v57 + 16) + 1, 1);
        uint64_t v57 = v95;
      }
      unint64_t v60 = *(void *)(v57 + 16);
      unint64_t v59 = *(void *)(v57 + 24);
      if (v60 >= v59 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
        uint64_t v57 = v95;
      }
      *(void *)(v57 + 16) = v60 + 1;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v91)(v57 + v70 + v60 * v69, v66, v12);
      uint64_t v95 = v57;
    }
    uint64_t v8 = v87;
    uint64_t v29 = v88;
    unint64_t v28 = v90 + 1;
    uint64_t v31 = v85;
    os_log_type_t v30 = v86;
    if (v62 != v90) {
      continue;
    }
    break;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  return v95;
}

uint64_t Siri_Nlu_External_UserParse.firstUserDialogAct.getter@<X0>(char *a1@<X8>)
{
  double v49 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v46 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  double v50 = (char *)&v45 - v5;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v45 = (char *)&v45 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v45 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v47 = (char *)&v45 - v15;
  uint64_t v48 = v1;
  uint64_t v51 = Siri_Nlu_External_Span.matcherNames.getter();
  uint64_t v16 = *(void *)(v51 + 16);
  if (v16)
  {
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
    unint64_t v18 = v51 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
    uint64_t v19 = (void (**)(char *, uint64_t))(v52 + 8);
    uint64_t v20 = *(void *)(v52 + 72);
    while (1)
    {
      v17(v14, v18, v6);
      if (Siri_Nlu_External_UserDialogAct.hasAccepted.getter()) {
        break;
      }
      (*v19)(v14, v6);
      v18 += v20;
      if (!--v16) {
        goto LABEL_5;
      }
    }
    uint64_t v21 = v52;
    uint64_t v23 = (uint64_t)v50;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v50, v14, v6);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
    v22(v23, 0, 1, v6);
  }
  else
  {
LABEL_5:
    uint64_t v21 = v52;
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
    uint64_t v23 = (uint64_t)v50;
    v22((uint64_t)v50, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = *(char **)(v21 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v24)(v23, 1, v6) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v23);
    uint64_t v25 = Siri_Nlu_External_Span.matcherNames.getter();
    uint64_t v26 = *(void *)(v25 + 16);
    if (v26)
    {
      double v50 = v24;
      uint64_t v51 = (uint64_t)v22;
      uint64_t v29 = *(void (**)(char *, unint64_t, uint64_t))(v21 + 16);
      uint64_t v28 = v21 + 16;
      double v27 = v29;
      unint64_t v30 = (*(unsigned __int8 *)(v28 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 64);
      uint64_t v47 = (char *)v25;
      unint64_t v31 = v25 + v30;
      uint64_t v32 = *(void *)(v28 + 56);
      while (1)
      {
        v27(v9, v31, v6);
        if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()) {
          break;
        }
        (*(void (**)(char *, uint64_t))(v28 - 8))(v9, v6);
        v31 += v32;
        if (!--v26)
        {
          uint64_t v33 = 1;
          unint64_t v34 = v49;
          uint64_t v21 = v52;
          uint64_t v35 = (uint64_t)v46;
          goto LABEL_16;
        }
      }
      uint64_t v21 = v52;
      uint64_t v35 = (uint64_t)v46;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v46, v9, v6);
      uint64_t v33 = 0;
      unint64_t v34 = v49;
LABEL_16:
      uint64_t v24 = v50;
      uint64_t v22 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v51;
    }
    else
    {
      uint64_t v33 = 1;
      unint64_t v34 = v49;
      uint64_t v35 = (uint64_t)v46;
    }
    v22(v35, v33, 1, v6);
    swift_bridgeObjectRelease();
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v24)(v35, 1, v6) == 1)
    {
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v35);
      uint64_t v40 = Siri_Nlu_External_Span.matcherNames.getter();
      if (*(void *)(v40 + 16))
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v34, v40 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)), v6);
        uint64_t v41 = v34;
        uint64_t v42 = 0;
      }
      else
      {
        uint64_t v41 = v34;
        uint64_t v42 = 1;
      }
      v22((uint64_t)v41, v42, 1, v6);
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 32);
      BOOL v44 = v45;
      v43(v45, v35, v6);
      v43(v34, (uint64_t)v44, v6);
      return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v22)(v34, 0, 1, v6);
    }
  }
  else
  {
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 32);
    char v37 = v47;
    v36(v47, v23, v6);
    uint64_t v38 = v49;
    v36(v49, (uint64_t)v37, v6);
    return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v22)(v38, 0, 1, v6);
  }
}

uint64_t PommesCandidateId.asResultCandidateId.getter()
{
  uint64_t v1 = type metadata accessor for PommesCandidateId();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  int v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == *MEMORY[0x1E4F9FE50]) {
    goto LABEL_5;
  }
  if (v5 == *MEMORY[0x1E4F9FE58])
  {
    (*(void (**)(char *, uint64_t))(v2 + 96))(v4, v1);
    uint64_t v6 = *(void *)v4;
    swift_bridgeObjectRelease();
    return v6;
  }
  if (v5 == *MEMORY[0x1E4F9FE48])
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v2 + 96))(v4, v1);
    return *(void *)v4;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C8F83000, v9, v10, "No resultCandidateId for unexpected pommesCandidateId. Passing empty string for resultCandidateId.", v11, 2u);
    MEMORY[0x1CB77E470](v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return 0;
}

void *initializeWithCopy for PommesSearchRequest(void *a1, void *a2, int *a3)
{
  type metadata accessor for PommesSearchRequest.ParseState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v15 = a2[1];
    *a1 = *a2;
    a1[1] = v15;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
    uint64_t v17 = *(int *)(v16 + 64);
    unint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    uint64_t v33 = *(int *)(v16 + 80);
    unint64_t v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                  + 64);
      os_log_type_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      goto LABEL_15;
    }
    uint64_t v23 = a2[1];
    *a1 = *a2;
    a1[1] = v23;
    swift_bridgeObjectRetain();
    uint64_t v24 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    *(void *)((char *)a1 + v24) = *(void *)((char *)a2 + v24);
    uint64_t v93 = type metadata accessor for NLXResultCandidate();
    uint64_t v94 = v25;
    uint64_t v27 = *(int *)(v93 + 20);
    __dst = &v25[v27];
    uint64_t v28 = &v26[v27];
    uint64_t v29 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v30 = *(void *)(v29 - 8);
    unint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
    swift_bridgeObjectRetain();
    if (v31(v28, 1, v29))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(__dst, v28, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(__dst, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
    }
    uint64_t v36 = *(int *)(v93 + 24);
    unint64_t v34 = &v94[v36];
    uint64_t v35 = &v26[v36];
  }
  uint64_t v37 = *((void *)v35 + 1);
  *(void *)unint64_t v34 = *(void *)v35;
  *((void *)v34 + 1) = v37;
  swift_bridgeObjectRetain();
LABEL_15:
  swift_storeEnumTagMultiPayload();
  uint64_t v38 = a3[5];
  uint64_t v39 = a3[6];
  uint64_t v40 = (void *)((char *)a1 + v38);
  uint64_t v41 = (void *)((char *)a2 + v38);
  uint64_t v42 = v41[1];
  *uint64_t v40 = *v41;
  v40[1] = v42;
  uint64_t v43 = (char *)a1 + v39;
  BOOL v44 = (char *)a2 + v39;
  uint64_t v45 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  swift_bridgeObjectRetain();
  if (v47(v44, 1, v45))
  {
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v43, v44, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  uint64_t v49 = a3[7];
  uint64_t v50 = a3[8];
  uint64_t v51 = (void *)((char *)a1 + v49);
  uint64_t v52 = (void *)((char *)a2 + v49);
  uint64_t v53 = v52[1];
  *uint64_t v51 = *v52;
  v51[1] = v53;
  uint64_t v54 = (void *)((char *)a1 + v50);
  uint64_t v55 = (void *)((char *)a2 + v50);
  uint64_t v56 = v55[1];
  *uint64_t v54 = *v55;
  v54[1] = v56;
  uint64_t v57 = a3[9];
  uint64_t v58 = a3[10];
  unint64_t v59 = (void *)((char *)a1 + v57);
  unint64_t v60 = (void *)((char *)a2 + v57);
  uint64_t v61 = v60[1];
  void *v59 = *v60;
  v59[1] = v61;
  uint64_t v95 = (char *)a1 + v58;
  uint64_t v96 = a3;
  unint64_t v62 = (char *)a2 + v58;
  uint64_t v63 = type metadata accessor for PommesContext();
  uint64_t v64 = *(void *)(v63 - 8);
  uint64_t v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v65(v62, 1, v63))
  {
    uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v95, v62, *(void *)(*(void *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v95, v62, v63);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v95, 0, 1, v63);
  }
  uint64_t v67 = v96[11];
  unsigned int v68 = (char *)a1 + v67;
  uint64_t v69 = (char *)a2 + v67;
  uint64_t v70 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v71 = *(void *)(v70 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
  {
    uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v68, v69, v70);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
  }
  uint64_t v73 = v96[13];
  *(void *)((char *)a1 + v96[12]) = *(void *)((char *)a2 + v96[12]);
  *(void *)((char *)a1 + v73) = *(void *)((char *)a2 + v73);
  uint64_t v74 = v96[14];
  id v75 = (char *)a1 + v74;
  unint64_t v76 = (char *)a2 + v74;
  uint64_t v77 = type metadata accessor for InputOrigin();
  uint64_t v78 = *(void *)(v77 - 8);
  uint64_t v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
  swift_retain();
  if (v79(v76, 1, v77))
  {
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v75, v76, *(void *)(*(void *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v75, v76, v77);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
  }
  uint64_t v81 = v96[16];
  *((unsigned char *)a1 + v96[15]) = *((unsigned char *)a2 + v96[15]);
  *((unsigned char *)a1 + v81) = *((unsigned char *)a2 + v81);
  uint64_t v82 = v96[18];
  *((unsigned char *)a1 + v96[17]) = *((unsigned char *)a2 + v96[17]);
  uint64_t v83 = *(void **)((char *)a2 + v82);
  *(void *)((char *)a1 + v82) = v83;
  uint64_t v84 = v96[20];
  *(void *)((char *)a1 + v96[19]) = *(void *)((char *)a2 + v96[19]);
  *((unsigned char *)a1 + v84) = *((unsigned char *)a2 + v84);
  uint64_t v85 = v96[21];
  uint64_t v86 = v96[22];
  uint64_t v87 = (void *)((char *)a1 + v85);
  uint64_t v88 = (void *)((char *)a2 + v85);
  uint64_t v89 = v88[1];
  *uint64_t v87 = *v88;
  v87[1] = v89;
  *(void *)((char *)a1 + v86) = *(void *)((char *)a2 + v86);
  *(void *)((char *)a1 + v96[23]) = *(void *)((char *)a2 + v96[23]);
  id v90 = v83;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t PommesSearch.search(pommesSearchRequest:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 240))(a1, a2, a3);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
}

uint64_t outlined init with copy of PommesSearchRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PommesSearchRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s21SiriInformationSearch06PommesC7RequestVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s21SiriInformationSearch06PommesC7RequestVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s21SiriInformationSearch06PommesC7RequestVWOcTm_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s21SiriInformationSearch06PommesC7RequestVWOcTm_3(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *initializeWithCopy for PommesSearchRequest.ParseState(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
    uint64_t v15 = *(int *)(v14 + 64);
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v32 = *(int *)(v14 + 80);
    uint64_t v33 = (void *)((char *)a1 + v32);
    unint64_t v34 = (void *)((char *)a2 + v32);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    swift_bridgeObjectRetain();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                + 64);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for TCUMappedNLResponse();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  else
  {
    uint64_t v21 = a2[1];
    *a1 = *a2;
    a1[1] = v21;
    swift_bridgeObjectRetain();
    uint64_t v22 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    *(void *)((char *)a1 + v22) = *(void *)((char *)a2 + v22);
    uint64_t v25 = type metadata accessor for NLXResultCandidate();
    uint64_t v26 = *(int *)(v25 + 20);
    __dst = &v23[v26];
    uint64_t v42 = v25;
    uint64_t v27 = &v24[v26];
    uint64_t v28 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    swift_bridgeObjectRetain();
    if (v30(v27, 1, v28))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(__dst, v27, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dst, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
    }
    uint64_t v36 = *(int *)(v42 + 24);
    uint64_t v37 = &v23[v36];
    uint64_t v38 = &v24[v36];
    uint64_t v39 = *((void *)v38 + 1);
    *(void *)uint64_t v37 = *(void *)v38;
    *((void *)v37 + 1) = v39;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t outlined destroy of PommesSearchRequest(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s21SiriInformationSearch06PommesC7RequestVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void PommesRequestInstrumentationUtil.logStartOfPommesRequest(requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1168]), sel_init);
    if (v7)
    {
      uint64_t v8 = v7;
      id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1188]), sel_init);
      if (v9)
      {
        uint64_t v10 = v9;
        objc_msgSend(v9, sel_setExists_, 1);
        objc_msgSend(v8, sel_setStartedOrChanged_, v10);
        objc_msgSend(v6, sel_setPommesRequestContext_, v8);
        uint64_t v11 = self;
        swift_retain();
        id v12 = objc_msgSend(v11, sel_processInfo);
        char v13 = NSProcessInfo.isRunningUnitTests.getter();

        if (v13) {
          id v14 = (id)(*(uint64_t (**)(void))(*(void *)v4 + 96))();
        }
        else {
          id v14 = objc_msgSend(self, sel_sharedStream);
        }
        uint64_t v18 = v14;
        swift_release();
        objc_msgSend(v18, sel_emitMessage_, v6);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v8 = v6;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v16, "Unable to log start of POMMES request", v17, 2u);
    MEMORY[0x1CB77E470](v17, -1, -1);
  }
}

void *specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
}

{
  return specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
}

{
  return specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
}

{
  return specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
}

{
  return specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
}

void *specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1070]), sel_init);
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void *)(v10 - 8);
    MEMORY[0x1F4188790](v10);
    char v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    a4(21, a1, a2);
    id v14 = closure #1 in Emittable.eventWrapper(requestId:pommesCandidateId:)((uint64_t)v13, a1, a2, a3);
    objc_msgSend(v9, sel_setEventMetadata_, v14);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1C8F83000, v16, v17, "Unable to initialize POMMESSchemaPOMMESClientEvent", v18, 2u);
      MEMORY[0x1CB77E470](v18, -1, -1);
    }

    return 0;
  }
  return v9;
}

uint64_t specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char *a4@<X8>)
{
  if (!a3) {
    goto LABEL_4;
  }
  LODWORD(v70) = a1;
  uint64_t v71 = a4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  char v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
LABEL_4:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v73 = v18;
      *(_DWORD *)os_log_type_t v17 = 136315138;
      if (a3)
      {
        unint64_t v19 = a3;
      }
      else
      {
        a2 = 7104878;
        unint64_t v19 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v19, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v15, v16, "[SELF Logging] Unable to create UUID for derived SELF ids from requestId: %s.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v18, -1, -1);
      MEMORY[0x1CB77E470](v17, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return UUID.init()();
  }
  uint64_t v66 = &v62;
  unsigned int v68 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v21 = v68((char *)&v62 - v9, v13, v6);
  uint64_t v67 = &v62;
  MEMORY[0x1F4188790](v21);
  uint64_t v22 = (char *)&v62 - v9;
  uint64_t v23 = *(void (**)(void, char *))(*v69[4] + 88);
  swift_retain();
  uint64_t v24 = v70;
  v23(v70, v10);
  uint64_t v25 = (char *)&v62 - v9;
  swift_release();
  if (AFDeviceSupportsSAE()) {
    uint64_t v26 = 43;
  }
  else {
    uint64_t v26 = 1;
  }
  uint64_t v27 = specialized Emittable.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(v24, (uint64_t)v22, v26);
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = objc_msgSend(self, sel_processInfo);
    char v30 = NSProcessInfo.isRunningUnitTests.getter();

    if (v30) {
      id v31 = (id)((uint64_t (*)(void))(*v69)[16])();
    }
    else {
      id v31 = objc_msgSend(self, sel_sharedStream);
    }
    uint64_t v69 = (void **)(v7 + 32);
    objc_msgSend(v31, sel_emitMessage_, v28);
    swift_unknownObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    uint64_t v48 = __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v48);
    uint64_t v49 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v49, v25, v6);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v64 = &v62;
      uint64_t v53 = v52;
      uint64_t v63 = swift_slowAlloc();
      uint64_t v73 = v63;
      *(_DWORD *)uint64_t v53 = 136315394;
      uint64_t v54 = SISchemaComponentName.description.getter();
      uint64_t v70 = v10;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v73);
      uint64_t v65 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v73);
      uint64_t v25 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v58 = *(void (**)(char *, uint64_t))(v7 + 8);
      v58(v49, v6);
      _os_log_impl(&dword_1C8F83000, v50, v51, "[SELF Logging] Logged request link event with component:%s, ID: %s", (uint8_t *)v53, 0x16u);
      uint64_t v59 = v63;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v59, -1, -1);
      MEMORY[0x1CB77E470](v53, -1, -1);

      v58(v70, v6);
    }
    else
    {

      unint64_t v60 = *(void (**)(char *, uint64_t))(v7 + 8);
      v60(v49, v6);
      v60(v10, v6);
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v33);
    unint64_t v34 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v34, v22, v6);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v69 = (void **)(v7 + 32);
      uint64_t v38 = v37;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v65 = (char *)&v62 - v9;
      uint64_t v40 = v39;
      uint64_t v73 = v39;
      *(_DWORD *)uint64_t v38 = 136315394;
      uint64_t v41 = SISchemaComponentName.description.getter();
      uint64_t v70 = (char *)&v62 - v9;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v73);
      uint64_t v64 = &v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v7 + 8);
      v45(v34, v6);
      _os_log_impl(&dword_1C8F83000, v35, v36, "[SELF Logging] Unable to log request link event with component:%s, ID: %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      uint64_t v46 = v40;
      uint64_t v25 = v65;
      MEMORY[0x1CB77E470](v46, -1, -1);
      MEMORY[0x1CB77E470](v38, -1, -1);

      v45(v70, v6);
    }
    else
    {

      uint64_t v61 = *(void (**)(char *, uint64_t))(v7 + 8);
      v61(v34, v6);
      v61(v10, v6);
    }
  }
  return v68(v71, v25, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char *v22;
  void (*v23)(void, char *);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  id v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t (*v68)(char *, char *, uint64_t);
  void **v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;

  if (!a3) {
    goto LABEL_4;
  }
  LODWORD(v70) = a1;
  uint64_t v71 = a4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  char v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
LABEL_4:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v73 = v18;
      *(_DWORD *)os_log_type_t v17 = 136315138;
      if (a3)
      {
        unint64_t v19 = a3;
      }
      else
      {
        a2 = 7104878;
        unint64_t v19 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v19, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v15, v16, "[SELF Logging] Unable to create UUID for derived SELF ids from requestId: %s.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v18, -1, -1);
      MEMORY[0x1CB77E470](v17, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return UUID.init()();
  }
  uint64_t v66 = &v62;
  unsigned int v68 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v21 = v68((char *)&v62 - v9, v13, v6);
  uint64_t v67 = &v62;
  MEMORY[0x1F4188790](v21);
  uint64_t v22 = (char *)&v62 - v9;
  uint64_t v23 = *(void (**)(void, char *))(*v69[3] + 88);
  swift_retain();
  uint64_t v24 = v70;
  v23(v70, v10);
  uint64_t v25 = (char *)&v62 - v9;
  swift_release();
  if (AFDeviceSupportsSAE()) {
    uint64_t v26 = 43;
  }
  else {
    uint64_t v26 = 1;
  }
  uint64_t v27 = specialized Emittable.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(v24, (uint64_t)v22, v26);
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = objc_msgSend(self, sel_processInfo);
    char v30 = NSProcessInfo.isRunningUnitTests.getter();

    if (v30) {
      id v31 = (id)((uint64_t (*)(void))(*v69)[12])();
    }
    else {
      id v31 = objc_msgSend(self, sel_sharedStream);
    }
    uint64_t v69 = (void **)(v7 + 32);
    objc_msgSend(v31, sel_emitMessage_, v28);
    swift_unknownObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    uint64_t v48 = __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v48);
    uint64_t v49 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v49, v25, v6);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v64 = &v62;
      uint64_t v53 = v52;
      uint64_t v63 = swift_slowAlloc();
      uint64_t v73 = v63;
      *(_DWORD *)uint64_t v53 = 136315394;
      uint64_t v54 = SISchemaComponentName.description.getter();
      uint64_t v70 = v10;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v73);
      uint64_t v65 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v73);
      uint64_t v25 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v58 = *(void (**)(char *, uint64_t))(v7 + 8);
      v58(v49, v6);
      _os_log_impl(&dword_1C8F83000, v50, v51, "[SELF Logging] Logged request link event with component:%s, ID: %s", (uint8_t *)v53, 0x16u);
      uint64_t v59 = v63;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v59, -1, -1);
      MEMORY[0x1CB77E470](v53, -1, -1);

      v58(v70, v6);
    }
    else
    {

      unint64_t v60 = *(void (**)(char *, uint64_t))(v7 + 8);
      v60(v49, v6);
      v60(v10, v6);
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v33);
    unint64_t v34 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v34, v22, v6);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v69 = (void **)(v7 + 32);
      uint64_t v38 = v37;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v65 = (char *)&v62 - v9;
      uint64_t v40 = v39;
      uint64_t v73 = v39;
      *(_DWORD *)uint64_t v38 = 136315394;
      uint64_t v41 = SISchemaComponentName.description.getter();
      uint64_t v70 = (char *)&v62 - v9;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v73);
      uint64_t v64 = &v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v7 + 8);
      v45(v34, v6);
      _os_log_impl(&dword_1C8F83000, v35, v36, "[SELF Logging] Unable to log request link event with component:%s, ID: %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      uint64_t v46 = v40;
      uint64_t v25 = v65;
      MEMORY[0x1CB77E470](v46, -1, -1);
      MEMORY[0x1CB77E470](v38, -1, -1);

      v45(v70, v6);
    }
    else
    {

      uint64_t v61 = *(void (**)(char *, uint64_t))(v7 + 8);
      v61(v34, v6);
      v61(v10, v6);
    }
  }
  return v68(v71, v25, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char *v22;
  void (*v23)(void, char *);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  id v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t (*v68)(char *, char *, uint64_t);
  void **v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;

  if (!a3) {
    goto LABEL_4;
  }
  LODWORD(v70) = a1;
  uint64_t v71 = a4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  char v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
LABEL_4:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v73 = v18;
      *(_DWORD *)os_log_type_t v17 = 136315138;
      if (a3)
      {
        unint64_t v19 = a3;
      }
      else
      {
        a2 = 7104878;
        unint64_t v19 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v19, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v15, v16, "[SELF Logging] Unable to create UUID for derived SELF ids from requestId: %s.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v18, -1, -1);
      MEMORY[0x1CB77E470](v17, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return UUID.init()();
  }
  uint64_t v66 = &v62;
  unsigned int v68 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v21 = v68((char *)&v62 - v9, v13, v6);
  uint64_t v67 = &v62;
  MEMORY[0x1F4188790](v21);
  uint64_t v22 = (char *)&v62 - v9;
  uint64_t v23 = *(void (**)(void, char *))(*v69[3] + 88);
  swift_retain();
  uint64_t v24 = v70;
  v23(v70, v10);
  uint64_t v25 = (char *)&v62 - v9;
  swift_release();
  if (AFDeviceSupportsSAE()) {
    uint64_t v26 = 43;
  }
  else {
    uint64_t v26 = 1;
  }
  uint64_t v27 = specialized Emittable.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(v24, (uint64_t)v22, v26);
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = objc_msgSend(self, sel_processInfo);
    char v30 = NSProcessInfo.isRunningUnitTests.getter();

    if (v30) {
      id v31 = (id)((uint64_t (*)(void))(*v69)[12])();
    }
    else {
      id v31 = objc_msgSend(self, sel_sharedStream);
    }
    uint64_t v69 = (void **)(v7 + 32);
    objc_msgSend(v31, sel_emitMessage_, v28);
    swift_unknownObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    uint64_t v48 = __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v48);
    uint64_t v49 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v49, v25, v6);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v64 = &v62;
      uint64_t v53 = v52;
      uint64_t v63 = swift_slowAlloc();
      uint64_t v73 = v63;
      *(_DWORD *)uint64_t v53 = 136315394;
      uint64_t v54 = SISchemaComponentName.description.getter();
      uint64_t v70 = v10;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v73);
      uint64_t v65 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v73);
      uint64_t v25 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v58 = *(void (**)(char *, uint64_t))(v7 + 8);
      v58(v49, v6);
      _os_log_impl(&dword_1C8F83000, v50, v51, "[SELF Logging] Logged request link event with component:%s, ID: %s", (uint8_t *)v53, 0x16u);
      uint64_t v59 = v63;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v59, -1, -1);
      MEMORY[0x1CB77E470](v53, -1, -1);

      v58(v70, v6);
    }
    else
    {

      unint64_t v60 = *(void (**)(char *, uint64_t))(v7 + 8);
      v60(v49, v6);
      v60(v10, v6);
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v33);
    unint64_t v34 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v34, v22, v6);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v69 = (void **)(v7 + 32);
      uint64_t v38 = v37;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v65 = (char *)&v62 - v9;
      uint64_t v40 = v39;
      uint64_t v73 = v39;
      *(_DWORD *)uint64_t v38 = 136315394;
      uint64_t v41 = SISchemaComponentName.description.getter();
      uint64_t v70 = (char *)&v62 - v9;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v73);
      uint64_t v64 = &v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v7 + 8);
      v45(v34, v6);
      _os_log_impl(&dword_1C8F83000, v35, v36, "[SELF Logging] Unable to log request link event with component:%s, ID: %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      uint64_t v46 = v40;
      uint64_t v25 = v65;
      MEMORY[0x1CB77E470](v46, -1, -1);
      MEMORY[0x1CB77E470](v38, -1, -1);

      v45(v70, v6);
    }
    else
    {

      uint64_t v61 = *(void (**)(char *, uint64_t))(v7 + 8);
      v61(v34, v6);
      v61(v10, v6);
    }
  }
  return v68(v71, v25, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char *v22;
  void (*v23)(void, char *);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  id v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t (*v68)(char *, char *, uint64_t);
  void **v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;

  if (!a3) {
    goto LABEL_4;
  }
  LODWORD(v70) = a1;
  uint64_t v71 = a4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  char v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
LABEL_4:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v73 = v18;
      *(_DWORD *)os_log_type_t v17 = 136315138;
      if (a3)
      {
        unint64_t v19 = a3;
      }
      else
      {
        a2 = 7104878;
        unint64_t v19 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v19, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v15, v16, "[SELF Logging] Unable to create UUID for derived SELF ids from requestId: %s.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v18, -1, -1);
      MEMORY[0x1CB77E470](v17, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return UUID.init()();
  }
  uint64_t v66 = &v62;
  unsigned int v68 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v21 = v68((char *)&v62 - v9, v13, v6);
  uint64_t v67 = &v62;
  MEMORY[0x1F4188790](v21);
  uint64_t v22 = (char *)&v62 - v9;
  uint64_t v23 = *(void (**)(void, char *))(*v69[3] + 88);
  swift_retain();
  uint64_t v24 = v70;
  v23(v70, v10);
  uint64_t v25 = (char *)&v62 - v9;
  swift_release();
  if (AFDeviceSupportsSAE()) {
    uint64_t v26 = 43;
  }
  else {
    uint64_t v26 = 1;
  }
  uint64_t v27 = specialized Emittable.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(v24, (uint64_t)v22, v26);
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = objc_msgSend(self, sel_processInfo);
    char v30 = NSProcessInfo.isRunningUnitTests.getter();

    if (v30) {
      id v31 = (id)((uint64_t (*)(void))(*v69)[12])();
    }
    else {
      id v31 = objc_msgSend(self, sel_sharedStream);
    }
    uint64_t v69 = (void **)(v7 + 32);
    objc_msgSend(v31, sel_emitMessage_, v28);
    swift_unknownObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    uint64_t v48 = __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v48);
    uint64_t v49 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v49, v25, v6);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v64 = &v62;
      uint64_t v53 = v52;
      uint64_t v63 = swift_slowAlloc();
      uint64_t v73 = v63;
      *(_DWORD *)uint64_t v53 = 136315394;
      uint64_t v54 = SISchemaComponentName.description.getter();
      uint64_t v70 = v10;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v73);
      uint64_t v65 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v73);
      uint64_t v25 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v58 = *(void (**)(char *, uint64_t))(v7 + 8);
      v58(v49, v6);
      _os_log_impl(&dword_1C8F83000, v50, v51, "[SELF Logging] Logged request link event with component:%s, ID: %s", (uint8_t *)v53, 0x16u);
      uint64_t v59 = v63;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v59, -1, -1);
      MEMORY[0x1CB77E470](v53, -1, -1);

      v58(v70, v6);
    }
    else
    {

      unint64_t v60 = *(void (**)(char *, uint64_t))(v7 + 8);
      v60(v49, v6);
      v60(v10, v6);
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v33);
    unint64_t v34 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v34, v22, v6);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v69 = (void **)(v7 + 32);
      uint64_t v38 = v37;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v65 = (char *)&v62 - v9;
      uint64_t v40 = v39;
      uint64_t v73 = v39;
      *(_DWORD *)uint64_t v38 = 136315394;
      uint64_t v41 = SISchemaComponentName.description.getter();
      uint64_t v70 = (char *)&v62 - v9;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v73);
      uint64_t v64 = &v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v7 + 8);
      v45(v34, v6);
      _os_log_impl(&dword_1C8F83000, v35, v36, "[SELF Logging] Unable to log request link event with component:%s, ID: %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      uint64_t v46 = v40;
      uint64_t v25 = v65;
      MEMORY[0x1CB77E470](v46, -1, -1);
      MEMORY[0x1CB77E470](v38, -1, -1);

      v45(v70, v6);
    }
    else
    {

      uint64_t v61 = *(void (**)(char *, uint64_t))(v7 + 8);
      v61(v34, v6);
      v61(v10, v6);
    }
  }
  return v68(v71, v25, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char *v22;
  void (*v23)(void, char *);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  id v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t (*v68)(char *, char *, uint64_t);
  void **v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;

  if (!a3) {
    goto LABEL_4;
  }
  LODWORD(v70) = a1;
  uint64_t v71 = a4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  char v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
LABEL_4:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v73 = v18;
      *(_DWORD *)os_log_type_t v17 = 136315138;
      if (a3)
      {
        unint64_t v19 = a3;
      }
      else
      {
        a2 = 7104878;
        unint64_t v19 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v19, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v15, v16, "[SELF Logging] Unable to create UUID for derived SELF ids from requestId: %s.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v18, -1, -1);
      MEMORY[0x1CB77E470](v17, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return UUID.init()();
  }
  uint64_t v66 = &v62;
  unsigned int v68 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v21 = v68((char *)&v62 - v9, v13, v6);
  uint64_t v67 = &v62;
  MEMORY[0x1F4188790](v21);
  uint64_t v22 = (char *)&v62 - v9;
  uint64_t v23 = *(void (**)(void, char *))(*v69[3] + 88);
  swift_retain();
  uint64_t v24 = v70;
  v23(v70, v10);
  uint64_t v25 = (char *)&v62 - v9;
  swift_release();
  if (AFDeviceSupportsSAE()) {
    uint64_t v26 = 43;
  }
  else {
    uint64_t v26 = 1;
  }
  uint64_t v27 = specialized Emittable.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(v24, (uint64_t)v22, v26);
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = objc_msgSend(self, sel_processInfo);
    char v30 = NSProcessInfo.isRunningUnitTests.getter();

    if (v30) {
      id v31 = (id)((uint64_t (*)(void))(*v69)[12])();
    }
    else {
      id v31 = objc_msgSend(self, sel_sharedStream);
    }
    uint64_t v69 = (void **)(v7 + 32);
    objc_msgSend(v31, sel_emitMessage_, v28);
    swift_unknownObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    uint64_t v48 = __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v48);
    uint64_t v49 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v49, v25, v6);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v64 = &v62;
      uint64_t v53 = v52;
      uint64_t v63 = swift_slowAlloc();
      uint64_t v73 = v63;
      *(_DWORD *)uint64_t v53 = 136315394;
      uint64_t v54 = SISchemaComponentName.description.getter();
      uint64_t v70 = v10;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v73);
      uint64_t v65 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v73);
      uint64_t v25 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v58 = *(void (**)(char *, uint64_t))(v7 + 8);
      v58(v49, v6);
      _os_log_impl(&dword_1C8F83000, v50, v51, "[SELF Logging] Logged request link event with component:%s, ID: %s", (uint8_t *)v53, 0x16u);
      uint64_t v59 = v63;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v59, -1, -1);
      MEMORY[0x1CB77E470](v53, -1, -1);

      v58(v70, v6);
    }
    else
    {

      unint64_t v60 = *(void (**)(char *, uint64_t))(v7 + 8);
      v60(v49, v6);
      v60(v10, v6);
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v33);
    unint64_t v34 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v34, v22, v6);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v69 = (void **)(v7 + 32);
      uint64_t v38 = v37;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v65 = (char *)&v62 - v9;
      uint64_t v40 = v39;
      uint64_t v73 = v39;
      *(_DWORD *)uint64_t v38 = 136315394;
      uint64_t v41 = SISchemaComponentName.description.getter();
      uint64_t v70 = (char *)&v62 - v9;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v73);
      uint64_t v64 = &v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v7 + 8);
      v45(v34, v6);
      _os_log_impl(&dword_1C8F83000, v35, v36, "[SELF Logging] Unable to log request link event with component:%s, ID: %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      uint64_t v46 = v40;
      uint64_t v25 = v65;
      MEMORY[0x1CB77E470](v46, -1, -1);
      MEMORY[0x1CB77E470](v38, -1, -1);

      v45(v70, v6);
    }
    else
    {

      uint64_t v61 = *(void (**)(char *, uint64_t))(v7 + 8);
      v61(v34, v6);
      v61(v10, v6);
    }
  }
  return v68(v71, v25, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char *v22;
  void (*v23)(void, char *);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  id v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t (*v68)(char *, char *, uint64_t);
  void **v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;

  if (!a3) {
    goto LABEL_4;
  }
  LODWORD(v70) = a1;
  uint64_t v71 = a4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  char v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
LABEL_4:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v73 = v18;
      *(_DWORD *)os_log_type_t v17 = 136315138;
      if (a3)
      {
        unint64_t v19 = a3;
      }
      else
      {
        a2 = 7104878;
        unint64_t v19 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v19, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v15, v16, "[SELF Logging] Unable to create UUID for derived SELF ids from requestId: %s.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v18, -1, -1);
      MEMORY[0x1CB77E470](v17, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return UUID.init()();
  }
  uint64_t v66 = &v62;
  unsigned int v68 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v21 = v68((char *)&v62 - v9, v13, v6);
  uint64_t v67 = &v62;
  MEMORY[0x1F4188790](v21);
  uint64_t v22 = (char *)&v62 - v9;
  uint64_t v23 = *(void (**)(void, char *))(*v69[3] + 88);
  swift_retain();
  uint64_t v24 = v70;
  v23(v70, v10);
  uint64_t v25 = (char *)&v62 - v9;
  swift_release();
  if (AFDeviceSupportsSAE()) {
    uint64_t v26 = 43;
  }
  else {
    uint64_t v26 = 1;
  }
  uint64_t v27 = specialized Emittable.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(v24, (uint64_t)v22, v26);
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = objc_msgSend(self, sel_processInfo);
    char v30 = NSProcessInfo.isRunningUnitTests.getter();

    if (v30) {
      id v31 = (id)((uint64_t (*)(void))(*v69)[12])();
    }
    else {
      id v31 = objc_msgSend(self, sel_sharedStream);
    }
    uint64_t v69 = (void **)(v7 + 32);
    objc_msgSend(v31, sel_emitMessage_, v28);
    swift_unknownObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    uint64_t v48 = __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v48);
    uint64_t v49 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v49, v25, v6);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v64 = &v62;
      uint64_t v53 = v52;
      uint64_t v63 = swift_slowAlloc();
      uint64_t v73 = v63;
      *(_DWORD *)uint64_t v53 = 136315394;
      uint64_t v54 = SISchemaComponentName.description.getter();
      uint64_t v70 = v10;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v73);
      uint64_t v65 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v73);
      uint64_t v25 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v58 = *(void (**)(char *, uint64_t))(v7 + 8);
      v58(v49, v6);
      _os_log_impl(&dword_1C8F83000, v50, v51, "[SELF Logging] Logged request link event with component:%s, ID: %s", (uint8_t *)v53, 0x16u);
      uint64_t v59 = v63;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v59, -1, -1);
      MEMORY[0x1CB77E470](v53, -1, -1);

      v58(v70, v6);
    }
    else
    {

      unint64_t v60 = *(void (**)(char *, uint64_t))(v7 + 8);
      v60(v49, v6);
      v60(v10, v6);
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v33);
    unint64_t v34 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v34, v22, v6);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v69 = (void **)(v7 + 32);
      uint64_t v38 = v37;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v65 = (char *)&v62 - v9;
      uint64_t v40 = v39;
      uint64_t v73 = v39;
      *(_DWORD *)uint64_t v38 = 136315394;
      uint64_t v41 = SISchemaComponentName.description.getter();
      uint64_t v70 = (char *)&v62 - v9;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v73);
      uint64_t v64 = &v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v7 + 8);
      v45(v34, v6);
      _os_log_impl(&dword_1C8F83000, v35, v36, "[SELF Logging] Unable to log request link event with component:%s, ID: %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      uint64_t v46 = v40;
      uint64_t v25 = v65;
      MEMORY[0x1CB77E470](v46, -1, -1);
      MEMORY[0x1CB77E470](v38, -1, -1);

      v45(v70, v6);
    }
    else
    {

      uint64_t v61 = *(void (**)(char *, uint64_t))(v7 + 8);
      v61(v34, v6);
      v61(v10, v6);
    }
  }
  return v68(v71, v25, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char *v22;
  void (*v23)(void, char *);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  id v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t (*v68)(char *, char *, uint64_t);
  void **v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;

  if (!a3) {
    goto LABEL_4;
  }
  LODWORD(v70) = a1;
  uint64_t v71 = a4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)&v62 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  char v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
LABEL_4:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v73 = v18;
      *(_DWORD *)os_log_type_t v17 = 136315138;
      if (a3)
      {
        unint64_t v19 = a3;
      }
      else
      {
        a2 = 7104878;
        unint64_t v19 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v19, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v15, v16, "[SELF Logging] Unable to create UUID for derived SELF ids from requestId: %s.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v18, -1, -1);
      MEMORY[0x1CB77E470](v17, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return UUID.init()();
  }
  uint64_t v66 = &v62;
  unsigned int v68 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v21 = v68((char *)&v62 - v9, v13, v6);
  uint64_t v67 = &v62;
  MEMORY[0x1F4188790](v21);
  uint64_t v22 = (char *)&v62 - v9;
  uint64_t v23 = *(void (**)(void, char *))(*v69[3] + 88);
  swift_retain();
  uint64_t v24 = v70;
  v23(v70, v10);
  uint64_t v25 = (char *)&v62 - v9;
  swift_release();
  if (AFDeviceSupportsSAE()) {
    uint64_t v26 = 43;
  }
  else {
    uint64_t v26 = 1;
  }
  uint64_t v27 = specialized Emittable.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(v24, (uint64_t)v22, v26);
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = objc_msgSend(self, sel_processInfo);
    char v30 = NSProcessInfo.isRunningUnitTests.getter();

    if (v30) {
      id v31 = (id)((uint64_t (*)(void))(*v69)[12])();
    }
    else {
      id v31 = objc_msgSend(self, sel_sharedStream);
    }
    uint64_t v69 = (void **)(v7 + 32);
    objc_msgSend(v31, sel_emitMessage_, v28);
    swift_unknownObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    uint64_t v48 = __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v48);
    uint64_t v49 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v49, v25, v6);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v64 = &v62;
      uint64_t v53 = v52;
      uint64_t v63 = swift_slowAlloc();
      uint64_t v73 = v63;
      *(_DWORD *)uint64_t v53 = 136315394;
      uint64_t v54 = SISchemaComponentName.description.getter();
      uint64_t v70 = v10;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v73);
      uint64_t v65 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v73);
      uint64_t v25 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v58 = *(void (**)(char *, uint64_t))(v7 + 8);
      v58(v49, v6);
      _os_log_impl(&dword_1C8F83000, v50, v51, "[SELF Logging] Logged request link event with component:%s, ID: %s", (uint8_t *)v53, 0x16u);
      uint64_t v59 = v63;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v59, -1, -1);
      MEMORY[0x1CB77E470](v53, -1, -1);

      v58(v70, v6);
    }
    else
    {

      unint64_t v60 = *(void (**)(char *, uint64_t))(v7 + 8);
      v60(v49, v6);
      v60(v10, v6);
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
    MEMORY[0x1F4188790](v33);
    unint64_t v34 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v34, v22, v6);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v69 = (void **)(v7 + 32);
      uint64_t v38 = v37;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v65 = (char *)&v62 - v9;
      uint64_t v40 = v39;
      uint64_t v73 = v39;
      *(_DWORD *)uint64_t v38 = 136315394;
      uint64_t v41 = SISchemaComponentName.description.getter();
      uint64_t v70 = (char *)&v62 - v9;
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v73);
      uint64_t v64 = &v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v7 + 8);
      v45(v34, v6);
      _os_log_impl(&dword_1C8F83000, v35, v36, "[SELF Logging] Unable to log request link event with component:%s, ID: %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      uint64_t v46 = v40;
      uint64_t v25 = v65;
      MEMORY[0x1CB77E470](v46, -1, -1);
      MEMORY[0x1CB77E470](v38, -1, -1);

      v45(v70, v6);
    }
    else
    {

      uint64_t v61 = *(void (**)(char *, uint64_t))(v7 + 8);
      v61(v34, v6);
      v61(v10, v6);
    }
  }
  return v68(v71, v25, v6);
}

void AnalyticsComponentIdGenerator.derivedIdentifier(for:from:)(uint64_t a1)
{
  uint64_t v2 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v4 = objc_msgSend(v2, sel_derivedIdentifierForComponent_fromSourceIdentifier_, a1, isa);

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

NSObject *specialized Emittable.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA12F8]), sel_init);
  if (!v5)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v39 = v20;
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v21 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v23 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v6, v18, "Failed to create RequestLink event for source component: %s and target component: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v20, -1, -1);
      MEMORY[0x1CB77E470](v19, -1, -1);
    }
    goto LABEL_18;
  }
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1308]), sel_init);
  if (!v7)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v39 = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v30 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v26, v27, "Failed to create source link event for source component: %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v29, -1, -1);
      MEMORY[0x1CB77E470](v28, -1, -1);
    }
LABEL_17:

LABEL_18:
    return 0;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1308]), sel_init);
  if (!v9)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v33))
    {

      return 0;
    }
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v39 = v35;
    *(_DWORD *)unint64_t v34 = 136315138;
    uint64_t v36 = SISchemaComponentName.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v26, v33, "Failed to create target link event for target component: %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v35, -1, -1);
    MEMORY[0x1CB77E470](v34, -1, -1);

    goto LABEL_17;
  }
  uint64_t v10 = v9;
  objc_msgSend(v8, sel_setComponent_, a1);
  id v11 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v13 = objc_msgSend(v11, sel_initWithNSUUID_, isa);

  objc_msgSend(v8, sel_setUuid_, v13);
  objc_msgSend(v10, sel_setComponent_, a3);
  id v14 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
  Class v15 = UUID._bridgeToObjectiveC()().super.isa;
  id v16 = objc_msgSend(v14, sel_initWithNSUUID_, v15);

  objc_msgSend(v10, sel_setUuid_, v16);
  [v6 setSource:v8];
  [v6 setTarget:v10];

  return v6;
}

{
  NSObject *v5;
  NSObject *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  Class isa;
  id v13;
  id v14;
  Class v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;

  uint64_t v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA12F8]), sel_init);
  if (!v5)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v39 = v20;
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v21 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v23 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v6, v18, "Failed to create RequestLink event for source component: %s and target component: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v20, -1, -1);
      MEMORY[0x1CB77E470](v19, -1, -1);
    }
    goto LABEL_18;
  }
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1308]), sel_init);
  if (!v7)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v39 = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v30 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v26, v27, "Failed to create source link event for source component: %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v29, -1, -1);
      MEMORY[0x1CB77E470](v28, -1, -1);
    }
LABEL_17:

LABEL_18:
    return 0;
  }
  uint64_t v8 = v7;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1308]), sel_init);
  if (!v9)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v33))
    {

      return 0;
    }
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v39 = v35;
    *(_DWORD *)unint64_t v34 = 136315138;
    uint64_t v36 = SISchemaComponentName.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v26, v33, "Failed to create target link event for target component: %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v35, -1, -1);
    MEMORY[0x1CB77E470](v34, -1, -1);

    goto LABEL_17;
  }
  uint64_t v10 = v9;
  objc_msgSend(v8, sel_setComponent_, a1);
  id v11 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v13 = objc_msgSend(v11, sel_initWithNSUUID_, isa);

  objc_msgSend(v8, sel_setUuid_, v13);
  objc_msgSend(v10, sel_setComponent_, a3);
  id v14 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
  Class v15 = UUID._bridgeToObjectiveC()().super.isa;
  id v16 = objc_msgSend(v14, sel_initWithNSUUID_, v15);

  objc_msgSend(v10, sel_setUuid_, v16);
  [v6 setSource:v8];
  [v6 setTarget:v10];

  return v6;
}

uint64_t NSProcessInfo.isRunningUnitTests.getter()
{
  id v1 = objc_msgSend(v0, sel_environment);
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v2 + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x80000001C919E760), (v3 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      unint64_t v7 = 0xE500000000000000;
      unint64_t v8 = 0x65726E6567;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE600000000000000;
          unint64_t v8 = 0x747369747261;
          break;
        case 2:
          unint64_t v8 = 0x6F65646976;
          break;
        case 3:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x7473696C79616C70;
          break;
        case 4:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x6E6F6974617473;
          break;
        case 5:
          unint64_t v7 = 0x80000001C919C350;
          unint64_t v8 = 0xD000000000000015;
          break;
        case 6:
          unint64_t v8 = 0x6F68536F69646172;
          unint64_t v7 = 0xE900000000000077;
          break;
        case 7:
          unint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1735290739;
          break;
        case 8:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x5573656E755469;
          break;
        case 9:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x74736163646F70;
          break;
        case 0xA:
          unint64_t v8 = 0x646956636973756DLL;
          unint64_t v7 = 0xEA00000000006F65;
          break;
        case 0xB:
          unint64_t v8 = 0x636973756DLL;
          break;
        case 0xC:
          unint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1937204590;
          break;
        case 0xD:
          unint64_t v7 = 0xE600000000000000;
          unint64_t v8 = 0x776F68537674;
          break;
        case 0xE:
          unint64_t v8 = 0x6D75626C61;
          break;
        case 0xF:
          unint64_t v7 = 0xE800000000000000;
          unint64_t v8 = 0x656E6F74676E6972;
          break;
        case 0x10:
          unint64_t v7 = 0xE200000000000000;
          unint64_t v8 = 28780;
          break;
        case 0x11:
          unint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 2003789939;
          break;
        case 0x12:
          unint64_t v8 = 0x6174536F69646172;
          unint64_t v7 = 0xEC0000006E6F6974;
          break;
        case 0x13:
          unint64_t v7 = 0xE200000000000000;
          unint64_t v8 = 28773;
          break;
        case 0x14:
          unint64_t v7 = 0xE600000000000000;
          unint64_t v8 = 0x656C676E6973;
          break;
        case 0x15:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x65646F73697065;
          break;
        case 0x16:
          unint64_t v8 = 0x5374736163646F70;
          unint64_t v7 = 0xEE006E6F69746174;
          break;
        case 0x17:
          unint64_t v7 = 0xE600000000000000;
          unint64_t v8 = 0x73646E756F73;
          break;
        case 0x18:
          unint64_t v8 = 0x74616C69706D6F63;
          unint64_t v7 = 0xEB000000006E6F69;
          break;
        case 0x19:
          unint64_t v8 = 0x6569766F6DLL;
          break;
        case 0x1A:
          unint64_t v8 = 0x6F6F426F69647561;
          unint64_t v7 = 0xE90000000000006BLL;
          break;
        case 0x1B:
          unint64_t v8 = 0x616C50636973756DLL;
          unint64_t v7 = 0xED00007473696C79;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE500000000000000;
      uint64_t v10 = 0x65726E6567;
      switch(a1)
      {
        case 1:
          unint64_t v9 = 0xE600000000000000;
          if (v8 == 0x747369747261) {
            goto LABEL_84;
          }
          goto LABEL_85;
        case 2:
          if (v8 != 0x6F65646976) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 3:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x7473696C79616C70) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 4:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x6E6F6974617473) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 5:
          unint64_t v9 = 0x80000001C919C350;
          if (v8 != 0xD000000000000015) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 6:
          unint64_t v9 = 0xE900000000000077;
          if (v8 != 0x6F68536F69646172) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 7:
          unint64_t v9 = 0xE400000000000000;
          if (v8 != 1735290739) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 8:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x5573656E755469) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 9:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x74736163646F70) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 10:
          unint64_t v9 = 0xEA00000000006F65;
          if (v8 != 0x646956636973756DLL) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 11:
          if (v8 != 0x636973756DLL) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 12:
          unint64_t v9 = 0xE400000000000000;
          if (v8 != 1937204590) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 13:
          unint64_t v9 = 0xE600000000000000;
          if (v8 != 0x776F68537674) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 14:
          if (v8 != 0x6D75626C61) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 15:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x656E6F74676E6972) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 16:
          unint64_t v9 = 0xE200000000000000;
          if (v8 != 28780) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 17:
          unint64_t v9 = 0xE400000000000000;
          if (v8 != 2003789939) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 18:
          unint64_t v9 = 0xEC0000006E6F6974;
          if (v8 != 0x6174536F69646172) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 19:
          unint64_t v9 = 0xE200000000000000;
          if (v8 != 28773) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 20:
          unint64_t v9 = 0xE600000000000000;
          if (v8 != 0x656C676E6973) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 21:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x65646F73697065) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 22:
          unint64_t v9 = 0xEE006E6F69746174;
          if (v8 != 0x5374736163646F70) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 23:
          unint64_t v9 = 0xE600000000000000;
          if (v8 != 0x73646E756F73) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 24:
          unint64_t v9 = 0xEB000000006E6F69;
          if (v8 != 0x74616C69706D6F63) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 25:
          if (v8 != 0x6569766F6DLL) {
            goto LABEL_85;
          }
          goto LABEL_84;
        case 26:
          uint64_t v10 = 0x6F6F426F69647561;
          unint64_t v9 = 0xE90000000000006BLL;
          goto LABEL_83;
        case 27:
          unint64_t v9 = 0xED00007473696C79;
          if (v8 != 0x616C50636973756DLL) {
            goto LABEL_85;
          }
          goto LABEL_84;
        default:
LABEL_83:
          if (v8 != v10) {
            goto LABEL_85;
          }
LABEL_84:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_85:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v6;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = *(void *)&a1920s_1[8 * a1];
    while (*(void *)&a1920s_1[8 * *(char *)(*(void *)(v2 + 48) + v4)] != v6)
    {
      unint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease_n();
      if ((v7 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v11;

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    if (a1) {
      uint64_t v6 = 0x6E65657263536E6FLL;
    }
    else {
      uint64_t v6 = 0xD000000000000013;
    }
    if (a1) {
      unint64_t v7 = 0xEB00000000495255;
    }
    else {
      unint64_t v7 = 0x80000001C919BE40;
    }
    while (1)
    {
      unint64_t v8 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0x6E65657263536E6FLL : 0xD000000000000013;
      unint64_t v9 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0xEB00000000495255 : 0x80000001C919BE40;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    if (a1) {
      uint64_t v6 = 0x636973756DLL;
    }
    else {
      uint64_t v6 = 1701736302;
    }
    if (a1) {
      unint64_t v7 = 0xE500000000000000;
    }
    else {
      unint64_t v7 = 0xE400000000000000;
    }
    while (1)
    {
      unint64_t v8 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0x636973756DLL : 1701736302;
      unint64_t v9 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0xE500000000000000 : 0xE400000000000000;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        id v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  unint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  BOOL v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    Class v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      lazy protocol witness table accessor for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE700000000000000;
      uint64_t v8 = 0x72616C75706F70;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          uint64_t v8 = 0x616C75706F706E75;
          unint64_t v7 = 0xE900000000000072;
          break;
        case 2:
          unint64_t v7 = 0xE400000000000000;
          uint64_t v8 = 1953719650;
          break;
        case 3:
          unint64_t v7 = 0xE500000000000000;
          uint64_t v8 = 0x7473726F77;
          break;
        case 4:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x74736577656ELL;
          break;
        case 5:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x747365646C6FLL;
          break;
        case 6:
          uint64_t v8 = 0x74736574746F68;
          break;
        case 7:
          unint64_t v7 = 0xE800000000000000;
          uint64_t v8 = 0x6572636F6964656DLL;
          break;
        case 8:
          unint64_t v7 = 0xE800000000000000;
          uint64_t v8 = 0x7473657461657267;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE700000000000000;
      uint64_t v10 = 0x72616C75706F70;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0xE900000000000072;
          if (v8 == 0x616C75706F706E75) {
            goto LABEL_27;
          }
          goto LABEL_28;
        case 2:
          unint64_t v9 = 0xE400000000000000;
          if (v8 != 1953719650) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 3:
          unint64_t v9 = 0xE500000000000000;
          if (v8 != 0x7473726F77) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 4:
          unint64_t v9 = 0xE600000000000000;
          uint64_t v11 = 1702323566;
          goto LABEL_21;
        case 5:
          unint64_t v9 = 0xE600000000000000;
          uint64_t v11 = 1701080175;
LABEL_21:
          if (v8 != (v11 & 0xFFFF0000FFFFFFFFLL | 0x747300000000)) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 6:
          if (v8 != 0x74736574746F68) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 7:
          unint64_t v9 = 0xE800000000000000;
          uint64_t v10 = 0x6572636F6964656DLL;
          goto LABEL_26;
        case 8:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x7473657461657267) {
            goto LABEL_28;
          }
          goto LABEL_27;
        default:
LABEL_26:
          if (v8 != v10) {
            goto LABEL_28;
          }
LABEL_27:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_28:
          char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v12) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x1CB77D470](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  uint64_t v3 = v2 + 64;
  unint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      char v12 = ~v4;
      uint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          unint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          Class v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id closure #1 in Emittable.eventWrapper(requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  unint64_t v9 = (uint64_t *)((char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v61 - v10;
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1078]), sel_init);
  if (v12)
  {
    id v13 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
    id v14 = v12;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v16 = objc_msgSend(v13, sel_initWithNSUUID_, isa);

    objc_msgSend(v14, sel_setPommesId_, v16);
  }
  if (a3)
  {
    uint64_t v62 = (uint64_t *)a4;
    uint64_t v17 = type metadata accessor for UUID();
    uint64_t v61 = (uint64_t)&v61;
    uint64_t v18 = *(void *)(v17 - 8);
    MEMORY[0x1F4188790](v17);
    uint64_t v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    MEMORY[0x1F4188790](v21 - 8);
    uint64_t v23 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    UUID.init(uuidString:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v23, 1, v17) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v23, &demangling cache variable for type metadata for UUID?);
LABEL_13:
      a4 = (uint64_t)v62;
      goto LABEL_14;
    }
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v23, v17);
    if (AFDeviceSupportsSAE())
    {
      if (v12)
      {
        id v24 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
        id v25 = v12;
        v26.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        id v27 = objc_msgSend(v24, sel_initWithNSUUID_, v26.super.isa, v61);
        uint64_t v28 = &selRef_setSubRequestId_;
LABEL_11:

        objc_msgSend(v12, *v28, v27);
      }
    }
    else if (v12)
    {
      id v29 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
      id v30 = v12;
      v26.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v27 = objc_msgSend(v29, sel_initWithNSUUID_, v26.super.isa, v61);
      uint64_t v28 = &selRef_setRequestId_;
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    goto LABEL_13;
  }
LABEL_14:
  outlined init with copy of PommesCandidateId?(a4, (uint64_t)v11);
  uint64_t v31 = type metadata accessor for PommesCandidateId();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v11, 1, v31) == 1)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.pommes);
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v34, v35)) {
      goto LABEL_20;
    }
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    unint64_t v37 = "PommesCandidateId is nil";
LABEL_19:
    _os_log_impl(&dword_1C8F83000, v34, v35, v37, v36, 2u);
    MEMORY[0x1CB77E470](v36, -1, -1);
LABEL_20:

    goto LABEL_39;
  }
  outlined init with copy of PommesCandidateId?((uint64_t)v11, (uint64_t)v9);
  int v38 = (*(uint64_t (**)(uint64_t *, uint64_t))(v32 + 88))(v9, v31);
  if (v38 == *MEMORY[0x1E4F9FE50]) {
    goto LABEL_29;
  }
  if (v38 != *MEMORY[0x1E4F9FE58])
  {
    if (v38 != *MEMORY[0x1E4F9FE48])
    {
      (*(void (**)(uint64_t *, uint64_t))(v32 + 8))(v9, v31);
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v59 = type metadata accessor for Logger();
      __swift_project_value_buffer(v59, (uint64_t)static Logger.pommes);
      unint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v34, v35)) {
        goto LABEL_20;
      }
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      unint64_t v37 = "Unknown PommesCandidateId";
      goto LABEL_19;
    }
LABEL_29:
    (*(void (**)(uint64_t *, uint64_t))(v32 + 96))(v9, v31);
    uint64_t v49 = v9[1];
    if (v12)
    {
      uint64_t v50 = *v9;
      id v51 = v12;
      uint64_t v52 = (void *)MEMORY[0x1CB77CA90](v50, v49);
      swift_bridgeObjectRelease();
      objc_msgSend(v51, sel_setResultCandidateId_, v52);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    goto LABEL_39;
  }
  (*(void (**)(uint64_t *, uint64_t))(v32 + 96))(v9, v31);
  uint64_t v40 = *v9;
  uint64_t v39 = v9[1];
  swift_bridgeObjectRelease();
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  unint64_t v44 = (char *)&v61 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v45 - 8);
  uint64_t v47 = (char *)&v61 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v47, 1, v41) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?((uint64_t)v47, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.pommes);
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v34, v35)) {
      goto LABEL_20;
    }
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    unint64_t v37 = "Unable to create UUID from trpId";
    goto LABEL_19;
  }
  uint64_t v62 = &v61;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v44, v47, v41);
  if (v12)
  {
    id v53 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
    id v54 = v12;
    Class v55 = UUID._bridgeToObjectiveC()().super.isa;
    id v56 = objc_msgSend(v53, sel_initWithNSUUID_, v55);

    objc_msgSend(v54, sel_setTrpId_, v56);
    id v57 = v54;
    uint64_t v58 = (void *)MEMORY[0x1CB77CA90](v40, v39);
    swift_bridgeObjectRelease();
    objc_msgSend(v57, sel_setResultCandidateId_, v58);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
    swift_bridgeObjectRelease();
  }
LABEL_39:
  outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PommesCandidateId?);
  return v12;
}

void PommesRequestInstrumentationUtil.logPSCScoreReported(requestId:pommesCandidateId:score:parserId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v7 = v6;
  uint64_t v11 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v11)
  {
    id v12 = v11;
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA11C0]), sel_init);
    if (v13)
    {
      id v14 = v13;
      objc_msgSend(v13, sel_setScore_, a6);
      objc_msgSend(v14, sel_setClassifierLabel_, specialized PommesRequestInstrumentationUtil.classifierLabel(for:)(a4, a5));
      objc_msgSend(v12, sel_setPommesServiceClassifierScoreReported_, v14);
      Class v15 = self;
      swift_retain();
      id v16 = objc_msgSend(v15, sel_processInfo);
      char v17 = NSProcessInfo.isRunningUnitTests.getter();

      if (v17) {
        id v18 = (id)(*(uint64_t (**)(void))(*(void *)v7 + 96))();
      }
      else {
        id v18 = objc_msgSend(self, sel_sharedStream);
      }
      uint64_t v22 = v18;
      swift_release();
      objc_msgSend(v22, sel_emitMessage_, v12);

      swift_unknownObjectRelease();
      return;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v20, "Unable to log cancelled PSC score reported", v21, 2u);
    MEMORY[0x1CB77E470](v21, -1, -1);
  }
}

uint64_t specialized PommesRequestInstrumentationUtil.classifierLabel(for:)(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001C919BE60
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 1;
  }
  if (a1 == 0xD000000000000024 && a2 == 0x80000001C919BE80
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 2;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x80000001C919BEB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 3;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001C919BED0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 4;
  }
  else
  {
    return 0;
  }
}

uint64_t destroy for PommesSearchRequest(uint64_t a1, int *a2)
{
  type metadata accessor for PommesSearchRequest.ParseState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                + 64);
    uint64_t v10 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v11 = *(void *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
    uint64_t v5 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                + 48);
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
    uint64_t v7 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = a1
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  uint64_t v13 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  }
LABEL_12:
  swift_bridgeObjectRelease();
  uint64_t v15 = a1 + a2[6];
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v17 = *(void *)(v16 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16)) {
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = a1 + a2[10];
  uint64_t v19 = type metadata accessor for PommesContext();
  uint64_t v20 = *(void *)(v19 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  }
  uint64_t v21 = a1 + a2[11];
  uint64_t v22 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v23 = *(void *)(v22 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  }
  swift_release();
  uint64_t v24 = a1 + a2[14];
  uint64_t v25 = type metadata accessor for InputOrigin();
  uint64_t v26 = *(void *)(v25 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25)) {
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t PommesSearch.shouldHandleRequest(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v102 = a2;
  uint64_t v99 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1F4188790](v99);
  uint64_t v101 = (uint64_t)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (int *)type metadata accessor for PommesSearchRequest(0);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v100 = (uint64_t)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v97 - v19;
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)&v97 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v26 = (char *)&v97 - v25;
  int v27 = *(unsigned __int8 *)(a1 + *(int *)(v24 + 80));
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)&v97 - v25, type metadata accessor for PommesSearchRequest);
  if (v27 != 1)
  {
    uint64_t v29 = outlined destroy of PommesSearchRequest((uint64_t)v26, type metadata accessor for PommesSearchRequest);
LABEL_9:
    uint64_t v98 = 0xD000000000000012;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 152))(v104, v29);
    uint64_t v39 = v105;
    uint64_t v38 = v106;
    __swift_project_boxed_opaque_existential_1(v104, v105);
    char v40 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v38 + 8))(0, v39, v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
    outlined init with copy of PommesSearchRequest(a1, (uint64_t)v23, type metadata accessor for PommesSearchRequest);
    if (v40)
    {
      uint64_t v41 = *(void *)(PommesSearchRequest.otherSalientParses()() + 16);
      swift_bridgeObjectRelease();
      outlined destroy of PommesSearchRequest((uint64_t)v23, type metadata accessor for PommesSearchRequest);
      uint64_t v42 = (uint64_t)v14;
      if (!v41)
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v43 = type metadata accessor for Logger();
        __swift_project_value_buffer(v43, (uint64_t)static Logger.pommes);
        unint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v46 = 0;
          _os_log_impl(&dword_1C8F83000, v44, v45, "NL server fallback is disabled and there are no other salient parses. POMMES may act as fallback.", v46, 2u);
          MEMORY[0x1CB77E470](v46, -1, -1);
        }

        uint64_t v47 = *MEMORY[0x1E4F9FE88];
        uint64_t v48 = type metadata accessor for PommesSearchReason();
        uint64_t v49 = *(void *)(v48 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 104))(v14, v47, v48);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v14, 0, 1, v48);
        uint64_t v98 = 0xD000000000000028;
        uint64_t v50 = "Accepting anyway due to POMMES fallback.";
        goto LABEL_32;
      }
    }
    else
    {
      outlined destroy of PommesSearchRequest((uint64_t)v23, type metadata accessor for PommesSearchRequest);
      uint64_t v42 = (uint64_t)v14;
    }
    int v51 = *(unsigned __int8 *)(a1 + v15[17]);
    outlined init with copy of PommesSearchRequest(a1, (uint64_t)v20, type metadata accessor for PommesSearchRequest);
    if (v51 == 1)
    {
      outlined init with copy of MediaUserStateCenter?((uint64_t)&v20[v15[10]], (uint64_t)v11, &demangling cache variable for type metadata for PommesContext?);
      uint64_t v52 = type metadata accessor for PommesContext();
      uint64_t v53 = *(void *)(v52 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v11, 1, v52) == 1)
      {
        outlined destroy of PommesSearchRequest((uint64_t)v20, type metadata accessor for PommesSearchRequest);
        outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PommesContext?);
      }
      else
      {
        char v54 = PommesContext.isConfirmation.getter();
        outlined destroy of PommesSearchRequest((uint64_t)v20, type metadata accessor for PommesSearchRequest);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v52);
        if (v54)
        {
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v55 = type metadata accessor for Logger();
          __swift_project_value_buffer(v55, (uint64_t)static Logger.pommes);
          id v56 = Logger.logObject.getter();
          os_log_type_t v57 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v56, v57))
          {
            uint64_t v58 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v58 = 0;
            _os_log_impl(&dword_1C8F83000, v56, v57, "POMMES may act as fallback for the head gesture initiated search.", v58, 2u);
            MEMORY[0x1CB77E470](v58, -1, -1);
          }

          uint64_t v59 = *MEMORY[0x1E4F9FE98];
          uint64_t v60 = type metadata accessor for PommesSearchReason();
          uint64_t v61 = *(void *)(v60 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 104))(v42, v59, v60);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v42, 0, 1, v60);
          uint64_t v98 = 0xD000000000000047;
          uint64_t v50 = "Accepting anyway due to POMMES fallback for head gestures based search.";
LABEL_32:
          unint64_t v67 = (unint64_t)(v50 - 32) | 0x8000000000000000;
          outlined init with copy of MediaUserStateCenter?(a1 + v15[11], (uint64_t)v8, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
          uint64_t v68 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
          int v69 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v68 - 8) + 48))(v8, 1, v68);
          outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
          if (v69 == 1)
          {
            if (one-time initialization token for pommes != -1) {
              swift_once();
            }
            uint64_t v70 = type metadata accessor for Logger();
            __swift_project_value_buffer(v70, (uint64_t)static Logger.pommes);
            swift_bridgeObjectRetain();
            uint64_t v71 = Logger.logObject.getter();
            os_log_type_t v72 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v71, v72))
            {
              uint64_t v73 = swift_slowAlloc();
              uint64_t v74 = swift_slowAlloc();
              v104[0] = v74;
              *(_DWORD *)uint64_t v73 = 136446210;
              swift_bridgeObjectRetain();
              uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v67, v104);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              id v75 = "No delegatedUDA from PSC parsers. %{public}s";
              unint64_t v76 = v71;
              os_log_type_t v77 = v72;
              uint64_t v78 = (uint8_t *)v73;
              uint32_t v79 = 12;
LABEL_42:
              _os_log_impl(&dword_1C8F83000, v76, v77, v75, v78, v79);
              swift_arrayDestroy();
              MEMORY[0x1CB77E470](v74, -1, -1);
              MEMORY[0x1CB77E470](v73, -1, -1);

              return outlined init with take of PommesSearchReason?(v42, v102, &demangling cache variable for type metadata for PommesSearchReason?);
            }
          }
          else
          {
            double v80 = *(double *)(a1 + v15[12]);
            if (specialized static PommesSearchRequest.pommesDUDAThreshold.getter() <= v80)
            {
              swift_bridgeObjectRelease();
              uint64_t v84 = v101;
              outlined init with copy of PommesSearchRequest(a1, v101, type metadata accessor for PommesSearchRequest.ParseState);
              if (swift_getEnumCaseMultiPayload() == 2)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v85 = v84
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                             + 64);
                swift_bridgeObjectRelease();
                outlined destroy of MediaUserStateCenter?(v85, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
                if (one-time initialization token for pommes != -1) {
                  swift_once();
                }
                uint64_t v86 = type metadata accessor for Logger();
                __swift_project_value_buffer(v86, (uint64_t)static Logger.pommes);
                uint64_t v87 = Logger.logObject.getter();
                os_log_type_t v88 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v87, v88))
                {
                  uint64_t v89 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v89 = 0;
                  _os_log_impl(&dword_1C8F83000, v87, v88, "Found PSC parse with high confidence from SARDRunPommesRequest. Accepting search for POMMES.", v89, 2u);
                  MEMORY[0x1CB77E470](v89, -1, -1);
                }

                outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for PommesSearchReason?);
                id v90 = (unsigned int *)MEMORY[0x1E4F9FE78];
              }
              else
              {
                outlined destroy of PommesSearchRequest(v84, type metadata accessor for PommesSearchRequest.ParseState);
                if (one-time initialization token for pommes != -1) {
                  swift_once();
                }
                uint64_t v92 = type metadata accessor for Logger();
                __swift_project_value_buffer(v92, (uint64_t)static Logger.pommes);
                uint64_t v93 = Logger.logObject.getter();
                os_log_type_t v94 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v93, v94))
                {
                  uint64_t v95 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v95 = 0;
                  _os_log_impl(&dword_1C8F83000, v93, v94, "Found PSC parse with high confidence. Accepting search for POMMES.", v95, 2u);
                  MEMORY[0x1CB77E470](v95, -1, -1);
                }

                outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for PommesSearchReason?);
                id v90 = (unsigned int *)MEMORY[0x1E4F9FE80];
              }
              uint64_t v96 = *v90;
              uint64_t v35 = type metadata accessor for PommesSearchReason();
              uint64_t v36 = *(void *)(v35 - 8);
              uint64_t v37 = v102;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 104))(v102, v96, v35);
              return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v35);
            }
            if (one-time initialization token for pommes != -1) {
              swift_once();
            }
            uint64_t v81 = type metadata accessor for Logger();
            __swift_project_value_buffer(v81, (uint64_t)static Logger.pommes);
            uint64_t v82 = v100;
            outlined init with copy of PommesSearchRequest(a1, v100, type metadata accessor for PommesSearchRequest);
            swift_bridgeObjectRetain();
            uint64_t v71 = Logger.logObject.getter();
            os_log_type_t v83 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v71, v83))
            {
              uint64_t v73 = swift_slowAlloc();
              uint64_t v74 = swift_slowAlloc();
              v104[0] = v74;
              *(_DWORD *)uint64_t v73 = 134218242;
              uint64_t v103 = *(void *)(v82 + v15[12]);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              outlined destroy of PommesSearchRequest(v82, type metadata accessor for PommesSearchRequest);
              *(_WORD *)(v73 + 12) = 2082;
              swift_bridgeObjectRetain();
              uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v67, v104);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              id v75 = "Low PSC score: %f. %{public}s";
              unint64_t v76 = v71;
              os_log_type_t v77 = v83;
              uint64_t v78 = (uint8_t *)v73;
              uint32_t v79 = 22;
              goto LABEL_42;
            }
            outlined destroy of PommesSearchRequest(v82, type metadata accessor for PommesSearchRequest);
          }

          swift_bridgeObjectRelease_n();
          return outlined init with take of PommesSearchReason?(v42, v102, &demangling cache variable for type metadata for PommesSearchReason?);
        }
      }
    }
    else
    {
      outlined destroy of PommesSearchRequest((uint64_t)v20, type metadata accessor for PommesSearchRequest);
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.pommes);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl(&dword_1C8F83000, v63, v64, "NL server fallback is enabled, or there are other salient parses available. POMMES will not act as fallback.", v65, 2u);
      MEMORY[0x1CB77E470](v65, -1, -1);
    }

    uint64_t v66 = type metadata accessor for PommesSearchReason();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v42, 1, 1, v66);
    uint64_t v50 = "Rejecting request.";
    goto LABEL_32;
  }
  uint64_t v28 = *(void *)(PommesSearchRequest.userParses.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v29 = outlined destroy of PommesSearchRequest((uint64_t)v26, type metadata accessor for PommesSearchRequest);
  if (!v28) {
    goto LABEL_9;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl(&dword_1C8F83000, v31, v32, "Search request specified fallback and had any parse. Handle it in POMMES.", v33, 2u);
    MEMORY[0x1CB77E470](v33, -1, -1);
  }

  uint64_t v34 = *MEMORY[0x1E4F9FE90];
  uint64_t v35 = type metadata accessor for PommesSearchReason();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = v102;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 104))(v102, v34, v35);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v35);
}

uint64_t outlined init with take of PommesSearchReason?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t PommesSearchRequest.otherSalientParses()()
{
  uint64_t v1 = v0;
  uint64_t v73 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint32_t v79 = *(char **)(v73 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v73);
  id v75 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v74 = (char *)&v58 - v4;
  uint64_t v72 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v5 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72);
  uint64_t v71 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v76 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v60 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v58 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v58 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v58 - v19;
  uint64_t v21 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (uint64_t *)((char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s21SiriInformationSearch06PommesC7RequestV10ParseStateOWOcTm_0(v1, (uint64_t)v26, type metadata accessor for PommesSearchRequest.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v28 = MEMORY[0x1E4FBC860];
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v29 = v5;
      uint64_t v30 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?));
      outlined init with take of PommesSearchReason?((uint64_t)&v26[*(int *)(v31 + 64)], (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v20, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      uint64_t v32 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v18, 1, v32) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        uint64_t v34 = MEMORY[0x1E4FBC860];
      }
      else
      {
        uint64_t v38 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v32);
        uint64_t v34 = NLParseResponse.userParses.getter();
      }
      uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      uint64_t v14 = v30;
      uint64_t v5 = v29;
      uint64_t v28 = MEMORY[0x1E4FBC860];
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = *((void *)v26 + 2);
      uint64_t v37 = (uint64_t)&v26[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                                 + 64)];
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    _s21SiriInformationSearch18NLXResultCandidateVWObTm_0((uint64_t)&v26[*(int *)(v35 + 48)], (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
    uint64_t v34 = *v23;
    swift_bridgeObjectRetain();
    uint64_t result = _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  }
  uint64_t v80 = v28;
  uint64_t v70 = *(void *)(v34 + 16);
  if (!v70)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return v80;
  }
  unint64_t v39 = 0;
  uint64_t v69 = v76 + 16;
  unint64_t v67 = (void (**)(char *, uint64_t))(v5 + 8);
  unsigned int v66 = *MEMORY[0x1E4FA2780];
  os_log_type_t v64 = (void (**)(char *, uint64_t))(v79 + 8);
  uint64_t v65 = (void (**)(char *, void, uint64_t))(v79 + 104);
  uint64_t v59 = (void (**)(char *, char *, uint64_t))(v76 + 32);
  uint64_t v62 = (void (**)(char *, uint64_t))(v76 + 8);
  uint64_t v61 = (v76 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v63 = v34;
  uint64_t v68 = v7;
  while (v39 < *(void *)(v34 + 16))
  {
    unint64_t v41 = (*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
    uint64_t v77 = *(void *)(v76 + 72);
    unint64_t v78 = v41;
    uint32_t v79 = *(char **)(v76 + 16);
    ((void (*)(char *, unint64_t, uint64_t))v79)(v14, v34 + v41 + v77 * v39, v7);
    uint64_t v42 = v71;
    Siri_Nlu_External_UserParse.parser.getter();
    uint64_t v43 = v74;
    Siri_Nlu_External_Parser.parserID.getter();
    (*v67)(v42, v72);
    unint64_t v44 = v14;
    os_log_type_t v45 = v12;
    uint64_t v46 = v75;
    uint64_t v47 = v73;
    (*v65)(v75, v66, v73);
    lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier);
    char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v49 = *v64;
    uint64_t v50 = v46;
    uint64_t v12 = v45;
    uint64_t v14 = v44;
    (*v64)(v50, v47);
    int v51 = v43;
    uint64_t v7 = v68;
    v49(v51, v47);
    ((void (*)(char *, char *, uint64_t))v79)(v12, v44, v7);
    if (v48)
    {
      char v40 = *v62;
      (*v62)(v12, v7);
    }
    else
    {
      Siri_Nlu_External_UserParse.comparableProbability.getter();
      double v53 = v52;
      char v40 = *v62;
      (*v62)(v12, v7);
      if (v53 > 0.05)
      {
        char v54 = *v59;
        (*v59)(v60, v14, v7);
        uint64_t v55 = v80;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v55 + 16) + 1, 1);
          uint64_t v55 = v80;
        }
        uint64_t v34 = v63;
        unint64_t v57 = *(void *)(v55 + 16);
        unint64_t v56 = *(void *)(v55 + 24);
        if (v57 >= v56 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
          uint64_t v55 = v80;
        }
        *(void *)(v55 + 16) = v57 + 1;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v54)(v55 + v78 + v57 * v77, v60, v7);
        uint64_t v80 = v55;
        goto LABEL_13;
      }
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v40)(v44, v7);
    uint64_t v34 = v63;
LABEL_13:
    if (v70 == ++v39) {
      goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of PommesSearchRequest.ParseState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s21SiriInformationSearch06PommesC7RequestV10ParseStateOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeWithCopy for SignpostToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

uint64_t outlined init with take of PerformanceUtil.Ticket(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s21SiriInformationSearch15PerformanceUtilC6TicketVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s21SiriInformationSearch15PerformanceUtilC6TicketVWObTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of PerformanceUtil.Ticket(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PerformanceUtil.Ticket(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t type metadata accessor for CNContactStore(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

unint64_t lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError;
  if (!lazy protocol witness table cache variable for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError);
  }
  return result;
}

uint64_t OSSignposter.end(token:message:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v30 = a2;
  uint64_t v5 = type metadata accessor for OSSignpostError();
  uint64_t v28 = *(const char **)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v31 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v32 = *(const char **)a1;
  char v14 = *(unsigned char *)(a1 + 16);
  type metadata accessor for SignpostToken();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v29 = static os_signpost_type_t.end.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v27 = v8;
  if ((v14 & 1) == 0)
  {
    if (!v32)
    {
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_5:

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    }
    goto LABEL_10;
  }
  if ((unint64_t)v32 >> 32)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v32 >> 11 == 27)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  if (v32 >> 16 > 0x10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v32 = &v35;
LABEL_10:
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  uint64_t v17 = v28;
  if ((*((unsigned int (**)(char *, uint64_t))v28 + 11))(v7, v5) == *MEMORY[0x1E4FBD340])
  {
    char v18 = 0;
    char v19 = 0;
    uint64_t v28 = "[Error] Interval already ended";
  }
  else
  {
    (*((void (**)(char *, uint64_t))v17 + 1))(v7, v5);
    uint64_t v28 = "%s";
    char v19 = 2;
    char v18 = 1;
  }
  uint64_t v20 = v27;
  uint64_t v21 = v31;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v31, v13, v27);
  uint64_t v22 = swift_slowAlloc();
  uint64_t v23 = swift_slowAlloc();
  uint64_t v34 = v23;
  *(unsigned char *)uint64_t v22 = v19;
  *(unsigned char *)(v22 + 1) = v18;
  *(_WORD *)(v22 + 2) = 2080;
  swift_bridgeObjectRetain();
  uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, a3, &v34);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  os_signpost_id_t v24 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_1C8F83000, v15, (os_signpost_type_t)v29, v24, v32, v28, (uint8_t *)v22, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1CB77E470](v23, -1, -1);
  MEMORY[0x1CB77E470](v22, -1, -1);

  uint64_t v25 = *(void (**)(char *, uint64_t))(v9 + 8);
  v25(v13, v20);
  return ((uint64_t (*)(char *, uint64_t))v25)(v21, v20);
}

uint64_t type metadata accessor for PommesSearchError(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, type metadata singleton initialization cache for PommesSearchError);
}

id outlined copy of Result<PommesResponse, Error>(id a1)
{
  return a1;
}

uint64_t PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(uint64_t a1, uint64_t a2, int a3)
{
  int v335 = a3;
  uint64_t v337 = a2;
  uint64_t v311 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  MEMORY[0x1F4188790](v311);
  v312 = (char **)((char *)&v306 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v341 = type metadata accessor for PommesError();
  uint64_t v342 = *(void *)(v341 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v341);
  uint64_t v307 = (char *)&v306 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v318 = (char *)&v306 - v8;
  uint64_t v320 = type metadata accessor for UserID();
  uint64_t v319 = *(void *)(v320 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v320);
  uint64_t v309 = (char *)&v306 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  v324 = (char *)&v306 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v343 = (uint64_t)&v306 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v361 = type metadata accessor for PommesSearchReason();
  uint64_t v357 = *(void *)(v361 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v361);
  v314 = (char *)&v306 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v308 = (char *)&v306 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  v317 = (char *)&v306 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v321 = (char *)&v306 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v340 = (char *)&v306 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  v315 = (char *)&v306 - v25;
  MEMORY[0x1F4188790](v24);
  v362 = (char *)&v306 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  uint64_t v323 = (uint64_t)&v306 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  unsigned int v334 = (void **)((char *)&v306 - v30);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  uint64_t v327 = *(void *)(v31 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v31 - 8);
  uint64_t v329 = (uint64_t)&v306 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v313 = (uint64_t)&v306 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v316 = (uint64_t)&v306 - v37;
  uint64_t v328 = v38;
  MEMORY[0x1F4188790](v36);
  uint64_t v360 = (uint64_t)&v306 - v39;
  v358 = (int *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (response: PommesResponse?, error: PommesSearchError?));
  uint64_t v40 = MEMORY[0x1F4188790](v358);
  uint64_t v338 = (uint64_t *)((char *)&v306 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  long long v322 = (id *)((char *)&v306 - v43);
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  v336 = (uint64_t *)((char *)&v306 - v45);
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  v333 = (uint64_t *)((char *)&v306 - v47);
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  v331 = (uint64_t *)((char *)&v306 - v49);
  MEMORY[0x1F4188790](v48);
  v344 = (uint64_t *)((char *)&v306 - v50);
  uint64_t v356 = type metadata accessor for InsightRequestSummaryLogger();
  uint64_t v355 = *(void *)(v356 - 8);
  MEMORY[0x1F4188790](v356);
  v354 = (char *)&v306 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for PommesCandidateId();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(void *)(v53 + 64);
  uint64_t v55 = MEMORY[0x1F4188790](v52);
  v332 = (char *)&v306 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = MEMORY[0x1F4188790](v55);
  long long v330 = (char *)&v306 - v57;
  uint64_t v58 = MEMORY[0x1F4188790](v56);
  uint64_t v339 = (char **)((char *)&v306 - v59);
  uint64_t v60 = MEMORY[0x1F4188790](v58);
  uint64_t v346 = (unsigned int (*)(uint64_t, uint64_t, uint8_t *))((char *)&v306 - v61);
  MEMORY[0x1F4188790](v60);
  uint64_t v63 = (char *)&v306 - v62;
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  uint64_t v65 = MEMORY[0x1F4188790](v64 - 8);
  uint64_t v310 = (uint64_t)&v306 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = MEMORY[0x1F4188790](v65);
  unsigned int v345 = (char *)&v306 - v68;
  MEMORY[0x1F4188790](v67);
  uint64_t v70 = (char *)&v306 - v69;
  uint64_t v71 = (uint8_t *)type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v359 = (char *)*((void *)v71 - 1);
  uint64_t v72 = (void (*)(char *, uint64_t, uint64_t))*((void *)v359 + 7);
  uint64_t v350 = v71;
  v72(v70, 1, 1);
  char v376 = 0;
  uint64_t v73 = RequestProcessorBase.requestQueue.getter();
  uint64_t v74 = *(void (**)(char *, uint64_t, char *))(v53 + 16);
  uint64_t v370 = a1;
  uint64_t v365 = v74;
  uint64_t v366 = v53 + 16;
  v74(v63, a1, (char *)v52);
  uint64_t v75 = *(unsigned __int8 *)(v53 + 80);
  uint64_t v76 = (char *)((v75 + 24) & ~v75);
  uint64_t v326 = v54;
  uint64_t v325 = v75;
  uint64_t v348 = &v76[v54];
  unint64_t v77 = (unint64_t)&v76[v54 + 7] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v347 = v75 | 7;
  uint64_t v78 = swift_allocObject();
  *(void *)(v78 + 16) = v3;
  uint64_t v349 = v76;
  uint64_t v364 = v53;
  uint64_t v80 = *(void (**)(unint64_t, char *, char *))(v53 + 32);
  uint64_t v79 = v53 + 32;
  v353 = v63;
  v368 = (char *)v52;
  v352 = v80;
  v80((unint64_t)&v76[v78], v63, (char *)v52);
  *(void *)(v78 + v77) = &v376;
  unint64_t v369 = v70;
  *(void *)(v78 + ((v77 + 15) & 0xFFFFFFFFFFFFFFF8)) = v70;
  uint64_t v81 = swift_allocObject();
  *(void *)(v81 + 16) = partial apply for closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:);
  *(void *)(v81 + 24) = v78;
  uint64_t v363 = v78;
  v374 = partial apply for thunk for @callee_guaranteed () -> ();
  uint64_t v375 = v81;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  v373 = &block_descriptor_42_0;
  uint64_t v82 = _Block_copy(aBlock);
  v367 = v3;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v73, v82);

  _Block_release(v82);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_97:
    swift_once();
    goto LABEL_9;
  }
  uint64_t v351 = v79;
  if (v376)
  {
    uint64_t v84 = (uint64_t)v369;
    uint64_t v85 = (uint64_t)v345;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v369, (uint64_t)v345, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    uint64_t v86 = v359 + 48;
    uint64_t v87 = (uint64_t (*)(uint64_t, uint64_t, uint8_t *))*((void *)v359 + 6);
    int v88 = v87(v85, 1, v350);
    outlined destroy of MediaUserStateCenter?(v85, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    p_superclass = &OBJC_METACLASS____TtC21SiriInformationSearch26CallContactPreflightClient.superclass;
    if (v88 == 1)
    {
      id v90 = v368;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v91 = type metadata accessor for Logger();
      __swift_project_value_buffer(v91, (uint64_t)static Logger.pommes);
      uint64_t v92 = v332;
      uint64_t v93 = v370;
      v365(v332, v370, v90);
      os_log_type_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v94, v95))
      {
        uint64_t v96 = (uint8_t *)swift_slowAlloc();
        uint64_t v97 = swift_slowAlloc();
        aBlock[0] = v97;
        *(_DWORD *)uint64_t v96 = 136315138;
        uint64_t v98 = PommesCandidateId.description.getter();
        uint64_t v371 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, aBlock);
        uint64_t v84 = (uint64_t)v369;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, char *))(v364 + 8))(v92, v90);
        _os_log_impl(&dword_1C8F83000, v94, v95, "Not posting pommes message, no Pommes state for %s", v96, 0xCu);
        swift_arrayDestroy();
        uint64_t v100 = v97;
        p_superclass = (__objc2_class **)(&OBJC_METACLASS____TtC21SiriInformationSearch26CallContactPreflightClient + 8);
        MEMORY[0x1CB77E470](v100, -1, -1);
        MEMORY[0x1CB77E470](v96, -1, -1);
      }
      else
      {
        (*(void (**)(char *, char *))(v364 + 8))(v92, v90);
      }

      uint64_t v136 = *(uint64_t *)((char *)&p_superclass[75]->isa + (void)v367);
      uint64_t v137 = RequestProcessorBase.requestId.getter();
      uint64_t v139 = v138;
      uint64_t v140 = RequestProcessorBase.rootLevelRequestId.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v136 + 144))(5, v93, v137, v139, v140, v141);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_92;
    }
    uint64_t v346 = (unsigned int (*)(uint64_t, uint64_t, uint8_t *))v87;
    uint64_t v359 = v86;
    uint64_t v111 = v335 & 1;
    os_log_type_t v112 = v344;
    uint64_t v113 = (uint64_t)v344 + v358[12];
    uint64_t v114 = v358;
    uint64_t v115 = *(void *)((char *)v367 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
    uint64_t v116 = RequestProcessorBase.requestId.getter();
    uint64_t v118 = v117;
    uint64_t v119 = RequestProcessorBase.rootLevelRequestId.getter();
    uint64_t v121 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v115 + 160))(v113, v370, v116, v118, v119, v120, v337, v111);
    swift_bridgeObjectRelease();
    uint64_t v122 = (char *)v121;
    swift_bridgeObjectRelease();
    *os_log_type_t v112 = v121;
    uint64_t v123 = v114[12];
    uint64_t v124 = v331;
    uint64_t v125 = (uint64_t)v331 + v123;
    void *v331 = v122;
    outlined init with copy of MediaUserStateCenter?(v113, (uint64_t)v124 + v123, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    uint64_t v126 = v334;
    outlined init with take of PommesSearchReason?(v125, (uint64_t)v334, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    uint64_t v127 = type metadata accessor for PommesSearchError(0);
    uint64_t v128 = *(void *)(v127 - 8);
    uint64_t v348 = *(char **)(v128 + 48);
    uint64_t v347 = v128 + 48;
    if (((unsigned int (*)(void **, uint64_t, uint64_t))v348)(v126, 1, v127) == 1)
    {
      uint64_t v129 = v122;
      outlined destroy of MediaUserStateCenter?((uint64_t)v126, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v342 + 56))(v360, 1, 1, v341);
    }
    else
    {
      uint64_t v142 = *v126;
      v143 = v122;
      id v144 = v142;
      outlined destroy of NLXResultCandidate((uint64_t)v126, type metadata accessor for PommesSearchError);
      aBlock[0] = (uint64_t)v142;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v145 = v360;
      uint64_t v146 = v341;
      int v147 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v342 + 56))(v145, v147 ^ 1u, 1, v146);
    }
    uint64_t v148 = v361;
    uint64_t v149 = v114[12];
    uint64_t v150 = v333;
    uint64_t v151 = (uint64_t)v333 + v149;
    void *v333 = v122;
    outlined init with copy of MediaUserStateCenter?(v113, (uint64_t)v150 + v149, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    if (v122)
    {
      v152 = v122;
      uint64_t v153 = v343;
      dispatch thunk of PommesResponse.searchReason.getter();

      uint64_t v154 = v357;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v357 + 56))(v153, 0, 1, v148);
      outlined destroy of MediaUserStateCenter?(v151, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    }
    else
    {
      outlined destroy of MediaUserStateCenter?(v151, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
      uint64_t v154 = v357;
      uint64_t v153 = v343;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v357 + 56))(v343, 1, 1, v148);
    }
    uint64_t v155 = v358;
    uint64_t v156 = v358[12];
    uint64_t v157 = (uint64_t)v336;
    uint64_t v158 = (uint64_t)v336 + v156;
    void *v336 = v122;
    outlined init with copy of MediaUserStateCenter?(v113, v157 + v156, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    int v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v153, 1, v148);
    uint64_t v349 = v122;
    v160 = v339;
    if (v159 == 1)
    {
      uint64_t v161 = v155[12];
      uint64_t v162 = v322;
      uint64_t v163 = (uint64_t)v322 + v161;
      *long long v322 = v122;
      outlined init with copy of MediaUserStateCenter?(v158, (uint64_t)v162 + v161, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
      v164 = v122;
      outlined destroy of MediaUserStateCenter?(v157, (uint64_t *)&demangling cache variable for type metadata for (response: PommesResponse?, error: PommesSearchError?));

      uint64_t v165 = v323;
      outlined init with take of PommesSearchReason?(v163, v323, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v348)(v165, 1, v127) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v165, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
        uint64_t v166 = v357;
        uint64_t v148 = v361;
        (*(void (**)(char *, void, uint64_t))(v357 + 104))(v362, *MEMORY[0x1E4F9FE98], v361);
      }
      else
      {
        uint64_t v171 = v165 + *(int *)(v127 + 20);
        uint64_t v172 = v357;
        unint64_t v173 = v315;
        uint64_t v148 = v361;
        (*(void (**)(char *, uint64_t, uint64_t))(v357 + 16))(v315, v171, v361);
        outlined destroy of NLXResultCandidate(v165, type metadata accessor for PommesSearchError);
        uint64_t v166 = v172;
        (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v362, v173, v148);
      }
      uint64_t v168 = v364;
      uint64_t v169 = (uint64_t)v369;
      uint64_t v170 = v340;
      outlined destroy of MediaUserStateCenter?(v343, &demangling cache variable for type metadata for PommesSearchReason?);
      uint64_t v122 = v349;
    }
    else
    {
      uint64_t v167 = v122;
      outlined destroy of MediaUserStateCenter?(v157, (uint64_t *)&demangling cache variable for type metadata for (response: PommesResponse?, error: PommesSearchError?));
      (*(void (**)(char *, uint64_t, uint64_t))(v154 + 32))(v362, v153, v148);
      uint64_t v166 = v154;
      uint64_t v168 = v364;
      uint64_t v169 = (uint64_t)v369;
      uint64_t v170 = v340;
    }
    uint64_t v174 = v358[12];
    uint64_t v175 = v338;
    uint64_t v176 = (uint64_t)v338 + v174;
    *uint64_t v338 = v122;
    outlined init with copy of MediaUserStateCenter?(v113, (uint64_t)v175 + v174, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    outlined destroy of MediaUserStateCenter?(v176, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    uint64_t v177 = v368;
    v365((char *)v160, v370, v368);
    int v178 = (*(uint64_t (**)(char **, char *))(v168 + 88))(v160, v177);
    if (v178 == *MEMORY[0x1E4F9FE50])
    {
      (*(void (**)(char **, char *))(v168 + 96))(v160, v177);
      BOOL v179 = (int *)v160[1];
      uint64_t v359 = *v160;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v180 = type metadata accessor for Logger();
      __swift_project_value_buffer(v180, (uint64_t)static Logger.pommes);
      uint64_t v181 = *(void (**)(char *, char *, uint64_t))(v166 + 16);
      v181(v170, v362, v148);
      uint64_t v182 = Logger.logObject.getter();
      os_log_type_t v183 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v182, v183))
      {
        uint64_t v184 = (uint8_t *)swift_slowAlloc();
        uint64_t v185 = swift_slowAlloc();
        aBlock[0] = v185;
        *(_DWORD *)uint64_t v184 = 136315138;
        v358 = v179;
        v181(v321, v170, v361);
        uint64_t v186 = String.init<A>(describing:)();
        uint64_t v371 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v186, v187, aBlock);
        uint64_t v84 = (uint64_t)v369;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v188 = *(void (**)(char *, uint64_t))(v357 + 8);
        BOOL v179 = v358;
        v188(v170, v361);
        _os_log_impl(&dword_1C8F83000, v182, v183, "Building POMMES result candidate message on rcId path with reason: %s", v184, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v185, -1, -1);
        uint64_t v148 = v361;
        MEMORY[0x1CB77E470](v184, -1, -1);
      }
      else
      {
        uint64_t v84 = v169;
        v188 = *(void (**)(char *, uint64_t))(v166 + 8);
        v188(v170, v148);
      }

      uint64_t v189 = v370;
      unint64_t v191 = (void *)(*(uint64_t (**)(char *, int *, char *, uint64_t, char *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                       + *v367
                                                                                       + 520))(v359, v179, v349, v360, v362);
      swift_bridgeObjectRelease();
      char v192 = v368;
      if (v191) {
        goto LABEL_39;
      }
      goto LABEL_84;
    }
    if (v178 == *MEMORY[0x1E4F9FE58])
    {
      (*(void (**)(char **, char *))(v168 + 96))(v160, v177);
      unsigned int v345 = *v160;
      v358 = (int *)v160[1];
      uint64_t v347 = (uint64_t)v160[2];
      uint64_t v348 = v160[3];
      uint64_t v84 = v169;
      v190 = v350;
      if (v346(v169, 1, v350))
      {
        static UserID.defaultUserId.getter();
      }
      else
      {
        uint64_t v230 = v169 + *((int *)v190 + 5);
        uint64_t v231 = v319;
        uint64_t v232 = v309;
        uint64_t v233 = v320;
        (*(void (**)(char *, uint64_t, uint64_t))(v319 + 16))(v309, v230, v320);
        (*(void (**)(char *, char *, uint64_t))(v231 + 32))(v324, v232, v233);
      }
      uint64_t v234 = v166;
      uint64_t v235 = v317;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v236 = type metadata accessor for Logger();
      __swift_project_value_buffer(v236, (uint64_t)static Logger.pommes);
      swift_retain_n();
      uint64_t v237 = Logger.logObject.getter();
      os_log_type_t v238 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v237, v238))
      {
        uint64_t v239 = (uint8_t *)swift_slowAlloc();
        uint64_t v240 = swift_slowAlloc();
        aBlock[0] = v240;
        *(_DWORD *)uint64_t v239 = 136315138;
        uint64_t v241 = RequestProcessorBase.requestId.getter();
        uint64_t v371 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v241, v242, aBlock);
        uint64_t v234 = v357;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v237, v238, "No userId in prState, falling back to defaultUserId for request %s", v239, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v240, -1, -1);
        uint64_t v243 = v239;
        uint64_t v84 = (uint64_t)v369;
        MEMORY[0x1CB77E470](v243, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v244 = v341;
      uint64_t v245 = v342;
      uint64_t v246 = v316;
      outlined init with copy of MediaUserStateCenter?(v360, v316, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v245 + 48))(v246, 1, v244) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v246, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
        os_log_type_t v247 = v349;
        if (!v349)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v291 = Logger.logObject.getter();
          uint64_t v292 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v291, (os_log_type_t)v292))
          {
            v293 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v293 = 0;
            _os_log_impl(&dword_1C8F83000, v291, (os_log_type_t)v292, "No POMMES result or error! Not posting any message", v293, 2u);
            MEMORY[0x1CB77E470](v293, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v319 + 8))(v324, v320);
          (*(void (**)(char *, uint64_t))(v234 + 8))(v362, v361);
          goto LABEL_90;
        }
        int v248 = *(void (**)(char *, char *, uint64_t))(v234 + 16);
        v249 = v308;
        uint64_t v250 = v361;
        v248(v308, v362, v361);
        uint64_t v359 = v247;
        uint64_t v251 = Logger.logObject.getter();
        uint64_t v252 = v234;
        os_log_type_t v253 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v251, v253))
        {
          uint64_t v254 = (uint8_t *)swift_slowAlloc();
          uint64_t v255 = swift_slowAlloc();
          aBlock[0] = v255;
          *(_DWORD *)uint64_t v254 = 136315138;
          uint64_t v350 = v254 + 4;
          v248(v321, v249, v250);
          uint64_t v256 = String.init<A>(describing:)();
          uint64_t v371 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v256, v257, aBlock);
          uint64_t v84 = (uint64_t)v369;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v258 = *(void (**)(char *, uint64_t))(v357 + 8);
          v258(v249, v250);
          _os_log_impl(&dword_1C8F83000, v251, v253, "Building POMMES TRP candidate message on success path with reason: %s", v254, 0xCu);
          swift_arrayDestroy();
          uint64_t v259 = v255;
          v188 = v258;
          MEMORY[0x1CB77E470](v259, -1, -1);
          MEMORY[0x1CB77E470](v254, -1, -1);
        }
        else
        {
          v188 = *(void (**)(char *, uint64_t))(v252 + 8);
          v188(v249, v250);
        }

        char v192 = v368;
        uint64_t v189 = v370;
        uint64_t v148 = v250;
        v294 = v359;
        v295 = v324;
        unint64_t v191 = (void *)(*(uint64_t (**)(char *, int *, uint64_t, char *, char *, char *, char *))(class metadata base offset for PommesBridgeRequestProcessor + *v367 + 544))(v345, v358, v347, v348, v359, v362, v324);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v319 + 8))(v295, v320);
        if (!v191) {
          goto LABEL_84;
        }
LABEL_39:
        uint64_t v359 = (char *)v188;
        uint64_t v193 = v325;
        uint64_t v194 = one-time initialization token for insightRequestSummaryLogger;
        v358 = v191;
        if (v194 != -1) {
          swift_once();
        }
        uint64_t v195 = v356;
        uint64_t v196 = __swift_project_value_buffer(v356, (uint64_t)static Logger.insightRequestSummaryLogger);
        uint64_t v197 = v355;
        uint64_t v198 = v354;
        (*(void (**)(char *, uint64_t, uint64_t))(v355 + 16))(v354, v196, v195);
        uint64_t v199 = v329;
        outlined init with copy of MediaUserStateCenter?(v360, v329, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
        double v200 = v353;
        v365(v353, v189, v192);
        unint64_t v201 = (*(unsigned __int8 *)(v327 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v327 + 80);
        unint64_t v202 = (v328 + v201 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v203 = swift_allocObject();
        outlined init with take of PommesSearchReason?(v199, v203 + v201, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
        *(void *)(v203 + v202) = v367;
        v352(v203 + ((v193 + v202 + 8) & ~v193), v200, v192);
        swift_retain();
        InsightRequestSummaryLogger.emitDebug(_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v197 + 8))(v198, v195);
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v204 = type metadata accessor for Logger();
        __swift_project_value_buffer(v204, (uint64_t)static Logger.pommes);
        char v205 = v330;
        v365(v330, v370, v192);
        uint64_t v206 = Logger.logObject.getter();
        os_log_type_t v207 = static os_log_type_t.debug.getter();
        BOOL v208 = os_log_type_enabled(v206, v207);
        uint64_t v84 = (uint64_t)v369;
        if (v208)
        {
          v209 = (uint8_t *)swift_slowAlloc();
          uint64_t v210 = swift_slowAlloc();
          aBlock[0] = v210;
          *(_DWORD *)v209 = 136315138;
          uint64_t v211 = PommesCandidateId.asResultCandidateId.getter();
          uint64_t v371 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v211, v212, aBlock);
          uint64_t v84 = (uint64_t)v369;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, char *))(v364 + 8))(v205, v192);
          _os_log_impl(&dword_1C8F83000, v206, v207, "Posting pommes result candidate for %s", v209, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v210, -1, -1);
          MEMORY[0x1CB77E470](v209, -1, -1);
        }
        else
        {
          (*(void (**)(char *, char *))(v364 + 8))(v205, v192);
        }

        v214 = v358;
        uint64_t v213 = v359;
        RequestProcessorBase.messagePublisher.getter();
        __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v373);
        dispatch thunk of MessagePublishing.postMessage(_:)();

        ((void (*)(char *, uint64_t))v213)(v362, v361);
        outlined destroy of MediaUserStateCenter?((uint64_t)v344, (uint64_t *)&demangling cache variable for type metadata for (response: PommesResponse?, error: PommesSearchError?));
        __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
        goto LABEL_91;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v245 + 32))(v318, v246, v244);
      uint64_t v260 = *(void (**)(char *, char *, uint64_t))(v234 + 16);
      uint64_t v261 = v235;
      unint64_t v262 = v235;
      uint64_t v263 = v361;
      v260(v261, v362, v361);
      os_log_type_t v264 = Logger.logObject.getter();
      os_log_type_t v265 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v264, v265))
      {
        uint64_t v266 = (uint8_t *)swift_slowAlloc();
        uint64_t v359 = (char *)swift_slowAlloc();
        aBlock[0] = (uint64_t)v359;
        uint64_t v350 = v266;
        *(_DWORD *)uint64_t v266 = 136315138;
        uint64_t v346 = (unsigned int (*)(uint64_t, uint64_t, uint8_t *))(v266 + 4);
        v260(v321, v262, v263);
        uint64_t v267 = String.init<A>(describing:)();
        uint64_t v371 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v267, v268, aBlock);
        uint64_t v245 = v342;
        uint64_t v84 = (uint64_t)v369;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v188 = *(void (**)(char *, uint64_t))(v357 + 8);
        v188(v262, v263);
        v269 = v350;
        _os_log_impl(&dword_1C8F83000, v264, v265, "Building POMMES TRP candidate message on error path with reason: %s", v350, 0xCu);
        v270 = v359;
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v270, -1, -1);
        MEMORY[0x1CB77E470](v269, -1, -1);
      }
      else
      {
        v188 = *(void (**)(char *, uint64_t))(v234 + 8);
        v188(v262, v263);
      }

      uint64_t v283 = v263;
      v284 = v318;
      uint64_t v285 = v324;
      unint64_t v191 = (void *)(*(uint64_t (**)(char *, int *, uint64_t, char *, char *, char *, char *))(class metadata base offset for PommesBridgeRequestProcessor + *v367 + 552))(v345, v358, v347, v348, v318, v362, v324);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v245 + 8))(v284, v244);
      (*(void (**)(char *, uint64_t))(v319 + 8))(v285, v320);
      char v192 = v368;
      uint64_t v148 = v283;
      uint64_t v189 = v370;
      if (v191) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v84 = v169;
      if (v178 != *MEMORY[0x1E4F9FE48])
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v226 = type metadata accessor for Logger();
        __swift_project_value_buffer(v226, (uint64_t)static Logger.pommes);
        uint64_t v227 = Logger.logObject.getter();
        os_log_type_t v228 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v227, v228))
        {
          uint64_t v229 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v229 = 0;
          _os_log_impl(&dword_1C8F83000, v227, v228, "Unexpected pommesCandidateId. Not posting any message.", v229, 2u);
          MEMORY[0x1CB77E470](v229, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v166 + 8))(v362, v148);
        outlined destroy of MediaUserStateCenter?((uint64_t)v344, (uint64_t *)&demangling cache variable for type metadata for (response: PommesResponse?, error: PommesSearchError?));
        (*(void (**)(char **, char *))(v168 + 8))(v160, v177);
        goto LABEL_91;
      }
      (*(void (**)(char **, char *))(v168 + 96))(v160, v177);
      swift_bridgeObjectRelease();
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v215 = type metadata accessor for Logger();
      uint64_t v216 = __swift_project_value_buffer(v215, (uint64_t)static Logger.pommes);
      uint64_t v217 = *(void (**)(char *, char *, uint64_t))(v166 + 16);
      uint64_t v218 = v314;
      v217(v314, v362, v148);
      uint64_t v359 = (char *)v216;
      v219 = Logger.logObject.getter();
      os_log_type_t v220 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v219, v220))
      {
        uint64_t v221 = (uint8_t *)swift_slowAlloc();
        uint64_t v222 = swift_slowAlloc();
        aBlock[0] = v222;
        *(_DWORD *)uint64_t v221 = 136315138;
        v358 = (int *)(v221 + 4);
        v217(v321, v218, v148);
        uint64_t v223 = String.init<A>(describing:)();
        uint64_t v371 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v223, v224, aBlock);
        uint64_t v84 = (uint64_t)v369;
        uint64_t v225 = v357;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v188 = *(void (**)(char *, uint64_t))(v225 + 8);
        v188(v218, v148);
        _os_log_impl(&dword_1C8F83000, v219, v220, "Building RunPommesResponseMessage with reason: %s", v221, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v222, -1, -1);
        MEMORY[0x1CB77E470](v221, -1, -1);
      }
      else
      {
        v188 = *(void (**)(char *, uint64_t))(v166 + 8);
        v188(v218, v148);
      }

      uint64_t v271 = v313;
      outlined init with copy of MediaUserStateCenter?(v360, v313, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
      uint64_t v272 = v342;
      uint64_t v273 = v341;
      int v274 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v342 + 48))(v271, 1, v341);
      v275 = v368;
      if (v274 == 1)
      {
        outlined destroy of MediaUserStateCenter?(v271, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
        v276 = v349;
        if (!v349)
        {
          v303 = Logger.logObject.getter();
          os_log_type_t v304 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v303, v304))
          {
            uint64_t v305 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v305 = 0;
            _os_log_impl(&dword_1C8F83000, v303, v304, "No POMMES result or error! Not posting any message", v305, 2u);
            MEMORY[0x1CB77E470](v305, -1, -1);
          }

          uint64_t v301 = v361;
          unint64_t v300 = v362;
          goto LABEL_89;
        }
        uint64_t v277 = (uint64_t)v312;
        *v312 = v349;
        swift_storeEnumTagMultiPayload();
        v278 = v275;
        uint64_t v279 = v310;
        outlined init with copy of MediaUserStateCenter?(v84, v310, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
        uint64_t v280 = *(uint64_t (**)(uint64_t, uint64_t, char *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                  + *v367
                                                                  + 528);
        v281 = v276;
        unint64_t v191 = (void *)v280(v277, v279, v362);
        uint64_t v282 = v279;
        char v192 = v278;
        outlined destroy of MediaUserStateCenter?(v282, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
        outlined destroy of MediaUserStateCenter?(v277, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
      }
      else
      {
        uint64_t v286 = v307;
        (*(void (**)(char *, uint64_t, uint64_t))(v272 + 32))(v307, v271, v273);
        uint64_t v287 = (uint64_t)v312;
        (*(void (**)(char **, char *, uint64_t))(v272 + 16))(v312, v286, v273);
        swift_storeEnumTagMultiPayload();
        v288 = v275;
        uint64_t v289 = v310;
        outlined init with copy of MediaUserStateCenter?(v84, v310, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
        unint64_t v191 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                           + *v367
                                                                           + 528))(v287, v289, v362);
        uint64_t v290 = v289;
        char v192 = v288;
        outlined destroy of MediaUserStateCenter?(v290, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
        outlined destroy of MediaUserStateCenter?(v287, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
        (*(void (**)(char *, uint64_t))(v272 + 8))(v286, v273);
      }
      uint64_t v148 = v361;
      uint64_t v189 = v370;
      if (v191) {
        goto LABEL_39;
      }
    }
LABEL_84:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v296 = type metadata accessor for Logger();
    __swift_project_value_buffer(v296, (uint64_t)static Logger.pommes);
    v297 = Logger.logObject.getter();
    os_log_type_t v298 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v297, v298))
    {
      uint64_t v299 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v299 = 0;
      _os_log_impl(&dword_1C8F83000, v297, v298, "Could not construct PommesResultCandidate message, builder function returned nil", v299, 2u);
      MEMORY[0x1CB77E470](v299, -1, -1);
    }

    unint64_t v300 = v362;
    uint64_t v301 = v148;
LABEL_89:
    v188(v300, v301);
LABEL_90:
    outlined destroy of MediaUserStateCenter?((uint64_t)v344, (uint64_t *)&demangling cache variable for type metadata for (response: PommesResponse?, error: PommesSearchError?));
LABEL_91:
    outlined destroy of MediaUserStateCenter?(v360, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
    goto LABEL_92;
  }
  uint64_t v76 = v368;
  if (one-time initialization token for pommes != -1) {
    goto LABEL_97;
  }
LABEL_9:
  uint64_t v101 = type metadata accessor for Logger();
  __swift_project_value_buffer(v101, (uint64_t)static Logger.pommes);
  uint64_t v102 = (char *)v346;
  uint64_t v103 = v370;
  unint64_t v104 = v365;
  v365((char *)v346, v370, v76);
  uint64_t v105 = Logger.logObject.getter();
  os_log_type_t v106 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v105, v106))
  {
    char v107 = (uint8_t *)swift_slowAlloc();
    uint64_t v108 = swift_slowAlloc();
    aBlock[0] = v108;
    *(_DWORD *)char v107 = 136315138;
    uint64_t v109 = PommesCandidateId.description.getter();
    uint64_t v371 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, aBlock);
    uint64_t v76 = v368;
    uint64_t v103 = v370;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *))(v364 + 8))(v102, v76);
    _os_log_impl(&dword_1C8F83000, v105, v106, "Not posting pommes message, %s finished", v107, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v108, -1, -1);
    MEMORY[0x1CB77E470](v107, -1, -1);
  }
  else
  {
    (*(void (**)(char *, char *))(v364 + 8))(v102, v76);
  }

  uint64_t v84 = (uint64_t)v369;
  if (one-time initialization token for insightRequestSummaryLogger != -1) {
    swift_once();
  }
  uint64_t v130 = v356;
  uint64_t v131 = __swift_project_value_buffer(v356, (uint64_t)static Logger.insightRequestSummaryLogger);
  uint64_t v132 = v355;
  char v133 = v354;
  (*(void (**)(char *, uint64_t, uint64_t))(v355 + 16))(v354, v131, v130);
  uint64_t v134 = v353;
  v104(v353, v103, v76);
  uint64_t v135 = swift_allocObject();
  *(void *)(v135 + 16) = v367;
  v352((unint64_t)&v349[v135], v134, v76);
  swift_retain();
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v132 + 8))(v133, v130);
LABEL_92:
  outlined destroy of MediaUserStateCenter?(v84, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t partial apply for closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for PommesCandidateId() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void **)(v0 + 16);
  uint64_t v5 = *(unsigned char **)(v0 + v3);
  uint64_t v6 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(v4, v0 + v2, v5, v6);
}

uint64_t closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(void *a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v36 = a4;
  uint64_t v40 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (shouldContinue: Bool, prState: PommesBridgeResultCandidateState?));
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v39 = type metadata accessor for PommesCandidateId();
  uint64_t v12 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v37 = v13;
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for InsightRequestSummaryLogger();
  uint64_t v38 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *a1 + 96))(v16))
  {
    uint64_t v19 = v40;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_1C8F83000, v21, v22, "Not posting pommes message, request finished", v23, 2u);
      MEMORY[0x1CB77E470](v23, -1, -1);
    }

    if (one-time initialization token for insightRequestSummaryLogger != -1) {
      swift_once();
    }
    uint64_t v24 = __swift_project_value_buffer(v15, (uint64_t)static Logger.insightRequestSummaryLogger);
    uint64_t v25 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v18, v24, v15);
    uint64_t v26 = a2;
    uint64_t v27 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v26, v39);
    unint64_t v28 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = a1;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v29 + v28, v14, v27);
    swift_retain();
    InsightRequestSummaryLogger.emitDebug(_:)();
    swift_release();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v18, v15);
    *uint64_t v19 = 0;
  }
  else
  {
    uint64_t v31 = (uint64_t)&v11[*(int *)(v6 + 48)];
    char v32 = PommesBridgeRequestProcessor.fetchAndUpdateState(_:)(v31, a2) & 1;
    *uint64_t v11 = v32;
    uint64_t v33 = (uint64_t)&v9[*(int *)(v6 + 48)];
    unsigned char *v9 = v32;
    outlined init with copy of MediaUserStateCenter?(v31, v33, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    outlined assign with take of MediaUserStateCenter?(v33, v36, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    uint64_t v34 = (uint64_t)&v9[*(int *)(v6 + 48)];
    unsigned char *v9 = v32;
    outlined init with take of PommesSearchReason?(v31, v34, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    *uint64_t v40 = v32;
    return outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  }
  return result;
}

uint64_t PommesBridgeRequestProcessor.isRequestFinished.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for PommesBridgeRequestProcessor.isRequestFinished);
  swift_beginAccess();
  return *v1;
}

uint64_t PommesBridgeRequestProcessor.fetchAndUpdateState(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  char v32 = (char *)a1;
  uint64_t v5 = type metadata accessor for PommesCandidateId();
  uint64_t v30 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v29 - v12;
  uint64_t v14 = type metadata accessor for PommesBridgeResultCandidateState(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 120))(v16);
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v31 = a2;
  if (v20 && (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v22 & 1) != 0))
  {
    outlined init with copy of PommesBridgeResultCandidateState.ParseState(*(void *)(v19 + 56) + *(void *)(v15 + 72) * v21, (uint64_t)v13, type metadata accessor for PommesBridgeResultCandidateState);
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v23(v13, 0, 1, v14);
  }
  else
  {
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v23(v13, 1, 1, v14);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  }
  else
  {
    outlined init with take of NLXResultCandidate((uint64_t)v13, (uint64_t)v18, type metadata accessor for PommesBridgeResultCandidateState);
    uint64_t v24 = *(int *)(v14 + 40);
    if (v18[v24] != 1)
    {
      uint64_t v25 = 1;
      v18[v24] = 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v7, v31, v5);
      outlined init with copy of PommesBridgeResultCandidateState.ParseState((uint64_t)v18, (uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState);
      v23(v11, 0, 1, v14);
      uint64_t v26 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v3
                                                                                     + 136))(v33);
      specialized Dictionary.subscript.setter((uint64_t)v11, (uint64_t)v7);
      v26(v33, 0);
      uint64_t v27 = (uint64_t)v32;
      outlined init with take of NLXResultCandidate((uint64_t)v18, (uint64_t)v32, type metadata accessor for PommesBridgeResultCandidateState);
      v23((char *)v27, 0, 1, v14);
      return v25;
    }
    outlined destroy of NLXResultCandidate((uint64_t)v18, type metadata accessor for PommesBridgeResultCandidateState);
  }
  v23(v32, 1, 1, v14);
  return 0;
}

void *initializeWithCopy for PommesSearchError(void *a1, id *a2, uint64_t a3)
{
  id v6 = *a2;
  id v7 = *a2;
  *a1 = v6;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t storeEnumTagSinglePayload for PommesSearchError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C8FF80DC);
}

uint64_t outlined init with take of PommesSearchError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTag for PommesSearchRequestProcessorError(unsigned char *a1)
{
  int v1 = (char)*a1;
  if (v1 >= 0) {
    return *a1 >> 6;
  }
  else {
    return (v1 & 7u) + 2;
  }
}

ValueMetadata *type metadata accessor for PommesSearchRequestProcessorErrorFailureReason()
{
  return &type metadata for PommesSearchRequestProcessorErrorFailureReason;
}

unsigned char *destructiveProjectEnumData for PommesSearchRequestProcessorError(unsigned char *result)
{
  *result &= 0x3Fu;
  return result;
}

uint64_t getEnumTag for SearchError(unsigned __int8 *a1)
{
  return *a1;
}

unint64_t lazy protocol witness table accessor for type PommesError and conformance PommesError()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesError and conformance PommesError;
  if (!lazy protocol witness table cache variable for type PommesError and conformance PommesError)
  {
    type metadata accessor for PommesError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesError and conformance PommesError);
  }
  return result;
}

uint64_t outlined destroy of PommesSearchError(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PommesSearchError(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for PommesSearchError(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for PommesSearchReason();
  id v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t getEnumTagSinglePayload for PommesSearchError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C8FF802C);
}

uint64_t PommesBridgeRequestProcessor.buildCandidateMessage(_:pommesRes:error:searchReason:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for PommesResultCandidateMessage());
  uint64_t v1 = PommesResultCandidateMessage.init(build:)();
  if (!v1)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    unint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1C8F83000, v3, v4, "Could not construct PommesResultCandidate message, constructor failure", v5, 2u);
      MEMORY[0x1CB77E470](v5, -1, -1);
    }
  }
  return v1;
}

uint64_t partial apply for closure #1 in PommesBridgeRequestProcessor.buildCandidateMessage(_:pommesRes:error:searchReason:)(uint64_t a1)
{
  return closure #1 in PommesBridgeRequestProcessor.buildCandidateMessage(_:pommesRes:error:searchReason:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t closure #1 in PommesBridgeRequestProcessor.buildCandidateMessage(_:pommesRes:error:searchReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  v28[1] = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *MEMORY[0x1E4FA2320];
  uint64_t v18 = type metadata accessor for MessageSource();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  PommesResultCandidateMessage.Builder.source.setter();
  RequestProcessorBase.assistantId.getter();
  PommesResultCandidateMessage.Builder.assistantId.setter();
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v20 - 8);
  char v22 = (char *)v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestProcessorBase.sessionId.getter();
  uint64_t v23 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 0, 1, v23);
  PommesResultCandidateMessage.Builder.sessionId.setter();
  RequestProcessorBase.requestId.getter();
  PommesResultCandidateMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  PommesResultCandidateMessage.Builder.resultCandidateId.setter();
  id v24 = a5;
  PommesResultCandidateMessage.Builder.pommesResponse.setter();
  outlined init with copy of MediaUserStateCenter?(v29, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
  PommesResultCandidateMessage.Builder.error.setter();
  uint64_t v25 = type metadata accessor for PommesSearchReason();
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v10, v30, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v10, 0, 1, v25);
  return PommesResultCandidateMessage.Builder.searchReason.setter();
}

void outlined consume of Result<PommesResponse, Error>(id a1)
{
}

uint64_t PommesSearch.logCompletionOfPommesRequest(requestId:pommesCandidateId:result:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v55 = a3;
  id v56 = a4;
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PommesSearchError(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (id *)((char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for PommesSearchReason();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v53 - v20;
  if ((a5 & 1) == 0)
  {
    uint64_t v22 = *(void *)(v6 + 64);
    id v23 = v56;
    id v24 = v56;
    uint64_t v25 = PommesResponse.pommesRequestResult.getter();
    dispatch thunk of PommesResponse.searchReason.getter();
    char v26 = PommesResponse.isHandledByPreflight.getter();
    uint64_t v27 = PommesResponse.preflightClientHandlerIdentifier.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *, char *, void, uint64_t, uint64_t))(*(void *)v22 + 136))(v53, v54, v55, v25, v21, v26 & 1, v27, v28);
    swift_bridgeObjectRelease();

    id v29 = v23;
LABEL_9:
    outlined consume of Result<PommesResponse, Error>(v29);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  }
  id v30 = v56;
  id v58 = v56;
  id v31 = v56;
  id v32 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  int v33 = swift_dynamicCast();
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (!v33)
  {
    v34(v10, 1, 1, v11);
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    uint64_t v45 = *(void *)(v6 + 64);
    (*(void (**)(char *, void, uint64_t))(v16 + 104))(v21, *MEMORY[0x1E4F9FE98], v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, char *))(*(void *)v45 + 144))(v53, v54, v55, 0, v21);
    id v29 = v56;
    goto LABEL_9;
  }
  id v35 = v56;
  v34(v10, 0, 1, v11);
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v10, (uint64_t)v14, type metadata accessor for PommesSearchError);
  uint64_t v36 = (char *)v14 + *(int *)(v11 + 20);
  uint64_t v37 = v19;
  uint64_t v38 = v15;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v36, v15);
  id v58 = *v14;
  id v39 = v58;
  if (!swift_dynamicCast())
  {
    uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t, void, char *))(**(void **)(v6 + 64) + 144);
    uint64_t v48 = v53;
    uint64_t v49 = v54;
    uint64_t v50 = v55;
LABEL_11:
    v47(v48, v49, v50, 0, v37);
    goto LABEL_12;
  }
  int v40 = v57 >> 6;
  uint64_t v42 = v54;
  uint64_t v41 = v55;
  uint64_t v43 = v53;
  uint64_t v44 = v6;
  if (!v40)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(**(void **)(v6 + 64) + 152))(v53, v54, v55);
    goto LABEL_12;
  }
  if (v40 != 1)
  {
    if (v57 != 128)
    {
      if (v57 == 129)
      {
        id v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1180]), sel_init);
        uint64_t v52 = v51;
        if (v51)
        {
          objc_msgSend(v51, sel_setPommesConfidenceScore_, 0.0);
          objc_msgSend(v52, sel_setPegasusDomain_, 0);
          objc_msgSend(v52, sel_setIsLowConfidenceKnowledgeResult_, 0);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, void *, char *, void, void, void))(**(void **)(v44 + 64)
                                                                                                  + 136))(v43, v42, v41, v52, v37, 0, 0, 0);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(**(void **)(v6 + 64) + 144))(v53, v54, v55, 3, v37);
      }
      goto LABEL_12;
    }
    uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t, void, char *))(**(void **)(v6 + 64) + 144);
    uint64_t v48 = v53;
    uint64_t v49 = v54;
    uint64_t v50 = v55;
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, char *))(**(void **)(v6 + 64) + 144))(v53, v54, v55, dword_1C9195370[v57 & 0x3F], v37);
LABEL_12:
  outlined consume of Result<PommesResponse, Error>(v35);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v37, v38);
  return outlined destroy of PommesSearchRequest((uint64_t)v14, type metadata accessor for PommesSearchError);
}

void PommesRequestInstrumentationUtil.logFailedPommesRequest(requestId:pommesCandidateId:failedReason:pommesSearchReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  id v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1168]), sel_init);
    if (v9)
    {
      uint64_t v10 = v9;
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1178]), sel_init);
      if (v11)
      {
        uint64_t v12 = v11;
        objc_msgSend(v11, sel_setReason_, a4);
        objc_msgSend(v12, sel_setPommesSearchReason_, PommesSearchReason.toInt.getter());
        objc_msgSend(v10, sel_setFailed_, v12);
        objc_msgSend(v8, sel_setPommesRequestContext_, v10);
        uint64_t v13 = self;
        swift_retain();
        id v14 = objc_msgSend(v13, sel_processInfo);
        char v15 = NSProcessInfo.isRunningUnitTests.getter();

        if (v15) {
          id v16 = (id)(*(uint64_t (**)(void))(*(void *)v5 + 96))();
        }
        else {
          id v16 = objc_msgSend(self, sel_sharedStream);
        }
        uint64_t v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v10 = v8;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v18, "Unable to log failed POMMES request", v19, 2u);
    MEMORY[0x1CB77E470](v19, -1, -1);
  }
}

uint64_t PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = AFIsInternalInstall();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 248);

  return v8(a1, a2, a3, v7);
}

void PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:isInternalInstall:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v71 = type metadata accessor for PerformanceUtil.Measurement(0);
  uint64_t v10 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v12 = (char *)v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!specialized closure #1 in PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:isInternalInstall:)(a4, v5))
  {
    if (one-time initialization token for pommes != -1) {
      goto LABEL_37;
    }
    goto LABEL_15;
  }
  uint64_t v13 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v13)
  {
    id v14 = v13;
    id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1080]), sel_init);
    id v16 = *(void **)(v5 + 48);
    objc_msgSend(v16, sel_lock);
    if (v15)
    {
      uint64_t v17 = *(uint64_t (**)(void))(*(void *)v5 + 152);
      id v18 = v15;
      uint64_t v19 = v17();
      uint64_t v20 = MEMORY[0x1E4FBC860];
      uint64_t v72 = MEMORY[0x1E4FBC860];
      uint64_t v21 = *(void *)(v19 + 16);
      if (v21)
      {
        id v67 = v18;
        uint64_t v68 = v16;
        uint64_t v69 = v14;
        uint64_t v70 = v5;
        uint64_t v22 = v19 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
        uint64_t v5 = *(void *)(v10 + 72);
        v66[1] = v19;
        swift_bridgeObjectRetain();
        while (1)
        {
          outlined init with copy of PerformanceUtil.Ticket(v22, (uint64_t)v12, type metadata accessor for PerformanceUtil.Measurement);
          id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1090]), sel_init);
          if (v23)
          {
            id v24 = v23;
            Date.timeIntervalSinceReferenceDate.getter();
            objc_msgSend(v24, sel_setStartTimeIntervalSince2001InMs_, v25 * 1000.0);
            objc_msgSend(v24, sel_setDurationInMs_, *(double *)&v12[*(int *)(v71 + 20)]);
            uint64_t v26 = type metadata accessor for PerformanceUtil.Ticket(0);
            id v27 = v24;
            uint64_t v28 = StaticString.description.getter();
            id v29 = (void *)MEMORY[0x1CB77CA90](v28);
            swift_bridgeObjectRelease();
            objc_msgSend(v27, sel_setFileId_, v29);

            uint64_t v30 = *(void *)&v12[*(int *)(v26 + 24)];
            if (v30 < (uint64_t)0xFFFFFFFF80000000)
            {
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              swift_once();
LABEL_15:
              uint64_t v47 = type metadata accessor for Logger();
              __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
              uint64_t v48 = Logger.logObject.getter();
              os_log_type_t v49 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v48, v49))
              {
                uint64_t v50 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v50 = 0;
                id v51 = "Unable to emit PerformanceUtil measurements because this is a production build or this run has not"
                      " been selected in the subsample";
                goto LABEL_21;
              }
              goto LABEL_22;
            }
            if (v30 > 0x7FFFFFFF) {
              goto LABEL_36;
            }
            objc_msgSend(v27, sel_setLineNumber_);
            id v31 = v27;
            uint64_t v32 = StaticString.description.getter();
            int v33 = (void *)MEMORY[0x1CB77CA90](v32);
            swift_bridgeObjectRelease();
            objc_msgSend(v31, sel_setCallingFunction_, v33);

            id v34 = v31;
            swift_bridgeObjectRetain();
            uint64_t v35 = specialized Collection.prefix(_:)(100);
            uint64_t v37 = v36;
            uint64_t v39 = v38;
            uint64_t v41 = v40;
            swift_bridgeObjectRelease();
            uint64_t v42 = MEMORY[0x1CB77CB40](v35, v37, v39, v41);
            uint64_t v44 = v43;
            swift_bridgeObjectRelease();
            uint64_t v45 = (void *)MEMORY[0x1CB77CA90](v42, v44);
            swift_bridgeObjectRelease();
            objc_msgSend(v34, sel_setMeasurementLabel_, v45);

            uint64_t v46 = outlined destroy of PerformanceUtil.Measurement((uint64_t)v12, type metadata accessor for PerformanceUtil.Measurement);
            MEMORY[0x1CB77CD90](v46);
            if (*(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
            outlined destroy of PerformanceUtil.Measurement((uint64_t)v12, type metadata accessor for PerformanceUtil.Measurement);
          }
          v22 += v5;
          if (!--v21)
          {
            swift_bridgeObjectRelease();
            id v14 = v69;
            uint64_t v5 = v70;
            id v18 = v67;
            id v16 = v68;
            uint64_t v20 = MEMORY[0x1E4FBC860];
            break;
          }
        }
      }
      swift_bridgeObjectRelease();
      type metadata accessor for POMMESSchemaPOMMESFunctionPerformanceProfile();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v18, sel_setPerformanceMeasurements_, isa);

      swift_beginAccess();
      *(void *)(v5 + 40) = v20;
      swift_bridgeObjectRelease();
      objc_msgSend(v16, sel_unlock);
      uint64_t v55 = one-time initialization token for pommes;
      id v56 = v18;
      if (v55 != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      __swift_project_value_buffer(v57, (uint64_t)static Logger.pommes);
      id v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v60 = 0;
        _os_log_impl(&dword_1C8F83000, v58, v59, "Emitting POMMESSchemaPOMMESDebugPerformanceReported event", v60, 2u);
        MEMORY[0x1CB77E470](v60, -1, -1);
      }

      objc_msgSend(v14, sel_setPerformanceReported_, v56);
      uint64_t v61 = self;
      swift_retain();
      id v62 = objc_msgSend(v61, sel_processInfo);
      char v63 = NSProcessInfo.isRunningUnitTests.getter();

      if (v63) {
        id v64 = (id)(*(uint64_t (**)(void))(*(void *)v5 + 128))();
      }
      else {
        id v64 = objc_msgSend(self, sel_sharedStream);
      }
      uint64_t v65 = v64;
      swift_release();
      objc_msgSend(v65, sel_emitMessage_, v14);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_beginAccess();
      *(void *)(v5 + 40) = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRelease();
      objc_msgSend(v16, sel_unlock);
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.pommes);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      id v51 = "Unable to emit PerformanceUtil measurements because of missing eventWrapper";
LABEL_21:
      _os_log_impl(&dword_1C8F83000, v48, v49, v51, v50, 2u);
      MEMORY[0x1CB77E470](v50, -1, -1);
    }
LABEL_22:

    uint64_t v53 = *(void (**)(void))(*(void *)v5 + 224);
    v53();
  }
}

BOOL specialized closure #1 in PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:isInternalInstall:)(char a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 16);
  uint64_t v4 = (void *)MEMORY[0x1CB77CA90](0xD00000000000001CLL, 0x80000001C91A0C30);
  uint64_t v5 = (void *)MEMORY[0x1CB77CA90](0xD000000000000017, 0x80000001C91A0B80);
  id v6 = objc_msgSend(v3, sel_levelForFactor_withNamespaceName_, v4, v5);

  if (v6)
  {
    unsigned int v7 = objc_msgSend(v6, sel_BOOLeanValue);
  }
  else
  {
    unsigned int v7 = 2;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v16 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
    uint64_t v13 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v9, v10, "trialClient.level for enable_performance_profiling? %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v12, -1, -1);
    MEMORY[0x1CB77E470](v11, -1, -1);
  }

  if (v7 == 2)
  {
    if ((a1 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    BOOL result = v7 != 0;
    if ((a1 & 1) == 0) {
      return result;
    }
  }
  return 1;
}

uint64_t PerformanceUtil.measurements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

unint64_t type metadata accessor for POMMESSchemaPOMMESFunctionPerformanceProfile()
{
  unint64_t result = lazy cache variable for type metadata for POMMESSchemaPOMMESFunctionPerformanceProfile;
  if (!lazy cache variable for type metadata for POMMESSchemaPOMMESFunctionPerformanceProfile)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for POMMESSchemaPOMMESFunctionPerformanceProfile);
  }
  return result;
}

void specialized PommesSearch.runGeoPersonalizationShadowLogging(result:)(void *a1, char a2)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v73 = (char *)&v65 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v65 - v11;
  v74[3] = &type metadata for FeatureFlag;
  v74[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  uint64_t v13 = swift_allocObject();
  v74[0] = v13;
  *(void *)(v13 + 16) = 3;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = 0;
  *(void *)(v13 + 40) = 0;
  *(unsigned char *)(v13 + 48) = 3;
  char v14 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  if (v14 & 1) == 0 || (a2) {
    return;
  }
  id v67 = v8;
  a1;
  uint64_t v16 = PommesResponse.metadataDomainName.getter();
  uint64_t v17 = v15;
  if (v16 == 1936744813 && v15 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v16 == 7300455 && v17 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      if (one-time initialization token for pommes != -1) {
        goto LABEL_52;
      }
      goto LABEL_41;
    }
  }
  if (one-time initialization token for pommes != -1) {
    goto LABEL_45;
  }
  while (1)
  {
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1C8F83000, v20, v21, "Shadow logging for geo personalization", v22, 2u);
      MEMORY[0x1CB77E470](v22, -1, -1);
    }

    unint64_t v23 = dispatch thunk of PommesResponse.experiences.getter();
    unint64_t v24 = v23;
    if (v23 >> 62)
    {
      if (!_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_47:
        swift_bridgeObjectRelease();
LABEL_48:
        outlined consume of Result<PommesResponse, Error>(a1);
        return;
      }
    }
    else if (!*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_47;
    }
    if ((v24 & 0xC000000000000001) == 0) {
      break;
    }
    id v25 = (id)MEMORY[0x1CB77D510](0, v24);
LABEL_19:
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v27 = dispatch thunk of Experience.associatedEntities.getter();

    uint64_t v28 = MEMORY[0x1E4FBC860];
    v74[0] = MEMORY[0x1E4FBC860];
    id v29 = *(void (***)(char *, uint64_t))(v27 + 16);
    uint64_t v69 = v4;
    uint64_t v71 = v29;
    uint64_t v66 = a1;
    if (!v29)
    {
      uint64_t v43 = MEMORY[0x1E4FBC860];
LABEL_34:
      swift_bridgeObjectRelease();
      uint64_t v44 = *(void *)(v43 + 16);
      if (v44)
      {
        v74[0] = v28;
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v46 = *(char **)(v5 + 16);
        uint64_t v45 = v5 + 16;
        uint64_t v47 = v43 + ((*(unsigned __int8 *)(v45 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 64));
        uint64_t v72 = *(void (***)(char *, char *, uint64_t))(v45 + 56);
        uint64_t v73 = v46;
        uint64_t v70 = v43;
        uint64_t v71 = (void (**)(char *, uint64_t))(v45 - 8);
        uint64_t v48 = v69;
        os_log_type_t v49 = v67;
        do
        {
          ((void (*)(char *, uint64_t, uint64_t))v73)(v49, v47, v48);
          uint64_t v50 = Apple_Parsec_Siri_Context_ResultEntity.mapsEncryptedMuid.getter();
          uint64_t v52 = v51;
          uint64_t v53 = Apple_Parsec_Siri_Context_ResultEntity.name.getter();
          uint64_t v54 = v45;
          uint64_t v56 = v55;
          id v57 = objc_allocWithZone(MEMORY[0x1E4F6F420]);
          id v58 = (void *)MEMORY[0x1CB77CA90](v50, v52);
          swift_bridgeObjectRelease();
          os_log_type_t v59 = (void *)MEMORY[0x1CB77CA90](v53, v56);
          uint64_t v45 = v54;
          swift_bridgeObjectRelease();
          objc_msgSend(v57, sel_initWithMUID_name_, v58, v59);

          (*v71)(v49, v48);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v47 += (uint64_t)v72;
          --v44;
        }
        while (v44);
        swift_release();
        a1 = v66;
      }
      else
      {
        swift_release();
      }
      id v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F6F428]), sel_initWithVisitCountThreshold_lastVisitDaysThreshold_visitCountGivenLocationThreshold_entityRelevanceThreshold_enableEntityRelevance_, 0, 0.0, 1.79769313e308, 0.0, 0.0);
      IQFMapsPersonalizationRanker.rankedEvents(for:completion:)();
      swift_bridgeObjectRelease();

      goto LABEL_48;
    }
    unint64_t v30 = 0;
    uint64_t v70 = v5 + 16;
    uint64_t v72 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    uint64_t v68 = (void (**)(char *, uint64_t))(v5 + 8);
    while (v30 < *(void *)(v27 + 16))
    {
      unint64_t v31 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      a1 = *(void **)(v5 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v12, v27 + v31 + (void)a1 * v30, v4);
      uint64_t v32 = Apple_Parsec_Siri_Context_ResultEntity.mapsEncryptedMuid.getter();
      unint64_t v34 = v33;
      swift_bridgeObjectRelease();
      uint64_t v35 = HIBYTE(v34) & 0xF;
      if ((v34 & 0x2000000000000000) == 0) {
        uint64_t v35 = v32 & 0xFFFFFFFFFFFFLL;
      }
      if (v35)
      {
        uint64_t v36 = v27;
        uint64_t v37 = v5;
        uint64_t v38 = *v72;
        (*v72)(v73, v12, v4);
        uint64_t v39 = v74[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v39 + 16) + 1, 1);
          uint64_t v39 = v74[0];
        }
        unint64_t v41 = *(void *)(v39 + 16);
        unint64_t v40 = *(void *)(v39 + 24);
        if (v41 >= v40 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
          uint64_t v39 = v74[0];
        }
        *(void *)(v39 + 16) = v41 + 1;
        unint64_t v42 = v39 + v31 + v41 * (void)a1;
        uint64_t v4 = v69;
        v38((char *)v42, v73, v69);
        v74[0] = v39;
        uint64_t v5 = v37;
        uint64_t v27 = v36;
      }
      else
      {
        (*v68)(v12, v4);
      }
      if (v71 == (void (**)(char *, uint64_t))++v30)
      {
        uint64_t v43 = v74[0];
        a1 = v66;
        uint64_t v28 = MEMORY[0x1E4FBC860];
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_45:
    swift_once();
  }
  if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v25 = *(id *)(v24 + 32);
    goto LABEL_19;
  }
  __break(1u);
LABEL_52:
  swift_once();
LABEL_41:
  uint64_t v61 = type metadata accessor for Logger();
  __swift_project_value_buffer(v61, (uint64_t)static Logger.pommes);
  id v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v62, v63))
  {
    id v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v64 = 0;
    _os_log_impl(&dword_1C8F83000, v62, v63, "Skipping geo personalization shadow logging because response is not geo domain", v64, 2u);
    MEMORY[0x1CB77E470](v64, -1, -1);
  }
  outlined consume of Result<PommesResponse, Error>(a1);
}

unint64_t lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type FeatureFlag and conformance FeatureFlag;
  if (!lazy protocol witness table cache variable for type FeatureFlag and conformance FeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeatureFlag and conformance FeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance FeatureFlag()
{
  if (*((unsigned char *)v0 + 32) != 3) {
    return "Pommes";
  }
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2] | v0[3] | v0[1];
  if (*v0 == 5 && v2 == 0) {
    return "SiriVideo";
  }
  if (v1 != 6 || v2 != 0)
  {
    if (v1 == 8 && !v2) {
      return "SiriSettings";
    }
    return "Pommes";
  }
  return "GenerativeAssistantTools";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance FeatureFlag()
{
  outlined init with take of FeatureFlag(v0, (uint64_t)v2);
  return FeatureFlag.feature.getter();
}

uint64_t outlined init with take of FeatureFlag(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

const char *FeatureFlag.feature.getter()
{
  outlined init with take of FeatureFlag(v0, (uint64_t)&v3);
  switch(v7)
  {
    case 1:
      unint64_t result = specialized FeatureFlag.domainFeature(for:)(v3, v4);
      break;
    case 2:
      unint64_t result = specialized FeatureFlag.domainLocaleFeature(_:_:)(v3, v4, v5, (void *)v6);
      break;
    case 3:
      if (v5 | v6 | v3 | v4)
      {
        unint64_t v2 = v5 | v6 | v4;
        if (v3 != 1 || v2)
        {
          if (v3 != 2 || v2)
          {
            if (v3 != 3 || v2)
            {
              if (v3 != 4 || v2)
              {
                if (v3 != 5 || v2)
                {
                  if (v3 != 6 || v2)
                  {
                    if (v3 == 7 && v2 == 0) {
                      unint64_t result = "phase2_domains";
                    }
                    else {
                      unint64_t result = "settings_tell_me_generated";
                    }
                  }
                  else
                  {
                    unint64_t result = "LowConfidenceKnowledgeRouting";
                  }
                }
                else
                {
                  unint64_t result = "third_party_app_intents";
                }
              }
              else
              {
                unint64_t result = "AssistantLocationProvider";
              }
            }
            else
            {
              unint64_t result = "GeoPersonalizationShadowLogging";
            }
          }
          else
          {
            unint64_t result = "plugin_warmup";
          }
        }
        else
        {
          unint64_t result = "Canyonlands";
        }
      }
      else
      {
        unint64_t result = "Sphinx";
      }
      break;
    default:
      unint64_t result = specialized FeatureFlag.disableDeviceFeature(_:)();
      break;
  }
  return result;
}

uint64_t outlined consume of FeatureFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 >= 2u)
  {
    if (a5 != 2) {
      return result;
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

unint64_t type metadata accessor for SOMediaNowPlayingObserver()
{
  unint64_t result = lazy cache variable for type metadata for SOMediaNowPlayingObserver;
  if (!lazy cache variable for type metadata for SOMediaNowPlayingObserver)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SOMediaNowPlayingObserver);
  }
  return result;
}

void AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v68 = a2;
  uint64_t v73 = a1;
  unint64_t v6 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v70 = *((void *)v6 - 1);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v72 = (uint64_t)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v64 - v10;
  uint64_t v71 = v12;
  MEMORY[0x1F4188790](v9);
  char v14 = (char *)&v64 - v13;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v20 = v4;
  uint64_t v69 = a3;
  if (v19)
  {
    uint64_t v66 = v16;
    unint64_t v21 = 0xEB00000000646569;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    v75[0] = v23;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v65 = v23;
    uint64_t v24 = 0x6669636570736E75;
    unint64_t v25 = 0xEB00000000646569;
    switch(v68)
    {
      case 0:
        break;
      case 1:
        unint64_t v25 = 0xE700000000000000;
        unsigned int v26 = 2036427888;
        goto LABEL_12;
      case 2:
        unint64_t v25 = 0xE600000000000000;
        uint64_t v24 = 0x646573756170;
        break;
      case 3:
        unint64_t v25 = 0xE700000000000000;
        uint64_t v24 = 0x646570706F7473;
        break;
      case 4:
        uint64_t v24 = 0x7075727265746E69;
        unint64_t v25 = 0xEB00000000646574;
        break;
      case 5:
        unint64_t v25 = 0xE700000000000000;
        unsigned int v26 = 1801807219;
LABEL_12:
        uint64_t v24 = v26 | 0x676E6900000000;
        break;
      default:
        unint64_t v25 = 0xE700000000000000;
        uint64_t v24 = 0x6E776F6E6B6E75;
        break;
    }
    uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    a3 = v69;
    uint64_t v27 = 0x6669636570736E75;
    switch(v69)
    {
      case 0:
        break;
      case 1:
        unint64_t v21 = 0xE700000000000000;
        unsigned int v28 = 2036427888;
        goto LABEL_20;
      case 2:
        unint64_t v21 = 0xE600000000000000;
        uint64_t v27 = 0x646573756170;
        break;
      case 3:
        unint64_t v21 = 0xE700000000000000;
        uint64_t v27 = 0x646570706F7473;
        break;
      case 4:
        uint64_t v27 = 0x7075727265746E69;
        unint64_t v21 = 0xEB00000000646574;
        break;
      case 5:
        unint64_t v21 = 0xE700000000000000;
        unsigned int v28 = 1801807219;
LABEL_20:
        uint64_t v27 = v28 | 0x676E6900000000;
        break;
      default:
        unint64_t v21 = 0xE700000000000000;
        uint64_t v27 = 0x6E776F6E6B6E75;
        break;
    }
    uint64_t v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v21, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v17, v18, "AudioQueueStateManager : now playing state changed from %s to %s", (uint8_t *)v22, 0x16u);
    uint64_t v29 = v65;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v29, -1, -1);
    MEMORY[0x1CB77E470](v22, -1, -1);

    uint64_t v4 = v20;
  }
  else
  {
  }
  if (*(void *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache)
    && *(void *)(v4
                 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache
                 + 8)
    && (*(unsigned char *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache + 8) & 1) == 0
    && v68 == a3)
  {
    unint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_1C8F83000, v30, v31, "AudioQueueStateManager : update skipped", v32, 2u);
      MEMORY[0x1CB77E470](v32, -1, -1);
    }
  }
  else
  {
    Date.init()();
    unint64_t v33 = &v14[v6[5]];
    *(void *)unint64_t v33 = "SiriInformationSearch/AudioQueueStateManager.swift";
    *((void *)v33 + 1) = 50;
    v33[16] = 2;
    *(void *)&v14[v6[6]] = 186;
    unint64_t v34 = &v14[v6[7]];
    *(void *)unint64_t v34 = "nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)";
    *((void *)v34 + 1) = 66;
    v34[16] = 2;
    uint64_t v35 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000036);
    uint64_t v36 = (uint64_t *)&v14[v6[8]];
    uint64_t *v36 = v35;
    v36[1] = v37;
    Date.init()();
    uint64_t v38 = &v11[v6[5]];
    *(void *)uint64_t v38 = "SiriInformationSearch/AudioQueueStateManager.swift";
    *((void *)v38 + 1) = 50;
    v38[16] = 2;
    *(void *)&v11[v6[6]] = 187;
    uint64_t v39 = &v11[v6[7]];
    *(void *)uint64_t v39 = "nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)";
    *((void *)v39 + 1) = 66;
    v39[16] = 2;
    uint64_t v40 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000003FLL);
    unint64_t v41 = (uint64_t *)&v11[v6[8]];
    *unint64_t v41 = v40;
    v41[1] = v42;
    uint64_t v43 = *(NSObject **)(v20
                       + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_updateAudioQueueStateCacheGroup);
    dispatch_group_enter(v43);
    dispatch_group_enter(v43);
    outlined init with copy of MediaNowPlayingObserving?(v73, (uint64_t)v75);
    uint64_t v44 = v76;
    id v67 = v11;
    if (v76)
    {
      uint64_t v45 = v77;
      __swift_project_boxed_opaque_existential_1(v75, v76);
      uint64_t v46 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v47 = (uint64_t)v11;
      uint64_t v48 = v14;
      uint64_t v49 = v72;
      outlined init with copy of PerformanceUtil.Ticket(v47, v72);
      unint64_t v50 = (*(unsigned __int8 *)(v70 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
      unint64_t v51 = (v71 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v52 = swift_allocObject();
      uint64_t v53 = v49;
      char v14 = v48;
      outlined init with take of PerformanceUtil.Ticket(v53, v52 + v50);
      *(void *)(v52 + v51) = v46;
      uint64_t v54 = *(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v45 + 24);
      swift_retain();
      v54(partial apply for closure #1 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:), v52, v44, v45);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v75, &demangling cache variable for type metadata for MediaNowPlayingObserving?);
    }
    outlined init with copy of MediaNowPlayingObserving?(v73, (uint64_t)v75);
    uint64_t v55 = v76;
    if (v76)
    {
      uint64_t v56 = v77;
      __swift_project_boxed_opaque_existential_1(v75, v76);
      uint64_t v57 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v58 = v72;
      outlined init with copy of PerformanceUtil.Ticket((uint64_t)v14, v72);
      unint64_t v59 = (*(unsigned __int8 *)(v70 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
      unint64_t v60 = (v71 + v59 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v61 = (uint64_t)v14;
      uint64_t v62 = swift_allocObject();
      outlined init with take of PerformanceUtil.Ticket(v58, v62 + v59);
      *(void *)(v62 + v60) = v57;
      *(void *)(v62 + ((v60 + 15) & 0xFFFFFFFFFFFFFFF8)) = v69;
      os_log_type_t v63 = *(void (**)(uint64_t (*)(uint64_t, void *), uint64_t, uint64_t, uint64_t))(v56 + 16);
      swift_retain();
      v63(partial apply for closure #2 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:), v62, v55, v56);
      swift_release();
      outlined destroy of PerformanceUtil.Ticket((uint64_t)v67);
      outlined destroy of PerformanceUtil.Ticket(v61);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
    }
    else
    {
      outlined destroy of PerformanceUtil.Ticket((uint64_t)v67);
      outlined destroy of PerformanceUtil.Ticket((uint64_t)v14);
      outlined destroy of MediaUserStateCenter?((uint64_t)v75, &demangling cache variable for type metadata for MediaNowPlayingObserving?);
    }
  }
}

uint64_t outlined init with copy of MediaNowPlayingObserving?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MediaNowPlayingObserving?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PerformanceUtil.Ticket(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PerformanceUtil.Ticket(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PerformanceUtil.Ticket(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void protocol witness for MediaNowPlayingObserving.getNowPlayingApplicationBundleIdentifier(_:) in conformance SOMediaNowPlayingObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  if (a1)
  {
    v5[4] = a1;
    v5[5] = a2;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 1107296256;
    v5[2] = thunk for @escaping @callee_guaranteed (@guaranteed String?) -> ();
    v5[3] = &block_descriptor_17;
    uint64_t v4 = _Block_copy(v5);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v4 = 0;
  }
  objc_msgSend(v3, sel_getNowPlayingApplicationBundleIdentifier_, v4);
  _Block_release(v4);
}

void protocol witness for MediaNowPlayingObserving.getNowPlayingInfoForCurrentItem(completion:) in conformance SOMediaNowPlayingObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  if (a1)
  {
    v5[4] = a1;
    v5[5] = a2;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 1107296256;
    v5[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
    v5[3] = &block_descriptor_27;
    uint64_t v4 = _Block_copy(v5);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v4 = 0;
  }
  objc_msgSend(v3, sel_getNowPlayingInfoForCurrentItemWithCompletion_, v4);
  _Block_release(v4);
}

uint64_t outlined destroy of PerformanceUtil.Ticket(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PerformanceUtil.Ticket(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of PerformanceUtil.Ticket(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  swift_retain();
  v2(v3, v5);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(a1, a2, v2 + v6, v7);
}

uint64_t closure #1 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x1CB77E560](v7);
  if (v8)
  {
    uint64_t v9 = (char *)v8;
    uint64_t v10 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock;
    objc_msgSend(*(id *)(v8 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock), sel_lock);
    uint64_t v11 = &v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache];
    *(void *)uint64_t v11 = a1;
    *((void *)v11 + 1) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    objc_msgSend(*(id *)&v9[v10], sel_unlock);
    dispatch_group_leave(*(dispatch_group_t *)&v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_updateAudioQueueStateCacheGroup]);
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)static PerformanceUtil.shared + 184))(a3, 1);
}

Swift::Void __swiftcall PerformanceUtil.Measurement.log()()
{
  uint64_t v1 = type metadata accessor for PerformanceUtil.Measurement(0);
  uint64_t v2 = MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v2);
  uint64_t v7 = (char *)&v32 - v6;
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v32 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v32 - v14;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  outlined init with copy of PerformanceUtil.Ticket(v0, (uint64_t)v15, type metadata accessor for PerformanceUtil.Measurement);
  outlined init with copy of PerformanceUtil.Ticket(v0, (uint64_t)v13, type metadata accessor for PerformanceUtil.Measurement);
  outlined init with copy of PerformanceUtil.Ticket(v0, (uint64_t)v10, type metadata accessor for PerformanceUtil.Measurement);
  outlined init with copy of PerformanceUtil.Ticket(v0, (uint64_t)v7, type metadata accessor for PerformanceUtil.Measurement);
  outlined init with copy of PerformanceUtil.Ticket(v0, (uint64_t)v4, type metadata accessor for PerformanceUtil.Measurement);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v37 = v35;
    *(_DWORD *)uint64_t v20 = 136316162;
    uint64_t v32 = v1;
    uint64_t v21 = type metadata accessor for PerformanceUtil.Ticket(0);
    uint64_t v22 = (uint64_t *)&v15[*(int *)(v21 + 32)];
    os_log_t v33 = v17;
    int v34 = v19;
    uint64_t v24 = *v22;
    unint64_t v23 = v22[1];
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v15, type metadata accessor for PerformanceUtil.Measurement);
    *(_WORD *)(v20 + 12) = 2080;
    uint64_t v25 = StaticString.description.getter();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v13, type metadata accessor for PerformanceUtil.Measurement);
    *(_WORD *)(v20 + 22) = 2080;
    uint64_t v27 = StaticString.description.getter();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v10, type metadata accessor for PerformanceUtil.Measurement);
    *(_WORD *)(v20 + 32) = 2048;
    uint64_t v29 = *(void *)&v7[*(int *)(v21 + 24)];
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v7, type metadata accessor for PerformanceUtil.Measurement);
    uint64_t v36 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 42) = 2048;
    uint64_t v36 = *(void *)&v4[*(int *)(v32 + 20)];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v4, type metadata accessor for PerformanceUtil.Measurement);
    os_log_t v30 = v33;
    _os_log_impl(&dword_1C8F83000, v33, (os_log_type_t)v34, "[PerformanceUtil#Ticket] [%s] %s#%s#%ld %f ms", (uint8_t *)v20, 0x34u);
    uint64_t v31 = v35;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v31, -1, -1);
    MEMORY[0x1CB77E470](v20, -1, -1);
  }
  else
  {
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v7, type metadata accessor for PerformanceUtil.Measurement);
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v15, type metadata accessor for PerformanceUtil.Measurement);
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v13, type metadata accessor for PerformanceUtil.Measurement);
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v10, type metadata accessor for PerformanceUtil.Measurement);
    outlined destroy of PerformanceUtil.Measurement((uint64_t)v4, type metadata accessor for PerformanceUtil.Measurement);
  }
}

uint64_t partial apply for closure #2 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + v7);
  uint64_t v9 = *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  return closure #2 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(a1, a2, v2 + v6, v8, v9);
}

uint64_t closure #2 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a4 + 16;
  swift_beginAccess();
  uint64_t v10 = MEMORY[0x1CB77E560](v9);
  if (v10)
  {
    uint64_t v11 = (char *)v10;
    if (a2)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
      id v13 = a2;
      id v14 = a2;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        uint64_t v28 = v18;
        *(_DWORD *)uint64_t v17 = 136315138;
        id v19 = a2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
        uint64_t v20 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C8F83000, v15, v16, "nowPlayingObserver returned an error : %s", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v18, -1, -1);
        MEMORY[0x1CB77E470](v17, -1, -1);
      }
      else
      {
      }
    }
    else
    {
      uint64_t v22 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock;
      objc_msgSend(*(id *)(v10 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock), sel_lock);
      if (a1) {
        v23.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      }
      else {
        v23.super.Class isa = 0;
      }
      uint64_t v24 = *(void **)&v11[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache];
      *(NSDictionary *)&v11[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache] = v23;

      if (a5 == 4) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = a5;
      }
      unint64_t v26 = &v11[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache];
      *(void *)unint64_t v26 = v25;
      v26[8] = 0;
      objc_msgSend(*(id *)&v11[v22], sel_unlock);
    }
    dispatch_group_leave(*(dispatch_group_t *)&v11[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_updateAudioQueueStateCacheGroup]);
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)static PerformanceUtil.shared + 184))(a3, 1);
}

uint64_t PommesBridgeRequestProcessor.handleEndRequest(_:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C8F83000, v3, v4, "PommesBridgeRequestProcessor received end message", v5, 2u);
    MEMORY[0x1CB77E470](v5, -1, -1);
  }

  unint64_t v6 = *(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 104);

  return v6(1);
}

uint64_t PommesBridgeRequestProcessor.isRequestFinished.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for PommesBridgeRequestProcessor.isRequestFinished);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t PommesBridgeRequestProcessor.__deallocating_deinit()
{
  uint64_t v0 = RequestProcessorBase.deinit();
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridgeRequestProcessor.sessionState, &demangling cache variable for type metadata for ConversationSessionState?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + direct field offset for PommesBridgeRequestProcessor.timeout;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t PommesRequestContext.__deallocating_deinit()
{
  PommesRequestContext.deinit();

  return swift_deallocClassInstance();
}

uint64_t PommesRequestContext.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_sessionId;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_approximatePreviousTTSInterval, &demangling cache variable for type metadata for DateInterval?);
  swift_bridgeObjectRelease();
  return v0;
}

void PommesBridgeRequestProcessor.handleStartCandidateRequestMessage(_:)(void *a1)
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  id v8 = a1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    unint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    id v7 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v6 = v8;

    _os_log_impl(&dword_1C8F83000, v3, v4, "PommesBridge handling message: %@", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v6, -1, -1);
    MEMORY[0x1CB77E470](v5, -1, -1);
  }
  else
  {
  }
}

Swift::Void __swiftcall PommesBridgeRequestProcessor.transitionToActiveRequest()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C8F83000, v3, v4, "PommesBridge handling transitionToActiveRequest", v5, 2u);
    MEMORY[0x1CB77E470](v5, -1, -1);
  }

  unint64_t v6 = (unsigned char *)(v1 + direct field offset for PommesBridgeRequestProcessor.isCandidateRequest);
  swift_beginAccess();
  *unint64_t v6 = 0;
}

uint64_t partial apply for implicit closure #8 in implicit closure #7 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 288))();
}

void PommesBridgeRequestProcessor.handleStartSpeechRequestMessage(_:)(uint64_t a1)
{
  if (StartSpeechRequestMessage.location.getter())
  {
    id v3 = (id)dispatch thunk of Location.toCLLocation()();
    swift_release();
  }
  else
  {
    id v3 = 0;
  }
  (*(void (**)(uint64_t, id))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 328))(a1, v3);
}

void protocol witness for PommesLocationManaging.setCachedLocation(location:) in conformance PommesLocationManager(uint64_t a1, uint64_t a2)
{
}

Swift::Void __swiftcall PommesLocationManager.setCachedLocation(location:)(CLLocation location)
{
  void (*v28)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void (*)(uint64_t@<X0>, BOOL *@<X8>));
  objc_class *v29;
  id v30;
  id v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  objc_class *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  int v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  Class v51;
  int *v52;
  uint64_t v53;

  uint64_t v2 = v1;
  Class isa = location.super.isa;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v48 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LocationStatus(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (id *)((char *)&v46 - v10);
  uint64_t v12 = *(void **)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  uint64_t v52 = v1;
  id v13 = v12;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v49 = 0;

  unint64_t v50 = v6;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t v51 = isa;
  if (EnumCaseMultiPayload)
  {
    uint64_t v15 = outlined destroy of LocationStatus((uint64_t)v11, type metadata accessor for LocationStatus);
  }
  else
  {
    uint64_t v47 = *v11;
    id v16 = objc_msgSend(v47, sel_timestamp);
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v46 = (uint64_t)&v46;
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void *)(v18 + 64);
    MEMORY[0x1F4188790](v17);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v20 = [(objc_class *)isa timestamp];
    MEMORY[0x1F4188790](v20);
    unint64_t v21 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v20) = static Date.> infix(_:_:)();
    uint64_t v22 = *(void (**)(void, void))(v18 + 8);
    v22(v21, v17);
    uint64_t v15 = ((uint64_t (*)(char *, uint64_t))v22)(v21, v17);
    if (v20) {
      return;
    }
  }
  if (one-time initialization token for shared != -1) {
    uint64_t v15 = swift_once();
  }
  NSDictionary v23 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v15);
  uint64_t v44 = v2;
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v28 = *(void (**)(void *__return_ptr, void, void, void, void, void, void, void, void, void, void, _DWORD, void))(*(void *)v23 + 200);
  uint64_t v44 = &v43;
  uint64_t v45 = MEMORY[0x1E4FBB390];
  LOBYTE(v43) = 2;
  v28(&v53, 0xD000000000000035, 0x80000001C91A4140, 0, v27, "SiriInformationSearch/PommesLocationManager.swift", 49, 2, 207, "setCachedLocation(location:)", 28, v43, partial apply for closure #1 in PommesLocationManager.setCachedLocation(location:));
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  if (v53 == 1)
  {
    uint64_t v29 = v51;
    os_log_t v30 = PommesLocationManager.manager.getter((uint64_t)v29);
    uint64_t v31 = objc_msgSend(v30, sel_accuracyAuthorization);

    *(void *)uint64_t v9 = v29;
    *((void *)v9 + 1) = v31;
    v9[16] = 0;
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter((uint64_t)v9);
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v2;
    os_log_t v33 = v2;
    int v34 = (uint64_t)v48;
    static TaskPriority.userInitiated.getter();
    uint64_t v35 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 0, 1, v35);
    uint64_t v36 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v37 = (void *)swift_allocObject();
    v37[2] = 0;
    v37[3] = 0;
    v37[4] = v36;
    v37[5] = v29;
    v37[6] = partial apply for closure #2 in PommesLocationManager.setCachedLocation(location:);
    v37[7] = v32;
    uint64_t v38 = v29;
    swift_retain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v34, (uint64_t)&async function pointer to partial apply for closure #1 in PommesLocationManager.shiftedLocation(for:completion:), (uint64_t)v37);
    swift_release();
    outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for TaskPriority?);
    swift_release();
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter((uint64_t)v9);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
    uint64_t v40 = Logger.logObject.getter();
    unint64_t v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl(&dword_1C8F83000, v40, v41, "Location use is not authorized. This may be due to Siri location permission reset. POMMES will *not* trigger an authorization prompt, and will drop incoming cached location data.", v42, 2u);
      MEMORY[0x1CB77E470](v42, -1, -1);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double specialized static PommesSearchRequest.pommesDUDAThreshold.getter()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  uint64_t v1 = (void *)MEMORY[0x1CB77CA90](0xD000000000000015, 0x80000001C919C770);
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2) {
    return 0.6;
  }
  id v3 = (void *)MEMORY[0x1CB77CA90](0x685473656D6D6F70, 0xEF646C6F68736572);
  objc_msgSend(v2, sel_doubleForKey_, v3);
  double v5 = v4;

  if ((*(void *)&v5 & 0x7FF0000000000000) == 0 && (*(void *)&v5 & 0xFFFFFFFFFFFFFLL) == 0) {
    return 0.6;
  }
  return v5;
}

uint64_t specialized static PommesSearchRequest.isSupportedExternalParseId(externalParseId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v21[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DeviceClass();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v21[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for PommesMultiClassParserIds != -1) {
    swift_once();
  }
  if ((specialized Set.contains(_:)(a1, a2, static PommesSearchRequest.PommesMultiClassParserIds) & 1) == 0)
  {
    char v11 = 0;
    return v11 & 1;
  }
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.deviceClass.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for DeviceClass?);
LABEL_15:
    char v11 = 1;
    return v11 & 1;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  if (one-time initialization token for PommesMultiClassAllowedDeviceClasses != -1) {
    swift_once();
  }
  uint64_t v12 = static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses;
  if (!*(void *)(static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses + 16))
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(self, sel_processInfo);
  char v17 = NSProcessInfo.isRunningUnitTests.getter();

  if (v17)
  {
    char v11 = specialized Set.contains(_:)((uint64_t)v10, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v21[3] = &type metadata for FeatureFlag;
    v21[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
    uint64_t v19 = swift_allocObject();
    v21[0] = v19;
    *(void *)(v19 + 16) = 7;
    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 32) = 0;
    *(void *)(v19 + 40) = 0;
    *(unsigned char *)(v19 + 48) = 3;
    char v11 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11 & 1;
}

void *PommesSearch.performPreflightChecks(for:)(uint64_t a1)
{
  id v2 = v1;
  uint64_t v50 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1F4188790](v50);
  uint64_t v5 = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SignpostToken();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for OSSignposter();
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Signposter.pommes);
  OSSignposter.begin(name:context:)("search.preflight", 16, 2u, 0, (uint64_t)v8);
  uint64_t v11 = v2[2];
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    os_log_t v30 = 0;
    goto LABEL_33;
  }
  v48[2] = v10;
  uint64_t v49 = v8;
  uint64_t v13 = v11 + 32;
  v48[1] = v11;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of AppDataProviding(v13, (uint64_t)v56);
    outlined init with copy of AppDataProviding((uint64_t)v56, (uint64_t)v53);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchPreflightHandling);
    type metadata accessor for ClassicFollowupPreflightClient();
    if (!swift_dynamicCast()) {
      goto LABEL_14;
    }
    uint64_t v14 = swift_release();
    (*(void (**)(void *__return_ptr, uint64_t))(*v2 + 152))(v53, v14);
    uint64_t v16 = v54;
    uint64_t v15 = v55;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    char v17 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v15 + 8))(0, v16, v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    if (v17)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        unint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v21 = 0;
        _os_log_impl(&dword_1C8F83000, v19, v20, "NLv3 deprecation enabled, skipping ClassicFollowupPreflightClient", v21, 2u);
        MEMORY[0x1CB77E470](v21, -1, -1);
      }

      int v22 = 0;
    }
    else
    {
LABEL_14:
      int v22 = 1;
    }
    outlined init with copy of AppDataProviding((uint64_t)v56, (uint64_t)v53);
    type metadata accessor for WholeHomeAudioPreflightClient();
    if (swift_dynamicCast())
    {
      swift_release();
      outlined init with copy of PommesSearchRequest(a1, (uint64_t)v5, type metadata accessor for PommesSearchRequest);
      char v23 = v5[*(int *)(v50 + 80)];
      outlined destroy of PommesSearchRequest((uint64_t)v5, type metadata accessor for PommesSearchRequest);
      if (v23)
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v27 = 0;
          _os_log_impl(&dword_1C8F83000, v25, v26, "Handling fallback request, skipping WholeHomeAudioPreflightClient", v27, 2u);
          MEMORY[0x1CB77E470](v27, -1, -1);
        }

        goto LABEL_6;
      }
    }
    else
    {
      outlined init with copy of PommesSearchRequest(a1, (uint64_t)v5, type metadata accessor for PommesSearchRequest);
      outlined destroy of PommesSearchRequest((uint64_t)v5, type metadata accessor for PommesSearchRequest);
    }
    if (v22)
    {
      uint64_t v28 = v57;
      uint64_t v29 = v58;
      __swift_project_boxed_opaque_existential_1(v56, v57);
      PommesSearchPreflightHandling.handleAndLog(pommesSearchRequest:)(a1, v28, v29, v53);
      os_log_t v30 = (void *)v53[0];
      if (v53[0]) {
        break;
      }
    }
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
    v13 += 40;
    if (!--v12)
    {
      swift_bridgeObjectRelease();
      os_log_t v30 = 0;
      uint64_t v8 = v49;
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = one-time initialization token for pommes;
  id v32 = v30;
  os_log_t v33 = v32;
  if (v31 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.pommes);
  outlined init with copy of AppDataProviding((uint64_t)v56, (uint64_t)v53);
  id v35 = v33;
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    uint64_t v52 = v50;
    *(_DWORD *)uint64_t v38 = 136315394;
    outlined init with copy of AppDataProviding((uint64_t)v53, (uint64_t)v51);
    uint64_t v39 = String.init<A>(describing:)();
    v51[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    *(_WORD *)(v38 + 12) = 2080;
    id v41 = v35;
    id v42 = objc_msgSend(v41, sel_description);
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    v51[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v36, v37, "Preflight client %s generated response: %s", (uint8_t *)v38, 0x16u);
    uint64_t v46 = v50;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v46, -1, -1);
    MEMORY[0x1CB77E470](v38, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  }
  uint64_t v8 = v49;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
LABEL_33:
  OSSignposter.end(token:message:)((uint64_t)v8, 0, 0xE000000000000000);
  outlined destroy of PommesSearchRequest((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SignpostToken);
  return v30;
}

uint64_t PommesSearchPreflightHandling.handleAndLog(pommesSearchRequest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = a2;
  uint64_t v39 = a1;
  unint64_t v40 = a4;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v12 = (int *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_getDynamicType();
  uint64_t v15 = _typeName(_:qualified:)();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v42 = v15;
  unint64_t v43 = v17;
  v18._object = (void *)0x80000001C91A1830;
  v18._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v18);
  uint64_t v19 = v42;
  Date.init()();
  os_log_type_t v20 = &v14[v12[7]];
  *(void *)os_log_type_t v20 = "SiriInformationSearch/PommesSearchPreflightHandling.swift";
  *((void *)v20 + 1) = 57;
  v20[16] = 2;
  *(void *)&v14[v12[8]] = 38;
  unint64_t v21 = &v14[v12[9]];
  *(void *)unint64_t v21 = "handleAndLog(pommesSearchRequest:)";
  *((void *)v21 + 1) = 34;
  v21[16] = 2;
  uint64_t v22 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v19);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = (uint64_t *)&v14[v12[10]];
  uint64_t *v25 = v22;
  v25[1] = v24;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v5, v7);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  uint64_t v29 = v10;
  if (os_log_type_enabled(v27, v28))
  {
    v37[1] = v5;
    os_log_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v38 = v7;
    uint64_t v32 = v31;
    uint64_t v42 = v31;
    *(_DWORD *)os_log_t v30 = 136446210;
    v37[0] = v30 + 4;
    swift_getDynamicType();
    uint64_t v33 = _typeName(_:qualified:)();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v29, v38);
    _os_log_impl(&dword_1C8F83000, v27, v28, "%{public}s#handle", v30, 0xCu);
    swift_arrayDestroy();
    uint64_t v35 = v32;
    uint64_t v7 = v38;
    MEMORY[0x1CB77E470](v35, -1, -1);
    MEMORY[0x1CB77E470](v30, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a3 + 16))(&v42, v39, v7, a3);
  *unint64_t v40 = v42;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v14, 0);
  return outlined destroy of PerformanceUtil.Ticket((uint64_t)v14);
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance ClassicFollowupPreflightClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

void ClassicFollowupPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PommesSearchReason();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = 0;
  if (PommesSearchRequest.hadPreviousClassicTurn.getter())
  {
    uint64_t v12 = (uint64_t *)(a1 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 32));
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    PommesSearchRequest.pommesCandidateId.getter((uint64_t)v10);
    uint64_t v15 = type metadata accessor for PommesCandidateId();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 0, 1, v15);
    default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)((uint64_t)v7);
    uint64_t v11 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(a1, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], v13, v14, (uint64_t)v10, (uint64_t)v7, 0x6867696C66657270, 0xE900000000000074, 0xD00000000000001ELL, 0x80000001C9197EE0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for PommesCandidateId?);
    if (!v11)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
      unint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl(&dword_1C8F83000, v17, v18, "ClassicFollowupPreflightClient#ignore could not build PommesResponse with given parameters", v19, 2u);
        MEMORY[0x1CB77E470](v19, -1, -1);
      }

      uint64_t v11 = 0;
    }
  }
  *a2 = v11;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance SmartPlayPreflightClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

void SmartPlayPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v115 = *v2;
  uint64_t v5 = type metadata accessor for PommesSearchReason();
  uint64_t v114 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v112 = (uint64_t)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v111 = (uint64_t)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v131 = (char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v16 = *(int *)(v110 + 76);
  uint64_t v113 = a1;
  uint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = MEMORY[0x1E4FBC860];
  uint64_t v142 = MEMORY[0x1E4FBC860];
  uint64_t v122 = *(void *)(v17 + 16);
  uint64_t v121 = a2;
  uint64_t v116 = v5;
  if (v122)
  {
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    uint64_t v19 = v14 + 16;
    unint64_t v126 = v17 + ((*(unsigned __int8 *)(v19 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 64));
    uint64_t v127 = v20;
    uint64_t v136 = v10 + 16;
    uint64_t v137 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v123 = (void (**)(char *, uint64_t))(v19 - 8);
    uint64_t v125 = *(void *)(v19 + 56);
    uint64_t v118 = v17;
    swift_bridgeObjectRetain_n();
    uint64_t v21 = 0;
    uint64_t v132 = MEMORY[0x1E4FBC840] + 8;
    uint64_t v128 = v9;
    uint64_t v130 = v12;
    uint64_t v124 = v13;
    uint64_t v119 = v10;
    uint64_t v120 = v19;
LABEL_3:
    uint64_t v129 = v21;
    v127(v131, v126 + v125 * v21, v13);
    uint64_t v22 = Siri_Nlu_External_Span.matcherNames.getter();
    v141[0] = v18;
    uint64_t v23 = *(void *)(v22 + 16);
    if (v23)
    {
      unint64_t v24 = v22 + ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80));
      uint64_t v25 = *(void *)(v119 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v119 + 16);
      swift_bridgeObjectRetain();
      do
      {
        v26(v12, v24, v9);
        unint64_t v27 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
        (*v137)(v12, v9);
        specialized Array.append<A>(contentsOf:)(v27);
        v24 += v25;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease_n();
      unint64_t v28 = v141[0];
      unint64_t v18 = MEMORY[0x1E4FBC860];
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v28 = v18;
    }
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      if (!v29)
      {
LABEL_110:
        swift_bridgeObjectRelease_n();
        uint64_t v13 = v124;
        (*v123)(v131, v124);
        goto LABEL_111;
      }
    }
    else
    {
      uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v29) {
        goto LABEL_110;
      }
    }
    uint64_t v30 = 0;
    unint64_t v139 = v28 & 0xC000000000000001;
    unint64_t v134 = v28;
    unint64_t v135 = v28 + 32;
    uint64_t v133 = v29;
    while (1)
    {
      if (v139)
      {
        uint64_t v31 = MEMORY[0x1CB77D510](v30, v28);
        BOOL v32 = __OFADD__(v30++, 1);
        if (v32) {
          goto LABEL_137;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(v135 + 8 * v30);
        swift_retain();
        BOOL v32 = __OFADD__(v30++, 1);
        if (v32)
        {
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          swift_once();
          uint64_t v73 = type metadata accessor for Logger();
          __swift_project_value_buffer(v73, (uint64_t)static Logger.pommes);
          id v74 = 0;
          id v75 = 0;
          uint64_t v76 = Logger.logObject.getter();
          os_log_type_t v77 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v76, v77))
          {
            uint64_t v78 = (uint8_t *)swift_slowAlloc();
            uint64_t v79 = swift_slowAlloc();
            v141[0] = v79;
            *(_DWORD *)uint64_t v78 = 136315138;
            uint64_t v142 = 0;
            id v80 = 0;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
            uint64_t v81 = String.init<A>(describing:)();
            uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v141);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_1C8F83000, v76, v77, "ConversionUtils.convertUserDialogActToTasks error: %s", v78, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1CB77E470](v79, -1, -1);
            MEMORY[0x1CB77E470](v78, -1, -1);

            goto LABEL_147;
          }

LABEL_146:
LABEL_147:
          uint64_t v95 = 0;
          goto LABEL_148;
        }
      }
      static UsoTask_CodegenConverter.convert(task:)();
      if (v141[3])
      {
        type metadata accessor for UsoTask_play_uso_NoEntity();
        if (swift_dynamicCast())
        {
          swift_release();
          uint64_t v33 = byte_1F236EDD0;
          uint64_t v138 = v31;
          uint64_t v34 = 0xEC00000073656974;
          uint64_t v35 = UsoTask.arguments.getter();
          uint64_t v36 = 0x69746E4572657375;
          switch(v33)
          {
            case 1:
              uint64_t v34 = 0xE600000000000000;
              uint64_t v36 = 0x746567726174;
              if (!*(void *)(v35 + 16)) {
                goto LABEL_39;
              }
              goto LABEL_25;
            case 2:
              uint64_t v36 = 0x636E657265666572;
              uint64_t v34 = 0xE900000000000065;
              goto LABEL_24;
            case 3:
              uint64_t v34 = 0xE700000000000000;
              uint64_t v36 = 0x72656767697274;
              if (!*(void *)(v35 + 16)) {
                goto LABEL_39;
              }
              goto LABEL_25;
            default:
LABEL_24:
              if (!*(void *)(v35 + 16)) {
                goto LABEL_39;
              }
LABEL_25:
              unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v34);
              if ((v38 & 1) == 0)
              {
LABEL_39:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v43 = v18;
                if (!(v18 >> 62)) {
                  goto LABEL_40;
                }
                goto LABEL_94;
              }
              unint64_t v39 = *(void *)(*(void *)(v35 + 56) + 8 * v37);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v141[0] = v18;
              if (v39 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
                if (!v40)
                {
LABEL_92:
                  swift_bridgeObjectRelease();
                  unint64_t v49 = v18;
                  goto LABEL_93;
                }
              }
              else
              {
                uint64_t v40 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                if (!v40) {
                  goto LABEL_92;
                }
              }
              type metadata accessor for UsoEntity_common_UserEntity();
              if (v40 < 1) {
                goto LABEL_138;
              }
              for (uint64_t i = 0; i != v40; ++i)
              {
                if ((v39 & 0xC000000000000001) != 0) {
                  MEMORY[0x1CB77D510](i, v39);
                }
                else {
                  swift_retain();
                }
                dispatch thunk of UsoValue.getAsEntity()();
                static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
                swift_release();
                uint64_t v42 = swift_release();
                if (v140)
                {
                  MEMORY[0x1CB77CD90](v42);
                  if (*(void *)((v141[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141[0] & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                }
              }
              swift_bridgeObjectRelease();
              unint64_t v49 = v141[0];
              uint64_t v9 = v128;
              unint64_t v18 = MEMORY[0x1E4FBC860];
LABEL_93:
              swift_bridgeObjectRelease();
              v141[0] = v18;
              swift_bridgeObjectRetain();
              specialized Array.append<A>(contentsOf:)(v49);
              swift_bridgeObjectRelease();
              uint64_t v43 = v141[0];
              uint64_t v12 = v130;
              if (!((unint64_t)v141[0] >> 62))
              {
LABEL_40:
                uint64_t v44 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
                goto LABEL_41;
              }
LABEL_94:
              swift_bridgeObjectRetain();
              uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
LABEL_41:
              swift_bridgeObjectRelease();
              if (v44) {
                goto LABEL_88;
              }
              break;
          }
          uint64_t v45 = byte_1F236EDF8;
          uint64_t v46 = 0xEC00000073656974;
          unint64_t v47 = UsoTask.arguments.getter();
          uint64_t v48 = 0x69746E4572657375;
          switch(v45)
          {
            case 1:
              uint64_t v46 = 0xE600000000000000;
              uint64_t v48 = 0x746567726174;
              if (!*(void *)(v47 + 16)) {
                goto LABEL_62;
              }
              goto LABEL_48;
            case 2:
              uint64_t v48 = 0x636E657265666572;
              uint64_t v46 = 0xE900000000000065;
              goto LABEL_47;
            case 3:
              uint64_t v46 = 0xE700000000000000;
              uint64_t v48 = 0x72656767697274;
              if (!*(void *)(v47 + 16)) {
                goto LABEL_62;
              }
              goto LABEL_48;
            default:
LABEL_47:
              if (!*(void *)(v47 + 16)) {
                goto LABEL_62;
              }
LABEL_48:
              unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v46);
              if ((v51 & 1) == 0)
              {
LABEL_62:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v56 = v18;
                if (!(v18 >> 62)) {
                  goto LABEL_63;
                }
                goto LABEL_98;
              }
              unint64_t v52 = *(void *)(*(void *)(v47 + 56) + 8 * v50);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v141[0] = v18;
              if (v52 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
                if (!v53)
                {
LABEL_96:
                  swift_bridgeObjectRelease();
                  unint64_t v62 = v18;
                  goto LABEL_97;
                }
              }
              else
              {
                uint64_t v53 = *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                if (!v53) {
                  goto LABEL_96;
                }
              }
              type metadata accessor for UsoEntity_uso_NoEntity();
              if (v53 < 1)
              {
                __break(1u);
                goto LABEL_140;
              }
              for (uint64_t j = 0; j != v53; ++j)
              {
                if ((v52 & 0xC000000000000001) != 0) {
                  MEMORY[0x1CB77D510](j, v52);
                }
                else {
                  swift_retain();
                }
                dispatch thunk of UsoValue.getAsEntity()();
                static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
                swift_release();
                uint64_t v55 = swift_release();
                if (v140)
                {
                  MEMORY[0x1CB77CD90](v55);
                  if (*(void *)((v141[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141[0] & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                }
              }
              swift_bridgeObjectRelease();
              unint64_t v62 = v141[0];
              uint64_t v9 = v128;
              unint64_t v18 = MEMORY[0x1E4FBC860];
LABEL_97:
              swift_bridgeObjectRelease();
              v141[0] = v18;
              swift_bridgeObjectRetain();
              specialized Array.append<A>(contentsOf:)(v62);
              swift_bridgeObjectRelease();
              uint64_t v56 = v141[0];
              uint64_t v12 = v130;
              if (!((unint64_t)v141[0] >> 62))
              {
LABEL_63:
                uint64_t v57 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
                goto LABEL_64;
              }
LABEL_98:
              swift_bridgeObjectRetain();
              uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
LABEL_64:
              swift_bridgeObjectRelease();
              if (v57)
              {
LABEL_88:
                swift_release();
                uint64_t v29 = v133;
                unint64_t v28 = v134;
                if (v30 == v133) {
                  goto LABEL_110;
                }
                continue;
              }
              uint64_t v58 = byte_1F236EE20;
              uint64_t v59 = 0xEC00000073656974;
              uint64_t v60 = UsoTask.arguments.getter();
              uint64_t v61 = 0x69746E4572657375;
              switch(v58)
              {
                case 1:
                  uint64_t v59 = 0xE600000000000000;
                  uint64_t v61 = 0x746567726174;
                  if (*(void *)(v60 + 16)) {
                    goto LABEL_71;
                  }
                  goto LABEL_85;
                case 2:
                  uint64_t v61 = 0x636E657265666572;
                  uint64_t v59 = 0xE900000000000065;
                  goto LABEL_70;
                case 3:
                  uint64_t v59 = 0xE700000000000000;
                  uint64_t v61 = 0x72656767697274;
                  if (!*(void *)(v60 + 16)) {
                    goto LABEL_85;
                  }
                  goto LABEL_71;
                default:
LABEL_70:
                  if (!*(void *)(v60 + 16)) {
                    goto LABEL_85;
                  }
LABEL_71:
                  unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v61, v59);
                  if ((v64 & 1) == 0)
                  {
LABEL_85:
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v69 = v18;
                    if (!(v18 >> 62)) {
                      goto LABEL_86;
                    }
                    goto LABEL_105;
                  }
                  uint64_t v65 = *(void *)(*(void *)(v60 + 56) + 8 * v63);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v141[0] = v18;
                  if ((unint64_t)v65 >> 62)
                  {
                    if (v65 < 0) {
                      uint64_t v58 = v65;
                    }
                    else {
                      uint64_t v58 = v65 & 0xFFFFFFFFFFFFFF8;
                    }
                    swift_bridgeObjectRetain();
                    uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
                    if (!v66)
                    {
LABEL_103:
                      swift_bridgeObjectRelease();
                      unint64_t v71 = v18;
                      goto LABEL_104;
                    }
                  }
                  else
                  {
                    uint64_t v66 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    swift_bridgeObjectRetain();
                    if (!v66) {
                      goto LABEL_103;
                    }
                  }
                  type metadata accessor for UsoEntity_common_EventTrigger();
                  if (v66 < 1) {
                    goto LABEL_151;
                  }
                  for (uint64_t k = 0; k != v66; ++k)
                  {
                    if ((v65 & 0xC000000000000001) != 0) {
                      MEMORY[0x1CB77D510](k, v65);
                    }
                    else {
                      swift_retain();
                    }
                    dispatch thunk of UsoValue.getAsEntity()();
                    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
                    swift_release();
                    uint64_t v68 = swift_release();
                    if (v140)
                    {
                      MEMORY[0x1CB77CD90](v68);
                      if (*(void *)((v141[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v141[0] & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
                        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();
                    }
                  }
                  swift_bridgeObjectRelease();
                  unint64_t v71 = v141[0];
                  uint64_t v9 = v128;
                  unint64_t v18 = MEMORY[0x1E4FBC860];
LABEL_104:
                  swift_bridgeObjectRelease();
                  v141[0] = v18;
                  swift_bridgeObjectRetain();
                  specialized Array.append<A>(contentsOf:)(v71);
                  swift_bridgeObjectRelease();
                  uint64_t v69 = v141[0];
                  uint64_t v12 = v130;
                  if (!((unint64_t)v141[0] >> 62))
                  {
LABEL_86:
                    uint64_t v70 = *(void *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    goto LABEL_87;
                  }
LABEL_105:
                  swift_bridgeObjectRetain();
                  uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
LABEL_87:
                  swift_bridgeObjectRelease();
                  if (v70) {
                    goto LABEL_88;
                  }
                  swift_bridgeObjectRelease_n();
                  uint64_t v13 = v124;
                  uint64_t v72 = ((uint64_t (*)(char *, uint64_t))*v123)(v131, v124);
                  MEMORY[0x1CB77CD90](v72);
                  if (*(void *)((v142 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v142 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                  break;
              }
LABEL_111:
              uint64_t v21 = v129 + 1;
              if (v129 + 1 == v122)
              {
                uint64_t v58 = v118;
                swift_bridgeObjectRelease();
                unint64_t v47 = v142;
                goto LABEL_116;
              }
              break;
          }
          goto LABEL_3;
        }
      }
      else
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v141, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      swift_release();
      if (v30 == v29) {
        goto LABEL_110;
      }
    }
  }
  uint64_t v58 = v17;
  swift_bridgeObjectRetain();
  unint64_t v47 = MEMORY[0x1E4FBC860];
LABEL_116:
  swift_bridgeObjectRelease();
  if (!(v47 >> 62))
  {
    if (*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_118;
    }
LABEL_141:
    swift_bridgeObjectRelease();
    goto LABEL_142;
  }
LABEL_140:
  swift_bridgeObjectRetain();
  uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v58) {
    goto LABEL_141;
  }
LABEL_118:
  if ((v47 & 0xC000000000000001) != 0)
  {
    uint64_t v58 = MEMORY[0x1CB77D510](0, v47);
  }
  else
  {
    if (!*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      swift_once();
      goto LABEL_123;
    }
    uint64_t v58 = *(void *)(v47 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  swift_retain();
  if (!UsoTask.isSmartPlayTask.getter())
  {
LABEL_130:
    swift_release_n();
LABEL_142:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v107 = type metadata accessor for Logger();
    __swift_project_value_buffer(v107, (uint64_t)static Logger.pommes);
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v108 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v76, v108))
    {
      uint64_t v109 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v109 = 0;
      _os_log_impl(&dword_1C8F83000, v76, v108, "SmartPlayPreflightClient#handle no conclusive result, ignoring", v109, 2u);
      MEMORY[0x1CB77E470](v109, -1, -1);
    }
    goto LABEL_146;
  }
  if (one-time initialization token for shared != -1) {
    goto LABEL_152;
  }
LABEL_123:
  os_log_type_t v83 = static PerformanceUtil.shared;
  uint64_t v84 = type metadata accessor for Date();
  uint64_t v85 = *(void *)(v84 - 8);
  MEMORY[0x1F4188790](v84);
  uint64_t v87 = (char *)&v110 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(unsigned char *@<X8>), uint64_t, void))(*(void *)v83 + 200))(v141, 0xD00000000000001ALL, 0x80000001C91A0C70, 0, v87, "SiriInformationSearch/SmartPlayPreflightClient.swift", 52, 2, 99, "handle(pommesSearchRequest:)", 28, 2, partial apply for closure #2 in SmartPlayPreflightClient.handle(pommesSearchRequest:), v117, MEMORY[0x1E4FBB390]);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v84);
  if (LOBYTE(v141[0]) != 1) {
    goto LABEL_130;
  }
  uint64_t v88 = v113;
  uint64_t v89 = (uint64_t *)(v113 + *(int *)(v110 + 32));
  uint64_t v90 = *v89;
  uint64_t v91 = v89[1];
  uint64_t v92 = v111;
  PommesSearchRequest.pommesCandidateId.getter(v111);
  uint64_t v93 = type metadata accessor for PommesCandidateId();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v92, 0, 1, v93);
  uint64_t v94 = v112;
  default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v112);
  uint64_t v95 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v88, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], v90, v91, v92, v94, 0x6867696C66657270, 0xE900000000000074, 0xD000000000000018, 0x80000001C9198F10);
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v94, v116);
  outlined destroy of MediaUserStateCenter?(v92, &demangling cache variable for type metadata for PommesCandidateId?);
  if (!v95)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v103 = type metadata accessor for Logger();
    __swift_project_value_buffer(v103, (uint64_t)static Logger.pommes);
    unint64_t v104 = Logger.logObject.getter();
    os_log_type_t v105 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v104, v105))
    {
      os_log_type_t v106 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v106 = 0;
      _os_log_impl(&dword_1C8F83000, v104, v105, "SmartPlayPreflightClient#ignore could not build PommesResponse with given parameters", v106, 2u);
      MEMORY[0x1CB77E470](v106, -1, -1);
      swift_release_n();
    }
    else
    {

      swift_release_n();
    }
    goto LABEL_147;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v96 = type metadata accessor for Logger();
  __swift_project_value_buffer(v96, (uint64_t)static Logger.pommes);
  swift_retain_n();
  uint64_t v97 = Logger.logObject.getter();
  os_log_type_t v98 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v97, v98))
  {
    unint64_t v99 = (uint8_t *)swift_slowAlloc();
    uint64_t v100 = swift_slowAlloc();
    v141[0] = v100;
    *(_DWORD *)unint64_t v99 = 136315138;
    uint64_t v142 = v58;
    type metadata accessor for UsoTask();
    swift_retain();
    uint64_t v101 = String.init<A>(describing:)();
    uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v102, v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v97, v98, "SmartPlayPreflightClient#handle Non-ambiguous play task: %s", v99, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v100, -1, -1);
    MEMORY[0x1CB77E470](v99, -1, -1);
    swift_release_n();
  }
  else
  {

    swift_release_n();
  }
LABEL_148:
  *uint64_t v121 = v95;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance CallContactPreflightClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

void CallContactPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for PommesSearchReason();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v53 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v52 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v12 = *(int *)(v11 + 76);
  uint64_t v54 = a1;
  uint64_t v13 = *(void *)(a1 + v12);
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
LABEL_32:
    if (one-time initialization token for pommes != -1) {
      goto LABEL_44;
    }
    goto LABEL_33;
  }
  uint64_t v48 = v11;
  uint64_t v49 = v7;
  uint64_t v50 = v5;
  uint64_t v51 = v6;
  uint64_t v55 = a2;
  uint64_t v15 = *(void *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
  uint64_t v16 = v13 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v17 = *(void *)(v15 + 72);
  swift_bridgeObjectRetain();
  uint64_t v18 = 0;
  uint64_t v19 = (unsigned __int8 *)&unk_1F236E000;
  uint64_t v58 = v14;
  uint64_t v59 = v13;
  uint64_t v56 = v17;
  uint64_t v57 = v16;
  while (1)
  {
    uint64_t v22 = Siri_Nlu_External_UserParse.firstCallTask()();
    if (v22) {
      break;
    }
LABEL_5:
    if (++v18 == v14)
    {
      swift_bridgeObjectRelease();
      a2 = v55;
      goto LABEL_32;
    }
  }
  uint64_t v23 = v19[3656];
  uint64_t v60 = v22;
  uint64_t v24 = UsoTask.arguments.getter();
  uint64_t v25 = 0xEC00000073656974;
  uint64_t v26 = 0x69746E4572657375;
  switch(v23)
  {
    case 1:
      uint64_t v25 = 0xE600000000000000;
      uint64_t v26 = 0x746567726174;
      if (*(void *)(v24 + 16)) {
        goto LABEL_12;
      }
      goto LABEL_3;
    case 2:
      uint64_t v26 = 0x636E657265666572;
      uint64_t v25 = 0xE900000000000065;
      goto LABEL_11;
    case 3:
      uint64_t v25 = 0xE700000000000000;
      uint64_t v26 = 0x72656767697274;
      if (!*(void *)(v24 + 16)) {
        goto LABEL_3;
      }
      goto LABEL_12;
    default:
LABEL_11:
      if (!*(void *)(v24 + 16)) {
        goto LABEL_3;
      }
LABEL_12:
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
      if ((v28 & 1) == 0)
      {
LABEL_3:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v20 = MEMORY[0x1E4FBC860];
        goto LABEL_4;
      }
      a2 = *(uint64_t **)(*(void *)(v24 + 56) + 8 * v27);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v29 = MEMORY[0x1E4FBC860];
      unint64_t v62 = MEMORY[0x1E4FBC860];
      if (!((unint64_t)a2 >> 62))
      {
        uint64_t v30 = *(void *)(((unint64_t)a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v30) {
          goto LABEL_15;
        }
LABEL_29:
        swift_bridgeObjectRelease();
        unint64_t v33 = v29;
LABEL_30:
        swift_bridgeObjectRelease();
        unint64_t v62 = v29;
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v33);
        swift_bridgeObjectRelease();
        unint64_t v20 = v62;
LABEL_4:
        char v21 = specialized CallContactPreflightClient.hasContact(_:)(v20);
        swift_release();
        swift_bridgeObjectRelease();
        if (v21)
        {
          swift_bridgeObjectRelease();
          uint64_t v40 = v54;
          uint64_t v41 = (uint64_t *)(v54 + *(int *)(v48 + 32));
          uint64_t v42 = *v41;
          uint64_t v43 = v41[1];
          uint64_t v44 = v52;
          PommesSearchRequest.pommesCandidateId.getter(v52);
          uint64_t v45 = type metadata accessor for PommesCandidateId();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v44, 0, 1, v45);
          uint64_t v46 = v53;
          default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v53);
          uint64_t v39 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v40, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], v42, v43, v44, v46, 0x6867696C66657270, 0xE900000000000074, 0xD00000000000001ALL, 0x80000001C91976E0);
          (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v46, v51);
          outlined destroy of PommesCandidateId?(v44);
          a2 = v55;
          if (!v39)
          {
            if (one-time initialization token for pommes != -1) {
              swift_once();
            }
            uint64_t v47 = type metadata accessor for Logger();
            __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
            uint64_t v35 = Logger.logObject.getter();
            os_log_type_t v36 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v35, v36))
            {
              unint64_t v37 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v37 = 0;
              char v38 = "CallContactPreflightClient#ignore could not build PommesResponse with given parameters";
LABEL_35:
              _os_log_impl(&dword_1C8F83000, v35, v36, v38, v37, 2u);
              MEMORY[0x1CB77E470](v37, -1, -1);
            }
            goto LABEL_36;
          }
          goto LABEL_42;
        }
        goto LABEL_5;
      }
      swift_bridgeObjectRetain();
      unint64_t v29 = MEMORY[0x1E4FBC860];
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      if (!v30) {
        goto LABEL_29;
      }
LABEL_15:
      type metadata accessor for UsoEntity_common_PhoneCall();
      if (v30 >= 1)
      {
        for (uint64_t i = 0; i != v30; ++i)
        {
          if (((unint64_t)a2 & 0xC000000000000001) != 0) {
            MEMORY[0x1CB77D510](i, a2);
          }
          else {
            swift_retain();
          }
          dispatch thunk of UsoValue.getAsEntity()();
          static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
          swift_release();
          uint64_t v32 = swift_release();
          if (v61)
          {
            MEMORY[0x1CB77CD90](v32);
            if (*(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v33 = v62;
        uint64_t v14 = v58;
        uint64_t v19 = (unsigned char *)&unk_1F236E000;
        unint64_t v29 = MEMORY[0x1E4FBC860];
        goto LABEL_30;
      }
      __break(1u);
LABEL_44:
      swift_once();
LABEL_33:
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.pommes);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        unint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v37 = 0;
        char v38 = "PhoneCallPreflightClient#handle no conclusive result, ignoring";
        goto LABEL_35;
      }
LABEL_36:

      uint64_t v39 = 0;
LABEL_42:
      *a2 = v39;
      return;
  }
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance PlayThisLibraryItemPreflightClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

void PlayThisLibraryItemPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = v2;
  unint64_t v139 = a2;
  uint64_t v121 = *v2;
  uint64_t v123 = type metadata accessor for PommesSearchReason();
  uint64_t v122 = *(void *)(v123 - 8);
  MEMORY[0x1F4188790](v123);
  uint64_t v120 = (uint64_t)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v119 = (uint64_t)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v138 = *(void (***)(char *, unint64_t, uint64_t))(v136 - 8);
  MEMORY[0x1F4188790](v136);
  uint64_t v115 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  uint64_t v116 = *(void *)(v117 - 8);
  MEMORY[0x1F4188790](v117);
  uint64_t v126 = (uint64_t)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  MEMORY[0x1F4188790](v10 - 8);
  unint64_t v135 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = type metadata accessor for UsoIdentifier();
  uint64_t v132 = *(void *)(v140 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v140);
  unint64_t v134 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v127 = (char *)&v111 - v14;
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v130 = *(void *)(v15 - 8);
  uint64_t v131 = (unsigned int (*)(void, void, void))v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v18 = MEMORY[0x1F4188790](v129);
  uint64_t v118 = (uint64_t)&v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v128 = (uint64_t)&v111 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v133 = (char *)&v111 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v137 = (char *)&v111 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v25 - 8);
  unint64_t v27 = (char *)&v111 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)&v111 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for PommesSearchRequest(0);
  outlined init with copy of MediaUserStateCenter?(a1 + *(int *)(v32 + 44), (uint64_t)v27, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    unint64_t v33 = v139;
    outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.pommes);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      unint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v37 = 0;
      _os_log_impl(&dword_1C8F83000, v35, v36, "PlayThisLibraryItemPreflightClient#handle nil delegatedUDA", v37, 2u);
      MEMORY[0x1CB77E470](v37, -1, -1);
    }

    goto LABEL_40;
  }
  uint64_t v124 = v29;
  char v38 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  uint64_t v114 = v28;
  v38(v31, v27, v28);
  outlined init with copy of AppDataProviding((uint64_t)(v3 + 2), (uint64_t)&v142);
  uint64_t v39 = v143;
  uint64_t v40 = v144;
  __swift_project_boxed_opaque_existential_1(&v142, v143);
  uint64_t v41 = RRReferenceResolverProtocol.getEntitiesFromMarrsSpans(relevantTo:)((uint64_t)v31, v39, v40);
  unint64_t v42 = specialized Sequence.compactMap<A>(_:)(v41);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v142);
  swift_retain();
  uint64_t v125 = specialized Sequence.first(where:)(v42);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v112 = v32;
  uint64_t v43 = *(void *)(a1 + *(int *)(v32 + 76));
  uint64_t v44 = v31;
  uint64_t v45 = a1;
  if (*(void *)(v43 + 16))
  {
    uint64_t v47 = v130;
    uint64_t v46 = v131;
    (*(void (**)(char *, unint64_t, unsigned int (*)(void, void, void)))(v130 + 16))(v17, v43 + ((*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80)), v131);
    uint64_t v48 = Siri_Nlu_External_Span.matcherNames.getter();
    (*(void (**)(char *, unsigned int (*)(void, void, void)))(v47 + 8))(v17, v46);
    uint64_t v50 = (uint64_t)v133;
    uint64_t v49 = v134;
    if (*(void *)(v48 + 16))
    {
      uint64_t v52 = (uint64_t)v137;
      uint64_t v51 = v138;
      uint64_t v53 = v136;
      v138[2](v137, v48 + ((*((unsigned __int8 *)v51 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v51 + 80)), v136);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v51[7])(v52, 0, 1, v53);
    }
    else
    {
      uint64_t v52 = (uint64_t)v137;
      uint64_t v53 = v136;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v138[7])(v137, 1, 1, v136);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v52 = (uint64_t)v137;
    uint64_t v53 = v136;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v138[7])(v137, 1, 1, v136);
    uint64_t v50 = (uint64_t)v133;
    uint64_t v49 = v134;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  uint64_t v55 = __swift_project_value_buffer(v54, (uint64_t)static Logger.pommes);
  outlined init with copy of MediaUserStateCenter?(v52, v50, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  unint64_t v134 = (char *)v55;
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.debug.getter();
  BOOL v58 = os_log_type_enabled(v56, v57);
  uint64_t v113 = v45;
  if (v58)
  {
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    uint64_t v60 = swift_slowAlloc();
    uint64_t v142 = v60;
    *(_DWORD *)uint64_t v59 = 136315138;
    outlined init with copy of MediaUserStateCenter?(v50, v128, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v61 = String.init<A>(describing:)();
    uint64_t v141 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v53 = v136;
    outlined destroy of MediaUserStateCenter?(v50, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    _os_log_impl(&dword_1C8F83000, v56, v57, "PlayThisLibraryItemPreflightClient#handle found userDialogAct: %s", v59, 0xCu);
    swift_arrayDestroy();
    uint64_t v63 = v60;
    uint64_t v52 = (uint64_t)v137;
    MEMORY[0x1CB77E470](v63, -1, -1);
    MEMORY[0x1CB77E470](v59, -1, -1);
  }
  else
  {
    outlined destroy of MediaUserStateCenter?(v50, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  }

  unint64_t v33 = v139;
  uint64_t v64 = v124;
  uint64_t v65 = v125;
  uint64_t v66 = v138[6];
  unsigned int v67 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v66)(v52, 1, v53);
  uint64_t v68 = (uint64_t)v135;
  if (v67 == 1)
  {
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      unint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v71 = 0;
      uint64_t v72 = "PlayThisLibraryItemPreflightClient#handle userDialogAct is nil, this result cannot be used in the audio plug"
            "in so ignore and try going to the server";
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  if (!v65) {
    goto LABEL_36;
  }
  uint64_t v131 = (unsigned int (*)(void, void, void))v66;
  swift_retain();
  uint64_t v73 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  uint64_t v74 = *(void *)(v73 + 16);
  uint64_t v111 = v44;
  uint64_t v133 = (char *)v73;
  if (!v74)
  {
    uint64_t v83 = 1;
    uint64_t v79 = v140;
    uint64_t v84 = v132;
    goto LABEL_33;
  }
  id v75 = *(void (**)(char *, unint64_t, uint64_t))(v132 + 16);
  unint64_t v76 = v73 + ((*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80));
  os_log_type_t v77 = (void (**)(char *, uint64_t))(v132 + 8);
  uint64_t v78 = *(void *)(v132 + 72);
  swift_bridgeObjectRetain();
  uint64_t v79 = v140;
  while (1)
  {
    v75(v49, v76, v79);
    uint64_t v81 = UsoIdentifier.namespace.getter();
    if (!v82) {
      goto LABEL_25;
    }
    if (v81 == 0x6574736973726570 && v82 == 0xED000064695F746ELL) {
      break;
    }
    char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v80) {
      goto LABEL_32;
    }
LABEL_25:
    uint64_t v79 = v140;
    (*v77)(v49, v140);
    v76 += v78;
    if (!--v74)
    {
      swift_bridgeObjectRelease();
      uint64_t v83 = 1;
      unint64_t v33 = v139;
      uint64_t v52 = (uint64_t)v137;
      uint64_t v84 = v132;
      uint64_t v64 = v124;
      uint64_t v44 = v111;
      uint64_t v85 = v125;
      uint64_t v68 = (uint64_t)v135;
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
LABEL_32:
  swift_bridgeObjectRelease();
  uint64_t v84 = v132;
  uint64_t v68 = (uint64_t)v135;
  uint64_t v79 = v140;
  (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v135, v49, v140);
  uint64_t v83 = 0;
  unint64_t v33 = v139;
  uint64_t v52 = (uint64_t)v137;
  uint64_t v64 = v124;
  uint64_t v44 = v111;
LABEL_33:
  uint64_t v85 = v125;
LABEL_34:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v68, v83, 1, v79);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v68, 1, v79) == 1)
  {
    swift_release();
    outlined destroy of MediaUserStateCenter?(v68, &demangling cache variable for type metadata for UsoIdentifier?);
LABEL_36:
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v69, v70))
    {
      unint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v71 = 0;
      uint64_t v72 = "PlayThisLibraryItemPreflightClient#handle no conclusive result, ignoring";
LABEL_38:
      _os_log_impl(&dword_1C8F83000, v69, v70, v72, v71, 2u);
      MEMORY[0x1CB77E470](v71, -1, -1);
    }
LABEL_39:

    swift_release();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v44, v114);
    outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_40:
    uint64_t v86 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 32))(v127, v68, v79);
    PlayThisLibraryItemPreflightClient.audioItem(from:)(v85, v126);
    uint64_t v87 = v118;
    outlined init with copy of MediaUserStateCenter?(v52, v118, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v88 = v136;
    if (v131(v87, 1, v136) == 1)
    {
      Siri_Nlu_External_UserDialogAct.init()();
      uint64_t v89 = outlined destroy of MediaUserStateCenter?(v87, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      uint64_t v89 = ((uint64_t (*)(char *, uint64_t, uint64_t))v138[4])(v115, v87, v88);
    }
    uint64_t v90 = v112;
    MEMORY[0x1F4188790](v89);
    id v91 = objc_allocWithZone((Class)type metadata accessor for AudioExperience());
    uint64_t v92 = (void *)AudioExperience.init(pluginId:queryConfidence:userDialogAct:builder:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v93 = swift_allocObject();
    *(_OWORD *)(v93 + 16) = xmmword_1C9195B30;
    *(void *)(v93 + 32) = v92;
    uint64_t v142 = v93;
    specialized Array._endMutation()();
    uint64_t v94 = v142;
    uint64_t v95 = *(int *)(v90 + 32);
    uint64_t v96 = v113;
    uint64_t v97 = (uint64_t *)(v113 + v95);
    uint64_t v98 = *v97;
    uint64_t v99 = v97[1];
    uint64_t v138 = v92;
    uint64_t v100 = v119;
    PommesSearchRequest.pommesCandidateId.getter(v119);
    uint64_t v101 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v100, 0, 1, v101);
    uint64_t v102 = v120;
    default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v120);
    uint64_t v86 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v96, v94, MEMORY[0x1E4FBC860], v98, v99, v100, v102, 0x616964656DLL, 0xE500000000000000, 0xD000000000000022, 0x80000001C9197FD0);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v102, v123);
    outlined destroy of MediaUserStateCenter?(v100, &demangling cache variable for type metadata for PommesCandidateId?);
    if (v86)
    {
      (*(void (**)(char *, uint64_t))(v64 + 8))(v111, v114);

      swift_release_n();
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v126, v117);
      (*(void (**)(char *, uint64_t))(v132 + 8))(v127, v140);
      outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      unint64_t v33 = v139;
    }
    else
    {
      uint64_t v103 = v138;
      unint64_t v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.error.getter();
      BOOL v106 = os_log_type_enabled(v104, v105);
      uint64_t v107 = v132;
      uint64_t v108 = v114;
      uint64_t v109 = v111;
      if (v106)
      {
        uint64_t v110 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v110 = 0;
        _os_log_impl(&dword_1C8F83000, v104, v105, "PlayThisLibraryItemPreflightClient#ignore could not build PommesResponse with given parameters", v110, 2u);
        MEMORY[0x1CB77E470](v110, -1, -1);
      }

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v109, v108);
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v126, v117);
      (*(void (**)(char *, uint64_t))(v107 + 8))(v127, v140);
      outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      uint64_t v86 = 0;
      unint64_t v33 = v139;
    }
  }
  *unint64_t v33 = v86;
}

uint64_t outlined init with copy of Siri_Nlu_External_DelegatedUserDialogAct?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t RRReferenceResolverProtocol.getEntitiesFromMarrsSpans(relevantTo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Span?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v142 = (char *)&v132 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span, RREntity));
  uint64_t v140 = *(void *)(v141 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v141);
  uint64_t v150 = (uint64_t)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  unint64_t v139 = (char *)&v132 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v138 = (uint64_t)&v132 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = type metadata accessor for UsoIdentifier();
  uint64_t v136 = *(void *)(v163 - 8);
  MEMORY[0x1F4188790](v163);
  uint64_t v17 = (char *)&v132 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v18 = *(char **)(v157 - 8);
  MEMORY[0x1F4188790](v157);
  v152 = (char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_Span();
  uint64_t v145 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  uint64_t v137 = (char *)&v132 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v169 = (char *)&v132 - v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v168 = (char *)&v132 - v25;
  uint64_t v26 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  uint64_t v170 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v26 - 8);
  uint64_t v171 = v26;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v132 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(Siri_Nlu_External_Span.matcherNames.getter() + 16);
  swift_bridgeObjectRelease();
  if (!v29) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v166 = v18;
  uint64_t v132 = v15;
  uint64_t v133 = v3;
  uint64_t v134 = a2;
  uint64_t v135 = a3;
  uint64_t v164 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_Span.MatcherName>);
  uint64_t v30 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(void *)(v31 + 72);
  unint64_t v33 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1C9195D60;
  unint64_t v35 = v34 + v33;
  os_log_type_t v36 = *(void (**)(unint64_t, void, uint64_t))(v31 + 104);
  v36(v35, *MEMORY[0x1E4FA2718], v30);
  v36(v35 + v32, *MEMORY[0x1E4FA2728], v30);
  uint64_t v37 = specialized Set.init(_nonEmptyArrayLiteral:)(v34);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  unint64_t v38 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v39 = Siri_Nlu_External_Span.matcherNames.getter();
  uint64_t v40 = 0;
  uint64_t v41 = specialized _ArrayProtocol.filter(_:)(v39, v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v156 = *(void *)(v41 + 16);
  if (!v156)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v172 = v38;
  type metadata accessor for UsoEntityBuilder_common_ReferenceType();
  swift_allocObject();
  uint64_t v42 = UsoEntityBuilder_common_ReferenceType.init()();
  uint64_t v44 = v170;
  uint64_t v43 = v171;
  v170[13]((uint64_t)v28, *MEMORY[0x1E4FA3638], v171);
  dispatch thunk of UsoEntityBuilder_common_ReferenceType.setDefinedValue(value:)();
  __n128 v45 = ((__n128 (*)(char *, uint64_t))v44[1])(v28, v43);
  unint64_t v46 = 0;
  uint64_t v47 = v145;
  unint64_t v155 = v41 + ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80));
  uint64_t v167 = v145 + 16;
  uint64_t v154 = (void (**)(uint64_t, uint64_t))(v166 + 8);
  uint64_t v153 = (void (**)(char *, uint64_t))(v145 + 8);
  int v159 = (void (**)(char *, uint64_t, uint64_t))(v145 + 32);
  uint64_t v158 = (void (**)(unint64_t, char *, uint64_t))(v145 + 40);
  uint64_t v170 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 8);
  uint64_t v171 = v136 + 16;
  v45.n128_u64[0] = 136315138;
  __n128 v144 = v45;
  uint64_t v143 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v48 = v163;
  uint64_t v49 = v164;
  uint64_t v162 = v42;
  uint64_t v50 = (uint64_t)v152;
  uint64_t v151 = v41;
  uint64_t v161 = v17;
  while (1)
  {
    if (v46 >= *(void *)(v41 + 16))
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    uint64_t v165 = *(void *)(v47 + 72);
    unint64_t v160 = v46;
    uint64_t v166 = *(char **)(v47 + 16);
    ((void (*)(char *, unint64_t, uint64_t))v166)(v168, v155 + v165 * v46, v49);
    Siri_Nlu_External_Span.usoGraph.getter();
    uint64_t v51 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    if (v40)
    {
      (*v154)(v50, v157);
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      __swift_project_value_buffer(v52, (uint64_t)static Logger.pommes);
      uint64_t v53 = v40;
      uint64_t v54 = v40;
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        uint64_t v173 = (uint64_t)v40;
        uint64_t v174 = (void *)v58;
        *(_DWORD *)uint64_t v57 = v144.n128_u32[0];
        uint64_t v59 = v40;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v60 = String.init<A>(describing:)();
        *(void *)(v57 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, (uint64_t *)&v174);
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C8F83000, v55, v56, "Skipping span due to error: %s", (uint8_t *)v57, 0xCu);
        swift_arrayDestroy();
        uint64_t v62 = v58;
        uint64_t v48 = v163;
        MEMORY[0x1CB77E470](v62, -1, -1);
        MEMORY[0x1CB77E470](v57, -1, -1);
      }
      else
      {
      }
      (*v153)(v168, v49);
      uint64_t v40 = 0;
      uint64_t v50 = (uint64_t)v152;
      uint64_t v41 = v151;
      goto LABEL_6;
    }
    uint64_t v63 = v51;
    (*v154)(v50, v157);
    uint64_t v64 = static UsoConversionUtils.extractFirstEntityFromGraph(graph:)();
    if (!v64)
    {
      (*v153)(v168, v49);
      swift_release();
      goto LABEL_6;
    }
    uint64_t v148 = v63;
    uint64_t v149 = 0;
    uint64_t v147 = v64;
    uint64_t v65 = UsoEntity.usoIdentifiers.getter();
    uint64_t v40 = *(char **)(v65 + 16);
    uint64_t v146 = v65;
    if (v40) {
      break;
    }
LABEL_34:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    (*v153)(v168, v49);
    uint64_t v47 = v145;
    uint64_t v50 = (uint64_t)v152;
    uint64_t v41 = v151;
    uint64_t v40 = v149;
LABEL_6:
    unint64_t v46 = v160 + 1;
    if (v160 + 1 == v156)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for UsoEntityBuilder_uso_NoEntity();
      swift_allocObject();
      uint64_t v50 = UsoEntityBuilder_uso_NoEntity.init()();
      swift_retain();
      dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoReferenceType(value:)();
      swift_release();
      uint64_t v93 = MEMORY[0x1CB77A2C0](v50);
      if (v93)
      {
        uint64_t v40 = (char *)v93;
        if (one-time initialization token for pommes == -1)
        {
LABEL_38:
          uint64_t v94 = type metadata accessor for Logger();
          __swift_project_value_buffer(v94, (uint64_t)static Logger.pommes);
          swift_retain_n();
          uint64_t v95 = Logger.logObject.getter();
          os_log_type_t v96 = static os_log_type_t.debug.getter();
          BOOL v97 = os_log_type_enabled(v95, v96);
          uint64_t v168 = (char *)v50;
          if (v97)
          {
            uint64_t v98 = (uint8_t *)swift_slowAlloc();
            uint64_t v99 = swift_slowAlloc();
            uint64_t v174 = (void *)v99;
            *(_DWORD *)uint64_t v98 = v144.n128_u32[0];
            uint64_t v100 = type metadata accessor for UsoBuilderOptions();
            uint64_t v101 = (uint64_t)v132;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v132, 1, 1, v100);
            static UsoBuilderConversionUtils.convertEntityToRootedEntityGraph(entity:options:)();
            outlined destroy of MediaUserStateCenter?(v101, (uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
            uint64_t v102 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
            unint64_t v104 = v103;
            swift_release();
            uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v104, (uint64_t *)&v174);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C8F83000, v95, v96, "Created entity for SRR: %s", v98, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1CB77E470](v99, -1, -1);
            MEMORY[0x1CB77E470](v98, -1, -1);
          }
          else
          {

            swift_release_n();
          }
          uint64_t v106 = (uint64_t)v142;
          uint64_t v107 = MEMORY[0x1E4FBC860];
          uint64_t v108 = specialized UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(v133, 0, (uint64_t)v40, v134, v135);
          if (v108) {
            uint64_t v107 = v108;
          }
          uint64_t v109 = *(void *)(v107 + 16);
          if (v109)
          {
            uint64_t v163 = (uint64_t)v40;
            uint64_t v171 = type metadata accessor for RREntity();
            uint64_t v110 = *(void *)(v171 - 8);
            unint64_t v111 = v107
                 + ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80));
            uint64_t v112 = *(void *)(v110 + 72);
            uint64_t v113 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v145 + 56);
            uint64_t v114 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v145 + 48);
            uint64_t v169 = (char *)(v110 + 16);
            uint64_t v161 = (char *)v107;
            swift_bridgeObjectRetain();
            unint64_t v105 = MEMORY[0x1E4FBC860];
            uint64_t v170 = v114;
            do
            {
              uint64_t v115 = RREntity.id.getter();
              uint64_t v117 = v172;
              if (*(void *)(v172 + 16)
                && (unint64_t v118 = specialized __RawDictionaryStorage.find<A>(_:)(v115, v116), (v119 & 1) != 0))
              {
                ((void (*)(uint64_t, unint64_t, uint64_t))v166)(v106, *(void *)(v117 + 56) + v118 * v165, v164);
                uint64_t v120 = 0;
              }
              else
              {
                uint64_t v120 = 1;
              }
              uint64_t v121 = v164;
              (*v113)(v106, v120, 1, v164);
              uint64_t v122 = v121;
              swift_bridgeObjectRelease();
              if ((*v114)(v106, 1, v121) == 1)
              {
                outlined destroy of MediaUserStateCenter?(v106, &demangling cache variable for type metadata for Siri_Nlu_External_Span?);
              }
              else
              {
                uint64_t v123 = *v159;
                uint64_t v124 = v137;
                (*v159)(v137, v106, v122);
                uint64_t v125 = v122;
                uint64_t v126 = (uint64_t)v139;
                uint64_t v127 = &v139[*(int *)(v141 + 48)];
                v123(v139, (uint64_t)v124, v125);
                (*(void (**)(char *, unint64_t, uint64_t))v169)(v127, v111, v171);
                uint64_t v128 = v138;
                outlined init with take of (Siri_Nlu_External_Span, RREntity)(v126, v138);
                outlined init with take of (Siri_Nlu_External_Span, RREntity)(v128, v150);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v105 + 16) + 1, 1, v105);
                }
                unint64_t v130 = *(void *)(v105 + 16);
                unint64_t v129 = *(void *)(v105 + 24);
                if (v130 >= v129 >> 1) {
                  unint64_t v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v129 > 1, v130 + 1, 1, v105);
                }
                *(void *)(v105 + 16) = v130 + 1;
                outlined init with take of (Siri_Nlu_External_Span, RREntity)(v150, v105+ ((*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80))+ *(void *)(v140 + 72) * v130);
                uint64_t v106 = (uint64_t)v142;
                uint64_t v114 = v170;
              }
              v111 += v112;
              --v109;
            }
            while (v109);
            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            unint64_t v105 = MEMORY[0x1E4FBC860];
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v105;
        }
LABEL_67:
        swift_once();
        goto LABEL_38;
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return MEMORY[0x1E4FBC860];
    }
  }
  unint64_t v66 = v65 + ((*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80));
  uint64_t v67 = *(void *)(v136 + 72);
  uint64_t v68 = *(void (**)(char *, unint64_t, uint64_t))(v136 + 16);
  v68(v17, v66, v48);
  while (1)
  {
    dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
    uint64_t v70 = UsoIdentifier.namespace.getter();
    if (!v71) {
      goto LABEL_18;
    }
    if (v70 == 0x64695F6D657469 && v71 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v72 & 1) == 0) {
        goto LABEL_18;
      }
    }
    uint64_t v73 = v68;
    uint64_t v74 = v67;
    uint64_t v50 = UsoIdentifier.value.getter();
    uint64_t v76 = v75;
    ((void (*)(char *, char *, uint64_t))v166)(v169, v168, v49);
    uint64_t v77 = v172;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v174 = (void *)v77;
    unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v76);
    uint64_t v81 = *(void *)(v77 + 16);
    BOOL v82 = (v79 & 1) == 0;
    uint64_t v83 = v81 + v82;
    if (__OFADD__(v81, v82))
    {
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    char v84 = v79;
    if (*(void *)(v77 + 24) >= v83)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      goto LABEL_31;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v83, isUniquelyReferenced_nonNull_native);
    unint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v76);
    if ((v84 & 1) != (v86 & 1)) {
      break;
    }
    unint64_t v80 = v85;
LABEL_31:
    uint64_t v67 = v74;
    uint64_t v87 = v174;
    uint64_t v68 = v73;
    if (v84)
    {
      unint64_t v69 = v174[7] + v80 * v165;
      uint64_t v49 = v164;
      (*v158)(v69, v169, v164);
      uint64_t v17 = v161;
    }
    else
    {
      v174[(v80 >> 6) + 8] |= 1 << v80;
      uint64_t v88 = (uint64_t *)(v87[6] + 16 * v80);
      *uint64_t v88 = v50;
      v88[1] = v76;
      unint64_t v89 = v87[7] + v80 * v165;
      uint64_t v49 = v164;
      (*v159)((char *)v89, (uint64_t)v169, v164);
      uint64_t v90 = v87[2];
      BOOL v91 = __OFADD__(v90, 1);
      uint64_t v92 = v90 + 1;
      uint64_t v17 = v161;
      if (v91) {
        goto LABEL_65;
      }
      v87[2] = v92;
      swift_bridgeObjectRetain();
    }
    uint64_t v172 = (uint64_t)v174;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v48 = v163;
LABEL_18:
    ((void (*)(char *, uint64_t))*v170)(v17, v48);
    v66 += v67;
    if (!--v40) {
      goto LABEL_34;
    }
    v68(v17, v66, v48);
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of Siri_Nlu_External_DelegatedUserDialogAct?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance WholeHomeAudioPreflightClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

void WholeHomeAudioPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void (*v89)(void *__return_ptr, uint64_t *);
  uint64_t v90;
  id v91;
  id v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  void (**v132)(char *, uint64_t);
  void (**v133)(char *, uint64_t);
  uint64_t v134;
  void (**v135)(char *, void);
  uint64_t v136;
  void (*v137)(char *, unint64_t, uint64_t);
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  long long v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  void v147[4];
  void v148[4];
  uint64_t v149[3];

  uint64_t v125 = a2;
  uint64_t v116 = *v2;
  uint64_t v117 = type metadata accessor for PommesSearchReason();
  uint64_t v115 = *(void *)(v117 - 8);
  MEMORY[0x1F4188790](v117);
  uint64_t v113 = (uint64_t)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v112 = (uint64_t)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&uint64_t v142 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v7 = *(void *)(v142 - 8);
  MEMORY[0x1F4188790](v142);
  uint64_t v9 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v10 = *(void *)(v141 - 8);
  MEMORY[0x1F4188790](v141);
  uint64_t v140 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9196230;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:);
  *(void *)(v17 + 24) = v2;
  *(void *)(inited + 32) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PommesUsoTask) -> (@unowned Bool);
  uint64_t v124 = inited + 32;
  *(void *)(inited + 40) = v17;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = partial apply for implicit closure #4 in implicit closure #3 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:);
  *(void *)(v18 + 24) = v2;
  *(void *)(inited + 48) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PommesUsoTask) -> (@unowned Bool);
  *(void *)(inited + 56) = v18;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = partial apply for implicit closure #6 in implicit closure #5 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:);
  *(void *)(v19 + 24) = v2;
  *(void *)(inited + 64) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PommesUsoTask) -> (@unowned Bool);
  *(void *)(inited + 72) = v19;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = partial apply for implicit closure #8 in implicit closure #7 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:);
  *(void *)(v20 + 24) = v2;
  *(void *)(inited + 80) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PommesUsoTask) -> (@unowned Bool);
  *(void *)(inited + 88) = v20;
  unint64_t v111 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v21 = *(int *)(v111 + 76);
  uint64_t v114 = a1;
  uint64_t v22 = *(void *)(a1 + v21);
  uint64_t v23 = *(void *)(v22 + 16);
  uint64_t v127 = inited;
  uint64_t v123 = v23;
  if (!v23)
  {
    swift_retain_n();
    unint64_t v69 = (void *)MEMORY[0x1E4FBC860];
LABEL_57:
    uint64_t v70 = (void *)v69[2];
    if (!v70)
    {
      swift_bridgeObjectRelease();
LABEL_90:
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ());
      swift_arrayDestroy();
      goto LABEL_91;
    }
    uint64_t v71 = v69 + 4;
    uint64_t v128 = v69;
    swift_bridgeObjectRetain();
    uint64_t v72 = 0;
    uint64_t v143 = inited + 40;
    uint64_t v146 = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v73 = 136315138;
    uint64_t v142 = v73;
    __n128 v144 = v70;
    while (1)
    {
      uint64_t v74 = &v71[3 * v72];
      uint64_t v75 = *v74;
      uint64_t v76 = v74[1];
      unint64_t v77 = v74[2];
      static UsoTask_CodegenConverter.convert(task:)();
      outlined init with copy of MediaUserStateCenter?((uint64_t)v149, (uint64_t)v148, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (!v148[3]) {
        break;
      }
      type metadata accessor for UsoTask_play_common_MediaItem();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_66;
      }
      uint64_t v78 = v147[0];
      outlined init with take of Any?((uint64_t)v149, (uint64_t)v148);
      if (v78)
      {
        swift_release();
        outlined destroy of MediaUserStateCenter?((uint64_t)v148, (uint64_t *)&demangling cache variable for type metadata for Any?);
        goto LABEL_70;
      }
LABEL_67:
      outlined init with take of Any?((uint64_t)v148, (uint64_t)v147);
      if (!v147[3])
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v147, (uint64_t *)&demangling cache variable for type metadata for Any?);
        goto LABEL_60;
      }
      type metadata accessor for UsoTask_update_common_MediaItem();
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_60;
      }
      swift_release();
LABEL_70:
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      char v79 = v71;
      uint64_t v80 = type metadata accessor for Logger();
      uint64_t v81 = __swift_project_value_buffer(v80, (uint64_t)static Logger.pommes);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      BOOL v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.debug.getter();
      BOOL v84 = os_log_type_enabled(v82, v83);
      uint64_t v145 = v81;
      if (v84)
      {
        uint64_t v85 = swift_slowAlloc();
        uint64_t v86 = swift_slowAlloc();
        v149[0] = v86;
        *(_DWORD *)uint64_t v85 = v142;
        swift_bridgeObjectRetain();
        *(void *)(v85 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v149);
        swift_release_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C8F83000, v82, v83, "Checking task:\n%s", (uint8_t *)v85, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v86, -1, -1);
        MEMORY[0x1CB77E470](v85, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
      uint64_t v87 = *(void *)(v127 + 16);
      if (v87)
      {
        swift_bridgeObjectRetain();
        uint64_t v88 = v143;
        while (1)
        {
          unint64_t v89 = *(void (**)(void *__return_ptr, uint64_t *))(v88 - 8);
          v149[0] = v75;
          v149[1] = v76;
          v149[2] = v77;
          swift_retain();
          v89(v148, v149);
          swift_release();
          if (v148[0]) {
            break;
          }
          v88 += 16;
          if (!--v87)
          {
            swift_bridgeObjectRelease();
            uint64_t v71 = v79;
            uint64_t v70 = v144;
            goto LABEL_60;
          }
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ());
        swift_arrayDestroy();
        uint64_t v100 = v114;
        uint64_t v101 = (uint64_t *)(v114 + *(int *)(v111 + 32));
        uint64_t v102 = *v101;
        unint64_t v103 = v101[1];
        unint64_t v104 = v112;
        PommesSearchRequest.pommesCandidateId.getter(v112);
        unint64_t v105 = type metadata accessor for PommesCandidateId();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56))(v104, 0, 1, v105);
        uint64_t v106 = v113;
        default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v113);
        uint64_t v107 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v100, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], v102, v103, v104, v106, 0x6867696C66657270, 0xE900000000000074, 0xD00000000000001DLL, 0x80000001C9196D30);
        (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v106, v117);
        outlined destroy of MediaUserStateCenter?(v104, &demangling cache variable for type metadata for PommesCandidateId?);
        if (!v107)
        {
          uint64_t v93 = Logger.logObject.getter();
          uint64_t v108 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v93, v108))
          {
            uint64_t v109 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v109 = 0;
            _os_log_impl(&dword_1C8F83000, v93, v108, "WholeHomeAudioPreflightClient#ignore could not build PommesResponse with given parameters", v109, 2u);
            MEMORY[0x1CB77E470](v109, -1, -1);
          }
LABEL_84:

          goto LABEL_91;
        }
        goto LABEL_92;
      }
      uint64_t v71 = v79;
      uint64_t v70 = v144;
LABEL_60:
      if ((void *)++v72 == v70)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_90;
      }
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v148, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_66:
    outlined init with take of Any?((uint64_t)v149, (uint64_t)v148);
    goto LABEL_67;
  }
  uint64_t v24 = *(void *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
  uint64_t v25 = v22 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  uint64_t v134 = v13 + 16;
  uint64_t v133 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v135 = (void (**)(char *, void))(v7 + 8);
  uint64_t v132 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v26 = *(void *)(v24 + 72);
  uint64_t v27 = v25;
  swift_retain_n();
  unint64_t v118 = v22;
  swift_bridgeObjectRetain_n();
  uint64_t v28 = 0;
  uint64_t v128 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v120 = v26;
  uint64_t v131 = v9;
  unint64_t v130 = v12;
  unint64_t v129 = v15;
  char v119 = v13;
  uint64_t v121 = v27;
  while (2)
  {
    uint64_t v126 = v28;
    uint64_t v29 = Siri_Nlu_External_Span.matcherNames.getter();
    uint64_t v136 = *(void *)(v29 + 16);
    if (!v136)
    {
      swift_bridgeObjectRelease();
      uint64_t v31 = (void *)MEMORY[0x1E4FBC860];
      goto LABEL_36;
    }
    unint64_t v139 = v29 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v138 = *(void *)(v13 + 72);
    uint64_t v137 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
    uint64_t v122 = v29;
    swift_bridgeObjectRetain();
    uint64_t v30 = 0;
    uint64_t v31 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      v137(v15, v139 + v138 * v30, v12);
      uint64_t v32 = v140;
      Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
      Siri_Nlu_External_UserStatedTask.task.getter();
      (*v133)(v32, v141);
      uint64_t v33 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
      uint64_t v145 = v30;
      (*v135)(v9, v142);
      uint64_t v146 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
      uint64_t v35 = v34;
      unint64_t v36 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
      unint64_t v37 = v36;
      __n128 v144 = v31;
      if (v36 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v38)
        {
LABEL_19:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v40 = MEMORY[0x1E4FBC860];
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v38 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v38) {
          goto LABEL_19;
        }
      }
      uint64_t v143 = v33;
      v149[0] = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38 & ~(v38 >> 63), 0);
      if (v38 < 0) {
        goto LABEL_95;
      }
      uint64_t v39 = 0;
      uint64_t v40 = v149[0];
      do
      {
        if ((v37 & 0xC000000000000001) != 0)
        {
          uint64_t v41 = MEMORY[0x1CB77D510](v39, v37);
        }
        else
        {
          uint64_t v41 = *(void *)(v37 + 8 * v39 + 32);
          swift_retain();
        }
        swift_bridgeObjectRetain();
        v149[0] = v40;
        unint64_t v43 = *(void *)(v40 + 16);
        unint64_t v42 = *(void *)(v40 + 24);
        if (v43 >= v42 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
          uint64_t v40 = v149[0];
        }
        ++v39;
        *(void *)(v40 + 16) = v43 + 1;
        uint64_t v44 = (void *)(v40 + 24 * v43);
        uint64_t v45 = v146;
        v44[4] = v41;
        v44[5] = v45;
        v44[6] = v35;
      }
      while (v38 != v39);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v9 = v131;
      uint64_t v12 = v130;
      uint64_t v15 = v129;
LABEL_20:
      (*v132)(v15, v12);
      uint64_t v46 = *(void *)(v40 + 16);
      uint64_t v31 = v144;
      int64_t v47 = v144[2];
      int64_t v48 = v47 + v46;
      if (__OFADD__(v47, v46))
      {
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v48 > v31[3] >> 1)
      {
        if (v47 <= v48) {
          int64_t v50 = v47 + v46;
        }
        else {
          int64_t v50 = v47;
        }
        uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)isUniquelyReferenced_nonNull_native, v50, 1, v31);
      }
      uint64_t v51 = v145;
      if (*(void *)(v40 + 16))
      {
        uint64_t v52 = v31[2];
        if ((v31[3] >> 1) - v52 < v46) {
          goto LABEL_96;
        }
        unint64_t v53 = (unint64_t)&v31[3 * v52 + 4];
        if (v40 + 32 < v53 + 24 * v46 && v53 < v40 + 32 + 24 * v46) {
          goto LABEL_102;
        }
        swift_arrayInitWithCopy();
        if (v46)
        {
          uint64_t v54 = v31[2];
          BOOL v55 = __OFADD__(v54, v46);
          uint64_t v56 = v54 + v46;
          if (v55) {
            goto LABEL_97;
          }
          v31[2] = v56;
        }
      }
      else if (v46)
      {
        goto LABEL_94;
      }
      uint64_t v30 = v51 + 1;
      swift_bridgeObjectRelease();
    }
    while (v30 != v136);
    swift_bridgeObjectRelease_n();
    uint64_t inited = v127;
LABEL_36:
    uint64_t v57 = v31[2];
    int64_t v58 = v128[2];
    int64_t v59 = v58 + v57;
    if (__OFADD__(v58, v57)) {
      goto LABEL_98;
    }
    uint64_t v60 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v61 = v128;
    if ((v60 & 1) == 0 || v59 > v128[3] >> 1)
    {
      if (v58 <= v59) {
        int64_t v62 = v58 + v57;
      }
      else {
        int64_t v62 = v58;
      }
      unint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)v60, v62, 1, v128);
    }
    uint64_t v63 = v31[2];
    uint64_t v128 = v61;
    if (v63)
    {
      uint64_t v64 = v61[2];
      if ((v61[3] >> 1) - v64 < v57)
      {
        __break(1u);
        goto LABEL_101;
      }
      unint64_t v65 = (unint64_t)&v61[3 * v64 + 4];
      if ((unint64_t)(v31 + 4) < v65 + 24 * v57 && v65 < (unint64_t)&v31[3 * v57 + 4])
      {
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      swift_arrayInitWithCopy();
      if (v57)
      {
        uint64_t v67 = v128[2];
        BOOL v55 = __OFADD__(v67, v57);
        uint64_t v68 = v67 + v57;
        if (!v55)
        {
          v128[2] = v68;
          goto LABEL_54;
        }
LABEL_101:
        __break(1u);
        goto LABEL_102;
      }
LABEL_54:
      uint64_t v28 = v126 + 1;
      swift_bridgeObjectRelease();
      uint64_t v13 = v119;
      if (v28 == v123)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v69 = v128;
        goto LABEL_57;
      }
      continue;
    }
    break;
  }
  if (!v57) {
    goto LABEL_54;
  }
LABEL_99:
  __break(1u);
  swift_once();
  uint64_t v90 = type metadata accessor for Logger();
  __swift_project_value_buffer(v90, (uint64_t)static Logger.pommes);
  BOOL v91 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = Logger.logObject.getter();
  uint64_t v94 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v93, v94))
  {

    goto LABEL_84;
  }
  uint64_t v95 = (uint8_t *)swift_slowAlloc();
  os_log_type_t v96 = swift_slowAlloc();
  v149[0] = v96;
  *(_DWORD *)uint64_t v95 = 136315138;
  v148[0] = 0;
  BOOL v97 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v98 = String.init<A>(describing:)();
  v148[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, v149);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1C8F83000, v93, v94, "ConversionUtils.convertUserDialogActToTasks error: %s", v95, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1CB77E470](v96, -1, -1);
  MEMORY[0x1CB77E470](v95, -1, -1);

LABEL_91:
  uint64_t v107 = 0;
LABEL_92:
  *uint64_t v125 = v107;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance PlayRadioStationPreflightClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

void PlayRadioStationPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for PommesSearchReason();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v122 = (uint64_t)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v121 = (uint64_t)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v108 = *(void *)(v109 - 8);
  MEMORY[0x1F4188790](v109);
  uint64_t v107 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v12 - 8);
  char v119 = (char *)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v110 = *(void *)(v111 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v111);
  uint64_t v106 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v123 = (char *)&v105 - v16;
  uint64_t v139 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v17 = *(void *)(v139 - 8);
  MEMORY[0x1F4188790](v139);
  uint64_t v19 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v112 = (char *)&v105 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v136 = (char *)&v105 - v24;
  uint64_t v120 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v25 = *(int *)(v120 + 76);
  uint64_t v127 = a1;
  uint64_t v117 = v25;
  uint64_t v26 = *(void *)(a1 + v25);
  uint64_t v27 = MEMORY[0x1E4FBC860];
  uint64_t v142 = MEMORY[0x1E4FBC860];
  uint64_t v28 = *(void *)(v26 + 16);
  unint64_t v126 = MEMORY[0x1E4FBC860];
  uint64_t v128 = v28;
  uint64_t v118 = v21;
  if (v28)
  {
    uint64_t v113 = v7;
    uint64_t v114 = v5;
    uint64_t v105 = v6;
    uint64_t v116 = a2;
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    uint64_t v29 = v21 + 16;
    uint64_t v132 = v26 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    uint64_t v133 = v30;
    uint64_t v138 = v17 + 16;
    uint64_t v31 = (void (**)(char *, uint64_t))(v17 + 8);
    unint64_t v129 = (void (**)(char *, uint64_t))(v29 - 8);
    uint64_t v134 = v29;
    uint64_t v131 = *(void *)(v29 + 56);
    uint64_t v115 = v26;
    swift_bridgeObjectRetain_n();
    uint64_t v32 = 0;
    uint64_t v137 = MEMORY[0x1E4FBC840] + 8;
    uint64_t v33 = v136;
    uint64_t v125 = v17;
    uint64_t v130 = v20;
    while (1)
    {
      uint64_t v135 = v32;
      v133(v33, v132 + v131 * v32, v20);
      uint64_t v34 = Siri_Nlu_External_Span.matcherNames.getter();
      v140[0] = v27;
      uint64_t v35 = *(void *)(v34 + 16);
      if (v35)
      {
        unint64_t v36 = v34 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
        uint64_t v37 = *(void *)(v17 + 72);
        uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 16);
        swift_bridgeObjectRetain();
        uint64_t v39 = v139;
        do
        {
          v38(v19, v36, v39);
          unint64_t v40 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
          (*v31)(v19, v39);
          specialized Array.append<A>(contentsOf:)(v40, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
          uint64_t v39 = v139;
          v36 += v37;
          --v35;
        }
        while (v35);
        swift_bridgeObjectRelease_n();
        unint64_t v41 = v140[0];
        uint64_t v17 = v125;
        uint64_t v27 = MEMORY[0x1E4FBC860];
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v41 = v27;
      }
      unint64_t v141 = v27;
      if (!(v41 >> 62))
      {
        uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v42) {
          break;
        }
        goto LABEL_20;
      }
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v42) {
        break;
      }
LABEL_20:
      swift_bridgeObjectRelease();
      unint64_t v44 = v27;
LABEL_21:
      uint64_t v33 = v136;
      uint64_t v32 = v135 + 1;
      uint64_t v20 = v130;
      (*v129)(v136, v130);
      specialized Array.append<A>(contentsOf:)(v44, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
      if (v32 == v128)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v126 = v142;
        a2 = v116;
        uint64_t v6 = v105;
        uint64_t v5 = v114;
        uint64_t v7 = v113;
        goto LABEL_23;
      }
    }
    if (v42 >= 1)
    {
      uint64_t v43 = 0;
      while (1)
      {
        swift_retain();
        static UsoTask_CodegenConverter.convert(task:)();
        if (v140[3])
        {
          type metadata accessor for UsoTask_play_common_RadioStation();
          if (swift_dynamicCast())
          {
            swift_release();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            goto LABEL_14;
          }
        }
        else
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)v140, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
        swift_release();
LABEL_14:
        if (v42 == ++v43)
        {
          swift_bridgeObjectRelease();
          unint64_t v44 = v141;
          uint64_t v27 = MEMORY[0x1E4FBC860];
          goto LABEL_21;
        }
      }
    }
    __break(1u);
    swift_once();
    uint64_t v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.pommes);
    id v63 = 0;
    id v64 = 0;
    unint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    BOOL v67 = os_log_type_enabled(v65, v66);
    a2 = v116;
    if (v67)
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      v140[0] = v69;
      *(_DWORD *)uint64_t v68 = 136315138;
      uint64_t v142 = 0;
      id v70 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v71 = String.init<A>(describing:)();
      uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v65, v66, "ConversionUtils.convertUserDialogActToTasks error: %s", v68, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v69, -1, -1);
      MEMORY[0x1CB77E470](v68, -1, -1);
    }
    else
    {
    }
  }
  else
  {
LABEL_23:
    uint64_t v45 = v124;
    swift_retain();
    uint64_t v46 = specialized Sequence.first(where:)(v126, v45);
    swift_bridgeObjectRelease();
    swift_release();
    if (v46)
    {
      uint64_t v113 = v7;
      uint64_t v114 = v5;
      uint64_t v47 = one-time initialization token for pommes;
      swift_retain();
      if (v47 != -1) {
        swift_once();
      }
      uint64_t v137 = 0;
      uint64_t v48 = type metadata accessor for Logger();
      uint64_t v49 = __swift_project_value_buffer(v48, (uint64_t)static Logger.pommes);
      swift_retain_n();
      uint64_t v138 = v49;
      int64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = swift_slowAlloc();
        uint64_t v105 = v6;
        uint64_t v53 = v52;
        uint64_t v54 = swift_slowAlloc();
        uint64_t v125 = v17;
        uint64_t v55 = v54;
        v140[0] = v54;
        *(_DWORD *)uint64_t v53 = 136315394;
        uint64_t v56 = UsoTask.verbString.getter();
        uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v53 + 12) = 2080;
        uint64_t v58 = UsoTask.baseEntityAsString.getter();
        uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v50, v51, "PlayRadioStationPreflightClient matched task: %s::%s", (uint8_t *)v53, 0x16u);
        swift_arrayDestroy();
        uint64_t v60 = v55;
        uint64_t v17 = v125;
        MEMORY[0x1CB77E470](v60, -1, -1);
        uint64_t v61 = v53;
        uint64_t v6 = v105;
        MEMORY[0x1CB77E470](v61, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v74 = v123;
      uint64_t v75 = *(void *)(v127 + v117);
      uint64_t v76 = (uint64_t)v119;
      uint64_t v77 = v118;
      if (*(void *)(v75 + 16))
      {
        uint64_t v78 = v112;
        (*(void (**)(char *, unint64_t, uint64_t))(v118 + 16))(v112, v75 + ((*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80)), v20);
        uint64_t v79 = Siri_Nlu_External_Span.matcherNames.getter();
        (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v20);
        if (*(void *)(v79 + 16))
        {
          uint64_t v80 = v139;
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16))(v76, v79 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), v139);
          uint64_t v81 = 0;
        }
        else
        {
          uint64_t v81 = 1;
          uint64_t v80 = v139;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v76, v81, 1, v80);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v76, 1, v80) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v76, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        }
        else
        {
          uint64_t v82 = v76;
          os_log_type_t v83 = v107;
          Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
          (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v82, v80);
          BOOL v84 = v106;
          Siri_Nlu_External_UserStatedTask.task.getter();
          (*(void (**)(char *, uint64_t))(v108 + 8))(v83, v109);
          uint64_t v85 = v110;
          uint64_t v86 = v111;
          (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v74, v84, v111);
          uint64_t v87 = v74;
          uint64_t v88 = (void *)v137;
          static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
          if (v88)
          {

            (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v86);
          }
          else
          {
            uint64_t v105 = v6;
            swift_retain_n();
            unint64_t v89 = Logger.logObject.getter();
            os_log_type_t v90 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v89, v90))
            {
              BOOL v91 = (uint8_t *)swift_slowAlloc();
              uint64_t v92 = swift_slowAlloc();
              v140[0] = v92;
              *(_DWORD *)BOOL v91 = 136315138;
              uint64_t v93 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
              uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v140);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1C8F83000, v89, v90, "Likely matched graph: %s", v91, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1CB77E470](v92, -1, -1);
              MEMORY[0x1CB77E470](v91, -1, -1);
              swift_release();

              (*(void (**)(char *, uint64_t))(v110 + 8))(v123, v111);
            }
            else
            {
              swift_release_n();

              (*(void (**)(char *, uint64_t))(v85 + 8))(v123, v111);
            }
            uint64_t v6 = v105;
          }
        }
      }
      uint64_t v95 = v127;
      os_log_type_t v96 = (uint64_t *)(v127 + *(int *)(v120 + 32));
      uint64_t v97 = *v96;
      uint64_t v98 = v96[1];
      uint64_t v99 = v121;
      PommesSearchRequest.pommesCandidateId.getter(v121);
      uint64_t v100 = type metadata accessor for PommesCandidateId();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v99, 0, 1, v100);
      uint64_t v101 = v122;
      default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v122);
      uint64_t v73 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v95, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], v97, v98, v99, v101, 0x6867696C66657270, 0xE900000000000074, 0xD00000000000001FLL, 0x80000001C91961A0);
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v101, v6);
      outlined destroy of MediaUserStateCenter?(v99, &demangling cache variable for type metadata for PommesCandidateId?);
      if (v73)
      {
        swift_release_n();
        goto LABEL_32;
      }
      uint64_t v102 = Logger.logObject.getter();
      os_log_type_t v103 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v102, v103))
      {
        unint64_t v104 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v104 = 0;
        _os_log_impl(&dword_1C8F83000, v102, v103, "PlayRadioStationPreflightClient#ignore could not build PommesResponse with given parameters", v104, 2u);
        MEMORY[0x1CB77E470](v104, -1, -1);
        swift_release_n();
      }
      else
      {

        swift_release_n();
      }
    }
  }
  uint64_t v73 = 0;
LABEL_32:
  *a2 = v73;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UsoIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_24;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v8)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_3:
  uint64_t v25 = v5;
  unint64_t v26 = v2;
  uint64_t v9 = 0;
  unint64_t v2 = a1 & 0xC000000000000001;
  unint64_t v27 = a1 + 32;
  uint64_t v33 = v5 + 16;
  uint64_t v10 = (void (**)(char *, uint64_t))(v5 + 8);
  unint64_t v29 = a1;
  unint64_t v30 = a1 & 0xC000000000000001;
  uint64_t v24 = v8;
  while (1)
  {
    if (v2)
    {
      uint64_t v11 = MEMORY[0x1CB77D510](v9, a1);
      BOOL v12 = __OFADD__(v9++, 1);
      if (v12) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v11 = swift_retain();
      BOOL v12 = __OFADD__(v9++, 1);
      if (v12)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        if (!v8) {
          goto LABEL_25;
        }
        goto LABEL_3;
      }
    }
    uint64_t v13 = v11;
    uint64_t v14 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15) {
      break;
    }
    swift_release();
    swift_bridgeObjectRelease();
LABEL_20:
    unint64_t v2 = v30;
    if (v9 == v8) {
      goto LABEL_25;
    }
  }
  uint64_t v31 = v14;
  uint64_t v32 = v13;
  uint64_t v28 = v9;
  unint64_t v16 = v14 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v17 = *(void *)(v5 + 72);
  uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  swift_bridgeObjectRetain();
  while (1)
  {
    v18(v7, v16, v4);
    uint64_t v20 = UsoIdentifier.namespace.getter();
    if (!v21)
    {
      (*v10)(v7, v4);
      goto LABEL_12;
    }
    if (v20 == 0x6574736973726570 && v21 == 0xED000064695F746ELL) {
      break;
    }
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*v10)(v7, v4);
    if (v19) {
      goto LABEL_22;
    }
LABEL_12:
    v16 += v17;
    if (!--v15)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      uint64_t v9 = v28;
      a1 = v29;
      uint64_t v8 = v24;
      uint64_t v5 = v25;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
  (*v10)(v7, v4);
LABEL_22:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 80);
      uint64_t v6 = 4;
      do
      {
        uint64_t v7 = v6 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = MEMORY[0x1CB77D510](v6 - 4, a1);
          BOOL v9 = __OFADD__(v7, 1);
          uint64_t v10 = v6 - 3;
          if (v9) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(a1 + 8 * v6);
          swift_retain();
          BOOL v9 = __OFADD__(v7, 1);
          uint64_t v10 = v6 - 3;
          if (v9)
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        if (v5(v8))
        {
          swift_bridgeObjectRelease();
          return v8;
        }
        swift_release();
        ++v6;
      }
      while (v10 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  if (a1 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 80);
      uint64_t v6 = 4;
      do
      {
        uint64_t v7 = v6 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = MEMORY[0x1CB77D510](v6 - 4, a1);
          BOOL v9 = __OFADD__(v7, 1);
          uint64_t v10 = v6 - 3;
          if (v9) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(a1 + 8 * v6);
          swift_retain();
          BOOL v9 = __OFADD__(v7, 1);
          uint64_t v10 = v6 - 3;
          if (v9)
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        if (v5(v8))
        {
          swift_bridgeObjectRelease();
          return v8;
        }
        swift_release();
        ++v6;
      }
      while (v10 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance OfflineMusicPlaybackPreflightClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

void OfflineMusicPlaybackPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v185 = a1;
  unint64_t v187 = a2;
  uint64_t v172 = *v2;
  uint64_t v3 = type metadata accessor for PommesSearchReason();
  uint64_t v173 = *(void *)(v3 - 8);
  uint64_t v174 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v171 = (uint64_t)v150 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v169 = (char *)v150 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v170 = (char *)v150 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v179 = (uint64_t)v150 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  uint64_t v176 = *(void *)(v11 - 8);
  uint64_t v177 = v11;
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v168 = (char *)v150 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v182 = (char *)v150 - v14;
  uint64_t v166 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  uint64_t v165 = *(void *)(v166 - 8);
  MEMORY[0x1F4188790](v166);
  os_log_type_t v183 = (char *)v150 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v184 = (uint64_t)v150 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  uint64_t v180 = *(void *)(v18 - 8);
  uint64_t v181 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  int v178 = (char *)v150 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v175 = (char *)v150 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v25 = (char *)v150 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  unint64_t v27 = (char *)v150 - v26;
  uint64_t v28 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v186 = *(void *)(v28 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v28);
  uint64_t v167 = (char *)v150 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v33 = (char *)v150 - v32;
  MEMORY[0x1F4188790](v31);
  uint64_t v35 = (char *)v150 - v34;
  uint64_t v36 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v37 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v39 = (char *)v150 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = &type metadata for FeatureFlag;
  unint64_t v191 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  uint64_t v40 = swift_allocObject();
  uint64_t v189 = v40;
  *(void *)(v40 + 16) = 1;
  *(void *)(v40 + 24) = 0;
  *(void *)(v40 + 32) = 0;
  *(void *)(v40 + 40) = 0;
  *(unsigned char *)(v40 + 48) = 3;
  char v41 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v189);
  if ((v41 & 1) == 0)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)static Logger.pommes);
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v60, v61)) {
      goto LABEL_25;
    }
    uint64_t v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v62 = 0;
    id v63 = "OfflineMusicPlaybackPreflightClient : IGNORED feature flag not enabled";
    goto LABEL_24;
  }
  if (dispatch thunk of NetworkAvailability.isAvailable.getter())
  {
    if ((specialized OfflineMusicPlaybackPreflightClient.userDefaultOverride.getter() & 1) == 0)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v65 = type metadata accessor for Logger();
      __swift_project_value_buffer(v65, (uint64_t)static Logger.pommes);
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v60, v61)) {
        goto LABEL_25;
      }
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v62 = 0;
      id v63 = "OfflineMusicPlaybackPreflightClient : IGNORED network is available";
      goto LABEL_24;
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.pommes);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v163 = (void (*)(char *, void, uint64_t, uint64_t))v28;
      uint64_t v46 = v35;
      uint64_t v47 = v39;
      uint64_t v48 = v36;
      uint64_t v49 = v37;
      int64_t v50 = v45;
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl(&dword_1C8F83000, v43, v44, "OfflineMusicPlaybackPreflightClient : User default override network availability check", v45, 2u);
      os_log_type_t v51 = v50;
      uint64_t v37 = v49;
      uint64_t v36 = v48;
      uint64_t v39 = v47;
      uint64_t v35 = v46;
      uint64_t v28 = (uint64_t)v163;
      MEMORY[0x1CB77E470](v51, -1, -1);
    }
  }
  uint64_t v52 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v53 = v186;
  uint64_t v54 = *(void *)(v185 + *(int *)(v52 + 76));
  if (!*(void *)(v54 + 16))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    __swift_project_value_buffer(v64, (uint64_t)static Logger.pommes);
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v60, v61)) {
      goto LABEL_25;
    }
    uint64_t v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v62 = 0;
    id v63 = "OfflineMusicPlaybackPreflightClient : IGNORED No salient parses";
LABEL_24:
    _os_log_impl(&dword_1C8F83000, v60, v61, v63, v62, 2u);
    MEMORY[0x1CB77E470](v62, -1, -1);
LABEL_25:

    goto LABEL_26;
  }
  uint64_t v162 = v52;
  (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v39, v54 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80)), v36);
  uint64_t v55 = Siri_Nlu_External_Span.matcherNames.getter();
  if (*(void *)(v55 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))(v27, v55 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80)), v28);
    uint64_t v56 = *(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56);
    unint64_t v57 = v27;
    uint64_t v58 = 0;
  }
  else
  {
    uint64_t v56 = *(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56);
    unint64_t v57 = v27;
    uint64_t v58 = 1;
  }
  uint64_t v163 = v56;
  v56(v57, v58, 1, v28);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v27, 1, v28) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Logger.pommes);
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v68, v69))
    {
      id v70 = v39;
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl(&dword_1C8F83000, v68, v69, "OfflineMusicPlaybackPreflightClient : IGNORED No UDA found for the top salient parse", v71, 2u);
      unint64_t v72 = v71;
      uint64_t v39 = v70;
      MEMORY[0x1CB77E470](v72, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v36);
    goto LABEL_26;
  }
  uint64_t v161 = v36;
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v35, v27, v28);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v159 = v37;
  uint64_t v73 = type metadata accessor for Logger();
  uint64_t v74 = __swift_project_value_buffer(v73, (uint64_t)static Logger.pommes);
  uint64_t v76 = (v53 + 16);
  uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
  uint64_t v164 = v35;
  v75(v33, v35, v28);
  uint64_t v160 = v74;
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.debug.getter();
  int v79 = v78;
  if (os_log_type_enabled(v77, v78))
  {
    os_log_t v158 = v77;
    uint64_t v80 = swift_slowAlloc();
    LODWORD(v156) = v79;
    uint64_t v81 = (uint8_t *)v80;
    uint64_t v157 = (void (*)(void, void, void))swift_slowAlloc();
    v188 = v157;
    unint64_t v155 = v81;
    *(_DWORD *)uint64_t v81 = 136315138;
    uint64_t v154 = (void (*)(uint64_t, void, uint64_t, uint8_t *))(v81 + 4);
    type metadata accessor for SiriNLUTypesPrintUtils();
    v190 = (ValueMetadata *)v28;
    unint64_t v191 = lazy protocol witness table accessor for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct, MEMORY[0x1E4FA2858]);
    uint64_t v82 = __swift_allocate_boxed_opaque_existential_1(&v189);
    v75((char *)v82, v33, v28);
    uint64_t v83 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)();
    uint64_t v84 = v53;
    unint64_t v86 = v85;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v189);
    uint64_t v189 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v86, (uint64_t *)&v188);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v87 = *(void (**)(char *, uint64_t))(v84 + 8);
    v87(v33, v28);
    uint64_t v77 = v158;
    uint64_t v88 = v155;
    _os_log_impl(&dword_1C8F83000, v158, (os_log_type_t)v156, "OfflineMusicPlaybackPreflightClient : found userDialogAct: %s", v155, 0xCu);
    unint64_t v89 = v157;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v89, -1, -1);
    MEMORY[0x1CB77E470](v88, -1, -1);
  }
  else
  {
    uint64_t v87 = *(void (**)(char *, uint64_t))(v53 + 8);
    v87(v33, v28);
  }

  uint64_t v90 = v161;
  type metadata accessor for AudioUsoIntent();
  v75(v25, v164, v28);
  v163(v25, 0, 1, v28);
  uint64_t v91 = AudioUsoIntent.__allocating_init(userDialogAct:)((uint64_t)v25);
  uint64_t v92 = v184;
  if (!v91)
  {
    uint64_t v97 = v28;
    os_log_type_t v103 = Logger.logObject.getter();
    os_log_type_t v104 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v103, v104))
    {
      uint64_t v105 = v39;
      uint64_t v106 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v106 = 0;
      _os_log_impl(&dword_1C8F83000, v103, v104, "OfflineMusicPlaybackPreflightClient : IGNORED unable to convert UserDialogAct to AudioUsoIntent", v106, 2u);
      uint64_t v107 = v106;
      uint64_t v39 = v105;
      MEMORY[0x1CB77E470](v107, -1, -1);
    }

    uint64_t v108 = v164;
    goto LABEL_56;
  }
  uint64_t v93 = v91;
  uint64_t v157 = (void (*)(void, void, void))v75;
  os_log_t v158 = v76;
  char v94 = (*(uint64_t (**)(void))(*(void *)v91 + 904))();
  uint64_t v95 = v164;
  uint64_t v96 = (uint64_t)v183;
  if (v94 == 17)
  {
LABEL_42:
    uint64_t v97 = v28;
    uint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = v39;
      uint64_t v101 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v101 = 0;
      uint64_t v102 = "OfflineMusicPlaybackPreflightClient : IGNORED non-play verb";
LABEL_54:
      _os_log_impl(&dword_1C8F83000, v98, v99, v102, v101, 2u);
      uint64_t v114 = v101;
      uint64_t v39 = v100;
      MEMORY[0x1CB77E470](v114, -1, -1);
      goto LABEL_55;
    }
    goto LABEL_55;
  }
  if (CommonAudio.Verb.rawValue.getter(v94) == 2036427888 && v109 == 0xE400000000000000)
  {
    uint64_t v110 = swift_bridgeObjectRelease();
  }
  else
  {
    char v111 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v110 = swift_bridgeObjectRelease();
    if ((v111 & 1) == 0) {
      goto LABEL_42;
    }
  }
  char v112 = (*(uint64_t (**)(uint64_t))(*(void *)v93 + 928))(v110);
  uint64_t v113 = v182;
  if (v112 == 2)
  {
LABEL_52:
    uint64_t v97 = v28;
    uint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = v39;
      uint64_t v101 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v101 = 0;
      uint64_t v102 = "OfflineMusicPlaybackPreflightClient : IGNORED baseEntity is not a commonMediaItem";
      goto LABEL_54;
    }
LABEL_55:

    swift_release();
    uint64_t v108 = v95;
LABEL_56:
    uint64_t v115 = (void (*)(void, void, void, void))v97;
LABEL_57:
    v87(v108, (uint64_t)v115);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v39, v90);
    goto LABEL_26;
  }
  if (v112)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v116 & 1) == 0) {
      goto LABEL_52;
    }
  }
  uint64_t v163 = (void (*)(char *, void, uint64_t, uint64_t))v28;
  OfflineMusicPlaybackPreflightClient.makeAudioUnderstanding(pommesSearchRequest:)(v92);
  uint64_t v118 = v180;
  uint64_t v117 = v181;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v180 + 48))(v92, 1, v181) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v92, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
    char v119 = Logger.logObject.getter();
    os_log_type_t v120 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v119, v120))
    {
      uint64_t v121 = v39;
      uint64_t v122 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v122 = 0;
      _os_log_impl(&dword_1C8F83000, v119, v120, "OfflineMusicPlaybackPreflightClient : IGNORED couldn't handle since AudioUnderstanding could not be built", v122, 2u);
      uint64_t v123 = v122;
      uint64_t v39 = v121;
      MEMORY[0x1CB77E470](v123, -1, -1);
    }

    swift_release();
    uint64_t v108 = v95;
    uint64_t v115 = (void (*)(void, void, void, void))v163;
    goto LABEL_57;
  }
  v150[1] = v93;
  uint64_t v151 = v39;
  uint64_t v124 = (uint64_t)v175;
  (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v175, v92, v117);
  uint64_t v125 = Logger.logObject.getter();
  os_log_type_t v126 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v125, v126))
  {
    uint64_t v127 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v127 = 0;
    _os_log_impl(&dword_1C8F83000, v125, v126, "OfflineMusicPlaybackPreflightClient : HANDLING request", v127, 2u);
    uint64_t v128 = v127;
    uint64_t v113 = v182;
    MEMORY[0x1CB77E470](v128, -1, -1);
  }

  Apple_Parsec_Siri_V2alpha_ClientSignals.init()();
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.librarySearchTerms.getter();
  Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.setter();
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.init()();
  uint64_t v153 = *(void (**)(char *, uint64_t, uint64_t))(v180 + 16);
  unint64_t v129 = v178;
  uint64_t v130 = v181;
  v153(v178, v124, v181);
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.understanding.setter();
  uint64_t v162 = v185 + *(int *)(v162 + 32);
  uint64_t v131 = *(void *)(v162 + 8);
  uint64_t v184 = *(void *)v162;
  uint64_t v152 = v131;
  uint64_t v132 = v179;
  PommesSearchRequest.pommesCandidateId.getter(v179);
  unint64_t v155 = (uint8_t *)type metadata accessor for PommesCandidateId();
  uint64_t v133 = *((void *)v155 - 1);
  uint64_t v154 = *(void (**)(uint64_t, void, uint64_t, uint8_t *))(v133 + 56);
  uint64_t v156 = v133 + 56;
  v154(v132, 0, 1, v155);
  uint64_t v184 = specialized OfflineMusicPlaybackPreflightClient.clientSearch(audioUnderstanding:clientSignals:requestId:pommesCandidateId:)(v124, v96, v184, v152, v132);
  outlined destroy of MediaUserStateCenter?(v132, &demangling cache variable for type metadata for PommesCandidateId?);
  v153(v129, v124, v130);
  Apple_Parsec_Siri_V2alpha_PlaybackSignals.init()();
  (*(void (**)(char *, char *, uint64_t))(v176 + 16))(v168, v113, v177);
  v157(v167, v95, v163);
  uint64_t v134 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v134 - 8) + 56))(v169, 1, 1, v134);
  id v135 = objc_allocWithZone((Class)type metadata accessor for AudioExperience());
  uint64_t v136 = (void *)AudioExperience.init(serverAudioResults:audioUnderstanding:playbackSignals:internalSignals:pegasusAudioType:launchID:systemExtensionBundleID:boltProxiedBundleID:shouldPerformAppSelection:audioClientComponent:pluginId:queryConfidence:userDialogAct:isGlideEligible:networkAvailableAtRequest:matchingSpans:multiUserContext:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v137 = swift_allocObject();
  *(_OWORD *)(v137 + 16) = xmmword_1C9195B30;
  *(void *)(v137 + 32) = v136;
  uint64_t v189 = v137;
  specialized Array._endMutation()();
  uint64_t v138 = v189;
  uint64_t v140 = *(void *)v162;
  uint64_t v139 = *(void *)(v162 + 8);
  id v141 = v136;
  uint64_t v142 = v179;
  uint64_t v143 = v185;
  PommesSearchRequest.pommesCandidateId.getter(v179);
  v154(v142, 0, 1, v155);
  uint64_t v144 = v171;
  default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v171);
  uint64_t v66 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v143, v138, v184, v140, v139, v142, v144, 0x616964656DLL, 0xE500000000000000, 0xD000000000000023, 0x80000001C9197740);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v144, v174);
  outlined destroy of MediaUserStateCenter?(v142, &demangling cache variable for type metadata for PommesCandidateId?);
  if (v66)
  {

    swift_release();
    (*(void (**)(char *, uint64_t))(v176 + 8))(v182, v177);
    (*(void (**)(char *, uint64_t))(v165 + 8))(v183, v166);
    (*(void (**)(char *, uint64_t))(v180 + 8))(v175, v181);
    v87(v164, (uint64_t)v163);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v151, v161);
    goto LABEL_27;
  }
  uint64_t v145 = Logger.logObject.getter();
  uint64_t v146 = static os_log_type_t.error.getter();
  BOOL v147 = os_log_type_enabled(v145, (os_log_type_t)v146);
  uint64_t v148 = v161;
  if (v147)
  {
    uint64_t v149 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v149 = 0;
    _os_log_impl(&dword_1C8F83000, v145, (os_log_type_t)v146, "OfflineMusicPlaybackPreflightClient#ignore could not build PommesResponse with given parameters", v149, 2u);
    MEMORY[0x1CB77E470](v149, -1, -1);
  }

  swift_release();
  (*(void (**)(char *, uint64_t))(v176 + 8))(v182, v177);
  (*(void (**)(char *, uint64_t))(v165 + 8))(v183, v166);
  (*(void (**)(char *, uint64_t))(v180 + 8))(v175, v181);
  v87(v164, (uint64_t)v163);
  (*(void (**)(char *, uint64_t))(v159 + 8))(v151, v148);
LABEL_26:
  uint64_t v66 = 0;
LABEL_27:
  *unint64_t v187 = v66;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance NonSiriKitMediaAppLaunchPreflightClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

void NonSiriKitMediaAppLaunchPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for PommesSearchReason();
  uint64_t v92 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v90 = (uint64_t)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v89 = (uint64_t)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v10 = *(void *)(v110 - 8);
  MEMORY[0x1F4188790](v110);
  uint64_t v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v13 = *(void *)(v105 - 8);
  MEMORY[0x1F4188790](v105);
  os_log_type_t v104 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v15 = *(int *)(v88 + 76);
  uint64_t v91 = a1;
  uint64_t v16 = *(void *)(a1 + v15);
  unint64_t v115 = MEMORY[0x1E4FBC860];
  uint64_t v98 = *(void *)(v16 + 16);
  uint64_t v93 = v5;
  if (!v98)
  {
    swift_bridgeObjectRetain();
    unint64_t v82 = MEMORY[0x1E4FBC860];
LABEL_45:
    swift_bridgeObjectRelease();
    if (v82 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v83)
      {
LABEL_47:
        uint64_t v87 = v6;
        if ((v82 & 0xC000000000000001) != 0)
        {
          uint64_t v48 = MEMORY[0x1CB77D510](0, v82);
        }
        else
        {
          if (!*(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_90;
          }
          uint64_t v48 = *(void *)(v82 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        uint64_t v49 = specialized NonSiriKitMediaAppLaunchPreflightClient.extractBundleId(task:)();
        if (!v50)
        {
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v57 = type metadata accessor for Logger();
          __swift_project_value_buffer(v57, (uint64_t)static Logger.pommes);
          swift_retain_n();
          uint64_t v40 = Logger.logObject.getter();
          os_log_type_t v58 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v40, v58))
          {

            swift_release_n();
            goto LABEL_86;
          }
          uint64_t v59 = (uint8_t *)swift_slowAlloc();
          uint64_t v60 = swift_slowAlloc();
          unint64_t v114 = v60;
          *(_DWORD *)uint64_t v59 = 136315138;
          v113[0] = v48;
          type metadata accessor for UsoTask();
          swift_retain();
          uint64_t v61 = String.init<A>(describing:)();
          v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, (uint64_t *)&v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C8F83000, v40, v58, "NonSiriKitMediaAppLaunchPreflightClient#ignore Received a nil bundle ID from UsoTask %s", v59, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v60, -1, -1);
          id v63 = v59;
LABEL_64:
          MEMORY[0x1CB77E470](v63, -1, -1);
          swift_release();
          goto LABEL_85;
        }
        a1 = v49;
        unint64_t v82 = v50;
        if (one-time initialization token for pommes == -1)
        {
LABEL_52:
          uint64_t v51 = type metadata accessor for Logger();
          uint64_t v52 = __swift_project_value_buffer(v51, (uint64_t)static Logger.pommes);
          swift_bridgeObjectRetain_n();
          uint64_t v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v53, v54))
          {
            uint64_t v110 = v52;
            uint64_t v55 = (uint8_t *)swift_slowAlloc();
            uint64_t v56 = swift_slowAlloc();
            unint64_t v114 = v56;
            *(_DWORD *)uint64_t v55 = 136315138;
            swift_bridgeObjectRetain();
            v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v82, (uint64_t *)&v114);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C8F83000, v53, v54, "Extracted bundle ID: %s", v55, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1CB77E470](v56, -1, -1);
            MEMORY[0x1CB77E470](v55, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          int v64 = NonSiriKitMediaAppLaunchPreflightClient.isMediaIntent(bundleId:)(a1, v82);
          if (v64)
          {
            if (v64 == 2)
            {
              swift_bridgeObjectRelease();
              uint64_t v40 = Logger.logObject.getter();
              os_log_type_t v65 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v40, v65))
              {
                uint64_t v66 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v66 = 0;
                _os_log_impl(&dword_1C8F83000, v40, v65, "NonSiriKitMediaAppLaunchPreflightClient#ignore cannot look up app info, passing to Pegasus", v66, 2u);
                id v63 = v66;
                goto LABEL_64;
              }

LABEL_78:
              swift_release();
              goto LABEL_86;
            }
            swift_bridgeObjectRetain();
            uint64_t v74 = Logger.logObject.getter();
            LOBYTE(v78) = static os_log_type_t.default.getter();
            if (!os_log_type_enabled(v74, (os_log_type_t)v78))
            {

              swift_release();
              swift_bridgeObjectRelease_n();
              goto LABEL_86;
            }
            int v79 = (uint8_t *)swift_slowAlloc();
            uint64_t v80 = swift_slowAlloc();
            unint64_t v114 = v80;
            *(_DWORD *)int v79 = 136315138;
            swift_bridgeObjectRetain();
            v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v82, (uint64_t *)&v114);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            uint64_t v81 = "NonSiriKitMediaAppLaunchPreflightClient#ignore found media app %s, passing to Pegasus";
          }
          else
          {
            uint64_t v109 = a1;
            uint64_t v67 = v91;
            uint64_t v68 = (uint64_t *)(v91 + *(int *)(v88 + 32));
            uint64_t v69 = *v68;
            uint64_t v110 = v68[1];
            uint64_t v70 = v89;
            PommesSearchRequest.pommesCandidateId.getter(v89);
            uint64_t v71 = type metadata accessor for PommesCandidateId();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v70, 0, 1, v71);
            uint64_t v72 = v90;
            default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v90);
            uint64_t v73 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v67, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], v69, v110, v70, v72, 0x6867696C66657270, 0xE900000000000074, 0xD000000000000027, 0x80000001C919AFA0);
            (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v72, v87);
            outlined destroy of MediaUserStateCenter?(v70, &demangling cache variable for type metadata for PommesCandidateId?);
            swift_bridgeObjectRetain();
            uint64_t v74 = Logger.logObject.getter();
            if (v73)
            {
              os_log_type_t v75 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v74, v75))
              {
                uint64_t v76 = (uint8_t *)swift_slowAlloc();
                uint64_t v77 = swift_slowAlloc();
                unint64_t v114 = v77;
                *(_DWORD *)uint64_t v76 = 136315138;
                swift_bridgeObjectRetain();
                v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v82, (uint64_t *)&v114);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl(&dword_1C8F83000, v74, v75, "NonSiriKitMediaAppLaunchPreflightClient#handle Non-ambiguous non-media app launch task: %s", v76, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1CB77E470](v77, -1, -1);
                MEMORY[0x1CB77E470](v76, -1, -1);
                swift_release();
              }
              else
              {

                swift_bridgeObjectRelease_n();
                swift_release();
              }
              goto LABEL_87;
            }
            uint64_t v78 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v74, (os_log_type_t)v78))
            {

              swift_bridgeObjectRelease_n();
              goto LABEL_78;
            }
            int v79 = (uint8_t *)swift_slowAlloc();
            uint64_t v80 = swift_slowAlloc();
            unint64_t v114 = v80;
            *(_DWORD *)int v79 = 136315138;
            swift_bridgeObjectRetain();
            v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v82, (uint64_t *)&v114);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            uint64_t v81 = "NonSiriKitMediaAppLaunchPreflightClient#ignore could not build PommesResponse with given parameters: %s";
          }
          _os_log_impl(&dword_1C8F83000, v74, (os_log_type_t)v78, v81, v79, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v80, -1, -1);
          MEMORY[0x1CB77E470](v79, -1, -1);
          swift_release();

          goto LABEL_86;
        }
LABEL_90:
        swift_once();
        goto LABEL_52;
      }
    }
    else if (*(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_47;
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v84 = type metadata accessor for Logger();
    __swift_project_value_buffer(v84, (uint64_t)static Logger.pommes);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v85))
    {
      unint64_t v86 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v86 = 0;
      _os_log_impl(&dword_1C8F83000, v40, v85, "NonSiriKitMediaAppLaunchPreflightClient#ignore no valid appLaunch task from NLv4 parse", v86, 2u);
      MEMORY[0x1CB77E470](v86, -1, -1);
    }
    goto LABEL_85;
  }
  uint64_t v87 = v6;
  uint64_t v95 = a2;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v17 = v13 + 16;
  uint64_t v102 = v18;
  uint64_t v101 = v16 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64));
  uint64_t v109 = v10 + 16;
  uint64_t v96 = v10;
  uint64_t v19 = (void (**)(char *, uint64_t))(v10 + 8);
  os_log_type_t v99 = (void (**)(char *, uint64_t))(v17 - 8);
  uint64_t v100 = *(void *)(v17 + 56);
  uint64_t v94 = v16;
  swift_bridgeObjectRetain_n();
  uint64_t v20 = 0;
  uint64_t v107 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v97 = v17;
  while (1)
  {
    uint64_t v103 = v20;
    v102(v104, v101 + v100 * v20, v105);
    uint64_t v21 = Siri_Nlu_External_Span.matcherNames.getter();
    unint64_t v22 = MEMORY[0x1E4FBC860];
    unint64_t v114 = MEMORY[0x1E4FBC860];
    uint64_t v23 = *(void *)(v21 + 16);
    if (v23)
    {
      a1 = v21 + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80));
      uint64_t v24 = *(void *)(v96 + 72);
      uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v96 + 16);
      swift_bridgeObjectRetain();
      uint64_t v26 = v110;
      do
      {
        v25(v12, a1, v26);
        unint64_t v27 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
        (*v19)(v12, v26);
        specialized Array.append<A>(contentsOf:)(v27);
        uint64_t v26 = v110;
        a1 += v24;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease_n();
      unint64_t v28 = v114;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v28 = v22;
    }
    if (!(v28 >> 62))
    {
      uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v30 = v29;
      if (v29) {
        break;
      }
      goto LABEL_39;
    }
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    if (v30) {
      break;
    }
LABEL_39:
    swift_bridgeObjectRelease_n();
    (*v99)(v104, v105);
LABEL_40:
    uint64_t v20 = v103 + 1;
    if (v103 + 1 == v98)
    {
      swift_bridgeObjectRelease();
      unint64_t v82 = v115;
      a2 = v95;
      uint64_t v6 = v87;
      goto LABEL_45;
    }
  }
  unint64_t v108 = v28 & 0xC000000000000001;
  uint64_t v31 = 4;
  unint64_t v106 = v28;
  while (1)
  {
    uint64_t v32 = v31 - 4;
    if (!v108) {
      break;
    }
    a1 = MEMORY[0x1CB77D510](v31 - 4, v28);
    uint64_t v33 = v31 - 3;
    if (__OFADD__(v32, 1)) {
      goto LABEL_79;
    }
LABEL_19:
    static UsoTask_CodegenConverter.convert(task:)();
    outlined init with copy of MediaUserStateCenter?((uint64_t)&v114, (uint64_t)v113, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (!v113[3]) {
      goto LABEL_12;
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v113, (uint64_t)v112, (uint64_t *)&demangling cache variable for type metadata for Any?);
    type metadata accessor for UsoTask_open_common_App();
    if (swift_dynamicCast())
    {
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)&v114, (uint64_t *)&demangling cache variable for type metadata for Any?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
      outlined destroy of MediaUserStateCenter?((uint64_t)v113, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_35:
      swift_bridgeObjectRelease_n();
      uint64_t v36 = ((uint64_t (*)(char *, uint64_t))*v99)(v104, v105);
      MEMORY[0x1CB77CD90](v36);
      if (*(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_40;
    }
    type metadata accessor for UsoTask_start_uso_NoEntity();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter();
      swift_release();
      LODWORD(v34) = v111;
      if (!v111)
      {
        swift_release();
        goto LABEL_32;
      }
      uint64_t v35 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
      swift_release();
      swift_release();
      if (v35) {
        goto LABEL_28;
      }
    }
    else
    {
      type metadata accessor for UsoTask_play_uso_NoEntity();
      if ((swift_dynamicCast() & 1) == 0)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
LABEL_12:
        outlined destroy of MediaUserStateCenter?((uint64_t)&v114, (uint64_t *)&demangling cache variable for type metadata for Any?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v113, (uint64_t *)&demangling cache variable for type metadata for Any?);
        goto LABEL_13;
      }
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter();
      swift_release();
      if (v111)
      {
        uint64_t v34 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
        swift_release();
        if (!v34) {
          goto LABEL_32;
        }
LABEL_28:
        swift_release();
        LODWORD(v34) = 1;
        goto LABEL_32;
      }
      swift_release();
    }
    LODWORD(v34) = 0;
LABEL_32:
    unint64_t v28 = v106;
    outlined destroy of MediaUserStateCenter?((uint64_t)&v114, (uint64_t *)&demangling cache variable for type metadata for Any?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
    outlined destroy of MediaUserStateCenter?((uint64_t)v113, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v34) {
      goto LABEL_35;
    }
LABEL_13:
    swift_release();
    ++v31;
    if (v33 == v30) {
      goto LABEL_39;
    }
  }
  a1 = *(void *)(v28 + 8 * v31);
  swift_retain();
  uint64_t v33 = v31 - 3;
  if (!__OFADD__(v32, 1)) {
    goto LABEL_19;
  }
LABEL_79:
  __break(1u);
  swift_once();
  uint64_t v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
  id v38 = 0;
  id v39 = 0;
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  BOOL v42 = os_log_type_enabled(v40, v41);
  a2 = v95;
  if (v42)
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    unint64_t v114 = v44;
    *(_DWORD *)uint64_t v43 = 136315138;
    v113[0] = 0;
    id v45 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v46 = String.init<A>(describing:)();
    v113[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, (uint64_t *)&v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C8F83000, v40, v41, "ConversionUtils.convertUserDialogActToTasks error: %s", v43, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v44, -1, -1);
    MEMORY[0x1CB77E470](v43, -1, -1);

    goto LABEL_86;
  }

LABEL_85:
LABEL_86:
  uint64_t v73 = 0;
LABEL_87:
  *a2 = v73;
}

void *PommesSearch.makeSearchRequestProcessor(with:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[7];
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)v5, type metadata accessor for PommesSearchRequest);
  uint64_t v10 = v1[6];
  type metadata accessor for PommesSearchRequestProcessor();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v11 = specialized PommesSearchRequestProcessor.init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)(v6, v7, v8, v9, (uint64_t)v5, v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v11;
}

uint64_t type metadata accessor for PommesSearchRequestProcessor()
{
  uint64_t result = type metadata singleton initialization cache for PommesSearchRequestProcessor;
  if (!type metadata singleton initialization cache for PommesSearchRequestProcessor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for AnalyticsComponentIdGenerator()
{
  return self;
}

uint64_t type metadata accessor for OnDeviceSearchInstrumentationUtil()
{
  return self;
}

uint64_t PommesSearchRequestProcessor.search(completion:)(uint64_t a1, uint64_t a2)
{
  closure #1 in PommesSearchRequestProcessor.search(completion:)();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 216);
  uint64_t v7 = v6 & 1;

  return v5(v7, a1, a2);
}

void closure #1 in PommesSearchRequestProcessor.search(completion:)()
{
  id v0 = objc_msgSend(self, sel_sharedPreferences);
  id v1 = objc_msgSend(v0, sel_languageCode);

  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v4 = v3;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    char v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    uint64_t v41 = v2;
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      v43[0] = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v4, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v6, v7, "Checking if %s is enabled for POMMES", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v9, -1, -1);
      MEMORY[0x1CB77E470](v8, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v44 = &type metadata for FeatureFlag;
    unint64_t v14 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
    unint64_t v45 = v14;
    uint64_t v15 = swift_allocObject();
    v43[0] = v15;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(unsigned char *)(v15 + 48) = 3;
    char v16 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    unsigned __int8 v42 = objc_msgSend(self, sel_isSiriPommesEnabledForLanguage_, v1);

    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentDevice.getter();
    swift_release();
    uint64_t v17 = (void *)MEMORY[0x1CB77CA90](0x536C65646F4D5748, 0xEA00000000007274);
    uint64_t v18 = (void *)MGGetStringAnswer();

    if (v18)
    {
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;
      swift_release();

      uint64_t v44 = &type metadata for FeatureFlag;
      unint64_t v45 = v14;
      uint64_t v22 = swift_allocObject();
      v43[0] = v22;
      *(void *)(v22 + 16) = v19;
      *(void *)(v22 + 24) = v21;
      *(void *)(v22 + 32) = 0;
      *(void *)(v22 + 40) = 0;
      *(unsigned char *)(v22 + 48) = 0;
      swift_bridgeObjectRetain_n();
      char v23 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0)
      {
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v24, v25))
        {
          char v26 = v23;
          unint64_t v27 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v27 = 0;
          _os_log_impl(&dword_1C8F83000, v24, v25, "Siri is disabled for POMMES", v27, 2u);
          unint64_t v28 = v27;
          char v23 = v26;
          MEMORY[0x1CB77E470](v28, -1, -1);
        }
      }
      if (v42)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v40 = v19;
          uint64_t v31 = (uint8_t *)swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          v43[0] = v32;
          *(_DWORD *)uint64_t v31 = 136315138;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v4, v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C8F83000, v29, v30, "%s is disabled for POMMES", v31, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v32, -1, -1);
          uint64_t v33 = v31;
          uint64_t v19 = v40;
          MEMORY[0x1CB77E470](v33, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      swift_bridgeObjectRetain();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        uint64_t v37 = swift_slowAlloc();
        v43[0] = v37;
        *(_DWORD *)uint64_t v36 = 136315394;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v36 + 12) = 2080;
        if (v23) {
          uint64_t v38 = 7562585;
        }
        else {
          uint64_t v38 = 28494;
        }
        if (v23) {
          unint64_t v39 = 0xE300000000000000;
        }
        else {
          unint64_t v39 = 0xE200000000000000;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v34, v35, "Checking if device(%s) is disabled for POMMES, disabled: %s", (uint8_t *)v36, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v37, -1, -1);
        MEMORY[0x1CB77E470](v36, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1C8F83000, v11, v12, "No languageCode available", v13, 2u);
      MEMORY[0x1CB77E470](v13, -1, -1);
    }
  }
}

const char *specialized FeatureFlag.disableDeviceFeature(_:)()
{
  Swift::String v0 = String.lowercased()();
  if (v0._countAndFlagsBits == 808596834 && v0._object == (void *)0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return "disable_b520";
  }
  else if (v0._countAndFlagsBits == 0x706130323562 && v0._object == (void *)0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return "disable_b520ap";
  }
  else if (v0._countAndFlagsBits == 808597090 && v0._object == (void *)0xE400000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return "disable_b620";
  }
  else if (v0._countAndFlagsBits == 0x706130323662 && v0._object == (void *)0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return "disable_b620ap";
  }
  else
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v2) {
      return "disable_b620ap";
    }
    else {
      return "";
    }
  }
}

uint64_t PommesSearchRequestProcessor.search(enabled:completion:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v19[0] = *(void *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_requestQueue);
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = v4;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a3;
  aBlock[4] = partial apply for closure #1 in PommesSearchRequestProcessor.search(enabled:completion:);
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t aBlock[3] = &block_descriptor_7;
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAEB0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1CB77D180](0, v13, v17, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

void partial apply for closure #1 in PommesSearchRequestProcessor.search(enabled:completion:)()
{
  closure #1 in PommesSearchRequestProcessor.search(enabled:completion:)(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void *, uint64_t))(v0 + 32), *(void *)(v0 + 40));
}

void closure #1 in PommesSearchRequestProcessor.search(enabled:completion:)(char a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  if (a1)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1C8F83000, v8, v9, "POMMES is enabled", v10, 2u);
      MEMORY[0x1CB77E470](v10, -1, -1);
    }

    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = a3;
    *(void *)(v11 + 24) = a4;
    uint64_t v12 = *(void (**)(uint64_t (*)(uint64_t, char), uint64_t))(*(void *)a2 + 224);
    swift_retain();
    v12(partial apply for closure #1 in closure #1 in PommesSearchRequestProcessor.search(enabled:completion:), v11);
    swift_release();
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1C8F83000, v14, v15, "POMMES is disabled", v16, 2u);
      MEMORY[0x1CB77E470](v16, -1, -1);
    }

    lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
    uint64_t v17 = (void *)swift_allocError();
    *uint64_t v18 = -127;
    a3(v17, 1);
  }
}

uint64_t PommesSearchRequestProcessor.search_sync(completion:)(uint64_t (*a1)(void *, uint64_t), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v103 = a2;
  uint64_t v102 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  MEMORY[0x1F4188790](v4);
  uint64_t v105 = (uint64_t)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SignpostToken();
  uint64_t v117 = *(void **)(v9 - 8);
  uint64_t v10 = v117[8];
  uint64_t v11 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v111 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v99 - v12;
  uint64_t v14 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v110 = (char *)*((void *)v14 - 1);
  uint64_t v15 = *((void *)v110 + 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  char v119 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v118 = (char *)&v99 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v109 = (uint64_t)&v99 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v99 - v21;
  char v112 = (uint64_t (*)(void))dispatch_semaphore_create(0);
  dispatch_semaphore_t v113 = dispatch_semaphore_create(0);
  uint64_t v116 = swift_allocBox();
  uint64_t v24 = v23;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  char v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56);
  uint64_t v101 = v24;
  v26(v24, 1, 1, v25);
  uint64_t v27 = swift_allocObject();
  uint64_t v115 = v27;
  *(void *)(v27 + 16) = 0;
  uint64_t v100 = (void **)(v27 + 16);
  Date.init()();
  unint64_t v28 = &v22[v14[5]];
  *(void *)unint64_t v28 = "SiriInformationSearch/PommesSearchRequestProcessor.swift";
  *((void *)v28 + 1) = 56;
  v28[16] = 2;
  *(void *)&v22[v14[6]] = 108;
  uint64_t v29 = &v22[v14[7]];
  *(void *)uint64_t v29 = "search_sync(completion:)";
  *((void *)v29 + 1) = 24;
  v29[16] = 2;
  uint64_t v30 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000034);
  uint64_t v31 = (uint64_t *)&v22[v14[8]];
  uint64_t *v31 = v30;
  v31[1] = v32;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v33, (uint64_t)static Signposter.pommes);
  uint64_t v34 = OSSignposter.begin(name:context:)("search.remote", 13, 2u, (uint64_t)v3, (uint64_t)v13);
  uint64_t v106 = v3[2];
  os_log_type_t v35 = (void (**)(void))(*v3 + 152);
  uint64_t v107 = *v35;
  unint64_t v108 = v35;
  ((void (*)(uint64_t))v107)(v34);
  uint64_t v36 = swift_allocObject();
  swift_weakInit();
  unint64_t v114 = v22;
  uint64_t v37 = (uint64_t)v22;
  uint64_t v38 = v109;
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_1(v37, v109, type metadata accessor for PerformanceUtil.Ticket);
  os_log_type_t v104 = v13;
  uint64_t v39 = (uint64_t)v111;
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_1((uint64_t)v13, (uint64_t)v111, (uint64_t (*)(void))type metadata accessor for SignpostToken);
  unint64_t v40 = (v110[80] + 16) & ~(unint64_t)v110[80];
  unint64_t v41 = (v15 + *((unsigned __int8 *)v117 + 80) + v40) & ~(unint64_t)*((unsigned __int8 *)v117 + 80);
  uint64_t v110 = v8;
  unint64_t v42 = (v10 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v117 = v3;
  uint64_t v44 = swift_allocObject();
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWObTm_0(v38, v44 + v40, type metadata accessor for PerformanceUtil.Ticket);
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWObTm_0(v39, v44 + v41, (uint64_t (*)(void))type metadata accessor for SignpostToken);
  unint64_t v45 = v112;
  *(void *)(v44 + v42) = v112;
  *(void *)(v44 + v43) = v36;
  *(void *)(v44 + ((v43 + 15) & 0xFFFFFFFFFFFFFFF8)) = v116;
  uint64_t v46 = *(void (**)(char *, Swift::Int (*)(uint64_t), uint64_t))(*(void *)v106 + 552);
  uint64_t v111 = v45;
  swift_retain();
  swift_retain();
  uint64_t v47 = (uint64_t)v110;
  v46(v110, partial apply for closure #1 in PommesSearchRequestProcessor.search_sync(completion:), v44);
  swift_release();
  char v112 = type metadata accessor for PommesSearchRequest;
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v47, type metadata accessor for PommesSearchRequest);
  swift_release();
  uint64_t v48 = v118;
  Date.init()();
  uint64_t v49 = &v48[v14[5]];
  *(void *)uint64_t v49 = "SiriInformationSearch/PommesSearchRequestProcessor.swift";
  *((void *)v49 + 1) = 56;
  v49[16] = 2;
  *(void *)&v48[v14[6]] = 123;
  unint64_t v50 = &v48[v14[7]];
  *(void *)unint64_t v50 = "search_sync(completion:)";
  *((void *)v50 + 1) = 24;
  v50[16] = 2;
  uint64_t v51 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000016);
  uint64_t v52 = (uint64_t *)&v48[v14[8]];
  *uint64_t v52 = v51;
  v52[1] = v53;
  os_log_type_t v54 = v119;
  Date.init()();
  uint64_t v55 = &v54[v14[5]];
  *(void *)uint64_t v55 = "SiriInformationSearch/PommesSearchRequestProcessor.swift";
  *((void *)v55 + 1) = 56;
  v55[16] = 2;
  *(void *)&v54[v14[6]] = 124;
  uint64_t v56 = &v54[v14[7]];
  *(void *)uint64_t v56 = "search_sync(completion:)";
  *((void *)v56 + 1) = 24;
  v56[16] = 2;
  uint64_t v57 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000024);
  os_log_type_t v58 = (uint64_t *)&v54[v14[8]];
  uint64_t *v58 = v57;
  v58[1] = v59;
  uint64_t v60 = v117;
  uint64_t v61 = v117[4];
  v107();
  uint64_t v62 = v60[5];
  uint64_t v63 = swift_allocObject();
  swift_weakInit();
  int v64 = (void *)swift_allocObject();
  dispatch_semaphore_t v65 = v113;
  v64[2] = v113;
  v64[3] = v63;
  v64[4] = v115;
  uint64_t v66 = *(void (**)(uint64_t, uint64_t, Swift::Int (*)(void *), void *))(*(void *)v61 + 200);
  dispatch_semaphore_t v113 = v65;
  swift_retain();
  swift_retain();
  v66(v47, v62, partial apply for closure #2 in PommesSearchRequestProcessor.search_sync(completion:), v64);
  swift_release();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v47, v112);
  swift_release();
  uint64_t v67 = type metadata accessor for DispatchTime();
  uint64_t v68 = *(void *)(v67 - 8);
  uint64_t v69 = MEMORY[0x1F4188790](v67);
  uint64_t v71 = (char *)&v99 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v69);
  uint64_t v73 = (char *)&v99 - v72;
  static DispatchTime.now()();
  uint64_t v74 = type metadata accessor for DispatchTimeInterval();
  uint64_t v75 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v77 = (uint64_t *)((char *)&v99 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0));
  void *v77 = 200;
  (*(void (**)(void *, void, uint64_t))(v75 + 104))(v77, *MEMORY[0x1E4FBCAC0], v74);
  DispatchTime.advanced(by:)();
  (*(void (**)(void *, uint64_t))(v75 + 8))(v77, v74);
  uint64_t v78 = *(void (**)(char *, uint64_t))(v68 + 8);
  v78(v73, v67);
  dispatch_semaphore_t v79 = v113;
  MEMORY[0x1CB77D1D0](v71);
  v78(v71, v67);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v80 = *(void (**)(char *, uint64_t))(*(void *)static PerformanceUtil.shared + 184);
  uint64_t v81 = v119;
  v80(v119, 1);
  uint64_t v82 = (uint64_t)v81;
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0
    && (uint64_t v83 = v100, swift_beginAccess(), (v84 = *v83) != 0))
  {
    id v85 = v84;
    v102(v84, 0);
    id v86 = v111;
    OS_dispatch_semaphore.wait()();
    uint64_t v87 = (uint64_t)v118;
    v80(v118, 1);
    uint64_t v88 = v101;
    swift_beginAccess();
    uint64_t v89 = v105;
    outlined init with copy of MediaUserStateCenter?(v88, v105, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
    uint64_t v90 = v116;
    swift_retain();
    uint64_t v91 = v117;
    swift_retain();
    specialized PommesSearchRequestProcessor.handlePegasusResponse(_:_:)(v89, v91, (uint64_t)v91, v90);
  }
  else
  {
    id v92 = v111;
    OS_dispatch_semaphore.wait()();
    uint64_t v87 = (uint64_t)v118;
    v80(v118, 1);
    uint64_t v93 = v101;
    swift_beginAccess();
    uint64_t v89 = v105;
    outlined init with copy of MediaUserStateCenter?(v93, v105, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
    uint64_t v94 = v116;
    swift_retain();
    uint64_t v95 = v117;
    swift_retain();
    uint64_t v96 = v103;
    swift_retain();
    specialized PommesSearchRequestProcessor.handlePegasusResponse(_:_:)(v89, v95, v102, v96, (uint64_t)v95, v94);

    swift_release();
  }
  uint64_t v97 = (uint64_t)v104;
  swift_release();
  swift_release();
  outlined destroy of MediaUserStateCenter?(v89, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v82, type metadata accessor for PerformanceUtil.Ticket);
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v87, type metadata accessor for PerformanceUtil.Ticket);
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v97, (uint64_t (*)(void))type metadata accessor for SignpostToken);
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v114, type metadata accessor for PerformanceUtil.Ticket);
  swift_release();
  return swift_release();
}

uint64_t PommesSearchRequestProcessor.pommesSearchRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest;
  swift_beginAccess();
  return _s21SiriInformationSearch06PommesC7RequestVWOcTm_1(v3, a1, type metadata accessor for PommesSearchRequest);
}

uint64_t PegasusProxy.search(pommesSearchRequest:completion:)(char **a1, void (*a2)(uint64_t), void (*a3)(uint64_t))
{
  v269 = (void (*)(uint64_t))a3;
  unint64_t v268 = a2;
  uint64_t v4 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v5 = v4 - 8;
  uint64_t v244 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v244 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v253 = (uint64_t)v210 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SignpostToken();
  uint64_t v242 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v252 = (uint64_t)v210 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v243 = v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v255 = (uint64_t)v210 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v241 = (char *)v210 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v239 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v239);
  uint64_t v254 = (uint64_t)v210 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v14 - 8);
  int v248 = (char *)v210 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v262 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v261 = *(void *)(v262 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v262);
  v249 = (char *)v210 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  os_log_type_t v247 = (char *)v210 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v260 = (char *)v210 - v21;
  uint64_t v246 = v22;
  MEMORY[0x1F4188790](v20);
  v258 = (char *)v210 - v23;
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v25 = *(void *)(Context - 8);
  MEMORY[0x1F4188790](Context);
  uint64_t v267 = (uint64_t)v210 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v265 = (void (*)(char *, uint64_t, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  MEMORY[0x1F4188790](v265);
  uint64_t v266 = (char *)v210 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for PommesCandidateId();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  os_log_type_t v264 = (char *)v210 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v240 = v31;
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)v210 - v32;
  uint64_t v34 = (uint64_t *)((char *)a1 + *(int *)(v5 + 40));
  uint64_t v35 = *v34;
  uint64_t v36 = (void *)v34[1];
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v238 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37 - 8);
  uint64_t v251 = v38;
  uint64_t v39 = (char *)v210 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v274 = v39;
  uint64_t v257 = Context;
  uint64_t v256 = v25;
  uint64_t v245 = v6;
  if (v36)
  {
    swift_bridgeObjectRetain();
    UUID.init(uuidString:)();
  }
  else
  {
    uint64_t v40 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
  }
  uint64_t v275 = v29;
  v276 = v33;
  uint64_t v278 = v28;
  uint64_t v263 = a1;
  PommesSearchRequest.pommesCandidateId.getter((uint64_t)v33);
  uint64_t v41 = type metadata accessor for UUID();
  v270 = v210;
  uint64_t v272 = *(void *)(v41 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v41);
  uint64_t v250 = v43;
  uint64_t v44 = (char *)v210 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1) {
    uint64_t v42 = swift_once();
  }
  uint64_t v271 = v210;
  unint64_t v45 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v42);
  uint64_t v206 = v280;
  uint64_t v207 = v35;
  uint64_t v259 = v35;
  uint64_t v273 = v36;
  BOOL v208 = v36;
  uint64_t v46 = type metadata accessor for Date();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(void *)(v47 + 64);
  MEMORY[0x1F4188790](v46);
  unint64_t v49 = (v48 + 15) & 0xFFFFFFFFFFFFFFF0;
  Date.init()();
  unint64_t v50 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(char *@<X8>)))(*(void *)v45 + 200);
  uint64_t v277 = v41;
  BOOL v208 = &v205;
  uint64_t v209 = v41;
  LOBYTE(v206) = 2;
  uint64_t v279 = v44;
  v50(0xD000000000000040, 0x80000001C91A2D60, 0, (char *)v210 - v49, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 395, "search(pommesSearchRequest:completion:)", 39, v206, partial apply for closure #2 in PegasusProxy.search(pommesSearchRequest:completion:));
  uint64_t v51 = *(uint64_t (**)(char *, uint64_t))(v47 + 8);
  uint64_t v52 = v51((char *)v210 - v49, v46);
  uint64_t v53 = static PerformanceUtil.shared;
  uint64_t v54 = v280;
  MEMORY[0x1F4188790](v52);
  Date.init()();
  uint64_t v55 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)(), uint64_t, uint64_t))(*(void *)v53 + 200);
  LOBYTE(v206) = 2;
  v55(0xD00000000000003ALL, 0x80000001C91A2DB0, 0, (char *)v210 - v49, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 402, "search(pommesSearchRequest:completion:)", 39, v206, partial apply for closure #3 in PegasusProxy.search(pommesSearchRequest:completion:), v54, MEMORY[0x1E4FBC848] + 8);
  v51((char *)v210 - v49, v46);
  if ((AFSupportsSiriInCall() & 1) == 0)
  {
    uint64_t v56 = (*(uint64_t (**)(void))(*(void *)v54 + 352))();
    if (v56)
    {
      char v57 = (*(uint64_t (**)(uint64_t, void *, void))(*(void *)v56 + 144))(v259, v273, 0);
      swift_release();
      if (v57)
      {
        swift_bridgeObjectRelease();
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v58 = type metadata accessor for Logger();
        __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
        uint64_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.info.getter();
        BOOL v61 = os_log_type_enabled(v59, v60);
        uint64_t v62 = v272;
        uint64_t v63 = v279;
        if (v61)
        {
          int v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int v64 = 0;
          _os_log_impl(&dword_1C8F83000, v59, v60, "SiriInCall is not supported and user is on phone call, unable to complete search", v64, 2u);
          MEMORY[0x1CB77E470](v64, -1, -1);
        }

        char v65 = 9;
LABEL_21:
        uint64_t v80 = (uint64_t)v266;
        *uint64_t v266 = v65;
        swift_storeEnumTagMultiPayload();
        v268(v80);
        outlined destroy of MediaUserStateCenter?(v80, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
        (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v277);
        (*(void (**)(char *, uint64_t))(v275 + 8))(v276, v278);
        return outlined destroy of MediaUserStateCenter?((uint64_t)v274, &demangling cache variable for type metadata for UUID?);
      }
    }
  }
  if ((dispatch thunk of NetworkAvailability.isAvailable.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v62 = v272;
    uint64_t v63 = v279;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v76 = type metadata accessor for Logger();
    __swift_project_value_buffer(v76, (uint64_t)static Logger.pommes);
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v77, v78))
    {
      dispatch_semaphore_t v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)dispatch_semaphore_t v79 = 0;
      _os_log_impl(&dword_1C8F83000, v77, v78, "Network is unavailable, unable to complete search", v79, 2u);
      MEMORY[0x1CB77E470](v79, -1, -1);
    }

    char v65 = 2;
    goto LABEL_21;
  }
  uint64_t v66 = v267;
  uint64_t v67 = v263;
  static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(v263, (char **)(v54 + 96), *(char **)(v54 + 184), v267);
  uint64_t v68 = v262;
  uint64_t v69 = swift_allocBox();
  uint64_t v71 = v70;
  uint64_t v72 = swift_allocObject();
  uint64_t v73 = MEMORY[0x1E4FBC860];
  unint64_t v74 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)(v72 + 16) = v73;
  *(void *)(v72 + 24) = v74;
  uint64_t v75 = v258;
  (*(void (**)(char **, uint64_t, uint64_t))(*(void *)v54 + 568))(v67, v66, v72 + 16);
  uint64_t v236 = v69;
  uint64_t v271 = (void *)v72;
  uint64_t v82 = v71;
  uint64_t v237 = v71;
  uint64_t v83 = v261;
  uint64_t v266 = *(char **)(v261 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v266)(v82, v75, v68);
  uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 16);
  id v85 = v260;
  v84(v260, v82, v68);
  os_log_type_t v265 = v84;
  uint64_t v283 = 0;
  aBlocuint64_t k = 0u;
  long long v282 = 0u;
  uint64_t v86 = (uint64_t)v248;
  static TaskPriority.background.getter();
  uint64_t v87 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v86, 0, 1, v87);
  outlined init with copy of MediaUserStateCenter?((uint64_t)&aBlock, (uint64_t)&v285, &demangling cache variable for type metadata for CurareInteractionStream?);
  uint64_t v88 = v247;
  v84(v247, (uint64_t)v85, v68);
  unint64_t v89 = (*(unsigned __int8 *)(v83 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
  uint64_t v90 = swift_allocObject();
  *(void *)(v90 + 16) = 0;
  *(void *)(v90 + 24) = 0;
  outlined init with take of PommesSearchReason?((uint64_t)&v285, v90 + 32, &demangling cache variable for type metadata for CurareInteractionStream?);
  ((void (*)(unint64_t, char *, uint64_t))v266)(v90 + v89, v88, v68);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v86, (uint64_t)&async function pointer to partial apply for closure #1 in static CurareDonation.donateCurareInfo(for:into:), v90);
  swift_release();
  outlined destroy of MediaUserStateCenter?((uint64_t)&aBlock, &demangling cache variable for type metadata for CurareInteractionStream?);
  uint64_t v91 = *(void (**)(char *, uint64_t))(v83 + 8);
  v91(v260, v68);
  id v92 = v249;
  int v248 = (char *)(v83 + 16);
  v265(v249, v237, v68);
  _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusRequest and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusRequest, MEMORY[0x1E4F88710]);
  uint64_t v93 = Message.serializedData(partial:)();
  uint64_t v266 = 0;
  uint64_t v261 = v83 + 8;
  os_log_type_t v247 = (char *)v91;
  uint64_t v198 = v93;
  unint64_t v200 = v199;
  v91(v92, v68);
  unint64_t v201 = v276;
  switch(v200 >> 62)
  {
    case 1uLL:
      uint64_t result = outlined consume of Data._Representation(v198, v200);
      LODWORD(v202) = HIDWORD(v198) - v198;
      if (!__OFSUB__(HIDWORD(v198), v198))
      {
        uint64_t v202 = (int)v202;
        goto LABEL_22;
      }
      __break(1u);
      return result;
    case 2uLL:
      uint64_t v204 = *(void *)(v198 + 16);
      uint64_t v203 = *(void *)(v198 + 24);
      outlined consume of Data._Representation(v198, v200);
      uint64_t v202 = v203 - v204;
      if (!__OFSUB__(v203, v204))
      {
LABEL_22:
        unint64_t v201 = v276;
        goto LABEL_23;
      }
      __break(1u);
      goto LABEL_33;
    case 3uLL:
LABEL_33:
      outlined consume of Data._Representation(v198, v200);
      uint64_t v202 = 0;
      goto LABEL_23;
    default:
      outlined consume of Data._Representation(v198, v200);
      uint64_t v202 = BYTE6(v200);
LABEL_23:
      uint64_t v94 = v254;
      uint64_t v95 = v251;
      double v96 = (double)v202 * 0.0009765625;
      Date.init()();
      uint64_t v97 = (int *)v239;
      uint64_t v98 = v94 + *(int *)(v239 + 20);
      *(void *)uint64_t v98 = "SiriInformationSearch/PegasusProxy.swift";
      *(void *)(v98 + 8) = 40;
      *(unsigned char *)(v98 + 16) = 2;
      *(void *)(v94 + v97[6]) = 448;
      uint64_t v99 = v94 + v97[7];
      *(void *)uint64_t v99 = "search(pommesSearchRequest:completion:)";
      *(void *)(v99 + 8) = 39;
      *(unsigned char *)(v99 + 16) = 2;
      uint64_t v100 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002CLL);
      uint64_t v101 = (uint64_t *)(v94 + v97[8]);
      *uint64_t v101 = v100;
      v101[1] = v102;
      uint64_t v103 = *(void *)(v54 + 176);
      uint64_t v104 = v275;
      uint64_t v106 = (char *)(v275 + 16);
      uint64_t v105 = *(void (**)(char *, char *, uint64_t))(v275 + 16);
      uint64_t v107 = (uint64_t)v241;
      uint64_t v108 = v278;
      v105(v241, v201, v278);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v107, 0, 1, v108);
      uint64_t v109 = (uint64_t)v274;
      (*(void (**)(char *, char *, uint64_t, double))(*(void *)v103 + 128))(v274, v279, v107, v96);
      outlined destroy of MediaUserStateCenter?(v107, &demangling cache variable for type metadata for PommesCandidateId?);
      uint64_t v110 = (*(uint64_t (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v94, 0);
      uint64_t v111 = *(void (**)(uint64_t, uint64_t))(*(void *)v54 + 328);
      uint64_t v229 = *(void *)v54 + 328;
      uint64_t v227 = v111;
      ((void (*)(uint64_t))v111)(v110);
      uint64_t v113 = v112;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v115 = (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 32))(ObjectType, v113);
      swift_unknownObjectRelease();
      *(void *)&aBlocuint64_t k = v115;
      uint64_t v239 = swift_allocObject();
      uint64_t v116 = swift_weakInit();
      v258 = (char *)v210;
      MEMORY[0x1F4188790](v116);
      unint64_t v221 = (v95 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v117 = v95;
      uint64_t v118 = (char *)v210 - v221;
      uint64_t v119 = outlined init with copy of MediaUserStateCenter?(v109, (uint64_t)v210 - v221, &demangling cache variable for type metadata for UUID?);
      uint64_t v241 = (char *)v210;
      uint64_t v120 = v250;
      MEMORY[0x1F4188790](v119);
      unint64_t v217 = (v120 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v121 = (char *)v210 - v217;
      uint64_t v122 = v272;
      uint64_t v123 = *(void (**)(char *, char *, uint64_t))(v272 + 16);
      uint64_t v124 = v277;
      uint64_t v222 = v272 + 16;
      os_log_type_t v220 = v123;
      v123((char *)v210 - v217, v279, v277);
      v249 = v106;
      uint64_t v246 = v105;
      v105(v264, v201, v278);
      uint64_t v125 = *(unsigned __int8 *)(v238 + 80);
      uint64_t v126 = (v125 + 24) & ~v125;
      uint64_t v127 = *(unsigned __int8 *)(v122 + 80);
      uint64_t v128 = (v117 + v127 + v126) & ~v127;
      uint64_t v129 = v275;
      uint64_t v130 = *(unsigned __int8 *)(v275 + 80);
      uint64_t v131 = (v120 + v130 + v128) & ~v130;
      unint64_t v132 = (v240 + v131 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v218 = v125 | v127 | v130 | 7;
      uint64_t v133 = swift_allocObject();
      *(void *)(v133 + 16) = v239;
      uint64_t v231 = v126;
      outlined init with take of PommesSearchReason?((uint64_t)v118, v133 + v126, &demangling cache variable for type metadata for UUID?);
      uint64_t v232 = v128;
      uint64_t v134 = *(void (**)(uint64_t, char *, uint64_t))(v122 + 32);
      uint64_t v135 = v124;
      uint64_t v136 = v280;
      uint64_t v226 = v122 + 32;
      uint64_t v225 = v134;
      v134(v133 + v128, v121, v135);
      uint64_t v233 = v131;
      uint64_t v137 = *(void (**)(uint64_t, char *, uint64_t))(v129 + 32);
      uint64_t v224 = v129 + 32;
      uint64_t v223 = v137;
      v137(v133 + v131, v264, v278);
      unint64_t v234 = v132;
      *(void *)(v133 + v132) = v271;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Apple_Parsec_Feedback_V2_FeedbackPayload, Never>);
      _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0(&lazy protocol witness table cache variable for type PassthroughSubject<Apple_Parsec_Feedback_V2_FeedbackPayload, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<Apple_Parsec_Feedback_V2_FeedbackPayload, Never>);
      uint64_t v138 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      v258 = *(char **)(v136 + 152);
      uint64_t v139 = swift_allocObject();
      *(void *)(v139 + 16) = v136;
      *(void *)(v139 + 24) = v138;
      uint64_t v283 = partial apply for closure #5 in PegasusProxy.search(pommesSearchRequest:completion:);
      uint64_t v284 = v139;
      *(void *)&aBlocuint64_t k = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v282 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      *((void *)&v282 + 1) = &block_descriptor_19;
      uint64_t v140 = _Block_copy(&aBlock);
      uint64_t v141 = type metadata accessor for DispatchQoS();
      v210[1] = v210;
      uint64_t v142 = *(void *)(v141 - 8);
      MEMORY[0x1F4188790](v141);
      uint64_t v230 = v143;
      unint64_t v228 = (v143 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v144 = (char *)v210 - v228;
      swift_retain();
      uint64_t v241 = (char *)v138;
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v145 = type metadata accessor for DispatchWorkItemFlags();
      v210[0] = v210;
      uint64_t v146 = *(void *)(v145 - 8);
      MEMORY[0x1F4188790](v145);
      uint64_t v219 = v147;
      unint64_t v216 = (v147 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v148 = (char *)v210 - v216;
      uint64_t v285 = MEMORY[0x1E4FBC860];
      uint64_t v149 = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAF30]);
      uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      uint64_t v151 = _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      uint64_t v214 = v150;
      uint64_t v212 = v151;
      uint64_t v215 = v149;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1CB77D180](0, v144, v148, v140);
      _Block_release(v140);
      uint64_t v152 = *(void (**)(char *, uint64_t))(v146 + 8);
      uint64_t v238 = v145;
      uint64_t v235 = v146 + 8;
      uint64_t v213 = v152;
      v152(v148, v145);
      uint64_t v153 = *(void (**)(char *, uint64_t))(v142 + 8);
      uint64_t v240 = v141;
      uint64_t v239 = v142 + 8;
      uint64_t v211 = v153;
      v153(v144, v141);
      swift_release();
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v154 = type metadata accessor for OSSignposter();
      __swift_project_value_buffer(v154, (uint64_t)static Signposter.pommes);
      uint64_t v155 = v255;
      uint64_t v156 = OSSignposter.begin(name:context:)("proxy.request", 13, 2u, 0, v255);
      uint64_t v157 = v280;
      os_log_t v158 = v227;
      ((void (*)(uint64_t))v227)(v156);
      uint64_t v160 = v159;
      uint64_t v161 = swift_getObjectType();
      v158(v161, v162);
      uint64_t v164 = v163;
      uint64_t v165 = swift_getObjectType();
      uint64_t v166 = (*(uint64_t (**)(uint64_t, uint64_t))(v164 + 8))(v165, v164);
      swift_unknownObjectRelease();
      uint64_t v167 = specialized static PegasusOverrideUtil.headerOverrides.getter();
      uint64_t v168 = specialized Dictionary.merging(_:uniquingKeysWith:)(v167, v166);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v160 + 16))(v168, v161, v160);
      uint64_t v169 = swift_unknownObjectRelease();
      ((void (*)(uint64_t))v158)(v169);
      uint64_t v171 = v170;
      uint64_t v172 = swift_getObjectType();
      uint64_t v173 = v260;
      uint64_t v174 = v262;
      v265(v260, v237, v262);
      uint64_t v175 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v171 + 48))(v173, v172, v171);
      swift_unknownObjectRelease();
      uint64_t v176 = ((uint64_t (*)(char *, uint64_t))v247)(v173, v174);
      uint64_t v266 = (char *)v210;
      *(void *)&aBlocuint64_t k = v175;
      MEMORY[0x1F4188790](v176);
      uint64_t v177 = (char *)v210 - v221;
      uint64_t v178 = outlined init with copy of MediaUserStateCenter?((uint64_t)v274, (uint64_t)v210 - v221, &demangling cache variable for type metadata for UUID?);
      os_log_type_t v265 = (void (*)(char *, uint64_t, uint64_t))v210;
      MEMORY[0x1F4188790](v178);
      uint64_t v179 = (char *)v210 - v217;
      v220((char *)v210 - v217, v279, v277);
      uint64_t v180 = v278;
      v246(v264, v276, v278);
      _s21SiriInformationSearch06PommesC7RequestVWOcTm_2((uint64_t)v263, v253, type metadata accessor for PommesSearchRequest);
      _s21SiriInformationSearch06PommesC7RequestVWOcTm_2(v155, v252, (uint64_t (*)(void))type metadata accessor for SignpostToken);
      unint64_t v181 = v234;
      unint64_t v182 = (v234 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v183 = (v182 + *(unsigned __int8 *)(v244 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v244 + 80);
      unint64_t v184 = (v245 + *(unsigned __int8 *)(v242 + 80) + v183) & ~(unint64_t)*(unsigned __int8 *)(v242 + 80);
      unint64_t v185 = (v243 + v184 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v186 = swift_allocObject();
      *(void *)(v186 + 16) = v157;
      outlined init with take of PommesSearchReason?((uint64_t)v177, v186 + v231, &demangling cache variable for type metadata for UUID?);
      v225(v186 + v232, v179, v277);
      v223(v186 + v233, v264, v180);
      unint64_t v187 = (void *)(v186 + v181);
      v188 = v273;
      *unint64_t v187 = v259;
      v187[1] = v188;
      *(void *)(v186 + v182) = v236;
      outlined init with take of PommesSearchRequest(v253, v186 + v183, type metadata accessor for PommesSearchRequest);
      outlined init with take of PommesSearchRequest(v252, v186 + v184, (uint64_t (*)(void))type metadata accessor for SignpostToken);
      uint64_t v189 = (void (**)(uint64_t))(v186 + v185);
      v190 = v269;
      *uint64_t v189 = v268;
      v189[1] = v190;
      swift_retain();
      swift_retain();
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Result<Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, PegasusProxyForAssistant.Error>, Never>);
      _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0(&lazy protocol witness table cache variable for type AnyPublisher<Result<Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, PegasusProxyForAssistant.Error>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Result<Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, PegasusProxyForAssistant.Error>, Never>);
      uint64_t v191 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      uint64_t v192 = swift_allocObject();
      *(void *)(v192 + 16) = v157;
      *(void *)(v192 + 24) = v191;
      uint64_t v283 = partial apply for closure #8 in PegasusProxy.search(pommesSearchRequest:completion:);
      uint64_t v284 = v192;
      *(void *)&aBlocuint64_t k = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v282 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      *((void *)&v282 + 1) = &block_descriptor_25;
      uint64_t v193 = _Block_copy(&aBlock);
      MEMORY[0x1F4188790](v193);
      uint64_t v194 = (char *)v210 - v228;
      swift_retain();
      swift_retain();
      uint64_t v195 = static DispatchQoS.unspecified.getter();
      MEMORY[0x1F4188790](v195);
      uint64_t v196 = (char *)v210 - v216;
      uint64_t v285 = MEMORY[0x1E4FBC860];
      uint64_t v197 = v238;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1CB77D180](0, v194, v196, v193);
      _Block_release(v193);
      swift_release();
      swift_release();
      v213(v196, v197);
      v211(v194, v240);
      _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v255, (uint64_t (*)(void))type metadata accessor for SignpostToken);
      _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v254, type metadata accessor for PerformanceUtil.Ticket);
      (*(void (**)(uint64_t, uint64_t))(v256 + 8))(v267, v257);
      (*(void (**)(char *, uint64_t))(v272 + 8))(v279, v277);
      (*(void (**)(char *, uint64_t))(v275 + 8))(v276, v278);
      outlined destroy of MediaUserStateCenter?((uint64_t)v274, &demangling cache variable for type metadata for UUID?);
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      break;
  }
  return result;
}

uint64_t static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)@<X0>(char **a1@<X0>, char **a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v100 = a3;
  uint64_t v91 = a4;
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v7 = *(void *)(Context - 8);
  uint64_t v94 = Context;
  uint64_t v95 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](Context);
  uint64_t v88 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v87 = (char *)&v86 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v86 - v12;
  uint64_t v14 = type metadata accessor for SignpostToken();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for OSSignposter();
  uint64_t v89 = __swift_project_value_buffer(v17, (uint64_t)static Signposter.pommes);
  uint64_t v90 = v16;
  OSSignposter.begin(name:context:)("proxy.createQueryContext", 24, 2u, 0, (uint64_t)v16);
  uint64_t v18 = Apple_Parsec_Search_PegasusQueryContext.init()();
  if (one-time initialization token for shared != -1) {
    uint64_t v18 = swift_once();
  }
  uint64_t v19 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v18);
  uint64_t v82 = v13;
  uint64_t v83 = a2;
  uint64_t v84 = a1;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v101 = (char **)v13;
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(v20 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  MEMORY[0x1F4188790](v20);
  uint64_t v97 = v23;
  unint64_t v102 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v24 = (char *)&v86 - v102;
  Date.init()();
  uint64_t v25 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v19 + 200);
  uint64_t v98 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v84 = (char **)&v81;
  uint64_t v85 = MEMORY[0x1E4FBC848] + 8;
  LOBYTE(v82) = 2;
  v25(0xD000000000000017, 0x80000001C91A1BC0, 0, v24, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 23, "build(for:withLocationManager:dataProviderManager:)", 51, v82, partial apply for closure #1 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  id v92 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
  uint64_t v26 = v92(v24, v21);
  uint64_t v27 = v22 + 8;
  uint64_t v86 = (uint64_t (*)(uint64_t, char *, uint64_t))&v86;
  uint64_t v28 = static PerformanceUtil.shared;
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  uint64_t v99 = v30;
  uint64_t v84 = (char **)v13;
  uint64_t v85 = (uint64_t)v100;
  MEMORY[0x1F4188790](v29);
  unint64_t v31 = v102;
  Date.init()();
  uint64_t v32 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)()))(*(void *)v28 + 200);
  uint64_t v33 = v98;
  uint64_t v84 = &v82;
  uint64_t v85 = v98;
  LOBYTE(v82) = 2;
  v32(0xD000000000000015, 0x80000001C91A1C60, 0, (char *)&v86 - v31, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 27, "build(for:withLocationManager:dataProviderManager:)", 51, v82, partial apply for closure #2 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  uint64_t v96 = v21;
  uint64_t v93 = v27;
  uint64_t v34 = v92;
  uint64_t v35 = v92((char *)&v86 - v31, v21);
  uint64_t v36 = static PerformanceUtil.shared;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v84 = v101;
  uint64_t v85 = (uint64_t)v99;
  MEMORY[0x1F4188790](v37);
  Date.init()();
  uint64_t v38 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)()))(*(void *)v36 + 200);
  uint64_t v84 = &v82;
  uint64_t v85 = v33;
  LOBYTE(v82) = 2;
  v38(0xD000000000000026, 0x80000001C91A1C80, 0, (char *)&v86 - v31, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 30, "build(for:withLocationManager:dataProviderManager:)", 51, v82, partial apply for closure #3 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  uint64_t v39 = v34((char *)&v86 - v31, v21);
  uint64_t v86 = (uint64_t (*)(uint64_t, char *, uint64_t))&v86;
  uint64_t v40 = static PerformanceUtil.shared;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v42 = (uint64_t)v101;
  uint64_t v82 = v100;
  uint64_t v83 = v101;
  uint64_t v84 = v99;
  MEMORY[0x1F4188790](v41);
  Date.init()();
  uint64_t v43 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v40 + 200);
  uint64_t v44 = v94;
  uint64_t v84 = (char **)&v81;
  uint64_t v85 = v94;
  LOBYTE(v82) = 2;
  unint64_t v45 = v87;
  v43(0xD00000000000002DLL, 0x80000001C91A1CB0, 0, (char *)&v86 - v31, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 34, "build(for:withLocationManager:dataProviderManager:)", 51, v82, partial apply for closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  uint64_t v46 = v96;
  v34((char *)&v86 - v31, v96);
  uint64_t v86 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v95 + 40);
  uint64_t v47 = v86(v42, v45, v44);
  uint64_t v87 = (char *)&v86;
  uint64_t v48 = static PerformanceUtil.shared;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v50 = v44;
  uint64_t v51 = v100;
  uint64_t v84 = (char **)v100;
  uint64_t v85 = v42;
  MEMORY[0x1F4188790](v49);
  uint64_t v52 = (char *)&v86 - v102;
  Date.init()();
  uint64_t v53 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v48 + 200);
  uint64_t v84 = &v82;
  uint64_t v85 = v44;
  uint64_t v54 = v42;
  uint64_t v55 = v46;
  LOBYTE(v82) = 2;
  uint64_t v56 = v88;
  v53(0xD000000000000023, 0x80000001C91A1CE0, 0, v52, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 37, "build(for:withLocationManager:dataProviderManager:)", 51, v82, partial apply for closure #5 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  uint64_t v57 = v46;
  uint64_t v58 = (void (*)(char *, uint64_t))v92;
  v92(v52, v57);
  uint64_t v59 = v86(v54, v56, v50);
  os_log_type_t v60 = static PerformanceUtil.shared;
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  uint64_t v84 = (char **)v51;
  uint64_t v85 = v54;
  MEMORY[0x1F4188790](v61);
  uint64_t v62 = (char *)&v86 - v102;
  Date.init()();
  uint64_t v63 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v60 + 200);
  uint64_t v84 = &v82;
  uint64_t v85 = v98;
  LOBYTE(v82) = 2;
  v63(0xD00000000000002BLL, 0x80000001C91A1D10, 0, v62, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 40, "build(for:withLocationManager:dataProviderManager:)", 51, v82, partial apply for closure #6 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  v58(v62, v55);
  int v64 = v99;
  uint64_t v65 = type metadata accessor for PommesSearchRequest(0);
  if (*((unsigned char *)v64 + *(int *)(v65 + 60)) == 1)
  {
    uint64_t v88 = (char *)&v86;
    uint64_t v66 = static PerformanceUtil.shared;
    uint64_t v67 = MEMORY[0x1F4188790](v65);
    uint64_t v82 = v100;
    uint64_t v83 = v101;
    uint64_t v84 = v64;
    MEMORY[0x1F4188790](v67);
    uint64_t v68 = v58;
    unint64_t v69 = v102;
    Date.init()();
    uint64_t v70 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v66 + 200);
    uint64_t v71 = v98;
    uint64_t v84 = (char **)&v81;
    uint64_t v85 = v98;
    LOBYTE(v82) = 2;
    v70(0xD00000000000002BLL, 0x80000001C91A1D60, 0, (char *)&v86 - v69, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 45, "build(for:withLocationManager:dataProviderManager:)", 51, v82, partial apply for closure #7 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
    uint64_t v65 = ((uint64_t (*)(char *, uint64_t))v58)((char *)&v86 - v69, v96);
    uint64_t v72 = v71;
  }
  else
  {
    uint64_t v72 = v98;
    uint64_t v68 = v58;
  }
  uint64_t v73 = static PerformanceUtil.shared;
  uint64_t v74 = MEMORY[0x1F4188790](v65);
  uint64_t v75 = v101;
  uint64_t v84 = v101;
  MEMORY[0x1F4188790](v74);
  uint64_t v77 = (char *)&v86 - v76;
  Date.init()();
  os_log_type_t v78 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v73 + 200);
  uint64_t v84 = &v82;
  uint64_t v85 = v72;
  LOBYTE(v82) = 2;
  v78(0xD000000000000017, 0x80000001C91A1D40, 0, v77, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 51, "build(for:withLocationManager:dataProviderManager:)", 51, v82, partial apply for closure #8 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  v68(v77, v96);
  (*(void (**)(uint64_t, char **, uint64_t))(v95 + 32))(v91, v75, v94);
  uint64_t v79 = (uint64_t)v90;
  OSSignposter.end(token:message:)((uint64_t)v90, 0, 0xE000000000000000);
  return _s21SiriInformationSearch13SignpostTokenVWOhTm_0(v79, (uint64_t (*)(void))type metadata accessor for SignpostToken);
}

uint64_t partial apply for closure #1 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
  return closure #1 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(*(void *)(v0 + 16), *(int **)(v0 + 24), *(void *)(v0 + 32));
}

Swift::String_optional __swiftcall AssistantLocationProvider.countryCode()()
{
  id v0 = (id)_AFPreferencesCountryCode();
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v4 = 0;
  }
  uint64_t v5 = v2;
  uint64_t v6 = v4;
  result.value._object = v6;
  result.value._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t protocol witness for PommesLocationManaging.cachedLocationInfo() in conformance PommesLocationManager@<X0>(uint64_t a1@<X8>)
{
  return PommesLocationManager.cachedLocationInfo()(a1);
}

void outlined consume of Result<PommesLocationInfo, LocationError>(id a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
}
  }

void partial apply for closure #2 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
}

uint64_t DataProviderManager.addAmpStorefront(to:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v16)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(uint64_t@<X8>), void *, uint64_t);
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v55;
  uint64_t v56;
  uint64_t v57;
  void v58[4];
  void v59[4];
  uint64_t v60;
  long long v61;
  uint64_t v62;
  uint64_t v63;
  long long v64;
  long long v65;
  uint64_t v66;
  uint64_t v67;

  uint64_t v4 = v3;
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Context - 8) + 16);
  v59[3] = a3;
  uint64_t v10 = v9(a3, a1, Context);
  if (one-time initialization token for shared != -1) {
    uint64_t v10 = swift_once();
  }
  uint64_t v11 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v10);
  v58[2] = v4;
  v58[3] = a2;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v16 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(uint64_t@<X8>), void *, uint64_t))(*(void *)v11 + 200);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MediaUserState]?);
  v16(&v67, 0xD00000000000003FLL, 0x80000001C919FFE0, 0, v15, "SiriInformationSearch/DataProviderManager.swift", 47, 2, 173, "addAmpStorefront(to:for:)", 25, 2, partial apply for closure #1 in DataProviderManager.addAmpStorefront(to:for:), v58, v17);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  os_log_type_t v60 = v67;
  uint64_t v18 = *(void **)(v4 + 88);
  if (v18)
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
    v59[2] = v59;
    MEMORY[0x1F4188790](v19 - 8);
    uint64_t v21 = (char *)v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v22 = type metadata accessor for DispatchTime();
    v59[1] = v59;
    uint64_t v23 = *(void *)(v22 - 8);
    MEMORY[0x1F4188790](v22);
    uint64_t v25 = (char *)v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    static DispatchTime.now()();
    uint64_t v26 = type metadata accessor for DispatchTimeInterval();
    uint64_t v27 = a2;
    uint64_t v28 = *(void *)(v26 - 8);
    MEMORY[0x1F4188790](v26);
    uint64_t v30 = (void *)((char *)v59 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
    *uint64_t v30 = 1;
    (*(void (**)(void *, void, uint64_t))(v28 + 104))(v30, *MEMORY[0x1E4FBCAC0], v26);
    MEMORY[0x1CB77C970](v25, v30);
    (*(void (**)(void *, uint64_t))(v28 + 8))(v30, v26);
    a2 = v27;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
    uint64_t v18 = (void *)(*(uint64_t (**)(char *))(*v18 + 168))(v21);
    outlined destroy of MediaUserStateCenter?((uint64_t)v21, &demangling cache variable for type metadata for DispatchTime?);
  }
  unint64_t v31 = type metadata accessor for PommesSearchRequest(0);
  if (*(unsigned char *)(a2 + *(int *)(v31 + 60)) != 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = v60;
    if (!v60) {
      return Apple_Parsec_Search_PegasusQueryContext.storeFront.setter();
    }
LABEL_20:
    uint64_t v41 = *(void *)(v32 + 16);
    if (v41)
    {
      uint64_t v42 = v32 + 32;
      swift_bridgeObjectRetain();
      while (1)
      {
        outlined init with copy of AppDataProviding(v42, (uint64_t)&v61);
        uint64_t v43 = v62;
        uint64_t v44 = v63;
        __swift_project_boxed_opaque_existential_1(&v61, v62);
        if ((*(uint64_t (**)(uint64_t, uint64_t))(v44 + 32))(v43, v44)) {
          break;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
        v42 += 40;
        if (!--v41)
        {
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease();
      outlined init with take of AppDataProviding(&v61, (uint64_t)&v64);
    }
    else
    {
LABEL_25:
      uint64_t v66 = 0;
      int v64 = 0u;
      uint64_t v65 = 0u;
    }
    swift_bridgeObjectRelease();
    unint64_t v45 = *((void *)&v65 + 1);
    if (*((void *)&v65 + 1))
    {
      uint64_t v46 = v66;
      __swift_project_boxed_opaque_existential_1(&v64, *((uint64_t *)&v65 + 1));
      (*(void (**)(uint64_t, uint64_t))(v46 + 16))(v45, v46);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v64);
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)&v64, &demangling cache variable for type metadata for MediaUserState?);
    }
    return Apple_Parsec_Search_PegasusQueryContext.storeFront.setter();
  }
  uint64_t v32 = v60;
  if (!v18)
  {
LABEL_17:
    if (!v32) {
      return Apple_Parsec_Search_PegasusQueryContext.storeFront.setter();
    }
    goto LABEL_20;
  }
  uint64_t v33 = (uint64_t *)(a2 + *(int *)(v31 + 84));
  uint64_t v34 = v33[1];
  if (!v34 || (uint64_t v35 = v18[2]) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  uint64_t v36 = *v33;
  uint64_t v37 = v18 + 5;
  while (1)
  {
    uint64_t v39 = v37[1];
    uint64_t v38 = v37[2];
    uint64_t v40 = *(v37 - 1) == v36 && v34 == *v37;
    if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    v37 += 7;
    if (!--v35) {
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v32)
  {
    swift_bridgeObjectRelease();
    uint64_t v66 = 0;
    int v64 = 0u;
    uint64_t v65 = 0u;
    goto LABEL_48;
  }
  uint64_t v48 = *(void *)(v32 + 16);
  if (!v48)
  {
LABEL_44:
    uint64_t v66 = 0;
    int v64 = 0u;
    uint64_t v65 = 0u;
    goto LABEL_47;
  }
  uint64_t v49 = v32 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of AppDataProviding(v49, (uint64_t)&v61);
    uint64_t v50 = v62;
    uint64_t v51 = v63;
    __swift_project_boxed_opaque_existential_1(&v61, v62);
    uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 40))(v50, v51);
    if (!v53) {
      goto LABEL_34;
    }
    if (v52 == v39 && v53 == v38) {
      break;
    }
    uint64_t v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v55) {
      goto LABEL_46;
    }
LABEL_34:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
    v49 += 40;
    if (!--v48)
    {
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
  }
  swift_bridgeObjectRelease();
LABEL_46:
  swift_bridgeObjectRelease();
  outlined init with take of AppDataProviding(&v61, (uint64_t)&v64);
LABEL_47:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_48:
  outlined init with copy of MediaUserStateCenter?((uint64_t)&v64, (uint64_t)&v61, &demangling cache variable for type metadata for MediaUserState?);
  uint64_t v56 = v62;
  if (v62)
  {
    uint64_t v57 = v63;
    __swift_project_boxed_opaque_existential_1(&v61, v62);
    (*(void (**)(uint64_t, uint64_t))(v57 + 16))(v56, v57);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v61, &demangling cache variable for type metadata for MediaUserState?);
  }
  Apple_Parsec_Search_PegasusQueryContext.storeFront.setter();
  return outlined destroy of MediaUserStateCenter?((uint64_t)&v64, &demangling cache variable for type metadata for MediaUserState?);
}

uint64_t partial apply for closure #1 in DataProviderManager.addAmpStorefront(to:for:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DataProviderManager.addAmpStorefront(to:for:)(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t closure #1 in DataProviderManager.addAmpStorefront(to:for:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v28[14] = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a1[3];
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  uint64_t v24 = a1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v25 = v3;
  outlined init with take of PommesSearchReason?((uint64_t)v27, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  uint64_t v10 = a1[15];
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v24 - v16;
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  uint64_t v18 = type metadata accessor for DispatchTimeInterval();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (uint64_t *)((char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v21 = 1;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E4FBCAC0], v18);
  MEMORY[0x1CB77C970](v17, v21);
  (*(void (**)(void *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v17, v11);
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, char *))(*(void *)v26 + 240))(v8, v28, v10, v24, v15);
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v28);
  v22(v15, v11);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t storeEnumTagSinglePayload for PommesSearchRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C91562D4);
}

uint64_t storeEnumTagSinglePayload for AssistantDataSnapshot(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(void *)Swift::String_optional result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 90) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 90) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in DataProviderManager.assistantDataSnapshot.getter@<X0>(_OWORD *a1@<X8>)
{
  return closure #1 in DataProviderManager.assistantDataSnapshot.getter(v1, a1);
}

uint64_t closure #1 in DataProviderManager.assistantDataSnapshot.getter@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  void (*v4)(void *__return_ptr, uint64_t);
  uint64_t v5;
  void v6[12];

  uint64_t v3 = *(void *)(result + 112);
  if (v3)
  {
    uint64_t v4 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v3 + 120);
    uint64_t v5 = swift_retain();
    v4(v6, v5);
    swift_release();
    return outlined init with take of PommesSearchReason?((uint64_t)v6, (uint64_t)a2, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  }
  else
  {
    *(_OWORD *)((char *)a2 + 74) = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

uint64_t AssistantDataCache.lastAssistantDataSnapshot.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  uint64_t v7 = *(void *)(v1 + 80);
  uint64_t v8 = *(void *)(v1 + 88);
  uint64_t v9 = *(void *)(v1 + 96);
  uint64_t v10 = *(void *)(v1 + 104);
  __int16 v15 = *(_WORD *)(v1 + 136);
  uint64_t v13 = *(void *)(v1 + 120);
  uint64_t v14 = *(void *)(v1 + 128);
  uint64_t v12 = *(void *)(v1 + 112);
  uint64_t result = outlined copy of AssistantDataSnapshot?(v3, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(_WORD *)(a1 + 88) = v15;
  return result;
}

uint64_t outlined copy of AssistantDataSnapshot?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AssistantDataSnapshot(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 90)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t initializeWithCopy for AssistantDataSnapshot(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v4;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AssistantDataSnapshot()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t AnyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:timeout:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  uint64_t v51 = a6;
  uint64_t v9 = *v6;
  uint64_t v10 = type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v11 = (int *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v9 + 80);
  uint64_t v50 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v50 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v50);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v44 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))((char *)&v44 - v18, 1, 1, v14);
  unint64_t v20 = v7[13];
  uint64_t v49 = v7[12];
  v55[0] = v49;
  v55[1] = v20;
  swift_bridgeObjectRetain();
  v21._uint64_t countAndFlagsBits = 0x6420686374656620;
  v21._object = (void *)0xEB00000000617461;
  String.append(_:)(v21);
  uint64_t v22 = v55[0];
  Date.init()();
  uint64_t v23 = &v13[v11[7]];
  *(void *)uint64_t v23 = "SiriInformationSearch/DataProvider.swift";
  *((void *)v23 + 1) = 40;
  v23[16] = 2;
  *(void *)&v13[v11[8]] = 108;
  uint64_t v24 = &v13[v11[9]];
  *(void *)uint64_t v24 = "fetch(for:assistantData:serviceHelper:dispatchQueue:timeout:)";
  *((void *)v24 + 1) = 61;
  v24[16] = 2;
  uint64_t v25 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v22);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = (uint64_t *)&v13[v11[10]];
  uint64_t *v28 = v25;
  v28[1] = v27;
  MEMORY[0x1CB77D100](a5);
  (*(void (**)(uint64_t))(*v7 + 224))(a5);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v13, 0);
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0
    && (static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*v7 + 232))(v45, v46, v47, v48);
    uint64_t v29 = v50;
    (*(void (**)(char *, char *, uint64_t))(v52 + 40))(v19, v17, v50);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
    swift_retain_n();
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      v55[0] = v48;
      *(_DWORD *)uint64_t v33 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v20, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2080;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v17, v19, v29);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v31, v32, "%s fetch complete %s", (uint8_t *)v33, 0x16u);
      uint64_t v36 = v48;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v36, -1, -1);
      MEMORY[0x1CB77E470](v33, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    outlined destroy of PerformanceUtil.Ticket((uint64_t)v13);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
    swift_retain_n();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      v55[0] = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v20, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v38, v39, "%s timeout while waiting for fetch", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v41, -1, -1);
      MEMORY[0x1CB77E470](v40, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    outlined destroy of PerformanceUtil.Ticket((uint64_t)v13);
    uint64_t v29 = v50;
  }
  swift_beginAccess();
  uint64_t v42 = v52;
  (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v51, v19, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v19, v29);
}

uint64_t AnyDataProvider.wait(timeout:)()
{
  return (*(uint64_t (**)(void))(v0 + 32))() & 1;
}

uint64_t AmpDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t AnyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  v23[8] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v11 = static PerformanceUtil.shared;
  uint64_t v12 = *(void *)(v5 + 104);
  uint64_t v24 = *(void *)(v5 + 96);
  uint64_t v25 = v12;
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 0x2868637465665F20;
  v13._object = (void *)0xE900000000000029;
  String.append(_:)(v13);
  uint64_t v14 = v24;
  uint64_t v15 = v25;
  MEMORY[0x1F4188790](v16);
  v23[2] = v6;
  v23[3] = a1;
  v23[4] = a2;
  v23[5] = a3;
  v23[6] = a4;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  unint64_t v20 = (char *)v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Optional();
  Date.init()();
  (*(void (**)(uint64_t, uint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), void *, uint64_t))(*(void *)v11 + 200))(v14, v15, 0, v20, "SiriInformationSearch/DataProvider.swift", 40, 2, 94, "fetch(for:assistantData:serviceHelper:dispatchQueue:)", 53, 2, partial apply for closure #1 in AnyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:), v23, v21);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
}

uint64_t partial apply for closure #1 in AnyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  return (*(uint64_t (**)(void, void, void, void))(v0[2] + 48))(v0[3], v0[4], v0[5], v0[6]);
}

uint64_t AmpDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v5, &demangling cache variable for type metadata for PommesSearchRequest?);
  uint64_t v6 = type metadata accessor for PommesSearchRequest(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    uint64_t v7 = outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for PommesSearchRequest?);
  }
  else
  {
    int v8 = v5[*(int *)(v6 + 60)];
    uint64_t v7 = outlined destroy of SignpostToken((uint64_t)v5, type metadata accessor for PommesSearchRequest);
    if (v8 == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 120))(v7);
    }
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 120))(v7);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = v10 + 32;
    while (1)
    {
      outlined init with copy of AppDataProviding(v12, (uint64_t)&v21);
      uint64_t v13 = v22;
      uint64_t v14 = v23;
      __swift_project_boxed_opaque_existential_1(&v21, v22);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14)) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
      v12 += 40;
      if (!--v11) {
        goto LABEL_9;
      }
    }
    outlined init with take of AppDataProviding(&v21, (uint64_t)&v24);
  }
  else
  {
LABEL_9:
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v25 + 1))
  {
    outlined init with take of AppDataProviding(&v24, (uint64_t)v27);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<MediaUserState>);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1C91947A0;
    outlined init with take of AppDataProviding(v27, v9 + 32);
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v24, &demangling cache variable for type metadata for MediaUserState?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1C8F83000, v16, v17, "AmpDataProvider could not find an active user state for non-multi user request", v18, 2u);
      MEMORY[0x1CB77E470](v18, -1, -1);
    }

    return 0;
  }
  return v9;
}

uint64_t getEnumTagSinglePayload for PommesSearchRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C91560A8);
}

uint64_t outlined destroy of SignpostToken(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s21SiriInformationSearch13SignpostTokenVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t AmpDataProvider.cachedMediaUserStates.getter()
{
  return swift_bridgeObjectRetain();
}

id protocol witness for MediaUserState.isActive.getter in conformance ICMediaUserState()
{
  return objc_msgSend(*v0, sel_isActive);
}

uint64_t *outlined release of AssistantDataSnapshot?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of AssistantDataSnapshot?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t PommesMUXContextManager.fetch(timeout:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DispatchTime?(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    outlined destroy of DispatchTime?((uint64_t)v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    (*(void (**)(char *))(*(void *)v1 + 160))(v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  OS_dispatch_queue.sync<A>(execute:)();
  return v11[1];
}

uint64_t outlined init with copy of DispatchTime?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PommesMUXContextManager.wait(timeout:)()
{
  return MEMORY[0x1CB77D100]() & 1;
}

uint64_t partial apply for closure #1 in PommesMUXContextManager.fetch(timeout:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 120))();
  *a1 = result;
  return result;
}

uint64_t PommesMUXContextManager.cachedContext.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for MediaUserState.storefrontIdentifier.getter in conformance ICMediaUserState()
{
  id v1 = objc_msgSend(*v0, sel_storefrontIdentifier);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t partial apply for closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
  return partial apply for closure #3 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)();
}

uint64_t DataProviderManager.addUIScale(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t);
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t Context;
  uint64_t v19[12];
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  _OWORD v24[5];
  long long v25;
  _OWORD v26[2];
  unsigned char v27[16];
  uint64_t v28;
  char v29;

  uint64_t v5 = *(void *)(v2 + 112);
  if (!v5) {
    goto LABEL_4;
  }
  uint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v5 + 120);
  uint64_t v7 = swift_retain();
  v6(v19, v7);
  swift_release();
  outlined init with take of PommesSearchReason?((uint64_t)v19, (uint64_t)&v20, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  if (!*((void *)&v21 + 1)) {
    goto LABEL_4;
  }
  v24[4] = v22;
  long long v25 = v23;
  v26[0] = v24[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v24 + 10);
  v24[2] = v20;
  v24[3] = v21;
  outlined release of AssistantDataSnapshot?(v19);
  outlined init with take of PommesSearchReason?((uint64_t)&v25 + 8, (uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for Double?);
  outlined init with take of PommesSearchReason?((uint64_t)v27, (uint64_t)&v28, (uint64_t *)&demangling cache variable for type metadata for Double?);
  if ((v29 & 1) == 0)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    uint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v17 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v15, v16, "Adding UI scale %f to Pegasus query context", v17, 0xCu);
      MEMORY[0x1CB77E470](v17, -1, -1);
    }

    uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Context - 8) + 16))(a2, a1, Context);
    return Apple_Parsec_Search_PegasusQueryContext.uiScale.setter();
  }
  else
  {
LABEL_4:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1C8F83000, v9, v10, "No UI scale available from assistant data cache.", v11, 2u);
      MEMORY[0x1CB77E470](v11, -1, -1);
    }

    uint64_t v12 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a2, a1, v12);
  }
}

void DataProviderManager.addTemperatureUnit(to:)(uint64_t a1)
{
  void (*v8)(uint64_t *__return_ptr, uint64_t);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  char v25;
  unsigned int *v26;
  uint64_t v27;
  char v28;
  void v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[12];
  char v34[24];
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  uint64_t v3 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v1 + 112);
  if (v7)
  {
    uint64_t v8 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v7 + 120);
    uint64_t v9 = swift_retain();
    v8(v33, v9);
    swift_release();
    outlined init with take of PommesSearchReason?((uint64_t)v33, (uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
    if (v35)
    {
      uint64_t v11 = v36;
      uint64_t v10 = v37;
      swift_bridgeObjectRetain();
      outlined release of AssistantDataSnapshot?(v33);
      if (v10)
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
        swift_bridgeObjectRetain_n();
        uint64_t v13 = Logger.logObject.getter();
        uint64_t v14 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = swift_slowAlloc();
          v29[1] = a1;
          uint64_t v16 = (uint8_t *)v15;
          os_log_type_t v17 = swift_slowAlloc();
          uint64_t v30 = v11;
          uint64_t v18 = v17;
          os_log_type_t v32 = v17;
          *(_DWORD *)uint64_t v16 = 136315138;
          swift_bridgeObjectRetain();
          unint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v10, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C8F83000, v13, v14, "Adding temperatureUnit %s to Pegasus query context", v16, 0xCu);
          swift_arrayDestroy();
          uint64_t v19 = v18;
          uint64_t v11 = v30;
          MEMORY[0x1CB77E470](v19, -1, -1);
          MEMORY[0x1CB77E470](v16, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v11 && v10 == v24)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          long long v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v25 & 1) == 0)
          {
            if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v11 && v10 == v27)
            {
              swift_bridgeObjectRelease();
              uint64_t v26 = (unsigned int *)MEMORY[0x1E4F885A0];
            }
            else
            {
              uint64_t v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              uint64_t v26 = (unsigned int *)MEMORY[0x1E4F885B0];
              if (v28) {
                uint64_t v26 = (unsigned int *)MEMORY[0x1E4F885A0];
              }
            }
            goto LABEL_19;
          }
        }
        uint64_t v26 = (unsigned int *)MEMORY[0x1E4F885A8];
LABEL_19:
        (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *v26, v3);
        swift_bridgeObjectRelease();
        Apple_Parsec_Search_PegasusQueryContext.temperatureUnit.setter();
        return;
      }
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  long long v21 = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_1C8F83000, v21, v22, "No temperatureUnit available from assistant data cache.", v23, 2u);
    MEMORY[0x1CB77E470](v23, -1, -1);
  }
}

uint64_t PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v77)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(unsigned char *@<X8>), void *, void);
  void *v78;
  void (*v79)(void, void, void);
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)();
  void (*v83)(uint64_t *, void);
  uint64_t v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t (*)(), uint64_t);
  uint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  void (*v102)(uint64_t, uint64_t);
  void (*v103)(void, void, void);
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  void (*v110)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v111;
  void *v112;
  void *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  NSObject *v120;
  os_log_type_t v121;
  BOOL v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  BOOL v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  char **v135;
  unint64_t v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  NSObject *v148;
  os_log_type_t v149;
  uint8_t *v150;
  char *v151;
  void (*v152)(char *, char *, unint64_t);
  char *v153;
  uint64_t v154;
  unint64_t v155;
  NSObject *v156;
  os_log_type_t v157;
  uint8_t *v158;
  uint64_t v159;
  unint64_t v160;
  NSObject *v161;
  os_log_type_t v162;
  uint8_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  void (*v173)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(char *@<X8>));
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t (*v177)(uint64_t *, void);
  uint64_t v178;
  char *v179;
  void *v180;
  uint64_t v181;
  void (*v182)(char *, char *, uint64_t);
  NSObject *v183;
  os_log_type_t v184;
  BOOL v185;
  uint8_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  void (*v191)(char *, uint64_t);
  uint8_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  void (*v203)(uint64_t *, void);
  NSObject *v204;
  os_log_type_t v205;
  uint8_t *v206;
  uint64_t v207;
  char **v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  id v213;
  unsigned int v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  char *v218;
  unint64_t v219;
  void (*v220)(uint64_t *, void);
  NSObject *v221;
  os_log_type_t v222;
  uint8_t *v223;
  uint64_t v224;
  uint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  void (*v228)(uint64_t *, void);
  NSObject *v229;
  os_log_type_t v230;
  uint8_t *v231;
  uint64_t v232;
  uint64_t *v233;
  int EnumCaseMultiPayload;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void (*v239)(uint64_t *, void);
  NSObject *v240;
  os_log_type_t v241;
  uint8_t *v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  uint64_t v246;
  void *v247;
  uint64_t (*v248)();
  uint64_t v249;
  char *v250;
  void (*v251)(unint64_t, unint64_t, void, char *, const char *, uint64_t);
  char *v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t (*v257)();
  unint64_t v258;
  void (*v259)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  char *v260;
  char *v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  void (*v265)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  char *v266;
  char *v267;
  void (*v268)(char *, uint64_t);
  uint64_t v269;
  void *v270;
  uint64_t v271;
  char *v272;
  void (*v273)(uint64_t *, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char **v278;
  int v279;
  uint64_t (*v280)();
  void *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t (*v287)();
  char *v288;
  int v289;
  void (*v290)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  void (*v303)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v304;
  char *v305;
  void (*v306)(char *, uint64_t);
  char *v307;
  void *v308;
  uint64_t v309;
  void *v310;
  char *v311;
  void (*v312)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t (*v317)();
  uint64_t v318;
  void (*v319)(char *, uint64_t (*)(), uint64_t);
  uint64_t v320;
  uint64_t v321;
  uint64_t (*v322)();
  void (*v323)(char *, uint64_t (*)(), uint64_t);
  uint64_t v324;
  int *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  char *v331;
  uint64_t (*v332)();
  char *v333;
  char *v334;
  id v335;
  id v336;
  NSObject *v337;
  os_log_type_t v338;
  uint8_t *v339;
  uint64_t v340;
  id v341;
  uint64_t v342;
  unint64_t v343;
  NSObject *v344;
  os_log_type_t v345;
  uint8_t *v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  char *v351;
  uint64_t v352;
  void (*v353)(char *, uint64_t (*)(), uint64_t);
  uint64_t v354;
  void (*v355)(char *, uint64_t);
  uint64_t (*v356)();
  char *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t (*v361)(uint64_t (*)(), char *, uint64_t);
  uint64_t v362;
  void *v363;
  uint64_t v364;
  void *v365;
  char *v366;
  void (*v367)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>));
  char *v368;
  char *v369;
  uint64_t v370;
  void *v371;
  uint64_t v372;
  unint64_t v373;
  void (*v374)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  char *v375;
  int *v376;
  uint64_t v377;
  void (*v378)(char *, uint64_t);
  uint64_t v379;
  void *v380;
  uint64_t v381;
  void (*v382)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v383;
  int *v384;
  uint64_t v385;
  void *v386;
  uint64_t v387;
  char *v388;
  void *v389;
  void (*v390)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t (*v391)();
  uint64_t v392;
  uint64_t v393;
  int *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t *v398;
  uint64_t v399;
  char *v400;
  char *v401;
  int *v402;
  int *v403;
  NSObject *v404;
  os_log_type_t v405;
  uint8_t *v406;
  uint64_t v407;
  int *v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  NSObject *v413;
  os_log_type_t v414;
  uint8_t *v415;
  uint64_t v416;
  unint64_t v417;
  NSObject *v418;
  os_log_type_t v419;
  uint8_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  void *v425;
  uint64_t v426;
  void *v427;
  uint64_t v428;
  unint64_t v429;
  void (*v430)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  void (*v431)(char *, uint64_t);
  uint64_t v432;
  void *v433;
  uint64_t v434;
  void (*v435)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v436;
  uint64_t v437;
  void (*v438)(uint64_t, uint64_t, uint64_t);
  uint64_t v439;
  void (*v440)(uint64_t, uint64_t);
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  NSObject *v444;
  os_log_type_t v445;
  uint64_t v446;
  uint8_t *v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  uint64_t v451;
  os_log_type_t v452;
  uint64_t v453;
  uint8_t *v454;
  void v455[2];
  void *v456;
  uint64_t (*v457)();
  void *v458;
  uint64_t v459;
  char *v460;
  uint64_t v461;
  uint8_t *v462;
  uint64_t v463;
  char *v464;
  char *v465;
  char *v466;
  uint64_t v467;
  uint64_t v468;
  char *v469;
  char *v470;
  char **v471;
  uint64_t v472;
  void (*v473)(char *, uint64_t);
  char **v474;
  uint64_t *v475;
  char **v476;
  uint64_t v477;
  uint64_t v478;
  char *v479;
  char *v480;
  char *v481;
  char *v482;
  uint64_t v483;
  char *v484;
  uint64_t v485;
  char **v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  char *v490;
  uint64_t v491;
  uint64_t v492;
  char **v493;
  void *v494;
  uint64_t v495;
  void (*v496)(char *, uint64_t (*)(), uint64_t);
  char *v497;
  void (*v498)(uint64_t, uint64_t);
  uint64_t v499;
  char *v500;
  void *v501;
  unint64_t v502;
  uint64_t v503;
  char *v504;
  uint64_t v505;
  void (*v506)(void, void, void);
  uint64_t v507;
  uint64_t v508;
  char *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  int *v513;
  uint64_t v514;
  uint64_t v515;
  void (*v516)(void, void);
  uint64_t (*v517)();
  void *v518;
  uint64_t (*v519)();
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  void v523[2];
  uint64_t v524;
  uint64_t v525;

  v494 = a3;
  v485 = a4;
  v461 = type metadata accessor for Apple_Parsec_Siri_Context_ClientConversationContextInfo();
  MEMORY[0x1F4188790](v461);
  v460 = (char *)&v460 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v7 - 8);
  v478 = (uint64_t)&v460 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v492 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v491 = *(void *)(v492 - 8);
  MEMORY[0x1F4188790](v492);
  v497 = (char *)&v460 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  MEMORY[0x1F4188790](v10 - 8);
  v476 = (char **)((char *)&v460 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v493 = (char **)type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v477 = (uint64_t)*(v493 - 1);
  MEMORY[0x1F4188790](v493);
  v464 = (char *)&v460 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v474 = (char **)type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1F4188790](v474);
  v475 = (uint64_t *)((char *)&v460 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v472 = type metadata accessor for JSONEncodingOptions();
  v471 = *(char ***)(v472 - 8);
  MEMORY[0x1F4188790](v472);
  v470 = (char *)&v460 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v488 = type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  v487 = *(void *)(v488 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v488);
  os_log_type_t v17 = (char **)((char *)&v460 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v15);
  v469 = (char *)&v460 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  v473 = (void (*)(char *, uint64_t))((char *)&v460 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  v463 = (uint64_t)&v460 - v23;
  MEMORY[0x1F4188790](v22);
  v462 = (uint8_t *)&v460 - v24;
  v513 = (int *)type metadata accessor for PommesSearchRequest(0);
  uint64_t v25 = MEMORY[0x1F4188790](v513);
  v490 = (char *)&v460 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  v468 = (uint64_t)&v460 - v27;
  v508 = type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v28 = MEMORY[0x1F4188790](v508);
  uint64_t v30 = (char *)&v460 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v28);
  v467 = (uint64_t)&v460 - v32;
  MEMORY[0x1F4188790](v31);
  v507 = (uint64_t)&v460 - v33;
  uint64_t v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  v482 = (char *)&v460 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v40 = (char *)&v460 - v39;
  uint64_t v41 = MEMORY[0x1F4188790](v38);
  v480 = (char *)&v460 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  v479 = (char *)&v460 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  v466 = (char *)&v460 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v49 = (char *)&v460 - v48;
  uint64_t v50 = MEMORY[0x1F4188790](v47);
  v500 = (char *)&v460 - v51;
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  v505 = (uint64_t)&v460 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  v509 = (char *)&v460 - v55;
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  v502 = (unint64_t)&v460 - v57;
  MEMORY[0x1F4188790](v56);
  v519 = (uint64_t (*)())((char *)&v460 - v58);
  uint64_t v59 = type metadata accessor for SignpostToken();
  MEMORY[0x1F4188790](v59 - 8);
  uint64_t v61 = (char *)&v460 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  v486 = v17;
  v465 = v49;
  v481 = v40;
  v484 = v30;
  v517 = (uint64_t (*)())a1;
  v511 = v35;
  v510 = v34;
  uint64_t v62 = type metadata accessor for OSSignposter();
  uint64_t v63 = __swift_project_value_buffer(v62, (uint64_t)static Signposter.pommes);
  v504 = v61;
  v503 = v63;
  uint64_t v64 = OSSignposter.begin(name:context:)("proxy.constructSearchRequest", 28, 2u, 0, (uint64_t)v61);
  if (one-time initialization token for shared != -1) {
    uint64_t v64 = swift_once();
  }
  uint64_t v65 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v64);
  v456 = v518;
  v457 = v517;
  v483 = (uint64_t)a2;
  v458 = a2;
  uint64_t v66 = type metadata accessor for Date();
  uint64_t v67 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  v512 = v68;
  unint64_t v69 = (v68 + 15) & 0xFFFFFFFFFFFFFFF0;
  Date.init()();
  uint64_t v70 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v65 + 200);
  v458 = v455;
  v459 = v510;
  LOBYTE(v456) = 2;
  uint64_t v71 = v516;
  v70(0xD000000000000039, 0x80000001C91A2E20, 0, (char *)&v460 - v69, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 597, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #1 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v506 = (void (*)(void, void, void))v71;
  uint64_t v72 = *(void (**)(void, void))(v67 + 8);
  v515 = v66;
  v516 = v72;
  v514 = v67 + 8;
  v72((char *)&v460 - v69, v66);
  uint64_t v73 = (uint64_t (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isPushOffRequest.setter();
  uint64_t v74 = v73(&v524, 0);
  uint64_t v75 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v74);
  uint64_t v76 = (char *)&v460 - v69;
  Date.init()();
  uint64_t v77 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(unsigned char *@<X8>), void *, void))(*(void *)v75 + 200);
  os_log_type_t v78 = v518;
  LOBYTE(v456) = 2;
  uint64_t v79 = v506;
  v77(&v524, 0xD000000000000016, 0x80000001C91A2EB0, 0, v76, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 601, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #2 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:), v518, MEMORY[0x1E4FBB390]);
  v506 = v79;
  v516(v76, v515);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.userDataShareOptIn.setter();
  AFIsHorseman();
  uint64_t v80 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.isDataOnlyRequest.setter();
  uint64_t v81 = (*(uint64_t (**)(uint64_t))(*v78 + 352))(v80);
  if (v81)
  {
    (*(void (**)(void, void, uint64_t))(*(void *)v81 + 144))(*(void *)((char *)v517 + v513[8]), *(void *)((char *)v517 + v513[8] + 8), 1);
    swift_release();
  }
  uint64_t v82 = v519;
  uint64_t v83 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isPhoneCallActive.setter();
  v83(&v524, 0);
  uint64_t v84 = v507;
  Date.init()();
  uint64_t v85 = (int *)v508;
  uint64_t v86 = v84 + *(int *)(v508 + 20);
  *(void *)uint64_t v86 = "SiriInformationSearch/PegasusProxy.swift";
  *(void *)(v86 + 8) = 40;
  *(unsigned char *)(v86 + 16) = 2;
  *(void *)(v84 + v85[6]) = 609;
  uint64_t v87 = v84 + v85[7];
  *(void *)uint64_t v87 = "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)";
  *(void *)(v87 + 8) = 72;
  *(unsigned char *)(v87 + 16) = 2;
  uint64_t v88 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000031);
  uint64_t v89 = (uint64_t *)(v84 + v85[8]);
  NSObject *v89 = v88;
  v89[1] = v90;
  uint64_t v91 = v518[23];
  id v92 = v511;
  uint64_t v94 = v511 + 16;
  uint64_t v93 = *(void (**)(char *, uint64_t (*)(), uint64_t))(v511 + 16);
  uint64_t v95 = v509;
  uint64_t v96 = v510;
  v93(v509, v82, v510);
  uint64_t v97 = v502;
  uint64_t v98 = v506;
  (*(void (**)(char *, uint64_t (*)()))(*(void *)v91 + 328))(v95, v517);
  v501 = v98;
  if (v98)
  {
    uint64_t v99 = *(void (**)(char *, uint64_t))(v92 + 8);
    v99(v95, v96);
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v84, type metadata accessor for PerformanceUtil.Ticket);
    v99((char *)v519, v96);
    uint64_t v100 = (uint64_t)v504;
    OSSignposter.end(token:message:)((uint64_t)v504, 0, 0xE000000000000000);
    return _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v100, (uint64_t (*)(void))type metadata accessor for SignpostToken);
  }
  v489 = v91;
  v496 = v93;
  v495 = v94;
  unint64_t v102 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
  v499 = v92 + 8;
  v498 = v102;
  v102((uint64_t)v95, v96);
  uint64_t v103 = *(void (**)(void, void, void))(v92 + 40);
  v511 = v92 + 40;
  v506 = v103;
  v103(v519, v97, v96);
  uint64_t v104 = static PerformanceUtil.shared;
  uint64_t v105 = (*(uint64_t (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v84, 0);
  uint64_t v106 = MEMORY[0x1F4188790](v105);
  uint64_t v107 = (uint64_t)v517;
  v458 = v517;
  MEMORY[0x1F4188790](v106);
  uint64_t v109 = (char *)&v460 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v110 = *(void (**)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(void *)v104 + 200);
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  v458 = &v456;
  v459 = v111;
  LOBYTE(v456) = 2;
  uint64_t v112 = v501;
  v110(v523, 0xD000000000000045, 0x80000001C91A2F10, 0, v109, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 613, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #3 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  uint64_t v113 = v112;
  v516(v109, v515);
  uint64_t v115 = v523[0];
  unint64_t v114 = v523[1];
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v116 = type metadata accessor for Logger();
  uint64_t v117 = __swift_project_value_buffer(v116, (uint64_t)static Logger.pommes);
  uint64_t v118 = v468;
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_2(v107, v468, type metadata accessor for PommesSearchRequest);
  outlined copy of Data?(v115, v114);
  uint64_t v119 = v518;
  swift_retain();
  v509 = (char *)v117;
  uint64_t v120 = Logger.logObject.getter();
  uint64_t v121 = static os_log_type_t.debug.getter();
  uint64_t v122 = os_log_type_enabled(v120, v121);
  uint64_t v123 = v114 >> 60;
  v502 = v114;
  if (v122)
  {
    uint64_t v124 = swift_slowAlloc();
    *(_DWORD *)uint64_t v124 = 67109632;
    uint64_t v125 = (uint64_t)v462;
    outlined init with copy of MediaUserStateCenter?(v118 + v513[10], (uint64_t)v462, &demangling cache variable for type metadata for PommesContext?);
    uint64_t v126 = type metadata accessor for PommesContext();
    uint64_t v127 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v126 - 8) + 48))(v125, 1, v126);
    v501 = v112;
    uint64_t v128 = v127 != 1;
    uint64_t v129 = v125;
    uint64_t v123 = v114 >> 60;
    outlined destroy of MediaUserStateCenter?(v129, &demangling cache variable for type metadata for PommesContext?);
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v118, type metadata accessor for PommesSearchRequest);
    LODWORD(v524) = v128;
    uint64_t v119 = v518;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v124 + 8) = 1024;
    LODWORD(v524) = v114 >> 60 != 15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined consume of Data?(v115, v502);
    *(_WORD *)(v124 + 14) = 1024;
    uint64_t v113 = v501;
    LODWORD(v524) = *(void *)((char *)v119
                              + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext
                              + 8) >> 60 != 15;
    unint64_t v114 = v502;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C8F83000, v120, v121, "Considering adding Pegasus conversation context.\nPSR has PommesContext: %{BOOL}d\nPSR has explicit context bytes: %{BOOL}d\nPegasusProxy has persisted bytes: %{BOOL}d", (uint8_t *)v124, 0x14u);
    MEMORY[0x1CB77E470](v124, -1, -1);
  }
  else
  {
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v118, type metadata accessor for PommesSearchRequest);
    outlined consume of Data?(v115, v114);

    swift_release();
  }
  v468 = v115;
  uint64_t v130 = v488;
  if (v123 <= 0xE)
  {
    outlined copy of Data._Representation(v115, v114);
    outlined copy of Data._Representation(v115, v114);
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.conversationContextBytes.setter();
    outlined copy of Data?(v115, v114);
    outlined copy of Data._Representation(v115, v114);
    uint64_t v138 = Logger.logObject.getter();
    uint64_t v139 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v138, v139))
    {
      uint64_t v140 = (uint8_t *)swift_slowAlloc();
      uint64_t v141 = swift_slowAlloc();
      v501 = v113;
      uint64_t v142 = v141;
      v524 = v141;
      *(_DWORD *)uint64_t v140 = 136315138;
      outlined copy of Data._Representation(v115, v502);
      uint64_t v143 = Data.description.getter();
      uint64_t v145 = v144;
      outlined consume of Data?(v468, v502);
      v522 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v145, &v524);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v146 = v468;
      uint64_t v119 = v518;
      swift_bridgeObjectRelease();
      outlined consume of Data?(v146, v502);
      outlined consume of Data?(v146, v502);
      _os_log_impl(&dword_1C8F83000, v138, v139, "Adding Pegasus conversation context from explicit PommesContext value: %s", v140, 0xCu);
      swift_arrayDestroy();
      uint64_t v147 = v142;
      uint64_t v113 = v501;
      MEMORY[0x1CB77E470](v147, -1, -1);
      MEMORY[0x1CB77E470](v140, -1, -1);

      outlined consume of Data?(v146, v502);
    }
    else
    {
      outlined consume of Data?(v115, v114);
      outlined consume of Data?(v115, v114);
      outlined consume of Data._Representation(v115, v114);
    }
    uint64_t v134 = v487;
    uint64_t v135 = v486;
  }
  else
  {
    uint64_t v131 = v463;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v517 + v513[10], v463, &demangling cache variable for type metadata for PommesContext?);
    unint64_t v132 = type metadata accessor for PommesContext();
    uint64_t v133 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v132 - 8) + 48))(v131, 1, v132);
    outlined destroy of MediaUserStateCenter?(v131, &demangling cache variable for type metadata for PommesContext?);
    uint64_t v134 = v487;
    uint64_t v135 = v486;
    if (v133 != 1)
    {
      uint64_t v136 = *(void *)((char *)v119
                       + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext
                       + 8);
      if (v136 >> 60 != 15)
      {
        uint64_t v137 = *(void *)((char *)v119
                         + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext);
        switch(v136 >> 62)
        {
          case 1uLL:
            v442 = (int)v137;
            v443 = v137 >> 32;
            goto LABEL_101;
          case 2uLL:
            v442 = *(void *)(v137 + 16);
            v443 = *(void *)(v137 + 24);
LABEL_101:
            if (v442 == v443) {
              break;
            }
            outlined copy of Data._Representation(v137, *(void *)((char *)v119+ OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext+ 8));
LABEL_103:
            outlined copy of Data._Representation(v137, v136);
            Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.conversationContextBytes.setter();
            outlined copy of Data?(v137, v136);
            outlined copy of Data._Representation(v137, v136);
            v444 = Logger.logObject.getter();
            v445 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v444, v445))
            {
              v446 = swift_slowAlloc();
              v501 = v113;
              v447 = (uint8_t *)v446;
              v463 = swift_slowAlloc();
              v524 = v463;
              *(_DWORD *)v447 = 136315138;
              uint64_t v130 = v488;
              v462 = v447 + 4;
              outlined copy of Data._Representation(v137, v136);
              v448 = Data.description.getter();
              v450 = v449;
              outlined consume of Data?(v137, v136);
              v451 = v448;
              uint64_t v135 = v486;
              v522 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v451, v450, &v524);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              uint64_t v134 = v487;
              swift_bridgeObjectRelease();
              outlined consume of Data?(v137, v136);
              outlined consume of Data?(v137, v136);
              v452 = v445;
              uint64_t v119 = v518;
              _os_log_impl(&dword_1C8F83000, v444, v452, "Adding Pegasus conversation context from implicit previous turn value: %s", v447, 0xCu);
              v453 = v463;
              swift_arrayDestroy();
              MEMORY[0x1CB77E470](v453, -1, -1);
              v454 = v447;
              uint64_t v113 = v501;
              MEMORY[0x1CB77E470](v454, -1, -1);

LABEL_105:
              outlined consume of Data?(v137, v136);
            }
            else
            {
              outlined consume of Data?(v137, v136);
              outlined consume of Data?(v137, v136);
              outlined consume of Data._Representation(v137, v136);

              uint64_t v119 = v518;
            }
            break;
          case 3uLL:
            goto LABEL_105;
          default:
            if ((v136 & 0xFF000000000000) == 0) {
              goto LABEL_105;
            }
            goto LABEL_103;
        }
      }
    }
  }
  uint64_t v148 = Logger.logObject.getter();
  uint64_t v149 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v148, v149))
  {
    uint64_t v150 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v150 = 0;
    _os_log_impl(&dword_1C8F83000, v148, v149, "Adding SearchConversationContext to Pegasus request", v150, 2u);
    MEMORY[0x1CB77E470](v150, -1, -1);
  }

  uint64_t v151 = (char *)v119 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext;
  swift_beginAccess();
  uint64_t v152 = *(void (**)(char *, char *, unint64_t))(v134 + 16);
  v152(v469, v151, v130);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.searchConversationContext.setter();
  v152((char *)v135, v151, v130);
  uint64_t v153 = v470;
  JSONEncodingOptions.init()();
  _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Search_SearchConversationContext and conformance Apple_Parsec_Search_SearchConversationContext, MEMORY[0x1E4F88600]);
  uint64_t v154 = Message.jsonString(options:)();
  if (v113)
  {
    ((void (*)(char *, uint64_t))v471[1])(v153, v472);
    (*(void (**)(char **, unint64_t))(v134 + 8))(v135, v130);
    uint64_t v156 = Logger.logObject.getter();
    uint64_t v157 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v156, v157))
    {
      os_log_t v158 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_t v158 = 0;
      _os_log_impl(&dword_1C8F83000, v156, v157, "Could not convert SearchConversationContext to JSON before Pegasus request", v158, 2u);
      MEMORY[0x1CB77E470](v158, -1, -1);
    }
  }
  else
  {
    uint64_t v159 = v154;
    uint64_t v160 = v155;
    ((void (*)(char *, uint64_t))v471[1])(v153, v472);
    (*(void (**)(char **, unint64_t))(v134 + 8))(v135, v130);
    swift_bridgeObjectRetain();
    uint64_t v161 = Logger.logObject.getter();
    uint64_t v162 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v161, v162))
    {
      uint64_t v163 = (uint8_t *)swift_slowAlloc();
      uint64_t v164 = swift_slowAlloc();
      v524 = v164;
      *(_DWORD *)uint64_t v163 = 136315138;
      swift_bridgeObjectRetain();
      v521 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v160, &v524);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v161, v162, "SearchConversationContext JSON before Pegasus request: %s", v163, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v164, -1, -1);
      MEMORY[0x1CB77E470](v163, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v165 = (uint64_t)v517;
  uint64_t v166 = type metadata accessor for UUID();
  v486 = &v460;
  v501 = *(void **)(v166 - 8);
  uint64_t v167 = v501[8];
  uint64_t v168 = MEMORY[0x1F4188790](v166);
  uint64_t v169 = static PerformanceUtil.shared;
  uint64_t v170 = MEMORY[0x1F4188790](v168);
  v458 = v518;
  v459 = v165;
  MEMORY[0x1F4188790](v170);
  uint64_t v172 = (char *)&v460 - ((v171 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v173 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(char *@<X8>)))(*(void *)v169 + 200);
  v458 = &v456;
  v459 = v166;
  LOBYTE(v456) = 2;
  v173(0xD000000000000040, 0x80000001C91A2D60, 0, v172, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 644, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #4 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v470 = 0;
  v516(v172, v515);
  uint64_t v174 = UUID.uuidString.getter();
  uint64_t v176 = v175;
  uint64_t v177 = (uint64_t (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.pommesRequestContext.modify();
  MEMORY[0x1CB778FE0](v174, v176);
  uint64_t v178 = v177(&v524, 0);
  v488 = v167;
  MEMORY[0x1F4188790](v178);
  uint64_t v179 = (char *)&v460 - ((v167 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v180 = v501;
  unint64_t v181 = v166;
  unint64_t v182 = (void (*)(char *, char *, uint64_t))v501[2];
  v472 = (uint64_t)v179;
  v182(v179, v179, v166);
  unint64_t v183 = Logger.logObject.getter();
  unint64_t v184 = static os_log_type_t.debug.getter();
  unint64_t v185 = os_log_type_enabled(v183, v184);
  v487 = v181;
  if (v185)
  {
    uint64_t v186 = (uint8_t *)swift_slowAlloc();
    unint64_t v187 = swift_slowAlloc();
    v471 = &v460;
    v188 = v187;
    v524 = v187;
    *(_DWORD *)uint64_t v186 = 136315138;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BB28]);
    uint64_t v189 = dispatch thunk of CustomStringConvertible.description.getter();
    v521 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v189, v190, &v524);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v191 = (void (*)(char *, uint64_t))v501[1];
    v191(v179, v181);
    _os_log_impl(&dword_1C8F83000, v183, v184, "Adding pegasusId (%s) to request", v186, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v188, -1, -1);
    uint64_t v192 = v186;
    uint64_t v193 = (uint64_t)v517;
    MEMORY[0x1CB77E470](v192, -1, -1);

    uint64_t v194 = (uint64_t)v473;
  }
  else
  {
    uint64_t v191 = (void (*)(char *, uint64_t))v180[1];
    v191(v179, v181);

    uint64_t v194 = (uint64_t)v473;
    uint64_t v193 = (uint64_t)v517;
  }
  outlined init with copy of MediaUserStateCenter?(v193 + v513[10], v194, &demangling cache variable for type metadata for PommesContext?);
  uint64_t v195 = type metadata accessor for PommesContext();
  uint64_t v196 = *(void *)(v195 - 8);
  uint64_t v197 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v196 + 48))(v194, 1, v195);
  uint64_t v198 = v518;
  unint64_t v199 = (uint64_t)v490;
  if (v197 == 1)
  {
    outlined destroy of MediaUserStateCenter?(v194, &demangling cache variable for type metadata for PommesContext?);
  }
  else
  {
    unint64_t v200 = PommesContext.domain.getter();
    uint64_t v202 = v201;
    (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v194, v195);
    if (v202)
    {
      if (*(unsigned char *)(v193 + v513[20]) == 1)
      {
        v473 = v191;
        swift_bridgeObjectRetain();
        uint64_t v203 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.pommesRequestContext.modify();
        MEMORY[0x1CB778FC0](v200, v202);
        v203(&v524, 0);
        swift_bridgeObjectRetain();
        uint64_t v204 = Logger.logObject.getter();
        uint64_t v205 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v204, v205))
        {
          uint64_t v206 = (uint8_t *)swift_slowAlloc();
          uint64_t v207 = swift_slowAlloc();
          v524 = v207;
          *(_DWORD *)uint64_t v206 = 136315138;
          unint64_t v199 = (uint64_t)v490;
          swift_bridgeObjectRetain();
          v521 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v200, v202, &v524);
          uint64_t v198 = v518;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C8F83000, v204, v205, "Adding personalDomainFallback (%s) to request", v206, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v207, -1, -1);
          MEMORY[0x1CB77E470](v206, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v193 = (uint64_t)v517;
        uint64_t v191 = v473;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_2(v193, v199, type metadata accessor for PommesSearchRequest);
  if (*(void *)(v199 + v513[13])) {
    swift_bridgeObjectRetain();
  }
  BOOL v208 = (char **)specialized PommesAssistantIDManager.init(realAssistantID:)();
  uint64_t v210 = v209;
  uint64_t v212 = v211;
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v199, type metadata accessor for PommesSearchRequest);
  uint64_t v213 = objc_msgSend(self, sel_sharedPreferences);
  uint64_t v214 = objc_msgSend(v213, sel_longLivedIdentifierUploadingEnabled);

  v473 = (void (*)(char *, uint64_t))v212;
  v471 = v208;
  if (v214)
  {
    if (!v212) {
      goto LABEL_54;
    }
    swift_bridgeObjectRetain();
    unint64_t v216 = v212;
  }
  else
  {
    MEMORY[0x1F4188790](v215);
    uint64_t v218 = (char *)&v460 - ((v217 + 15) & 0xFFFFFFFFFFFFFFF0);
    PommesAssistantIDManager.replacementAssistantID()(v208, v210, v212, (uint64_t)v218);
    uint64_t v210 = UUID.uuidString.getter();
    unint64_t v216 = v219;
    v191(v218, v487);
  }
  swift_bridgeObjectRetain();
  os_log_type_t v220 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.assistantID.setter();
  v220(&v524, 0);
  swift_bridgeObjectRetain();
  unint64_t v221 = Logger.logObject.getter();
  uint64_t v222 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v221, v222))
  {
    uint64_t v223 = (uint8_t *)swift_slowAlloc();
    uint64_t v224 = swift_slowAlloc();
    v524 = v224;
    *(_DWORD *)uint64_t v223 = 136315138;
    swift_bridgeObjectRetain();
    v521 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v210, v216, &v524);
    uint64_t v193 = (uint64_t)v517;
    uint64_t v198 = v518;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v221, v222, "Adding assistantId (%s) to request", v223, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v224, -1, -1);
    MEMORY[0x1CB77E470](v223, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
LABEL_54:
  uint64_t v225 = (uint64_t *)(v193 + v513[8]);
  uint64_t v226 = v225[1];
  if (v226)
  {
    uint64_t v227 = *v225;
    swift_bridgeObjectRetain_n();
    unint64_t v228 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.interactionID.setter();
    v228(&v524, 0);
    swift_bridgeObjectRetain();
    uint64_t v229 = Logger.logObject.getter();
    uint64_t v230 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v229, v230))
    {
      uint64_t v231 = (uint8_t *)swift_slowAlloc();
      uint64_t v232 = swift_slowAlloc();
      v524 = v232;
      *(_DWORD *)uint64_t v231 = 136315138;
      swift_bridgeObjectRetain();
      v521 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v227, v226, &v524);
      uint64_t v193 = (uint64_t)v517;
      uint64_t v198 = v518;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v229, v230, "Adding interactionId (%s) to request", v231, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v232, -1, -1);
      MEMORY[0x1CB77E470](v231, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v233 = v475;
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_2(v193, (uint64_t)v475, type metadata accessor for PommesSearchRequest.ParseState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v236 = *v233;
    uint64_t v235 = v233[1];
    uint64_t v238 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0((uint64_t)v233 + *(int *)(v238 + 48), (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
LABEL_62:
    swift_bridgeObjectRetain();
    uint64_t v239 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.resultCandidateID.setter();
    v239(&v524, 0);
    swift_bridgeObjectRetain();
    uint64_t v240 = Logger.logObject.getter();
    uint64_t v241 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v240, v241))
    {
      uint64_t v242 = (uint8_t *)swift_slowAlloc();
      uint64_t v243 = swift_slowAlloc();
      v524 = v243;
      *(_DWORD *)uint64_t v242 = 136315138;
      swift_bridgeObjectRetain();
      v521 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v236, v235, &v524);
      uint64_t v193 = (uint64_t)v517;
      uint64_t v198 = v518;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v240, v241, "Adding resultCandidateId (%s) to request", v242, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v243, -1, -1);
      MEMORY[0x1CB77E470](v242, -1, -1);
    }
    else
    {

      uint64_t v244 = swift_bridgeObjectRelease_n();
    }
    goto LABEL_66;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v236 = *v233;
    uint64_t v235 = v233[1];
    swift_bridgeObjectRelease();
    uint64_t v237 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?));
    outlined destroy of MediaUserStateCenter?((uint64_t)v233 + *(int *)(v237 + 64), (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    goto LABEL_62;
  }
  uint64_t v244 = _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0((uint64_t)v233, type metadata accessor for PommesSearchRequest.ParseState);
LABEL_66:
  uint64_t v245 = static PerformanceUtil.shared;
  uint64_t v246 = MEMORY[0x1F4188790](v244);
  os_log_type_t v247 = v198;
  v456 = v198;
  v457 = v519;
  int v248 = v519;
  v458 = (void *)v193;
  v249 = v512;
  MEMORY[0x1F4188790](v246);
  v488 = (v249 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v250 = (char *)&v460 - v488;
  Date.init()();
  uint64_t v251 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t))(*(void *)v245 + 200);
  v475 = (uint64_t *)0xD000000000000026;
  v490 = (char *)(MEMORY[0x1E4FBC848] + 8);
  v458 = v455;
  v459 = MEMORY[0x1E4FBC848] + 8;
  v457 = partial apply for closure #6 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:);
  LOBYTE(v456) = 2;
  v455[1] = 72;
  v455[0] = "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)";
  uint64_t v252 = v470;
  v251(0xD000000000000026, 0x80000001C91A2F60, 0, v250, "SiriInformationSearch/PegasusProxy.swift", 40);
  v470 = v252;
  uint64_t v253 = v515;
  uint64_t v254 = ((uint64_t (*)(char *, uint64_t))v516)(v250, v515);
  v474 = &v460;
  uint64_t v255 = static PerformanceUtil.shared;
  uint64_t v256 = MEMORY[0x1F4188790](v254);
  v456 = v247;
  v457 = v248;
  uint64_t v257 = v248;
  v458 = v517;
  MEMORY[0x1F4188790](v256);
  v258 = v488;
  Date.init()();
  uint64_t v259 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v255 + 200);
  uint64_t v260 = v490;
  v458 = v455;
  v459 = (uint64_t)v490;
  LOBYTE(v456) = 2;
  uint64_t v261 = v470;
  v259(0xD00000000000002CLL, 0x80000001C91A2F90, 0, (char *)&v460 - v258, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 691, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #7 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v470 = v261;
  uint64_t v262 = ((uint64_t (*)(char *, uint64_t))v516)((char *)&v460 - v258, v253);
  v474 = &v460;
  uint64_t v263 = static PerformanceUtil.shared;
  os_log_type_t v264 = MEMORY[0x1F4188790](v262);
  v456 = v518;
  v457 = v257;
  v458 = v517;
  MEMORY[0x1F4188790](v264);
  Date.init()();
  os_log_type_t v265 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v263 + 200);
  v458 = v455;
  v459 = (uint64_t)v260;
  LOBYTE(v456) = 2;
  uint64_t v266 = v470;
  v265(0xD00000000000002ELL, 0x80000001C91A2FC0, 0, (char *)&v460 - v258, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 695, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #8 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v470 = v266;
  uint64_t v267 = (char *)&v460 - v258;
  unint64_t v268 = (void (*)(char *, uint64_t))v516;
  v269 = ((uint64_t (*)(char *, uint64_t))v516)(v267, v253);
  v474 = &v460;
  v270 = static PerformanceUtil.shared;
  uint64_t v271 = MEMORY[0x1F4188790](v269);
  v456 = v518;
  v457 = v257;
  v458 = v494;
  MEMORY[0x1F4188790](v271);
  uint64_t v272 = (char *)&v460 - v488;
  Date.init()();
  uint64_t v273 = *(void (**)(uint64_t *, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v270 + 200);
  v459 = (uint64_t)v490;
  int v274 = (uint64_t)v517;
  v458 = v455;
  LOBYTE(v456) = 2;
  uint64_t v275 = v470;
  v273(v475, 0x80000001C91A2FF0, 0, v272, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 699, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #9 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v268(v272, v253);
  v276 = (uint64_t)v476;
  outlined init with copy of MediaUserStateCenter?(v274 + v513[6], (uint64_t)v476, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  uint64_t v277 = v477;
  uint64_t v278 = v493;
  uint64_t v279 = (*(uint64_t (**)(uint64_t, uint64_t, char **))(v477 + 48))(v276, 1, v493);
  v490 = v275;
  if (v279 == 1)
  {
    outlined destroy of MediaUserStateCenter?(v276, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    v281 = v518;
    uint64_t v280 = v519;
  }
  else
  {
    long long v282 = v464;
    uint64_t v283 = (*(uint64_t (**)(char *, uint64_t, char **))(v277 + 32))(v464, v276, v278);
    v476 = &v460;
    uint64_t v284 = v277;
    uint64_t v285 = static PerformanceUtil.shared;
    uint64_t v286 = MEMORY[0x1F4188790](v283);
    uint64_t v287 = v519;
    v456 = v518;
    v457 = v519;
    v458 = v282;
    MEMORY[0x1F4188790](v286);
    v288 = (char *)&v460 - v488;
    Date.init()();
    uint64_t v289 = v279;
    uint64_t v290 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(void *)v285 + 200);
    v291 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_PegasusSearchQuery]);
    v458 = v455;
    v459 = v291;
    LOBYTE(v456) = 2;
    uint64_t v292 = v490;
    v290(&v524, 0xD00000000000002ALL, 0x80000001C91A31E0, 0, v288, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 705, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #10 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
    uint64_t v279 = v289;
    int v274 = (uint64_t)v517;
    v490 = v292;
    v516(v288, v515);
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.setter();
    (*(void (**)(char *, char **))(v284 + 8))(v282, v493);
    v281 = v518;
    uint64_t v280 = v287;
  }
  v293 = v492;
  v294 = v491;
  v295 = v497;
  uint64_t v296 = v478;
  outlined init with copy of MediaUserStateCenter?(v274 + v513[11], v478, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v294 + 48))(v296, 1, v293) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v296, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    v297 = v512;
    os_log_type_t v298 = v489;
  }
  else
  {
    uint64_t v299 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v294 + 32))(v295, v296, v293);
    if (v279 == 1)
    {
      v513 = (int *)&v460;
      unint64_t v300 = static PerformanceUtil.shared;
      uint64_t v301 = MEMORY[0x1F4188790](v299);
      v456 = v281;
      v457 = v280;
      v458 = v295;
      v302 = v512;
      MEMORY[0x1F4188790](v301);
      Date.init()();
      v303 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(void *)v300 + 200);
      os_log_type_t v304 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_PegasusSearchQuery]);
      v458 = v455;
      v459 = v304;
      LOBYTE(v456) = 2;
      uint64_t v305 = v490;
      v303(&v524, 0xD000000000000028, 0x80000001C91A3160, 0, (char *)&v460 - ((v302 + 15) & 0xFFFFFFFFFFFFFFF0), "SiriInformationSearch/PegasusProxy.swift", 40, 2, 713, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #11 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
      v295 = v497;
      uint64_t v306 = (void (*)(char *, uint64_t))v516;
      v516((char *)&v460 - ((v302 + 15) & 0xFFFFFFFFFFFFFFF0), v515);
      uint64_t v307 = v305;
      uint64_t v299 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.setter();
    }
    else
    {
      v302 = v512;
      uint64_t v306 = (void (*)(char *, uint64_t))v516;
      uint64_t v307 = v490;
    }
    v513 = (int *)&v460;
    uint64_t v308 = static PerformanceUtil.shared;
    uint64_t v309 = MEMORY[0x1F4188790](v299);
    v458 = v310;
    v459 = (uint64_t)v295;
    MEMORY[0x1F4188790](v309);
    uint64_t v311 = (char *)&v460 - ((v302 + 15) & 0xFFFFFFFFFFFFFFF0);
    Date.init()();
    v312 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(void *)v308 + 200);
    uint64_t v313 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(Siri_Nlu_External_Span, RREntity)]);
    v458 = &v456;
    v459 = v313;
    LOBYTE(v456) = 2;
    v312(&v521, 0xD00000000000002FLL, 0x80000001C91A3190, 0, v311, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 719, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #12 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
    v314 = v307;
    v306(v311, v515);
    v315 = v521;
    if (*(void *)(v521 + 16))
    {
      uint64_t v316 = (uint64_t)v500;
      v317 = v519;
      v318 = v510;
      uint64_t v319 = v496;
      v496(v500, v519, v510);
      uint64_t v320 = v505;
      PegasusProxy.addResolvedEntities(_:to:)(v315, v316, v505);
      swift_bridgeObjectRelease();
      uint64_t v321 = v316;
      long long v322 = v317;
      v314 = v307;
      v498(v321, v318);
      uint64_t v323 = v319;
      v506(v322, v320, v318);
    }
    else
    {
      swift_bridgeObjectRelease();
      v318 = v510;
      long long v322 = v519;
      uint64_t v323 = v496;
    }
    v324 = v467;
    Date.init()();
    uint64_t v325 = (int *)v508;
    uint64_t v326 = v324 + *(int *)(v508 + 20);
    *(void *)uint64_t v326 = "SiriInformationSearch/PegasusProxy.swift";
    *(void *)(v326 + 8) = 40;
    *(unsigned char *)(v326 + 16) = 2;
    *(void *)(v324 + v325[6]) = 751;
    uint64_t v327 = v324 + v325[7];
    *(void *)uint64_t v327 = "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)";
    *(void *)(v327 + 8) = 72;
    *(unsigned char *)(v327 + 16) = 2;
    uint64_t v328 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001BLL);
    uint64_t v329 = (uint64_t *)(v324 + v325[8]);
    char *v329 = v328;
    v329[1] = v330;
    v331 = v466;
    v323(v466, v322, v318);
    v332 = v322;
    v333 = v465;
    unsigned int v334 = v497;
    (*(void (**)(char *, char *, void *))(*v518 + 664))(v497, v331, v494);
    if (v314)
    {
      v498((uint64_t)v331, v318);
      _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v324, type metadata accessor for PerformanceUtil.Ticket);
      int v335 = v314;
      v336 = v314;
      uint64_t v337 = Logger.logObject.getter();
      uint64_t v338 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v337, v338))
      {
        uint64_t v339 = (uint8_t *)swift_slowAlloc();
        uint64_t v340 = swift_slowAlloc();
        v524 = v340;
        *(_DWORD *)uint64_t v339 = 136315138;
        v520 = (uint64_t)v314;
        uint64_t v341 = v314;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v342 = String.init<A>(describing:)();
        v520 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v342, v343, &v524);
        uint64_t v280 = v519;
        unsigned int v334 = v497;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C8F83000, v337, v338, "Unable to add user spans to search request: %s. Continuing request without spans.", v339, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v340, -1, -1);
        MEMORY[0x1CB77E470](v339, -1, -1);
      }
      else
      {
        uint64_t v280 = v332;
      }
      v297 = v512;
      os_log_type_t v298 = v489;
      (*(void (**)(char *, uint64_t))(v491 + 8))(v334, v492);
      v490 = 0;
    }
    else
    {
      v490 = 0;
      v498((uint64_t)v331, v318);
      v506(v332, v333, v318);
      (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v324, 0);
      v344 = Logger.logObject.getter();
      unsigned int v345 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v344, v345))
      {
        uint64_t v346 = (uint8_t *)swift_slowAlloc();
        uint64_t v347 = swift_slowAlloc();
        v520 = v347;
        *(_DWORD *)uint64_t v346 = 136315138;
        v513 = (int *)(v346 + 4);
        swift_beginAccess();
        Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.getter();
        swift_endAccess();
        uint64_t v348 = String.init<A>(describing:)();
        v524 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v348, v349, &v520);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v344, v345, "Adding user spans to request. Generated client conversation context info: %s", v346, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v347, -1, -1);
        MEMORY[0x1CB77E470](v346, -1, -1);
      }

      uint64_t v350 = v489;
      swift_beginAccess();
      uint64_t v351 = v500;
      v352 = v510;
      v353 = v496;
      v496(v500, v332, v510);
      v354 = v505;
      (*(void (**)(char *, uint64_t (*)()))(*(void *)v350 + 344))(v351, v517);
      uint64_t v355 = (void (*)(char *, uint64_t))v498;
      v498((uint64_t)v351, v352);
      v506(v332, v354, v352);
      v353(v351, v332, v352);
      (*(void (**)(char *, uint64_t (*)()))(*(void *)v489 + 352))(v351, v517);
      v355(v351, v352);
      os_log_type_t v298 = v489;
      _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v467, type metadata accessor for PerformanceUtil.Ticket);
      (*(void (**)(char *, uint64_t))(v491 + 8))(v497, v492);
      uint64_t v280 = v332;
      v506(v332, v354, v352);
      v297 = v512;
    }
  }
  uint64_t v356 = v280;
  swift_beginAccess();
  uint64_t v357 = v500;
  v358 = v510;
  v496(v500, v280, v510);
  uint64_t v359 = v505;
  uint64_t v360 = (uint64_t)v517;
  (*(void (**)(char *, uint64_t (*)()))(*(void *)v298 + 360))(v357, v517);
  v498((uint64_t)v357, v358);
  uint64_t v361 = (uint64_t (*)(uint64_t (*)(), char *, uint64_t))v506;
  v362 = ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))v506)(v356, v359, v358);
  v513 = (int *)&v460;
  uint64_t v363 = static PerformanceUtil.shared;
  uint64_t v364 = MEMORY[0x1F4188790](v362);
  v456 = v518;
  v457 = v519;
  v458 = (void *)v360;
  uint64_t v365 = (void *)v360;
  MEMORY[0x1F4188790](v364);
  uint64_t v366 = (char *)&v460 - ((v297 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  v367 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v363 + 200);
  v458 = v455;
  v459 = v358;
  LOBYTE(v456) = 2;
  v368 = v479;
  unint64_t v369 = v490;
  v367(0xD000000000000043, 0x80000001C91A3020, 0, v366, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 765, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #13 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v497 = v369;
  v516(v366, v515);
  uint64_t v370 = v361(v519, v368, v358);
  v493 = &v460;
  uint64_t v371 = static PerformanceUtil.shared;
  char v372 = MEMORY[0x1F4188790](v370);
  v456 = v518;
  v457 = v519;
  v458 = v365;
  v459 = v483;
  MEMORY[0x1F4188790](v372);
  v373 = (v297 + 15) & 0xFFFFFFFFFFFFFFF0;
  v494 = (void *)v373;
  Date.init()();
  v374 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v371 + 200);
  v458 = v455;
  v459 = v358;
  LOBYTE(v456) = 2;
  uint64_t v375 = v480;
  char v376 = (int *)v497;
  v374(0xD00000000000002DLL, 0x80000001C91A3070, 0, (char *)&v460 - v373, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 772, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #14 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v513 = v376;
  v377 = v515;
  v378 = (void (*)(char *, uint64_t))v516;
  v516((char *)&v460 - v373, v515);
  v379 = ((uint64_t (*)(uint64_t (*)(), char *, uint64_t))v506)(v519, v375, v358);
  v497 = (char *)&v460;
  v380 = static PerformanceUtil.shared;
  v381 = MEMORY[0x1F4188790](v379);
  v458 = v518;
  v459 = (uint64_t)v519;
  MEMORY[0x1F4188790](v381);
  Date.init()();
  v382 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v380 + 200);
  v458 = &v456;
  v459 = v358;
  LOBYTE(v456) = 2;
  v383 = v505;
  v384 = v513;
  v382(0xD00000000000002BLL, 0x80000001C91A30A0, 0, (char *)&v460 - v373, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 779, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #15 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v378((char *)&v460 - v373, v377);
  v385 = ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))v506)(v519, v383, v358);
  v386 = static PerformanceUtil.shared;
  v387 = MEMORY[0x1F4188790](v385);
  v456 = v518;
  v457 = v519;
  v458 = v517;
  MEMORY[0x1F4188790](v387);
  v388 = (char *)((char *)&v460 - (char *)v494);
  v389 = v518;
  Date.init()();
  v390 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v386 + 200);
  v458 = v455;
  v459 = MEMORY[0x1E4FBC848] + 8;
  v391 = v519;
  LOBYTE(v456) = 2;
  v390(0xD000000000000019, 0x80000001C91A30D0, 0, v388, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 784, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #16 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v516(v388, v515);
  v392 = v358;
  v393 = (uint64_t)v484;
  Date.init()();
  v394 = (int *)v508;
  v395 = v393 + *(int *)(v508 + 20);
  *(void *)v395 = "SiriInformationSearch/PegasusProxy.swift";
  *(void *)(v395 + 8) = 40;
  *(unsigned char *)(v395 + 16) = 2;
  *(void *)(v393 + v394[6]) = 789;
  v396 = v393 + v394[7];
  *(void *)v396 = "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)";
  *(void *)(v396 + 8) = 72;
  *(unsigned char *)(v396 + 16) = 2;
  v397 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001BLL);
  v398 = (uint64_t *)(v393 + v394[8]);
  *v398 = v397;
  v398[1] = v399;
  v400 = v482;
  v496(v482, v391, v392);
  v401 = v481;
  (*(void (**)(char *, uint64_t (*)()))(*v389 + 648))(v400, v517);
  if (v384)
  {
    v498((uint64_t)v400, v392);
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v393, type metadata accessor for PerformanceUtil.Ticket);
    v402 = v384;
    v403 = v384;
    v404 = Logger.logObject.getter();
    v405 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v404, v405))
    {
      v406 = (uint8_t *)swift_slowAlloc();
      v407 = swift_slowAlloc();
      v521 = v407;
      *(_DWORD *)v406 = 136315138;
      v525 = (uint64_t)v384;
      v408 = v384;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v409 = String.init<A>(describing:)();
      v525 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v409, v410, &v521);
      v391 = v519;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v404, v405, "Unable to add resolved references for SmartPlay request: %s", v406, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v407, -1, -1);
      MEMORY[0x1CB77E470](v406, -1, -1);
    }
    else
    {
    }
    v411 = specialized static PegasusOverrideUtil.requestFeatureFlag.getter();
    if (v412) {
      goto LABEL_94;
    }
LABEL_89:
    v413 = Logger.logObject.getter();
    v414 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v413, v414))
    {
      v415 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v415 = 0;
      _os_log_impl(&dword_1C8F83000, v413, v414, "Clearing Pegasus request feature flag (production)", v415, 2u);
      MEMORY[0x1CB77E470](v415, -1, -1);
    }

    swift_beginAccess();
    goto LABEL_98;
  }
  v498((uint64_t)v400, v392);
  v506(v391, v401, v392);
  (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v393, 0);
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v393, type metadata accessor for PerformanceUtil.Ticket);
  v411 = specialized static PegasusOverrideUtil.requestFeatureFlag.getter();
  if (!v412) {
    goto LABEL_89;
  }
LABEL_94:
  v416 = v411;
  v417 = v412;
  swift_bridgeObjectRetain_n();
  v418 = Logger.logObject.getter();
  v419 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v418, v419))
  {
    v420 = (uint8_t *)swift_slowAlloc();
    v421 = swift_slowAlloc();
    v517 = (uint64_t (*)())v416;
    v422 = v421;
    v521 = v421;
    *(_DWORD *)v420 = 136315138;
    swift_bridgeObjectRetain();
    v525 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v517, v417, &v521);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v418, v419, "Using Pegasus request feature flag “%s”", v420, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v422, -1, -1);
    MEMORY[0x1CB77E470](v420, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
LABEL_98:
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.featureFlag.setter();
  v423 = swift_endAccess();
  v424 = (uint64_t)v391;
  v509 = (char *)&v460;
  v425 = static PerformanceUtil.shared;
  v426 = MEMORY[0x1F4188790](v423);
  v427 = v518;
  v458 = v518;
  v459 = v424;
  v428 = v512;
  MEMORY[0x1F4188790](v426);
  v429 = (v428 + 15) & 0xFFFFFFFFFFFFFFF0;
  Date.init()();
  v430 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v425 + 200);
  v517 = (uint64_t (*)())(MEMORY[0x1E4FBC848] + 8);
  v458 = &v456;
  v459 = MEMORY[0x1E4FBC848] + 8;
  LOBYTE(v456) = 2;
  v430(0xD000000000000020, 0x80000001C91A3110, 0, (char *)&v460 - v429, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 815, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #17 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v513 = 0;
  v431 = (void (*)(char *, uint64_t))v516;
  v516((char *)&v460 - v429, v515);
  swift_beginAccess();
  (*(void (**)(uint64_t))(*v427 + 80))(v424);
  v432 = swift_endAccess();
  v509 = (char *)&v460;
  v433 = static PerformanceUtil.shared;
  v434 = MEMORY[0x1F4188790](v432);
  v458 = v427;
  v459 = v424;
  MEMORY[0x1F4188790](v434);
  Date.init()();
  v435 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v433 + 200);
  v458 = &v456;
  v459 = (uint64_t)v517;
  LOBYTE(v456) = 2;
  v435(0xD000000000000018, 0x80000001C91A3140, 0, (char *)&v460 - v429, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 823, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, v456, partial apply for closure #18 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v431((char *)&v460 - v429, v515);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*v427 + 96))(v424, v489);
  swift_endAccess();
  v436 = (uint64_t)v500;
  v437 = v510;
  v438 = (void (*)(uint64_t, uint64_t, uint64_t))v496;
  v496(v500, (uint64_t (*)())v424, v510);
  v439 = v505;
  PegasusProxy.addCurareFlags(to:)(v436, v505);

  swift_bridgeObjectRelease();
  outlined consume of Data?(v468, v502);
  v440 = v498;
  v498(v436, v437);
  ((void (*)(uint64_t, uint64_t))v501[1])(v472, v487);
  _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v507, type metadata accessor for PerformanceUtil.Ticket);
  v506(v424, v439, v437);
  v438(v485, v424, v437);
  v440(v424, v437);
  v441 = (uint64_t)v504;
  OSSignposter.end(token:message:)((uint64_t)v504, 0, 0xE000000000000000);
  return _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v441, (uint64_t (*)(void))type metadata accessor for SignpostToken);
}

uint64_t partial apply for closure #1 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  return closure #1 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(v0[2], v0[3], v0[4]);
}

uint64_t closure #1 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a3;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestType();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(void *)a1 + 328))(v7);
  uint64_t v11 = v10;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = (uint64_t *)(a2 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 20));
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4F88E00], v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v11 + 40))(v15, v14, v18, v9, ObjectType, v11);
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t PegasusProxy.client.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for PegasusProxyClient.constructSearchRequest(query:context:requestType:) in conformance PegasusProxyForAssistant()
{
  return MEMORY[0x1F413F0C8]();
}

uint64_t partial apply for closure #2 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 576))();
  *a1 = result & 1;
  return result;
}

Swift::Bool __swiftcall PegasusProxy.isUserDataShareOptIn()()
{
  return objc_msgSend(*(id *)(*(void *)(v0 + 184) + 104), sel_siriDataSharingOptInStatus) == (id)1;
}

Swift::Bool __swiftcall PommesPhoneCallStateManager.cachedIsUserOnPhoneCall(requestId:conservative:)(Swift::String_optional requestId, Swift::Bool conservative)
{
  switch(*(unsigned char *)(v2 + 40))
  {
    case 1:
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v5, v10))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl(&dword_1C8F83000, v5, v10, "PommesPhoneCallStateManager: not in phone call", v7, 2u);
        conservative = 0;
        goto LABEL_29;
      }
      conservative = 0;
      break;
    case 2:
      if (requestId.value._object
        && (*(void *)(v2 + 24) == requestId.value._countAndFlagsBits
          ? (BOOL v11 = *(void **)(v2 + 32) == requestId.value._object)
          : (BOOL v11 = 0),
            v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v5, v13))
        {
          uint64_t v7 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_1C8F83000, v5, v13, "PommesPhoneCallStateManager: User is on phone call", v7, 2u);
          conservative = 1;
          goto LABEL_29;
        }
        conservative = 1;
      }
      else
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v15 = type metadata accessor for Logger();
        __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
        uint64_t v5 = Logger.logObject.getter();
        os_log_type_t v6 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v5, v6))
        {
          uint64_t v7 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v7 = 0;
          uint64_t v8 = "PommesPhoneCallStateManager: requestId is not the same as cached requestId value, cannot determine call state";
          goto LABEL_28;
        }
      }
      break;
    case 3:
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        uint64_t v8 = "PommesPhoneCallStateManager: unknown phone call state";
        goto LABEL_28;
      }
      break;
    default:
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        uint64_t v8 = "PommesPhoneCallStateManager: pending phone call state";
LABEL_28:
        _os_log_impl(&dword_1C8F83000, v5, v6, v8, v7, 2u);
LABEL_29:
        MEMORY[0x1CB77E470](v7, -1, -1);
      }
      break;
  }

  return conservative;
}

uint64_t DataProviderManager.resolveProfileSlice(to:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v70 = (uint64_t)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v10 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v61 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v57 - v17;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  uint64_t v60 = v14 + 16;
  uint64_t v59 = v19;
  v19((uint64_t)&v57 - v17, a1, v13);
  uint64_t v20 = type metadata accessor for PommesSearchRequest(0);
  if (!*(void *)(*(void *)(a2 + *(int *)(v20 + 92)) + 16)) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a3, v18, v13);
  }
  uint64_t v21 = v20;
  uint64_t v58 = a3;
  uint64_t v62 = v14;
  uint64_t v63 = v18;
  uint64_t v65 = v13;
  Date.init()();
  uint64_t v22 = &v12[v10[5]];
  *(void *)uint64_t v22 = "SiriInformationSearch/DataProviderManager.swift";
  *((void *)v22 + 1) = 47;
  v22[16] = 2;
  *(void *)&v12[v10[6]] = 151;
  uint64_t v23 = &v12[v10[7]];
  *(void *)uint64_t v23 = "resolveProfileSlice(to:with:)";
  *((void *)v23 + 1) = 29;
  v23[16] = 2;
  uint64_t v24 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002BLL);
  uint64_t v25 = v10[8];
  uint64_t v64 = v12;
  uint64_t v26 = (uint64_t *)&v12[v25];
  *uint64_t v26 = v24;
  v26[1] = v27;
  uint64_t v69 = v4[8];
  uint64_t v28 = a2;
  uint64_t v29 = v70;
  outlined init with copy of PommesSearchRequest(v28, v70);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v29, 0, 1, v21);
  uint64_t v67 = v4[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  uint64_t v30 = v71;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v71 = v30;
  outlined init with take of PommesSearchReason?((uint64_t)v72, (uint64_t)v73, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  uint64_t v31 = v4[15];
  uint64_t v32 = type metadata accessor for DispatchTime();
  uint64_t v68 = &v57;
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v36 = (char *)&v57 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = &v57;
  MEMORY[0x1F4188790](v34);
  uint64_t v38 = (char *)&v57 - v37;
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  uint64_t v39 = type metadata accessor for DispatchTimeInterval();
  uint64_t v40 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v42 = (uint64_t *)((char *)&v57 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v42 = 1;
  (*(void (**)(void *, void, uint64_t))(v40 + 104))(v42, *MEMORY[0x1E4FBCAC0], v39);
  MEMORY[0x1CB77C970](v38, v42);
  (*(void (**)(void *, uint64_t))(v40 + 8))(v42, v39);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v33 + 8);
  v43(v38, v32);
  uint64_t v44 = v70;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t, char *))(*(void *)v69 + 240))(&v74, v70, v73, v31, v67, v36);
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v73);
  v43(v36, v32);
  outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for PommesSearchRequest?);
  if (v74)
  {
    if (*(void *)(v74 + 16))
    {
      uint64_t v45 = v61;
      uint64_t v46 = (uint64_t)v63;
      DataProviderManager.appendProfileSlices(_:to:)(v74, (uint64_t)v63, v61);
      swift_bridgeObjectRelease();
      uint64_t v47 = v62;
      uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
      uint64_t v49 = v65;
      v48(v46, v65);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v46, v45, v49);
      v59(v58, v46, v49);
      uint64_t v50 = (uint64_t)v64;
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v50, 0);
      outlined destroy of PerformanceUtil.Ticket(v50);
      return ((uint64_t (*)(uint64_t, uint64_t))v48)(v46, v49);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v52 = v65;
  uint64_t v53 = (uint64_t)v64;
  uint64_t v54 = (uint64_t)v63;
  uint64_t v55 = v62;
  lazy protocol witness table accessor for type PegasusError and conformance PegasusError();
  swift_allocError();
  unsigned char *v56 = 5;
  swift_willThrow();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v53, 0);
  outlined destroy of PerformanceUtil.Ticket(v53);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v54, v52);
}

uint64_t partial apply for closure #3 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #3 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(*(void *)(v1 + 16), a1);
}

uint64_t closure #3 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v4 - 8);
  os_log_type_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PommesSearchRequest(0);
  outlined init with copy of MediaUserStateCenter?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for PommesContext?);
  uint64_t v8 = type metadata accessor for PommesContext();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) == 1)
  {
    uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for PommesContext?);
    uint64_t v11 = 0;
    unint64_t v12 = 0xF000000000000000;
  }
  else
  {
    uint64_t v11 = PommesContext.exportPegasusConversationContext()();
    unint64_t v12 = v13;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  *a2 = v11;
  a2[1] = v12;
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t partial apply for closure #4 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(char *a1@<X8>)
{
  return closure #4 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(*(void *)(v1 + 24), a1);
}

uint64_t closure #4 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 32));
  uint64_t v5 = *v3;
  unint64_t v4 = v3[1];
  swift_retain();
  specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:)(24, v5, v4, a2);
  return swift_release();
}

uint64_t PommesSearchRequest.resultCandidateId.getter()
{
  uint64_t v1 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (uint64_t *)((char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s21SiriInformationSearch06PommesC7RequestV10ParseStateOWOcTm_0(v0, (uint64_t)v3, type metadata accessor for PommesSearchRequest.ParseState);
  if (swift_getEnumCaseMultiPayload())
  {
    _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0((uint64_t)v3, type metadata accessor for PommesSearchRequest.ParseState);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1C8F83000, v5, v6, "Caller needs migrated to use TRP IDs", v7, 2u);
      MEMORY[0x1CB77E470](v7, -1, -1);
    }

    return 0;
  }
  else
  {
    uint64_t v8 = *v3;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    _s21SiriInformationSearch18NLXResultCandidateVWOhTm_0((uint64_t)v3 + *(int *)(v9 + 48), (uint64_t (*)(void))type metadata accessor for NLXResultCandidate);
  }
  return v8;
}

uint64_t PegasusProxy.addInteractionType(to:pommesSearchRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = a1;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext.SiriInteractionType();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  os_log_type_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v47 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  unint64_t v12 = (char *)&v40 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v15 = type metadata accessor for InteractionType();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v46 = (char *)&v40 - v20;
  uint64_t v21 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v22 = *(int *)(v21 + 52);
  uint64_t v44 = a2;
  uint64_t v23 = *(void *)(a2 + v22);
  if (v23)
  {
    uint64_t v24 = v21;
    uint64_t v41 = v4;
    uint64_t v42 = v3;
    uint64_t v43 = v6;
    uint64_t v25 = *(void (**)(uint64_t))(*(void *)v23 + 224);
    uint64_t v26 = swift_retain();
    v25(v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for InteractionType?);
      uint64_t v27 = v44 + *(int *)(v24 + 56);
      uint64_t v28 = v45;
      uint64_t v29 = v45 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_previousInteractionType;
      swift_beginAccess();
      outlined init with copy of MediaUserStateCenter?(v29, (uint64_t)v12, &demangling cache variable for type metadata for InteractionType?);
      uint64_t v30 = v46;
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 232))(v27, v12);
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for InteractionType?);
    }
    else
    {
      uint64_t v30 = v46;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v46, v14, v15);
      uint64_t v28 = v45;
    }
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v33(v12, v30, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
    uint64_t v34 = v47;
    outlined init with take of PommesSearchReason?((uint64_t)v12, v47, &demangling cache variable for type metadata for InteractionType?);
    uint64_t v35 = v28 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_previousInteractionType;
    swift_beginAccess();
    outlined assign with take of InteractionType?(v34, v35);
    swift_endAccess();
    v33(v19, v30, v15);
    LODWORD(v35) = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v19, v15);
    int v36 = *MEMORY[0x1E4FA5240];
    uint64_t v37 = *(void (**)(char *, uint64_t))(v16 + 8);
    v37(v19, v15);
    if (v35 == v36) {
      uint64_t v38 = (unsigned int *)MEMORY[0x1E4F886F8];
    }
    else {
      uint64_t v38 = (unsigned int *)MEMORY[0x1E4F88700];
    }
    (*(void (**)(char *, void, uint64_t))(v41 + 104))(v43, *v38, v42);
    uint64_t v39 = (void (*)(unsigned char *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.siriInteractionType.setter();
    v39(v49, 0);
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v37)(v30, v15);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4F88700], v3);
    uint64_t v31 = (uint64_t (*)(unsigned char *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.siriInteractionType.setter();
    return v31(v49, 0);
  }
}

uint64_t PommesRequestContext.responseModeInteractionType()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ResponseMode();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  unint64_t v12 = (char *)v38 - v11;
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)v38 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v38 - v16;
  swift_bridgeObjectRetain();
  ResponseMode.init(aceValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for ResponseMode?);
LABEL_3:
    uint64_t v18 = type metadata accessor for InteractionType();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a1, 1, 1, v18);
  }
  uint64_t v40 = a1;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v17, v4, v5);
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v39(v15, v17, v5);
  static ResponseMode.voiceOnly.getter();
  lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, MEMORY[0x1E4FA51C0]);
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v12, v5);
  if ((v20 & 1) != 0
    || (static ResponseMode.voiceForward.getter(),
        char v22 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v21(v12, v5),
        (v22 & 1) != 0))
  {
    v21(v15, v5);
    v21(v17, v5);
    uint64_t v23 = (unsigned int *)MEMORY[0x1E4FA5240];
  }
  else
  {
    static ResponseMode.displayForward.getter();
    char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    v21(v12, v5);
    if (v24)
    {
      v21(v15, v5);
    }
    else
    {
      static ResponseMode.displayOnly.getter();
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      v21(v12, v5);
      v21(v15, v5);
      if ((v25 & 1) == 0)
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v30 = type metadata accessor for Logger();
        __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
        v39(v9, v17, v5);
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v33 = (uint8_t *)swift_slowAlloc();
          uint64_t v39 = (void (*)(char *, char *, uint64_t))swift_slowAlloc();
          uint64_t v42 = v39;
          *(_DWORD *)uint64_t v33 = 136315138;
          v38[1] = v33 + 4;
          uint64_t v34 = v33;
          lazy protocol witness table accessor for type ResponseMode and conformance ResponseMode(&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, MEMORY[0x1E4FA51C0]);
          uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v21(v9, v5);
          _os_log_impl(&dword_1C8F83000, v31, v32, "Unknown (future?) response mode value: %s", v33, 0xCu);
          uint64_t v37 = v39;
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v37, -1, -1);
          MEMORY[0x1CB77E470](v34, -1, -1);
        }
        else
        {

          v21(v9, v5);
        }
        v21(v17, v5);
        a1 = v40;
        goto LABEL_3;
      }
    }
    v21(v17, v5);
    uint64_t v23 = (unsigned int *)MEMORY[0x1E4FA5248];
  }
  uint64_t v26 = *v23;
  uint64_t v27 = type metadata accessor for InteractionType();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = v40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 104))(v40, v26, v27);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v29, 0, 1, v27);
}

uint64_t partial apply for closure #6 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  return (*(uint64_t (**)(void, void))(**(void **)(v0 + 16) + 600))(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t PegasusProxy.addMultiUserContext(to:pommesSearchRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = &v12[-v8];
  uint64_t result = type metadata accessor for PommesSearchRequest(0);
  if (*(unsigned char *)(a2 + *(int *)(result + 60)) == 1)
  {
    static PegasusProxy.multiUserContext(for:)(a2);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 16))(v7, v9, v3);
    uint64_t v11 = (void (*)(unsigned char *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.multiUserContext.setter();
    v11(v12, 0);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v9, v3);
  }
  return result;
}

uint64_t partial apply for closure #7 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  return (*(uint64_t (**)(void, void))(**(void **)(v0 + 16) + 608))(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t PegasusProxy.addRewrittenUtterances(to:delegatedUDA:)(uint64_t a1)
{
  uint64_t v32 = a1;
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_RewriteMessage.RewriteType();
  uint64_t v29 = *(void *)(v1 - 8);
  uint64_t v30 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewriteType();
  MEMORY[0x1F4188790](v4 - 8);
  v26[1] = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_RewriteMessage();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v26 - v14;
  Siri_Nlu_External_DelegatedUserDialogAct.rewrite.getter();
  uint64_t v16 = Siri_Nlu_External_RewriteMessage.rewrittenUtterance.getter();
  unint64_t v18 = v17;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v15, v9);
  swift_bridgeObjectRelease();
  uint64_t v20 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v20 = v16 & 0xFFFFFFFFFFFFLL;
  }
  if (v20)
  {
    Apple_Parsec_Siri_V2alpha_RewrittenUtterance.init()();
    Siri_Nlu_External_DelegatedUserDialogAct.rewrite.getter();
    uint64_t v21 = Siri_Nlu_External_RewriteMessage.rewrittenUtterance.getter();
    uint64_t v23 = v22;
    v19(v13, v9);
    MEMORY[0x1CB778C20](v21, v23);
    Siri_Nlu_External_DelegatedUserDialogAct.rewrite.getter();
    Siri_Nlu_External_RewriteMessage.rewriteType.getter();
    v19(v13, v9);
    (*(void (**)(char *))(*(void *)v31 + 632))(v3);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v3, v30);
    Apple_Parsec_Siri_V2alpha_RewrittenUtterance.rewriteType.setter();
    uint64_t VG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC22addRewrittenUtterances2to12delegatedUDASay0D3API013f1_g4_a9_i4_dC5K67VGAJ_0A8NLUTypes0A36_Nlu_External_DelegatedUserDialogActVtFA2IXEfU_AF0f1_g1_h1_i1_R9UtteranceVTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC22addRewrittenUtterances2to12delegatedUDASay0D3API013f1_g4_a9_i4_dC5K67VGAJ_0A8NLUTypes0A36_Nlu_External_DelegatedUserDialogActVtFA2IXEfU_AF0f1_g1_h1_i1_R9UtteranceVTf1cn_n(v32, (uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
  }
  else
  {
    uint64_t VG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC22addRewrittenUtterances2to12delegatedUDASay0D3API013f1_g4_a9_i4_dC5K67VGAJ_0A8NLUTypes0A36_Nlu_External_DelegatedUserDialogActVtFA2IXEfU_AF0f1_g1_h1_i1_R9UtteranceVTf1cn_n = v32;
    swift_bridgeObjectRetain();
  }
  return VG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC22addRewrittenUtterances2to12delegatedUDASay0D3API013f1_g4_a9_i4_dC5K67VGAJ_0A8NLUTypes0A36_Nlu_External_DelegatedUserDialogActVtFA2IXEfU_AF0f1_g1_h1_i1_R9UtteranceVTf1cn_n;
}

uint64_t specialized UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v72 = type metadata accessor for RRCandidate();
  uint64_t v71 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72);
  uint64_t v70 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for RRResult();
  uint64_t v76 = *(void *)(v74 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v74);
  uint64_t v13 = (uint64_t *)((char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v73 = (void **)((char *)&v70 - v15);
  MEMORY[0x1F4188790](v14);
  uint64_t v75 = (char *)&v70 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (void **)((char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)&v70 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v77 = (uint64_t)&v70 - v24;
  v80[3] = a4;
  v80[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v80);
  uint64_t v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if (a2)
  {
    if (one-time initialization token for shared != -1) {
      uint64_t v26 = swift_once();
    }
    uint64_t v27 = static PerformanceUtil.shared;
    MEMORY[0x1F4188790](v26);
    uint64_t v68 = v80;
    uint64_t v69 = a3;
    uint64_t v28 = type metadata accessor for Date();
    uint64_t v29 = *(void *)(v28 - 8);
    MEMORY[0x1F4188790](v28);
    uint64_t v31 = (char *)&v70 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    Date.init()();
    uint64_t v32 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)(), int *, uint64_t))(*(void *)v27 + 200);
    LOBYTE(v67) = 2;
    v32(0xD000000000000027, 0x80000001C919D140, 0, v31, "SiriInformationSearch/UsoEntity+SRR.swift", 41, 2, 20, "resolveFromSRR(rrClient:useSRREntityAPI:)", 41, v67, partial apply for closure #1 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:), &v67, v17);
  }
  else
  {
    if (one-time initialization token for shared != -1) {
      uint64_t v26 = swift_once();
    }
    uint64_t v33 = static PerformanceUtil.shared;
    MEMORY[0x1F4188790](v26);
    uint64_t v68 = v80;
    uint64_t v69 = a3;
    uint64_t v28 = type metadata accessor for Date();
    uint64_t v29 = *(void *)(v28 - 8);
    MEMORY[0x1F4188790](v28);
    uint64_t v31 = (char *)&v70 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
    Date.init()();
    uint64_t v35 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)(), int *, uint64_t))(*(void *)v33 + 200);
    LOBYTE(v67) = 2;
    v35(0xD00000000000001CLL, 0x80000001C919D0C0, 0, v31, "SiriInformationSearch/UsoEntity+SRR.swift", 41, 2, 24, "resolveFromSRR(rrClient:useSRREntityAPI:)", 41, v67, partial apply for closure #2 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:), &v67, v17);
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  uint64_t v36 = v77;
  outlined init with take of Result<RRResult, Error>((uint64_t)v23, v77);
  outlined init with copy of Result<RRResult, Error>(v36, (uint64_t)v20);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v37 = *v20;
    uint64_t v79 = (uint64_t)*v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.pommes);
    id v39 = v37;
    id v40 = v37;
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v79 = v44;
      *(_DWORD *)uint64_t v43 = 136315138;
      swift_getErrorValue();
      uint64_t v45 = Error.localizedDescription.getter();
      uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v41, v42, "Could not resolve from SRR: %s", v43, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v44, -1, -1);
      MEMORY[0x1CB77E470](v43, -1, -1);
    }
    else
    {
    }
    outlined destroy of Result<RRResult, Error>(v36);
    uint64_t v57 = 0;
    goto LABEL_22;
  }
  uint64_t v47 = v76;
  uint64_t v48 = *(void (**)(char *, void **, uint64_t))(v76 + 32);
  uint64_t v49 = v73;
  uint64_t v50 = v20;
  uint64_t v51 = v74;
  v48((char *)v73, v50, v74);
  uint64_t v52 = v75;
  v48(v75, v49, v51);
  (*(void (**)(uint64_t *, char *, uint64_t))(v47 + 16))(v13, v52, v51);
  int v53 = (*(uint64_t (**)(uint64_t *, uint64_t))(v47 + 88))(v13, v51);
  if (v53 == *MEMORY[0x1E4FA3E30])
  {
    (*(void (**)(uint64_t *, uint64_t))(v47 + 96))(v13, v51);
    uint64_t v54 = v71;
    uint64_t v55 = v70;
    uint64_t v56 = v72;
    (*(void (**)(char *, uint64_t *, uint64_t))(v71 + 32))(v70, v13, v72);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>);
    type metadata accessor for RREntity();
    uint64_t v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = xmmword_1C91947A0;
    RRCandidate.entity.getter();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
LABEL_21:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v52, v51);
    outlined destroy of Result<RRResult, Error>(v36);
    goto LABEL_22;
  }
  int v58 = v53;
  if (v53 == *MEMORY[0x1E4FA3E40] || v53 == *MEMORY[0x1E4FA3E38])
  {
    (*(void (**)(uint64_t *, uint64_t))(v47 + 96))(v13, v51);
    uint64_t v57 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12LazySequenceVySay32SiriReferenceResolutionDataModel11RRCandidateVGG_AH8RREntityVs5NeverOTg504_s12f90Ontology9UsoEntityC0A17InformationSearchE14resolveFromSRR8rrClient15useSRREntityAPISay0A28ghi6Model8l50VGSg0aoP027RRReferenceResolverProtocol_p_SbtFAjH11K53Vcfu0_32a67697f07dd709dabbe90d955a98a5bfApJTf3nnnpk_nTf1cn_nTm(*v13);
LABEL_20:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  if (v53 == *MEMORY[0x1E4FA3E48])
  {
    (*(void (**)(uint64_t *, uint64_t))(v47 + 96))(v13, v51);
    uint64_t v60 = *v13;
    uint64_t v61 = *(void *)(*v13 + 16);
    if (v61)
    {
      swift_bridgeObjectRetain();
      uint64_t v62 = 0;
      uint64_t v63 = MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v64 = *(void *)(v60 + 8 * v62++ + 32);
        uint64_t v79 = v63;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v64);
        swift_bridgeObjectRelease();
        uint64_t v63 = v79;
      }
      while (v61 != v62);
      swift_bridgeObjectRelease();
      uint64_t v52 = v75;
      uint64_t v47 = v76;
    }
    else
    {
      uint64_t v63 = MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    uint64_t v57 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12LazySequenceVySay32SiriReferenceResolutionDataModel11RRCandidateVGG_AH8RREntityVs5NeverOTg504_s12f90Ontology9UsoEntityC0A17InformationSearchE14resolveFromSRR8rrClient15useSRREntityAPISay0A28ghi6Model8l50VGSg0aoP027RRReferenceResolverProtocol_p_SbtFAjH11K53Vcfu0_32a67697f07dd709dabbe90d955a98a5bfApJTf3nnnpk_nTf1cn_nTm(v63);
    goto LABEL_20;
  }
  int v65 = *MEMORY[0x1E4FA3E50];
  uint64_t v66 = *(void (**)(char *, uint64_t))(v47 + 8);
  v66(v52, v51);
  outlined destroy of Result<RRResult, Error>(v36);
  if (v58 != v65) {
    v66((char *)v13, v51);
  }
  uint64_t v57 = 0;
LABEL_22:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
  return v57;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t partial apply for closure #1 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)()
{
  return closure #1 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(*(void **)(v0 + 16), *(void *)(v0 + 24), MEMORY[0x1E4FA3DA0]);
}

uint64_t closure #1 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(void *a1, uint64_t a2, void (*a3)(void))
{
  return swift_release();
}

uint64_t outlined init with take of Result<RRResult, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Result<RRResult, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<RRResult, Error>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for OnScreenContextType.GeneratedClientEntity()
{
  uint64_t result = type metadata singleton initialization cache for OnScreenContextType.GeneratedClientEntity;
  if (!type metadata singleton initialization cache for OnScreenContextType.GeneratedClientEntity) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t PegasusProxy.addUserVocabSpans(from:to:onDeviceLabels:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  uint64_t v53 = a2;
  uint64_t v51 = a1;
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  uint64_t v59 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v75 = (char *)&v47 - v9;
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_Span();
  uint64_t v68 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v60 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v76 = (char *)&v47 - v13;
  uint64_t v14 = type metadata accessor for SignpostToken();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    goto LABEL_32;
  }
  while (1)
  {
    uint64_t v17 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v17, (uint64_t)static Signposter.pommes);
    uint64_t v50 = v16;
    OSSignposter.begin(name:context:)("proxy.userVocabSpans", 20, 2u, 0, (uint64_t)v16);
    uint64_t v18 = Siri_Nlu_External_Span.matcherNames.getter();
    uint64_t v19 = v18;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    uint64_t v78 = MEMORY[0x1E4FBC860];
    uint64_t v67 = *(void *)(v18 + 16);
    if (!v67) {
      break;
    }
    unint64_t v48 = v4;
    unint64_t v21 = 0;
    uint64_t v64 = v68 + 16;
    unsigned int v63 = *MEMORY[0x1E4FA2710];
    uint64_t v62 = (void (**)(char *, void, uint64_t))(v59 + 104);
    uint64_t v74 = v59 + 16;
    int v58 = (char **)(v68 + 32);
    uint64_t v55 = (void (**)(char *, uint64_t))(v68 + 8);
    uint64_t v77 = (char **)(v59 + 8);
    uint64_t v54 = (v59 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v22 = v75;
    uint64_t v72 = v5;
    uint64_t v73 = v8;
    uint64_t v61 = v10;
    uint64_t v56 = v18;
    while (1)
    {
      if (v21 >= *(void *)(v19 + 16))
      {
        __break(1u);
        goto LABEL_31;
      }
      unint64_t v23 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
      unint64_t v4 = *(void *)(v68 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v68 + 16))(v76, v19 + v23 + v4 * v21, v10);
      uint64_t v24 = Siri_Nlu_External_Span.matcherNames.getter();
      (*v62)(v22, v63, v5);
      uint64_t v10 = *(void *)(v24 + 16);
      if (v10) {
        break;
      }
      uint64_t v16 = *v77;
      uint64_t v10 = v61;
LABEL_5:
      ((void (*)(char *, uint64_t))v16)(v22, v5);
      swift_bridgeObjectRelease();
      (*v55)(v76, v10);
LABEL_6:
      if (++v21 == v67)
      {
        uint64_t v20 = v78;
        unint64_t v4 = v48;
        goto LABEL_27;
      }
    }
    unint64_t v65 = v4;
    unint64_t v66 = v23;
    uint64_t v25 = v59;
    unint64_t v4 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v69 = v24;
    unint64_t v26 = v24 + v4;
    uint64_t v71 = *(void (**)(char *, unint64_t, uint64_t))(v59 + 16);
    v71(v8, v24 + v4, v5);
    uint64_t v70 = _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, MEMORY[0x1E4FA2738]);
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(char **)(v25 + 8);
    ((void (*)(char *, uint64_t))v16)(v8, v5);
    if (v27) {
      goto LABEL_12;
    }
    if (v10 == 1) {
      goto LABEL_18;
    }
    uint64_t v57 = *(void *)(v59 + 72);
    unint64_t v28 = v26 + v57;
    unint64_t v29 = v4;
    uint64_t v30 = v72;
    unint64_t v4 = (unint64_t)v73;
    v71(v73, v28, v72);
    char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    ((void (*)(unint64_t, uint64_t))v16)(v4, v30);
    if (v31)
    {
LABEL_12:
      uint64_t v22 = v75;
      uint64_t v5 = v72;
      ((void (*)(char *, uint64_t))v16)(v75, v72);
      swift_bridgeObjectRelease();
      uint64_t v16 = *v58;
      uint64_t v10 = v61;
      ((void (*)(char *, char *, uint64_t))*v58)(v60, v76, v61);
      uint64_t v32 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v32 + 16) + 1, 1);
        uint64_t v32 = v78;
      }
      uint64_t v8 = v73;
      unint64_t v4 = *(void *)(v32 + 16);
      unint64_t v33 = *(void *)(v32 + 24);
      if (v4 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v4 + 1, 1);
        uint64_t v32 = v78;
      }
      *(void *)(v32 + 16) = v4 + 1;
      ((void (*)(unint64_t, char *, uint64_t))v16)(v32 + v66 + v4 * v65, v60, v10);
      uint64_t v78 = v32;
      uint64_t v19 = v56;
      goto LABEL_6;
    }
    if (v10 == 2)
    {
LABEL_18:
      uint64_t v5 = v72;
      uint64_t v8 = v73;
      uint64_t v22 = v75;
LABEL_19:
      uint64_t v10 = v61;
      uint64_t v19 = v56;
      goto LABEL_5;
    }
    unint64_t v34 = v69 + v29 + 2 * v57;
    unint64_t v4 = 2;
    uint64_t v5 = v72;
    uint64_t v8 = v73;
    while (1)
    {
      v71(v8, v34, v5);
      uint64_t v35 = v5;
      uint64_t v5 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        break;
      }
      char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
      ((void (*)(char *, uint64_t))v16)(v8, v35);
      if (v36) {
        goto LABEL_12;
      }
      ++v4;
      v34 += v57;
      BOOL v37 = v5 == v10;
      uint64_t v5 = v72;
      uint64_t v8 = v73;
      uint64_t v22 = v75;
      if (v37) {
        goto LABEL_19;
      }
    }
LABEL_31:
    __break(1u);
LABEL_32:
    swift_once();
  }
LABEL_27:
  swift_bridgeObjectRelease();
  uint64_t v38 = v52;
  swift_retain();
  uint64_t v39 = swift_retain();
  uint64_t v40 = specialized _ArrayProtocol.filter(_:)(v39, v38);
  swift_release();
  uint64_t v41 = swift_release();
  MEMORY[0x1F4188790](v41);
  uint64_t v42 = v51;
  *(&v47 - 2) = v38;
  *(&v47 - 1) = v42;
  uint64_t v43 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D18_Nlu_External_SpanVG_10PegasusAPI013Apple_Parsec_D21_Context_ClientEntityVsAE_pTg5((void (*)(uint64_t, uint64_t *))partial apply for closure #3 in PegasusProxy.addUserVocabSpans(from:to:onDeviceLabels:), (uint64_t)(&v47 - 4), v40);
  if (!v4)
  {
    uint64_t v44 = v43;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 88))(v44, v42);
  }
  swift_bridgeObjectRelease();
  uint64_t v45 = (uint64_t)v50;
  $defer #1 () in PegasusProxy.addUserVocabSpans(from:to:onDeviceLabels:)(v53, v20, (uint64_t)v50);
  swift_release();
  return _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0(v45, (uint64_t (*)(void))type metadata accessor for SignpostToken);
}

uint64_t $defer #1 () in PegasusProxy.addUserVocabSpans(from:to:onDeviceLabels:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = type metadata accessor for Siri_Nlu_External_Span();
  uint64_t v6 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (v9)
  {
    uint64_t v25 = a1;
    uint64_t v26 = a3;
    uint64_t v30 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v11 = v6 + 16;
    uint64_t v13 = a2 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v27 = *(void *)(v11 + 56);
    unint64_t v28 = v12;
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v15 = v29;
      uint64_t v16 = v11;
      v28(v8, v13, v29);
      uint64_t v17 = Siri_Nlu_External_Span.label.getter();
      uint64_t v19 = v18;
      (*v14)(v8, v15);
      uint64_t v10 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
        uint64_t v10 = v30;
      }
      unint64_t v21 = *(void *)(v10 + 16);
      unint64_t v20 = *(void *)(v10 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        uint64_t v10 = v30;
      }
      *(void *)(v10 + 16) = v21 + 1;
      uint64_t v22 = v10 + 16 * v21;
      *(void *)(v22 + 32) = v17;
      *(void *)(v22 + 40) = v19;
      v13 += v27;
      --v9;
      uint64_t v11 = v16;
    }
    while (v9);
    a3 = v26;
  }
  specialized Array.append<A>(contentsOf:)(v10);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v23, (uint64_t)static Signposter.pommes);
  return OSSignposter.end(token:message:)(a3, 0, 0xE000000000000000);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType))
                  - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    unint64_t v14 = v4 + v2;
  }
  else {
    unint64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  unint64_t v12 = __OFADD__(v11, v2);
  unint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4FA3DB8]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for PerformanceUtil.Measurement);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4F88EF0]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4F88EC8]);
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(a3(0) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;

  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native()
    && (int64_t)(v6 + v4) <= *(void *)(v5 + 24) >> 1)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10) {
      goto LABEL_5;
    }
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  uint64_t v5 = a2();
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v11 = *(void *)(v5 + 16);
  uint64_t v12 = (*(void *)(v5 + 24) >> 1) - v11;
  uint64_t v13 = *(void *)(a3(0) - 8);
  unint64_t v14 = *(void *)(v13 + 72);
  if (v12 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = v5 + v15 + v14 * v11;
  uint64_t v17 = a1 + v15;
  unint64_t v18 = v14 * v10;
  unint64_t v19 = v16 + v18;
  BOOL v20 = v17 + v18;
  if (v17 < v19 && v16 < v20) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  BOOL v22 = *(void *)(v5 + 16);
  uint64_t v23 = __OFADD__(v22, v10);
  uint64_t v24 = v22 + v10;
  if (!v23)
  {
    *(void *)(v5 + 16) = v24;
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v6 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v6;
  uint64_t v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v7 = 1;
  }
  if (v6 >> 62) {
    goto LABEL_27;
  }
  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    swift_bridgeObjectRetain();
    unint64_t v6 = MEMORY[0x1CB77D520](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *uint64_t v2 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t DataProviderManager.addAppInfoSlice(to:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v21)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>));
  uint64_t v22;
  uint64_t v23;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v4 = v3;
  uint64_t v30 = a3;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  v28[0] = (uint64_t)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v28 - v11;
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t))(v8 + 16);
  uint64_t v29 = v14;
  uint64_t v15 = v13((char *)v28 - v11, a1);
  if (one-time initialization token for shared != -1) {
    uint64_t v15 = swift_once();
  }
  v28[1] = (uint64_t)v28;
  uint64_t v16 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v15);
  uint64_t v26 = v4;
  uint64_t v27 = a2;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  BOOL v20 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v21 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v16 + 200);
  uint64_t v26 = &v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_ProfileSlice]?);
  LOBYTE(v25) = 2;
  v21(&v31, 0xD000000000000043, 0x80000001C91A0040, 0, v20, "SiriInformationSearch/DataProviderManager.swift", 47, 2, 205, "addAppInfoSlice(to:for:)", 24, v25, partial apply for closure #1 in DataProviderManager.addAppInfoSlice(to:for:));
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if (v31)
  {
    BOOL v22 = v28[0];
    DataProviderManager.appendProfileSlices(_:to:)(v31, (uint64_t)v12, v28[0]);
    swift_bridgeObjectRelease();
    uint64_t v23 = v29;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v29);
    uint64_t v12 = (char *)v22;
  }
  else
  {
    uint64_t v23 = v29;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v30, v12, v23);
}

uint64_t partial apply for closure #1 in DataProviderManager.addAppInfoSlice(to:for:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DataProviderManager.addAppInfoSlice(to:for:)(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t closure #1 in DataProviderManager.addAppInfoSlice(to:for:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v28[14] = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a1[5];
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  uint64_t v24 = a1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v25 = v3;
  outlined init with take of PommesSearchReason?((uint64_t)v27, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  uint64_t v10 = a1[15];
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v24 - v16;
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  uint64_t v18 = type metadata accessor for DispatchTimeInterval();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (uint64_t *)((char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v21 = 1;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E4FBCAC0], v18);
  MEMORY[0x1CB77C970](v17, v21);
  (*(void (**)(void *, uint64_t))(v19 + 8))(v21, v18);
  BOOL v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v17, v11);
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, char *))(*(void *)v26 + 240))(v8, v28, v10, v24, v15);
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v28);
  v22(v15, v11);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t AppInfoDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(int *a1)
{
  void (*v14)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(unint64_t *@<X8>));
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  uint64_t v2 = v1;
  uint64_t v35 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
  BOOL v37 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  uint64_t v6 = *(void *)(v34 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v34);
  char v36 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1) {
    uint64_t v7 = swift_once();
  }
  unint64_t v33 = &v31;
  uint64_t v9 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v7);
  uint64_t v29 = a1;
  uint64_t v30 = v2;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v14 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(unint64_t *@<X8>)))(*(void *)v9 + 200);
  uint64_t v29 = &v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_AppInfo]);
  LOBYTE(v28) = 2;
  v14(&v39, 0xD000000000000038, 0x80000001C919EE30, 0, v13, "SiriInformationSearch/AppInfoDataProvider.swift", 47, 2, 44, "fetch(for:assistantData:serviceHelper:dispatchQueue:)", 53, v28, partial apply for closure #1 in AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:));
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v15 = v39;
  uint64_t v16 = *(void *)(v39 + 16);
  if (v16)
  {
    uint64_t v38 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
    uint64_t v17 = (uint64_t)v36;
    uint64_t v18 = *(uint64_t **)(v37 + 16);
    uint64_t v19 = *(unsigned __int8 *)(v37 + 80);
    char v31 = v15;
    uint64_t v20 = v15 + ((v19 + 32) & ~v19);
    uint64_t v32 = *(void *)(v37 + 72);
    unint64_t v33 = v18;
    v37 += 16;
    uint64_t v21 = (void (**)(char *, uint64_t))(v37 - 8);
    do
    {
      BOOL v22 = v35;
      ((void (*)(char *, uint64_t, uint64_t))v33)(v5, v20, v35);
      closure #2 in AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)((uint64_t)v5, v17);
      (*v21)(v5, v22);
      uint64_t v23 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1);
        uint64_t v23 = v38;
      }
      uint64_t v25 = *(void *)(v23 + 16);
      uint64_t v24 = *(void *)(v23 + 24);
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        uint64_t v23 = v38;
      }
      *(void *)(v23 + 16) = v25 + 1;
      uint64_t v26 = v23
          + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
          + *(void *)(v6 + 72) * v25;
      uint64_t v17 = (uint64_t)v36;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v26, v36, v34);
      uint64_t v38 = v23;
      v20 += v32;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v23;
}

uint64_t partial apply for closure #1 in AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(unint64_t *a1@<X8>)
{
  return closure #1 in AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(*(void *)(v1 + 16), a1);
}

uint64_t closure #1 in AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v6, &demangling cache variable for type metadata for PommesSearchRequest?);
  uint64_t v10 = type metadata accessor for PommesSearchRequest(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v6, 1, v10) == 1)
  {
    uint64_t v11 = &demangling cache variable for type metadata for PommesSearchRequest?;
    uint64_t v12 = (uint64_t)v6;
  }
  else
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)&v6[*(int *)(v10 + 44)], (uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    outlined destroy of PerformanceUtil.Ticket((uint64_t)v6, type metadata accessor for PommesSearchRequest);
    uint64_t v13 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13) != 1)
    {
      uint64_t v17 = Siri_Nlu_External_Span.matcherNames.getter();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v13);
      swift_retain();
      unint64_t v16 = specialized Sequence.compactMap<A>(_:)(v17);
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      goto LABEL_7;
    }
    uint64_t v11 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
    uint64_t v12 = (uint64_t)v9;
  }
  uint64_t result = outlined destroy of MediaUserStateCenter?(v12, v11);
  unint64_t v16 = MEMORY[0x1E4FBC860];
LABEL_7:
  *a2 = v16;
  return result;
}

uint64_t AppInfoDataProvider.equivalentAppInfo(span:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void (*v94)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>));
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  char *v97;
  int *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  long long v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint8_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void (*v136)(char *, uint64_t);
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  void (*v148)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v149;
  uint64_t v150;
  void v151[2];
  uint64_t *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  unint64_t v164;
  void (*v165)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  long long v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t v180;
  unint64_t v181;
  char **v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  void v186[5];
  uint64_t v187;
  uint64_t v188[3];
  char v189;

  uint64_t v3 = v2;
  uint64_t v175 = a2;
  unint64_t v182 = (char **)type metadata accessor for Siri_Nlu_External_Span();
  uint64_t v180 = (unint64_t)*(v182 - 1);
  uint64_t v5 = MEMORY[0x1F4188790](v182);
  *(void *)&uint64_t v174 = (char *)&v154 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v157 = (char *)&v154 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v159 = (char *)&v154 - v9;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppVocabularyConcept();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v183 = v10;
  unint64_t v184 = v11;
  MEMORY[0x1F4188790](v10);
  unint64_t v185 = (char *)&v154 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v156);
  os_log_t v158 = (char *)&v154 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v168 = (char *)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v167 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v162 = *(void *)(v167 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v167);
  uint64_t v154 = (char *)&v154 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v161 = (char *)&v154 - v18;
  uint64_t v172 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v169 = *(void *)(v172 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v172);
  uint64_t v155 = (char *)&v154 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v171 = (char *)&v154 - v21;
  uint64_t v22 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  unint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v160 = (char *)&v154 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span.MatcherName?, Siri_Nlu_External_Span.MatcherName?));
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v154 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  uint64_t v28 = MEMORY[0x1F4188790](v166);
  uint64_t v163 = (char *)&v154 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v173 = (char *)&v154 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  unint64_t v34 = (char *)&v154 - v33;
  MEMORY[0x1F4188790](v32);
  char v36 = (char *)&v154 - v35;
  uint64_t v37 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
  uint64_t v176 = *(void *)(v37 - 8);
  uint64_t v177 = v37;
  MEMORY[0x1F4188790](v37);
  uint64_t v179 = (char *)&v154 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_AppInfo.init()();
  uint64_t v178 = a1;
  uint64_t v39 = Siri_Nlu_External_Span.matcherNames.getter();
  uint64_t v40 = *(void *)(v39 + 16);
  uint64_t v170 = v3;
  if (v40)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v36, v39 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80)), v22);
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
    unint64_t v42 = (v23 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v41(v36, 0, 1, v22);
  }
  else
  {
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
    unint64_t v42 = (v23 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v41(v36, 1, 1, v22);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v23 + 104))(v34, *MEMORY[0x1E4FA2710], v22);
  uint64_t v165 = v41;
  uint64_t v164 = v42;
  v41(v34, 0, 1, v22);
  uint64_t v43 = (uint64_t)&v27[*(int *)(v25 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v36, (uint64_t)v27, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v34, v43, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (v44((uint64_t)v27, 1, v22) != 1)
  {
    uint64_t v47 = (uint64_t)v173;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v27, (uint64_t)v173, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    if (v44(v43, 1, v22) != 1)
    {
      unint64_t v48 = v160;
      (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v160, v43, v22);
      lazy protocol witness table accessor for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, MEMORY[0x1E4FA2738]);
      char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v50 = *(void (**)(char *, uint64_t))(v23 + 8);
      v50(v48, v22);
      outlined destroy of MediaUserStateCenter?((uint64_t)v34, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v36, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
      v50(v173, v22);
      outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
      uint64_t v45 = (char *)v180;
      uint64_t v46 = (uint64_t)v182;
      if (v49) {
        goto LABEL_11;
      }
LABEL_14:
      uint64_t v56 = v178;
      if (one-time initialization token for pommes == -1)
      {
LABEL_15:
        uint64_t v57 = type metadata accessor for Logger();
        __swift_project_value_buffer(v57, (uint64_t)static Logger.pommes);
        uint64_t v58 = v174;
        (*((void (**)(void, uint64_t, uint64_t))v45 + 2))(v174, v56, v46);
        uint64_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v61 = (uint8_t *)swift_slowAlloc();
          uint64_t v62 = swift_slowAlloc();
          v188[0] = v62;
          *(_DWORD *)uint64_t v61 = 136315138;
          uint64_t v63 = Siri_Nlu_External_Span.matcherNames.getter();
          if (*(void *)(v63 + 16))
          {
            uint64_t v64 = v163;
            (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v163, v63 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80)), v22);
            uint64_t v65 = 0;
            uint64_t v66 = v175;
          }
          else
          {
            uint64_t v65 = 1;
            uint64_t v66 = v175;
            uint64_t v64 = v163;
          }
          v165(v64, v65, 1, v22);
          swift_bridgeObjectRelease();
          uint64_t v73 = String.init<A>(describing:)();
          v186[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v188);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*((void (**)(void, char **))v45 + 1))(v174, v182);
          _os_log_impl(&dword_1C8F83000, v59, v60, "PegasusProxy#equivalentAppInfo matcher not siriVocabularyMatcher matcherNames:%s", v61, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v62, -1, -1);
          MEMORY[0x1CB77E470](v61, -1, -1);
        }
        else
        {
          (*((void (**)(uint64_t, uint64_t))v45 + 1))(v58, v46);

          uint64_t v66 = v175;
        }
        uint64_t v75 = v176;
        uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v176 + 56);
        uint64_t v77 = v66;
        goto LABEL_25;
      }
LABEL_75:
      swift_once();
      goto LABEL_15;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v34, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v36, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v47, v22);
LABEL_9:
    outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for (Siri_Nlu_External_Span.MatcherName?, Siri_Nlu_External_Span.MatcherName?));
    uint64_t v45 = (char *)v180;
    uint64_t v46 = (uint64_t)v182;
    goto LABEL_14;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v34, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v36, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  if (v44(v43, 1, v22) != 1) {
    goto LABEL_9;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  uint64_t v45 = (char *)v180;
  uint64_t v46 = (uint64_t)v182;
LABEL_11:
  uint64_t v51 = v178;
  if (Siri_Nlu_External_Span.label.getter() == 0x656D614E707061 && v52 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v53 = v172;
    uint64_t v54 = v170;
    uint64_t v55 = (uint64_t)v168;
  }
  else
  {
    char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v53 = v172;
    uint64_t v54 = v170;
    uint64_t v55 = (uint64_t)v168;
    if ((v67 & 1) == 0)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v118 = type metadata accessor for Logger();
      __swift_project_value_buffer(v118, (uint64_t)static Logger.pommes);
      uint64_t v80 = v157;
      (*((void (**)(char *, uint64_t, uint64_t))v45 + 2))(v157, v51, v46);
      uint64_t v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v81, v82))
      {
        uint64_t v83 = (uint8_t *)swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        v188[0] = v84;
        *(_DWORD *)uint64_t v83 = 136315138;
        uint64_t v119 = Siri_Nlu_External_Span.label.getter();
        v186[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v120, v188);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*((void (**)(char *, char **))v45 + 1))(v157, v182);
        uint64_t v87 = "PegasusProxy#equivalentAppInfo matcher not appName label:%s";
        goto LABEL_54;
      }
LABEL_55:
      (*((void (**)(char *, uint64_t))v45 + 1))(v80, v46);
      goto LABEL_56;
    }
  }
  uint64_t v68 = v161;
  Siri_Nlu_External_Span.usoGraph.getter();
  uint64_t v69 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  (*(void (**)(char *, uint64_t))(v162 + 8))(v68, v167);
  if (*(void *)(v69 + 16))
  {
    uint64_t v70 = v169;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v169 + 16))(v55, v69 + ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80)), v53);
    uint64_t v71 = 0;
    uint64_t v72 = v171;
  }
  else
  {
    uint64_t v71 = 1;
    uint64_t v72 = v171;
    uint64_t v70 = v169;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v55, v71, 1, v53);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v55, 1, v53) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v55, &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    __swift_project_value_buffer(v79, (uint64_t)static Logger.pommes);
    uint64_t v45 = (char *)v180;
    uint64_t v80 = v159;
    (*(void (**)(char *, uint64_t, uint64_t))(v180 + 16))(v159, v51, v46);
    uint64_t v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v81, v82))
    {
      uint64_t v83 = (uint8_t *)swift_slowAlloc();
      uint64_t v84 = swift_slowAlloc();
      v188[0] = v84;
      *(_DWORD *)uint64_t v83 = 136315138;
      unint64_t v185 = (char *)(v83 + 4);
      Siri_Nlu_External_Span.usoGraph.getter();
      uint64_t v85 = String.init<A>(describing:)();
      v186[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*((void (**)(char *, char **))v45 + 1))(v159, v182);
      uint64_t v87 = "PegasusProxy#equivalentAppInfo identifier not present in USO graph:%s";
LABEL_54:
      _os_log_impl(&dword_1C8F83000, v81, v82, v87, v83, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v84, -1, -1);
      MEMORY[0x1CB77E470](v83, -1, -1);
LABEL_56:

      uint64_t v75 = v176;
      uint64_t v78 = v177;
      uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v176 + 56);
      uint64_t v77 = v175;
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  uint64_t v88 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 32))(v72, v55, v53);
  uint64_t v189 = 0;
  if (one-time initialization token for shared != -1) {
    uint64_t v88 = swift_once();
  }
  unint64_t v182 = &v154;
  uint64_t v89 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v88);
  v151[0] = v54;
  v151[1] = v72;
  uint64_t v152 = (uint64_t *)&v189;
  uint64_t v90 = type metadata accessor for Date();
  uint64_t v91 = *(void *)(v90 - 8);
  MEMORY[0x1F4188790](v90);
  uint64_t v166 = v92;
  uint64_t v93 = (char *)&v154 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v94 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v89 + 200);
  uint64_t v152 = &v150;
  uint64_t v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppData?);
  LOBYTE(v151[0]) = 2;
  v94(v188, 0xD000000000000036, 0x80000001C919EF60, 0, v93, "SiriInformationSearch/AppInfoDataProvider.swift", 47, 2, 93, "equivalentAppInfo(span:)", 24, v151[0], partial apply for closure #1 in AppInfoDataProvider.equivalentAppInfo(span:));
  uint64_t v95 = *(void (**)(char *, uint64_t))(v91 + 8);
  uint64_t v168 = (char *)v90;
  uint64_t v167 = v91 + 8;
  v95(v93, v90);
  if (!v188[2])
  {
    if (one-time initialization token for pommes == -1)
    {
LABEL_69:
      uint64_t v126 = type metadata accessor for Logger();
      __swift_project_value_buffer(v126, (uint64_t)static Logger.pommes);
      uint64_t v127 = v169;
      uint64_t v128 = v155;
      uint64_t v129 = v172;
      (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v155, v171, v172);
      uint64_t v130 = Logger.logObject.getter();
      uint64_t v131 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v130, v131))
      {
        unint64_t v132 = (uint8_t *)swift_slowAlloc();
        uint64_t v133 = swift_slowAlloc();
        v188[0] = v133;
        *(_DWORD *)unint64_t v132 = 136315138;
        uint64_t v134 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
        v186[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v135, v188);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v136 = *(void (**)(char *, uint64_t))(v127 + 8);
        v136(v155, v172);
        _os_log_impl(&dword_1C8F83000, v130, v131, "PegasusProxy#equivalentAppInfo failed to resolve appData for bundleIdentifier:%s", v132, 0xCu);
        swift_arrayDestroy();
        uint64_t v137 = v133;
        uint64_t v129 = v172;
        MEMORY[0x1CB77E470](v137, -1, -1);
        MEMORY[0x1CB77E470](v132, -1, -1);
      }
      else
      {
        uint64_t v136 = *(void (**)(char *, uint64_t))(v127 + 8);
        v136(v128, v129);
      }

      uint64_t v75 = v176;
      v136(v171, v129);
      uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56);
      uint64_t v77 = v175;
LABEL_25:
      uint64_t v78 = v177;
LABEL_57:
      v76(v77, 1, 1, v78);
      uint64_t v121 = v179;
      return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v121, v78);
    }
LABEL_84:
    swift_once();
    goto LABEL_69;
  }
  uint64_t v165 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v95;
  Siri_Nlu_External_Span.input.getter();
  Apple_Parsec_Siri_V2alpha_AppInfo.appName.setter();
  Siri_Nlu_External_UsoEntityIdentifier.value.getter();
  Apple_Parsec_Siri_V2alpha_AppInfo.bundleID.setter();
  Apple_Parsec_Siri_V2alpha_AppInfo.hasSiriIntegration_p.setter();
  uint64_t v96 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  Apple_Parsec_Siri_V2alpha_AppInfo.supportedIntents.setter();
  uint64_t v97 = v158;
  Date.init()();
  uint64_t v98 = (int *)v156;
  uint64_t v99 = &v97[*(int *)(v156 + 20)];
  *(void *)uint64_t v99 = "SiriInformationSearch/AppInfoDataProvider.swift";
  *((void *)v99 + 1) = 47;
  v99[16] = 2;
  *(void *)&v97[v98[6]] = 106;
  uint64_t v100 = &v97[v98[7]];
  *(void *)uint64_t v100 = "equivalentAppInfo(span:)";
  *((void *)v100 + 1) = 24;
  v100[16] = 2;
  uint64_t v101 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001ELL);
  unint64_t v102 = (uint64_t *)&v97[v98[8]];
  *unint64_t v102 = v101;
  v102[1] = v103;
  uint64_t v104 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
  unint64_t v23 = AppInfoDataProvider.getVocabularyConcepts(bundleId:allowPlaceholder:)(v104, v105, 0);
  swift_bridgeObjectRelease();
  uint64_t v106 = MEMORY[0x1E4FBC860];
  v186[0] = MEMORY[0x1E4FBC860];
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v45 = v185;
    if (v46)
    {
LABEL_37:
      unint64_t v181 = v23 & 0xC000000000000001;
      unint64_t v182 = (char **)*MEMORY[0x1E4F308D0];
      uint64_t v56 = 4;
      *(void *)&uint64_t v107 = 136315138;
      uint64_t v174 = v107;
      uint64_t v173 = (char *)(MEMORY[0x1E4FBC840] + 8);
      uint64_t v180 = v23;
      uint64_t v178 = v46;
      do
      {
        if (v181) {
          uint64_t v108 = (char *)MEMORY[0x1CB77D510](v56 - 4, v23);
        }
        else {
          uint64_t v108 = (char *)*(id *)(v23 + 8 * v56);
        }
        uint64_t v45 = v108;
        uint64_t v22 = v56 - 3;
        if (__OFADD__(v56 - 4, 1))
        {
          __break(1u);
          goto LABEL_74;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v109 = specialized NSDictionary.arrayValue<A>(for:)();
        swift_bridgeObjectRelease();
        if (v109)
        {
        }
        else
        {
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v110 = type metadata accessor for Logger();
          __swift_project_value_buffer(v110, (uint64_t)static Logger.pommes);
          uint64_t v111 = Logger.logObject.getter();
          uint64_t v112 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v111, v112))
          {
            uint64_t v113 = swift_slowAlloc();
            unint64_t v114 = swift_slowAlloc();
            unint64_t v187 = v114;
            *(_DWORD *)uint64_t v113 = v174;
            uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            *(void *)(v113 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, &v187);
            unint64_t v23 = v180;
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C8F83000, v111, v112, "PegasusProxy#equivalentAppInfo unable find concepts from key:%s", (uint8_t *)v113, 0xCu);
            swift_arrayDestroy();
            uint64_t v117 = v114;
            uint64_t v46 = v178;
            MEMORY[0x1CB77E470](v117, -1, -1);
            MEMORY[0x1CB77E470](v113, -1, -1);
          }

          uint64_t v109 = MEMORY[0x1E4FBC860];
        }
        specialized Array.append<A>(contentsOf:)(v109);
        ++v56;
        uint64_t v45 = v185;
      }
      while (v22 != v46);
      swift_bridgeObjectRelease_n();
      uint64_t v22 = v186[0];
      uint64_t v106 = MEMORY[0x1E4FBC860];
      if (v186[0] >> 62) {
        goto LABEL_78;
      }
      goto LABEL_60;
    }
  }
  else
  {
    uint64_t v46 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v45 = v185;
    if (v46) {
      goto LABEL_37;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v22 = MEMORY[0x1E4FBC860];
  if (MEMORY[0x1E4FBC860] >> 62)
  {
LABEL_78:
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v56) {
      goto LABEL_61;
    }
    goto LABEL_79;
  }
LABEL_60:
  uint64_t v56 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v56)
  {
LABEL_61:
    v186[0] = v106;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56 & ~(v56 >> 63), 0);
    if ((v56 & 0x8000000000000000) == 0)
    {
      uint64_t v46 = 0;
      uint64_t v123 = v186[0];
      while (v56 != v46)
      {
        unint64_t v187 = *(void *)(v22 + 8 * v46 + 32);
        closure #3 in AppInfoDataProvider.equivalentAppInfo(span:)();
        v186[0] = v123;
        uint64_t v125 = *(void *)(v123 + 16);
        uint64_t v124 = *(void *)(v123 + 24);
        unint64_t v23 = v125 + 1;
        if (v125 >= v124 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v124 > 1, v125 + 1, 1);
          uint64_t v123 = v186[0];
        }
        ++v46;
        *(void *)(v123 + 16) = v23;
        (*(void (**)(unint64_t, char *, uint64_t))(v184 + 32))(v123+ ((*(unsigned __int8 *)(v184 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v184 + 80))+ *(void *)(v184 + 72) * v125, v45, v183);
        if (v56 == v46) {
          goto LABEL_79;
        }
      }
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    __break(1u);
    goto LABEL_84;
  }
LABEL_79:
  swift_bridgeObjectRelease();
  uint64_t v138 = (uint64_t *)v179;
  Apple_Parsec_Siri_V2alpha_AppInfo.vocabConcepts.setter();
  uint64_t v139 = (uint64_t)v158;
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v158, 0);
  v186[3] = &type metadata for FeatureFlag;
  v186[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  uint64_t v140 = swift_allocObject();
  v186[0] = v140;
  *(void *)(v140 + 16) = 5;
  *(void *)(v140 + 24) = 0;
  *(void *)(v140 + 32) = 0;
  *(void *)(v140 + 40) = 0;
  *(unsigned char *)(v140 + 48) = 3;
  uint64_t v141 = isFeatureEnabled(_:)();
  uint64_t v142 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v186);
  if (v141)
  {
    uint64_t v143 = static PerformanceUtil.shared;
    uint64_t v144 = MEMORY[0x1F4188790](v142);
    uint64_t v145 = v171;
    uint64_t v152 = v138;
    uint64_t v153 = (uint64_t)v171;
    MEMORY[0x1F4188790](v144);
    uint64_t v147 = (char *)&v154 - ((v146 + 15) & 0xFFFFFFFFFFFFFFF0);
    Date.init()();
    uint64_t v148 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(void *)v143 + 200);
    uint64_t v152 = v151;
    uint64_t v153 = MEMORY[0x1E4FBC848] + 8;
    LOBYTE(v151[0]) = 2;
    v148(0xD000000000000014, 0x80000001C919EFE0, 0, v147, "SiriInformationSearch/AppInfoDataProvider.swift", 47, 2, 133, "equivalentAppInfo(span:)", 24, v151[0], partial apply for closure #4 in AppInfoDataProvider.equivalentAppInfo(span:));
    ((void (*)(char *, char *))v165)(v147, v168);
    outlined destroy of PerformanceUtil.Ticket(v139, type metadata accessor for PerformanceUtil.Ticket);
    (*(void (**)(char *, uint64_t))(v169 + 8))(v145, v172);
  }
  else
  {
    outlined destroy of PerformanceUtil.Ticket(v139, type metadata accessor for PerformanceUtil.Ticket);
    (*(void (**)(char *, uint64_t))(v169 + 8))(v171, v172);
  }
  uint64_t v149 = v175;
  uint64_t v75 = v176;
  uint64_t v78 = v177;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v176 + 16))(v175, v138, v177);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v75 + 56))(v149, 0, 1, v78);
  uint64_t v121 = (char *)v138;
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v121, v78);
}

uint64_t DataProviderManager.appendProfileSlices(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v52 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  uint64_t v6 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  int64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    int v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, (os_log_type_t)v16))
    {
      int v41 = v16;
      os_log_t v43 = v15;
      uint64_t v44 = v12;
      uint64_t v45 = v10;
      uint64_t v46 = v9;
      uint64_t v48 = a3;
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v54 = v40;
      unint64_t v42 = v17;
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v53 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      uint64_t v18 = v6 + 16;
      uint64_t v20 = *(unsigned __int8 *)(v18 + 64);
      uint64_t v47 = a1;
      uint64_t v21 = a1 + ((v20 + 32) & ~v20);
      uint64_t v49 = *(void *)(v18 + 56);
      uint64_t v50 = v19;
      uint64_t v51 = v18;
      uint64_t v22 = (void (**)(char *, uint64_t))(v18 - 8);
      do
      {
        uint64_t v23 = v52;
        v50(v8, v21, v52);
        uint64_t v24 = Apple_Parsec_Siri_V2alpha_ProfileSlice.summarizedDescription.getter();
        uint64_t v26 = v25;
        (*v22)(v8, v23);
        uint64_t v27 = v53;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1);
          uint64_t v27 = v53;
        }
        unint64_t v29 = *(void *)(v27 + 16);
        unint64_t v28 = *(void *)(v27 + 24);
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          uint64_t v27 = v53;
        }
        *(void *)(v27 + 16) = v29 + 1;
        unint64_t v30 = v27 + 16 * v29;
        *(void *)(v30 + 32) = v24;
        *(void *)(v30 + 40) = v26;
        v21 += v49;
        --v13;
      }
      while (v13);
      uint64_t v31 = v42;
      uint64_t v53 = v27;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v32 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v34 = v33;
      swift_release();
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a1 = v47;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      os_log_t v35 = v43;
      _os_log_impl(&dword_1C8F83000, v43, (os_log_type_t)v41, "DataProviderManager Adding profile slices to request: %s", v31, 0xCu);
      uint64_t v36 = v40;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v36, -1, -1);
      MEMORY[0x1CB77E470](v31, -1, -1);

      a3 = v48;
      uint64_t v10 = v45;
      uint64_t v9 = v46;
      uint64_t v12 = v44;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v37 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.getter();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg504_s21h103InformationSearch19DataProviderManagerC19appendProfileSlices33_025996E41686C8D59143D5DC4568B6E8LL_2to10d6API013f1_g4_a9_i62_aR7RequestVSayAG0t1_u1_a1_v1_H5SliceVG_AItFAG0t1_u1_a1_v1_rC5K9VANXEfU0_SayAF0f1_g1_h1_i1_T5SliceVGTf1cn_nTf4ng_n(v37, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.setter();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v12, v9);
}

uint64_t PegasusProxy.addPromptContext(to:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v81 = a1;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_Context_ClientConversationContextInfo();
  uint64_t v76 = *(void *)(v5 - 8);
  uint64_t v77 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v75 = (char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for Apple_Parsec_Siri_Context_ClientDisplayHints();
  uint64_t v74 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  uint64_t v79 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_Context_PromptContext();
  uint64_t v73 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = a2;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  outlined init with copy of MediaUserStateCenter?(v21, (uint64_t)v17, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v17, 1, v23) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a3, v81, v11);
  }
  else
  {
    uint64_t v72 = a3;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v20, v17, v23);
    uint64_t v71 = v12;
    uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 16);
    uint64_t v28 = v81;
    uint64_t v81 = v11;
    uint64_t v69 = v27;
    uint64_t v70 = v12 + 16;
    uint64_t v29 = ((uint64_t (*)(char *, uint64_t, uint64_t))v27)(v14, v28, v11);
    uint64_t v30 = v25;
    MEMORY[0x1F4188790](v29);
    v62[-2] = v20;
    uint64_t v66 = _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_PromptContext and conformance Apple_Parsec_Siri_Context_PromptContext, MEMORY[0x1E4F887C0]);
    uint64_t v68 = v8;
    uint64_t v31 = v23;
    static Message.with(_:)();
    uint64_t v32 = (uint64_t (*)(void *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.modify();
    Apple_Parsec_Siri_Context_ClientConversationContextInfo.promptContext.setter();
    uint64_t v33 = v32(v83, 0);
    MEMORY[0x1F4188790](v33);
    v62[-2] = v20;
    uint64_t v67 = _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_ClientDisplayHints and conformance Apple_Parsec_Siri_Context_ClientDisplayHints, MEMORY[0x1E4F893A0]);
    static Message.with(_:)();
    unint64_t v34 = (uint64_t (*)(void *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.modify();
    Apple_Parsec_Siri_Context_ClientConversationContextInfo.clientDisplayHints.setter();
    uint64_t v35 = v34(v83, 0);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v78 + 256))(v35))
    {
      uint64_t v63 = v20;
      uint64_t v64 = v30;
      uint64_t v65 = v31;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      uint64_t v78 = __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      BOOL v39 = os_log_type_enabled(v37, v38);
      uint64_t v40 = v14;
      uint64_t v41 = v68;
      if (v39)
      {
        unint64_t v42 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        uint64_t v82 = v43;
        *(_DWORD *)unint64_t v42 = 136315138;
        v62[1] = v42 + 4;
        swift_beginAccess();
        uint64_t v44 = v75;
        Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.getter();
        Apple_Parsec_Siri_Context_ClientConversationContextInfo.promptContext.getter();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v44, v77);
        swift_endAccess();
        uint64_t v45 = Message.debugDescription.getter();
        unint64_t v47 = v46;
        (*(void (**)(char *, uint64_t))(v73 + 8))(v10, v41);
        v83[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, &v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v37, v38, "request.clientConversationContextInfo.promptuint64_t Context = %s", v42, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v43, -1, -1);
        MEMORY[0x1CB77E470](v42, -1, -1);
      }

      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        uint64_t v82 = v51;
        *(_DWORD *)uint64_t v50 = 136315138;
        uint64_t v78 = (uint64_t)(v50 + 4);
        swift_beginAccess();
        uint64_t v52 = v75;
        Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.getter();
        uint64_t v53 = v79;
        Apple_Parsec_Siri_Context_ClientConversationContextInfo.clientDisplayHints.getter();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v52, v77);
        swift_endAccess();
        uint64_t v54 = v53;
        uint64_t v55 = v80;
        uint64_t v56 = Message.debugDescription.getter();
        unint64_t v58 = v57;
        (*(void (**)(char *, uint64_t))(v74 + 8))(v54, v55);
        v83[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v58, &v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v48, v49, "request.clientConversationContextInfo.clientDisplayHints = %s", v50, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v51, -1, -1);
        MEMORY[0x1CB77E470](v50, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v65);
      uint64_t v60 = v71;
      uint64_t v59 = v72;
      uint64_t v61 = v81;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v31);
      uint64_t v60 = v71;
      uint64_t v59 = v72;
      uint64_t v61 = v81;
      uint64_t v40 = v14;
    }
    swift_beginAccess();
    v69(v59, v40, v61);
    return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v40, v61);
  }
}

uint64_t partial apply for closure #13 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t a1@<X8>)
{
  return closure #13 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(v1[2], v1[3], v1[4], a1);
}

uint64_t closure #13 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  uint64_t v17 = type metadata accessor for PommesSearchRequest(0);
  outlined init with copy of MediaUserStateCenter?(a3 + *(int *)(v17 + 40), (uint64_t)v9, &demangling cache variable for type metadata for PommesContext?);
  uint64_t v18 = type metadata accessor for PommesContext();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v9, 1, v18) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for PommesContext?);
    uint64_t v20 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v12, 1, 1, v20);
  }
  else
  {
    PommesContext.exportPromptContext()();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v18);
  }
  (*(void (**)(char *, char *))(*(void *)a1 + 688))(v16, v12);
  outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t DataProviderManager.addProviderData(to:searchRequest:queryContext:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  BOOL v39 = a4;
  uint64_t v38 = a3;
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v34 = v13;
  uint64_t v35 = v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v36 = (uint64_t)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v29 - v17;
  (*(void (**)(char *, uint64_t))(v19 + 16))((char *)&v29 - v17, a1);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
  uint64_t v30 = a2;
  DataProviderManager.addDeviceState(to:searchRequest:)((uint64_t)v12, a2, (uint64_t)v10);
  uint64_t v37 = v7;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v12, v6);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v21(v12, v10, v6);
  DataProviderManager.addRestrictions(to:searchRequest:queryContext:)((uint64_t)v12, a2, v38, (uint64_t)v10);
  uint64_t v32 = (uint64_t (*)(char *, uint64_t))v20;
  v20(v12, v6);
  uint64_t v33 = v7 + 8;
  v21(v12, v10, v6);
  DataProviderManager.addPerson(to:)((uint64_t)v12, (uint64_t)v10);
  uint64_t v31 = v6;
  v20(v12, v6);
  v21(v12, v10, v6);
  uint64_t v22 = v36;
  DataProviderManager.addAmpState(to:searchRequest:)((uint64_t)v18, v30, v36);
  uint64_t v24 = v34;
  uint64_t v23 = v35;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v35 + 8);
  v25(v18, v34);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 32);
  v26(v18, v22, v24);
  DataProviderManager.addQueueState(to:)((uint64_t)v18, v22);
  v25(v18, v24);
  v26(v39, v22, v24);
  uint64_t v27 = v31;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v10, v12, v31);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.setter();
  return v32(v12, v27);
}

uint64_t DataProviderManager.addDeviceState(to:searchRequest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v89 = a2;
  uint64_t v78 = a1;
  uint64_t v79 = a3;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v74 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SiriVoiceGender();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v85 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v84 = (char *)&v73 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v87 = (char *)&v73 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v83 = (char *)&v73 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v82 = (char *)&v73 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v81 = (char *)&v73 - v17;
  uint64_t v18 = type metadata accessor for DeviceRestrictions();
  uint64_t v80 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v73 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v26 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for InputOrigin();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceState();
  uint64_t v76 = *(void *)(v31 - 8);
  uint64_t v77 = v31;
  uint64_t v32 = MEMORY[0x1F4188790](v31);
  uint64_t v75 = (char *)&v73 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v73 - v34;
  Apple_Parsec_Siri_V2alpha_DeviceState.init()();
  uint64_t v88 = (int *)type metadata accessor for PommesSearchRequest(0);
  outlined init with copy of MediaUserStateCenter?(v89 + v88[14], (uint64_t)v26, &demangling cache variable for type metadata for InputOrigin?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v26, &demangling cache variable for type metadata for InputOrigin?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v30, v26, v27);
    InputOrigin.rawValue.getter();
    Apple_Parsec_Siri_V2alpha_DeviceState.inputOrigin.setter();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  }
  if (*(void *)(v89 + v88[13]))
  {
    swift_retain();
    Apple_Parsec_Siri_V2alpha_DeviceState.isEyesFree.setter();
    Apple_Parsec_Siri_V2alpha_DeviceState.isTextToSpeechEnabled.setter();
    Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceTriggerEnabled.setter();
    swift_bridgeObjectRetain();
    DeviceRestrictions.init(aceValue:)();
    static DeviceRestrictions.carDNDMode.getter();
    lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions, MEMORY[0x1E4FA5298]);
    dispatch thunk of SetAlgebra.isSuperset(of:)();
    uint64_t v36 = v35;
    uint64_t v73 = v6;
    uint64_t v37 = *(void (**)(char *, uint64_t))(v80 + 8);
    v37(v21, v18);
    Apple_Parsec_Siri_V2alpha_DeviceState.isCarDnd.setter();
    static DeviceRestrictions.starkMode.getter();
    dispatch thunk of SetAlgebra.isSuperset(of:)();
    v37(v21, v18);
    Apple_Parsec_Siri_V2alpha_DeviceState.isCarplay.setter();
    swift_release();
    v37(v23, v18);
    uint64_t v6 = v73;
    uint64_t v35 = v36;
  }
  Apple_Parsec_Siri_V2alpha_DeviceState.isMultiUser.setter();
  uint64_t v38 = SiriEnvironment.currentDevice.getter();
  if ((Apple_Parsec_Siri_V2alpha_DeviceState.isCarplay.getter() & 1) == 0) {
    MKBGetDeviceLockState();
  }
  BOOL v39 = v87;
  Apple_Parsec_Siri_V2alpha_DeviceState.isLockedWithPasscode.setter();
  uint64_t v87 = (char *)v38;
  dispatch thunk of CurrentDevice.siriVoiceGender.getter();
  uint64_t v40 = *MEMORY[0x1E4FA5050];
  uint64_t v80 = *(void *)(v6 + 104);
  ((void (*)(char *, uint64_t, uint64_t))v80)(v82, v40, v5);
  lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type SiriVoiceGender and conformance SiriVoiceGender, MEMORY[0x1E4FA5060]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v92 != v90 || v93 != v91) {
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v6 + 8);
  v41(v82, v5);
  v41(v81, v5);
  Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceGenderFemale.setter();
  dispatch thunk of CurrentDevice.siriVoiceGender.getter();
  ((void (*)(char *, void, uint64_t))v80)(v39, *MEMORY[0x1E4FA5048], v5);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v92 != v90 || v93 != v91) {
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41(v39, v5);
  v41(v83, v5);
  Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceGenderMale.setter();
  dispatch thunk of CurrentDevice.siriVoiceGender.getter();
  ((void (*)(char *, void, uint64_t))v80)(v85, *MEMORY[0x1E4FA5058], v5);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v92 != v90 || v93 != v91) {
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  uint64_t v42 = (uint64_t)v74;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41(v85, v5);
  v41(v84, v5);
  Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceGenderUnknown.setter();
  dispatch thunk of CurrentDevice.deviceClass.getter();
  uint64_t v43 = type metadata accessor for DeviceClass();
  uint64_t v44 = *(void *)(v43 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for DeviceClass?);
  }
  else
  {
    object = DeviceClass.stringValue()().value._object;
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
    if (object) {
      Apple_Parsec_Siri_V2alpha_DeviceState.deviceName.setter();
    }
  }
  uint64_t v46 = *((void *)v86 + 11);
  if (!v46)
  {
    if (*(void *)(v89 + v88[21] + 8)) {
      goto LABEL_39;
    }
    goto LABEL_36;
  }
  unint64_t v86 = v35;
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  uint64_t v85 = (char *)&v73;
  MEMORY[0x1F4188790](v47 - 8);
  os_log_type_t v49 = (char *)&v73 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for DispatchTime();
  uint64_t v51 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v53 = (char *)&v73 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchTime.now()();
  uint64_t v54 = type metadata accessor for DispatchTimeInterval();
  uint64_t v55 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  unint64_t v57 = (uint64_t *)((char *)&v73 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
  *unint64_t v57 = 1;
  (*(void (**)(void *, void, uint64_t))(v55 + 104))(v57, *MEMORY[0x1E4FBCAC0], v54);
  MEMORY[0x1CB77C970](v53, v57);
  (*(void (**)(void *, uint64_t))(v55 + 8))(v57, v54);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v50);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v49, 0, 1, v50);
  uint64_t v58 = (*(uint64_t (**)(char *))(*(void *)v46 + 168))(v49);
  outlined destroy of MediaUserStateCenter?((uint64_t)v49, &demangling cache variable for type metadata for DispatchTime?);
  uint64_t v59 = (void **)(v89 + v88[21]);
  uint64_t v60 = v59[1];
  if (!v60)
  {
    uint64_t v35 = v86;
    goto LABEL_36;
  }
  uint64_t v35 = v86;
  if (!v58) {
    goto LABEL_39;
  }
  uint64_t v61 = *(void *)(v58 + 16);
  if (!v61)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  uint64_t v62 = *v59;
  swift_bridgeObjectRetain_n();
  uint64_t v89 = v58;
  uint64_t v63 = (void **)(v58 + 80);
  while (1)
  {
    uint64_t v64 = *v63;
    if (*(v63 - 6) == v62 && v60 == *(v63 - 5)) {
      break;
    }
    char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v67 = v64;
    if (v66) {
      goto LABEL_38;
    }
    v63 += 7;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v61)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v35 = v86;
      goto LABEL_39;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v68 = v64;
LABEL_38:

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = v86;
  Apple_Parsec_Siri_V2alpha_DeviceState.companionName.setter();
LABEL_39:
  uint64_t v69 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16))(v79, v78, v69);
  uint64_t v70 = v76;
  uint64_t v71 = v77;
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v75, v35, v77);
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.deviceState.setter();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v35, v71);
}

uint64_t lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::String_optional __swiftcall DeviceClass.stringValue()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DeviceClass();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E4FA50A0])
  {
    uint64_t v7 = (void *)0xE600000000000000;
    uint64_t v8 = 0x656E6F685069;
  }
  else if (v6 == *MEMORY[0x1E4FA5090])
  {
    uint64_t v7 = (void *)0xE400000000000000;
    uint64_t v8 = 1684099177;
  }
  else if (v6 == *MEMORY[0x1E4FA50B0])
  {
    uint64_t v7 = (void *)0xE700000000000000;
    uint64_t v8 = 0x646F50656D6F48;
  }
  else if (v6 == *MEMORY[0x1E4FA50A8])
  {
    uint64_t v7 = (void *)0xE800000000000000;
    uint64_t v8 = 0x565420656C707041;
  }
  else if (v6 == *MEMORY[0x1E4FA5088])
  {
    uint64_t v7 = (void *)0xE300000000000000;
    uint64_t v8 = 6512973;
  }
  else if (v6 == *MEMORY[0x1E4FA5098])
  {
    uint64_t v7 = (void *)0xEB00000000686374;
    uint64_t v8 = 0x615720656C707041;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  result.value._object = v7;
  result.value._uint64_t countAndFlagsBits = v8;
  return result;
}

uint64_t DataProviderManager.addRestrictions(to:searchRequest:queryContext:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void (*v128)(uint64_t *__return_ptr, uint64_t);
  uint64_t v129;
  char v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint8_t *v134;
  void (*v135)(void *, void);
  unint64_t *v136;
  unint64_t *v137;
  unint64_t v138;
  char v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  NSObject *v144;
  os_log_type_t v145;
  uint8_t *v146;
  uint64_t v147;
  void (*v148)(uint64_t *__return_ptr, uint64_t);
  uint64_t v149;
  char v150;
  uint64_t v151;
  NSObject *v152;
  os_log_type_t v153;
  uint8_t *v154;
  uint64_t v155;
  void (*v156)(uint64_t *__return_ptr, uint64_t);
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  os_log_type_t v160;
  uint8_t *v161;
  char *v162;
  uint64_t v163;
  char v164;
  void (*v165)(char *, uint64_t);
  uint64_t v166;
  NSObject *v167;
  os_log_type_t v168;
  uint8_t *v169;
  void (*v170)(unsigned char *, void);
  unint64_t *v171;
  unint64_t *v172;
  unint64_t v173;
  char v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  NSObject *v178;
  os_log_type_t v179;
  uint8_t *v180;
  char *v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  NSObject *v185;
  os_log_type_t v186;
  uint8_t *v187;
  void (*v188)(unsigned char *, void);
  unint64_t *v189;
  unint64_t *v190;
  unint64_t v191;
  char v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  NSObject *v196;
  os_log_type_t v197;
  uint8_t *v198;
  uint64_t v200;
  NSObject *v201;
  os_log_type_t v202;
  uint8_t *v203;
  void (*v204)(_OWORD *, void);
  unint64_t *v205;
  unint64_t *v206;
  unint64_t v207;
  char v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  NSObject *v213;
  os_log_type_t v214;
  uint8_t *v215;
  uint64_t v216;
  void v217[2];
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  char *v224;
  char *v225;
  uint64_t v226;
  char *v227;
  void *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  char *v232;
  void *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  long long v240;
  unsigned char v241[40];
  uint64_t v242[12];
  uint64_t v243[12];
  uint64_t v244[12];
  long long v245;
  long long v246;
  long long v247;
  long long v248;
  _OWORD v249[2];
  _OWORD v250[2];
  _OWORD v251[2];
  _OWORD v252[2];
  void v253[11];
  char v254;
  unsigned char v255[24];
  uint64_t v256;
  char v257;
  unsigned char v258[24];
  long long v259;
  char v260;

  uint64_t v219 = a3;
  uint64_t v235 = a2;
  uint64_t v237 = type metadata accessor for DeviceRestrictions();
  uint64_t v231 = *(void *)(v237 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v237);
  unint64_t v234 = (char *)v217 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v232 = (char *)v217 - v9;
  uint64_t v218 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions();
  MEMORY[0x1F4188790](v218);
  v217[1] = (char *)v217 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v223 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceState();
  uint64_t v226 = *(void *)(v223 - 8);
  MEMORY[0x1F4188790](v223);
  uint64_t v225 = (char *)v217 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v238 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Restriction();
  uint64_t v236 = *(void *)(v238 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v238);
  uint64_t v230 = (char *)v217 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v229 = (char *)v217 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  unint64_t v221 = (char *)v217 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  os_log_type_t v220 = (char *)v217 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v227 = (char *)v217 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v224 = (char *)v217 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v222 = (char *)v217 - v25;
  MEMORY[0x1F4188790](v24);
  v217[0] = (char *)v217 - v26;
  uint64_t v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16);
  uint64_t v239 = a4;
  v28(a4, a1, v27);
  *(void *)&uint64_t v240 = v4;
  uint64_t v29 = *(void *)(v4 + 88);
  if (v29)
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
    unint64_t v228 = v217;
    MEMORY[0x1F4188790](v30 - 8);
    uint64_t v32 = (char *)v217 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v33 = type metadata accessor for DispatchTime();
    uint64_t v233 = v217;
    uint64_t v34 = *(void *)(v33 - 8);
    MEMORY[0x1F4188790](v33);
    uint64_t v36 = (char *)v217 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    static DispatchTime.now()();
    uint64_t v37 = type metadata accessor for DispatchTimeInterval();
    uint64_t v38 = *(void *)(v37 - 8);
    MEMORY[0x1F4188790](v37);
    uint64_t v40 = (void *)((char *)v217 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
    *uint64_t v40 = 1;
    (*(void (**)(void *, void, uint64_t))(v38 + 104))(v40, *MEMORY[0x1E4FBCAC0], v37);
    MEMORY[0x1CB77C970](v36, v40);
    (*(void (**)(void *, uint64_t))(v38 + 8))(v40, v37);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v32, 0, 1, v33);
    uint64_t v233 = (void *)(*(uint64_t (**)(char *))(*(void *)v29 + 168))(v32);
    outlined destroy of MediaUserStateCenter?((uint64_t)v32, &demangling cache variable for type metadata for DispatchTime?);
  }
  else
  {
    uint64_t v233 = 0;
  }
  uint64_t v41 = type metadata accessor for PommesSearchRequest(0);
  int v42 = *(unsigned __int8 *)(v235 + *(int *)(v41 + 60));
  uint64_t v43 = (void *)&unk_1EBCB1000;
  unint64_t v228 = (void *)v41;
  if (v42 != 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v45 = v231;
    uint64_t v44 = v232;
    uint64_t v46 = v238;
    goto LABEL_31;
  }
  uint64_t v44 = v232;
  uint64_t v45 = v231;
  uint64_t v46 = v238;
  if (!v233) {
    goto LABEL_31;
  }
  uint64_t v47 = (void **)(v235 + *(int *)(v41 + 84));
  uint64_t v48 = v47[1];
  if (!v48 || (uint64_t v49 = v233[2]) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_31:
    unsigned __int8 v71 = objc_msgSend(*(id *)(v240 + 104), sel_allowExplicitContent);
    uint64_t v72 = v43[280];
    if (v71)
    {
      if (v72 != -1) {
        swift_once();
      }
      uint64_t v73 = type metadata accessor for Logger();
      __swift_project_value_buffer(v73, (uint64_t)static Logger.pommes);
      uint64_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v76 = 0;
        _os_log_impl(&dword_1C8F83000, v74, v75, "Restrictions: skipping .audioExplicitContentDisabled", v76, 2u);
        MEMORY[0x1CB77E470](v76, -1, -1);
      }
    }
    else
    {
      if (v72 != -1) {
        swift_once();
      }
      uint64_t v77 = type metadata accessor for Logger();
      __swift_project_value_buffer(v77, (uint64_t)static Logger.pommes);
      uint64_t v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v78, v79))
      {
        uint64_t v80 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v80 = 0;
        _os_log_impl(&dword_1C8F83000, v78, v79, "Restrictions: explicit content disallowed. Adding .audioExplicitContentDisabled", v80, 2u);
        MEMORY[0x1CB77E470](v80, -1, -1);
      }

      lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, MEMORY[0x1E4F88E18]);
      static Message.with(_:)();
      uint64_t v81 = (void (*)(unsigned char *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
      uint64_t v83 = v82;
      unint64_t v84 = *v82;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v83 = v84;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v84 + 16) + 1, 1, v84);
        *uint64_t v83 = v84;
      }
      unint64_t v87 = *(void *)(v84 + 16);
      unint64_t v86 = *(void *)(v84 + 24);
      if (v87 >= v86 >> 1)
      {
        unint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v86 > 1, v87 + 1, 1, v84);
        *uint64_t v83 = v84;
      }
      *(void *)(v84 + 16) = v87 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v236 + 32))(v84+ ((*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80))+ *(void *)(v236 + 72) * v87, v222, v46);
      v81(v255, 0);
      uint64_t v43 = &unk_1EBCB1000;
    }
    goto LABEL_46;
  }
  uint64_t v50 = *v47;
  uint64_t v51 = v233;
  swift_bridgeObjectRetain_n();
  uint64_t v52 = (void **)(v51 + 10);
  while (1)
  {
    uint64_t v53 = *v52;
    if (*(v52 - 6) == v50 && v48 == *(v52 - 5)) {
      break;
    }
    char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v56 = v53;
    if (v55) {
      goto LABEL_19;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v52 += 7;
    if (!--v49)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v45 = v231;
      uint64_t v44 = v232;
LABEL_30:
      uint64_t v46 = v238;
      uint64_t v43 = &unk_1EBCB1000;
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v57 = v53;
LABEL_19:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned __int8 v58 = objc_msgSend(v53, sel_mediaPlayerExplicitContentDisallowed);
  uint64_t v44 = v232;
  if ((v58 & 1) == 0)
  {

    uint64_t v45 = v231;
    goto LABEL_30;
  }
  uint64_t v43 = &unk_1EBCB1000;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v59 = type metadata accessor for Logger();
  __swift_project_value_buffer(v59, (uint64_t)static Logger.pommes);
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v62 = 0;
    _os_log_impl(&dword_1C8F83000, v60, v61, "Restrictions: explicit content disallowed via HomeSettings. Adding .audioExplicitContentDisabled", v62, 2u);
    MEMORY[0x1CB77E470](v62, -1, -1);
  }

  lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, MEMORY[0x1E4F88E18]);
  static Message.with(_:)();
  uint64_t v63 = (void (*)(unsigned char *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
  uint64_t v65 = v64;
  unint64_t v66 = *v64;
  char v67 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v65 = v66;
  if ((v67 & 1) == 0)
  {
    unint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v66 + 16) + 1, 1, v66);
    *uint64_t v65 = v66;
  }
  unint64_t v69 = *(void *)(v66 + 16);
  unint64_t v68 = *(void *)(v66 + 24);
  if (v69 >= v68 >> 1)
  {
    unint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1, v66);
    *uint64_t v65 = v66;
  }
  *(void *)(v66 + 16) = v69 + 1;
  unint64_t v70 = v66
      + ((*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80))
      + *(void *)(v236 + 72) * v69;
  uint64_t v46 = v238;
  (*(void (**)(unint64_t, void, uint64_t))(v236 + 32))(v70, v217[0], v238);
  v63(v255, 0);

  uint64_t v45 = v231;
LABEL_46:
  unsigned int v88 = objc_msgSend(*(id *)(v240 + 104), sel_isInRestrictedSharingMode);
  uint64_t v89 = v43[280];
  if (v88)
  {
    if (v89 != -1) {
      swift_once();
    }
    uint64_t v90 = type metadata accessor for Logger();
    __swift_project_value_buffer(v90, (uint64_t)static Logger.pommes);
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v93 = 0;
      _os_log_impl(&dword_1C8F83000, v91, v92, "Restrictions: in restricted sharing mode. Adding .personalInformationDisabled", v93, 2u);
      MEMORY[0x1CB77E470](v93, -1, -1);
    }

    lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, MEMORY[0x1E4F88E18]);
    static Message.with(_:)();
    uint64_t v94 = (void (*)(unsigned char *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
    uint64_t v96 = v95;
    unint64_t v97 = *v95;
    char v98 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v96 = v97;
    if ((v98 & 1) == 0)
    {
      unint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v97 + 16) + 1, 1, v97);
      *uint64_t v96 = v97;
    }
    unint64_t v100 = *(void *)(v97 + 16);
    unint64_t v99 = *(void *)(v97 + 24);
    if (v100 >= v99 >> 1)
    {
      unint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v99 > 1, v100 + 1, 1, v97);
      *uint64_t v96 = v97;
    }
    uint64_t v102 = v223;
    uint64_t v101 = v224;
    *(void *)(v97 + 16) = v100 + 1;
    unint64_t v103 = v97
         + ((*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80))
         + *(void *)(v236 + 72) * v100;
    uint64_t v46 = v238;
    (*(void (**)(unint64_t, char *, uint64_t))(v236 + 32))(v103, v101, v238);
    v94(v255, 0);
  }
  else
  {
    if (v89 != -1) {
      swift_once();
    }
    uint64_t v104 = type metadata accessor for Logger();
    __swift_project_value_buffer(v104, (uint64_t)static Logger.pommes);
    uint64_t v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v105, v106))
    {
      uint64_t v107 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v107 = 0;
      _os_log_impl(&dword_1C8F83000, v105, v106, "Restrictions: skipping .personalInformationDisabled", v107, 2u);
      MEMORY[0x1CB77E470](v107, -1, -1);
    }

    uint64_t v102 = v223;
  }
  uint64_t v108 = v225;
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.deviceState.getter();
  char v109 = Apple_Parsec_Siri_V2alpha_DeviceState.isLockedWithPasscode.getter();
  (*(void (**)(char *, uint64_t))(v226 + 8))(v108, v102);
  uint64_t v110 = v43[280];
  if (v109)
  {
    if (v110 != -1) {
      swift_once();
    }
    uint64_t v111 = type metadata accessor for Logger();
    __swift_project_value_buffer(v111, (uint64_t)static Logger.pommes);
    uint64_t v112 = Logger.logObject.getter();
    os_log_type_t v113 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v112, v113))
    {
      unint64_t v114 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v114 = 0;
      _os_log_impl(&dword_1C8F83000, v112, v113, "Restrictions: device is locked. Adding .personalInformationDisabled", v114, 2u);
      MEMORY[0x1CB77E470](v114, -1, -1);
    }

    lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, MEMORY[0x1E4F88E18]);
    static Message.with(_:)();
    uint64_t v115 = (void (*)(unsigned char *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
    uint64_t v117 = v116;
    unint64_t v118 = *v116;
    char v119 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v117 = v118;
    if ((v119 & 1) == 0)
    {
      unint64_t v118 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v118 + 16) + 1, 1, v118);
      *uint64_t v117 = v118;
    }
    unint64_t v121 = *(void *)(v118 + 16);
    unint64_t v120 = *(void *)(v118 + 24);
    if (v121 >= v120 >> 1)
    {
      unint64_t v118 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v120 > 1, v121 + 1, 1, v118);
      *uint64_t v117 = v118;
    }
    *(void *)(v118 + 16) = v121 + 1;
    unint64_t v122 = v118
         + ((*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80))
         + *(void *)(v236 + 72) * v121;
    uint64_t v46 = v238;
    (*(void (**)(unint64_t, char *, uint64_t))(v236 + 32))(v122, v227, v238);
    v115(v255, 0);
  }
  else
  {
    if (v110 != -1) {
      swift_once();
    }
    uint64_t v123 = type metadata accessor for Logger();
    __swift_project_value_buffer(v123, (uint64_t)static Logger.pommes);
    uint64_t v124 = Logger.logObject.getter();
    os_log_type_t v125 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v124, v125))
    {
      uint64_t v126 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v126 = 0;
      _os_log_impl(&dword_1C8F83000, v124, v125, "Restrictions: skipping .personalInformationDisabled because device is unlocked.", v126, 2u);
      MEMORY[0x1CB77E470](v126, -1, -1);
    }
  }
  uint64_t v127 = *(void *)(v240 + 112);
  if (v127
    && (uint64_t v128 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v127 + 120),
        uint64_t v129 = swift_retain(),
        v128(v242, v129),
        swift_release(),
        outlined init with take of PommesSearchReason?((uint64_t)v242, (uint64_t)v255, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?), v256)&& (uint64_t v130 = v257, outlined release of AssistantDataSnapshot?(v242), (v130 & 1) == 0))
  {
    if (v43[280] != -1) {
      swift_once();
    }
    uint64_t v131 = type metadata accessor for Logger();
    __swift_project_value_buffer(v131, (uint64_t)static Logger.pommes);
    unint64_t v132 = Logger.logObject.getter();
    uint64_t v133 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v132, v133))
    {
      uint64_t v134 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v134 = 0;
      _os_log_impl(&dword_1C8F83000, v132, v133, "Restrictions: web search content disallowed. Adding .siriWebSearchContentDisabled", v134, 2u);
      MEMORY[0x1CB77E470](v134, -1, -1);
    }

    lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, MEMORY[0x1E4F88E18]);
    static Message.with(_:)();
    uint64_t v135 = (void (*)(void *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
    uint64_t v137 = v136;
    uint64_t v138 = *v136;
    uint64_t v139 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v137 = v138;
    if ((v139 & 1) == 0)
    {
      uint64_t v138 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v138 + 16) + 1, 1, v138);
      *uint64_t v137 = v138;
    }
    uint64_t v141 = *(void *)(v138 + 16);
    uint64_t v140 = *(void *)(v138 + 24);
    if (v141 >= v140 >> 1)
    {
      uint64_t v138 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v140 > 1, v141 + 1, 1, v138);
      *uint64_t v137 = v138;
    }
    *(void *)(v138 + 16) = v141 + 1;
    uint64_t v142 = v138
         + ((*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80))
         + *(void *)(v236 + 72) * v141;
    uint64_t v46 = v238;
    (*(void (**)(unint64_t, char *, uint64_t))(v236 + 32))(v142, v220, v238);
    v135(v253, 0);
  }
  else
  {
    if (v43[280] != -1) {
      swift_once();
    }
    uint64_t v143 = type metadata accessor for Logger();
    __swift_project_value_buffer(v143, (uint64_t)static Logger.pommes);
    uint64_t v144 = Logger.logObject.getter();
    uint64_t v145 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v144, v145))
    {
      uint64_t v146 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v146 = 0;
      _os_log_impl(&dword_1C8F83000, v144, v145, "Restrictions: skipping .siriWebSearchContentDisabled", v146, 2u);
      MEMORY[0x1CB77E470](v146, -1, -1);
    }
  }
  uint64_t v147 = *(void *)(v240 + 112);
  if (v147
    && (uint64_t v148 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v147 + 120),
        uint64_t v149 = swift_retain(),
        v148(v243, v149),
        swift_release(),
        outlined init with take of PommesSearchReason?((uint64_t)v243, (uint64_t)v253, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?), v253[3])&& (uint64_t v150 = v254, outlined release of AssistantDataSnapshot?(v243), (v150 & 1) != 0))
  {
    if (v43[280] != -1) {
      swift_once();
    }
    unint64_t v200 = type metadata accessor for Logger();
    __swift_project_value_buffer(v200, (uint64_t)static Logger.pommes);
    unint64_t v201 = Logger.logObject.getter();
    uint64_t v202 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v201, v202))
    {
      uint64_t v203 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v203 = 0;
      _os_log_impl(&dword_1C8F83000, v201, v202, "Restrictions: explicit language disallowed. Adding .siriExplicitLanguageDisallowed", v203, 2u);
      MEMORY[0x1CB77E470](v203, -1, -1);
    }

    lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, MEMORY[0x1E4F88E18]);
    static Message.with(_:)();
    uint64_t v204 = (void (*)(_OWORD *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
    uint64_t v206 = v205;
    uint64_t v207 = *v205;
    BOOL v208 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v206 = v207;
    if ((v208 & 1) == 0)
    {
      uint64_t v207 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v207 + 16) + 1, 1, v207);
      *uint64_t v206 = v207;
    }
    uint64_t v210 = *(void *)(v207 + 16);
    uint64_t v209 = *(void *)(v207 + 24);
    if (v210 >= v209 >> 1)
    {
      uint64_t v207 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v209 > 1, v210 + 1, 1, v207);
      *uint64_t v206 = v207;
    }
    *(void *)(v207 + 16) = v210 + 1;
    uint64_t v211 = v207
         + ((*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80))
         + *(void *)(v236 + 72) * v210;
    uint64_t v46 = v238;
    (*(void (**)(unint64_t, char *, uint64_t))(v236 + 32))(v211, v221, v238);
    v204(v250, 0);
  }
  else
  {
    if (v43[280] != -1) {
      swift_once();
    }
    uint64_t v151 = type metadata accessor for Logger();
    __swift_project_value_buffer(v151, (uint64_t)static Logger.pommes);
    uint64_t v152 = Logger.logObject.getter();
    uint64_t v153 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v152, v153))
    {
      uint64_t v154 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v154 = 0;
      _os_log_impl(&dword_1C8F83000, v152, v153, "Restrictions: skipping .siriExplicitLanguageDisallowed", v154, 2u);
      MEMORY[0x1CB77E470](v154, -1, -1);
    }
  }
  uint64_t v155 = *(void *)(v240 + 112);
  if (!v155) {
    goto LABEL_104;
  }
  uint64_t v156 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v155 + 120);
  uint64_t v157 = swift_retain();
  v156(v244, v157);
  swift_release();
  outlined init with take of PommesSearchReason?((uint64_t)v244, (uint64_t)&v245, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  if (!*((void *)&v246 + 1)) {
    goto LABEL_104;
  }
  v251[0] = v247;
  v251[1] = v248;
  v252[0] = v249[0];
  *(_OWORD *)((char *)v252 + 10) = *(_OWORD *)((char *)v249 + 10);
  v250[0] = v245;
  v250[1] = v246;
  outlined release of AssistantDataSnapshot?(v244);
  outlined init with take of PommesSearchReason?((uint64_t)v251, (uint64_t)v258, &demangling cache variable for type metadata for AssistantDataSnapshot.ContentRestriction?);
  outlined init with take of PommesSearchReason?((uint64_t)v258, (uint64_t)&v259, &demangling cache variable for type metadata for AssistantDataSnapshot.ContentRestriction?);
  if ((v260 & 1) == 0)
  {
    uint64_t v240 = v259;
    if (v43[280] != -1) {
      swift_once();
    }
    uint64_t v212 = type metadata accessor for Logger();
    __swift_project_value_buffer(v212, (uint64_t)static Logger.pommes);
    uint64_t v213 = Logger.logObject.getter();
    uint64_t v214 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v213, v214))
    {
      uint64_t v215 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v215 = 0;
      _os_log_impl(&dword_1C8F83000, v213, v214, "Restrictions: adding media content rating restrictions", v215, 2u);
      MEMORY[0x1CB77E470](v215, -1, -1);
    }

    MEMORY[0x1F4188790](v216);
    v217[-4] = v219;
    *(_OWORD *)&v217[-3] = v240;
    lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions and conformance Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions, MEMORY[0x1E4F89B38]);
    static Message.with(_:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.contentRatingRestrictions.setter();
  }
  else
  {
LABEL_104:
    if (v43[280] != -1) {
      swift_once();
    }
    os_log_t v158 = type metadata accessor for Logger();
    __swift_project_value_buffer(v158, (uint64_t)static Logger.pommes);
    uint64_t v159 = Logger.logObject.getter();
    uint64_t v160 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v159, v160))
    {
      uint64_t v161 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v161 = 0;
      _os_log_impl(&dword_1C8F83000, v159, v160, "Restrictions: skipping media content rating restrictions", v161, 2u);
      MEMORY[0x1CB77E470](v161, -1, -1);
    }
  }
  if (*(void *)(v235 + *((int *)v228 + 13))) {
    swift_bridgeObjectRetain();
  }
  DeviceRestrictions.init(aceValue:)();
  uint64_t v162 = v234;
  static DeviceRestrictions.starkMode.getter();
  lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions, MEMORY[0x1E4FA5298]);
  uint64_t v163 = v237;
  uint64_t v164 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v165 = *(void (**)(char *, uint64_t))(v45 + 8);
  v165(v162, v163);
  if (v164)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v166 = type metadata accessor for Logger();
    __swift_project_value_buffer(v166, (uint64_t)static Logger.pommes);
    uint64_t v167 = Logger.logObject.getter();
    uint64_t v168 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v167, v168))
    {
      uint64_t v169 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v169 = 0;
      _os_log_impl(&dword_1C8F83000, v167, v168, "Restrictions: Stark mode. Adding .restrictionPrimaryDisplayDisabled (.advancedCar)", v169, 2u);
      MEMORY[0x1CB77E470](v169, -1, -1);
    }

    lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, MEMORY[0x1E4F88E18]);
    static Message.with(_:)();
    uint64_t v170 = (void (*)(unsigned char *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
    uint64_t v172 = v171;
    uint64_t v173 = *v171;
    uint64_t v174 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v172 = v173;
    if ((v174 & 1) == 0)
    {
      uint64_t v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v173 + 16) + 1, 1, v173);
      *uint64_t v172 = v173;
    }
    uint64_t v176 = *(void *)(v173 + 16);
    uint64_t v175 = *(void *)(v173 + 24);
    if (v176 >= v175 >> 1)
    {
      uint64_t v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v175 > 1, v176 + 1, 1, v173);
      *uint64_t v172 = v173;
    }
    *(void *)(v173 + 16) = v176 + 1;
    uint64_t v46 = v238;
    (*(void (**)(unint64_t, char *, uint64_t))(v236 + 32))(v173+ ((*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80))+ *(void *)(v236 + 72) * v176, v229, v238);
    v170(v241, 0);
    uint64_t v44 = v232;
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v177 = type metadata accessor for Logger();
    __swift_project_value_buffer(v177, (uint64_t)static Logger.pommes);
    uint64_t v178 = Logger.logObject.getter();
    uint64_t v179 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v178, v179))
    {
      uint64_t v180 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v180 = 0;
      _os_log_impl(&dword_1C8F83000, v178, v179, "Restrictions: skipping .restrictionPrimaryDisplayDisabled (.advancedCar)", v180, 2u);
      MEMORY[0x1CB77E470](v180, -1, -1);
    }
  }
  unint64_t v181 = v234;
  static DeviceRestrictions.carDNDMode.getter();
  unint64_t v182 = v237;
  unint64_t v183 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v165(v181, v182);
  if (v183)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    unint64_t v184 = type metadata accessor for Logger();
    __swift_project_value_buffer(v184, (uint64_t)static Logger.pommes);
    unint64_t v185 = Logger.logObject.getter();
    uint64_t v186 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v185, v186))
    {
      unint64_t v187 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v187 = 0;
      _os_log_impl(&dword_1C8F83000, v185, v186, "Restrictions: car DND mode. Adding .restrictionPrimaryDisplayDisabled (.carDnd)", v187, 2u);
      MEMORY[0x1CB77E470](v187, -1, -1);
    }

    lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, MEMORY[0x1E4F88E18]);
    static Message.with(_:)();
    v188 = (void (*)(unsigned char *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
    v190 = v189;
    uint64_t v191 = *v189;
    uint64_t v192 = swift_isUniquelyReferenced_nonNull_native();
    ValueMetadata *v190 = v191;
    if ((v192 & 1) == 0)
    {
      uint64_t v191 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v191 + 16) + 1, 1, v191);
      ValueMetadata *v190 = v191;
    }
    uint64_t v194 = *(void *)(v191 + 16);
    uint64_t v193 = *(void *)(v191 + 24);
    if (v194 >= v193 >> 1)
    {
      uint64_t v191 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v193 > 1, v194 + 1, 1, v191);
      ValueMetadata *v190 = v191;
    }
    *(void *)(v191 + 16) = v194 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v236 + 32))(v191+ ((*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80))+ *(void *)(v236 + 72) * v194, v230, v46);
    v188(v241, 0);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v195 = type metadata accessor for Logger();
    __swift_project_value_buffer(v195, (uint64_t)static Logger.pommes);
    uint64_t v196 = Logger.logObject.getter();
    uint64_t v197 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v196, v197))
    {
      uint64_t v198 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v198 = 0;
      _os_log_impl(&dword_1C8F83000, v196, v197, "Restrictions: skipping .restrictionPrimaryDisplayDisabled (.carDnd)", v198, 2u);
      MEMORY[0x1CB77E470](v198, -1, -1);
    }
  }
  return ((uint64_t (*)(char *, uint64_t))v165)(v44, v237);
}

uint64_t partial apply for closure #7 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #7 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t closure #7 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = Apple_Parsec_Search_PegasusQueryContext.countryCode.getter();
  uint64_t result = MEMORY[0x1CB7794C0](v6);
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions.movieRestriction.setter();
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a4 <= 0x7FFFFFFF) {
    return Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions.tvRestriction.setter();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t DataProviderManager.addPerson(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Person();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v26 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a2, a1, v14);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v16 = *((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    uint64_t v26 = 0;
    uint64_t v27 = v11;
    uint64_t v28 = v13;
    uint64_t v29 = v8;
    uint64_t v30 = v5;
    uint64_t v31 = v4;
    uint64_t v34 = v35;
    uint64_t v17 = v36;
    uint64_t v32 = a2;
    uint64_t v33 = *((void *)&v35 + 1);
    swift_bridgeObjectRetain();
    outlined consume of AssistantDataSnapshot?(v34, v33, v17, v16);
    if (*(void *)(v16 + 16))
    {
      long long v18 = *(_OWORD *)(v16 + 96);
      long long v38 = *(_OWORD *)(v16 + 80);
      long long v39 = v18;
      long long v40 = *(_OWORD *)(v16 + 112);
      uint64_t v41 = *(void *)(v16 + 128);
      long long v19 = *(_OWORD *)(v16 + 48);
      long long v35 = *(_OWORD *)(v16 + 32);
      long long v36 = v19;
      long long v37 = *(_OWORD *)(v16 + 64);
      outlined retain of AssistantDataSnapshot.MeCard((uint64_t)&v35);
      uint64_t v20 = swift_bridgeObjectRelease();
      MEMORY[0x1F4188790](v20);
      lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Person and conformance Apple_Parsec_Siri_V2alpha_Person, MEMORY[0x1E4F88998]);
      uint64_t v21 = v27;
      uint64_t v22 = v31;
      static Message.with(_:)();
      outlined release of AssistantDataSnapshot.MeCard((uint64_t)&v35);
      uint64_t v23 = v30;
      uint64_t v24 = v28;
      uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v30 + 32))(v28, v21, v22);
      MEMORY[0x1F4188790](v25);
      static Message.with(_:)();
      Apple_Parsec_Siri_V2alpha_SiriPegasusContext.person.setter();
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v24, v22);
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t outlined retain of AssistantDataSnapshot.MeCard(uint64_t a1)
{
  return a1;
}

uint64_t closure #1 in AssistantDataSnapshot.MeCard.toPersonProtobuf()(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ContactAddress();
  uint64_t v20 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2[1])
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.givenName.setter();
  }
  if (a2[3])
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.middleName.setter();
  }
  if (a2[5])
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.familyName.setter();
  }
  if (a2[9])
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.fullName.setter();
  }
  if (a2[7])
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.nickname.setter();
  }
  if (a2[12])
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.contactIdentifier.setter();
  }
  uint64_t v7 = a2[10];
  uint64_t v23 = v7;
  int64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    v19[0] = a1;
    uint64_t v21 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v10 = (_OWORD *)(v7 + 32);
    v19[1] = v20 + 32;
    do
    {
      long long v11 = v10[1];
      v22[0] = *v10;
      v22[1] = v11;
      long long v12 = v10[2];
      long long v13 = v10[3];
      long long v14 = v10[5];
      v22[4] = v10[4];
      v22[5] = v14;
      v22[2] = v12;
      v22[3] = v13;
      MEMORY[0x1F4188790](v9);
      v19[-2] = v22;
      outlined retain of AssistantDataSnapshot.MeCard.ContactAddress((uint64_t)v22);
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_Person and conformance Apple_Parsec_Siri_V2alpha_Person(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ContactAddress and conformance Apple_Parsec_Siri_V2alpha_ContactAddress, MEMORY[0x1E4F89130]);
      static Message.with(_:)();
      outlined release of AssistantDataSnapshot.MeCard.ContactAddress((uint64_t)v22);
      uint64_t v15 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
        uint64_t v15 = v21;
      }
      unint64_t v17 = *(void *)(v15 + 16);
      unint64_t v16 = *(void *)(v15 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v15 = v21;
      }
      *(void *)(v15 + 16) = v17 + 1;
      uint64_t v9 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v20 + 32))(v15+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(void *)(v20 + 72) * v17, v6, v4);
      uint64_t v21 = v15;
      v10 += 6;
      --v8;
    }
    while (v8);
    outlined release of [LNActionMetadata]((uint64_t)&v23);
  }
  return Apple_Parsec_Siri_V2alpha_Person.addresses.setter();
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_Person and conformance Apple_Parsec_Siri_V2alpha_Person(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in AssistantDataSnapshot.MeCard.ContactAddress.toContactAddressProtobuf()(uint64_t a1)
{
  return closure #1 in AssistantDataSnapshot.MeCard.ContactAddress.toContactAddressProtobuf()(a1, *(void **)(v1 + 16));
}

uint64_t closure #1 in AssistantDataSnapshot.MeCard.ContactAddress.toContactAddressProtobuf()(uint64_t a1, void *a2)
{
  if (a2[1])
  {
    swift_bridgeObjectRetain();
    uint64_t result = Apple_Parsec_Siri_V2alpha_Person.givenName.setter();
  }
  if (a2[3])
  {
    swift_bridgeObjectRetain();
    uint64_t result = Apple_Parsec_Siri_V2alpha_Person.middleName.setter();
  }
  if (a2[5])
  {
    swift_bridgeObjectRetain();
    uint64_t result = Apple_Parsec_Siri_V2alpha_Person.familyName.setter();
  }
  if (a2[7])
  {
    swift_bridgeObjectRetain();
    uint64_t result = Apple_Parsec_Siri_V2alpha_Person.nickname.setter();
  }
  if (a2[9])
  {
    swift_bridgeObjectRetain();
    uint64_t result = Apple_Parsec_Siri_V2alpha_Person.fullName.setter();
  }
  if (a2[11])
  {
    swift_bridgeObjectRetain();
    return Apple_Parsec_Siri_V2alpha_ContactAddress.countryCode.setter();
  }
  return result;
}

uint64_t outlined release of [LNActionMetadata](uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AssistantDataSnapshot.MeCard(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in DataProviderManager.addPerson(to:)()
{
  return closure #1 in DataProviderManager.addPerson(to:)();
}

uint64_t closure #1 in DataProviderManager.addPerson(to:)()
{
  return Apple_Parsec_Siri_V2alpha_Person.nickname.setter();
}

void DataProviderManager.addAmpState(to:searchRequest:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v42)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>));
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (**v99)(char *, uint64_t *);
  void (**v100)(char *, uint64_t);
  void (**v101)(char *, void, uint64_t);
  unsigned int v102;
  void (*v103)(char *, unint64_t, uint64_t *);
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  void v111[3];
  uint64_t v112[13];

  uint64_t v4 = v3;
  v112[12] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v85 = (uint64_t)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  os_log_type_t v92 = *(void *)(v93 - 8);
  MEMORY[0x1F4188790](v93);
  uint64_t v90 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v91 = (uint64_t)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  uint64_t v94 = *(void *)(v95 - 8);
  MEMORY[0x1F4188790](v95);
  unint64_t v84 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v15 = *(void *)(v105 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v105);
  uint64_t v107 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  os_log_type_t v106 = (char *)&v82 - v18;
  char v109 = (uint64_t *)type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  uint64_t v19 = *(v109 - 1);
  MEMORY[0x1F4188790](v109);
  uint64_t v104 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v86 = v9;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  unsigned int v88 = a3;
  unint64_t v87 = v8;
  v21(a3, a1, v8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  unint64_t v97 = v4;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v96 = 0;
  outlined init with take of PommesSearchReason?((uint64_t)v111, (uint64_t)v112, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  uint64_t v22 = *(void *)(a2 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 92));
  uint64_t v23 = *(void *)(v22 + 16);
  if (v23)
  {
    uint64_t v83 = a2;
    uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t *))(v19 + 16);
    uint64_t v24 = v19 + 16;
    unint64_t v103 = v25;
    unint64_t v26 = v22 + ((*(unsigned __int8 *)(v24 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 64));
    uint64_t v102 = *MEMORY[0x1E4F892A8];
    uint64_t v101 = (void (**)(char *, void, uint64_t))(v15 + 104);
    unint64_t v100 = (void (**)(char *, uint64_t))(v15 + 8);
    unint64_t v99 = (void (**)(char *, uint64_t *))(v24 - 8);
    char v98 = *(void *)(v24 + 56);
    uint64_t v89 = v22;
    swift_bridgeObjectRetain();
    uint64_t v27 = v104;
    uint64_t v28 = v105;
    uint64_t v29 = v100;
    while (1)
    {
      uint64_t v108 = v23;
      uint64_t v30 = v24;
      v103(v27, v26, v109);
      uint64_t v31 = v106;
      Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
      uint64_t v32 = v107;
      (*v101)(v107, v102, v28);
      lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v33 = v111[0];
      uint64_t v34 = v110;
      long long v35 = *v29;
      (*v29)(v32, v28);
      v35(v31, v28);
      (*v99)(v27, v109);
      if (v33 == v34) {
        break;
      }
      v26 += v98;
      uint64_t v23 = v108 - 1;
      uint64_t v24 = v30;
      if (v108 == 1)
      {
        uint64_t v22 = swift_bridgeObjectRelease();
        a2 = v83;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    outlined release of AssistantDataSnapshot?(v112);
  }
  else
  {
LABEL_6:
    if (one-time initialization token for shared != -1) {
      uint64_t v22 = swift_once();
    }
    long long v36 = static PerformanceUtil.shared;
    MEMORY[0x1F4188790](v22);
    uint64_t v37 = v97;
    uint64_t v78 = v97;
    os_log_type_t v79 = a2;
    uint64_t v80 = v112;
    uint64_t v38 = type metadata accessor for Date();
    uint64_t v39 = *(void *)(v38 - 8);
    MEMORY[0x1F4188790](v38);
    uint64_t v41 = (char *)&v82 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
    Date.init()();
    int v42 = *(void (**)(void *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v36 + 200);
    uint64_t v80 = &v77;
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MediaUserState]?);
    LOBYTE(v78) = 2;
    uint64_t v43 = v96;
    v42(v111, 0xD00000000000003FLL, 0x80000001C919FFE0, 0, v41, "SiriInformationSearch/DataProviderManager.swift", 47, 2, 557, "addAmpState(to:searchRequest:)", 30, v78, partial apply for closure #2 in DataProviderManager.addAmpState(to:searchRequest:));
    (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
    outlined release of AssistantDataSnapshot?(v112);
    uint64_t v44 = v111[0];
    if (v111[0])
    {
      uint64_t v45 = *(void *)(v37 + 88);
      if (v45)
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
        char v109 = &v82;
        MEMORY[0x1F4188790](v46 - 8);
        uint64_t v48 = (char *)&v82 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v49 = type metadata accessor for DispatchTime();
        uint64_t v107 = (char *)&v82;
        uint64_t v50 = *(void *)(v49 - 8);
        MEMORY[0x1F4188790](v49);
        uint64_t v52 = (char *)&v82 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
        static DispatchTime.now()();
        uint64_t v53 = type metadata accessor for DispatchTimeInterval();
        uint64_t v54 = *(void *)(v53 - 8);
        uint64_t v108 = v43;
        char v55 = v54;
        MEMORY[0x1F4188790](v53);
        id v57 = (uint64_t *)((char *)&v82 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
        *id v57 = 1;
        (*(void (**)(void *, void, uint64_t))(v55 + 104))(v57, *MEMORY[0x1E4FBCAC0], v53);
        MEMORY[0x1CB77C970](v52, v57);
        (*(void (**)(void *, uint64_t))(v55 + 8))(v57, v53);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v49);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v48, 0, 1, v49);
        unsigned __int8 v58 = (*(uint64_t (**)(char *))(*(void *)v45 + 168))(v48);
        outlined destroy of MediaUserStateCenter?((uint64_t)v48, &demangling cache variable for type metadata for DispatchTime?);
        uint64_t v59 = v92;
        uint64_t v60 = (uint64_t)v90;
        os_log_type_t v61 = v93;
        (*(void (**)(char *, void, uint64_t))(v92 + 104))(v90, *MEMORY[0x1E4F89B48], v93);
        swift_bridgeObjectRetain();
        uint64_t v62 = specialized Sequence.compactMap<A>(_:)(v44, v58);
        swift_bridgeObjectRelease();
        uint64_t v63 = v91;
        createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(v62, v60, 0, v91);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v60, v61);
        uint64_t v64 = v94;
        uint64_t v65 = v95;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v63, 1, v95) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v63, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
        }
        else
        {
          unint64_t v70 = v84;
          (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v84, v63, v65);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSlice>);
          unsigned __int8 v71 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
          uint64_t v72 = swift_allocObject();
          *(_OWORD *)(v72 + 16) = xmmword_1C91947A0;
          (*(void (**)(unint64_t, char *, uint64_t))(v64 + 16))(v72 + v71, v70, v65);
          uint64_t v73 = v85;
          uint64_t v74 = v88;
          DataProviderManager.appendProfileSlices(_:to:)(v72, v88, v85);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          (*(void (**)(char *, uint64_t))(v64 + 8))(v70, v65);
          os_log_type_t v75 = v86;
          uint64_t v76 = v87;
          (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v74, v87);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v74, v73, v76);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      unint64_t v66 = type metadata accessor for Logger();
      __swift_project_value_buffer(v66, (uint64_t)static Logger.pommes);
      char v67 = Logger.logObject.getter();
      unint64_t v68 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v67, v68))
      {
        unint64_t v69 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v69 = 0;
        _os_log_impl(&dword_1C8F83000, v67, v68, "DataProviderManager media user state is nil", v69, 2u);
        MEMORY[0x1CB77E470](v69, -1, -1);
      }
    }
  }
}

uint64_t partial apply for closure #2 in DataProviderManager.addAmpState(to:searchRequest:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in DataProviderManager.addAmpState(to:searchRequest:)(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t closure #2 in DataProviderManager.addAmpState(to:searchRequest:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v28 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v8);
  uint64_t v10 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 0, 1, v10);
  uint64_t v11 = a1[2];
  uint64_t v25 = a1[15];
  uint64_t v26 = v11;
  uint64_t v12 = type metadata accessor for DispatchTime();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v25 - v17;
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  uint64_t v19 = type metadata accessor for DispatchTimeInterval();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (uint64_t *)((char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v22 = 1;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, *MEMORY[0x1E4FBCAC0], v19);
  MEMORY[0x1CB77C970](v18, v22);
  (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v18, v12);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, char *))(*(void *)v9 + 240))(v8, v28, v25, v26, v16);
  swift_unknownObjectRelease();
  v23(v16, v12);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t createAMPUserState(mediaUserState:muxUserInfo:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v89 = a2;
  uint64_t v91 = a1;
  uint64_t matched = type metadata accessor for Apple_Parsec_Siri_V2alpha_ITunesMatchSubscriptionStatus();
  MEMORY[0x1F4188790](matched - 8);
  unint64_t v86 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpSubscriptionStatus();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AmpUserState?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1C8F83000, v15, v16, "Building server AMP user state from the media user state", v17, 2u);
    MEMORY[0x1CB77E470](v17, -1, -1);
  }

  uint64_t v18 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);
  uint64_t v88 = v8 + 56;
  unint64_t v87 = v18;
  v18((uint64_t)v13, 1, 1, v7);
  uint64_t v19 = v91[3];
  uint64_t v20 = v91[4];
  __swift_project_boxed_opaque_existential_1(v91, v19);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v20 + 8))(&v97, v19, v20);
  if (!v98)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v97, (uint64_t *)&demangling cache variable for type metadata for MusicUserState?);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      int v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v42 = 0;
      _os_log_impl(&dword_1C8F83000, v40, v41, "The active music user state is nil", v42, 2u);
      MEMORY[0x1CB77E470](v42, -1, -1);
    }

    return outlined init with take of PommesSearchReason?((uint64_t)v13, a3, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AmpUserState?);
  }
  outlined init with take of AppDataProviding(&v97, (uint64_t)v99);
  Apple_Parsec_Siri_V2alpha_AmpUserState.init()();
  uint64_t v21 = v100;
  uint64_t v22 = v101;
  __swift_project_boxed_opaque_existential_1(v99, v100);
  (*(void (**)(uint64_t, uint64_t))(v22 + 40))(v21, v22);
  Apple_Parsec_Siri_V2alpha_AmpUserState.ampSubscriptionStatus.setter();
  uint64_t v23 = v100;
  uint64_t v24 = v101;
  __swift_project_boxed_opaque_existential_1(v99, v100);
  uint64_t v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24);

  uint64_t v84 = v8;
  if (v25
    || (uint64_t v44 = v100,
        uint64_t v45 = v101,
        __swift_project_boxed_opaque_existential_1(v99, v100),
        (*(void (**)(uint64_t, uint64_t))(v45 + 16))(v44, v45),
        !v46))
  {
    uint64_t v26 = v100;
    uint64_t v27 = v101;
    __swift_project_boxed_opaque_existential_1(v99, v100);
    uint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v27 + 24))(v26, v27);
    if (v28)
    {
      uint64_t v29 = v28;
      id v30 = v28;
      id v31 = v29;
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        uint64_t v82 = v7;
        uint64_t v36 = v35;
        *(void *)&long long v97 = v35;
        *(_DWORD *)uint64_t v34 = 136315138;
        uint64_t v83 = a3;
        swift_getErrorValue();
        uint64_t v37 = Error.localizedDescription.getter();
        uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)&v97);
        a3 = v83;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C8F83000, v32, v33, "Last error from music token refresh: %s", v34, 0xCu);
        swift_arrayDestroy();
        uint64_t v39 = v36;
        uint64_t v7 = v82;
        MEMORY[0x1CB77E470](v39, -1, -1);
        MEMORY[0x1CB77E470](v34, -1, -1);
      }
      else
      {
      }
      uint64_t v47 = v100;
      uint64_t v48 = v101;
      __swift_project_boxed_opaque_existential_1(v99, v100);
      uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 24))(v47, v48);
      uint64_t v8 = v84;
      if (!v49)
      {

        goto LABEL_21;
      }
      uint64_t v50 = (void *)v49;
      uint64_t v51 = (void *)_convertErrorToNSError(_:)();

      uint64_t result = (uint64_t)objc_msgSend(v51, sel_code);
      if (result < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
      }
      else if (result <= 0x7FFFFFFF)
      {
        Apple_Parsec_Siri_V2alpha_AmpUserState.tokenErrorCode.setter();

        goto LABEL_21;
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    Apple_Parsec_Siri_V2alpha_AmpUserState.userToken.setter();
  }
LABEL_21:
  uint64_t v85 = v10;
  uint64_t v52 = *(void *)(v89 + 16);
  if (!v52) {
    goto LABEL_35;
  }
  uint64_t v82 = v7;
  uint64_t v81 = v13;
  uint64_t v83 = a3;
  uint64_t v53 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  while (1)
  {
    uint64_t v54 = *v53;
    uint64_t v90 = *(v53 - 1);
    uint64_t v55 = v53[2];
    uint64_t v92 = v53[1];
    uint64_t v56 = v53[4];
    id v95 = (id)v53[5];
    uint64_t v57 = v91[3];
    uint64_t v58 = v91[4];
    __swift_project_boxed_opaque_existential_1(v91, v57);
    uint64_t v59 = *(uint64_t (**)(uint64_t, uint64_t))(v58 + 40);
    uint64_t v94 = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v93 = v56;
    swift_bridgeObjectRetain();
    id v60 = v95;
    uint64_t v61 = v59(v57, v58);
    if (!v62) {
      goto LABEL_23;
    }
    if (v61 == v92 && v62 == v55) {
      break;
    }
    char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v64) {
      goto LABEL_33;
    }
LABEL_23:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v53 += 7;
    if (!--v52)
    {
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
LABEL_33:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Apple_Parsec_Siri_V2alpha_AmpUserState.sharedUserID.setter();
LABEL_34:
  a3 = v83;
  uint64_t v13 = v81;
  uint64_t v7 = v82;
  uint64_t v8 = v84;
LABEL_35:
  uint64_t v65 = v100;
  uint64_t v66 = v101;
  __swift_project_boxed_opaque_existential_1(v99, v100);
  (*(void (**)(uint64_t, uint64_t))(v66 + 64))(v65, v66);
  char v67 = v85;
  Apple_Parsec_Siri_V2alpha_AmpUserState.itunesSubscriptionStatus.setter();
  uint64_t v68 = v100;
  uint64_t v69 = v101;
  __swift_project_boxed_opaque_existential_1(v99, v100);
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v69);
  Apple_Parsec_Siri_V2alpha_AmpUserState.isUserHistoryModifiable.setter();
  uint64_t v70 = v100;
  uint64_t v71 = v101;
  __swift_project_boxed_opaque_existential_1(v99, v100);
  (*(void (**)(uint64_t, uint64_t))(v71 + 72))(v70, v71);
  if (v72) {
    Apple_Parsec_Siri_V2alpha_AmpUserState.xpAbCookie.setter();
  }
  uint64_t v73 = v100;
  uint64_t v74 = v101;
  __swift_project_boxed_opaque_existential_1(v99, v100);
  (*(void (**)(uint64_t, uint64_t))(v74 + 80))(v73, v74);
  if (v75) {
    Apple_Parsec_Siri_V2alpha_AmpUserState.itfeCookie.setter();
  }
  Apple_Parsec_Siri_V2alpha_AmpUserState.isDefaultUser.setter();
  uint64_t v76 = v100;
  uint64_t v77 = v101;
  __swift_project_boxed_opaque_existential_1(v99, v100);
  (*(void (**)(uint64_t, uint64_t))(v77 + 48))(v76, v77);
  Apple_Parsec_Siri_V2alpha_AmpUserState.eligibleOffers.setter();
  uint64_t v78 = v100;
  uint64_t v79 = v101;
  __swift_project_boxed_opaque_existential_1(v99, v100);
  (*(void (**)(uint64_t, uint64_t))(v79 + 56))(v78, v79);
  Apple_Parsec_Siri_V2alpha_AmpUserState.isSubscribedToGlide.setter();
  outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AmpUserState?);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v67, v7);
  v87(a3, 0, 1, v7);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
}

double protocol witness for MediaUserState.musicUserState.getter in conformance ICMediaUserState@<D0>(uint64_t a1@<X8>)
{
  return protocol witness for MediaUserState.musicUserState.getter in conformance ICMediaUserState((SEL *)&selRef_music, &lazy cache variable for type metadata for ICMusicUserState, (uint64_t)&protocol witness table for ICMusicUserState, a1);
}

uint64_t protocol witness for MusicUserState.ampSubscriptionStatus.getter in conformance ICMusicUserState@<X0>(uint64_t a1@<X8>)
{
  return ICMusicUserState.ampSubscriptionStatus.getter(a1);
}

uint64_t ICMusicUserState.ampSubscriptionStatus.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(v1, sel_subscriptionStatus);
  if ((v4 || (id v4 = objc_msgSend(v2, sel_lightweightSubscriptionStatus)) != 0)
    && (__int16 v5 = ~(unsigned __int16)objc_msgSend(v4, sel_capabilities), v4, (v5 & 0x101) == 0))
  {
    uint64_t v6 = (unsigned int *)MEMORY[0x1E4F89578];
  }
  else
  {
    uint64_t v6 = (unsigned int *)MEMORY[0x1E4F89580];
  }
  uint64_t v7 = *v6;
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpSubscriptionStatus();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);

  return v9(a1, v7, v8);
}

id protocol witness for MusicUserState.lastError.getter in conformance ICMusicUserState()
{
  id v1 = objc_msgSend(*v0, sel_libraryAuthTokenStatus);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v1, sel_lastError);

  return v3;
}

id protocol witness for MusicUserState.userToken.getter in conformance ICMusicUserState()
{
  id v1 = objc_msgSend(*v0, sel_libraryAuthTokenStatus);
  uint64_t v2 = v1;
  if (!v1) {
    return 0;
  }
  id v3 = objc_msgSend(v1, sel_token);

  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_token);

    id v3 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v3;
}

uint64_t protocol witness for MusicUserState.itunesSubscriptionStatus.getter in conformance ICMusicUserState@<X0>(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(*v1, sel_subscriptionStatus);
  if (v3 && (id v4 = v3, v5 = objc_msgSend(v3, sel_isMatchEnabled), v4, v5)) {
    uint64_t v6 = (unsigned int *)MEMORY[0x1E4F89B00];
  }
  else {
    uint64_t v6 = (unsigned int *)MEMORY[0x1E4F89B08];
  }
  uint64_t v7 = *v6;
  uint64_t matched = type metadata accessor for Apple_Parsec_Siri_V2alpha_ITunesMatchSubscriptionStatus();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(matched - 8) + 104);

  return v9(a1, v7, matched);
}

id protocol witness for MusicUserState.isUserHistoryModifiable.getter in conformance ICMusicUserState()
{
  return objc_msgSend(*v0, sel_usesListeningHistory);
}

uint64_t protocol witness for MusicUserState.xpabCookie.getter in conformance ICMusicUserState(uint64_t a1, uint64_t a2)
{
  return protocol witness for MusicUserState.xpabCookie.getter in conformance ICMusicUserState(a1, a2, (SEL *)&selRef_xpab);
}

uint64_t protocol witness for MusicUserState.xpabCookie.getter in conformance ICMusicUserState(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v5 = objc_msgSend(*v3, sel_cookies);
  uint64_t v6 = v5;
  if (!v5) {
    return 0;
  }
  id v7 = [v5 *a3];

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v8;
}

uint64_t protocol witness for MusicUserState.itfeCookie.getter in conformance ICMusicUserState(uint64_t a1, uint64_t a2)
{
  return protocol witness for MusicUserState.xpabCookie.getter in conformance ICMusicUserState(a1, a2, (SEL *)&selRef_itfe);
}

void *protocol witness for MusicUserState.eligibleOffers.getter in conformance ICMusicUserState()
{
  return ICMusicUserState.eligibleOffers.getter();
}

void *ICMusicUserState.eligibleOffers.getter()
{
  id v1 = objc_msgSend(v0, sel_subscriptionStatus);
  if (!v1
    || (v2 = v1, id v3 = objc_msgSend(v1, sel_eligibleOffers), v2, !v3))
  {
    id v4 = objc_msgSend(v0, sel_lightweightSubscriptionStatus);
    if (!v4) {
      return (void *)MEMORY[0x1E4FBC860];
    }
    id v5 = v4;
    id v3 = objc_msgSend(v4, sel_eligibleOffers);

    if (!v3) {
      return (void *)MEMORY[0x1E4FBC860];
    }
  }
  type metadata accessor for ICSubscriptionStatusOfferType(0);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v14 = v9[2];
      unint64_t v13 = v9[3];
      if (v14 >= v13 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v9);
      }
      ++v8;
      v9[2] = v14 + 1;
      uint64_t v15 = &v9[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
    }
    while (v7 != v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  return v9;
}

id protocol witness for MusicUserState.isSubscribedToGlide.getter in conformance ICMusicUserState()
{
  id v1 = *v0;
  id v2 = objc_msgSend(*v0, sel_subscriptionStatus);
  if (v2
    || (id result = objc_msgSend(v1, sel_lightweightSubscriptionStatus),
        (id v2 = result) != 0))
  {
    id v4 = objc_msgSend(v2, sel_statusType);

    return (id)(v4 == (id)3);
  }
  return result;
}

uint64_t createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a1 && *(void *)(a1 + 16))
  {
    MEMORY[0x1F4188790](v10);
    *(void *)&v21[-16] = a2;
    v21[-8] = a3 & 1;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5Tm((void (*)(uint64_t))partial apply for closure #1 in createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:), (uint64_t)&v21[-32], a1, (uint64_t)v21, MEMORY[0x1E4F89328], (void (*)(void, uint64_t, void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4F88EE0]);
    Apple_Parsec_Siri_V2alpha_ProfileSlice.init()();
    (*(void (**)(unsigned char *, void, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E4F892A8], v8);
    Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
    Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
    uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a4, 0, 1, v13);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1C8F83000, v16, v17, "createAmpUserStateSlice failed to create the AMP user state", v18, 2u);
      MEMORY[0x1CB77E470](v18, -1, -1);
    }

    uint64_t v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
    return v20(a4, 1, 1, v19);
  }
}

uint64_t partial apply for closure #1 in createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(uint64_t a1)
{
  return closure #1 in createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t closure #1 in createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(uint64_t a1, uint64_t a2, int a3)
{
  int v32 = a3;
  uint64_t v31 = a2;
  uint64_t v33 = a1;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v28 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v27 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  os_log_type_t v17 = (char *)&v27 - v16;
  uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
  v34[3] = v18;
  v34[4] = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AmpUserState and conformance Apple_Parsec_Siri_V2alpha_AmpUserState();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(boxed_opaque_existential_1, v33, v18);
  defaultAnyTypeURLPrefix.getter();
  uint64_t v20 = (void *)v34[6];
  Google_Protobuf_Any.init(message:partial:typePrefix:)();
  if (v20)
  {

    uint64_t v21 = 1;
  }
  else
  {
    uint64_t v21 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v17, v21, 1, v5);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.init()();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4F89700], v8);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  outlined init with copy of Google_Protobuf_Any?((uint64_t)v17, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v5) == 1)
  {
    Google_Protobuf_Any.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v27, v15, v5);
  }
  uint64_t v23 = v30;
  uint64_t v22 = v31;
  uint64_t v25 = v28;
  uint64_t v24 = v29;
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v25, v22, v23);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
  return outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for Google_Protobuf_Any?);
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AmpUserState and conformance Apple_Parsec_Siri_V2alpha_AmpUserState()
{
  unint64_t result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AmpUserState and conformance Apple_Parsec_Siri_V2alpha_AmpUserState;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AmpUserState and conformance Apple_Parsec_Siri_V2alpha_AmpUserState)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AmpUserState and conformance Apple_Parsec_Siri_V2alpha_AmpUserState);
  }
  return result;
}

uint64_t outlined init with copy of Google_Protobuf_Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSlice.summarizedDescription.getter()
{
  uint64_t v35 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v0 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v34 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = 0;
  unint64_t v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  v6._uint64_t countAndFlagsBits = 0x616C202020200A7BLL;
  v6._object = (void *)0xED0000203A6C6562;
  String.append(_:)(v6);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v7._uint64_t countAndFlagsBits = 0x6C6176202020200ALL;
  v7._object = (void *)0xEE000A5B20736575;
  String.append(_:)(v7);
  uint64_t v8 = Apple_Parsec_Siri_V2alpha_ProfileSlice.values.getter();
  int64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v36 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 16);
    uint64_t v10 = v0 + 16;
    uint64_t v12 = *(unsigned __int8 *)(v10 + 64);
    uint64_t v31 = v8;
    uint64_t v13 = v8 + ((v12 + 32) & ~v12);
    uint64_t v32 = *(void *)(v10 + 56);
    uint64_t v33 = v11;
    uint64_t v14 = (void (**)(char *, uint64_t))(v10 - 8);
    do
    {
      uint64_t v16 = v34;
      uint64_t v15 = v35;
      uint64_t v17 = v10;
      v33(v34, v13, v35);
      uint64_t v18 = Apple_Parsec_Siri_V2alpha_ProfileSliceValue.summarizedDescription.getter();
      uint64_t v20 = v19;
      (*v14)(v16, v15);
      uint64_t v21 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1);
        uint64_t v21 = v36;
      }
      unint64_t v23 = *(void *)(v21 + 16);
      unint64_t v22 = *(void *)(v21 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t v21 = v36;
      }
      *(void *)(v21 + 16) = v23 + 1;
      uint64_t v24 = v21 + 16 * v23;
      *(void *)(v24 + 32) = v18;
      *(void *)(v24 + 40) = v20;
      v13 += v32;
      --v9;
      uint64_t v10 = v17;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x1E4FBC860];
  }
  uint64_t v36 = v21;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 0x7D0A5D090ALL;
  v29._object = (void *)0xE500000000000000;
  String.append(_:)(v29);
  return v37;
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceValue.summarizedDescription.getter()
{
  uint64_t v0 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v20 = *(void *)(v0 - 8);
  uint64_t v21 = v0;
  MEMORY[0x1F4188790](v0);
  uint64_t v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  Swift::String v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(84);
  v11._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v11._object = (void *)0x80000001C91A0440;
  String.append(_:)(v11);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v12._uint64_t countAndFlagsBits = 0xD000000000000014;
  v12._object = (void *)0x80000001C91A0460;
  String.append(_:)(v12);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v13._object = (void *)0x80000001C91A0480;
  v13._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v13);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.getter();
  uint64_t v14 = Google_Protobuf_Any.typeURL.getter();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v2, v21);
  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x202020202020200ALL;
  v18._object = (void *)0xEA00000000007D20;
  String.append(_:)(v18);
  return v22;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

void DataProviderManager.addQueueState(to:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  v60[12] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v49 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v55 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  uint64_t v56 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v48 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v53 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v48 - v15;
  uint64_t v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
  uint64_t v58 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v54 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = v7;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  uint64_t v52 = a2;
  uint64_t v51 = v6;
  v19(a2, a1, v6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v20 = outlined init with take of PommesSearchReason?((uint64_t)v59, (uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  if (one-time initialization token for shared != -1) {
    uint64_t v20 = swift_once();
  }
  uint64_t v21 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v20);
  uint64_t v46 = v3;
  uint64_t v47 = v60;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v26 = *(void (**)(unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(void *)v21 + 200);
  uint64_t v46 = &v45;
  uint64_t v47 = (uint64_t *)v12;
  LOBYTE(v45) = 2;
  v26(0xD000000000000046, 0x80000001C91A03B0, 0, v25, "SiriInformationSearch/DataProviderManager.swift", 47, 2, 587, "addQueueState(to:)", 18, v45, partial apply for closure #1 in DataProviderManager.addQueueState(to:));
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  outlined release of AssistantDataSnapshot?(v60);
  uint64_t v27 = v58;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
    Swift::String v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_1C8F83000, v29, v30, "DataProviderManager queue state is nil", v31, 2u);
      MEMORY[0x1CB77E470](v31, -1, -1);
    }
  }
  else
  {
    uint64_t v32 = v17;
    uint64_t v33 = v54;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v54, v16, v17);
    uint64_t v34 = (uint64_t)v53;
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v53, v33, v17);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v34, 0, 1, v17);
    uint64_t v35 = v55;
    createQueueStateProfileSlice(for:)(v34, v55);
    outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
    uint64_t v36 = v56;
    uint64_t v37 = v57;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v35, 1, v57) == 1)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v32);
      outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
    }
    else
    {
      unint64_t v38 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v48, v35, v37);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSlice>);
      unint64_t v39 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
      uint64_t v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_1C91947A0;
      (*(void (**)(unint64_t, char *, uint64_t))(v36 + 16))(v40 + v39, v38, v37);
      uint64_t v41 = v49;
      uint64_t v42 = v52;
      DataProviderManager.appendProfileSlices(_:to:)(v40, v52, v49);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v37);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v32);
      uint64_t v43 = v50;
      uint64_t v44 = v51;
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v42, v51);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v42, v41, v44);
    }
  }
}

uint64_t partial apply for closure #1 in DataProviderManager.addQueueState(to:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DataProviderManager.addQueueState(to:)(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t closure #1 in DataProviderManager.addQueueState(to:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v26 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  uint64_t v8 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
  uint64_t v9 = a1[2];
  uint64_t v23 = a1[15];
  uint64_t v24 = v9;
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v23 - v15;
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  uint64_t v17 = type metadata accessor for DispatchTimeInterval();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (uint64_t *)((char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v20 = 1;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E4FBCAC0], v17);
  MEMORY[0x1CB77C970](v16, v20);
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v16, v10);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, char *))(*(void *)v7 + 240))(v6, v26, v23, v24, v14);
  swift_unknownObjectRelease();
  v21(v14, v10);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t AudioQueueStateDataProvider.wait(timeout:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x120))() & 1;
}

uint64_t AudioQueueStateManager.wait(timeout:)()
{
  return MEMORY[0x1CB77D100]() & 1;
}

uint64_t AudioQueueStateDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x140))();
}

id AudioQueueStateManager.currentQueueState()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v63 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateItem?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v59 = (uint64_t)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateItem();
  uint64_t v60 = *(void *)(v5 - 8);
  uint64_t v61 = v5;
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v52 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v51 = (char *)&v50 - v8;
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioEntitySource();
  uint64_t v57 = *(void *)(v9 - 8);
  uint64_t v58 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v56 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioState();
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v55 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v53 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
  uint64_t v62 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock), sel_lock);
  uint64_t v17 = *(void **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache);
  uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache);
  char v19 = *(unsigned char *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache + 8);
  uint64_t v21 = *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache);
  unint64_t v20 = *(void *)(v1
                  + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache
                  + 8);
  type metadata accessor for NowPlayingInfo();
  swift_allocObject();
  id v22 = v17;
  swift_bridgeObjectRetain();
  uint64_t v23 = NowPlayingInfo.init(_:_:_:)((uint64_t)v17, v18, v19, v21, v20);
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v50 = v16;
    uint64_t v25 = v62;
    uint64_t v26 = v63;
    Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.init()();
    unint64_t v27 = v24[3] - 1;
    if (v27 > 3) {
      uint64_t v28 = (unsigned int *)MEMORY[0x1E4F88D28];
    }
    else {
      uint64_t v28 = (unsigned int *)qword_1E65847D0[v27];
    }
    uint64_t v31 = v2;
    uint64_t v32 = v13;
    uint64_t v33 = v25;
    (*(void (**)(char *, void, uint64_t))(v54 + 104))(v53, *v28, v55);
    uint64_t v34 = Apple_Parsec_Siri_V2alpha_AmpUserState.ampSubscriptionStatus.setter();
    char v35 = (*(uint64_t (**)(uint64_t))(*v24 + 184))(v34);
    uint64_t v36 = (unsigned int *)MEMORY[0x1E4F89290];
    if ((v35 & 1) == 0) {
      uint64_t v36 = (unsigned int *)MEMORY[0x1E4F89288];
    }
    (*(void (**)(char *, void, uint64_t))(v57 + 104))(v56, *v36, v58);
    uint64_t v37 = Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.source.setter();
    unint64_t v38 = v24[5];
    uint64_t v39 = HIBYTE(v38) & 0xF;
    if ((v38 & 0x2000000000000000) == 0) {
      uint64_t v39 = v24[4] & 0xFFFFFFFFFFFFLL;
    }
    if (v39)
    {
      swift_bridgeObjectRetain();
      uint64_t v37 = Apple_Parsec_Siri_V2alpha_AmpUserState.sharedUserID.setter();
    }
    uint64_t v40 = (*(uint64_t (**)(uint64_t))(*v24 + 192))(v37);
    uint64_t v41 = v61;
    if ((v40 & 0x100000000) == 0) {
      uint64_t v40 = Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.nowPlayingQueueIndex.setter();
    }
    uint64_t v42 = v26;
    if (((*(uint64_t (**)(uint64_t))(*v24 + 200))(v40) & 0x100000000) == 0) {
      Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.nowPlayingQueueCount.setter();
    }
    uint64_t v43 = v59;
    AudioQueueStateManager.audioQueueStateItem(from:)(v24, v59);
    uint64_t v44 = v60;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v43, 1, v41) == 1)
    {
      uint64_t v45 = outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateItem?);
    }
    else
    {
      uint64_t v46 = v15;
      uint64_t v47 = v51;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v51, v43, v41);
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v52, v47, v41);
      Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.audioQueueStateItem.setter();
      uint64_t v48 = v47;
      uint64_t v15 = v46;
      uint64_t v45 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v48, v41);
    }
    uint64_t v49 = v50;
    (*(void (**)(uint64_t))(*v24 + 208))(v45);
    Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.currentListeningToContainer.setter();
    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v42, v15, v32);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v42, 0, 1, v32);
    return objc_msgSend(*(id *)(v31 + v49), sel_unlock);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v63, 1, 1, v13);
    Swift::String v29 = *(void **)(v1 + v16);
    return objc_msgSend(v29, sel_unlock);
  }
}

uint64_t type metadata accessor for NowPlayingInfo()
{
  return self;
}

void *NowPlayingInfo.mediaType.getter()
{
  return NowPlayingInfo.title.getter(MEMORY[0x1E4F77550]);
}

void *NowPlayingInfo.queueIndex.getter(void *result)
{
  if (*result)
  {
    if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v6, 0, sizeof(v6));
    }
    outlined init with take of PommesSearchReason?((uint64_t)v6, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v8)
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if (swift_dynamicCast())
      {
        unsigned int v2 = objc_msgSend(v5, sel_intValue);

        unsigned __int8 v3 = 0;
        uint64_t v4 = v2;
LABEL_10:
        v7[0] = v3;
        return (void *)(v4 | ((unint64_t)v3 << 32));
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v7);
    }
    uint64_t v4 = 0;
    unsigned __int8 v3 = 1;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void *NowPlayingInfo.queueIndex.getter()
{
  return NowPlayingInfo.queueIndex.getter(MEMORY[0x1E4F77580]);
}

void *NowPlayingInfo.totalQueueCount.getter()
{
  return NowPlayingInfo.queueIndex.getter(MEMORY[0x1E4F77608]);
}

uint64_t AudioQueueStateManager.audioQueueStateItem(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType();
  uint64_t v7 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v60 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateItem();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = Apple_Parsec_Siri_V2alpha_AudioQueueStateItem.init()();
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*a1 + 136))(v13);
  BOOL v16 = v15 != 0;
  if (v15) {
    uint64_t v14 = Apple_Parsec_Siri_V2alpha_AmpUserState.userToken.setter();
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*a1 + 144))(v14);
  if (v18)
  {
    uint64_t v17 = Apple_Parsec_Siri_V2alpha_AudioQueueStateItem.artist.setter();
    BOOL v16 = 1;
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*a1 + 152))(v17);
  if (v20)
  {
    uint64_t v19 = Apple_Parsec_Siri_V2alpha_AmpUserState.xpAbCookie.setter();
    BOOL v16 = 1;
  }
  char v21 = (*(uint64_t (**)(uint64_t))(*a1 + 184))(v19);
  uint64_t v22 = *a1;
  uint64_t v59 = v7;
  if ((v21 & 1) == 0)
  {
    uint64_t v23 = (*(uint64_t (**)(void))(v22 + 224))();
    if (!v37) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  uint64_t v57 = v6;
  uint64_t v23 = (*(uint64_t (**)(void))(v22 + 176))();
  if (!v24)
  {
    uint64_t v6 = v57;
    goto LABEL_14;
  }
  uint64_t v25 = v24;
  uint64_t v52 = v23;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v54 = v10;
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;
  uint64_t v51 = type metadata accessor for URLComponents();
  uint64_t v53 = &v50;
  uint64_t v29 = *(void *)(v51 - 8);
  uint64_t v56 = a2;
  uint64_t v30 = v29;
  MEMORY[0x1F4188790](v51);
  uint64_t v55 = v9;
  uint64_t v32 = (char *)&v50 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  swift_bridgeObjectRetain();
  URLComponents.scheme.setter();
  swift_bridgeObjectRetain();
  MEMORY[0x1CB776780](v26, v28);
  uint64_t v61 = 47;
  unint64_t v62 = 0xE100000000000000;
  v33._uint64_t countAndFlagsBits = v52;
  v33._object = v25;
  String.append(_:)(v33);
  URLComponents.path.setter();
  URLComponents.string.getter();
  uint64_t v35 = v34;
  uint64_t v36 = v32;
  uint64_t v9 = v55;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v51);
  a2 = v56;
  uint64_t v10 = v54;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = swift_bridgeObjectRelease();
  uint64_t v6 = v57;
  if (v35)
  {
LABEL_12:
    uint64_t v23 = Apple_Parsec_Siri_V2alpha_AmpUserState.sharedUserID.setter();
    BOOL v16 = 1;
  }
LABEL_14:
  uint64_t v38 = (*(uint64_t (**)(uint64_t))(*a1 + 160))(v23);
  if (v39)
  {
    uint64_t v40 = v38;
    uint64_t v41 = v39;
    if (one-time initialization token for mediaTypeMap != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v42 = static AudioQueueStateManager.mediaTypeMap;
    uint64_t v43 = v59;
    if (*((void *)static AudioQueueStateManager.mediaTypeMap + 2))
    {
      swift_bridgeObjectRetain();
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
      if (v45)
      {
        unint64_t v46 = v42[7] + *(void *)(v43 + 72) * v44;
        uint64_t v47 = v58;
        (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v6, v46, v58);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v6, 0, 1, v47);
      }
      else
      {
        uint64_t v47 = v58;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v6, 1, 1, v58);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v47 = v58;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v6, 1, 1, v58);
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v6, 1, v47) == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v43 + 104))(v60, *MEMORY[0x1E4F89758], v47);
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v60, v6, v47);
    }
    Apple_Parsec_Siri_V2alpha_AmpUserState.itunesSubscriptionStatus.setter();
    goto LABEL_29;
  }
  if (v16)
  {
LABEL_29:
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v12, v9);
    uint64_t v48 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, v48, 1, v9);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v48 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, v48, 1, v9);
}

void *NowPlayingInfo.title.getter()
{
  return NowPlayingInfo.title.getter(MEMORY[0x1E4F775F0]);
}

void *NowPlayingInfo.title.getter(void *result)
{
  if (*result)
  {
    if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v3, 0, sizeof(v3));
    }
    outlined init with take of PommesSearchReason?((uint64_t)v3, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v5)
    {
      if (swift_dynamicCast()) {
        return (void *)v2;
      }
      else {
        return 0;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v4);
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *NowPlayingInfo.artist.getter()
{
  return NowPlayingInfo.title.getter(MEMORY[0x1E4F77430]);
}

void *NowPlayingInfo.album.getter()
{
  return NowPlayingInfo.title.getter(MEMORY[0x1E4F77418]);
}

uint64_t NowPlayingInfo.isRadio.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 160))();
  if (!v2)
  {
    char v8 = 0;
    return v8 & 1;
  }
  uint64_t v3 = v1;
  uint64_t result = *MEMORY[0x1E4F773A8];
  if (*MEMORY[0x1E4F773A8])
  {
    uint64_t v5 = v2;
    if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6) {
      char v8 = 1;
    }
    else {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v8 & 1;
  }
  __break(1u);
  return result;
}

uint64_t NowPlayingInfo.mediaItemIdURL.getter()
{
  uint64_t v1 = NowPlayingInfo.currentItemAdamIdentifier.getter();
  if (v2)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 168))(v1);
    if (v11)
    {
      uint64_t v7 = v10;
      uint64_t v9 = v11;
      unint64_t v6 = 0xE800000000000000;
      uint64_t v4 = 0x6C616E7265747865;
    }
    else
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 176))(v10);
      if (!v12) {
        return v7;
      }
      uint64_t v9 = v12;
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v6 = v13;
    }
  }
  else
  {
    uint64_t v3 = v1;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;
    v20[0] = v3;
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v9 = v8;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = type metadata accessor for URLComponents();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()();
  swift_bridgeObjectRetain();
  URLComponents.scheme.setter();
  swift_bridgeObjectRetain();
  MEMORY[0x1CB776780](v4, v6);
  v20[0] = 47;
  v20[1] = 0xE100000000000000;
  v18._uint64_t countAndFlagsBits = v7;
  v18._object = v9;
  String.append(_:)(v18);
  URLComponents.path.setter();
  uint64_t v7 = URLComponents.string.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t NowPlayingInfo.currentItemAdamIdentifier.getter()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9195D60;
  uint64_t result = *MEMORY[0x1E4F77638];
  if (!*MEMORY[0x1E4F77638])
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v4;
  uint64_t result = *MEMORY[0x1E4F77640];
  if (!*MEMORY[0x1E4F77640])
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v5 = inited + 32;
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v6 = 0;
  unint64_t v7 = 0;
  *(void *)(inited + 48) = result;
  *(void *)(inited + 56) = v8;
  uint64_t v9 = &selRef_init;
  uint64_t v29 = inited;
  while (1)
  {
    char v10 = v6;
    if (v7 >= *(void *)(inited + 16))
    {
      __break(1u);
      goto LABEL_20;
    }
    uint64_t v11 = (uint64_t *)(v5 + 16 * v7);
    uint64_t v13 = *v11;
    unint64_t v12 = v11[1];
    uint64_t v14 = *(void **)(v1 + 16);
    swift_bridgeObjectRetain();
    id v15 = v14;
    uint64_t v16 = (void *)MEMORY[0x1CB77CA90](v13, v12);
    id v17 = objc_msgSend(v15, v9[32], v16);

    if (v17) {
      break;
    }
    uint64_t result = swift_bridgeObjectRelease();
LABEL_5:
    char v6 = 1;
    unint64_t v7 = 1;
    if (v10)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v31, &v32);
  __swift_project_boxed_opaque_existential_1(&v32, v33);
  Swift::String v18 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  unsigned __int8 v19 = objc_msgSend(v18, sel_respondsToSelector_, Selector.init(_:)());
  swift_unknownObjectRelease();
  if ((v19 & 1) == 0)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain();
    char v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = v5;
      uint64_t v25 = v1;
      uint64_t v26 = v9;
      uint64_t v27 = swift_slowAlloc();
      *(void *)&v31[0] = v27;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v23 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, (uint64_t *)v31);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v21, v22, "Found %s value that is illegal (not a 64 bit integer)", (uint8_t *)v23, 0xCu);
      swift_arrayDestroy();
      uint64_t v28 = v27;
      uint64_t v9 = v26;
      uint64_t v1 = v25;
      uint64_t v5 = v24;
      uint64_t inited = v29;
      MEMORY[0x1CB77E470](v28, -1, -1);
      MEMORY[0x1CB77E470](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of Any(&v32, v31);
  if (swift_dynamicCast()) {
    return v30;
  }
  else {
    return 0;
  }
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void NowPlayingInfo.collectionInfo.getter()
{
  if (!*MEMORY[0x1E4F77490])
  {
    __break(1u);
    return;
  }
  if (objc_msgSend(*(id *)(v0 + 16), sel_objectForKey_))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, 32);
  }
  outlined init with take of PommesSearchReason?((uint64_t)v3, (uint64_t)&v4, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)&v4);
    goto LABEL_12;
  }
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSDictionary);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    return;
  }
  id v1 = v2[0];
  if ((uint64_t)objc_msgSend(v2[0], sel_count) < 1)
  {
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else
  {
    unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    NSDictionary.makeIterator()();
    NSDictionary.Iterator.next()();
    outlined init with take of PommesSearchReason?((uint64_t)v3, (uint64_t)&v4, &demangling cache variable for type metadata for (key: Any, value: Any)?);
    while (v5)
    {
      outlined init with take of Any(&v4, v3);
      outlined init with take of Any(&v6, v2);
      static NowPlayingInfo.addKVToListeningToContainer(key:value:container:)((uint64_t)v3, (uint64_t)v2, (uint64_t *)&v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
      NSDictionary.Iterator.next()();
      outlined init with take of PommesSearchReason?((uint64_t)v3, (uint64_t)&v4, &demangling cache variable for type metadata for (key: Any, value: Any)?);
    }
    swift_release();
  }
}

uint64_t NowPlayingInfo.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t createQueueStateProfileSlice(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v66 = a2;
  char v67 = (char *)a1;
  uint64_t v51 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v50 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  uint64_t v49 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v63 = *(void *)(v3 - 8);
  uint64_t v64 = v3;
  MEMORY[0x1F4188790](v3);
  unint64_t v62 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v60 = *(void *)(v5 - 8);
  uint64_t v61 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v54 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  uint64_t v58 = *(void *)(v7 - 8);
  uint64_t v59 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v56 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v65 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v68 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v57 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  MEMORY[0x1F4188790](v15 - 8);
  id v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  char v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v53 = (char *)&v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v46 - v25;
  uint64_t v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
  v52(v26, 1, 1, v27);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v67, (uint64_t)v17, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
    return outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSlice?((uint64_t)v26, v66);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    v69[3] = v18;
    v69[4] = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo and conformance Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v69);
    (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 16))(boxed_opaque_existential_1, v21, v18);
    defaultAnyTypeURLPrefix.getter();
    Google_Protobuf_Any.init(message:partial:typePrefix:)();
    uint64_t v48 = v19;
    uint64_t v32 = v60;
    uint64_t v31 = v61;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v14, 0, 1, v61);
    char v67 = v14;
    uint64_t v33 = v31;
    Apple_Parsec_Siri_V2alpha_ProfileSliceValue.init()();
    (*(void (**)(char *, void, uint64_t))(v58 + 104))(v56, *MEMORY[0x1E4F896E8], v59);
    Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
    uint64_t v34 = v32;
    uint64_t v35 = v57;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v67, v57, &demangling cache variable for type metadata for Google_Protobuf_Any?);
    int v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v35, 1, v33);
    uint64_t v47 = v21;
    uint64_t v46 = v18;
    if (v36 == 1)
    {
      Google_Protobuf_Any.init()();
      outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for Google_Protobuf_Any?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v54, v35, v33);
    }
    uint64_t v37 = v66;
    uint64_t v38 = v55;
    uint64_t v39 = (uint64_t)v53;
    uint64_t v40 = v52;
    Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
    (*(void (**)(char *, void, uint64_t))(v63 + 104))(v62, *MEMORY[0x1E4F89B48], v64);
    Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
    Apple_Parsec_Siri_V2alpha_ProfileSlice.init()();
    v40((char *)v39, 0, 1, v27);
    outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSlice?(v39, (uint64_t)v26);
    uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    if (!v41(v26, 1, v27))
    {
      (*(void (**)(char *, void, uint64_t))(v50 + 104))(v49, *MEMORY[0x1E4F892B0], v51);
      Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
    }
    unsigned int v42 = v41(v26, 1, v27);
    uint64_t v43 = v65;
    if (!v42)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
      unint64_t v44 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_1C91947A0;
      (*(void (**)(unint64_t, char *, uint64_t))(v43 + 16))(v45 + v44, v68, v38);
      Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
    }
    (*(void (**)(char *, uint64_t))(v43 + 8))(v68, v38);
    outlined destroy of MediaUserStateCenter?((uint64_t)v67, &demangling cache variable for type metadata for Google_Protobuf_Any?);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v46);
    outlined init with copy of MediaUserStateCenter?((uint64_t)v26, v37, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
    return outlined destroy of MediaUserStateCenter?((uint64_t)v26, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  }
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo and conformance Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo and conformance Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo and conformance Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo and conformance Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo);
  }
  return result;
}

uint64_t outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSlice?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void PegasusProxy.addGroundingInfo(to:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = PegasusProxy.isGroundingNeeded(for:)(a2);
  uint64_t v8 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.userGroundingNeeded.setter();
  v8(v23, 0);
  if (v7)
  {
    uint64_t v9 = (void *)(a2 + *(int *)(v4 + 84));
    uint64_t v10 = v9[1];
    *(void *)(v2 + 64) = *v9;
    *(void *)(v2 + 72) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_2(a2, (uint64_t)v6, type metadata accessor for PommesSearchRequest);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    v23[0] = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v16 = (uint64_t *)&v6[*(int *)(v4 + 32)];
    if (v16[1])
    {
      uint64_t v17 = *v16;
      unint64_t v18 = v16[1];
    }
    else
    {
      unint64_t v18 = 0xE700000000000000;
      uint64_t v17 = 0x6E776F6E6B6E55;
    }
    swift_bridgeObjectRetain();
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0((uint64_t)v6, type metadata accessor for PommesSearchRequest);
    *(_WORD *)(v14 + 12) = 2080;
    if (v7) {
      uint64_t v19 = 1702195828;
    }
    else {
      uint64_t v19 = 0x65736C6166;
    }
    if (v7) {
      unint64_t v20 = 0xE400000000000000;
    }
    else {
      unint64_t v20 = 0xE500000000000000;
    }
    uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v12, v13, "POMMES add grounding need for request: %s, Grounded: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v15, -1, -1);
    MEMORY[0x1CB77E470](v14, -1, -1);
  }
  else
  {
    _s21SiriInformationSearch15PerformanceUtilC6TicketVWOhTm_0((uint64_t)v6, type metadata accessor for PommesSearchRequest);
  }
}

uint64_t PegasusProxy.isGroundingNeeded(for:)(uint64_t a1)
{
  uint64_t v3 = (int *)type metadata accessor for PommesSearchRequest(0);
  uint64_t v4 = (void *)(a1 + v3[21]);
  uint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = v3;
    uint64_t v7 = *(void *)(v1 + 72);
    if (v7)
    {
      if (*(void *)(v1 + 64) == *v4 && v7 == v5)
      {
        if ((*(unsigned char *)(a1 + v3[16]) & 1) == 0)
        {
          if (*(unsigned char *)(a1 + v3[15])) {
            goto LABEL_24;
          }
          goto LABEL_28;
        }
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((*(unsigned char *)(a1 + v6[16]) & 1) == 0)
        {
          if (*(unsigned char *)(a1 + v6[15]))
          {
            if (v9)
            {
LABEL_24:
              if (one-time initialization token for pommes != -1) {
                swift_once();
              }
              uint64_t v18 = type metadata accessor for Logger();
              __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
              uint64_t v12 = Logger.logObject.getter();
              os_log_type_t v16 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v12, v16))
              {
                uint64_t v14 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v14 = 0;
                uint64_t v17 = "Grounding: false, Same user grounded recently";
                goto LABEL_32;
              }
              goto LABEL_34;
            }
LABEL_14:
            if (one-time initialization token for pommes != -1) {
              swift_once();
            }
            uint64_t v11 = type metadata accessor for Logger();
            __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
            uint64_t v12 = Logger.logObject.getter();
            os_log_type_t v13 = static os_log_type_t.info.getter();
            if (!os_log_type_enabled(v12, v13))
            {
              uint64_t v10 = 1;
              goto LABEL_35;
            }
            uint64_t v14 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v14 = 0;
            _os_log_impl(&dword_1C8F83000, v12, v13, "Grounding: true, Not grounded recently", v14, 2u);
            uint64_t v10 = 1;
            goto LABEL_33;
          }
LABEL_28:
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v19 = type metadata accessor for Logger();
          __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
          uint64_t v12 = Logger.logObject.getter();
          os_log_type_t v16 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v12, v16))
          {
            uint64_t v14 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v14 = 0;
            uint64_t v17 = "Grounding: false, not a multiUser env";
            goto LABEL_32;
          }
          goto LABEL_34;
        }
      }
    }
    else if ((*(unsigned char *)(a1 + v3[16]) & 1) == 0)
    {
      if (*(unsigned char *)(a1 + v3[15])) {
        goto LABEL_14;
      }
      goto LABEL_28;
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v16))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      uint64_t v17 = "Grounding: false, singleton user";
LABEL_32:
      _os_log_impl(&dword_1C8F83000, v12, v16, v17, v14, 2u);
      uint64_t v10 = 0;
LABEL_33:
      MEMORY[0x1CB77E470](v14, -1, -1);
LABEL_35:

      return v10;
    }
LABEL_34:
    uint64_t v10 = 0;
    goto LABEL_35;
  }
  return 0;
}

uint64_t PegasusProxy.addPlaySRREntities(to:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v141 = a3;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  uint64_t v138 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v137 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RRCandidate();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v139 = v9;
  uint64_t v140 = v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v136 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  unint64_t v122 = (char *)&v119 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v123 = (char *)&v119 - v15;
  uint64_t v16 = type metadata accessor for RRQuery();
  uint64_t v131 = *(void *)(v16 - 8);
  uint64_t v132 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v129 = (uint64_t *)((char *)&v119 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  MEMORY[0x1F4188790](v128);
  uint64_t v130 = (uint64_t *)((char *)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v126 = type metadata accessor for RRResult();
  uint64_t v19 = *(void *)(v126 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v126);
  uint64_t v124 = (char *)&v119 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v127 = (char *)&v119 - v22;
  uint64_t v23 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v119 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(a2 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 76));
  uint64_t v28 = *(void *)(v27 + 16);
  if (!v28)
  {
LABEL_7:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl(&dword_1C8F83000, v38, v39, "User parses do not have a SmartPlay USO task", v40, 2u);
      MEMORY[0x1CB77E470](v40, -1, -1);
    }

    uint64_t v41 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v141, a1, v41);
  }
  uint64_t v133 = v7;
  uint64_t v121 = v19;
  uint64_t v125 = a1;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v30 = v24 + 16;
  uint64_t v29 = v31;
  uint64_t v32 = v27 + ((*(unsigned __int8 *)(v30 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 64));
  uint64_t v33 = (void (**)(char *, uint64_t))(v30 - 8);
  uint64_t v34 = *(void *)(v30 + 56);
  uint64_t v135 = (void (*)(char *, uint64_t *, uint64_t))v27;
  swift_bridgeObjectRetain();
  while (1)
  {
    v29(v26, v32, v23);
    uint64_t v35 = Siri_Nlu_External_UserParse.firstSmartPlayTask()();
    uint64_t v142 = v4;
    if (v4)
    {
      (*v33)(v26, v23);
      return swift_bridgeObjectRelease();
    }
    int v36 = v35;
    swift_release();
    (*v33)(v26, v23);
    if (v36) {
      break;
    }
    v32 += v34;
    --v28;
    uint64_t v4 = v142;
    if (!v28)
    {
      swift_bridgeObjectRelease();
      a1 = v125;
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  type metadata accessor for UsoEntityBuilder_common_MediaItem();
  swift_allocObject();
  uint64_t v43 = UsoEntityBuilder_common_MediaItem.init()();
  uint64_t v44 = MEMORY[0x1CB77A2C0]();
  if (!v44)
  {
    uint64_t v52 = v125;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.pommes);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl(&dword_1C8F83000, v54, v55, "Unable to generate empty media item USO entity for reference resolution", v56, 2u);
      MEMORY[0x1CB77E470](v56, -1, -1);
      swift_release();
    }
    else
    {

      swift_release();
    }
    uint64_t v77 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 16))(v141, v52, v77);
  }
  uint64_t v45 = (char *)v44;
  outlined init with copy of AppDataProviding(v134 + 24, (uint64_t)v143);
  __swift_project_boxed_opaque_existential_1(v143, v143[3]);
  uint64_t v46 = v129;
  *uint64_t v129 = v45;
  uint64_t v48 = v131;
  uint64_t v47 = v132;
  (*(void (**)(void *, void, uint64_t))(v131 + 104))(v46, *MEMORY[0x1E4FA3DF8], v132);
  swift_retain();
  uint64_t v49 = v130;
  dispatch thunk of RRReferenceResolverProtocol.resolve(reference:)();
  (*(void (**)(void *, uint64_t))(v48 + 8))(v46, v47);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v51 = v125;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v144 = *v49;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v143);
  }
  uint64_t v57 = v121;
  uint64_t v58 = v127;
  uint64_t v59 = v49;
  uint64_t v60 = v126;
  (*(void (**)(char *, uint64_t *, uint64_t))(v121 + 32))(v127, v59, v126);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v143);
  uint64_t v61 = (uint64_t *)v124;
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v124, v58, v60);
  int v62 = (*(uint64_t (**)(uint64_t *, uint64_t))(v57 + 88))(v61, v60);
  if (v62 == *MEMORY[0x1E4FA3E30])
  {
    uint64_t v130 = (uint64_t *)v45;
    (*(void (**)(uint64_t *, uint64_t))(v57 + 96))(v61, v60);
    uint64_t v63 = v139;
    uint64_t v64 = v140;
    uint64_t v65 = v123;
    uint64_t v135 = *(void (**)(char *, uint64_t *, uint64_t))(v140 + 32);
    v135(v123, v61, v139);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    __swift_project_value_buffer(v66, (uint64_t)static Logger.pommes);
    char v67 = v122;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v122, v65, v63);
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.debug.getter();
    BOOL v70 = os_log_type_enabled(v68, v69);
    uint64_t v120 = v43;
    if (v70)
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      v143[0] = v72;
      *(_DWORD *)uint64_t v71 = 136315138;
      uint64_t v132 = (uint64_t)(v71 + 4);
      _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate, MEMORY[0x1E4FA3DB8]);
      uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v144 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v140 + 8))(v67, v63);
      _os_log_impl(&dword_1C8F83000, v68, v69, "Found single SRR match candidate for SmartPlay: %s", v71, 0xCu);
      swift_arrayDestroy();
      uint64_t v75 = v72;
      uint64_t v64 = v140;
      MEMORY[0x1CB77E470](v75, -1, -1);
      uint64_t v76 = v71;
      uint64_t v65 = v123;
      MEMORY[0x1CB77E470](v76, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v64 + 8))(v67, v63);
    }

    uint64_t v89 = v63;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>);
    unint64_t v90 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
    uint64_t v78 = swift_allocObject();
    *(_OWORD *)(v78 + 16) = xmmword_1C91947A0;
    v135((char *)(v78 + v90), (uint64_t *)v65, v89);
    uint64_t v57 = v121;
    int64_t v91 = *(void *)(v78 + 16);
    if (v91) {
      goto LABEL_34;
    }
    goto LABEL_50;
  }
  if (v62 != *MEMORY[0x1E4FA3E40])
  {
    if (v62 == *MEMORY[0x1E4FA3E38])
    {
      (*(void (**)(uint64_t *, uint64_t))(v57 + 96))(v61, v60);
      swift_bridgeObjectRelease();
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v105 = type metadata accessor for Logger();
      __swift_project_value_buffer(v105, (uint64_t)static Logger.pommes);
      os_log_type_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v106, v107)) {
        goto LABEL_63;
      }
      uint64_t v108 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v108 = 0;
      char v109 = "No support for plural match in reference resolution for SmartPlay";
    }
    else if (v62 == *MEMORY[0x1E4FA3E48])
    {
      (*(void (**)(uint64_t *, uint64_t))(v57 + 96))(v61, v60);
      swift_bridgeObjectRelease();
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v110 = type metadata accessor for Logger();
      __swift_project_value_buffer(v110, (uint64_t)static Logger.pommes);
      os_log_type_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v106, v107)) {
        goto LABEL_63;
      }
      uint64_t v108 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v108 = 0;
      char v109 = "No support for plural disambiguation in reference resolution for SmartPlay";
    }
    else
    {
      if (v62 != *MEMORY[0x1E4FA3E50])
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v113 = type metadata accessor for Logger();
        __swift_project_value_buffer(v113, (uint64_t)static Logger.pommes);
        unint64_t v114 = Logger.logObject.getter();
        os_log_type_t v115 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v114, v115))
        {
          uint64_t v116 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v116 = 0;
          _os_log_impl(&dword_1C8F83000, v114, v115, "Unknown (future?) reference resolution result case for SmartPlay", v116, 2u);
          MEMORY[0x1CB77E470](v116, -1, -1);
        }
        swift_release();
        swift_release();

        uint64_t v117 = *(void (**)(char *, uint64_t))(v57 + 8);
        v117(v127, v60);
        uint64_t v118 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v118 - 8) + 16))(v141, v51, v118);
        return ((uint64_t (*)(char *, uint64_t))v117)(v124, v60);
      }
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v111 = type metadata accessor for Logger();
      __swift_project_value_buffer(v111, (uint64_t)static Logger.pommes);
      os_log_type_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v106, v107))
      {
LABEL_63:
        swift_release();
        swift_release();

        (*(void (**)(char *, uint64_t))(v57 + 8))(v127, v60);
        uint64_t v112 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v112 - 8) + 16))(v141, v51, v112);
      }
      uint64_t v108 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v108 = 0;
      char v109 = "No matching entities for SmartPlay task";
    }
    _os_log_impl(&dword_1C8F83000, v106, v107, v109, v108, 2u);
    MEMORY[0x1CB77E470](v108, -1, -1);
    goto LABEL_63;
  }
  (*(void (**)(uint64_t *, uint64_t))(v57 + 96))(v61, v60);
  uint64_t v78 = *v61;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v130 = (uint64_t *)v45;
  uint64_t v79 = type metadata accessor for Logger();
  __swift_project_value_buffer(v79, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  uint64_t v80 = Logger.logObject.getter();
  os_log_type_t v81 = static os_log_type_t.debug.getter();
  BOOL v82 = os_log_type_enabled(v80, v81);
  uint64_t v120 = v43;
  if (v82)
  {
    uint64_t v83 = (uint8_t *)swift_slowAlloc();
    uint64_t v84 = swift_slowAlloc();
    v143[0] = v84;
    *(_DWORD *)uint64_t v83 = 136315138;
    uint64_t v57 = v121;
    uint64_t v135 = (void (*)(char *, uint64_t *, uint64_t))(v83 + 4);
    uint64_t v85 = swift_bridgeObjectRetain();
    uint64_t v86 = MEMORY[0x1CB77CDC0](v85, v139);
    unint64_t v88 = v87;
    swift_bridgeObjectRelease();
    uint64_t v144 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v88, v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v80, v81, "Found multiple SRR match candidates for SmartPlay: %s", v83, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v84, -1, -1);
    MEMORY[0x1CB77E470](v83, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v64 = v140;
  int64_t v91 = *(void *)(v78 + 16);
  if (v91)
  {
LABEL_34:
    v143[0] = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v91, 0);
    uint64_t v93 = *(void (**)(char *, uint64_t *, uint64_t))(v64 + 16);
    uint64_t v92 = v64 + 16;
    uint64_t v135 = v93;
    unint64_t v94 = (*(unsigned __int8 *)(v92 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 64);
    uint64_t v129 = (void *)v78;
    unint64_t v95 = v78 + v94;
    uint64_t v96 = *(void *)(v92 + 56);
    uint64_t v140 = v92;
    long long v97 = (void (**)(char *, uint64_t))(v92 - 8);
    uint64_t v131 = v138 + 32;
    uint64_t v132 = v96;
    uint64_t v98 = v136;
    while (1)
    {
      uint64_t v99 = v139;
      uint64_t v100 = ((uint64_t (*)(char *, unint64_t, uint64_t))v135)(v98, v95, v139);
      MEMORY[0x1F4188790](v100);
      *(&v119 - 2) = (uint64_t)v98;
      _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_ClientEntity and conformance Apple_Parsec_Siri_Context_ClientEntity, MEMORY[0x1E4F88EC8]);
      uint64_t v101 = v142;
      static Message.with(_:)();
      uint64_t v142 = v101;
      if (v101) {
        break;
      }
      (*v97)(v98, v99);
      uint64_t v102 = v143[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v102 + 16) + 1, 1);
        uint64_t v102 = v143[0];
      }
      unint64_t v104 = *(void *)(v102 + 16);
      unint64_t v103 = *(void *)(v102 + 24);
      if (v104 >= v103 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v103 > 1, v104 + 1, 1);
        uint64_t v102 = v143[0];
      }
      *(void *)(v102 + 16) = v104 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v138 + 32))(v102+ ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80))+ *(void *)(v138 + 72) * v104, v137, v133);
      v143[0] = v102;
      v95 += v132;
      if (!--v91)
      {
        swift_bridgeObjectRelease();
        uint64_t v57 = v121;
        goto LABEL_51;
      }
    }
    (*v97)(v98, v99);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v121 + 8))(v127, v126);
  }
LABEL_50:
  swift_bridgeObjectRelease();
  uint64_t v102 = MEMORY[0x1E4FBC860];
LABEL_51:
  (*(void (**)(uint64_t, uint64_t))(*(void *)v134 + 88))(v102, v125);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v127, v126);
}

uint64_t PegasusProxy.appendMusicRankingInfluence(to:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_Context_MusicRankingInfluence();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v28 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v24 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v24 - v10;
  uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider + 24);
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider), v12);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v27(v9, v11, v3);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = v3;
    uint64_t v18 = v17;
    v24[1] = a1;
    *(_DWORD *)uint64_t v17 = 134217984;
    v24[0] = v17 + 4;
    uint64_t v19 = MEMORY[0x1CB7790C0](v17);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v4 + 8);
    v26(v9, v25);
    v30[0] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v15, v16, "Adding MusicRankingInfluence to request: %ld", v18, 0xCu);
    uint64_t v20 = v18;
    uint64_t v3 = v25;
    MEMORY[0x1CB77E470](v20, -1, -1);
  }
  else
  {
    uint64_t v26 = *(void (**)(char *, uint64_t))(v4 + 8);
    v26(v9, v3);
  }

  v27(v28, v11, v3);
  uint64_t v21 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.modify();
  uint64_t v22 = (void (*)(unsigned char *, void))Apple_Parsec_Siri_Context_ClientConversationContextInfo.onDeviceContext.modify();
  Apple_Parsec_Siri_Context_OnDeviceContext.musicRankingInfluence.setter();
  v22(v29, 0);
  v21(v30, 0);
  return ((uint64_t (*)(char *, uint64_t))v26)(v11, v3);
}

uint64_t PIMSEnablementProvider.getMusicRankingInfluenceStatus()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MediaSuggestionManager.EnablementStatus();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v21 - v7;
  type metadata accessor for MediaSuggestionManager();
  swift_allocObject();
  MediaSuggestionManager.init()();
  dispatch thunk of MediaSuggestionManager.fetchStatus()();
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v9 == *MEMORY[0x1E4FA3D70])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    uint64_t v10 = (unsigned int *)MEMORY[0x1E4F89570];
LABEL_7:
    uint64_t v11 = *v10;
    uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_Context_MusicRankingInfluence();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104))(a1, v11, v12);
  }
  if (v9 == *MEMORY[0x1E4FA3D60])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    uint64_t v10 = (unsigned int *)MEMORY[0x1E4F89560];
    goto LABEL_7;
  }
  if (v9 == *MEMORY[0x1E4FA3D68])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    uint64_t v10 = (unsigned int *)MEMORY[0x1E4F89568];
    goto LABEL_7;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1C8F83000, v15, v16, "MediaSuggestionManager returned an unknown PIMS enablement status. Defaulting to disabled.", v17, 2u);
    MEMORY[0x1CB77E470](v17, -1, -1);
  }

  uint64_t v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v8, v2);
  uint64_t v19 = *MEMORY[0x1E4F89570];
  uint64_t v20 = type metadata accessor for Apple_Parsec_Siri_Context_MusicRankingInfluence();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(a1, v19, v20);
  return ((uint64_t (*)(char *, uint64_t))v18)(v6, v2);
}

void PegasusProxy.addCurareFlags(to:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  id v5 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  uint64_t v6 = (void *)MEMORY[0x1CB77CA90](0xD000000000000011, 0x80000001C919E9E0);
  id v7 = objc_msgSend(v5, sel_initWithSuiteName_, v6);

  if (v7)
  {
    uint64_t v8 = (void *)MEMORY[0x1CB77CA90](0xD000000000000020, 0x80000001C91A3570);
    unsigned int v9 = objc_msgSend(v7, sel_BOOLForKey_, v8);

    if (v9)
    {
      if (one-time initialization token for overrides != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.overrides);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl(&dword_1C8F83000, v11, v12, "POMMES override enabled for treatRandomAsFirst! Setting value to true", v13, 2u);
        MEMORY[0x1CB77E470](v13, -1, -1);
      }

      uint64_t v14 = (void (*)(uint64_t *, void))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
      Apple_Parsec_Siri_V2alpha_SiriPegasusContext.treatRandomAsFirst.setter();
      v14(&v15, 0);
    }
  }
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void *PegasusInstrumentationUtil.createPegasusRequestStartedEvent(payloadSizeInKB:)(long double a1)
{
  uint64_t v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1118]), sel_init);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA10F0]), sel_init);
    if (v4)
    {
      id v5 = v4;
      specialized PegasusInstrumentationUtil.roundToTwoSigFigs(_:)(a1);
      -[NSObject setPayloadSizeInKB:](v3, sel_setPayloadSizeInKB_);
      objc_msgSend(v5, sel_setStartedOrChanged_, v3);
      goto LABEL_10;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1C8F83000, v3, v7, "Failed to create the Start event and/or context", v8, 2u);
    MEMORY[0x1CB77E470](v8, -1, -1);
  }
  id v5 = 0;
LABEL_10:

  return v5;
}

void specialized PegasusInstrumentationUtil.roundToTwoSigFigs(_:)(long double a1)
{
  if (a1 != 0.0)
  {
    double v1 = ceil(log10(a1));
    if ((~*(void *)&v1 & 0x7FF0000000000000) != 0)
    {
      if (v1 > -9.22337204e18)
      {
        if (v1 < 9.22337204e18)
        {
          if (!__OFSUB__(2, (uint64_t)v1))
          {
            __exp10((double)(2 - (uint64_t)v1));
            return;
          }
LABEL_11:
          __break(1u);
          return;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
}

uint64_t protocol witness for PegasusProxyClient.feedbackEventStream.getter in conformance PegasusProxyForAssistant()
{
  return MEMORY[0x1F413F058]();
}

void (*protocol witness for PegasusProxyClient.metadata.modify in conformance PegasusProxyForAssistant(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  id v2[4] = dispatch thunk of BasePegasusProxy.metadata.modify();
  return protocol witness for PegasusProxyClient.metadata.modify in conformance PegasusProxyForAssistant;
}

void protocol witness for PegasusProxyClient.metadata.modify in conformance PegasusProxyForAssistant(void *a1)
{
  double v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for PommesCandidateId();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for PommesBridgeResultCandidateState(0);
    uint64_t v20 = *(void *)(v13 - 8);
    outlined init with take of NLXResultCandidate(v12 + *(void *)(v20 + 72) * v6, a2, type metadata accessor for PommesBridgeResultCandidateState);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for PommesBridgeResultCandidateState(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t protocol witness for PegasusProxyClient.searchResponsePublisher(usingSearchRequest:) in conformance PegasusProxyForAssistant()
{
  return MEMORY[0x1F413F0D0]();
}

uint64_t partial apply for closure #5 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  return closure #5 in PegasusProxy.search(pommesSearchRequest:completion:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t closure #5 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  swift_retain();
  specialized Set._Variant.insert(_:)(&v4, a2);
  swift_endAccess();
  return swift_release();
}

Swift::Int partial apply for closure #2 in PommesSearchRequestProcessor.search_sync(completion:)(void *a1)
{
  return closure #2 in PommesSearchRequestProcessor.search_sync(completion:)(a1, v1[2], v1[3], v1[4]);
}

Swift::Int closure #2 in PommesSearchRequestProcessor.search_sync(completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_release();
  if (Strong)
  {
    swift_beginAccess();
    char v7 = *(void **)(a4 + 16);
    *(void *)(a4 + 16) = a1;
    id v8 = a1;
  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusRequest and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusRequest(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static PegasusInstrumentationUtil.requestArguments(from:onDeviceLabels:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_POMMESRequestContext();
  v47[0] = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  id v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v11, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1C8F83000, v17, v18, "No ParsecAlias.SiriPegasusRequest to extract POMMESSchemaPOMMESPegasusRequestArguments from", v19, 2u);
      MEMORY[0x1CB77E470](v19, -1, -1);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA10E8]), sel_init);
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.getter();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Sequence.compactMap<A>(_:)(v22, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for POMMESSchemaPOMMESPegasusSearchQuery);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v21, sel_setQueries_, isa);

      uint64_t v24 = (void *)specialized static PegasusInstrumentationUtil.extractQueryMetadata(from:)((uint64_t)v15);
      objc_msgSend(v21, sel_setQueryMetadata_, v24);

      uint64_t v25 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.featureFlag.getter();
      uint64_t v26 = (void *)MEMORY[0x1CB77CA90](v25);
      swift_bridgeObjectRelease();
      objc_msgSend(v21, sel_setFeatureFlag_, v26);

      uint64_t v27 = (void *)specialized static PegasusInstrumentationUtil.extractSiriPegasusMetadata(from:)((uint64_t)v15);
      objc_msgSend(v21, sel_setSiriPegasusMetadata_, v27);

      objc_msgSend(v21, sel_setIsDataOnlyRequest_, Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.isDataOnlyRequest.getter() & 1);
      uint64_t v28 = specialized static PegasusInstrumentationUtil.extractClientConversationMetadata(from:onDeviceLabels:)((uint64_t)v15, a3);
      objc_msgSend(v21, sel_setClientConversationMetadata_, v28);

      unint64_t v29 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.conversationContextBytes.getter();
      uint64_t v31 = v29;
      unint64_t v32 = v30;
      switch(v30 >> 62)
      {
        case 1uLL:
          unint64_t v40 = HIDWORD(v29);
          outlined consume of Data._Representation(v29, v30);
          if (!__OFSUB__(v40, v31))
          {
            unint64_t v33 = (int)v40 - (int)v31;
            goto LABEL_22;
          }
          __break(1u);
          goto LABEL_27;
        case 2uLL:
          uint64_t v39 = *(void *)(v29 + 16);
          uint64_t v38 = *(void *)(v29 + 24);
          outlined consume of Data._Representation(v29, v30);
          unint64_t v33 = v38 - v39;
          if (__OFSUB__(v38, v39))
          {
            __break(1u);
LABEL_19:
            outlined consume of Data._Representation(v31, v32);
            unint64_t v33 = 0;
          }
          else
          {
LABEL_22:
            if ((v33 & 0x8000000000000000) != 0 || HIDWORD(v33))
            {
LABEL_27:
              uint64_t result = _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
          }
LABEL_24:
          objc_msgSend(v21, sel_setConversationContextBytesLength_, v33, v47[0]);
          uint64_t v41 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.pommesRequestContext.getter();
          uint64_t v42 = MEMORY[0x1CB778FB0](v41);
          uint64_t v44 = v43;
          (*(void (**)(char *, uint64_t))(v47[0] + 8))(v8, v6);
          uint64_t v45 = (void *)MEMORY[0x1CB77CA90](v42, v44);
          swift_bridgeObjectRelease();
          objc_msgSend(v21, sel_setPersonalDomainFallback_, v45);

          (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
          return (uint64_t)v21;
        case 3uLL:
          goto LABEL_19;
        default:
          outlined consume of Data._Representation(v29, v30);
          unint64_t v33 = BYTE6(v32);
          goto LABEL_24;
      }
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.pommes);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_1C8F83000, v35, v36, "Unable to initialize POMMESSchemaPOMMESPegasusRequestArguments()", v37, 2u);
      MEMORY[0x1CB77E470](v37, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  return 0;
}

void closure #1 in static PegasusInstrumentationUtil.extractQueries(from:onDeviceLabels:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v59 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v8 = *(void *)(v59 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v59);
  uint64_t v60 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v58 = (char *)v45 - v11;
  uint64_t v63 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  uint64_t v61 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v57 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1130]), sel_init);
  id v14 = v13;
  if (v13)
  {
    uint64_t v62 = v8;
    id v49 = v13;
    id v15 = v13;
    uint64_t v16 = *(void *)(Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.rewrittenUtterances.getter() + 16);
    swift_bridgeObjectRelease();
    objc_msgSend(v15, sel_setHasRewrittenUtterances_, v16 != 0);

    uint64_t v65 = MEMORY[0x1E4FBC860];
    uint64_t v17 = *(void *)(a2 + 16);
    uint64_t v50 = a1;
    if (v17)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v56 = (void (*)(void, void, void))v15;
      id v18 = v15;
      uint64_t v19 = (uint64_t *)(a2 + 40);
      do
      {
        uint64_t v21 = *(v19 - 1);
        uint64_t v20 = *v19;
        id v22 = objc_allocWithZone(MEMORY[0x1E4FA1140]);
        swift_bridgeObjectRetain();
        id v23 = objc_msgSend(v22, (SEL)&selRef_setOnDeviceIndexSearchContext_);
        if (v23)
        {
          id v24 = v23;
          uint64_t v25 = (void *)MEMORY[0x1CB77CA90](v21, v20);
          objc_msgSend(v24, sel_setLabel_, v25);
          swift_bridgeObjectRelease();

          MEMORY[0x1CB77CD90]();
          if (*(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v19 += 2;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease();
      uint64_t v26 = v56;
    }
    else
    {
      id v27 = v15;
      swift_bridgeObjectRetain();
      uint64_t v26 = v15;
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for POMMESSchemaPOMMESPegasusSearchQueryUserSpan);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v26, sel_setUserSpans_, isa);

    id v29 = v26;
    uint64_t v30 = Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.profileSlices.getter();
    uint64_t v31 = *(void *)(v30 + 16);
    if (v31)
    {
      id v46 = v29;
      uint64_t v47 = a3;
      uint64_t v48 = v4;
      uint64_t v56 = *(void (**)(void, void, void))(v61 + 16);
      unint64_t v32 = (*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
      v45[1] = v30;
      unint64_t v33 = v30 + v32;
      unsigned int v55 = *MEMORY[0x1E4F892B0];
      uint64_t v53 = v62 + 8;
      uint64_t v54 = (void (**)(char *, void, uint64_t))(v62 + 104);
      v61 += 16;
      uint64_t v51 = *(void *)(v61 + 56);
      uint64_t v52 = (void (**)(char *, uint64_t))(v61 - 8);
      uint64_t v35 = v57;
      uint64_t v34 = v58;
      uint64_t v37 = v59;
      os_log_type_t v36 = v60;
      uint64_t v38 = (void (**)(char *, uint64_t))(v62 + 8);
      while (1)
      {
        uint64_t v62 = v31;
        v56(v35, v33, v63);
        Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
        (*v54)(v36, v55, v37);
        _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v39 = v65;
        uint64_t v40 = v64;
        uint64_t v41 = *v38;
        (*v38)(v36, v37);
        v41(v34, v37);
        (*v52)(v35, v63);
        if (v39 == v40) {
          break;
        }
        v33 += v51;
        uint64_t v31 = v62 - 1;
        if (v62 == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v42 = 0;
          goto LABEL_19;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v42 = 1;
LABEL_19:
      a3 = v47;
      id v14 = v49;
      id v29 = v46;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v42 = 0;
      id v14 = v49;
    }
    objc_msgSend(v29, sel_setHasAudioQueueStateInfo_, v42);

    id v43 = v29;
    uint64_t v44 = closure #3 in closure #1 in static PegasusInstrumentationUtil.extractQueries(from:onDeviceLabels:)();
    objc_msgSend(v43, sel_setAmpUserState_, v44);
  }
  *a3 = v14;
}

void *closure #3 in closure #1 in static PegasusInstrumentationUtil.extractQueries(from:onDeviceLabels:)()
{
  uint64_t matched = type metadata accessor for Apple_Parsec_Siri_V2alpha_ITunesMatchSubscriptionStatus();
  uint64_t v108 = *(void *)(matched - 8);
  uint64_t v0 = MEMORY[0x1F4188790](matched);
  os_log_type_t v107 = (char *)&v103 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v0);
  os_log_type_t v106 = (char *)&v103 - v2;
  uint64_t v105 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpSubscriptionStatus();
  uint64_t v104 = *(void *)(v105 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v105);
  unint64_t v103 = (char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v110 = (char *)&v103 - v5;
  uint64_t v6 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v119 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v117 = *(void *)(v118 - 8);
  MEMORY[0x1F4188790](v118);
  uint64_t v116 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AmpUserState?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v123 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
  uint64_t v120 = *(void *)(v125 - 8);
  MEMORY[0x1F4188790](v125);
  uint64_t v111 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  uint64_t v121 = *(void *)(v132 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v132);
  uint64_t v131 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v130 = (char *)&v103 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1F4188790](v15 - 8);
  unint64_t v122 = (char *)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v124 = (char *)&v103 - v22;
  uint64_t v140 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v23 = *(void *)(v140 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v140);
  uint64_t v142 = (char *)&v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v141 = (char *)&v103 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  MEMORY[0x1F4188790](v27 - 8);
  id v29 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  uint64_t v30 = *(void *)(v129 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v129);
  unint64_t v33 = (char *)&v103 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v127 = (char *)&v103 - v34;
  uint64_t v35 = Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.profileSlices.getter();
  uint64_t v36 = *(void *)(v35 + 16);
  uint64_t v126 = v18;
  uint64_t v128 = v30;
  if (v36)
  {
    uint64_t v113 = v29;
    unint64_t v114 = v21;
    uint64_t v115 = v17;
    uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
    uint64_t v37 = v30 + 16;
    uint64_t v138 = v38;
    unint64_t v39 = (*(unsigned __int8 *)(v37 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 64);
    uint64_t v112 = v35;
    unint64_t v40 = v35 + v39;
    LODWORD(v137) = *MEMORY[0x1E4F892A8];
    uint64_t v135 = (void (**)(char *, uint64_t))(v23 + 8);
    uint64_t v136 = (void (**)(char *, void, uint64_t))(v23 + 104);
    uint64_t v139 = (void (**)(char *, void, uint64_t))v37;
    uint64_t v133 = *(void *)(v37 + 56);
    uint64_t v134 = (void (**)(char *, uint64_t))(v37 - 8);
    uint64_t v41 = v129;
    id v43 = v141;
    uint64_t v42 = v142;
    uint64_t v44 = v140;
    uint64_t v45 = v135;
    while (1)
    {
      uint64_t v143 = v36;
      v138(v33, v40, v41);
      Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
      (*v136)(v42, v137, v44);
      _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, MEMORY[0x1E4F89300]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v46 = v144;
      uint64_t v47 = v147;
      uint64_t v48 = *v45;
      (*v45)(v42, v44);
      v48(v43, v44);
      if (v46 == v47) {
        break;
      }
      (*v134)(v33, v41);
      v40 += v133;
      uint64_t v36 = v143 - 1;
      if (v143 == 1)
      {
        uint64_t v49 = 1;
        uint64_t v17 = v115;
        uint64_t v18 = v126;
        uint64_t v30 = v128;
        uint64_t v21 = v114;
        id v29 = v113;
        goto LABEL_8;
      }
    }
    uint64_t v30 = v128;
    id v29 = v113;
    (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v113, v33, v41);
    uint64_t v49 = 0;
    uint64_t v17 = v115;
    uint64_t v18 = v126;
    uint64_t v21 = v114;
  }
  else
  {
    uint64_t v49 = 1;
    uint64_t v41 = v129;
  }
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v29, v49, 1, v41);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v29, 1, v41) == 1)
  {
    uint64_t v50 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?;
LABEL_19:
    outlined destroy of MediaUserStateCenter?((uint64_t)v29, v50);
LABEL_20:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v71 = type metadata accessor for Logger();
    __swift_project_value_buffer(v71, (uint64_t)static Logger.pommes);
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v72, v73))
    {
      unint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v74 = 0;
      _os_log_impl(&dword_1C8F83000, v72, v73, "Unable to extract ampUserState", v74, 2u);
      MEMORY[0x1CB77E470](v74, -1, -1);
    }

    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v127, v29, v41);
  uint64_t v51 = Apple_Parsec_Siri_V2alpha_ProfileSlice.values.getter();
  uint64_t v52 = *(void *)(v51 + 16);
  if (v52)
  {
    uint64_t v54 = *(char **)(v18 + 16);
    uint64_t v53 = (char *)(v18 + 16);
    uint64_t v141 = v54;
    unint64_t v55 = (v53[64] + 32) & ~(unint64_t)v53[64];
    uint64_t v135 = (void (**)(char *, uint64_t))v51;
    unint64_t v56 = v51 + v55;
    LODWORD(v140) = *MEMORY[0x1E4F89700];
    uint64_t v138 = (void (*)(char *, unint64_t, uint64_t))(v121 + 8);
    uint64_t v139 = (void (**)(char *, void, uint64_t))(v121 + 104);
    uint64_t v142 = v53;
    uint64_t v136 = (void (**)(char *, void, uint64_t))*((void *)v53 + 7);
    uint64_t v137 = (void (**)(char *, uint64_t))(v53 - 8);
    uint64_t v57 = v130;
    uint64_t v59 = v131;
    uint64_t v58 = v132;
    uint64_t v60 = (void (**)(char *, uint64_t))(v121 + 8);
    while (1)
    {
      uint64_t v143 = v52;
      ((void (*)(char *, unint64_t, uint64_t))v141)(v21, v56, v17);
      Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
      (*v139)(v59, v140, v58);
      _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel, MEMORY[0x1E4F89718]);
      uint64_t v61 = v17;
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v62 = v144;
      uint64_t v63 = v147;
      uint64_t v64 = v21;
      uint64_t v65 = *v60;
      (*v60)(v59, v58);
      v65(v57, v58);
      if (v62 == v63) {
        break;
      }
      (*v137)(v64, v61);
      v56 += (unint64_t)v136;
      uint64_t v52 = v143 - 1;
      uint64_t v17 = v61;
      uint64_t v21 = v64;
      if (v143 == 1)
      {
        uint64_t v66 = 1;
        uint64_t v18 = v126;
        uint64_t v30 = v128;
        id v29 = v122;
        goto LABEL_17;
      }
    }
    uint64_t v18 = v126;
    id v29 = v122;
    (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v122, v64, v61);
    uint64_t v66 = 0;
    uint64_t v17 = v61;
    uint64_t v30 = v128;
  }
  else
  {
    uint64_t v66 = 1;
    id v29 = v122;
  }
LABEL_17:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v29, v66, 1, v17);
  swift_bridgeObjectRelease();
  int v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v29, 1, v17);
  uint64_t v68 = v125;
  os_log_type_t v69 = v124;
  BOOL v70 = v123;
  if (v67 == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v127, v129);
    uint64_t v50 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?;
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v124, v29, v17);
  uint64_t v77 = v116;
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.getter();
  Google_Protobuf_Any.value.getter();
  (*(void (**)(char *, uint64_t))(v117 + 8))(v77, v118);
  uint64_t v146 = 0;
  long long v144 = 0u;
  long long v145 = 0u;
  BinaryDecodingOptions.init()();
  _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AmpUserState and conformance Apple_Parsec_Siri_V2alpha_AmpUserState, MEMORY[0x1E4F88EE0]);
  Message.init(serializedData:extensions:partial:options:)();
  uint64_t v78 = v120;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v120 + 56))(v70, 0, 1, v68);
  uint64_t v79 = v111;
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v111, v70, v68);
  id v80 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1138]), sel_init);
  if (!v80)
  {
    (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v68);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v69, v17);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v127, v129);
    goto LABEL_20;
  }
  uint64_t v75 = v80;
  Apple_Parsec_Siri_V2alpha_AmpUserState.ampSubscriptionStatus.getter();
  uint64_t v81 = v104;
  BOOL v82 = v103;
  uint64_t v83 = v105;
  (*(void (**)(char *, void, uint64_t))(v104 + 104))(v103, *MEMORY[0x1E4F89578], v105);
  _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AmpSubscriptionStatus and conformance Apple_Parsec_Siri_V2alpha_AmpSubscriptionStatus, MEMORY[0x1E4F89588]);
  uint64_t v84 = v110;
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  BOOL v85 = v144 == v147;
  uint64_t v86 = *(void (**)(char *, uint64_t))(v81 + 8);
  v86(v82, v83);
  v86(v84, v83);
  objc_msgSend(v75, sel_setHasAmpSubscriptionStatus_, v85);
  unint64_t v87 = v106;
  unint64_t v88 = v111;
  Apple_Parsec_Siri_V2alpha_AmpUserState.itunesSubscriptionStatus.getter();
  uint64_t v89 = v17;
  uint64_t v90 = v108;
  int64_t v91 = v107;
  uint64_t v92 = matched;
  (*(void (**)(char *, void, uint64_t))(v108 + 104))(v107, *MEMORY[0x1E4F89B00], matched);
  _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ITunesMatchSubscriptionStatus and conformance Apple_Parsec_Siri_V2alpha_ITunesMatchSubscriptionStatus, MEMORY[0x1E4F89B10]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  BOOL v93 = v144 == v147;
  unint64_t v94 = *(void (**)(char *, uint64_t))(v90 + 8);
  v94(v91, v92);
  v94(v87, v92);
  objc_msgSend(v75, sel_setHasItunesSubscriptionStatus_, v93);
  uint64_t v95 = Apple_Parsec_Siri_V2alpha_AmpUserState.userToken.getter();
  unint64_t v97 = v96;
  swift_bridgeObjectRelease();
  uint64_t v98 = HIBYTE(v97) & 0xF;
  if ((v97 & 0x2000000000000000) == 0) {
    uint64_t v98 = v95 & 0xFFFFFFFFFFFFLL;
  }
  objc_msgSend(v75, sel_setHasUserToken_, v98 != 0);
  uint64_t v99 = Apple_Parsec_Siri_V2alpha_AmpUserState.sharedUserID.getter();
  unint64_t v101 = v100;
  swift_bridgeObjectRelease();
  uint64_t v102 = HIBYTE(v101) & 0xF;
  if ((v101 & 0x2000000000000000) == 0) {
    uint64_t v102 = v99 & 0xFFFFFFFFFFFFLL;
  }
  objc_msgSend(v75, sel_setHasSharedUserId_, v102 != 0);
  (*(void (**)(char *, uint64_t))(v120 + 8))(v88, v125);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v124, v89);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v127, v129);
  return v75;
}

uint64_t specialized static PegasusInstrumentationUtil.extractQueryMetadata(from:)(uint64_t a1)
{
  uint64_t v103 = a1;
  uint64_t v1 = type metadata accessor for Apple_Parsec_Search_V2_PreciseStatus();
  uint64_t v93 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v92 = (char *)&v81 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for Apple_Parsec_Search_V2_Location.Source();
  uint64_t v88 = *(void *)(v90 - 8);
  MEMORY[0x1F4188790](v90);
  uint64_t v98 = (char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.MeasurementSystem();
  uint64_t v100 = *(void *)(v86 - 8);
  MEMORY[0x1F4188790](v86);
  uint64_t v99 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit();
  uint64_t v102 = *(void *)(v85 - 8);
  MEMORY[0x1F4188790](v85);
  unint64_t v101 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  uint64_t v96 = *(void *)(v6 - 8);
  uint64_t v97 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v95 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for Google_Protobuf_Int32Value();
  uint64_t v8 = *(void *)(v94 - 8);
  MEMORY[0x1F4188790](v94);
  uint64_t v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Search_V2_Location();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  unint64_t v87 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v81 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v81 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v81 - v21;
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v89 = *(void *)(Context - 8);
  MEMORY[0x1F4188790](Context);
  uint64_t v24 = (char *)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA10E0]), sel_init);
  if (!v25)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.pommes);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v54, v55))
    {
      unint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v56 = 0;
      _os_log_impl(&dword_1C8F83000, v54, v55, "Unable to initialize POMMESSchemaPOMMESPegasusQueryMetadata()", v56, 2u);
      MEMORY[0x1CB77E470](v56, -1, -1);
    }

    return 0;
  }
  uint64_t v26 = v25;
  BOOL v82 = v17;
  uint64_t v84 = v1;
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.getter();
  uint64_t v27 = Apple_Parsec_Search_PegasusQueryContext.location.getter();
  float v28 = MEMORY[0x1CB777B20](v27);
  id v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  v29(v22, v11);
  objc_msgSend(v26, sel_setHasLatitude_, v28 != 0.0);
  Apple_Parsec_Search_PegasusQueryContext.location.getter();
  Apple_Parsec_Search_V2_Location.longitude.getter();
  float v31 = v30;
  v29(v22, v11);
  objc_msgSend(v26, sel_setHasLongitude_, v31 != 0.0);
  Apple_Parsec_Search_PegasusQueryContext.location.getter();
  Apple_Parsec_Search_V2_Location.age.getter();
  uint64_t v32 = v11;
  uint64_t v33 = v11;
  uint64_t v83 = v12 + 8;
  uint64_t v34 = v29;
  v29(v20, v33);
  uint64_t v35 = Google_Protobuf_Int32Value.value.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v94);
  if ((v35 & 0x80000000) == 0)
  {
    objc_msgSend(v26, sel_setLocationAgeInSeconds_, v35);
    uint64_t v36 = Apple_Parsec_Search_PegasusQueryContext.countryCode.getter();
    unint64_t v38 = v37;
    swift_bridgeObjectRelease();
    uint64_t v39 = HIBYTE(v38) & 0xF;
    if ((v38 & 0x2000000000000000) == 0) {
      uint64_t v39 = v36 & 0xFFFFFFFFFFFFLL;
    }
    objc_msgSend(v26, sel_setHasCountryCode_, v39 != 0);
    uint64_t v40 = Apple_Parsec_Search_PegasusQueryContext.siriLocale.getter();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    uint64_t v43 = HIBYTE(v42) & 0xF;
    if ((v42 & 0x2000000000000000) == 0) {
      uint64_t v43 = v40 & 0xFFFFFFFFFFFFLL;
    }
    objc_msgSend(v26, sel_setHasSiriLocale_, v43 != 0);
    Apple_Parsec_Search_PegasusQueryContext.uiScale.getter();
    objc_msgSend(v26, sel_setUiScale_);
    uint64_t v44 = v95;
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
    char v45 = Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isNavigationMode.getter();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v44, v97);
    objc_msgSend(v26, sel_setIsNavigationMode_, v45 & 1);
    unint64_t v46 = Apple_Parsec_Search_PegasusQueryContext.installedAppsSignature.getter();
    uint64_t v48 = v98;
    uint64_t v49 = v46;
    unint64_t v50 = v47;
    uint64_t v51 = v34;
    switch(v47 >> 62)
    {
      case 1uLL:
        unint64_t v59 = HIDWORD(v46);
        outlined consume of Data._Representation(v46, v47);
        LODWORD(v52) = v59 - v49;
        if (!__OFSUB__(v59, v49))
        {
          uint64_t v52 = (int)v52;
          goto LABEL_20;
        }
        __break(1u);
        goto LABEL_65;
      case 2uLL:
        uint64_t v58 = *(void *)(v46 + 16);
        uint64_t v57 = *(void *)(v46 + 24);
        outlined consume of Data._Representation(v46, v47);
        uint64_t v52 = v57 - v58;
        if (!__OFSUB__(v57, v58)) {
          goto LABEL_20;
        }
        __break(1u);
LABEL_17:
        outlined consume of Data._Representation(v49, v50);
        uint64_t v52 = 0;
LABEL_20:
        uint64_t v60 = v93;
        unint64_t v61 = 10 * (v52 / 10);
        if ((v61 & 0x8000000000000000) != 0 || HIDWORD(v61)) {
          goto LABEL_65;
        }
        objc_msgSend(v26, sel_setInstalledAppsSignatureLength_);
        uint64_t v62 = Apple_Parsec_Search_PegasusQueryContext.storeFront.getter();
        uint64_t v63 = (void *)MEMORY[0x1CB77CA90](v62);
        swift_bridgeObjectRelease();
        objc_msgSend(v26, sel_setStorefrontValue_, v63);

        objc_msgSend(v26, sel_setHeySiriEnabled_, Apple_Parsec_Search_PegasusQueryContext.hsEnabled.getter() & 1);
        uint64_t v64 = v101;
        Apple_Parsec_Search_PegasusQueryContext.temperatureUnit.getter();
        uint64_t v65 = v85;
        int v66 = (*(uint64_t (**)(char *, uint64_t))(v102 + 88))(v64, v85);
        if (v66 == *MEMORY[0x1E4F885B0])
        {
          objc_msgSend(v26, sel_setTemperatureScale_, 0);
          uint64_t v67 = v32;
LABEL_26:
          uint64_t v68 = v88;
          goto LABEL_27;
        }
        uint64_t v67 = v32;
        if (v66 == *MEMORY[0x1E4F885A8])
        {
          objc_msgSend(v26, sel_setTemperatureScale_, 1);
          goto LABEL_26;
        }
        uint64_t v68 = v88;
        if (v66 == *MEMORY[0x1E4F885A0])
        {
          objc_msgSend(v26, sel_setTemperatureScale_, 2);
        }
        else
        {
          objc_msgSend(v26, sel_setTemperatureScale_, 0);
          (*(void (**)(char *, uint64_t))(v102 + 8))(v101, v65);
        }
LABEL_27:
        os_log_type_t v69 = v99;
        Apple_Parsec_Search_PegasusQueryContext.measurementSystem.getter();
        uint64_t v70 = v86;
        int v71 = (*(uint64_t (**)(char *, uint64_t))(v100 + 88))(v69, v86);
        if (v71 == *MEMORY[0x1E4F885D0])
        {
          objc_msgSend(v26, sel_setMeasurementSystem_, 0);
          uint64_t v72 = v82;
        }
        else
        {
          uint64_t v72 = v82;
          if (v71 == *MEMORY[0x1E4F885B8])
          {
            objc_msgSend(v26, sel_setMeasurementSystem_, 1);
          }
          else if (v71 == *MEMORY[0x1E4F885C8])
          {
            objc_msgSend(v26, sel_setMeasurementSystem_, 2);
          }
          else if (v71 == *MEMORY[0x1E4F885C0])
          {
            objc_msgSend(v26, sel_setMeasurementSystem_, 3);
          }
          else
          {
            objc_msgSend(v26, sel_setMeasurementSystem_, 0);
            (*(void (**)(char *, uint64_t))(v100 + 8))(v99, v70);
          }
        }
        Apple_Parsec_Search_PegasusQueryContext.location.getter();
        Apple_Parsec_Search_V2_Location.source.getter();
        v51(v72, v67);
        uint64_t v73 = v90;
        int v74 = (*(uint64_t (**)(char *, uint64_t))(v68 + 88))(v48, v90);
        if (v74 == *MEMORY[0x1E4F88940])
        {
          objc_msgSend(v26, sel_setLocationSource_, 0);
        }
        else if (v74 == *MEMORY[0x1E4F88918])
        {
          objc_msgSend(v26, sel_setLocationSource_, 1);
        }
        else if (v74 == *MEMORY[0x1E4F88910])
        {
          objc_msgSend(v26, sel_setLocationSource_, 2);
        }
        else if (v74 == *MEMORY[0x1E4F88938])
        {
          objc_msgSend(v26, sel_setLocationSource_, 3);
        }
        else if (v74 == *MEMORY[0x1E4F88930])
        {
          objc_msgSend(v26, sel_setLocationSource_, 4);
        }
        else if (v74 == *MEMORY[0x1E4F88920])
        {
          objc_msgSend(v26, sel_setLocationSource_, 5);
        }
        else if (v74 == *MEMORY[0x1E4F88948])
        {
          objc_msgSend(v26, sel_setLocationSource_, 6);
        }
        else if (v74 == *MEMORY[0x1E4F88928])
        {
          objc_msgSend(v26, sel_setLocationSource_, 7);
        }
        else if (v74 == *MEMORY[0x1E4F88908])
        {
          objc_msgSend(v26, sel_setLocationSource_, 8);
        }
        else
        {
          objc_msgSend(v26, sel_setLocationSource_, 0);
          (*(void (**)(char *, uint64_t))(v68 + 8))(v48, v73);
        }
        uint64_t v75 = v87;
        Apple_Parsec_Search_PegasusQueryContext.location.getter();
        uint64_t v76 = v92;
        Apple_Parsec_Search_V2_Location.preciseStatus.getter();
        v51(v75, v67);
        uint64_t v77 = v84;
        int v78 = (*(uint64_t (**)(char *, uint64_t))(v60 + 88))(v76, v84);
        if (v78 == *MEMORY[0x1E4F88CD8])
        {
          objc_msgSend(v26, sel_setLocationPreciseStatus_, 1);
          (*(void (**)(char *, uint64_t))(v89 + 8))(v24, Context);
        }
        else
        {
          uint64_t v79 = (void (**)(char *, uint64_t))(v89 + 8);
          if (v78 == *MEMORY[0x1E4F88CC8])
          {
            objc_msgSend(v26, sel_setLocationPreciseStatus_, 2);
            (*v79)(v24, Context);
          }
          else
          {
            objc_msgSend(v26, sel_setLocationPreciseStatus_, 0);
            (*v79)(v24, Context);
            (*(void (**)(char *, uint64_t))(v60 + 8))(v76, v77);
          }
        }
        break;
      case 3uLL:
        goto LABEL_17;
      default:
        outlined consume of Data._Representation(v46, v47);
        uint64_t v52 = BYTE6(v50);
        goto LABEL_20;
    }
    return (uint64_t)v26;
  }
LABEL_65:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static PegasusInstrumentationUtil.extractSiriPegasusMetadata(from:)(uint64_t a1)
{
  uint64_t v104 = a1;
  uint64_t v117 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RestrictionCategory();
  uint64_t v103 = *(void *)(v117 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v117);
  uint64_t v119 = (char *)v97 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  uint64_t v118 = (char *)v97 - v3;
  uint64_t v120 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Restriction();
  uint64_t v116 = *(void *)(v120 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v120);
  uint64_t v115 = (char *)v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  unint64_t v114 = (char *)v97 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v113 = (char *)v97 - v8;
  uint64_t v112 = (void *)type metadata accessor for Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions();
  uint64_t v9 = *(v112 - 1);
  uint64_t v10 = MEMORY[0x1F4188790](v112);
  uint64_t v111 = (char *)v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v108 = (char *)v97 - v12;
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext.SiriInteractionType();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v100 = (char *)v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v97 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v110 = (char *)v97 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  char v109 = (void (**)(char *, uint64_t))((char *)v97 - v27);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  float v30 = (char *)v97 - v29;
  MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)v97 - v31;
  id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA11C8]), sel_init);
  if (!v33)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.pommes);
    unint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl(&dword_1C8F83000, v42, v43, "Unable to initialize POMMESSchemaPOMMESSiriPegasusMetadata()", v44, 2u);
      MEMORY[0x1CB77E470](v44, -1, -1);
    }

    return 0;
  }
  uint64_t v34 = v33;
  uint64_t v98 = v23;
  uint64_t v107 = v9;
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.siriInteractionType.getter();
  uint64_t v35 = v32;
  uint64_t v36 = v17;
  uint64_t v105 = *(void (**)(char *, uint64_t))(v18 + 8);
  v105(v35, v17);
  int v37 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v16, v13);
  uint64_t v38 = v18 + 8;
  if (v37 == *MEMORY[0x1E4F886F0])
  {
    uint64_t v39 = 0;
    uint64_t v40 = v108;
  }
  else
  {
    uint64_t v45 = v14;
    uint64_t v40 = v108;
    if (v37 == *MEMORY[0x1E4F88700])
    {
      uint64_t v39 = 2;
    }
    else if (v37 == *MEMORY[0x1E4F886F8])
    {
      uint64_t v39 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v13);
      uint64_t v39 = 0;
    }
  }
  objc_msgSend(v34, sel_setInteractionType_, v39);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.contentRatingRestrictions.getter();
  v105(v30, v36);
  uint64_t v46 = Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions.movieRestriction.getter();
  unint64_t v47 = *(void (**)(char *, void *))(v107 + 8);
  uint64_t v48 = v112;
  v47(v40, v112);
  if ((v46 & 0x80000000) == 0)
  {
    uint64_t v49 = v38;
    objc_msgSend(v34, sel_setMovieRestriction_, v46);
    unint64_t v50 = v109;
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
    uint64_t v51 = v111;
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.contentRatingRestrictions.getter();
    v105((char *)v50, v36);
    uint64_t v52 = Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions.tvRestriction.getter();
    v47(v51, v48);
    if ((v52 & 0x80000000) == 0)
    {
      objc_msgSend(v34, sel_setTvRestriction_, v52);
      uint64_t v53 = v110;
      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
      uint64_t v54 = Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.getter();
      uint64_t v102 = v36;
      uint64_t v55 = v36;
      unint64_t v56 = v105;
      v105(v53, v55);
      uint64_t v57 = *(void *)(v54 + 16);
      unint64_t v101 = v34;
      uint64_t v58 = v103;
      uint64_t v99 = v49;
      if (v57)
      {
        uint64_t v111 = *(char **)(v116 + 16);
        unint64_t v59 = v54 + ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80));
        LODWORD(v110) = *MEMORY[0x1E4F89500];
        uint64_t v108 = (char *)(v103 + 8);
        char v109 = (void (**)(char *, uint64_t))(v103 + 104);
        uint64_t v112 = (void *)(v116 + 16);
        uint64_t v106 = *(void *)(v116 + 72);
        uint64_t v107 = v116 + 8;
        v97[1] = v54;
        swift_bridgeObjectRetain();
        uint64_t v60 = v113;
        uint64_t v62 = v118;
        unint64_t v61 = v119;
        uint64_t v63 = v117;
        uint64_t v64 = (void (**)(char *, uint64_t))v108;
        while (1)
        {
          ((void (*)(char *, unint64_t, uint64_t))v111)(v60, v59, v120);
          Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
          ((void (*)(char *, void, uint64_t))*v109)(v61, v110, v63);
          _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RestrictionCategory and conformance Apple_Parsec_Siri_V2alpha_RestrictionCategory, MEMORY[0x1E4F89528]);
          dispatch thunk of RawRepresentable.rawValue.getter();
          dispatch thunk of RawRepresentable.rawValue.getter();
          uint64_t v66 = v121;
          uint64_t v65 = v122;
          uint64_t v67 = *v64;
          (*v64)(v61, v63);
          v67(v62, v63);
          (*(void (**)(char *, uint64_t))v107)(v60, v120);
          if (v65 == v66) {
            break;
          }
          v59 += v106;
          if (!--v57)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v68 = 0;
            goto LABEL_23;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v68 = 1;
LABEL_23:
        uint64_t v58 = v103;
        uint64_t v34 = v101;
        unint64_t v56 = v105;
        os_log_type_t v69 = v98;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v68 = 0;
        os_log_type_t v69 = v98;
      }
      objc_msgSend(v34, sel_setIsInRestrictedSharingMode_, v68);
      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
      uint64_t v70 = Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.getter();
      v56(v69, v102);
      uint64_t v71 = *(void *)(v70 + 16);
      if (v71)
      {
        uint64_t v112 = *(void **)(v116 + 16);
        unint64_t v72 = v70 + ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80));
        LODWORD(v111) = *MEMORY[0x1E4F89508];
        char v109 = (void (**)(char *, uint64_t))(v58 + 8);
        uint64_t v110 = (char *)(v58 + 104);
        uint64_t v113 = (char *)(v116 + 16);
        uint64_t v107 = *(void *)(v116 + 72);
        uint64_t v108 = (char *)(v116 + 8);
        uint64_t v106 = v70;
        swift_bridgeObjectRetain();
        uint64_t v73 = v114;
        uint64_t v75 = v118;
        int v74 = v119;
        uint64_t v76 = v117;
        uint64_t v77 = v109;
        while (1)
        {
          ((void (*)(char *, unint64_t, uint64_t))v112)(v73, v72, v120);
          Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
          (*(void (**)(char *, void, uint64_t))v110)(v74, v111, v76);
          _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RestrictionCategory and conformance Apple_Parsec_Siri_V2alpha_RestrictionCategory, MEMORY[0x1E4F89528]);
          dispatch thunk of RawRepresentable.rawValue.getter();
          dispatch thunk of RawRepresentable.rawValue.getter();
          uint64_t v79 = v121;
          uint64_t v78 = v122;
          id v80 = *v77;
          (*v77)(v74, v76);
          v80(v75, v76);
          (*(void (**)(char *, uint64_t))v108)(v73, v120);
          if (v78 == v79) {
            break;
          }
          v72 += v107;
          if (!--v71)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v81 = 1;
            goto LABEL_31;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v81 = 0;
LABEL_31:
        uint64_t v58 = v103;
        uint64_t v34 = v101;
        unint64_t v56 = v105;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v81 = 1;
      }
      objc_msgSend(v34, sel_setIsExplicitContentAllowed_, v81);
      BOOL v82 = v100;
      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
      uint64_t v83 = Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.getter();
      v56(v82, v102);
      uint64_t v84 = *(void *)(v83 + 16);
      if (v84)
      {
        unint64_t v114 = *(char **)(v116 + 16);
        unint64_t v85 = v83 + ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80));
        LODWORD(v113) = *MEMORY[0x1E4F89510];
        uint64_t v111 = (char *)(v58 + 8);
        uint64_t v112 = (void *)(v58 + 104);
        v116 += 16;
        char v109 = *(void (***)(char *, uint64_t))(v116 + 56);
        uint64_t v110 = (char *)(v116 - 8);
        uint64_t v108 = (char *)v83;
        swift_bridgeObjectRetain();
        uint64_t v86 = v115;
        uint64_t v88 = v118;
        unint64_t v87 = v119;
        uint64_t v89 = v117;
        uint64_t v90 = (void (**)(char *, uint64_t))v111;
        while (1)
        {
          ((void (*)(char *, unint64_t, uint64_t))v114)(v86, v85, v120);
          Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
          ((void (*)(char *, void, uint64_t))*v112)(v87, v113, v89);
          _s10PegasusAPI026Apple_Parsec_Siri_V2alpha_eA7RequestVAC21InternalSwiftProtobuf7MessageAAWlTm_0(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RestrictionCategory and conformance Apple_Parsec_Siri_V2alpha_RestrictionCategory, MEMORY[0x1E4F89528]);
          dispatch thunk of RawRepresentable.rawValue.getter();
          dispatch thunk of RawRepresentable.rawValue.getter();
          uint64_t v92 = v121;
          uint64_t v91 = v122;
          uint64_t v93 = *v90;
          (*v90)(v87, v89);
          v93(v88, v89);
          (*(void (**)(char *, uint64_t))v110)(v86, v120);
          if (v91 == v92) {
            break;
          }
          v85 += (unint64_t)v109;
          if (!--v84)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v94 = 0;
            goto LABEL_39;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v94 = 1;
LABEL_39:
        uint64_t v34 = v101;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v94 = 0;
      }
      objc_msgSend(v34, sel_setIsWebContentDisabled_, v94);
      uint64_t v95 = specialized static PegasusInstrumentationUtil.extractDeviceState(from:)();
      objc_msgSend(v34, sel_setDeviceState_, v95);

      return (uint64_t)v34;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized static PegasusInstrumentationUtil.extractDeviceState(from:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceState();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1088]), sel_init);
  if (v8)
  {
    uint64_t v9 = v8;
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.deviceState.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    uint64_t v10 = Apple_Parsec_Siri_V2alpha_DeviceState.companionName.getter();
    uint64_t v11 = (void *)MEMORY[0x1CB77CA90](v10);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setCompanionName_, v11);

    objc_msgSend(v9, sel_setIsCarDoNotDisturbModeEnabled_, Apple_Parsec_Siri_V2alpha_DeviceState.isCarDnd.getter() & 1);
    objc_msgSend(v9, sel_setIsCarPlayEnabled_, Apple_Parsec_Siri_V2alpha_DeviceState.isCarplay.getter() & 1);
    objc_msgSend(v9, sel_setIsEyesFreeEnabled_, Apple_Parsec_Siri_V2alpha_DeviceState.isEyesFree.getter() & 1);
    objc_msgSend(v9, sel_setIsLockedWithPasscode_, Apple_Parsec_Siri_V2alpha_DeviceState.isLockedWithPasscode.getter() & 1);
    objc_msgSend(v9, sel_setIsMultiUserDevice_, Apple_Parsec_Siri_V2alpha_DeviceState.isMultiUser.getter() & 1);
    objc_msgSend(v9, sel_setIsTextToSpeechEnabled_, Apple_Parsec_Siri_V2alpha_DeviceState.isTextToSpeechEnabled.getter() & 1);
    objc_msgSend(v9, sel_setIsVoiceTriggerEnabled_, Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceTriggerEnabled.getter() & 1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1C8F83000, v13, v14, "Unable to initialize POMMESSchemaPOMMESDeviceState()", v15, 2u);
      MEMORY[0x1CB77E470](v15, -1, -1);
    }

    return 0;
  }
  return v9;
}

NSObject *specialized static PegasusInstrumentationUtil.extractClientConversationMetadata(from:onDeviceLabels:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_Context_ClientConversationContextInfo();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1060]), sel_init);
  if (!v7)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    id v8 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1C8F83000, v8, v21, "Unable to initialize POMMESSchemaPOMMESClientConversationMetadata()", v22, 2u);
      MEMORY[0x1CB77E470](v22, -1, -1);
    }
    goto LABEL_21;
  }
  id v8 = v7;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA10B8]), sel_init);
  if (!v9)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
    float v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_1C8F83000, v30, v31, "Unable to initialize POMMESSchemaPOMMESOnDeviceMetadata()", v32, 2u);
      MEMORY[0x1CB77E470](v32, -1, -1);
    }

LABEL_21:
    return 0;
  }
  uint64_t v10 = v9;
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.getter();
  char v11 = Apple_Parsec_Siri_Context_ClientConversationContextInfo.hasPromptContext.getter();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, v3);
  [v8 setHasPromptContext:v11 & 1];
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.getter();
  char v13 = Apple_Parsec_Siri_Context_ClientConversationContextInfo.hasClientDisplayHints.getter();
  v12(v6, v3);
  [v8 setHasDisplayHints:v13 & 1];
  if (*(void *)(a2 + 16) && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(0), (v15 & 1) != 0))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v14);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    uint64_t v19 = (void *)MEMORY[0x1CB77CA90](v17, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = 0;
  }
  objc_msgSend(v10, sel_setOnScreenAppBundleIdDomain_, v19);

  if (*(void *)(a2 + 16) && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(1), (v24 & 1) != 0))
  {
    uint64_t v25 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v23);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    swift_bridgeObjectRetain();
    uint64_t v28 = (void *)MEMORY[0x1CB77CA90](v26, v27);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = 0;
  }
  objc_msgSend(v10, sel_setOnScreenUriDomain_, v28);

  [v8 setOnDeviceMetadata:v10];
  return v8;
}

uint64_t type metadata accessor for PegasusSearchResponse(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PegasusSearchResponse);
}

uint64_t specialized static PegasusInstrumentationUtil.kfedLatency(from:)()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1110]), sel_init);
  if (!v0)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1C8F83000, v5, v6, "Unable to initialize POMMESSchemaPOMMESPegasusRequestKfedLatency()", v7, 2u);
      MEMORY[0x1CB77E470](v7, -1, -1);
    }

    return 0;
  }
  uint64_t v1 = v0;
  unint64_t v2 = Latencyinfopb_KfedLatencyInfo.banyanMs.getter();
  if ((v2 & 0x8000000000000000) == 0 && !HIDWORD(v2))
  {
    objc_msgSend(v1, sel_setBanyanLatencyInMs_, v2);
    unint64_t v3 = Latencyinfopb_KfedLatencyInfo.overallMs.getter();
    if ((v3 & 0x8000000000000000) == 0 && !HIDWORD(v3))
    {
      objc_msgSend(v1, sel_setOverallLatencyInMs_, v3);
      return (uint64_t)v1;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in PegasusInstrumentationUtil.buildClientDrivenContext(_:)()
{
  uint64_t v82 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
  id v0 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 - 8);
  MEMORY[0x1F4188790](v82);
  uint64_t v81 = (char *)v74 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v95 = (char *)v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent();
  uint64_t v83 = *(void *)(v4 - 8);
  uint64_t v84 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v94 = (char *)v74 - v9;
  MEMORY[0x1F4188790](v8);
  id v80 = (char *)v74 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent.OneOf_Component?);
  MEMORY[0x1F4188790](v11 - 8);
  unint64_t v87 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent.OneOf_Component();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v93 = (char *)v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v97 = (char *)v74 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v92 = (char *)v74 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v86 = (char *)v74 - v21;
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1CB779170](v24);
  uint64_t v28 = *(void *)(v27 + 16);
  uint64_t v75 = v7;
  if (v28)
  {
    uint64_t v78 = (void (**)(char *, uint64_t))v27;
    uint64_t v79 = v0;
    float v30 = *(uint64_t (***)(char *, uint64_t))(v23 + 16);
    uint64_t v29 = v23 + 16;
    unint64_t v31 = v27 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    uint64_t v89 = *(void (***)(char *, uint64_t))(v29 + 56);
    uint64_t v90 = v30;
    uint64_t v91 = v29;
    uint64_t v88 = (void (**)(char *, uint64_t))(v29 - 8);
    uint64_t v32 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    uint64_t v96 = v14;
    id v33 = (void (**)(char *, uint64_t, uint64_t))(v14 + 32);
    unint64_t v34 = MEMORY[0x1E4FBC860];
    uint64_t v35 = (uint64_t)v87;
    uint64_t v85 = v22;
    ((void (*)(char *, unint64_t, uint64_t))v30)(v26, v31, v22);
    while (1)
    {
      Apple_Parsec_Siri_V2alpha_ClientComponent.component.getter();
      (*v88)(v26, v22);
      if ((*v32)(v35, 1, v13) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent.OneOf_Component?);
      }
      else
      {
        uint64_t v36 = *v33;
        int v37 = v86;
        (*v33)(v86, v35, v13);
        v36(v92, (uint64_t)v37, v13);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v38 = v34;
        }
        else {
          unint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1, v34);
        }
        unint64_t v40 = *(void *)(v38 + 16);
        unint64_t v39 = *(void *)(v38 + 24);
        if (v40 >= v39 >> 1) {
          unint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, v38);
        }
        *(void *)(v38 + 16) = v40 + 1;
        unint64_t v34 = v38;
        v36((char *)(v38+ ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80))+ *(void *)(v96 + 72) * v40), (uint64_t)v92, v13);
        uint64_t v35 = (uint64_t)v87;
        uint64_t v22 = v85;
      }
      v31 += (unint64_t)v89;
      if (!--v28) {
        break;
      }
      ((void (*)(char *, unint64_t, uint64_t))v90)(v26, v31, v22);
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v75;
    uint64_t v14 = v96;
    unint64_t v41 = v34;
    id v0 = v79;
    uint64_t v42 = *(void *)(v41 + 16);
    if (v42)
    {
LABEL_14:
      uint64_t v44 = *(char **)(v14 + 16);
      uint64_t v43 = v14 + 16;
      unint64_t v45 = v41 + ((*(unsigned __int8 *)(v43 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 64));
      uint64_t v91 = *(void *)(v43 + 56);
      uint64_t v92 = v44;
      uint64_t v90 = (uint64_t (**)(char *, uint64_t))(v43 + 72);
      uint64_t v46 = (void (**)(char *, uint64_t))(v43 - 8);
      uint64_t v96 = v43;
      uint64_t v78 = (void (**)(char *, uint64_t))(v43 + 80);
      uint64_t v79 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56);
      LODWORD(v88) = *MEMORY[0x1E4F891B8];
      uint64_t v77 = (void (**)(char *, char *, uint64_t))(v0 + 4);
      uint64_t v76 = (void (**)(char *, uint64_t))(v0 + 1);
      uint64_t v86 = (char *)(v83 + 32);
      unint64_t v87 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
      v74[1] = v41;
      swift_bridgeObjectRetain();
      unint64_t v47 = MEMORY[0x1E4FBC860];
      uint64_t v89 = v46;
      uint64_t v85 = (unint64_t)v46 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v48 = v84;
      uint64_t v49 = (uint64_t)v95;
      unint64_t v50 = v93;
      do
      {
        unint64_t v51 = v47;
        uint64_t v52 = v97;
        uint64_t v53 = (void (*)(char *, char *, uint64_t))v92;
        ((void (*)(char *, unint64_t, uint64_t))v92)(v97, v45, v13);
        v53(v50, v52, v13);
        int v54 = (*v90)(v50, v13);
        if (v54 == v88)
        {
          (*v78)(v50, v13);
          uint64_t v55 = v81;
          uint64_t v56 = v82;
          (*v77)(v81, v50, v82);
          Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
          uint64_t v57 = v56;
          uint64_t v49 = (uint64_t)v95;
          (*v76)(v55, v57);
          (*v89)(v97, v13);
        }
        else
        {
          (*v79)(v49, 1, 1, v48);
          uint64_t v58 = *v89;
          (*v89)(v50, v13);
          v58(v97, v13);
        }
        unint64_t v47 = v51;
        if ((*v87)(v49, 1, v48) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v49, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
        }
        else
        {
          uint64_t v59 = v49;
          uint64_t v60 = *(void (**)(char *, char *, uint64_t))v86;
          unint64_t v61 = v80;
          (*(void (**)(char *, uint64_t, uint64_t))v86)(v80, v59, v48);
          v60(v94, v61, v48);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v51 + 16) + 1, 1, v51);
          }
          unint64_t v63 = *(void *)(v47 + 16);
          unint64_t v62 = *(void *)(v47 + 24);
          if (v63 >= v62 >> 1) {
            unint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1, v47);
          }
          *(void *)(v47 + 16) = v63 + 1;
          unint64_t v64 = v47
              + ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))
              + *(void *)(v83 + 72) * v63;
          uint64_t v48 = v84;
          v60((char *)v64, v94, v84);
          uint64_t v49 = (uint64_t)v95;
        }
        v45 += v91;
        --v42;
      }
      while (v42);
      swift_bridgeObjectRelease_n();
      uint64_t v7 = v75;
      uint64_t v65 = *(void *)(v47 + 16);
      if (!v65) {
        goto LABEL_35;
      }
      goto LABEL_30;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v41 = MEMORY[0x1E4FBC860];
    uint64_t v42 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (v42) {
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v47 = MEMORY[0x1E4FBC860];
  uint64_t v48 = v84;
  uint64_t v65 = *(void *)(MEMORY[0x1E4FBC860] + 16);
  if (!v65)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_30:
  uint64_t v97 = *(char **)(v83 + 16);
  unint64_t v66 = v47 + ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80));
  uint64_t v67 = (uint64_t (**)(char *, uint64_t))(v83 + 88);
  int v68 = *MEMORY[0x1E4F895B0];
  LODWORD(v96) = *MEMORY[0x1E4F895B8];
  LODWORD(v95) = *MEMORY[0x1E4F895A0];
  os_log_type_t v69 = v7;
  uint64_t v70 = (void (**)(char *, uint64_t))(v83 + 8);
  uint64_t v71 = *(void *)(v83 + 72);
  while (1)
  {
    ((void (*)(char *, unint64_t, uint64_t))v97)(v69, v66, v48);
    int v72 = (*v67)(v69, v48);
    if (v72 == v68)
    {
      swift_bridgeObjectRelease();
      (*v70)(v75, v84);
      return 1;
    }
    if (v72 == v96)
    {
      swift_bridgeObjectRelease();
      (*v70)(v75, v84);
      return 2;
    }
    if (v72 == v95) {
      break;
    }
    os_log_type_t v69 = v75;
    uint64_t v48 = v84;
    (*v70)(v75, v84);
    v66 += v71;
    if (!--v65) {
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRelease();
  (*v70)(v75, v84);
  return 3;
}

id PegasusInstrumentationUtil.logPegasusSelfOpaquePayloads(requestId:payloads:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1298]), sel_init);
  id v41 = result;
  if (!result) {
    return result;
  }
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v13, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
  {

    return (id)outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
  }
  uint64_t v38 = v8;
  uint64_t v39 = v7;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
  uint64_t v14 = a2;
  id v15 = v41;
  objc_msgSend(v41, sel_setComponent_, 1);
  id v16 = objc_allocWithZone(MEMORY[0x1E4FA1378]);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v18 = objc_msgSend(v16, sel_initWithNSUUID_, isa);

  objc_msgSend(v15, sel_setUuid_, v18);
  uint64_t v19 = *(void *)(v14 + 16);
  uint64_t v20 = v10;
  if (!v19) {
    goto LABEL_16;
  }
  v37[1] = v37;
  swift_bridgeObjectRetain();
  v37[0] = v14;
  uint64_t v21 = (unint64_t *)(v14 + 40);
  uint64_t v40 = 0x80000001C919E760;
  do
  {
    uint64_t v23 = *(v21 - 1);
    unint64_t v22 = *v21;
    id v24 = objc_allocWithZone(MEMORY[0x1E4FA12D0]);
    outlined copy of Data._Representation(v23, v22);
    id v25 = objc_msgSend(v24, sel_init, v37[0]);
    if (!v25)
    {
      outlined consume of Data._Representation(v23, v22);
      goto LABEL_7;
    }
    uint64_t v26 = v25;
    objc_msgSend(v25, sel_setComponentId_, v41);
    Class v27 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v26, sel_setAnyEventPayload_, v27);

    uint64_t v28 = self;
    swift_retain();
    id v29 = objc_msgSend(v28, sel_processInfo);
    id v30 = objc_msgSend(v29, sel_environment);
    uint64_t v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (!*(void *)(v31 + 16))
    {

      swift_bridgeObjectRelease();
LABEL_13:
      id v35 = objc_msgSend(self, sel_sharedStream);
      goto LABEL_14;
    }
    specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, v40);
    char v33 = v32;

    uint64_t v34 = swift_bridgeObjectRelease();
    if ((v33 & 1) == 0) {
      goto LABEL_13;
    }
    id v35 = (id)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v34);
LABEL_14:
    uint64_t v36 = v35;
    swift_release();
    objc_msgSend(v36, sel_emitMessage_, v26);
    outlined consume of Data._Representation(v23, v22);

    swift_unknownObjectRelease();
LABEL_7:
    v21 += 2;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
LABEL_16:

  return (id)(*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v20, v39);
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t initializeWithCopy for PegasusSearchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

Swift::Int partial apply for closure #1 in PommesSearchRequestProcessor.search_sync(completion:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for SignpostToken() - 8);
  uint64_t v7 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return closure #1 in PommesSearchRequestProcessor.search_sync(completion:)(a1, v1 + v4, v7);
}

Swift::Int closure #1 in PommesSearchRequestProcessor.search_sync(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = swift_projectBox();
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_release();
  if (Strong)
  {
    outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v8, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 0, 1, v11);
    swift_beginAccess();
    outlined assign with take of Result<PegasusSearchResponse, PegasusError>?((uint64_t)v8, v9);
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(a2, 0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v12, (uint64_t)static Signposter.pommes);
  OSSignposter.end(token:message:)(a3, 0, 0xE000000000000000);
  return OS_dispatch_semaphore.signal()();
}

uint64_t outlined assign with take of Result<PegasusSearchResponse, PegasusError>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t destroy for PegasusSearchResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t specialized PommesSearchRequestProcessor.handlePegasusResponse(_:_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a2;
  uint64_t v7 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v35 - v12;
  uint64_t v14 = type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1F4188790](v14 - 8);
  id v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v13, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  id v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
  if (v18(v13, 1, v17) != 1)
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      _s21SiriInformationSearch15PerformanceUtilC6TicketVWObTm_0((uint64_t)v13, (uint64_t)v16, type metadata accessor for PegasusSearchResponse);
      v37[3] = type metadata accessor for SportsResolver();
      v37[4] = (uint64_t)&protocol witness table for SportsResolver;
      __swift_allocate_boxed_opaque_existential_1(v37);
      swift_retain_n();
      swift_retain_n();
      SportsResolver.init()();
      swift_retain();
      swift_retain();
      specialized PommesSearchRequestProcessor.handleSuccess(_:_:_:)(v16, (uint64_t)v37, v36, a3, a4);
      swift_release();
      swift_release();
      _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v16, type metadata accessor for PegasusSearchResponse);
      outlined destroy of DefaultExperiencesResolver((uint64_t)v37);
LABEL_18:
      swift_release_n();
      return swift_release_n();
    }
    uint64_t v7 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>;
  }
  swift_retain_n();
  swift_retain_n();
  outlined destroy of MediaUserStateCenter?((uint64_t)v13, v7);
  uint64_t v19 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?;
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v11, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  if (v18(v11, 1, v17) == 1)
  {
LABEL_13:
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, v19);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_1C8F83000, v29, v30, "PireneResponse failure: none", v31, 2u);
      MEMORY[0x1CB77E470](v31, -1, -1);
    }

    lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
    char v32 = (void *)swift_allocError();
    *char v33 = 0x80;
    closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v32, 1, a3);

    goto LABEL_18;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v19 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>;
    goto LABEL_13;
  }
  char v20 = *v11;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    id v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    v37[0] = v25;
    *(_DWORD *)id v24 = 136315138;
    LOBYTE(v38) = v20;
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v22, v23, "POMMES-CURARE: {\"error\":\"%s\"}", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v25, -1, -1);
    MEMORY[0x1CB77E470](v24, -1, -1);
  }

  swift_retain();
  swift_retain();
  specialized PommesSearchRequestProcessor.handleFailure(with:completion:)(v20, v36, a3, a4);
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized PommesSearchRequestProcessor.handlePegasusResponse(_:_:)(uint64_t a1, void *a2, uint64_t (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v45 = a3;
  uint64_t v43 = a2;
  uint64_t v10 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  id v16 = (char *)&v42 - v15;
  uint64_t v17 = type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v44 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v16, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  char v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48);
  if (v20(v16, 1, v19) != 1)
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      char v32 = v44;
      _s21SiriInformationSearch15PerformanceUtilC6TicketVWObTm_0((uint64_t)v16, (uint64_t)v44, type metadata accessor for PegasusSearchResponse);
      v46[3] = type metadata accessor for SportsResolver();
      v46[4] = (uint64_t)&protocol witness table for SportsResolver;
      __swift_allocate_boxed_opaque_existential_1(v46);
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      SportsResolver.init()();
      swift_retain();
      swift_retain();
      swift_retain();
      specialized PommesSearchRequestProcessor.handleSuccess(_:_:_:)(v32, (uint64_t)v46, v43, v45, a4, a5, a6);
      swift_release();
      swift_release();
      swift_release();
      _s21SiriInformationSearch06PommesC7RequestVWOhTm_0((uint64_t)v32, type metadata accessor for PegasusSearchResponse);
      outlined destroy of DefaultExperiencesResolver((uint64_t)v46);
      swift_release();
      swift_release_n();
      goto LABEL_18;
    }
    uint64_t v10 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>;
  }
  uint64_t v44 = (char *)a4;
  swift_retain_n();
  swift_retain_n();
  uint64_t v21 = a6;
  swift_retain_n();
  outlined destroy of MediaUserStateCenter?((uint64_t)v16, v10);
  unint64_t v22 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?;
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v14, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  if (v20(v14, 1, v19) != 1)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      char v23 = *v14;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v25, v26))
      {
        unint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        v46[0] = v28;
        *(_DWORD *)unint64_t v27 = 136315138;
        uint64_t v42 = v27 + 4;
        LOBYTE(v47) = v23;
        uint64_t v29 = String.init<A>(describing:)();
        uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v25, v26, "POMMES-CURARE: {\"error\":\"%s\"}", v27, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v28, -1, -1);
        MEMORY[0x1CB77E470](v27, -1, -1);
      }

      uint64_t v31 = (uint64_t)v44;
      swift_retain();
      swift_retain();
      swift_retain();
      specialized PommesSearchRequestProcessor.handleFailure(with:completion:)(v23, v43, v45, v31, a5, v21);
      swift_release_n();
      swift_release_n();
      goto LABEL_18;
    }
    unint64_t v22 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v14, v22);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.pommes);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v37 = (uint64_t)v44;
  if (v36)
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&dword_1C8F83000, v34, v35, "PireneResponse failure: none", v38, 2u);
    MEMORY[0x1CB77E470](v38, -1, -1);
  }

  lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
  uint64_t v39 = (void *)swift_allocError();
  *uint64_t v40 = 0x80;
  closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v39, 1, v45, v37, a5);

  swift_release();
  swift_release_n();
LABEL_18:
  swift_release_n();
  return swift_release();
}

uint64_t outlined init with copy of DefaultExperiencesResolver(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for SportsPersonalizationExperiencesResolver(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t DomainWarmup.warmupFirstExperience(request:response:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C8F83000, v9, v10, "DomainWarmup#warmupFirstExperience", v11, 2u);
    MEMORY[0x1CB77E470](v11, -1, -1);
  }

  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  if (v12 <= 0.99)
  {
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1C8F83000, v17, v18, "DomainWarmup#warmupFirstExperience recieved low confidence PommesResponse. Skipping warmup", v19, 2u);
      MEMORY[0x1CB77E470](v19, -1, -1);
    }

    return MEMORY[0x1E4FBC860];
  }
  else
  {
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
    uint64_t v13 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
    uint64_t v15 = v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 184))(a1, v13, v15);
    swift_bridgeObjectRelease();
  }
  return v16;
}

uint64_t DomainWarmup.warmup(request:domain:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WarmupComponent]);
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

void partial apply for closure #1 in DomainWarmup.warmup(request:domain:)(uint64_t *a1@<X8>)
{
  closure #1 in DomainWarmup.warmup(request:domain:)(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), a1);
}

void closure #1 in DomainWarmup.warmup(request:domain:)(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    v40[0] = v11;
    *(_DWORD *)os_log_type_t v10 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v8, v9, "DomainWarmup#warmup %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v11, -1, -1);
    MEMORY[0x1CB77E470](v10, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v12 = a3[4];
  if (*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v14)
    {
      outlined init with copy of AppDataProviding(*(void *)(v12 + 56) + 40 * v13, (uint64_t)&v37);
    }
    else
    {
      uint64_t v39 = 0;
      long long v37 = 0u;
      long long v38 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v38 + 1))
    {
      outlined init with take of AppDataProviding(&v37, (uint64_t)v40);
      swift_beginAccess();
      uint64_t v15 = a3[3];
      if (*(void *)(v15 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
        if (v17)
        {
          uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain_n();
          uint64_t v19 = Logger.logObject.getter();
          os_log_type_t v20 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v19, v20))
          {
            uint64_t v21 = (uint8_t *)swift_slowAlloc();
            uint64_t v22 = swift_slowAlloc();
            v36[0] = v22;
            *(_DWORD *)uint64_t v21 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v36);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C8F83000, v19, v20, "DomainWarmup#warmup : Warmup already called for %s", v21, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1CB77E470](v22, -1, -1);
            MEMORY[0x1CB77E470](v21, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          *a5 = v18;
          goto LABEL_24;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v27 = v41;
      uint64_t v28 = v42;
      __swift_project_boxed_opaque_existential_1(v40, v41);
      uint64_t v29 = a3[5];
      unint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 8);
      swift_unknownObjectRetain();
      uint64_t v31 = v30(a4, v29, v27, v28);
      swift_unknownObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v43 = a3[3];
      a3[3] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, a1, a2, isUniquelyReferenced_nonNull_native);
      a3[3] = v43;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      *a5 = v31;
LABEL_24:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      return;
    }
  }
  else
  {
    uint64_t v39 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
  }
  outlined destroy of DomainWarmupHandling?((uint64_t)&v37);
  swift_bridgeObjectRetain_n();
  char v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    v40[0] = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v23, v24, "DomainWarmup#warmup warmup handler not found for domain: %s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v26, -1, -1);
    MEMORY[0x1CB77E470](v25, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *a5 = MEMORY[0x1E4FBC860];
}

uint64_t protocol witness for DomainWarmupHandling.warmup(request:serviceHelper:) in conformance PluginWarmupHandler()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t PluginWarmupHandler.warmup(request:serviceHelper:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v40 = &type metadata for FeatureFlag;
  unint64_t v41 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  uint64_t v6 = swift_allocObject();
  aBlock[0] = v6;
  *(void *)(v6 + 16) = 2;
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = 0;
  *(unsigned char *)(v6 + 48) = 3;
  char v7 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  if (v7)
  {
    uint64_t v8 = *(void *)(v3 + 16);
    unint64_t v9 = *(void *)(v3 + 24);
    id v10 = objc_allocWithZone(MEMORY[0x1E4F96758]);
    swift_bridgeObjectRetain();
    uint64_t v37 = v8;
    uint64_t v11 = (void *)MEMORY[0x1CB77CA90](v8, v9);
    unint64_t v38 = v9;
    swift_bridgeObjectRelease();
    id v12 = objc_msgSend(v10, sel_initWithBundleIdentifier_, v11);

    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void *)(v13 - 8);
    MEMORY[0x1F4188790](v13);
    unint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v17 = v12;
    UUID.init()();
    uint64_t v18 = UUID.uuidString.getter();
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v21 = (void *)MEMORY[0x1CB77CA90](v18, v20);
    swift_bridgeObjectRelease();
    objc_msgSend(v17, sel_setAceId_, v21);

    uint64_t v22 = (uint64_t *)(a1 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 32));
    char v23 = (void *)v22[1];
    if (v23)
    {
      uint64_t v24 = *v22;
      id v25 = v17;
      char v23 = (void *)MEMORY[0x1CB77CA90](v24, v23);
    }
    else
    {
      id v26 = v17;
    }
    objc_msgSend(v17, sel_setRefId_, v23);

    if (a2)
    {
      unint64_t v41 = (unint64_t)partial apply for closure #1 in PluginWarmupHandler.warmup(request:serviceHelper:);
      uint64_t v42 = v3;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
      uint64_t v40 = (ValueMetadata *)&block_descriptor_14;
      uint64_t v27 = _Block_copy(aBlock);
      id v28 = v17;
      swift_unknownObjectRetain();
      swift_retain();
      swift_release();
      objc_msgSend(a2, sel_handleCommand_completion_, v28, v27);
      swift_unknownObjectRelease();

      _Block_release(v27);
      return swift_bridgeObjectRetain();
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
    swift_retain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      aBlock[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315138;
      unint64_t v35 = v38;
      swift_bridgeObjectRetain();
      uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v35, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v31, v32, "PluginWarmupHandler#warmup serviceHelper nil, skipping warming up for %s plugin", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v34, -1, -1);
      MEMORY[0x1CB77E470](v33, -1, -1);
    }
    else
    {

      swift_release();
    }
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t PegasusProxy.clientExperienceSignals(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v5 - 8);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ClientExperienceSignals();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClientExperienceSignals.init(isGlideEligible:networkAvailableAtRequest:isPhoneCallActive:)();
  (*(void (**)(uint64_t, uint64_t))(*v2[23] + 464))(a2, a1);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v11, v8);
  uint64_t v13 = ((uint64_t (*)(uint64_t))(*v2)[44])(v12);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = type metadata accessor for PommesSearchRequest(0);
    (*(void (**)(void, void, uint64_t))(*(void *)v14 + 144))(*(void *)(a1 + *(int *)(v15 + 32)), *(void *)(a1 + *(int *)(v15 + 32) + 8), 1);
    swift_release();
  }
  ClientExperienceSignals.isPhoneCallActive.setter();
  uint64_t v16 = type metadata accessor for PommesSearchRequest(0);
  outlined init with copy of MediaUserStateCenter?(a1 + *(int *)(v16 + 44), (uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v7, 1, v17) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  }
  else
  {
    Siri_Nlu_External_Span.matcherNames.getter();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v17);
  }
  return ClientExperienceSignals.matchingSpans.setter();
}

uint64_t DataProviderManager.addClientExperienceSignals(to:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v105 = (char *)v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  uint64_t v110 = *(void *)(v111 - 8);
  MEMORY[0x1F4188790](v111);
  char v109 = (char *)v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ClientExperienceSignals();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  uint64_t v113 = a3;
  v15(a3, a1, v14);
  uint64_t v16 = v4[3];
  uint64_t v108 = (uint64_t *)a2;
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v13);
  uint64_t v17 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v18 = *(void (**)(char *, void, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v106 = v17;
  v18(v13, 0, 1);
  memset(v121, 0, 90);
  uint64_t v107 = v4;
  uint64_t v112 = v4[2];
  uint64_t v19 = type metadata accessor for DispatchTime();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  char v23 = (char *)v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = v22;
  MEMORY[0x1F4188790](v21);
  id v25 = (char *)v96 - v24;
  static DispatchTime.now()();
  uint64_t v26 = type metadata accessor for DispatchTimeInterval();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v101 = v28;
  uint64_t v29 = (void *)((char *)v96 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  void *v29 = 1;
  uint64_t v30 = *(void (**)(void))(v27 + 104);
  unsigned int v100 = *MEMORY[0x1E4FBCAC0];
  uint64_t v99 = (void (*)(void *, void, uint64_t))v30;
  v30(v29);
  MEMORY[0x1CB77C970](v25, v29);
  uint64_t v31 = *(void (**)(void *, uint64_t))(v27 + 8);
  uint64_t v103 = v26;
  uint64_t v98 = v31;
  v31(v29, v26);
  uint64_t v104 = v20;
  os_log_type_t v32 = *(void (**)(char *, uint64_t))(v20 + 8);
  v32(v25, v19);
  (*(void (**)(void *__return_ptr, char *, _OWORD *, void, uint64_t, char *))(*(void *)v16 + 240))(v118, v13, v121, 0, v112, v23);
  uint64_t v97 = v19;
  v32(v23, v19);
  uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for PommesSearchRequest?);
  uint64_t v34 = v118[0];
  if (v118[0])
  {
    uint64_t v35 = v107[11];
    uint64_t v112 = v118[0];
    if (v35)
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
      uint64_t v107 = v96;
      uint64_t v37 = MEMORY[0x1F4188790](v36 - 8);
      uint64_t v39 = (char *)v96 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
      v96[1] = v96;
      MEMORY[0x1F4188790](v37);
      unint64_t v41 = (char *)v96 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v42 = static DispatchTime.now()();
      MEMORY[0x1F4188790](v42);
      uint64_t v44 = (void *)((char *)v96 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
      *uint64_t v44 = 1;
      unint64_t v45 = v32;
      uint64_t v46 = v103;
      v99(v44, v100, v103);
      MEMORY[0x1CB77C970](v41, v44);
      v98(v44, v46);
      uint64_t v47 = v97;
      v45(v41, v97);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v39, 0, 1, v47);
      uint64_t v48 = (*(uint64_t (**)(char *))(*(void *)v35 + 168))(v39);
      uint64_t v49 = (uint64_t)v39;
      uint64_t v34 = v112;
      outlined destroy of MediaUserStateCenter?(v49, &demangling cache variable for type metadata for DispatchTime?);
    }
    else
    {
      uint64_t v48 = 0;
    }
    type metadata accessor for PegasusProxy(0);
    unint64_t v50 = v109;
    uint64_t v51 = (uint64_t)v108;
    static PegasusProxy.multiUserContext(for:)((uint64_t)v108);
    uint64_t v52 = v110;
    uint64_t v53 = v105;
    int v54 = v50;
    uint64_t v55 = v111;
    (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v105, v54, v111);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v53, 0, 1, v55);
    uint64_t result = ClientExperienceSignals.multiUserContext.setter();
    uint64_t v56 = v106;
    if (*(unsigned char *)(v51 + *(int *)(v106 + 60)) == 1)
    {
      uint64_t v57 = *(void *)(v34 + 16);
      if (v57)
      {
        unint64_t v58 = 0;
        uint64_t v59 = v34 + 32;
        uint64_t v108 = (uint64_t *)(v48 + 40);
        uint64_t v107 = (void *)v48;
        uint64_t v106 = v34 + 32;
        while (v58 < *(void *)(v34 + 16))
        {
          outlined init with copy of AppDataProviding(v59 + 40 * v58, (uint64_t)v118);
          uint64_t v60 = v119;
          uint64_t v61 = v120;
          __swift_project_boxed_opaque_existential_1(v118, v119);
          uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 40))(v60, v61);
          if (v63)
          {
            uint64_t v64 = v63;
            if (v48 && (uint64_t v65 = *(void *)(v48 + 16)) != 0)
            {
              uint64_t v66 = v62;
              uint64_t v67 = v108;
              while (1)
              {
                uint64_t v69 = *(v67 - 1);
                uint64_t v68 = *v67;
                BOOL v70 = v67[1] == v66 && v64 == v67[2];
                if (v70 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  break;
                }
                v67 += 7;
                if (!--v65)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v34 = v112;
                  uint64_t v48 = (uint64_t)v107;
                  uint64_t v59 = v106;
                  goto LABEL_9;
                }
              }
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v71 = v119;
              uint64_t v72 = v120;
              __swift_project_boxed_opaque_existential_1(v118, v119);
              (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v72 + 8))(&v115, v71, v72);
              uint64_t v73 = *((void *)&v116 + 1);
              if (*((void *)&v116 + 1))
              {
                uint64_t v74 = v117;
                __swift_project_boxed_opaque_existential_1(&v115, *((uint64_t *)&v116 + 1));
                LOBYTE(v73) = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 88))(v73, v74);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
              }
              else
              {
                outlined destroy of MediaUserStateCenter?((uint64_t)&v115, (uint64_t *)&demangling cache variable for type metadata for MusicUserState?);
              }
              uint64_t v59 = v106;
              uint64_t v75 = (void (*)(long long *, void))ClientExperienceSignals.glideEligibilityPerSharedId.modify();
              uint64_t v77 = v76;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v114 = *v77;
              uint64_t *v77 = 0x8000000000000000;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v73 & 1, v69, v68, isUniquelyReferenced_nonNull_native);
              uint64_t *v77 = v114;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v75(&v115, 0);
              uint64_t v34 = v112;
              uint64_t v48 = (uint64_t)v107;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
LABEL_9:
          ++v58;
          uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
          if (v58 == v57) {
            goto LABEL_30;
          }
        }
        __break(1u);
        goto LABEL_49;
      }
LABEL_30:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v109, v111);
    }
    swift_bridgeObjectRelease();
    uint64_t v79 = *(void *)(v34 + 16);
    if (v79)
    {
      outlined init with copy of AppDataProviding(v34 + 32, (uint64_t)&v115);
      uint64_t v80 = *((void *)&v116 + 1);
      uint64_t v81 = v117;
      __swift_project_boxed_opaque_existential_1(&v115, *((uint64_t *)&v116 + 1));
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v81 + 8))(v118, v80, v81);
      uint64_t v82 = v119;
      if (v119)
      {
        uint64_t v83 = v120;
        __swift_project_boxed_opaque_existential_1(v118, v119);
        (*(void (**)(uint64_t, uint64_t))(v83 + 88))(v82, v83);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
        outlined destroy of MediaUserStateCenter?((uint64_t)v118, (uint64_t *)&demangling cache variable for type metadata for MusicUserState?);
      }
    }
    uint64_t result = ClientExperienceSignals.isGlideEligible.setter();
    uint64_t v84 = (uint64_t *)(v51 + *(int *)(v56 + 84));
    if (v84[1])
    {
      uint64_t v85 = *v84;
      uint64_t v86 = v84[1];
      if (v79)
      {
LABEL_35:
        if (!*(void *)(v34 + 16))
        {
LABEL_49:
          __break(1u);
          return result;
        }
        outlined init with copy of AppDataProviding(v34 + 32, (uint64_t)&v115);
LABEL_39:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v87 = *((void *)&v116 + 1);
        if (*((void *)&v116 + 1))
        {
          uint64_t v88 = v117;
          __swift_project_boxed_opaque_existential_1(&v115, *((uint64_t *)&v116 + 1));
          (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v88 + 8))(v118, v87, v88);
          uint64_t v87 = v119;
          if (v119)
          {
            uint64_t v89 = v120;
            __swift_project_boxed_opaque_existential_1(v118, v119);
            LOBYTE(v87) = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 88))(v87, v89);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
LABEL_45:
            uint64_t v92 = (void (*)(void *, void))ClientExperienceSignals.glideEligibilityPerSharedId.modify();
            uint64_t v94 = v93;
            char v95 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v115 = *v94;
            *uint64_t v94 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v87 & 1, v85, v86, v95);
            *uint64_t v94 = v115;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v92(v118, 0);
            return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v109, v111);
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
          uint64_t v90 = (uint64_t *)&demangling cache variable for type metadata for MusicUserState?;
          uint64_t v91 = (long long *)v118;
        }
        else
        {
          uint64_t v90 = &demangling cache variable for type metadata for MediaUserState?;
          uint64_t v91 = &v115;
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v91, v90);
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v86 = 0x80000001C919D340;
      uint64_t v85 = 0xD000000000000024;
      if (v79) {
        goto LABEL_35;
      }
    }
    uint64_t v117 = 0;
    long long v116 = 0u;
    long long v115 = 0u;
    goto LABEL_39;
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed SABaseCommand?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void partial apply for closure #1 in PluginWarmupHandler.warmup(request:serviceHelper:)(void *a1, void *a2)
{
  closure #1 in PluginWarmupHandler.warmup(request:serviceHelper:)(a1, a2, v2);
}

void closure #1 in PluginWarmupHandler.warmup(request:serviceHelper:)(void *a1, id a2, uint64_t a3)
{
  if (a2)
  {
    id v4 = a2;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
    id v6 = a2;
    id v7 = a2;
    oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v29 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      id v11 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v12 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, oslog, v8, "PluginWarmupHandler#warmup Service helper returned an error: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v10, -1, -1);
      MEMORY[0x1CB77E470](v9, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
    id v17 = a1;
    swift_retain_n();
    id v18 = v17;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v29 = v22;
      *(_DWORD *)uint64_t v21 = 136315394;
      uint64_t v23 = *(void *)(a3 + 16);
      unint64_t v24 = *(void *)(a3 + 24);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2080;
      id v25 = v18;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SABaseCommand?);
      uint64_t v26 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v19, v20, "PluginWarmupHandler#warmup %s plugin warmup successful with result %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v22, -1, -1);
      MEMORY[0x1CB77E470](v21, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t type metadata accessor for PegasusProxy(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PegasusProxy);
}

uint64_t static PegasusProxy.multiUserContext(for:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext.UserIdentityClassification();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_MultiUserContext.init()();
  uint64_t v6 = type metadata accessor for PommesSearchRequest(0);
  swift_bridgeObjectRetain();
  Apple_Parsec_Siri_V2alpha_MultiUserContext.sharedUserID.setter();
  unint64_t v7 = *(void *)(a1 + *(int *)(v6 + 88));
  if (v7 > 4) {
    os_log_type_t v8 = (unsigned int *)MEMORY[0x1E4F89240];
  }
  else {
    os_log_type_t v8 = (unsigned int *)qword_1E6584918[v7];
  }
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *v8, v2);
  return Apple_Parsec_Siri_V2alpha_MultiUserContext.userIdentificationClassification.setter();
}

uint64_t protocol witness for MusicUserState.isGlideEligible.getter in conformance ICMusicUserState()
{
  uint64_t v0 = ICMusicUserState.eligibleOffers.getter();
  char v1 = specialized Sequence<>.contains(_:)(0x57454956455250, 0xE700000000000000, v0);
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t DefaultExperiencesResolver.buildExperiences(from:with:)(uint64_t a1, uint64_t a2)
{
  void (*v21)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t (*v22)(char *, uint64_t);
  unint64_t v23;
  uint64_t (*v24)(char *, uint64_t);
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(unsigned char *@<X8>));
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void (*v37)(unsigned __int8 *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t **@<X8>));
  void *v38;
  uint64_t v39;
  char *v40;
  void (*v41)(unsigned __int8 *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, BOOL (*)@<W0>(unsigned char *@<X8>));
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  unsigned __int8 v71[16];
  uint64_t v72;

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v61 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v59);
  uint64_t v60 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v64 = *(void *)(v8 - 8);
  uint64_t v65 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v69 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  uint64_t v14 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  uint64_t v67 = v15;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v63 = v2;
  unint64_t v16 = (unint64_t)specialized ExperiencesResolver.defaultExperiences(from:with:)(a1, a2);
  uint64_t v66 = v16;
  if (one-time initialization token for shared != -1) {
    unint64_t v16 = swift_once();
  }
  id v17 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v16);
  uint64_t v68 = a1;
  uint64_t v56 = (int *)a1;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  MEMORY[0x1F4188790](v18);
  Date.init()();
  uint64_t v21 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(void *)v17 + 200);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  uint64_t v56 = &v55;
  uint64_t v57 = v62;
  LOBYTE(v55) = 2;
  v21(&v72, 0xD000000000000034, 0x80000001C91A2370, 0, (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), "SiriInformationSearch/DefaultExperiencesResolver.swift", 54, 2, 31, "buildExperiences(from:with:)", 28, v55, partial apply for closure #1 in DefaultExperiencesResolver.buildExperiences(from:with:));
  unint64_t v24 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
  uint64_t v23 = v19 + 8;
  uint64_t v22 = v24;
  v24((char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  *(void *)uint64_t v71 = v72;
  specialized Array.append<A>(contentsOf:)(v66);
  id v25 = *(void *)v71;
  if (v14 == 0x7374726F7073 && v67 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0) {
      return v25;
    }
  }
  uint64_t v67 = v25;
  unint64_t v27 = v69;
  uint64_t v28 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  uint64_t v29 = static PerformanceUtil.shared;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v56 = (int *)v27;
  MEMORY[0x1F4188790](v30);
  uint64_t v31 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  Date.init()();
  os_log_type_t v32 = *(void (**)(char *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(unsigned char *@<X8>)))(*(void *)v29 + 200);
  uint64_t v56 = &v55;
  uint64_t v57 = MEMORY[0x1E4FBB390];
  LOBYTE(v55) = 2;
  v32(&v70, 0xD000000000000052, 0x80000001C91A23F0, 0, (char *)&v58 - v31, "SiriInformationSearch/DefaultExperiencesResolver.swift", 54, 2, 39, "buildExperiences(from:with:)", 28, v55, partial apply for closure #2 in DefaultExperiencesResolver.buildExperiences(from:with:));
  uint64_t v66 = v23;
  uint64_t v33 = v22((char *)&v58 - v31, v18);
  if (v70 == 1)
  {
    uint64_t v34 = swift_bridgeObjectRelease();
    uint64_t v35 = static PerformanceUtil.shared;
    uint64_t v36 = MEMORY[0x1F4188790](v34);
    uint64_t v56 = v63;
    uint64_t v57 = v68;
    MEMORY[0x1F4188790](v36);
    Date.init()();
    uint64_t v37 = *(void (**)(unsigned __int8 *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t **@<X8>)))(*(void *)v35 + 200);
    uint64_t v56 = &v55;
    uint64_t v57 = v62;
    LOBYTE(v55) = 2;
    v37(v71, 0xD000000000000035, 0x80000001C91A24A0, 0, (char *)&v58 - v31, "SiriInformationSearch/DefaultExperiencesResolver.swift", 54, 2, 45, "buildExperiences(from:with:)", 28, v55, partial apply for closure #3 in DefaultExperiencesResolver.buildExperiences(from:with:));
    v22((char *)&v58 - v31, v18);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v69, v65);
    return *(void *)v71;
  }
  else
  {
    uint64_t v38 = static PerformanceUtil.shared;
    uint64_t v39 = MEMORY[0x1F4188790](v33);
    uint64_t v40 = v69;
    uint64_t v56 = (int *)v69;
    MEMORY[0x1F4188790](v39);
    Date.init()();
    unint64_t v41 = *(void (**)(unsigned __int8 *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, BOOL (*)@<W0>(unsigned char *@<X8>)))(*(void *)v38 + 200);
    uint64_t v56 = &v55;
    uint64_t v57 = MEMORY[0x1E4FBB390];
    LOBYTE(v55) = 2;
    v41(v71, 0xD00000000000004ALL, 0x80000001C91A2450, 0, (char *)&v58 - v31, "SiriInformationSearch/DefaultExperiencesResolver.swift", 54, 2, 50, "buildExperiences(from:with:)", 28, v55, partial apply for closure #4 in DefaultExperiencesResolver.buildExperiences(from:with:));
    v22((char *)&v58 - v31, v18);
    uint64_t v43 = v64;
    uint64_t v42 = v65;
    if (v71[0] == 1)
    {
      uint64_t v44 = (uint64_t)v60;
      Date.init()();
      unint64_t v45 = (int *)v59;
      uint64_t v46 = v44 + *(int *)(v59 + 20);
      *(void *)uint64_t v46 = "SiriInformationSearch/DefaultExperiencesResolver.swift";
      *(void *)(v46 + 8) = 54;
      *(unsigned char *)(v46 + 16) = 2;
      *(void *)(v44 + v45[6]) = 58;
      uint64_t v47 = v44 + v45[7];
      *(void *)uint64_t v47 = "buildExperiences(from:with:)";
      *(void *)(v47 + 8) = 28;
      *(unsigned char *)(v47 + 16) = 2;
      uint64_t v48 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000003CLL);
      uint64_t v49 = (uint64_t *)(v44 + v45[8]);
      *uint64_t v49 = v48;
      v49[1] = v50;
      uint64_t v51 = (uint64_t)v61;
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v61, v40, v42);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v51, 0, 1, v42);
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      uint64_t v53 = __swift_project_value_buffer(v52, (uint64_t)static Logger.pommes);
      specialized static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(2, v51, v53);
      outlined destroy of MediaUserStateCenter?(v51, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(v44, 0);
      outlined destroy of PerformanceUtil.Ticket(v44);
    }
    (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v42);
    return v67;
  }
}

uint64_t *specialized ExperiencesResolver.defaultExperiences(from:with:)(uint64_t a1, uint64_t a2)
{
  return specialized ExperiencesResolver.defaultExperiences(from:with:)(a1, a2, (uint64_t)partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:), (uint64_t)partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:));
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(uint64_t **__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(uint64_t *@<X8>), void *, uint64_t);
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  int v22;
  void v23[4];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;

  uint64_t v4 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  uint64_t v6 = v5;
  if (one-time initialization token for shared != -1) {
    uint64_t v4 = swift_once();
  }
  uint64_t v30 = &v26;
  uint64_t v7 = (uint64_t *)static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v4);
  v23[3] = a1;
  unint64_t v24 = v6;
  id v25 = a2;
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v28 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v28);
  uint64_t v29 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = (char *)v23 - v29;
  Date.init()();
  uint64_t v11 = *v7;
  unint64_t v27 = a1;
  uint64_t v12 = *(void (**)(uint64_t **__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(uint64_t *@<X8>), void *, uint64_t))(v11 + 200);
  unint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  v12(&v32, 0xD00000000000002BLL, 0x80000001C91A14D0, 0, v10, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 61, "defaultExperiences(from:with:)", 30, 2, partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:), v23, v13);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  uint64_t v15 = v10;
  unint64_t v16 = v28;
  id v17 = v14(v15, v28);
  uint64_t v26 = (uint64_t)&v26;
  uint64_t v30 = v32;
  uint64_t v18 = static PerformanceUtil.shared;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  v23[2] = v27;
  unint64_t v24 = v6;
  id v25 = a2;
  MEMORY[0x1F4188790](v19);
  uint64_t v20 = (char *)v23 - v29;
  Date.init()();
  LOBYTE(v22) = 2;
  (*(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>), void *, uint64_t))(*(void *)v18 + 200))(&v31, 0xD00000000000002ELL, 0x80000001C91A1550, 0, v20, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 68, "defaultExperiences(from:with:)", 30, v22, partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:), v23, v13);
  v14(v20, v16);
  os_log_type_t v32 = v30;
  specialized Array.append<A>(contentsOf:)(v31);
  return v32;
}

{
  return specialized ExperiencesResolver.defaultExperiences(from:with:)(a1, a2, (uint64_t)partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:), (uint64_t)partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:));
}

uint64_t *specialized ExperiencesResolver.defaultExperiences(from:with:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void (*v14)(uint64_t **__return_ptr, unint64_t, unint64_t, void, unsigned char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(void *@<X8>), unsigned char *, uint64_t);
  uint64_t v15;
  uint64_t (*v16)(unsigned char *, uint64_t);
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v21;
  unsigned char v22[16];
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  uint64_t v33 = a3;
  uint64_t v5 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  uint64_t v7 = v6;
  if (one-time initialization token for shared != -1) {
    uint64_t v5 = swift_once();
  }
  uint64_t v30 = &v27;
  uint64_t v8 = (uint64_t *)static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v5);
  uint64_t v23 = &v33;
  unint64_t v24 = a1;
  id v25 = v7;
  uint64_t v26 = a2;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  Date.init()();
  uint64_t v13 = *v8;
  uint64_t v28 = a1;
  uint64_t v14 = *(void (**)(uint64_t **__return_ptr, unint64_t, unint64_t, void, unsigned char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(void *@<X8>), unsigned char *, uint64_t))(v13 + 200);
  uint64_t v29 = a2;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  v14(&v32, 0xD00000000000002BLL, 0x80000001C91A14D0, 0, &v22[-v12], "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 61, "defaultExperiences(from:with:)", 30, 2, partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:), v22, v15);
  unint64_t v16 = *(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8);
  id v17 = v16(&v22[-v12], v9);
  unint64_t v27 = (uint64_t)&v27;
  uint64_t v30 = v32;
  uint64_t v18 = static PerformanceUtil.shared;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v23 = v28;
  unint64_t v24 = &v33;
  id v25 = v7;
  uint64_t v26 = v29;
  MEMORY[0x1F4188790](v19);
  Date.init()();
  LOBYTE(v21) = 2;
  (*(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, void, unsigned char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>), unsigned char *, uint64_t))(*(void *)v18 + 200))(&v31, 0xD00000000000002ELL, 0x80000001C91A1550, 0, &v22[-v12], "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 68, "defaultExperiences(from:with:)", 30, v21, partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:), v22, v15);
  v16(&v22[-v12], v9);
  os_log_type_t v32 = v30;
  specialized Array.append<A>(contentsOf:)(v31);
  return v32;
}

uint64_t *specialized ExperiencesResolver.defaultExperiences(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v17)(uint64_t **__return_ptr, unint64_t, unint64_t, void, unsigned char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t, unsigned char *, uint64_t);
  uint64_t v18;
  uint64_t (*v19)(unsigned char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v25;
  unsigned char v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;

  uint64_t v37 = a4;
  uint64_t v6 = v4;
  uint64_t v9 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  uint64_t v11 = v10;
  if (one-time initialization token for shared != -1) {
    uint64_t v9 = swift_once();
  }
  uint64_t v36 = &v31;
  unint64_t v12 = (uint64_t *)static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v9);
  unint64_t v27 = v6;
  uint64_t v28 = a1;
  uint64_t v29 = v11;
  uint64_t v30 = a2;
  uint64_t v33 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v33 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v33);
  uint64_t v34 = v6;
  uint64_t v35 = a2;
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  Date.init()();
  uint64_t v16 = *v12;
  os_log_type_t v32 = a1;
  id v17 = *(void (**)(uint64_t **__return_ptr, unint64_t, unint64_t, void, unsigned char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t, unsigned char *, uint64_t))(v16 + 200);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  v17(&v39, 0xD00000000000002BLL, 0x80000001C91A14D0, 0, &v26[-v15], "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 61, "defaultExperiences(from:with:)", 30, 2, a3, v26, v18);
  uint64_t v19 = *(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8);
  uint64_t v20 = v33;
  uint64_t v21 = v19(&v26[-v15], v33);
  uint64_t v31 = (uint64_t)&v31;
  uint64_t v36 = v39;
  uint64_t v22 = static PerformanceUtil.shared;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  unint64_t v27 = v32;
  uint64_t v28 = v34;
  uint64_t v29 = v11;
  uint64_t v30 = v35;
  MEMORY[0x1F4188790](v23);
  Date.init()();
  LOBYTE(v25) = 2;
  (*(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, void, unsigned char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t, unsigned char *, uint64_t))(*(void *)v22 + 200))(&v38, 0xD00000000000002ELL, 0x80000001C91A1550, 0, &v26[-v15], "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 68, "defaultExperiences(from:with:)", 30, v25, v37, v26, v18);
  v19(&v26[-v15], v20);
  uint64_t v39 = v36;
  specialized Array.append<A>(contentsOf:)(v38);
  return v39;
}

uint64_t specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t a1@<X2>, uint64_t (*a2)(char *, uint64_t, char *, double)@<X3>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ResponseContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 1, 1, v15);
  uint64_t v16 = a2(v14, a1, v10, a4);
  outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  *a3 = v16;
  return result;
}

uint64_t specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ResponseContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 1, 1, v13);
  uint64_t v14 = specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(v12, a1, a3);
  outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  *a2 = v14;
  return result;
}

uint64_t specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (double *)((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *a1;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ResponseContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v10, 1, 1, v16);
  id v17 = specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(v14, a2, a4, (uint64_t)v10, v15);
  outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  uint64_t result = (*(uint64_t (**)(double *, uint64_t))(v12 + 8))(v14, v11);
  *a3 = v17;
  return result;
}

uint64_t partial apply for closure #1 in static ExperiencesResolver.userDialogAct(from:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static ExperiencesResolver.userDialogAct(from:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t closure #1 in static ExperiencesResolver.userDialogAct(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct();
  Message.init(serializedData:extensions:partial:options:)();
  if (v3)
  {

    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a3, v9, 1, v8);
}

uint64_t specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, char *, double))
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter();
  uint64_t v29 = MEMORY[0x1E4FBC860];
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    v25[1] = v5;
    uint64_t v15 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction() - 8);
    uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
    v25[0] = v13;
    uint64_t v17 = v13 + ((v16 + 32) & ~v16);
    uint64_t v28 = *(void *)(v15 + 72);
    uint64_t v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ResponseContext();
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
    do
    {
      v26(v12, 1, 1, v27);
      uint64_t v18 = a5(v17, a4, v12, a1);
      uint64_t v19 = a3;
      uint64_t v20 = a4;
      uint64_t v21 = a5;
      unint64_t v22 = v18;
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
      unint64_t v23 = v22;
      a5 = v21;
      a4 = v20;
      a3 = v19;
      specialized Array.append<A>(contentsOf:)(v23);
      v17 += v28;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    return v29;
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
}

uint64_t specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter();
  uint64_t v20 = MEMORY[0x1E4FBC860];
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    v18[1] = v3;
    uint64_t v11 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction() - 8);
    uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
    v18[0] = v9;
    uint64_t v13 = (void *)(v9 + ((v12 + 32) & ~v12));
    uint64_t v19 = *(void *)(v11 + 72);
    uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ResponseContext();
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    do
    {
      v15(v8, 1, 1, v14);
      unint64_t v16 = specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(v13, a3, a1);
      outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
      specialized Array.append<A>(contentsOf:)(v16);
      uint64_t v13 = (void *)((char *)v13 + v19);
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    return v20;
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
}

uint64_t specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter();
  uint64_t v23 = MEMORY[0x1E4FBC860];
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    void v20[2] = v4;
    uint64_t v13 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction() - 8);
    uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
    v20[1] = v11;
    uint64_t v15 = (double *)(v11 + ((v14 + 32) & ~v14));
    uint64_t v22 = a4;
    uint64_t v21 = *(void *)(v13 + 72);
    uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ResponseContext();
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    do
    {
      v17(v10, 1, 1, v16);
      uint64_t v18 = specialized ExperiencesResolver.extractExperiences(from:score:with:with:)(v15, v22, a1, (uint64_t)v10, a3);
      outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ResponseContext?);
      specialized Array.append<A>(contentsOf:)((unint64_t)v18);
      uint64_t v15 = (double *)((char *)v15 + v21);
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    return v23;
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
}

uint64_t partial apply for closure #1 in DefaultExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in DefaultExperiencesResolver.buildExperiences(from:with:)(*(void *)(v1 + 16), a1);
}

uint64_t closure #1 in DefaultExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ClientExperienceSignals();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = specialized PhoneCallExperiencesResolver.buildExperiences(from:with:)(a1);
  uint64_t result = outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ClientExperienceSignals?);
  *a2 = v8;
  return result;
}

uint64_t specialized PhoneCallExperiencesResolver.buildExperiences(from:with:)(uint64_t a1)
{
  uint64_t v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t v2 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  uint64_t v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = a1;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v55 = v12;
  uint64_t v14 = MEMORY[0x1CB779280](v13);
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    uint64_t v39 = swift_bridgeObjectRelease();
    uint64_t v19 = MEMORY[0x1E4FBC860];
LABEL_25:
    MEMORY[0x1F4188790](v39);
    uint64_t v50 = v54;
    unint64_t v18 = specialized Sequence.compactMap<A>(_:)((void *(*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #2 in PhoneCallExperiencesResolver.buildExperiences(from:with:), (uint64_t)v48, v19);
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1) {
      goto LABEL_38;
    }
    goto LABEL_26;
  }
  uint64_t v52 = v10;
  uint64_t v53 = v9;
  uint64_t v16 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent() - 8);
  unint64_t v17 = v14 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  unint64_t v18 = v2 + 8;
  uint64_t v9 = *(void *)(v16 + 72);
  uint64_t v51 = v14;
  swift_bridgeObjectRetain();
  uint64_t v19 = MEMORY[0x1E4FBC860];
  while (1)
  {
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter();
    uint64_t v20 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
    (*(void (**)(char *, uint64_t))v18)(v4, v56);
    uint64_t v10 = *(void *)(v20 + 16);
    int64_t v21 = *(void *)(v19 + 16);
    int64_t v22 = v21 + v10;
    if (__OFADD__(v21, v10)) {
      break;
    }
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v22 <= *(void *)(v19 + 24) >> 1)
    {
      if (*(void *)(v20 + 16)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v21 <= v22) {
        int64_t v24 = v21 + v10;
      }
      else {
        int64_t v24 = v21;
      }
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v24, 1, v19);
      if (*(void *)(v20 + 16))
      {
LABEL_14:
        uint64_t v25 = *(void *)(v19 + 16);
        uint64_t v26 = (*(void *)(v19 + 24) >> 1) - v25;
        uint64_t v27 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder() - 8);
        uint64_t v28 = *(void *)(v27 + 72);
        if (v26 < v10) {
          goto LABEL_36;
        }
        unint64_t v29 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
        unint64_t v30 = v19 + v29 + v28 * v25;
        unint64_t v31 = v20 + v29;
        uint64_t v32 = v28 * v10;
        unint64_t v33 = v30 + v32;
        unint64_t v34 = v31 + v32;
        if (v31 < v33 && v30 < v34)
        {
          LODWORD(v50) = 0;
          uint64_t v49 = 1092;
          v48[0] = 2;
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        swift_arrayInitWithCopy();
        if (v10)
        {
          uint64_t v36 = *(void *)(v19 + 16);
          BOOL v37 = __OFADD__(v36, v10);
          uint64_t v38 = v36 + v10;
          if (v37) {
            goto LABEL_37;
          }
          *(void *)(v19 + 16) = v38;
        }
        goto LABEL_4;
      }
    }
    if (v10) {
      goto LABEL_35;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    v17 += v9;
    if (!--v15)
    {
      uint64_t v39 = swift_bridgeObjectRelease_n();
      uint64_t v10 = v52;
      uint64_t v9 = v53;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  swift_once();
LABEL_26:
  uint64_t v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  unint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  unint64_t v43 = v18 >> 62;
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 134217984;
    if (v43)
    {
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v45 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v57 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v41, v42, "Extracted phone call param builders; adding %ld PhoneCallExperience(s)",
      v44,
      0xCu);
    MEMORY[0x1CB77E470](v44, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (v43)
  {
    type metadata accessor for Experience();
    swift_bridgeObjectRetain();
    uint64_t v46 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for Experience();
    uint64_t v46 = v18;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v55, v9);
  return v46;
}

uint64_t protocol witness for LocalDomainSearch.name.getter in conformance MusicDomain()
{
  return *(unsigned __int8 *)(*(void *)v0 + 24);
}

void OnDeviceSearchInstrumentationUtil.logStartOnDeviceSearch(requestId:pommesCandidateId:indexType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t MusicDomain.extractClientSignals(_:)@<X0>(uint64_t a1@<X8>)
{
  return MusicDomain.extractAudioUnderstanding(_:)(MEMORY[0x1E4F89008], MEMORY[0x1E4F89540], a1);
}

uint64_t outlined init with copy of Apple_Parsec_Siri_V2alpha_ClientSignals?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MusicDomain.extractAudioUnderstanding(_:)@<X0>(uint64_t a1@<X8>)
{
  return MusicDomain.extractAudioUnderstanding(_:)(MEMORY[0x1E4F893A8], MEMORY[0x1E4F89548], a1);
}

uint64_t MusicDomain.extractAudioUnderstanding(_:)@<X0>(uint64_t (*a1)(void)@<X1>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X8>)
{
  os_log_type_t v42 = a2;
  uint64_t v44 = a3;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v39 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
  uint64_t v37 = *(void *)(v6 - 8);
  uint64_t v38 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v36 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  MEMORY[0x1F4188790](v16 - 8);
  unint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = a1(0);
  uint64_t v19 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  int64_t v21 = (char *)&v35 - v20;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.clientDrivenExperience.getter();
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v23 = MEMORY[0x1CB779170](v22);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
  uint64_t v26 = *(void *)(v25 - 8);
  if (v24)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v18, v23+ ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80)), v25);
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v18, v27, 1, v25);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v18, 1, v25) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
    uint64_t v28 = 1;
    uint64_t v30 = v43;
    uint64_t v29 = v44;
  }
  else
  {
    unint64_t v31 = v36;
    Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v25);
    uint64_t v32 = v39;
    Apple_Parsec_Siri_V2alpha_DomainClientComponent.audioClientComponent.getter();
    uint64_t v33 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v31, v38);
    v42(v33);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v41);
    uint64_t v30 = v43;
    uint64_t v29 = v44;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v44, v21, v43);
    uint64_t v28 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v29, v28, 1, v30);
}

uint64_t MusicDomain.search(audioUnderstanding:clientSignals:userIds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v44 = a5;
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v39 - v13;
  uint64_t v52 = MEMORY[0x1E4FBC860];
  unint64_t v15 = closure #1 in MusicDomain.search(audioUnderstanding:clientSignals:userIds:completion:)(a2);
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = *(void *)(v15 + 16);
  if (v16)
  {
    unint64_t v18 = v15;
    v39[1] = a3;
    uint64_t v40 = a4;
    uint64_t v45 = a3 + 32;
    uint64_t v51 = (void (**)(char *, uint64_t))(v9 + 8);
    swift_bridgeObjectRetain();
    uint64_t v19 = 0;
    unint64_t v46 = v18;
    uint64_t v42 = v17;
    uint64_t v43 = v9;
    uint64_t v41 = v16;
    do
    {
      if (v17)
      {
        uint64_t v47 = v19;
        uint64_t v20 = (uint64_t *)(v45 + 16 * v19);
        uint64_t v21 = v20[1];
        uint64_t v48 = *v20;
        uint64_t v49 = v21;
        uint64_t v22 = v9;
        unint64_t v23 = v18 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
        uint64_t v24 = *(void *)(v22 + 72);
        uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v26 = v17;
        do
        {
          v25(v14, v23, v8);
          if (Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.getter())
          {
            (*v51)(v14, v8);
          }
          else
          {
            uint64_t v27 = MEMORY[0x1CB778830]();
            (*(void (**)(uint64_t *, uint64_t, uint64_t, void *, void, uint64_t, uint64_t))(*(void *)v50
                                                                                                  + 120))(&v52, v27, v28, &outlined read-only object #0 of MusicDomain.search(audioUnderstanding:clientSignals:userIds:completion:), *(void *)(v50 + 32), v48, v49);
            (*v51)(v14, v8);
            swift_bridgeObjectRelease();
          }
          v23 += v24;
          --v26;
        }
        while (v26);
        swift_bridgeObjectRelease();
        unint64_t v18 = v46;
        swift_bridgeObjectRelease();
        uint64_t v17 = v42;
        uint64_t v9 = v43;
        uint64_t v16 = v41;
        uint64_t v19 = v47;
      }
      ++v19;
    }
    while (v19 != v16);
    swift_bridgeObjectRelease();
    uint64_t v37 = swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (v17)
  {
    uint64_t v40 = a4;
    unint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v29 = v9 + 16;
    uint64_t v30 = v31;
    unint64_t v32 = v15 + ((*(unsigned __int8 *)(v29 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 64));
    uint64_t v51 = (void (**)(char *, uint64_t))(v29 - 8);
    uint64_t v33 = *(void *)(v29 + 56);
    unint64_t v46 = v15;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v34 = v17;
      v30(v12, v32, v8);
      if (Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.getter())
      {
        (*v51)(v12, v8);
      }
      else
      {
        uint64_t v35 = MEMORY[0x1CB778830]();
        (*(void (**)(uint64_t *, uint64_t, uint64_t, void *, void, void, void))(*(void *)v50 + 120))(&v52, v35, v36, &outlined read-only object #0 of MusicDomain.search(_:queryFields:allowedFieldTypes:userId:), *(void *)(v50 + 32), 0, 0);
        (*v51)(v12, v8);
        swift_bridgeObjectRelease();
      }
      v32 += v33;
      --v17;
    }
    while (v34 != 1);
    uint64_t v37 = swift_bridgeObjectRelease_n();
LABEL_20:
    a4 = v40;
    goto LABEL_21;
  }
  uint64_t v37 = swift_bridgeObjectRelease();
LABEL_21:
  (*(void (**)(uint64_t))(**(void **)(v50 + 16) + 144))(v37);
  a4(v52, 0);
  return swift_bridgeObjectRelease();
}

unint64_t closure #1 in MusicDomain.search(audioUnderstanding:clientSignals:userIds:completion:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Apple_Parsec_Siri_V2alpha_ClientSignals?(a1, (uint64_t)v4);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
LABEL_10:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v15 = 0;
      _os_log_impl(&dword_1C8F83000, v13, v14, "MusicDomain : librarySearchTerms from AudioUnderstanding", v15, 2u);
      MEMORY[0x1CB77E470](v15, -1, -1);
    }

    return Apple_Parsec_Siri_V2alpha_AudioUnderstanding.librarySearchTerms.getter();
  }
  uint64_t v7 = Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  if (!*(void *)(v7 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C8F83000, v9, v10, "MusicDomain : librarySearchTerms from ClientSignals", v11, 2u);
    MEMORY[0x1CB77E470](v11, -1, -1);
  }

  return v7;
}

uint64_t MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:)(uint64_t a1, uint64_t a2, unint64_t a3, int64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  if (one-time initialization token for music != -1) {
    goto LABEL_33;
  }
  while (1)
  {
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.music);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      int64_t v46 = a4;
      uint64_t v15 = swift_slowAlloc();
      v53[0] = v15;
      *(_DWORD *)os_log_type_t v14 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C8F83000, v12, v13, "Searching music domain with: \"%s\"", v14, 0xCu);
      swift_arrayDestroy();
      uint64_t v16 = v15;
      a4 = v46;
      MEMORY[0x1CB77E470](v16, -1, -1);
      MEMORY[0x1CB77E470](v14, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v55 = a5;
    if (!*(void *)(a5 + 16)) {
      uint64_t v55 = *(void *)(v50 + 32);
    }
    swift_bridgeObjectRetain();
    unint64_t v17 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, int64_t, void))(**(void **)(v50 + 16) + 136))(a2, a3, a6, a7, a4, 0);
    if (!v17) {
      break;
    }
    unint64_t v18 = v17;
    unint64_t v19 = specialized Sequence.compactMap<A>(_:)(v17, &v55);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v20, v21))
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
LABEL_28:
      specialized Array.append<A>(contentsOf:)(v19);
      return swift_bridgeObjectRelease();
    }
    a5 = v18;
    os_log_type_t v44 = v21;
    uint64_t v47 = v20;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v54 = v43;
    *(_DWORD *)uint64_t v22 = 136315906;
    swift_bridgeObjectRetain();
    v53[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v45 = v22;
    *(_WORD *)(v22 + 12) = 2080;
    swift_beginAccess();
    uint64_t v23 = v55;
    a4 = *(void *)(v55 + 16);
    unint64_t v48 = v19;
    if (!a4)
    {
LABEL_23:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v39 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v41 = v40;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 22) = 2048;
      if (a5 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      unint64_t v19 = v48;
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 32) = 2048;
      if (v48 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v47, v44, "SKIT search query=\"%s\" allowedFieldTypes=[%s] found %ld items and resolved to %ld items", (uint8_t *)v45, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v43, -1, -1);
      MEMORY[0x1CB77E470](v45, -1, -1);

      goto LABEL_28;
    }
    uint64_t v52 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4, 0);
    a7 = specialized Set.startIndex.getter(v23);
    uint64_t v25 = v24;
    int v27 = v26 & 1;
    uint64_t v50 = v23 + 56;
    while ((a7 & 0x8000000000000000) == 0 && a7 < 1 << *(unsigned char *)(v23 + 32))
    {
      if (((*(void *)(v50 + (((unint64_t)a7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a7) & 1) == 0) {
        goto LABEL_31;
      }
      if (*(_DWORD *)(v23 + 36) != v25) {
        goto LABEL_32;
      }
      LODWORD(a2) = v27;
      uint64_t v28 = KVFieldType.description.getter();
      a6 = v29;
      a3 = *(void *)(v52 + 16);
      unint64_t v30 = *(void *)(v52 + 24);
      if (a3 >= v30 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, a3 + 1, 1);
      }
      *(void *)(v52 + 16) = a3 + 1;
      uint64_t v31 = v52 + 16 * a3;
      *(void *)(v31 + 32) = v28;
      *(void *)(v31 + 40) = a6;
      uint64_t v32 = specialized _NativeSet.index(after:)(a7, v25, a2 & 1, v23);
      a7 = v32;
      uint64_t v25 = v33;
      int v27 = v34 & 1;
      if (!--a4)
      {
        outlined consume of Set<CommonAudio.Attribute>.Index._Variant(v32, v33, v27);
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once();
  }
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl(&dword_1C8F83000, v35, v36, "Error calling VocabularySearchClient", v37, 2u);
    MEMORY[0x1CB77E470](v37, -1, -1);
  }

  lazy protocol witness table accessor for type SearchError and conformance SearchError();
  swift_allocError();
  unsigned char *v38 = 0;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

Swift::OpaquePointer_optional __swiftcall VocabularySearchClient.search(_:userId:itemTypes:fieldTypes:)(Swift::String_optional _, Swift::String_optional userId, Swift::OpaquePointer_optional itemTypes, Swift::OpaquePointer_optional fieldTypes)
{
  uint64_t v5 = *(void *)&itemTypes.is_nil;
  rawValue = itemTypes.value._rawValue;
  uint64_t countAndFlagsBits = userId.value._countAndFlagsBits;
  unint64_t object = (unint64_t)_.value._object;
  uint64_t v9 = _.value._countAndFlagsBits;
  os_log_type_t v10 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!object) {
    goto LABEL_8;
  }
  uint64_t v13 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0) {
    uint64_t v13 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (v13)
  {
    Date.init()();
    os_log_type_t v14 = &v12[v10[5]];
    *(void *)os_log_type_t v14 = "SiriInformationSearch/VocabularySearchClient.swift";
    *((void *)v14 + 1) = 50;
    v14[16] = 2;
    *(void *)&v12[v10[6]] = 62;
    uint64_t v15 = &v12[v10[7]];
    *(void *)uint64_t v15 = "search(_:userId:itemTypes:fieldTypes:)";
    *((void *)v15 + 1) = 38;
    v15[16] = 2;
    uint64_t v16 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000023);
    unint64_t v17 = (uint64_t *)&v12[v10[8]];
    *unint64_t v17 = v16;
    v17[1] = v18;
    MEMORY[0x1F4188790](v16);
    v27[-8] = v4;
    v27[-7] = v9;
    v27[-6] = object;
    v27[-5] = rawValue;
    v27[-4] = v5;
    v27[-3] = countAndFlagsBits;
    v27[-2] = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [VocabularyResult]?);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v20 = (void *)v27[1];
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(char *, uint64_t))(*(void *)static PerformanceUtil.shared + 184))(v12, 1);
    outlined destroy of PerformanceUtil.Ticket((uint64_t)v12);
  }
  else
  {
LABEL_8:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_1C8F83000, v23, v24, "Empty query given to vocabulary search client", v25, 2u);
      MEMORY[0x1CB77E470](v25, -1, -1);
    }

    uint64_t v20 = 0;
  }
  char v26 = v20;
  result.value._rawValue = v26;
  result.is_nil = v21;
  return result;
}

void partial apply for closure #1 in VocabularySearchClient.search(_:userId:itemTypes:fieldTypes:)(uint64_t *a1@<X8>)
{
  closure #1 in VocabularySearchClient.search(_:userId:itemTypes:fieldTypes:)(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), a1);
}

void closure #1 in VocabularySearchClient.search(_:userId:itemTypes:fieldTypes:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v9 = a7;
  uint64_t v10 = a5;
  uint64_t v16 = (void *)a1[8];
  uint64_t v70 = a6;
  if (v16)
  {
    uint64_t v71 = v8;
    goto LABEL_3;
  }
  uint64_t v68 = a5;
  uint64_t v69 = a8;
  uint64_t v64 = a7;
  uint64_t v38 = a1[6];
  uint64_t v37 = a1[7];
  __swift_project_boxed_opaque_existential_1(a1 + 3, v38);
  uint64_t v66 = type metadata accessor for Locale();
  uint64_t v67 = &v63;
  uint64_t v65 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  unint64_t v40 = (char *)&v63 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(v37 + 40))(v38, v37);
  if (!v8)
  {
    uint64_t v71 = 0;
    id v56 = objc_allocWithZone(MEMORY[0x1E4F9FBE0]);
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    id v58 = objc_msgSend(v56, sel_initWithLocale_, isa);

    (*(void (**)(char *, uint64_t))(v65 + 8))(v40, v66);
    uint64_t v59 = (void *)a1[8];
    a1[8] = v58;

    uint64_t v16 = (void *)a1[8];
    if (!v16)
    {
      a8 = v69;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      __swift_project_value_buffer(v60, (uint64_t)static Logger.pommes);
      os_log_type_t v44 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v61))
      {
        uint64_t v62 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v62 = 0;
        _os_log_impl(&dword_1C8F83000, v44, v61, "VocabularySearchClient : Failed to initialize the tokenizer", v62, 2u);
        MEMORY[0x1CB77E470](v62, -1, -1);
      }
      goto LABEL_25;
    }
    uint64_t v10 = v68;
    a8 = v69;
    uint64_t v9 = v64;
LABEL_3:
    unint64_t v17 = v16;
    uint64_t v18 = (void *)MEMORY[0x1CB77CA90](a2, a3);
    id v19 = objc_msgSend(v17, sel_queryFromText_, v18);

    if (a4)
    {
      uint64_t v20 = *(void *)(a4 + 16);
      if (v20)
      {
        uint64_t v68 = v10;
        uint64_t v69 = v17;
        Swift::Bool v21 = a8;
        uint64_t v22 = v9;
        uint64_t v73 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v23 = a4 + 32;
        do
        {
          v23 += 8;
          id v24 = (id)KVItemTypeToNumber();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v20;
        }
        while (v20);
        uint64_t v9 = v22;
        a8 = v21;
        uint64_t v10 = v68;
        unint64_t v17 = v69;
      }
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      Class v25 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v19, sel_setIncludedKVItemTypes_, v25);
    }
    if (v10)
    {
      uint64_t v26 = *(void *)(v10 + 16);
      if (v26)
      {
        uint64_t v69 = v17;
        uint64_t v73 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v27 = v10 + 32;
        do
        {
          v27 += 8;
          id v28 = (id)KVFieldTypeToNumber();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v26;
        }
        while (v26);
        unint64_t v17 = v69;
      }
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      Class v29 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v19, sel_setIncludedKVFieldTypes_, v29);
    }
    unint64_t v30 = a1 + 3;
    if (v9)
    {
      uint64_t v31 = a1[6];
      uint64_t v32 = a1[7];
      __swift_project_boxed_opaque_existential_1(v30, v31);
      uint64_t v33 = v71;
      uint64_t v34 = (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 24))(v19, v70, v9, v31, v32);
      uint64_t v35 = v33;
      if (v33)
      {
LABEL_17:

        os_log_type_t v36 = v35;
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v53 = a1[6];
      uint64_t v54 = a1[7];
      __swift_project_boxed_opaque_existential_1(v30, v53);
      uint64_t v55 = v71;
      uint64_t v34 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v54 + 32))(v19, v53, v54);
      uint64_t v35 = v55;
      if (v55) {
        goto LABEL_17;
      }
    }
    uint64_t v52 = v34;

    goto LABEL_28;
  }
  os_log_type_t v36 = v8;
  a8 = v69;
LABEL_20:
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static Logger.pommes);
  id v42 = v36;
  id v43 = v36;
  os_log_type_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v44, v45))
  {

LABEL_25:
    uint64_t v52 = 0;
    goto LABEL_28;
  }
  int64_t v46 = (uint8_t *)swift_slowAlloc();
  uint64_t v47 = swift_slowAlloc();
  uint64_t v71 = 0;
  uint64_t v72 = (uint64_t)v36;
  uint64_t v48 = v47;
  uint64_t v73 = v47;
  *(_DWORD *)int64_t v46 = 136315138;
  id v49 = v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v50 = String.init<A>(describing:)();
  uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v73);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1C8F83000, v44, v45, "VocabularySearchClient search failed : %s", v46, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1CB77E470](v48, -1, -1);
  MEMORY[0x1CB77E470](v46, -1, -1);

  uint64_t v52 = 0;
LABEL_28:
  *a8 = v52;
}

uint64_t closure #1 in MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:)@<X0>(void **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  if (one-time initialization token for music != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.music);
  id v7 = v5;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t type = v9;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v28 = v26;
    *(_DWORD *)uint64_t v10 = 136315138;
    buf = v10;
    id v11 = v7;
    id v12 = v7;
    uint64_t v13 = a2;
    os_log_type_t v14 = a3;
    id v15 = objc_msgSend(v11, sel_description);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    a3 = v14;
    a2 = v13;
    id v7 = v12;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v8, type, "Vocabulary item: %s", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v26, -1, -1);
    MEMORY[0x1CB77E470](buf, -1, -1);
  }
  else
  {
  }
  uint64_t v19 = *a2;
  swift_bridgeObjectRetain();
  Swift::UInt v20 = dispatch thunk of VocabularyResult.fieldType.getter();
  BOOL v21 = specialized Set.contains(_:)(v20, v19);
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if (v21)
  {
    id v23 = objc_allocWithZone((Class)type metadata accessor for ClientAudioResult());
    id v24 = v7;
    uint64_t result = ClientAudioResult.init(domain:vocabularyResult:)();
  }
  *a3 = result;
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  os_log_type_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

Swift::Void __swiftcall VocabularySearchClient.resetTokenizer()()
{
  unint64_t v1 = *(NSObject **)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in VocabularySearchClient.resetTokenizer();
  *(void *)(v2 + 24) = v0;
  v4[4] = _sIg_Ieg_TRTA_0;
  v4[5] = v2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed () -> ();
  v4[3] = &block_descriptor_3;
  uint64_t v3 = _Block_copy(v4);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v1) {
    __break(1u);
  }
}

void partial apply for closure #1 in VocabularySearchClient.resetTokenizer()()
{
  unint64_t v1 = *(void **)(v0 + 64);
  *(void *)(v0 + 64) = 0;
}

void OnDeviceSearchInstrumentationUtil.logEndOnDeviceSearch(requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v5 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1098]), sel_init);
    if (v7)
    {
      unint64_t v8 = v7;
      id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA10A0]), sel_init);
      if (v9)
      {
        unint64_t v10 = v9;
        objc_msgSend(v9, sel_setExists_, 1);
        objc_msgSend(v8, sel_setEnded_, v10);
        objc_msgSend(v6, sel_setOnDeviceIndexSearchContext_, v8);
        unint64_t v11 = self;
        swift_retain();
        id v12 = objc_msgSend(v11, sel_processInfo);
        char v13 = NSProcessInfo.isRunningUnitTests.getter();

        if (v13) {
          id v14 = (id)(*(uint64_t (**)(void))(*(void *)v4 + 96))();
        }
        else {
          id v14 = objc_msgSend(self, sel_sharedStream);
        }
        unint64_t v18 = v14;
        swift_release();
        objc_msgSend(v18, sel_emitMessage_, v6);

        swift_unknownObjectRelease();
        return;
      }
    }
    else
    {
      unint64_t v8 = v6;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v17 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v16, "Unable to log end of OnDeviceSearch", v17, 2u);
    MEMORY[0x1CB77E470](v17, -1, -1);
  }
}

uint64_t PommesResponse.curareDescription.getter()
{
  _StringGuts.grow(_:)(32);
  v0._uint64_t countAndFlagsBits = 0x6469666E6F63227BLL;
  v0._unint64_t object = (void *)0xEF203A2265636E65;
  String.append(_:)(v0);
  dispatch thunk of PommesResponse.primaryQueryConfidence()();
  Double.write<A>(to:)();
  v1._uint64_t countAndFlagsBits = 0x644974616322202CLL;
  v1._unint64_t object = (void *)0xEC000000203A2273;
  String.append(_:)(v1);
  dispatch thunk of PommesResponse.primaryCatIds()();
  v2._uint64_t countAndFlagsBits = MEMORY[0x1CB77CDC0]();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 125;
  v3._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t outlined init with copy of CurareInteractionStream?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurareInteractionStream?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in PommesSearchRequestProcessor.search(enabled:completion:)(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(a1, a2 & 1);
}

double static PommesResponse.makeDefaultInteractionStream()@<D0>(uint64_t a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_processInfo);
  char v3 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v3 & 1) != 0
    || (id v4 = objc_allocWithZone(MEMORY[0x1E4F618B8]),
        unint64_t v5 = (void *)MEMORY[0x1CB77CA90](0x4D4D4F5049524953, 0xEA00000000005345),
        id v6 = objc_msgSend(v4, sel_initWithStreamId_, v5),
        v5,
        !v6))
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    *(void *)(a1 + 24) = type metadata accessor for FSFCurareInteractionStream();
    *(void *)(a1 + 32) = &protocol witness table for FSFCurareInteractionStream;
    *(void *)a1 = v6;
  }
  return result;
}

void *PommesResponse.pommesRequestResult.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
  MEMORY[0x1F4188790](v0 - 8);
  id v2 = (char *)&v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for PommesRenderOptions.PromptType();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1180]), sel_init);
  if (v7)
  {
    unint64_t v8 = v7;
    uint64_t v37 = v6;
    dispatch thunk of PommesResponse.primaryQueryConfidence()();
    objc_msgSend(v8, sel_setPommesConfidenceScore_);
    uint64_t v9 = PommesResponse.metadataDomainName.getter();
    unint64_t v10 = (void *)MEMORY[0x1CB77CA90](v9);
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setPegasusDomain_, v10);

    objc_msgSend(v8, sel_setIsLowConfidenceKnowledgeResult_, PommesResponse.isLowConfidenceKnowledgeResult.getter() & 1);
    unint64_t v11 = dispatch thunk of PommesResponse.experiences.getter();
    unint64_t v12 = v11;
    uint64_t v38 = v4;
    uint64_t v39 = v3;
    if (v11 >> 62) {
      goto LABEL_32;
    }
    uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13)
    {
      while (1)
      {
        id v14 = (v12 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1CB77D510](0, v12) : *(id *)(v12 + 32);
        uint64_t v15 = v14;
        os_log_type_t v16 = (void *)dispatch thunk of Experience.renderOptions.getter();
        uint64_t v17 = PommesRenderOptions.promptTypes.getter();

        uint64_t v18 = *(void *)(v17 + 16);
        swift_bridgeObjectRelease();
        if (v18) {
          break;
        }

        if (v13 != 1)
        {
          uint64_t v28 = 5;
          while (1)
          {
            id v29 = (v12 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x1CB77D510](v28 - 4, v12)
                : *(id *)(v12 + 8 * v28);
            uint64_t v15 = v29;
            uint64_t v30 = v28 - 3;
            if (__OFADD__(v28 - 4, 1)) {
              break;
            }
            uint64_t v31 = (void *)dispatch thunk of Experience.renderOptions.getter();
            uint64_t v32 = PommesRenderOptions.promptTypes.getter();

            uint64_t v33 = *(void *)(v32 + 16);
            swift_bridgeObjectRelease();
            if (v33) {
              goto LABEL_7;
            }

            ++v28;
            if (v30 == v13) {
              goto LABEL_23;
            }
          }
          __break(1u);
LABEL_32:
          swift_bridgeObjectRetain();
          uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
          if (v13) {
            continue;
          }
        }
        goto LABEL_23;
      }
LABEL_7:
      uint64_t v20 = v38;
      uint64_t v19 = v39;
      swift_bridgeObjectRelease_n();
      if (v15)
      {
        id v21 = v15;
        uint64_t v22 = (void *)dispatch thunk of Experience.renderOptions.getter();

        uint64_t v23 = PommesRenderOptions.promptTypes.getter();
        if (*(void *)(v23 + 16))
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v2, v23 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80)), v19);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v2, 0, 1, v19);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v2, 1, 1, v19);
        }
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v2, 1, v19) != 1)
        {
          uint64_t v35 = (uint64_t)v37;
          (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v37, v2, v19);
          objc_msgSend(v8, sel_setPegasusPromptType_, closure #2 in PommesResponse.pommesRequestResult.getter(v35));

          (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v35, v19);
          return v8;
        }

        goto LABEL_25;
      }
    }
    else
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      uint64_t v20 = v38;
      uint64_t v19 = v39;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v2, 1, 1, v19);
LABEL_25:
    outlined destroy of PommesRenderOptions.PromptType?((uint64_t)v2);
    return v8;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  Class v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl(&dword_1C8F83000, v25, v26, "Unable to initialize POMMESSchemaPOMMESRequestResult", v27, 2u);
    MEMORY[0x1CB77E470](v27, -1, -1);
  }

  return 0;
}

void PommesRequestInstrumentationUtil.logEndOfPommesRequest(requestId:pommesCandidateId:result:pommesSearchReason:isHandledByPreflight:preflightClientHandlerIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  if (a4)
  {
    uint64_t v9 = v8;
    id v16 = a4;
    uint64_t v17 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
    if (v17)
    {
      uint64_t v18 = v17;
      id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1168]), sel_init);
      if (v19)
      {
        uint64_t v20 = v19;
        id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1170]), sel_init);
        if (v21)
        {
          uint64_t v22 = v21;
          objc_msgSend(v21, sel_setIsHandledByPreflight_, a6 & 1);
          if (a6)
          {
            if (a8) {
              uint64_t v23 = (void *)MEMORY[0x1CB77CA90](a7, a8);
            }
            else {
              uint64_t v23 = 0;
            }
            objc_msgSend(v22, sel_setPreflightClientHandlerIdentifier_, v23);
          }
          objc_msgSend(v22, sel_setResult_, v16);
          objc_msgSend(v22, sel_setPommesSearchReason_, PommesSearchReason.toInt.getter());
          objc_msgSend(v20, sel_setEnded_, v22);
          objc_msgSend(v18, sel_setPommesRequestContext_, v20);
          uint64_t v27 = self;
          swift_retain();
          id v28 = objc_msgSend(v27, sel_processInfo);
          char v29 = NSProcessInfo.isRunningUnitTests.getter();

          if (v29) {
            id v30 = (id)(*(uint64_t (**)(void))(*(void *)v9 + 96))();
          }
          else {
            id v30 = objc_msgSend(self, sel_sharedStream);
          }
          uint64_t v31 = v30;
          swift_release();
          objc_msgSend(v31, sel_emitMessage_, v18);

          swift_unknownObjectRelease();
          return;
        }

        id v16 = v18;
      }
      else
      {
        uint64_t v20 = v18;
      }

      id v16 = v20;
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v25))
  {
    os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v26 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v25, "Unable to log end of POMMES request", v26, 2u);
    MEMORY[0x1CB77E470](v26, -1, -1);
  }
}

Swift::Void __swiftcall DomainWarmup.reset()()
{
  uint64_t v1 = *(NSObject **)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in DomainWarmup.reset();
  *(void *)(v2 + 24) = v0;
  v4[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v4[5] = v2;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed () -> ();
  v4[3] = &block_descriptor_21;
  uint64_t v3 = _Block_copy(v4);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v1) {
    __break(1u);
  }
}

uint64_t partial apply for closure #1 in DomainWarmup.reset()()
{
  return closure #1 in DomainWarmup.reset()(v0);
}

uint64_t closure #1 in DomainWarmup.reset()(uint64_t a1)
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C8F83000, v3, v4, "DomainWarmup clearing warmup state", v5, 2u);
    MEMORY[0x1CB77E470](v5, -1, -1);
  }

  swift_beginAccess();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBC868];
  return swift_bridgeObjectRelease();
}

uint64_t outlined destroy of DefaultExperiencesResolver(uint64_t a1)
{
  return a1;
}

uint64_t PommesSearchRequestProcessor.__deallocating_deinit()
{
  PommesSearchRequestProcessor.deinit();

  return swift_deallocClassInstance();
}

uint64_t PommesSearchRequestProcessor.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  _s21SiriInformationSearch06PommesC7RequestVWOhTm_0(v0 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest, type metadata accessor for PommesSearchRequest);
  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t OnDeviceSearchInstrumentationUtil.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t AnalyticsComponentIdGenerator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t type metadata accessor for FSFCurareInteractionStream()
{
  unint64_t result = lazy cache variable for type metadata for FSFCurareInteractionStream;
  if (!lazy cache variable for type metadata for FSFCurareInteractionStream)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for FSFCurareInteractionStream);
  }
  return result;
}

uint64_t specialized FSFCurareInteractionStream.shouldInsertInteraction()()
{
  uint64_t v0 = self;
  if (!objc_msgSend(v0, sel_isSupportedPlatform))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v3, v4)) {
      goto LABEL_13;
    }
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    id v6 = "FSFUtils: unsupported platform.";
    goto LABEL_12;
  }
  if (objc_msgSend(v0, sel_isSupportedUser)) {
    return 1;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    id v6 = "FSFUtils: unsupported user.";
LABEL_12:
    _os_log_impl(&dword_1C8F83000, v3, v4, v6, v5, 2u);
    MEMORY[0x1CB77E470](v5, -1, -1);
  }
LABEL_13:

  return 0;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse()
{
  unint64_t result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse);
  }
  return result;
}

id protocol witness for CurareInteractionStream.insert(_:) in conformance FSFCurareInteractionStream(uint64_t a1)
{
  return @nonobjc FSFCurareInteractionStream.insert(_:)(a1);
}

id @nonobjc FSFCurareInteractionStream.insert(_:)(uint64_t a1)
{
  v4[1] = *(id *)MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (objc_msgSend(v1, sel_insert_error_, a1, v4)) {
    return v4[0];
  }
  id v3 = v4[0];
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t protocol witness for ContactFetching.contactsAddressAndPhoneFlags(id:) in conformance CNContactStore(uint64_t a1, uint64_t a2, Swift::OpaquePointer_optional a3)
{
  a3.value._rawValue = 0;
  LOBYTE(v3) = CNContactStore.contactsAddressAndPhoneFlags(id:contactFetchKeys:)(*(Swift::String *)&a1, a3).hasAddress;
  return v3 & 1 | ((v3 > 0xFFu) << 8);
}

Swift::tuple_hasAddress_Bool_hasPhoneNumber_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CNContactStore.contactsAddressAndPhoneFlags(id:)(Swift::String id)
{
  v1.value._rawValue = 0;
  Swift::tuple_hasAddress_Bool_hasPhoneNumber_Bool v3 = CNContactStore.contactsAddressAndPhoneFlags(id:contactFetchKeys:)(id, v1);
  Swift::Bool hasPhoneNumber = v3.hasPhoneNumber;
  Swift::Bool hasAddress = v3.hasAddress;
  result.Swift::Bool hasPhoneNumber = hasPhoneNumber;
  result.Swift::Bool hasAddress = hasAddress;
  return result;
}

uint64_t partial apply for closure #1 in AppInfoDataProvider.equivalentAppInfo(span:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in AppInfoDataProvider.equivalentAppInfo(span:)(*(void **)(v1 + 16), a1);
}

uint64_t closure #1 in AppInfoDataProvider.equivalentAppInfo(span:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[6];
  __swift_project_boxed_opaque_existential_1(a1 + 2, a1[5]);
  uint64_t v4 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
  (*(void (**)(void *__return_ptr, uint64_t))(v3 + 8))(v6, v4);
  swift_bridgeObjectRelease();
  return outlined init with take of PommesSearchReason?((uint64_t)v6, a2, &demangling cache variable for type metadata for AppData?);
}

uint64_t protocol witness for AppDataProviding.getAppInfo(bundleId:allowPlaceholder:) in conformance AppDataProvider@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)v1 + 104))(v4);
  return outlined init with take of AppData?((uint64_t)v4, a1);
}

void AppDataProvider.getAppInfo(bundleId:allowPlaceholder:)(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = v4[5];
  uint64_t v11 = v4[6];
  __swift_project_boxed_opaque_existential_1(v4 + 2, v10);
  (*(void (**)(id *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v11 + 8))(&v48, a1, a2, v10, v11);
  char v12 = v49;
  swift_bridgeObjectRelease();
  if (v12)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      id v48 = v17;
      *(_DWORD *)id v16 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v18 = "AppDataProvider#getAppInfo failed to locate app for bundleIdentifier:%s";
LABEL_11:
      _os_log_impl(&dword_1C8F83000, v14, v15, v18, v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v17, -1, -1);
      MEMORY[0x1CB77E470](v16, -1, -1);

LABEL_13:
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  id v19 = objc_allocWithZone(MEMORY[0x1E4F223C8]);
  swift_bridgeObjectRetain();
  id v20 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, a3 & 1);
  uint64_t v27 = v20;
  if (!v20)
  {
LABEL_7:
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      id v48 = v17;
      *(_DWORD *)id v16 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v18 = "AppDataProvider#getAppInfo failed to resolve appData for bundleIdentifier:%s";
      goto LABEL_11;
    }
LABEL_12:

    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  id v28 = objc_msgSend(self, sel_appInfoWithApplicationRecord_, v20);
  if (!v28)
  {

    goto LABEL_7;
  }
  char v29 = v28;
  if (objc_msgSend(v27, sel_appProtectionHidden))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl(&dword_1C8F83000, v31, v32, "AppDataProvider#getAppInfo excluded hidden app from consideration", v33, 2u);
      MEMORY[0x1CB77E470](v33, -1, -1);
    }
    else
    {
    }
    goto LABEL_13;
  }
  uint64_t v50 = &type metadata for FeatureFlag;
  unint64_t v51 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  uint64_t v34 = swift_allocObject();
  id v48 = (id)v34;
  *(void *)(v34 + 16) = 5;
  *(void *)(v34 + 24) = 0;
  *(void *)(v34 + 32) = 0;
  *(void *)(v34 + 40) = 0;
  *(unsigned char *)(v34 + 48) = 3;
  char v35 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
  if ((v35 & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v36 = (void *)v5[7];
  uint64_t v37 = (void *)MEMORY[0x1CB77CA90](a1, a2);
  id v48 = 0;
  id v38 = objc_msgSend(v36, sel_actionsForBundleIdentifier_error_, v37, &v48);

  id v39 = v48;
  if (!v38)
  {
    id v41 = v48;
    id v42 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_28:
    uint64_t v26 = MEMORY[0x1E4FBC860];
    goto LABEL_29;
  }
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for LNActionMetadata);
  uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v40 = v39;

LABEL_29:
  id v43 = objc_msgSend(v29, sel_applicationIdentifier);
  if (v43)
  {
    os_log_type_t v44 = v43;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v45;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  id v46 = objc_msgSend(v29, sel_supportedIntents);
  uint64_t v24 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v47 = objc_msgSend(v29, sel_supportedMediaCategories);
  uint64_t v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_14:
  *a4 = v22;
  a4[1] = v23;
  a4[2] = v24;
  a4[3] = v25;
  a4[4] = v26;
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  v10[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)MEMORY[0x1CB77CA90]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v6 = objc_msgSend(v3, sel_initWithBundleIdentifier_allowPlaceholder_error_, v5, a3 & 1, v10);

  if (v6)
  {
    id v7 = v10[0];
  }
  else
  {
    id v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t AppInfoDataProvider.getVocabularyConcepts(bundleId:allowPlaceholder:)(uint64_t a1, unint64_t a2, char a3)
{
  void (*v13)(uint64_t *__return_ptr, unint64_t, unint64_t, void, unsigned char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(uint64_t *@<X8>), unsigned char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  id v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned char v93[16];
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  long long v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  long long v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114[4];

  uint64_t v4 = v3;
  uint64_t v7 = a1;
  if (one-time initialization token for shared != -1) {
    a1 = swift_once();
  }
  id v8 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](a1);
  uint64_t v94 = v4;
  char v95 = v7;
  uint64_t v96 = a2;
  LOBYTE(v97) = a3 & 1;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  char v12 = &v93[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Date.init()();
  uint64_t v13 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, unsigned char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(uint64_t *@<X8>), unsigned char *, uint64_t))(*(void *)v8 + 200);
  id v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : NSDictionary]);
  v13(v114, 0xD00000000000003BLL, 0x80000001C919EEE0, 0, v12, "SiriInformationSearch/AppInfoDataProvider.swift", 47, 2, 142, "getVocabularyConcepts(bundleId:allowPlaceholder:)", 49, 2, partial apply for closure #1 in AppInfoDataProvider.getVocabularyConcepts(bundleId:allowPlaceholder:), v93, v14);
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  os_log_type_t v15 = v114[0];
  id v16 = objc_msgSend(*(id *)(v4 + 56), sel_languageCode);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.pommes);
    uint64_t v34 = Logger.logObject.getter();
    char v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_1C8F83000, v34, v35, "PegasusProxy#equivalentAppInfo unable get siriLocale", v36, 2u);
      MEMORY[0x1CB77E470](v36, -1, -1);
    }

    return MEMORY[0x1E4FBC860];
  }
  uint64_t v17 = v16;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v20 = v19;

  v114[0] = v18;
  v114[1] = v20;
  uint64_t v112 = 45;
  uint64_t v113 = 0xE100000000000000;
  uint64_t v110 = 95;
  uint64_t v111 = 0xE100000000000000;
  uint64_t v96 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v97 = v96;
  uint64_t v94 = MEMORY[0x1E4FBB1A0];
  char v95 = v96;
  uint64_t v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = static Locale.canonicalLanguageIdentifier(from:)();
  uint64_t v26 = v25;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  id v28 = __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v101 = v28;
  char v29 = Logger.logObject.getter();
  uint64_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = swift_slowAlloc();
    os_log_type_t v32 = swift_slowAlloc();
    v114[0] = v32;
    *(_DWORD *)uint64_t v31 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v114);
    unsigned int v100 = (uint64_t *)v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v31 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v29, v30, "PegasusProxy#equivalentAppInfo siriLocale: %s canonical: %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v32, -1, -1);
    MEMORY[0x1CB77E470](v31, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  id v38 = type metadata accessor for Locale();
  unsigned int v100 = &v98;
  uint64_t v99 = v38;
  uint64_t v98 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  id v40 = (char *)&v98 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  Locale.init(identifier:)();
  uint64_t v102 = xmmword_1C9196230;
  uint64_t v103 = v24;
  uint64_t v104 = v26;
  uint64_t v105 = Locale.identifier.getter();
  uint64_t v106 = v41;
  id v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  MEMORY[0x1F4188790](v42 - 8);
  os_log_type_t v44 = (char *)&v98 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for Locale.Language();
  id v46 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  id v48 = (char *)&v98 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  Locale.language.getter();
  Locale.Language.languageCode.getter();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v45);
  char v49 = type metadata accessor for Locale.LanguageCode();
  uint64_t v50 = *(void *)(v49 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v44, 1, v49) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v44, &demangling cache variable for type metadata for Locale.LanguageCode?);
    unint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v107 = 0;
    uint64_t v108 = 0;
  }
  else
  {
    uint64_t v52 = MEMORY[0x1CB776C80]();
    unint64_t v51 = v53;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v44, v49);
    uint64_t v107 = v52;
    uint64_t v108 = v51;
  }
  char v109 = xmmword_1C9197B80;
  uint64_t v54 = v104;
  if (v104)
  {
    uint64_t v55 = v103;
    swift_bridgeObjectRetain();
    id v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    id v58 = v56[2];
    uint64_t v57 = v56[3];
    if (v58 >= v57 >> 1) {
      id v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v57 > 1), v58 + 1, 1, v56);
    }
    v56[2] = v58 + 1;
    uint64_t v59 = &v56[2 * v58];
    v59[4] = v55;
    v59[5] = v54;
    uint64_t v60 = v106;
    if (!v106) {
      goto LABEL_28;
    }
    goto LABEL_23;
  }
  id v56 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v60 = v106;
  if (v106)
  {
LABEL_23:
    os_log_type_t v61 = v105;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
    }
    uint64_t v63 = v56[2];
    uint64_t v62 = v56[3];
    if (v63 >= v62 >> 1) {
      id v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v62 > 1), v63 + 1, 1, v56);
    }
    v56[2] = v63 + 1;
    uint64_t v64 = &v56[2 * v63];
    v64[4] = v61;
    v64[5] = v60;
    uint64_t v52 = v107;
    unint64_t v51 = v108;
  }
LABEL_28:
  if (v51)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
    }
    uint64_t v66 = v56[2];
    uint64_t v65 = v56[3];
    if (v66 >= v65 >> 1) {
      id v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v65 > 1), v66 + 1, 1, v56);
    }
    v56[2] = v66 + 1;
    uint64_t v67 = &v56[2 * v66];
    v67[4] = v52;
    v67[5] = v51;
  }
  uint64_t v68 = *((void *)&v109 + 1);
  if (*((void *)&v109 + 1))
  {
    uint64_t v69 = v109;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
    }
    uint64_t v71 = v56[2];
    uint64_t v70 = v56[3];
    if (v71 >= v70 >> 1) {
      id v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v70 > 1), v71 + 1, 1, v56);
    }
    v56[2] = v71 + 1;
    uint64_t v72 = &v56[2 * v71];
    v72[4] = v69;
    v72[5] = v68;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  swift_arrayDestroy();
  uint64_t v73 = v56[2];
  if (!v73)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v84 = Logger.logObject.getter();
    uint64_t v85 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v86 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v86 = 0;
      _os_log_impl(&dword_1C8F83000, v84, v85, "PegasusProxy#equivalentAppInfo no vocabulary matches for any locale identifier", v86, 2u);
      MEMORY[0x1CB77E470](v86, -1, -1);
    }
    goto LABEL_50;
  }
  uint64_t v74 = v56 + 5;
  while (1)
  {
    if (!*(void *)(v15 + 16)) {
      goto LABEL_43;
    }
    uint64_t v76 = *(v74 - 1);
    uint64_t v75 = *v74;
    swift_bridgeObjectRetain_n();
    uint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v76, v75);
    if (v78) {
      break;
    }
    swift_bridgeObjectRelease_n();
LABEL_43:
    v74 += 2;
    if (!--v73) {
      goto LABEL_48;
    }
  }
  uint64_t v79 = *(id *)(*(void *)(v15 + 56) + 8 * v77);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v80 = Logger.logObject.getter();
  uint64_t v81 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v80, v81))
  {
    uint64_t v82 = (uint8_t *)swift_slowAlloc();
    uint64_t v83 = swift_slowAlloc();
    v114[0] = v83;
    *(_DWORD *)uint64_t v82 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v75, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v80, v81, "PegasusProxy#equivalentAppInfo matched vocabulary for locale identifier: %s", v82, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v83, -1, -1);
    MEMORY[0x1CB77E470](v82, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = specialized NSDictionary.arrayValue<A>(for:)();
  swift_bridgeObjectRelease();
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v98 + 8))(v40, v99);

    return v37;
  }
  uint64_t v84 = Logger.logObject.getter();
  uint64_t v88 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v84, v88))
  {
    uint64_t v89 = (uint8_t *)swift_slowAlloc();
    uint64_t v90 = swift_slowAlloc();
    v114[0] = v90;
    *(_DWORD *)uint64_t v89 = 136315138;
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v84, v88, "PegasusProxy#equivalentAppInfo no policies found in vocabulary for key:%s", v89, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v90, -1, -1);
    MEMORY[0x1CB77E470](v89, -1, -1);
  }

LABEL_50:
  (*(void (**)(char *, uint64_t))(v98 + 8))(v40, v99);
  return MEMORY[0x1E4FBC860];
}

uint64_t partial apply for closure #1 in AppInfoDataProvider.getVocabularyConcepts(bundleId:allowPlaceholder:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(unsigned __int8 *)(v1 + 40);
  uint64_t v7 = v3[5];
  uint64_t v8 = v3[6];
  __swift_project_boxed_opaque_existential_1(v3 + 2, v7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(v4, v5, v6, v7, v8);
  *a1 = result;
  return result;
}

uint64_t protocol witness for AppDataProviding.getVocabularies(bundleId:allowPlaceholder:) in conformance AppDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

unint64_t AppDataProvider.getVocabularies(bundleId:allowPlaceholder:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v2[5];
  uint64_t v6 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v5);
  (*(void (**)(char **__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v6 + 8))(&v116, a1, a2, v5, v6);
  LOBYTE(v5) = v117;
  swift_bridgeObjectRelease();
  if (v5)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      long long v116 = (char *)v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      char v12 = "AppDataProvider#getAppInfo failed to locate app for bundleIdentifier:%s";
LABEL_11:
      _os_log_impl(&dword_1C8F83000, v8, v9, v12, v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v11, -1, -1);
      MEMORY[0x1CB77E470](v10, -1, -1);

      return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    }
    goto LABEL_12;
  }
  id v13 = objc_allocWithZone(MEMORY[0x1E4F223C8]);
  swift_bridgeObjectRetain();
  id v14 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 0);
  uint64_t v18 = v14;
  if (!v14)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      long long v116 = (char *)v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      char v12 = "AppDataProvider#getVocabularies failed to resolve appData for bundleIdentifier:%s";
      goto LABEL_11;
    }
LABEL_12:

    swift_bridgeObjectRelease_n();
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  }
  if ((objc_msgSend(v14, sel_appProtectionHidden) & 1) == 0)
  {
    id v24 = objc_msgSend(v18, sel_URL);
    uint64_t v25 = type metadata accessor for URL();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(void *)(v26 + 64);
    MEMORY[0x1F4188790](v25);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v113 = v27;
    MEMORY[0x1F4188790](v28);
    char v29 = (char *)&v101 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    URL.absoluteURL.getter();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v26 + 8);
    v30(v29, v25);
    id v31 = objc_allocWithZone(MEMORY[0x1E4F28B58]);
    URL._bridgeToObjectiveC()(v32);
    uint64_t v34 = v33;
    char v35 = (uint64_t *)objc_msgSend(v31, sel_initWithURL_, v33);

    uint64_t v36 = v29;
    uint64_t v37 = v35;
    uint64_t v103 = v30;
    uint64_t v104 = v26 + 8;
    v30(v36, v25);
    if (!v35)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v74 = type metadata accessor for Logger();
      __swift_project_value_buffer(v74, (uint64_t)static Logger.pommes);
      id v75 = v18;
      uint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.debug.getter();
      int v78 = v77;
      if (os_log_type_enabled(v76, v77))
      {
        LODWORD(v114) = v78;
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        uint64_t v112 = (char *)swift_slowAlloc();
        long long v116 = v112;
        uint64_t v111 = v79;
        *(_DWORD *)uint64_t v79 = 136315138;
        char v109 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 4);
        id v80 = objc_msgSend(v75, sel_URL);
        uint64_t v108 = &v101;
        uint64_t v81 = v113;
        MEMORY[0x1F4188790](v80);
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        MEMORY[0x1F4188790](v82);
        uint64_t v83 = (char *)&v101 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
        URL.absoluteURL.getter();
        uint64_t v84 = v103;
        v103(v83, v25);
        uint64_t v85 = URL.absoluteString.getter();
        unint64_t v87 = v86;
        v84(v83, v25);
        uint64_t v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v87, (uint64_t *)&v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        uint64_t v88 = v111;
        _os_log_impl(&dword_1C8F83000, v76, (os_log_type_t)v114, "AppDataProvider#getVocabularies unable to construct bundle for url: %s", v111, 0xCu);
        uint64_t v89 = v112;
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v89, -1, -1);
        MEMORY[0x1CB77E470](v88, -1, -1);
      }
      else
      {
      }
      unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);

      return v16;
    }
    id v38 = objc_msgSend(v35, sel_localizations);
    uint64_t v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA68]), sel_initWithCapacity_, *(void *)(v39 + 16));
    long long v116 = 0;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSDictionary);
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

    if (!v116)
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v90 = type metadata accessor for Logger();
      __swift_project_value_buffer(v90, (uint64_t)static Logger.pommes);
      swift_bridgeObjectRetain();
      uint64_t v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v91, v92))
      {
        uint64_t v93 = (uint8_t *)swift_slowAlloc();
        uint64_t v94 = swift_slowAlloc();
        uint64_t v114 = v35;
        uint64_t v95 = v94;
        long long v116 = (char *)v94;
        *(_DWORD *)uint64_t v93 = 136315138;
        uint64_t v96 = swift_bridgeObjectRetain();
        uint64_t v97 = MEMORY[0x1CB77CDC0](v96, MEMORY[0x1E4FBB1A0]);
        unint64_t v99 = v98;
        swift_bridgeObjectRelease();
        uint64_t v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v99, (uint64_t *)&v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v91, v92, "AppDataProvider#getVocabularies unable create vocabulariesByLocale from allLocalizations:%s", v93, 0xCu);
        swift_arrayDestroy();
        uint64_t v100 = v95;
        uint64_t v37 = v114;
        MEMORY[0x1CB77E470](v100, -1, -1);
        MEMORY[0x1CB77E470](v93, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);

      return v16;
    }
    uint64_t v105 = (uint64_t)v116;
    id v102 = v18;
    swift_bridgeObjectRelease();
    id v41 = objc_msgSend(v35, sel_localizations);
    uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v44 = *(void *)(v42 + 16);
    uint64_t v101 = v42;
    if (!v44)
    {
LABEL_34:

      swift_bridgeObjectRelease();
      return v105;
    }
    uint64_t v106 = (unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    uint64_t v107 = (void (**)(char *, char *, uint64_t))(v26 + 32);
    uint64_t v45 = (uint64_t *)(v42 + 40);
    uint64_t v108 = (uint64_t *)0x80000001C91A1B20;
    char v109 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
    uint64_t v46 = v113;
    uint64_t v110 = v25;
    while (1)
    {
      uint64_t v114 = &v101;
      id v47 = (uint8_t *)*(v45 - 1);
      uint64_t v48 = *v45;
      MEMORY[0x1F4188790](v43);
      unint64_t v49 = (v46 + 15) & 0xFFFFFFFFFFFFFFF0;
      uint64_t v112 = (char *)&v101 - v49;
      swift_bridgeObjectRetain();
      uint64_t v50 = (void *)MEMORY[0x1CB77CA90](0xD000000000000013, v108);
      unint64_t v51 = (void *)MEMORY[0x1CB77CA90](0x7473696C70, 0xE500000000000000);
      uint64_t v111 = v47;
      uint64_t v52 = (void *)MEMORY[0x1CB77CA90](v47, v48);
      id v53 = objc_msgSend(v37, sel_URLForResource_withExtension_subdirectory_localization_, v50, v51, 0, v52, v101);

      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      uint64_t v55 = MEMORY[0x1F4188790](v54 - 8);
      uint64_t v57 = (char *)&v101 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
      if (v53)
      {
        MEMORY[0x1F4188790](v55);
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        id v58 = *v107;
        uint64_t v59 = (char *)&v101 - v49;
        uint64_t v60 = v110;
        (*v107)(v57, v59, v110);
        (*v109)(v57, 0, 1, v60);
        uint64_t v46 = v113;
        if ((*v106)(v57, 1, v60) != 1)
        {
          os_log_type_t v61 = v112;
          v58(v112, v57, v60);
          uint64_t v62 = v61;
          id v63 = objc_allocWithZone(MEMORY[0x1E4F1C9E0]);
          URL._bridgeToObjectiveC()(v64);
          uint64_t v66 = v65;
          id v67 = objc_msgSend(v63, sel_initWithContentsOfURL_, v65);

          if (v67)
          {
            uint64_t v68 = static Locale.canonicalLanguageIdentifier(from:)();
            uint64_t v70 = v69;
            swift_bridgeObjectRelease();
            id v71 = v67;
            uint64_t v72 = v105;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            long long v116 = (char *)v72;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v71, v68, v70, isUniquelyReferenced_nonNull_native);
            uint64_t v105 = (uint64_t)v116;

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v43 = ((uint64_t (*)(char *, uint64_t))v103)(v62, v60);
          }
          else
          {
            v103(v62, v60);
            uint64_t v43 = swift_bridgeObjectRelease();
          }
          goto LABEL_28;
        }
      }
      else
      {
        (*v109)(v57, 1, 1, v110);
      }
      swift_bridgeObjectRelease();
      uint64_t v43 = outlined destroy of URL?((uint64_t)v57);
LABEL_28:
      v45 += 2;
      if (!--v44) {
        goto LABEL_34;
      }
    }
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_1C8F83000, v20, v21, "AppDataProvider#getVocabularies excluded hidden app from consideration", v22, 2u);
    MEMORY[0x1CB77E470](v22, -1, -1);
  }

  unint64_t v23 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  return v23;
}

uint64_t closure #2 in AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v37 = a1;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v33 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v41 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  id v40 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  os_log_type_t v32 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  uint64_t v8 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v11 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  id v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v32 - v18;
  uint64_t v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
  uint64_t v43[3] = v20;
  v43[4] = lazy protocol witness table accessor for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo, MEMORY[0x1E4F889A8]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v43);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(boxed_opaque_existential_1, v37, v20);
  defaultAnyTypeURLPrefix.getter();
  uint64_t v22 = v39;
  Google_Protobuf_Any.init(message:partial:typePrefix:)();
  if (v22)
  {

    uint64_t v23 = 1;
  }
  else
  {
    uint64_t v23 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v19, v23, 1, v5);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.init()();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4F89708], v38);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  outlined init with copy of MediaUserStateCenter?((uint64_t)v19, (uint64_t)v17, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5) == 1)
  {
    Google_Protobuf_Any.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v32, v17, v5);
  }
  uint64_t v24 = v35;
  uint64_t v26 = v33;
  uint64_t v25 = v34;
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
  (*(void (**)(char *, void, uint64_t))(v41 + 104))(v40, *MEMORY[0x1E4F89B48], v44);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  Apple_Parsec_Siri_V2alpha_ProfileSlice.init()();
  (*(void (**)(char *, void, uint64_t))(v25 + 104))(v26, *MEMORY[0x1E4F892D8], v24);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
  unint64_t v27 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1C91947A0;
  unint64_t v29 = v28 + v27;
  uint64_t v30 = v42;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 16))(v29, v13, v42);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v30);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for Google_Protobuf_Any?);
}

id specialized PegasusInstrumentationUtil.buildServerDrivenContext(_:)()
{
  unint64_t v49 = (void *)type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  uint64_t v0 = *(v49 - 1);
  MEMORY[0x1F4188790](v49);
  uint64_t v2 = (char *)v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v44 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v41 - v7;
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1128]), sel_init);
  if (result)
  {
    id v43 = result;
    id v42 = result;
    uint64_t v10 = MEMORY[0x1CB779280]();
    int64_t v11 = *(void *)(v10 + 16);
    uint64_t v50 = v3;
    if (v11)
    {
      uint64_t v51 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
      uint64_t v12 = v0 + 16;
      id v13 = *(void (**)(char *, uint64_t, void *))(v0 + 16);
      uint64_t v14 = *(unsigned __int8 *)(v0 + 80);
      v41[1] = v10;
      uint64_t v15 = v10 + ((v14 + 32) & ~v14);
      uint64_t v46 = *(void *)(v12 + 56);
      id v47 = v13;
      uint64_t v48 = v12;
      uint64_t v16 = (void (**)(char *, void *))(v12 - 8);
      uint64_t v45 = v4 + 32;
      do
      {
        uint64_t v17 = v49;
        v47(v2, v15, v49);
        Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
        (*v16)(v2, v17);
        uint64_t v18 = v51;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1);
          uint64_t v18 = v51;
        }
        unint64_t v20 = *(void *)(v18 + 16);
        unint64_t v19 = *(void *)(v18 + 24);
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          uint64_t v18 = v51;
        }
        *(void *)(v18 + 16) = v20 + 1;
        unint64_t v21 = v18
            + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
            + *(void *)(v4 + 72) * v20;
        uint64_t v3 = v50;
        (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v21, v8, v50);
        uint64_t v51 = v18;
        v15 += v46;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v18 = MEMORY[0x1E4FBC860];
    }
    uint64_t v22 = *(void *)(v18 + 16);
    uint64_t v23 = v44;
    if (v22)
    {
      uint64_t v25 = *(void **)(v4 + 16);
      uint64_t v24 = v4 + 16;
      uint64_t v26 = v18 + ((*(unsigned __int8 *)(v24 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 64));
      uint64_t v48 = *(void *)(v24 + 56);
      unint64_t v49 = v25;
      unint64_t v27 = (void (**)(char *, uint64_t))(v24 - 8);
      swift_bridgeObjectRetain();
      uint64_t v28 = (void *)MEMORY[0x1E4FBC860];
      do
      {
        ((void (*)(char *, uint64_t, uint64_t))v49)(v23, v26, v3);
        uint64_t v29 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
        unint64_t v31 = v30;
        swift_bridgeObjectRelease();
        uint64_t v32 = HIBYTE(v31) & 0xF;
        if ((v31 & 0x2000000000000000) == 0) {
          uint64_t v32 = v29 & 0xFFFFFFFFFFFFLL;
        }
        if (v32)
        {
          uint64_t v33 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
          uint64_t v35 = v34;
          (*v27)(v23, v3);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
          }
          unint64_t v37 = v28[2];
          unint64_t v36 = v28[3];
          if (v37 >= v36 >> 1) {
            uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v28);
          }
          void v28[2] = v37 + 1;
          uint64_t v38 = &v28[2 * v37];
          v38[4] = v33;
          v38[5] = v35;
          uint64_t v3 = v50;
          uint64_t v23 = v44;
        }
        else
        {
          (*v27)(v23, v3);
        }
        v26 += v48;
        --v22;
      }
      while (v22);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v40 = v42;
    objc_msgSend(v42, sel_setCatIds_, isa);

    return v43;
  }
  return result;
}

uint64_t specialized ExperiencesResolver.isSquawkResponse(serverExp:)()
{
  uint64_t v48 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams();
  uint64_t v68 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  id v47 = (char *)&v43 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v66 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v43 - v8;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v50 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t v67 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v56 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1CB779280](v17);
  uint64_t v59 = *(void *)(v19 + 16);
  if (v59)
  {
    uint64_t v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
    uint64_t v21 = 0;
    uint64_t v22 = *(void *)(v20 - 8);
    unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    uint64_t v43 = v19;
    unint64_t v58 = v19 + v23;
    int v55 = *MEMORY[0x1E4F894E8];
    id v53 = (void (**)(char *, uint64_t, uint64_t))(v67 + 32);
    uint64_t v70 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v71 = v11 + 16;
    uint64_t v64 = (void (**)(char *, char *, uint64_t))(v5 + 16);
    uint64_t v65 = (void (**)(char *, char *, uint64_t))(v5 + 32);
    id v63 = (uint64_t (**)(char *, uint64_t))(v5 + 88);
    int v62 = *MEMORY[0x1E4F886E0];
    os_log_type_t v61 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v69 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v46 = (void (**)(char *, uint64_t))(v5 + 96);
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v68 + 32);
    uint64_t v44 = (void (**)(char *, uint64_t))(v68 + 8);
    uint64_t v52 = (void (**)(char *, uint64_t))(v67 + 8);
    uint64_t v57 = *(void *)(v22 + 72);
    uint64_t v24 = (uint64_t)v50;
    uint64_t v49 = v11;
    uint64_t v51 = v16;
    uint64_t v60 = v3;
    do
    {
      uint64_t v68 = v21;
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      uint64_t v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v24, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
        goto LABEL_4;
      }
      int v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 88))(v24, v25);
      if (v27 != v55)
      {
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
        goto LABEL_4;
      }
      (*(void (**)(uint64_t, uint64_t))(v26 + 96))(v24, v25);
      (*v53)(v56, v24, v16);
      uint64_t v28 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
      uint64_t v29 = *(void *)(v28 + 16);
      if (!v29)
      {
        swift_bridgeObjectRelease();
LABEL_18:
        uint64_t v16 = v51;
        (*v52)(v56, v51);
        goto LABEL_4;
      }
      uint64_t v30 = *(unsigned __int8 *)(v11 + 80);
      uint64_t v54 = v28;
      uint64_t v31 = v28 + ((v30 + 32) & ~v30);
      uint64_t v32 = *(void *)(v11 + 72);
      uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
      uint64_t v67 = v32;
      v33(v13, v31, v10);
      while (1)
      {
        Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
        if ((*v70)(v3, 1, v4) == 1)
        {
          (*v69)(v13, v10);
          outlined destroy of MediaUserStateCenter?((uint64_t)v3, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
          goto LABEL_10;
        }
        (*v65)(v9, v3, v4);
        uint64_t v34 = v66;
        (*v64)(v66, v9, v4);
        int v35 = (*v63)(v34, v4);
        if (v35 == v62) {
          break;
        }
        unint64_t v36 = v34;
        unint64_t v37 = *v61;
        (*v61)(v9, v4);
        (*v69)(v13, v10);
        uint64_t v38 = v36;
        uint64_t v3 = v60;
        v37(v38, v4);
        uint64_t v32 = v67;
LABEL_10:
        v31 += v32;
        if (!--v29)
        {
          swift_bridgeObjectRelease();
          uint64_t v11 = v49;
          uint64_t v24 = (uint64_t)v50;
          goto LABEL_18;
        }
        v33(v13, v31, v10);
      }
      swift_bridgeObjectRelease();
      (*v46)(v34, v4);
      uint64_t v39 = v47;
      uint64_t v40 = v48;
      (*v45)(v47, v34, v48);
      char v41 = Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasAudioData.getter();
      (*v44)(v39, v40);
      (*v61)(v9, v4);
      (*v69)(v13, v10);
      uint64_t v16 = v51;
      (*v52)(v56, v51);
      uint64_t v11 = v49;
      uint64_t v24 = (uint64_t)v50;
      if (v41)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
LABEL_4:
      uint64_t v21 = v68 + 1;
    }
    while (v68 + 1 != v59);
  }
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  char *v36;
  int v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  char v43;
  void v45[2];
  void (**v46)(char *, uint64_t);
  void (**v47)(char *, char *, uint64_t);
  void (**v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (**v54)(char *, uint64_t);
  void (**v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (**v61)(char *, uint64_t);
  uint64_t v62;
  unint64_t v63;
  void (*v64)(char *, unint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  void (**v67)(char *, uint64_t);
  int v68;
  uint64_t (**v69)(char *, uint64_t);
  void (**v70)(char *, char *, uint64_t);
  void (**v71)(char *, char *, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  void (**v76)(char *, uint64_t);
  unsigned int (**v77)(char *, uint64_t, uint64_t);
  uint64_t v78;

  uint64_t v50 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams();
  uint64_t v74 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v49 = (char *)v45 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v72 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v45 - v7;
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v52 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  int v62 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  unint64_t v58 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  id v75 = (char *)v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1CB779280](v19);
  uint64_t v65 = *(void *)(v21 + 16);
  if (!v65) {
    goto LABEL_24;
  }
  uint64_t v22 = 0;
  unint64_t v23 = v18 + 16;
  uint64_t v64 = *(void (**)(char *, unint64_t, uint64_t))(v18 + 16);
  uint64_t v24 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v45[1] = v21;
  id v63 = v21 + v24;
  uint64_t v57 = *MEMORY[0x1E4F894E8];
  int v55 = (void (**)(char *, uint64_t, uint64_t))(v62 + 32);
  int v78 = v10 + 16;
  os_log_type_t v77 = (unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
  uint64_t v71 = (void (**)(char *, char *, uint64_t))(v73 + 32);
  uint64_t v70 = (void (**)(char *, char *, uint64_t))(v73 + 16);
  uint64_t v69 = (uint64_t (**)(char *, uint64_t))(v73 + 88);
  uint64_t v68 = *MEMORY[0x1E4F886E0];
  uint64_t v67 = (void (**)(char *, uint64_t))(v73 + 8);
  uint64_t v76 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v48 = (void (**)(char *, uint64_t))(v73 + 96);
  id v47 = (void (**)(char *, char *, uint64_t))(v74 + 32);
  uint64_t v46 = (void (**)(char *, uint64_t))(v74 + 8);
  uint64_t v54 = (void (**)(char *, uint64_t))(v62 + 8);
  uint64_t v25 = *(void *)(v18 + 72);
  os_log_type_t v61 = (void (**)(char *, uint64_t))(v18 + 8);
  int v62 = v25;
  uint64_t v26 = (uint64_t)v52;
  uint64_t v51 = v10;
  id v53 = v15;
  uint64_t v59 = v23;
  uint64_t v60 = v17;
  uint64_t v66 = v3;
  do
  {
    uint64_t v74 = v22;
    v64(v75, v63 + v62 * v22, v17);
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
    int v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v26, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
LABEL_15:
      uint64_t v17 = v60;
LABEL_19:
      (*v61)(v75, v17);
      goto LABEL_20;
    }
    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 88))(v26, v27);
    if (v29 != v57)
    {
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
      goto LABEL_15;
    }
    (*(void (**)(uint64_t, uint64_t))(v28 + 96))(v26, v27);
    (*v55)(v58, v26, v15);
    uint64_t v30 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
    uint64_t v31 = *(void *)(v30 + 16);
    if (!v31)
    {
      swift_bridgeObjectRelease();
LABEL_18:
      uint64_t v15 = v53;
      uint64_t v17 = v60;
      (*v54)(v58, v53);
      goto LABEL_19;
    }
    uint64_t v32 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v56 = v30;
    uint64_t v33 = v30 + v32;
    uint64_t v34 = *(void *)(v10 + 72);
    int v35 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
    uint64_t v73 = v34;
    v35(v12, v30 + v32, v9);
    while (1)
    {
      Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
      if ((*v77)(v3, 1, v4) == 1)
      {
        (*v76)(v12, v9);
        outlined destroy of MediaUserStateCenter?((uint64_t)v3, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
        goto LABEL_9;
      }
      (*v71)(v8, v3, v4);
      unint64_t v36 = v72;
      (*v70)(v72, v8, v4);
      unint64_t v37 = (*v69)(v36, v4);
      if (v37 == v68) {
        break;
      }
      uint64_t v38 = v36;
      uint64_t v39 = *v67;
      (*v67)(v8, v4);
      (*v76)(v12, v9);
      uint64_t v40 = v38;
      uint64_t v3 = v66;
      v39(v40, v4);
      uint64_t v34 = v73;
LABEL_9:
      v33 += v34;
      if (!--v31)
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = v51;
        uint64_t v26 = (uint64_t)v52;
        goto LABEL_18;
      }
      v35(v12, v33, v9);
    }
    swift_bridgeObjectRelease();
    (*v48)(v36, v4);
    char v41 = v49;
    id v42 = v50;
    (*v47)(v49, v36, v50);
    uint64_t v43 = Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasAudioData.getter();
    (*v46)(v41, v42);
    (*v67)(v8, v4);
    (*v76)(v12, v9);
    uint64_t v15 = v53;
    (*v54)(v58, v53);
    uint64_t v17 = v60;
    (*v61)(v75, v60);
    uint64_t v10 = v51;
    uint64_t v26 = (uint64_t)v52;
    if (v43)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
LABEL_20:
    uint64_t v22 = v74 + 1;
  }
  while (v74 + 1 != v65);
LABEL_24:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized ExperiencesResolver.shouldPreserveResultSpaceIfPossible(for:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.preserveResultSpaceIfPossible.getter()) {
    return 1;
  }
  uint64_t v12 = MEMORY[0x1CB779280]();
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v28 = v6;
    uint64_t v29 = v3;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    uint64_t v14 = v8 + 16;
    uint64_t v32 = v15;
    unint64_t v16 = (*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64);
    uint64_t v25 = v12;
    unint64_t v17 = v12 + v16;
    int v30 = *MEMORY[0x1E4F894E8];
    uint64_t v26 = (void (**)(char *, uint64_t))(v4 + 8);
    int v27 = (void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v18 = (void (**)(char *, uint64_t))(v14 - 8);
    uint64_t v31 = *(void *)(v14 + 56);
    v15(v10, v12 + v16, v7);
    while (1)
    {
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      uint64_t v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v2, 1, v19) == 1) {
        break;
      }
      int v21 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v2, v19);
      if (v21 != v30)
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v2, v19);
        goto LABEL_6;
      }
      (*(void (**)(char *, uint64_t))(v20 + 96))(v2, v19);
      uint64_t v22 = v28;
      uint64_t v23 = v29;
      (*v27)(v28, v2, v29);
      char v24 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.preserveResultSpaceIfPossible.getter();
      (*v26)(v22, v23);
      (*v18)(v10, v7);
      if (v24)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
LABEL_7:
      v17 += v31;
      if (!--v13) {
        goto LABEL_14;
      }
      v32(v10, v17, v7);
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v2, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
LABEL_6:
    (*v18)(v10, v7);
    goto LABEL_7;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void (**v14)(char *, char *, uint64_t);
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.preserveResultSpaceIfPossible.getter()) {
    return 1;
  }
  uint64_t v8 = MEMORY[0x1CB779280]();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v22 = v3;
    uint64_t v10 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent() - 8);
    uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
    int v21 = v8;
    uint64_t v12 = v8 + ((v11 + 32) & ~v11);
    uint64_t v13 = *MEMORY[0x1E4F894E8];
    uint64_t v14 = (void (**)(char *, char *, uint64_t))(v4 + 32);
    uint64_t v15 = (void (**)(char *, uint64_t))(v4 + 8);
    unint64_t v16 = *(void *)(v10 + 72);
    do
    {
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      unint64_t v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v2, 1, v17) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v2, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
      }
      else if ((*(unsigned int (**)(char *, uint64_t))(v18 + 88))(v2, v17) == v13)
      {
        (*(void (**)(char *, uint64_t))(v18 + 96))(v2, v17);
        uint64_t v19 = v22;
        (*v14)(v6, v2, v22);
        uint64_t v20 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.preserveResultSpaceIfPossible.getter();
        (*v15)(v6, v19);
        if (v20)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v18 + 8))(v2, v17);
      }
      v12 += v16;
      --v9;
    }
    while (v9);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized ExperiencesResolver.extractSwitchProfile(serverExp:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v94 = (uint64_t)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v58 = *(void *)(v88 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v88);
  uint64_t v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  unint64_t v87 = (char *)&v56 - v7;
  uint64_t v93 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  uint64_t v8 = *(void *)(v93 - 8);
  MEMORY[0x1F4188790](v93);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t v60 = *(void (***)(char *, uint64_t))(v65 - 8);
  MEMORY[0x1F4188790](v65);
  id v63 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v79 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
  uint64_t v14 = *(void *)(v64 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v64);
  unint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v89 = (char *)&v56 - v18;
  uint64_t v81 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  uint64_t v19 = *(void *)(v81 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v81);
  id v80 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1CB779280](v20);
  uint64_t v73 = *(void *)(result + 16);
  if (v73)
  {
    uint64_t v71 = v17;
    unint64_t v86 = v6;
    uint64_t v56 = a1;
    unint64_t v23 = 0;
    uint64_t v24 = v19;
    unint64_t v78 = result + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    uint64_t v76 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v77 = v19 + 16;
    uint64_t v70 = (void (**)(char *, uint64_t, uint64_t))(v14 + 32);
    uint64_t v69 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v68 = (uint64_t (**)(char *, uint64_t))(v14 + 88);
    int v67 = *MEMORY[0x1E4F894E8];
    uint64_t v66 = (void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v74 = (void (**)(char *, uint64_t))(v19 + 8);
    int v62 = (void (**)(char *, uint64_t))(v14 + 96);
    os_log_type_t v61 = (void (**)(char *, char *, uint64_t))(v60 + 4);
    uint64_t v91 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v92 = v8 + 16;
    uint64_t v90 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
    uint64_t v84 = (uint64_t (**)(char *, uint64_t))(v58 + 88);
    uint64_t v85 = (void (**)(char *, uint64_t, uint64_t))(v58 + 32);
    int v83 = *MEMORY[0x1E4F886D8];
    uint64_t v82 = (void (**)(char *, uint64_t))(v58 + 8);
    ++v60;
    uint64_t v25 = v88;
    uint64_t v57 = v8;
    uint64_t v26 = v63;
    uint64_t v27 = v64;
    uint64_t v28 = v80;
    uint64_t v29 = v89;
    uint64_t v30 = v81;
    uint64_t v31 = v24;
    uint64_t v75 = result;
    uint64_t v72 = v24;
    while (v23 < *(void *)(result + 16))
    {
      uint64_t v32 = *(void *)(v31 + 72);
      uint64_t v88 = v23;
      (*(void (**)(char *, unint64_t, uint64_t))(v31 + 16))(v28, v78 + v32 * v23, v30);
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      uint64_t v33 = (uint64_t)v79;
      if ((*v76)(v79, 1, v27) == 1)
      {
        (*v74)(v28, v30);
        outlined destroy of MediaUserStateCenter?(v33, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
      }
      else
      {
        (*v70)(v29, v33, v27);
        uint64_t v34 = v71;
        (*v69)(v71, v29, v27);
        int v35 = (*v68)(v34, v27);
        if (v35 == v67)
        {
          (*v62)(v34, v27);
          uint64_t v36 = v65;
          (*v61)(v26, v34, v65);
          uint64_t v37 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
          uint64_t v38 = *(void *)(v37 + 16);
          if (v38)
          {
            unint64_t v39 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
            uint64_t v59 = v37;
            unint64_t v40 = v37 + v39;
            uint64_t v41 = *(void *)(v57 + 72);
            id v42 = *(void (**)(char *, unint64_t, uint64_t))(v57 + 16);
            while (1)
            {
              uint64_t v43 = v93;
              v42(v10, v40, v93);
              uint64_t v44 = v94;
              Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
              (*v91)(v10, v43);
              if ((*v90)(v44, 1, v25) == 1)
              {
                outlined destroy of MediaUserStateCenter?(v94, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
              }
              else
              {
                uint64_t v45 = v41;
                uint64_t v46 = v10;
                id v47 = *v85;
                uint64_t v48 = v87;
                (*v85)(v87, v94, v25);
                uint64_t v49 = v86;
                v47(v86, (uint64_t)v48, v25);
                int v50 = (*v84)(v49, v25);
                if (v50 == v83)
                {
                  swift_bridgeObjectRelease();
                  (*v60)(v63, v65);
                  (*v66)(v89, v64);
                  (*v74)(v80, v81);
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, uint64_t))(v58 + 96))(v49, v25);
                  uint64_t v52 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
                  uint64_t v53 = *(void *)(v52 - 8);
                  uint64_t v54 = v56;
                  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v56, v49, v52);
                  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v52);
                }
                (*v82)(v49, v25);
                uint64_t v10 = v46;
                uint64_t v29 = v89;
                uint64_t v41 = v45;
              }
              v40 += v41;
              if (!--v38)
              {
                swift_bridgeObjectRelease();
                uint64_t v36 = v65;
                uint64_t v26 = v63;
                goto LABEL_18;
              }
            }
          }
          swift_bridgeObjectRelease();
LABEL_18:
          (*v60)(v26, v36);
          uint64_t v27 = v64;
          (*v66)(v29, v64);
          (*v74)(v80, v81);
        }
        else
        {
          uint64_t v51 = *v66;
          (*v66)(v89, v27);
          (*v74)(v80, v81);
          v51(v34, v27);
          uint64_t v29 = v89;
        }
      }
      unint64_t v23 = v88 + 1;
      uint64_t v28 = v80;
      uint64_t v30 = v81;
      uint64_t result = v75;
      uint64_t v31 = v72;
      if (v88 + 1 == v73)
      {
        swift_bridgeObjectRelease();
        a1 = v56;
        goto LABEL_22;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_22:
    uint64_t v55 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(a1, 1, 1, v55);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  char *v49;
  int v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (**v60)(char *, uint64_t);
  void (**v61)(char *, char *, uint64_t);
  void (**v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void (**v66)(char *, uint64_t);
  int v67;
  uint64_t (**v68)(char *, uint64_t);
  void (**v69)(char *, char *, uint64_t);
  void (**v70)(char *, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (**v74)(char *, uint64_t);
  uint64_t v75;
  unsigned int (**v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (**v82)(char *, uint64_t);
  int v83;
  uint64_t (**v84)(char *, uint64_t);
  void (**v85)(char *, uint64_t, uint64_t);
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unsigned int (**v90)(uint64_t, uint64_t, uint64_t);
  void (**v91)(char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v94 = (uint64_t)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  uint64_t v58 = *(void *)(v88 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v88);
  uint64_t v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  unint64_t v87 = (char *)&v56 - v7;
  uint64_t v93 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  uint64_t v8 = *(void *)(v93 - 8);
  MEMORY[0x1F4188790](v93);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  uint64_t v60 = *(void (***)(char *, uint64_t))(v65 - 8);
  MEMORY[0x1F4188790](v65);
  id v63 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v79 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
  uint64_t v14 = *(void *)(v64 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v64);
  unint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v89 = (char *)&v56 - v18;
  uint64_t v81 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  uint64_t v19 = *(void *)(v81 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v81);
  id v80 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1CB779280](v20);
  uint64_t v73 = *(void *)(result + 16);
  if (v73)
  {
    uint64_t v71 = v17;
    unint64_t v86 = v6;
    uint64_t v56 = a1;
    unint64_t v23 = 0;
    uint64_t v24 = v19;
    unint64_t v78 = result + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    uint64_t v76 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v77 = v19 + 16;
    uint64_t v70 = (void (**)(char *, uint64_t, uint64_t))(v14 + 32);
    uint64_t v69 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v68 = (uint64_t (**)(char *, uint64_t))(v14 + 88);
    int v67 = *MEMORY[0x1E4F894E8];
    uint64_t v66 = (void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v74 = (void (**)(char *, uint64_t))(v19 + 8);
    int v62 = (void (**)(char *, uint64_t))(v14 + 96);
    os_log_type_t v61 = (void (**)(char *, char *, uint64_t))(v60 + 4);
    uint64_t v91 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v92 = v8 + 16;
    uint64_t v90 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
    uint64_t v84 = (uint64_t (**)(char *, uint64_t))(v58 + 88);
    uint64_t v85 = (void (**)(char *, uint64_t, uint64_t))(v58 + 32);
    int v83 = *MEMORY[0x1E4F886D8];
    uint64_t v82 = (void (**)(char *, uint64_t))(v58 + 8);
    ++v60;
    uint64_t v25 = v88;
    uint64_t v57 = v8;
    uint64_t v26 = v63;
    uint64_t v27 = v64;
    uint64_t v28 = v80;
    uint64_t v29 = v89;
    uint64_t v30 = v81;
    uint64_t v31 = v24;
    uint64_t v75 = result;
    uint64_t v72 = v24;
    while (v23 < *(void *)(result + 16))
    {
      uint64_t v32 = *(void *)(v31 + 72);
      uint64_t v88 = v23;
      (*(void (**)(char *, unint64_t, uint64_t))(v31 + 16))(v28, v78 + v32 * v23, v30);
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      uint64_t v33 = (uint64_t)v79;
      if ((*v76)(v79, 1, v27) == 1)
      {
        (*v74)(v28, v30);
        outlined destroy of MediaUserStateCenter?(v33, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
      }
      else
      {
        (*v70)(v29, v33, v27);
        uint64_t v34 = v71;
        (*v69)(v71, v29, v27);
        int v35 = (*v68)(v34, v27);
        if (v35 == v67)
        {
          (*v62)(v34, v27);
          uint64_t v36 = v65;
          (*v61)(v26, v34, v65);
          uint64_t v37 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
          uint64_t v38 = *(void *)(v37 + 16);
          if (v38)
          {
            unint64_t v39 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
            uint64_t v59 = v37;
            unint64_t v40 = v37 + v39;
            uint64_t v41 = *(void *)(v57 + 72);
            id v42 = *(void (**)(char *, unint64_t, uint64_t))(v57 + 16);
            while (1)
            {
              uint64_t v43 = v93;
              v42(v10, v40, v93);
              uint64_t v44 = v94;
              Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
              (*v91)(v10, v43);
              if ((*v90)(v44, 1, v25) == 1)
              {
                outlined destroy of MediaUserStateCenter?(v94, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
              }
              else
              {
                uint64_t v45 = v41;
                uint64_t v46 = v10;
                id v47 = *v85;
                uint64_t v48 = v87;
                (*v85)(v87, v94, v25);
                uint64_t v49 = v86;
                v47(v86, (uint64_t)v48, v25);
                int v50 = (*v84)(v49, v25);
                if (v50 == v83)
                {
                  swift_bridgeObjectRelease();
                  (*v60)(v63, v65);
                  (*v66)(v89, v64);
                  (*v74)(v80, v81);
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, uint64_t))(v58 + 96))(v49, v25);
                  uint64_t v52 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
                  uint64_t v53 = *(void *)(v52 - 8);
                  uint64_t v54 = v56;
                  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v56, v49, v52);
                  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v52);
                }
                (*v82)(v49, v25);
                uint64_t v10 = v46;
                uint64_t v29 = v89;
                uint64_t v41 = v45;
              }
              v40 += v41;
              if (!--v38)
              {
                swift_bridgeObjectRelease();
                uint64_t v36 = v65;
                uint64_t v26 = v63;
                goto LABEL_18;
              }
            }
          }
          swift_bridgeObjectRelease();
LABEL_18:
          (*v60)(v26, v36);
          uint64_t v27 = v64;
          (*v66)(v29, v64);
          (*v74)(v80, v81);
        }
        else
        {
          uint64_t v51 = *v66;
          (*v66)(v89, v27);
          (*v74)(v80, v81);
          v51(v34, v27);
          uint64_t v29 = v89;
        }
      }
      unint64_t v23 = v88 + 1;
      uint64_t v28 = v80;
      uint64_t v30 = v81;
      uint64_t result = v75;
      uint64_t v31 = v72;
      if (v88 + 1 == v73)
      {
        swift_bridgeObjectRelease();
        a1 = v56;
        goto LABEL_22;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_22:
    uint64_t v55 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(a1, 1, 1, v55);
  }
  return result;
}

uint64_t closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()()
{
  uint64_t v0 = type metadata accessor for Google_Protobuf_Int32Value();
  MEMORY[0x1F4188790](v0);
  Com_Apple_Siri_Product_Proto_PromptContext.previousDomainName.getter();
  Apple_Parsec_Siri_Context_PegasusSemanticValue.label.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.previousNldomainName.getter();
  Apple_Parsec_Siri_Context_PegasusSemanticValue.value.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.domainHints.getter();
  Apple_Parsec_Siri_Context_PromptContext.domainHints.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.alertDomainHints.getter();
  Apple_Parsec_Siri_Context_PromptContext.alertDomainHints.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.backgroundDomainHints.getter();
  Apple_Parsec_Siri_Context_PromptContext.backgroundDomainHints.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.dictationPrompt.getter();
  Apple_Parsec_Siri_Context_PromptContext.dictationPrompt.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.strictPrompt.getter();
  Apple_Parsec_Siri_Context_PromptContext.strictPrompt.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.objectDisambiguation.getter();
  Apple_Parsec_Siri_Context_PromptContext.objectDisambiguation.setter();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_Context_PromptContext and conformance Apple_Parsec_Siri_Context_PromptContext(&lazy protocol witness table cache variable for type Google_Protobuf_Int32Value and conformance Google_Protobuf_Int32Value, MEMORY[0x1E4F70CA0]);
  static Message.with(_:)();
  Apple_Parsec_Siri_Context_PromptContext.ambiguityTarget.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.listenAfterSpeaking.getter();
  Apple_Parsec_Siri_Context_PromptContext.listenAfterSpeaking.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.promptTargetHints.getter();
  return Apple_Parsec_Siri_Context_PromptContext.promptTargetHints.setter();
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_Context_PromptContext and conformance Apple_Parsec_Siri_Context_PromptContext(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()()
{
  return closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()();
}

uint64_t closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()()
{
  uint64_t v0 = type metadata accessor for Google_Protobuf_Int32Value();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Com_Apple_Siri_Product_Proto_PromptContext.ambiguityTarget.getter();
  Google_Protobuf_Int32Value.value.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return Google_Protobuf_Int32Value.value.setter();
}

uint64_t closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_Context_ResponseOptions();
  MEMORY[0x1F4188790](v3);
  if (*(void *)(Com_Apple_Siri_Product_Proto_PromptContext.domainHints.getter() + 16)) {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  Apple_Parsec_Siri_Context_ClientDisplayHints.displayHintsDomain.setter();
  uint64_t v4 = Com_Apple_Siri_Product_Proto_PromptContext.displayHints.getter();
  MEMORY[0x1F4188790](v4);
  *(&v8 - 2) = a2;
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints(), (uint64_t)(&v8 - 4), v4, (uint64_t)v9);
  swift_bridgeObjectRelease();
  uint64_t v6 = MEMORY[0x1CB778960](v5);
  MEMORY[0x1F4188790](v6);
  *(&v8 - 2) = a2;
  lazy protocol witness table accessor for type Apple_Parsec_Siri_Context_PromptContext and conformance Apple_Parsec_Siri_Context_PromptContext(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_ResponseOptions and conformance Apple_Parsec_Siri_Context_ResponseOptions, MEMORY[0x1E4F891B0]);
  static Message.with(_:)();
  return Apple_Parsec_Siri_Context_ClientDisplayHints.responseOptions.setter();
}

uint64_t partial apply for closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1)
{
  return closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(a1, *(void *)(v1 + 16));
}

uint64_t closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = Com_Apple_Siri_Product_Proto_PromptContext.responseOptions.getter();
  _OWORD v6[2] = a2;
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D28_Product_Proto_SemanticValueVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints(), (uint64_t)v6, v3, (uint64_t)v7);
  swift_bridgeObjectRelease();
  return MEMORY[0x1CB778600](v4);
}

uint64_t PegasusProxy.enablePromptContextLogging.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Featuriser.featurise(candidate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 16))(a1, -1, a2, a3);
}

id default argument 0 of PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F4E4E8]);

  return objc_msgSend(v0, sel_init);
}

uint64_t default argument 1 of PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)()
{
  return AFSupportsMultiUser();
}

uint64_t default argument 3 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  type metadata accessor for AppDataProvider();
  uint64_t v0 = swift_allocObject();
  *((void *)&v9 + 1) = &type metadata for PommesSystemAppChecking;
  uint64_t v10 = &protocol witness table for PommesSystemAppChecking;
  *(void *)(v0 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
  outlined init with take of AppDataProviding(&v8, v0 + 16);
  id v1 = objc_msgSend(self, sel_sharedPreferences);
  type metadata accessor for PreferredNavigationAppDataProvider();
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v10 = 0;
  uint64_t v2 = swift_allocObject();
  id v3 = v1;
  uint64_t v4 = swift_retain();
  uint64_t v5 = specialized PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)(v4, (uint64_t)v3, 0, 0, (uint64_t)&v8, v2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  uint64_t v6 = specialized AnyDataProvider.init<A>(provider:)(v5);
  swift_release();

  return v6;
}

uint64_t default argument 4 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  type metadata accessor for AppDataProvider();
  uint64_t v0 = swift_allocObject();
  *((void *)&v4 + 1) = &type metadata for PommesSystemAppChecking;
  uint64_t v5 = &protocol witness table for PommesSystemAppChecking;
  *(void *)(v0 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
  outlined init with take of AppDataProviding(&v3, v0 + 16);
  uint64_t v5 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  uint64_t v1 = specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(v0, 0, 0, (uint64_t)&v3);
  outlined destroy of MediaUserStateCenter?((uint64_t)&v3, &demangling cache variable for type metadata for AppSearchViewProvider?);
  swift_release();
  return v1;
}

uint64_t default argument 6 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  type metadata accessor for MarketplaceInfoDataProvider();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v0);
}

uint64_t default argument 7 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  type metadata accessor for PairedDeviceDataProvider();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v0);
}

uint64_t default argument 10 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  return static SiriEnvironment.default.getter();
}

uint64_t default argument 4 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)()
{
  return default argument 4 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((void (*)(void))type metadata accessor for PegasusInstrumentationUtil);
}

uint64_t default argument 7 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)@<X0>(void *a1@<X8>)
{
  return default argument 7 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((Class *)0x1E4F1B980, (unint64_t *)&lazy cache variable for type metadata for CNContactStore, (uint64_t)&protocol witness table for CNContactStore, a1);
}

unint64_t default argument 0 of DomainWarmup.init(warmupClients:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, DomainWarmupHandling)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9194790;
  *(void *)(inited + 32) = 0x616964656DLL;
  *(void *)(inited + 40) = 0xE500000000000000;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WarmupComponent>);
  uint64_t v1 = type metadata accessor for WarmupComponent();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C91947A0;
  uint64_t v5 = *(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 104);
  v5(v4 + v3, *MEMORY[0x1E4F9FE40], v1);
  uint64_t v6 = type metadata accessor for PluginWarmupHandler();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0xD00000000000002CLL;
  v7[3] = 0x80000001C919C710;
  v7[4] = v4;
  *(void *)(inited + 72) = v6;
  *(void *)(inited + 80) = &protocol witness table for PluginWarmupHandler;
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 88) = 0x7374726F7073;
  *(void *)(inited + 96) = 0xE600000000000000;
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1C91947A0;
  uint64_t v9 = *MEMORY[0x1E4F9FE38];
  v5(v8 + v3, v9, v1);
  uint64_t v10 = (void *)swift_allocObject();
  id v10[2] = 0xD000000000000024;
  v10[3] = 0x80000001C919C740;
  v10[4] = v8;
  *(void *)(inited + 128) = v6;
  *(void *)(inited + 104) = v10;
  *(void *)(inited + 136) = &protocol witness table for PluginWarmupHandler;
  *(void *)(inited + 144) = 0x72656874616577;
  *(void *)(inited + 152) = 0xE700000000000000;
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1C91947A0;
  v5(v11 + v3, v9, v1);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0xD000000000000024;
  uint64_t v12[3] = 0x80000001C919C740;
  v12[4] = v11;
  *(void *)(inited + 184) = v6;
  *(void *)(inited + 192) = &protocol witness table for PluginWarmupHandler;
  *(void *)(inited + 160) = v12;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t default argument 1 of static ProfileSliceResolvingDataProvider.make(mediaUserStateCenter:instrumentationUtil:muxContextManager:)()
{
  return default argument 4 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((void (*)(void))type metadata accessor for ProfileSliceResolutionRequestInstrumentationUtil);
}

uint64_t default argument 0 of PommesSearch.init(remoteSearchClient:domainSearchClients:)()
{
  uint64_t v20 = &type metadata for FeatureFlag;
  uint64_t v21 = (_UNKNOWN **)lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  uint64_t v0 = swift_allocObject();
  v19[0] = v0;
  *(void *)(v0 + 16) = 4;
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(unsigned char *)(v0 + 48) = 3;
  char v1 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  if (v1)
  {
    uint64_t v2 = type metadata accessor for AssistantLocationProvider();
    swift_allocObject();
    uint64_t v3 = AssistantLocationProvider.init(serviceHelper:)(0);
    uint64_t v20 = (ValueMetadata *)v2;
    uint64_t v21 = &protocol witness table for AssistantLocationProvider;
    v19[0] = v3;
  }
  else
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v4 = (void *)static PommesLocationManager.shared;
    uint64_t v20 = (ValueMetadata *)type metadata accessor for PommesLocationManager(0);
    uint64_t v21 = &protocol witness table for PommesLocationManager;
    v19[0] = v4;
    id v5 = v4;
  }
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  uint64_t v6 = SiriEnvironment.networkAvailability.getter();
  swift_release();
  type metadata accessor for AnalyticsComponentIdGenerator();
  uint64_t v7 = swift_allocObject();
  type metadata accessor for PegasusInstrumentationUtil();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = v7;
  id v9 = objc_msgSend(self, sel_processInfo);
  char v10 = NSProcessInfo.isRunningUnitTests.getter();

  if (v10)
  {
    uint64_t v11 = &type metadata for EmptyReferenceResolver;
    unint64_t v12 = lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver();
  }
  else
  {
    uint64_t v11 = (ValueMetadata *)type metadata accessor for ReferenceResolutionClient();
    v18[0] = ReferenceResolutionClient.__allocating_init()();
    unint64_t v12 = MEMORY[0x1E4FA3D98];
  }
  v18[3] = v11;
  v18[4] = v12;
  id v13 = default argument 6 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)();
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_init);
  type metadata accessor for PegasusProxy(0);
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((uint64_t)v19, v6, v8, (uint64_t)v18, (uint64_t)v13, (uint64_t)v14, v15);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v16;
}

id default argument 6 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)()
{
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  outlined init with copy of MediaUserStateCenter?((uint64_t)&v24, (uint64_t)v23);
  type metadata accessor for AmpDataProvider();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = v1;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v23, v0 + 16, &demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[MediaUserState]>);
  swift_allocObject();
  uint64_t v2 = specialized AnyDataProvider.init<A>(provider:)(v0);
  outlined destroy of MediaUserStateCenter?((uint64_t)&v24, &demangling cache variable for type metadata for MediaUserStateCenter?);
  id result = objc_msgSend(self, sel_defaultObserver);
  if (result)
  {
    uint64_t v4 = (uint64_t)result;
    id v5 = (char *)objc_allocWithZone((Class)type metadata accessor for AudioQueueStateManager());
    id v6 = specialized AudioQueueStateManager.init(queueStateObserver:)(v4, v5);
    type metadata accessor for AudioQueueStateDataProvider();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
    swift_allocObject();
    uint64_t v8 = specialized AnyDataProvider.init<A>(provider:)(v7);
    uint64_t v9 = default argument 2 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)();
    uint64_t v10 = default argument 3 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)();
    type metadata accessor for AppDataProvider();
    uint64_t v11 = swift_allocObject();
    *((void *)&v25 + 1) = &type metadata for PommesSystemAppChecking;
    uint64_t v26 = &protocol witness table for PommesSystemAppChecking;
    *(void *)(v11 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
    outlined init with take of AppDataProviding(&v24, v11 + 16);
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v12 = specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(v11, 0, 0, (uint64_t)&v24);
    outlined destroy of MediaUserStateCenter?((uint64_t)&v24, &demangling cache variable for type metadata for AppSearchViewProvider?);
    swift_release();
    type metadata accessor for MarketplaceInfoDataProvider();
    uint64_t v13 = swift_allocObject();
    uint64_t v14 = v13 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
    uint64_t v15 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
    swift_allocObject();
    uint64_t v16 = specialized AnyDataProvider.init<A>(provider:)(v13);
    type metadata accessor for PairedDeviceDataProvider();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = 0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
    swift_allocObject();
    uint64_t v18 = specialized AnyDataProvider.init<A>(provider:)(v17);
    id v19 = objc_msgSend(self, sel_sharedPreferences);
    type metadata accessor for SiriEnvironment();
    uint64_t v20 = static SiriEnvironment.default.getter();
    type metadata accessor for DataProviderManager();
    uint64_t v21 = swift_allocObject();
    uint64_t v22 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(v2, v8, v9, v10, v12, 0, v16, v18, 0, v19, v20, 0, 0, v21);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    return (id)v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t default argument 1 of PommesSearch.init(remoteSearchClient:domainSearchClients:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
}

uint64_t default argument 5 of PommesSearch.init(remoteSearchClient:domainSearchClients:preflightClients:pegasusCacheManager:domainWarmup:muxContextManager:)()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4E4E8]), sel_init);
  char v1 = AFSupportsMultiUser();
  type metadata accessor for PommesMUXContextManager();
  swift_allocObject();
  return PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)((uint64_t)v0, v1);
}

uint64_t default argument 1 of OSSignposter.end(token:message:)()
{
  return 0;
}

uint64_t default argument 2 of OSSignposter.end(name:context:message:)()
{
  return 0;
}

uint64_t default argument 1 of UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)()
{
  return 0;
}

id default argument 0 of PommesSearchService.init(pommesSearch:instrumentationUtil:)()
{
  return PommesSearch.__allocating_init()();
}

uint64_t default argument 1 of PommesSearchService.init(pommesSearch:instrumentationUtil:)()
{
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t default argument 1 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 2 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4F9FE98];
  uint64_t v3 = type metadata accessor for PommesSearchReason();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t default argument 6 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)()
{
  return 0x6867696C66657270;
}

uint64_t default argument 5 of ContactProfileSliceResolver.init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for SiriKitContactResolver();
  a1[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(a1);
  return SiriKitContactResolver.init()();
}

id default argument 6 of ContactProfileSliceResolver.init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1B980]);

  return objc_msgSend(v0, sel_init);
}

uint64_t default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E4F89B48], MEMORY[0x1E4F89B50], a1);
}

uint64_t default argument 0 of VocabularySearchClient.init(spanMatcher:)@<X0>(void *a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_indexMatcher);
  uint64_t result = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SEMSpanMatcher);
  a1[3] = result;
  a1[4] = &protocol witness table for SEMSpanMatcher;
  *a1 = v2;
  return result;
}

id default argument 0 of static AudioQueueStateDataProvider.make(audioQueueStateManager:)()
{
  id result = objc_msgSend(self, sel_defaultObserver);
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    id v2 = (char *)objc_allocWithZone((Class)type metadata accessor for AudioQueueStateManager());
    return specialized AudioQueueStateManager.init(queueStateObserver:)(v1, v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id default argument 0 of AudioQueueStateManager.init(queueStateObserver:)@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(self, sel_defaultObserver);
  if (result)
  {
    id v3 = result;
    id result = (id)type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SOMediaNowPlayingObserver);
    a1[3] = result;
    a1[4] = &protocol witness table for SOMediaNowPlayingObserver;
    *a1 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t default argument 1 of PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CacheHandling)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C91947A0;
  *(void *)(inited + 32) = 0x616964656DLL;
  *(void *)(inited + 40) = 0xE500000000000000;
  uint64_t v1 = type metadata accessor for AudioCacheHandler();
  uint64_t v2 = swift_allocObject();
  *(void *)(inited + 72) = v1;
  *(void *)(inited + 80) = &protocol witness table for AudioCacheHandler;
  *(void *)(inited + 48) = v2;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t default argument 3 of PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)()
{
  return 6;
}

uint64_t default argument 4 of PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)()
{
  return 0;
}

uint64_t default argument 6 of PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)()
{
  return 0;
}

double default argument 0 of PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  id v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  double v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

uint64_t default argument 0 of PegasusCacheManager.secondsSinceLastMaintenanceStarted(from:userDefaults:)()
{
  return Date.init()();
}

id default argument 1 of PegasusCacheManager.updateLastMaintenanceStartedTimestamp(with:userDefaults:)()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  uint64_t v1 = (void *)MEMORY[0x1CB77CA90](0xD000000000000015, 0x80000001C919C770);
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  return v2;
}

uint64_t default argument 0 of PegasusCacheManager.updateLastMaintenanceStartedTimestamp(with:userDefaults:)@<X0>(uint64_t a1@<X8>)
{
  Date.init()();
  uint64_t v2 = type metadata accessor for Date();
  id v3 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 0, 1, v2);
}

uint64_t default argument 0 of OnDeviceSearchInstrumentationUtil.init(analyticsComponentIdGenerator:)()
{
  type metadata accessor for AnalyticsComponentIdGenerator();

  return swift_allocObject();
}

uint64_t default argument 2 of MusicDomain.search(audioUnderstanding:clientSignals:userIds:completion:)()
{
  return MEMORY[0x1E4FBC860];
}

void default argument 0 of AppDataProvider.init(appChecking:)(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for PommesSystemAppChecking;
  *(void *)(a1 + 32) = &protocol witness table for PommesSystemAppChecking;
}

uint64_t default argument 1 of createAMPUserState(mediaUserState:muxUserInfo:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 2 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)()
{
  return 0;
}

uint64_t default argument 3 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 1 of createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E4F89B48], MEMORY[0x1E4F89B50], a1);
}

uint64_t default argument 2 of createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)()
{
  return 0;
}

uint64_t default argument 0 of AppIntentMetadataMapper.init(metadataProvider:)@<X0>(void *a1@<X8>)
{
  return default argument 7 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((Class *)0x1E4F72CE0, &lazy cache variable for type metadata for LNMetadataProvider, (uint64_t)&protocol witness table for LNMetadataProvider, a1);
}

uint64_t default argument 7 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)@<X0>(Class *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v7 = objc_msgSend(objc_allocWithZone(*a1), sel_init);
  uint64_t result = type metadata accessor for CNContactStore(0, a2);
  a4[3] = result;
  a4[4] = a3;
  *a4 = v7;
  return result;
}

uint64_t default argument 2 of Collection<>.merge<A>(with:by:isAscending:)()
{
  return 1;
}

uint64_t default argument 0 of UsoEntity_common_MediaItem.findAll(options:with:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 0 of UsoEntity_common_MediaItem.findFirst(options:with:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 0 of Array<A>.findAll(options:with:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 0 of Array<A>.findFirst(options:with:)()
{
  return MEMORY[0x1E4FBC860];
}

void default argument 2 of static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for RunningBoardForegroundAppProvider;
  *(void *)(a1 + 32) = &protocol witness table for RunningBoardForegroundAppProvider;
}

double default argument 3 of static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t default argument 1 of AssistantDataCache.updateSnapshot(on:onlyIfNeeded:)()
{
  return 0;
}

uint64_t default argument 4 of PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)()
{
  return 0;
}

uint64_t default argument 5 of PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)()
{
  return 0;
}

uint64_t default argument 6 of PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)()
{
  return 0;
}

uint64_t default argument 7 of PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)()
{
  return 0;
}

uint64_t default argument 8 of PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)()
{
  return 0;
}

uint64_t default argument 9 of PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 5 of PommesBridgeResultCandidateState.init(trpCandidateId:tcuId:userId:speechPackage:utterance:started:finished:selected:fallback:hasTTResponse:parseResponse:originalUserInput:rewriteReason:voiceIdClassification:)()
{
  return 0;
}

uint64_t default argument 6 of PommesBridgeResultCandidateState.init(trpCandidateId:tcuId:userId:speechPackage:utterance:started:finished:selected:fallback:hasTTResponse:parseResponse:originalUserInput:rewriteReason:voiceIdClassification:)()
{
  return 0;
}

uint64_t default argument 7 of PommesBridgeResultCandidateState.init(trpCandidateId:tcuId:userId:speechPackage:utterance:started:finished:selected:fallback:hasTTResponse:parseResponse:originalUserInput:rewriteReason:voiceIdClassification:)()
{
  return 0;
}

uint64_t default argument 8 of PommesBridgeResultCandidateState.init(trpCandidateId:tcuId:userId:speechPackage:utterance:started:finished:selected:fallback:hasTTResponse:parseResponse:originalUserInput:rewriteReason:voiceIdClassification:)()
{
  return 0;
}

uint64_t default argument 9 of PommesBridgeResultCandidateState.init(trpCandidateId:tcuId:userId:speechPackage:utterance:started:finished:selected:fallback:hasTTResponse:parseResponse:originalUserInput:rewriteReason:voiceIdClassification:)()
{
  return 0;
}

uint64_t default argument 13 of PommesBridgeResultCandidateState.init(trpCandidateId:tcuId:userId:speechPackage:utterance:started:finished:selected:fallback:hasTTResponse:parseResponse:originalUserInput:rewriteReason:voiceIdClassification:)()
{
  return 0;
}

uint64_t default argument 2 of PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)()
{
  return 0;
}

uint64_t default argument 3 of PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)()
{
  return 0;
}

uint64_t default argument 4 of PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)()
{
  return 0;
}

uint64_t default argument 5 of PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)()
{
  return 0;
}

id default argument 1 of PerformanceUtil.init(analyticsComponentIdGenerator:trialClient:)()
{
  id v0 = objc_msgSend(self, sel_clientWithIdentifier_, 131);

  return v0;
}

uint64_t default argument 1 of ResponseCache.open(directoryPath:flags:)()
{
  return 6;
}

uint64_t default argument 0 of SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)()
{
  return static PegasusProxyForIntelligenceFlow.shared.getter();
}

id default argument 1 of SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  id v3 = (id)static PommesLocationManager.shared;
  a1[3] = type metadata accessor for PommesLocationManager(0);
  a1[4] = &protocol witness table for PommesLocationManager;
  *a1 = v3;

  return v3;
}

uint64_t default argument 3 of SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)()
{
  return default argument 4 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((void (*)(void))type metadata accessor for PegasusInstrumentationUtil);
}

id default argument 4 of SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchToolEmptyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  uint64_t v1 = specialized AnyDataProvider.init<A>(provider:)(v0);
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
  outlined init with copy of MediaUserStateCenter?((uint64_t)v24, (uint64_t)v23);
  type metadata accessor for AmpDataProvider();
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = v3;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v23, v2 + 16, &demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[MediaUserState]>);
  swift_allocObject();
  uint64_t v4 = specialized AnyDataProvider.init<A>(provider:)(v2);
  outlined destroy of MediaUserStateCenter?((uint64_t)v24, &demangling cache variable for type metadata for MediaUserStateCenter?);
  id result = objc_msgSend(self, sel_defaultObserver);
  if (result)
  {
    uint64_t v6 = (uint64_t)result;
    id v7 = (char *)objc_allocWithZone((Class)type metadata accessor for AudioQueueStateManager());
    id v8 = specialized AudioQueueStateManager.init(queueStateObserver:)(v6, v7);
    type metadata accessor for AudioQueueStateDataProvider();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
    swift_allocObject();
    uint64_t v10 = specialized AnyDataProvider.init<A>(provider:)(v9);
    uint64_t v11 = default argument 2 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)();
    uint64_t v12 = default argument 3 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)();
    type metadata accessor for MarketplaceInfoDataProvider();
    uint64_t v13 = swift_allocObject();
    uint64_t v14 = v13 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
    uint64_t v15 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
    swift_allocObject();
    uint64_t v16 = specialized AnyDataProvider.init<A>(provider:)(v13);
    type metadata accessor for PairedDeviceDataProvider();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = 0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
    swift_allocObject();
    uint64_t v18 = specialized AnyDataProvider.init<A>(provider:)(v17);
    id v19 = objc_msgSend(self, sel_sharedPreferences);
    type metadata accessor for SiriEnvironment();
    uint64_t v20 = static SiriEnvironment.default.getter();
    type metadata accessor for DataProviderManager();
    uint64_t v21 = swift_allocObject();
    uint64_t v22 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(v4, v10, v11, v12, v1, 0, v16, v18, 0, v19, v20, 0, 0, v21);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    return (id)v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t default argument 5 of SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:dataProviderManager:contactStore:)@<X0>(void *a1@<X8>)
{
  return default argument 7 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((Class *)0x1E4F1B980, (unint64_t *)&lazy cache variable for type metadata for CNContactStore, (uint64_t)&protocol witness table for CNContactStore, a1);
}

uint64_t default argument 2 of AudioResult.init(itemSource:audioItem:isDownloaded:)()
{
  return 0;
}

uint64_t default argument 2 of PommesLocationInfo.init(location:accuracyAuthorization:locationNeedsUpdateForAccuracy:)()
{
  return 0;
}

uint64_t default argument 1 of AppData.init(applicationIdentifier:supportedIntents:supportedMediaCategories:linkActions:)()
{
  return MEMORY[0x1E4FBC870];
}

uint64_t default argument 2 of AppData.init(applicationIdentifier:supportedIntents:supportedMediaCategories:linkActions:)()
{
  return MEMORY[0x1E4FBC870];
}

uint64_t default argument 3 of AppData.init(applicationIdentifier:supportedIntents:supportedMediaCategories:linkActions:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 3 of PegasusCacheManager.store(siriRequestId:pegasusResponse:pommesResponse:waitFor:completion:)@<X0>(void *a1@<X8>)
{
  *a1 = 5;
  uint64_t v2 = *MEMORY[0x1E4FBCAE0];
  uint64_t v3 = type metadata accessor for DispatchTimeInterval();
  uint64_t v4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t default argument 0 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v4);
  type metadata accessor for AmpDataProvider();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = v1;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v4, v0 + 16, &demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[MediaUserState]>);
  swift_allocObject();
  uint64_t v2 = specialized AnyDataProvider.init<A>(provider:)(v0);
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for MediaUserStateCenter?);
  return v2;
}

id default argument 1 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  id result = objc_msgSend(self, sel_defaultObserver);
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = (char *)objc_allocWithZone((Class)type metadata accessor for AudioQueueStateManager());
    id v3 = specialized AudioQueueStateManager.init(queueStateObserver:)(v1, v2);
    type metadata accessor for AudioQueueStateDataProvider();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
    swift_allocObject();
    return (id)specialized AnyDataProvider.init<A>(provider:)(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t default argument 2 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  uint64_t v0 = type metadata accessor for AppDataProvider();
  uint64_t v1 = swift_allocObject();
  id v8 = &type metadata for PommesSystemAppChecking;
  uint64_t v9 = &protocol witness table for PommesSystemAppChecking;
  *(void *)(v1 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
  outlined init with take of AppDataProviding(&v7, v1 + 16);
  id v8 = (ValueMetadata *)v0;
  uint64_t v9 = &protocol witness table for AppDataProvider;
  *(void *)&long long v7 = v1;
  id v2 = objc_msgSend(self, sel_sharedPreferences);
  outlined init with copy of AppDataProviding((uint64_t)&v7, (uint64_t)v6);
  type metadata accessor for AppInfoDataProvider();
  uint64_t v3 = swift_allocObject();
  outlined init with take of AppDataProviding(v6, v3 + 16);
  *(void *)(v3 + 56) = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  uint64_t v4 = specialized AnyDataProvider.init<A>(provider:)(v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  return v4;
}

void default argument 4 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for PIMSEnablementProvider;
  *(void *)(a1 + 32) = &protocol witness table for PIMSEnablementProvider;
}

id default argument 1 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)@<X0>(void *a1@<X8>)
{
  v7[3] = &type metadata for FeatureFlag;
  v7[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  uint64_t v2 = swift_allocObject();
  v7[0] = v2;
  *(void *)(v2 + 16) = 4;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(unsigned char *)(v2 + 48) = 3;
  char v3 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if (v3)
  {
    uint64_t v4 = type metadata accessor for AssistantLocationProvider();
    swift_allocObject();
    id result = (id)AssistantLocationProvider.init(serviceHelper:)(0);
    a1[3] = v4;
    a1[4] = &protocol witness table for AssistantLocationProvider;
    *a1 = result;
  }
  else
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    id v6 = (id)static PommesLocationManager.shared;
    a1[3] = type metadata accessor for PommesLocationManager(0);
    a1[4] = &protocol witness table for PommesLocationManager;
    *a1 = v6;
    return v6;
  }
  return result;
}

uint64_t default argument 2 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)()
{
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  uint64_t v0 = SiriEnvironment.networkAvailability.getter();
  swift_release();
  return v0;
}

uint64_t default argument 8 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)()
{
  return default argument 4 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((void (*)(void))type metadata accessor for PegasusInstrumentationUtil);
}

uint64_t default argument 4 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(void (*a1)(void))
{
  type metadata accessor for AnalyticsComponentIdGenerator();
  uint64_t v2 = swift_allocObject();
  a1(0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = v2;
  return result;
}

id default argument 9 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)()
{
  id v0 = objc_msgSend(self, sel_sharedPreferences);

  return v0;
}

unint64_t default argument 0 of PlayThisLibraryItemPreflightClient.init(rrClient:)@<X0>(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(self, sel_processInfo);
  char v3 = NSProcessInfo.isRunningUnitTests.getter();

  if (v3)
  {
    uint64_t v4 = &type metadata for EmptyReferenceResolver;
    unint64_t result = lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver();
  }
  else
  {
    uint64_t v4 = (ValueMetadata *)type metadata accessor for ReferenceResolutionClient();
    *a1 = ReferenceResolutionClient.__allocating_init()();
    unint64_t result = MEMORY[0x1E4FA3D98];
  }
  a1[3] = (uint64_t)v4;
  a1[4] = result;
  return result;
}

uint64_t default argument 11 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)@<X0>(void *a1@<X8>)
{
  return default argument 7 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((Class *)0x1E4F1B980, (unint64_t *)&lazy cache variable for type metadata for CNContactStore, (uint64_t)&protocol witness table for CNContactStore, a1);
}

uint64_t default argument 1 of PommesPhoneCallStateManager.cachedIsUserOnPhoneCall(requestId:conservative:)()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyReferenceResolver and conformance EmptyReferenceResolver;
  if (!lazy protocol witness table cache variable for type EmptyReferenceResolver and conformance EmptyReferenceResolver)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyReferenceResolver and conformance EmptyReferenceResolver);
  }
  return result;
}

uint64_t outlined init with copy of MediaUserStateCenter?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MediaUserStateCenter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t default argument 1 of SagePegasusProxy.search(searchRequest:clientEntities:)()
{
  return MEMORY[0x1E4FBC860];
}

void *default argument 2 of MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:)()
{
  return &outlined read-only object #0 of default argument 2 of MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:);
}

uint64_t default argument 3 of MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:)()
{
  return MEMORY[0x1E4FBC870];
}

uint64_t default argument 3 of MusicDomain.search(searchRequest:pegasusResponse:serviceHelper:userIds:completion:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 0 of static AppInfoDataProvider.make(appDataProvider:preferences:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AppDataProvider();
  uint64_t v3 = swift_allocObject();
  id v6 = &type metadata for PommesSystemAppChecking;
  long long v7 = &protocol witness table for PommesSystemAppChecking;
  *(void *)(v3 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
  uint64_t result = outlined init with take of AppDataProviding(&v5, v3 + 16);
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for AppDataProvider;
  *a1 = v3;
  return result;
}

uint64_t default argument 2 of SageSearchRequestProcessor.init(remoteClient:pommesSearchRequest:clientEntities:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 15 of AudioQuery.init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E4F89458], MEMORY[0x1E4F89478], a1);
}

uint64_t default argument 16 of AudioQuery.init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E4F88C48], MEMORY[0x1E4F88C68], a1);
}

uint64_t default argument 17 of AudioQuery.init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E4F88C78], MEMORY[0x1E4F88C80], a1);
}

uint64_t default argument 18 of AudioQuery.init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E4F88BF0], MEMORY[0x1E4F88BF8], a1);
}

uint64_t default argument 21 of AudioQuery.init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)()
{
  return 0;
}

uint64_t default argument 22 of AudioQuery.init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)()
{
  return 0;
}

uint64_t default argument 9 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)()
{
  return 1;
}

uint64_t default argument 0 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t default argument 1 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E4F89458], MEMORY[0x1E4F89478], a1);
}

uint64_t default argument 2 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E4F88C48], MEMORY[0x1E4F88C68], a1);
}

uint64_t default argument 3 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E4F88C78], MEMORY[0x1E4F88C80], a1);
}

uint64_t default argument 4 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E4F88BF0], MEMORY[0x1E4F88BF8], a1);
}

uint64_t default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)@<X0>(unsigned int *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a2(0);
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a3, v4, v5);
}

uint64_t default argument 7 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)()
{
  return 0;
}

uint64_t default argument 8 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)()
{
  return 0;
}

uint64_t default argument 1 of static AudioQuery.makeNormalQuery(audioExperience:mode:)()
{
  return 0;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance NSStringCompareOptions(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void protocol witness for SetAlgebra.init() in conformance LSApplicationEnumerationOptions(void *a1@<X8>)
{
  *a1 = 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RBSTaskState(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance ICSubscriptionStatusOfferType(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance ICSubscriptionStatusOfferType(a1, a2, MEMORY[0x1F418C0F0]);
}

id protocol witness for _BridgedStoredNSError._nsError.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return *v0;
}

uint64_t protocol witness for _BridgedStoredNSError.init(_nsError:) in conformance related decl 'e' for AFLocationServiceErrorCode@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return Error<>._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return Error<>._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return _BridgedStoredNSError._getEmbeddedNSError()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LNSystemProtocolIdentifier(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance ICSubscriptionStatusOfferType(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance ICSubscriptionStatusOfferType(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance ICSubscriptionStatusOfferType(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance ICSubscriptionStatusOfferType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = MEMORY[0x1CB77CA90](v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance KVFieldType@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LSDeveloperType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance KVFieldType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance KVFieldType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KVFieldType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLClientLocationReferenceFrame(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MCRestrictedBoolType(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance AFCallState@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return _BridgedStoredNSError.errorUserInfo.getter();
}

uint64_t protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance related decl 'e' for AFLocationServiceErrorCode(void *a1)
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
  id v2 = a1;
  return _BridgedStoredNSError.init(_bridgedNSError:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return _BridgedStoredNSError.hash(into:)();
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance related decl 'e' for CLError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance related decl 'e' for CLError()
{
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance related decl 'e' for CLError()
{
  return _BridgedStoredNSError.errorUserInfo.getter();
}

uint64_t protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance related decl 'e' for CLError(void *a1)
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, type metadata accessor for related decl 'e' for CLError);
  id v2 = a1;
  return _BridgedStoredNSError.init(_bridgedNSError:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance related decl 'e' for CLError()
{
  return _BridgedStoredNSError.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return Hasher._finalize()();
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AFCallState(void *a1@<X8>)
{
  *a1 = *v1;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance AFCallState@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance AFCallState(void *result)
{
  *v1 &= *result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance AFCallState(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance AFCallState(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance ICSubscriptionStatusOfferType(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType, type metadata accessor for ICSubscriptionStatusOfferType);
  uint64_t v3 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType, type metadata accessor for ICSubscriptionStatusOfferType);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return static _BridgedStoredNSError.== infix(_:_:)() & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ICSubscriptionStatusOfferType@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1CB77CA90](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LNSystemProtocolIdentifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LNSystemProtocolIdentifier(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
  uint64_t v3 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t protocol witness for Error._domain.getter in conformance related decl 'e' for CLError()
{
  return Error<>._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance related decl 'e' for CLError()
{
  return Error<>._code.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance related decl 'e' for CLError()
{
  return _BridgedStoredNSError._getEmbeddedNSError()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance related decl 'e' for CLError()
{
  return static _BridgedStoredNSError.== infix(_:_:)() & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AFCallState(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance ICSubscriptionStatusOfferType(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LNSystemProtocolIdentifier()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LNSystemProtocolIdentifier()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LNSystemProtocolIdentifier()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a6 + 40) = type metadata accessor for AppDataProvider();
  *(void *)(a6 + 48) = &protocol witness table for AppDataProvider;
  *(void *)(a6 + 16) = a1;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(void *)(a6 + 56) = a2;
  *(void *)(a6 + 64) = a3;
  *(void *)(a6 + 72) = a4;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a5, a6 + 80, &demangling cache variable for type metadata for ForegroundAppProvider?);
  swift_endAccess();
  return a6;
}

uint64_t sub_1C8FEE720()
{
  outlined consume of FeatureFlag(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x1F4186498](v0, 49, 7);
}

uint64_t dispatch thunk of Featuriser.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Featuriser.featurise(candidate:rankedSlotIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

void type metadata accessor for KVFieldType(uint64_t a1)
{
}

void type metadata accessor for AFUserIdentityClassfication(uint64_t a1)
{
}

void type metadata accessor for MPMediaEntityType(uint64_t a1)
{
}

void type metadata accessor for AFMediaPlaybackState(uint64_t a1)
{
}

void type metadata accessor for AFLocationAuthorizationStyle(uint64_t a1)
{
}

void type metadata accessor for LNSystemProtocolIdentifier(uint64_t a1)
{
}

void type metadata accessor for ICSubscriptionStatusOfferType(uint64_t a1)
{
}

void type metadata accessor for POMMESSchemaPOMMESCacheInvalidationStartedReason(uint64_t a1)
{
}

uint64_t base witness table accessor for RawRepresentable in ICSubscriptionStatusOfferType()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType, type metadata accessor for ICSubscriptionStatusOfferType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in ICSubscriptionStatusOfferType()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType, type metadata accessor for ICSubscriptionStatusOfferType);
}

uint64_t lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in ICSubscriptionStatusOfferType()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType, type metadata accessor for ICSubscriptionStatusOfferType);
}

uint64_t base witness table accessor for RawRepresentable in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
}

uint64_t base witness table accessor for Equatable in CLAccuracyAuthorization()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type CLAccuracyAuthorization and conformance CLAccuracyAuthorization, type metadata accessor for CLAccuracyAuthorization);
}

uint64_t base witness table accessor for Equatable in KVFieldType()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type KVFieldType and conformance KVFieldType, type metadata accessor for KVFieldType);
}

uint64_t base witness table accessor for Equatable in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, type metadata accessor for LNSystemProtocolIdentifier);
}

void type metadata accessor for CFNotificationName(uint64_t a1)
{
}

void type metadata accessor for CFNotificationCenterRef(uint64_t a1)
{
}

void type metadata accessor for INMediaSortOrder(uint64_t a1)
{
}

void type metadata accessor for INMediaItemType(uint64_t a1)
{
}

void type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for GEOLocationCoordinate2D(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GEOLocationCoordinate2D(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for GEOLocationCoordinate2D(uint64_t a1)
{
}

void type metadata accessor for related decl 'e' for CLError(uint64_t a1)
{
}

uint64_t base witness table accessor for Equatable in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, type metadata accessor for related decl 'e' for CLError);
}

uint64_t base witness table accessor for Error in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, type metadata accessor for related decl 'e' for CLError);
}

uint64_t base witness table accessor for Equatable in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for Error in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for CustomNSError in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for _ObjectiveCBridgeableError in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for Hashable in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : _ErrorCodeProtocol in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type AFLocationServiceErrorCode and conformance AFLocationServiceErrorCode, type metadata accessor for AFLocationServiceErrorCode);
}

void type metadata accessor for AFLocationServiceErrorCode(uint64_t a1)
{
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : RawRepresentable in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type AFLocationServiceErrorCode and conformance AFLocationServiceErrorCode, type metadata accessor for AFLocationServiceErrorCode);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type AFLocationServiceErrorCode and conformance AFLocationServiceErrorCode, type metadata accessor for AFLocationServiceErrorCode);
}

uint64_t associated type witness table accessor for _ErrorCodeProtocol._ErrorType : _BridgedStoredNSError in AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, type metadata accessor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for CustomNSError in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, type metadata accessor for related decl 'e' for CLError);
}

uint64_t base witness table accessor for _ObjectiveCBridgeableError in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, type metadata accessor for related decl 'e' for CLError);
}

uint64_t base witness table accessor for Hashable in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, type metadata accessor for related decl 'e' for CLError);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : _ErrorCodeProtocol in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type CLError and conformance CLError, type metadata accessor for CLError);
}

void type metadata accessor for CLError(uint64_t a1)
{
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : RawRepresentable in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type CLError and conformance CLError, type metadata accessor for CLError);
}

uint64_t base witness table accessor for Equatable in CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type CLError and conformance CLError, type metadata accessor for CLError);
}

uint64_t associated type witness table accessor for _ErrorCodeProtocol._ErrorType : _BridgedStoredNSError in CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, type metadata accessor for related decl 'e' for CLError);
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
}

void type metadata accessor for KVFieldType(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void ParkingLocationProfileSliceResolver.resolutionSucceeded.setter()
{
}

id PommesSearchError.underlyingError.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

uint64_t PommesSearchError.searchReason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PommesSearchError(0) + 20);
  uint64_t v4 = type metadata accessor for PommesSearchReason();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t PommesSearchError.init(underlyingError:searchReason:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for PommesSearchError(0) + 20);
  uint64_t v5 = type metadata accessor for PommesSearchReason();
  id v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v6(v4, a2, v5);
}

uint64_t protocol witness for Error._domain.getter in conformance PommesSearchError()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance PommesSearchError()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance PommesSearchError()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t PommesSearchEagerInfo.searchReason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PommesSearchReason();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t PommesSearchEagerInfo.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4F9FE98];
  uint64_t v3 = type metadata accessor for PommesSearchReason();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t PommesSearchEagerInfo.init(searchReason:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PommesSearchReason();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t PommesSearch.preflightClients.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesSearch.remoteSearchClient.getter()
{
  return swift_retain();
}

uint64_t PommesSearch.localSearchClients.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesSearch.pegasusCacheManager.getter()
{
  return swift_retain();
}

uint64_t PommesSearch.muxContextManager.getter()
{
  return swift_retain();
}

uint64_t PommesSearch.domainWarmup.getter()
{
  return swift_retain();
}

uint64_t PommesSearch.requestInstrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t PommesSearch.serverFallbackPreferences.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of AppDataProviding(v1 + 72, a1);
}

uint64_t PommesSearch.serverFallbackPreferences.setter(long long *a1)
{
  uint64_t v3 = v1 + 72;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of AppDataProviding(a1, v3);
  return swift_endAccess();
}

uint64_t (*PommesSearch.serverFallbackPreferences.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

unint64_t static PommesSearch.UserDefaultsSuiteName.getter()
{
  return 0xD000000000000015;
}

uint64_t PommesSearch.hasCompletedInitialPrepare.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 112);
}

id PommesSearch.__allocating_init()()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4E4E8]), sel_init);
  char v1 = AFSupportsMultiUser();
  type metadata accessor for PommesMUXContextManager();
  swift_allocObject();
  uint64_t v2 = PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)((uint64_t)v0, v1);
  uint64_t v57 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  outlined init with copy of MediaUserStateCenter?((uint64_t)&v55, (uint64_t)v54, &demangling cache variable for type metadata for MediaUserStateCenter?);
  type metadata accessor for AmpDataProvider();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = v4;
  swift_beginAccess();
  uint64_t v52 = v2;
  swift_retain();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v54, v3 + 16, &demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[MediaUserState]>);
  swift_allocObject();
  uint64_t v5 = specialized AnyDataProvider.init<A>(provider:)(v3);
  outlined destroy of MediaUserStateCenter?((uint64_t)&v55, &demangling cache variable for type metadata for MediaUserStateCenter?);
  id result = objc_msgSend(self, sel_defaultObserver);
  if (result)
  {
    uint64_t v7 = (uint64_t)result;
    id v8 = (char *)objc_allocWithZone((Class)type metadata accessor for AudioQueueStateManager());
    id v9 = specialized AudioQueueStateManager.init(queueStateObserver:)(v7, v8);
    type metadata accessor for AudioQueueStateDataProvider();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
    swift_allocObject();
    uint64_t v11 = specialized AnyDataProvider.init<A>(provider:)(v10);
    uint64_t v12 = default argument 2 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)();
    uint64_t v13 = default argument 3 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)();
    type metadata accessor for AppDataProvider();
    uint64_t v14 = swift_allocObject();
    *((void *)&v56 + 1) = &type metadata for PommesSystemAppChecking;
    uint64_t v57 = &protocol witness table for PommesSystemAppChecking;
    *(void *)(v14 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
    outlined init with take of AppDataProviding(&v55, v14 + 16);
    uint64_t v57 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    uint64_t v15 = specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(v14, 0, 0, (uint64_t)&v55);
    outlined destroy of MediaUserStateCenter?((uint64_t)&v55, &demangling cache variable for type metadata for AppSearchViewProvider?);
    swift_release();
    type metadata accessor for MarketplaceInfoDataProvider();
    uint64_t v16 = swift_allocObject();
    uint64_t v17 = v16 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
    uint64_t v18 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
    swift_allocObject();
    uint64_t v19 = specialized AnyDataProvider.init<A>(provider:)(v16);
    type metadata accessor for PairedDeviceDataProvider();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = 0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
    swift_allocObject();
    uint64_t v21 = specialized AnyDataProvider.init<A>(provider:)(v20);
    id v51 = objc_msgSend(self, sel_sharedPreferences);
    type metadata accessor for SiriEnvironment();
    uint64_t v22 = static SiriEnvironment.default.getter();
    type metadata accessor for DataProviderManager();
    uint64_t v23 = swift_allocObject();
    uint64_t v24 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(v5, v11, v12, v13, v15, 0, v19, v21, v52, v51, v22, 0, 0, v23);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v25 = v24;
    swift_release();

    swift_release();
    static SiriEnvironment.default.getter();
    uint64_t v26 = SiriEnvironment.networkAvailability.getter();
    swift_release();
    *((void *)&v56 + 1) = &type metadata for FeatureFlag;
    uint64_t v57 = (_UNKNOWN **)lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
    uint64_t v27 = swift_allocObject();
    *(void *)&long long v55 = v27;
    *(void *)(v27 + 16) = 4;
    *(void *)(v27 + 24) = 0;
    *(void *)(v27 + 32) = 0;
    *(void *)(v27 + 40) = 0;
    *(unsigned char *)(v27 + 48) = 3;
    swift_retain();
    swift_retain();
    LOBYTE(v24) = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    if (v24)
    {
      uint64_t v28 = type metadata accessor for AssistantLocationProvider();
      swift_allocObject();
      uint64_t v29 = AssistantLocationProvider.init(serviceHelper:)(0);
      *((void *)&v56 + 1) = v28;
      uint64_t v57 = &protocol witness table for AssistantLocationProvider;
      *(void *)&long long v55 = v29;
    }
    else
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      uint64_t v30 = (void *)static PommesLocationManager.shared;
      *((void *)&v56 + 1) = type metadata accessor for PommesLocationManager(0);
      uint64_t v57 = &protocol witness table for PommesLocationManager;
      *(void *)&long long v55 = v30;
      id v31 = v30;
    }
    type metadata accessor for AnalyticsComponentIdGenerator();
    uint64_t v32 = swift_allocObject();
    type metadata accessor for PegasusInstrumentationUtil();
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = 0;
    *(void *)(v33 + 24) = v32;
    id v34 = objc_msgSend(self, sel_processInfo);
    LOBYTE(v32) = NSProcessInfo.isRunningUnitTests.getter();

    if (v32)
    {
      int v35 = &type metadata for EmptyReferenceResolver;
      unint64_t v36 = lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver();
    }
    else
    {
      int v35 = (ValueMetadata *)type metadata accessor for ReferenceResolutionClient();
      v54[0] = ReferenceResolutionClient.__allocating_init()();
      unint64_t v36 = MEMORY[0x1E4FA3D98];
    }
    v54[3] = v35;
    v54[4] = v36;
    id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_init);
    type metadata accessor for PegasusProxy(0);
    uint64_t v38 = swift_allocObject();
    uint64_t v39 = specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((uint64_t)&v55, v26, v33, (uint64_t)v54, v25, (uint64_t)v37, v38);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(LocalDomainTypes, LocalDomainSearch)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C91947A0;
    *(unsigned char *)(inited + 32) = 1;
    id v41 = objc_msgSend(self, sel_indexMatcher);
    uint64_t v42 = type metadata accessor for MusicDomain();
    uint64_t v43 = swift_allocObject();
    uint64_t v44 = specialized MusicDomain.init(spanMatcher:)((uint64_t)v41, v43);
    *(void *)(inited + 64) = v42;
    *(void *)(inited + 72) = &protocol witness table for MusicDomain;
    *(void *)(inited + 40) = v44;
    unint64_t v45 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    uint64_t v46 = specialized static PommesSearch.defaultPreflightClients(dataProviderManager:networkAvailabilityProvider:)(v25, v26);
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v47 = static PegasusCacheManager.shared;
    swift_retain();
    unint64_t v48 = default argument 0 of DomainWarmup.init(warmupClients:)();
    type metadata accessor for DomainWarmup();
    swift_allocObject();
    uint64_t v49 = DomainWarmup.init(warmupClients:)(v48);
    uint64_t v50 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, void *, uint64_t))(v53 + 208))(v39, v45, v46, v47, v49, v52);
    swift_release();
    swift_release();
    return (id)v50;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (textMatchScore: Float, itemTypeMatchScore: Float)>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    id v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    BOOL v12 = (void *)(v2[7] + 16 * result);
    *BOOL v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    uint64_t v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, CacheHandling>, (uint64_t *)&demangling cache variable for type metadata for (String, CacheHandling), (uint64_t (*)(uint64_t *, unint64_t))outlined init with take of AppDataProviding);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, DomainWarmupHandling>, &demangling cache variable for type metadata for (String, DomainWarmupHandling), (uint64_t (*)(uint64_t *, unint64_t))outlined init with take of AppDataProviding);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [WarmupComponent]>);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13[8];
  long long v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<LocalDomainTypes, LocalDomainSearch>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v6, (uint64_t)v13, &demangling cache variable for type metadata for (LocalDomainTypes, LocalDomainSearch));
    uint64_t v7 = v13[0];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13[0]);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v7;
    unint64_t result = outlined init with take of AppDataProviding(&v14, v3[7] + 40 * result);
    uint64_t v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    _OWORD v3[2] = v12;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for (String, Siri_Nlu_External_Span), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Siri_Nlu_External_Span>, MEMORY[0x1E4FA2750]);
}

{
  void *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Float>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_DWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(_DWORD *)(v2[7] + 4 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 6;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<DeviceClass>>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  id v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v24 = a1;
  uint64_t v25 = v9;
  uint64_t v10 = v6 + 64;
  uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  BOOL v12 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v11, (uint64_t)v5, &demangling cache variable for type metadata for (String, (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)));
    uint64_t v13 = *v5;
    uint64_t v14 = v5[1];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v14);
    if (v16) {
      break;
    }
    uint64_t v17 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = (uint64_t *)(v7[6] + 16 * result);
    *uint64_t v18 = v13;
    v18[1] = v14;
    uint64_t v19 = v7[7];
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    unint64_t result = outlined init with take of PommesSearchReason?(v25, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v17, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    uint64_t v21 = v7[2];
    uint64_t v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v11 += v12;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [[String : String]]>);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v6, (uint64_t)&v15, (uint64_t *)&demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    id v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    BOOL v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    _OWORD v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_RequestedMediaType, Set<Apple_Parsec_Siri_V2alpha_AudioItemType>));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_RequestedMediaType, Set<Apple_Parsec_Siri_V2alpha_AudioItemType>>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  id v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  BOOL v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_RequestedMediaType, Set<Apple_Parsec_Siri_V2alpha_AudioItemType>));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType>, MEMORY[0x1E4F89778]);
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<OnScreenContextType, String>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((unsigned char *)v4 - 16);
    uint64_t v7 = *(v4 - 1);
    uint64_t v6 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    uint64_t v10 = (void *)(v2[7] + 16 * result);
    *uint64_t v10 = v7;
    v10[1] = v6;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CommonAudio.Decade>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CommonAudio.Decade, Int>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *((unsigned char *)v4 - 8);
    uint64_t v6 = *v4;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    *(void *)(v2[7] + 8 * result) = v6;
    char v9 = v2[2];
    uint64_t v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v11;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CommonAudio.Sort, INMediaSortOrder>, (uint64_t (*)(void))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues, CommonAudio.MediaType?));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UsoEntity_common_MediaItemType.DefinedValues, CommonAudio.MediaType?>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  id v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  BOOL v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues, CommonAudio.MediaType?));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(unsigned char *)(v7[7] + v16) = v5[v9];
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CommonAudio.MediaType, INMediaItemType>, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  void *v2;
  uint64_t v3;
  _OWORD *v4;
  id v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  long long v11;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LNSystemProtocolIdentifier, (_:)>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 40);
  while (1)
  {
    uint64_t v11 = *v4;
    uint64_t v5 = *((id *)v4 - 1);
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v7) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v5;
    *(_OWORD *)(v2[7] + 16 * result) = v11;
    id v8 = v2[2];
    char v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      goto LABEL_11;
    }
    v2[2] = v10;
    uint64_t v4 = (_OWORD *)((char *)v4 + 24);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata>, MEMORY[0x1E4F89870]);
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSDictionary>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    BOOL v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, DispatchTimeoutResult>);
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, DomainAffinityKVStore>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String : Float]>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_AudioItemType, Float));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_AudioItemType, Float>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  id v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  BOOL v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_AudioItemType, Float));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v15) {
      break;
    }
    uint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(_DWORD *)(v7[7] + 4 * v16) = *(_DWORD *)&v5[v9];
    uint64_t v19 = v7[2];
    uint64_t v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OnScreenContextType, [String]>);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *((unsigned char *)v4 - 8);
    uint64_t v6 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    *(void *)(v2[7] + 8 * result) = v6;
    char v9 = v2[2];
    uint64_t v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType>, MEMORY[0x1E4F88670]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory), &demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory>, MEMORY[0x1E4F886B0]);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, unint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    id v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  id v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v11, (uint64_t)&v20, a3);
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
    if (v15) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = (uint64_t *)(v8[6] + 16 * result);
    uint64_t *v16 = v12;
    v16[1] = v13;
    unint64_t result = a4(&v22, v8[7] + 40 * result);
    uint64_t v17 = v8[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v8[2] = v19;
    v11 += 56;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v30 = a4;
  id v31 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (void *)((char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  uint64_t v13 = (char *)v9 + *(int *)(v6 + 48);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v29[1] = a1;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = *(void *)(v7 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v16, (uint64_t)v9, v31);
    uint64_t v18 = *v9;
    uint64_t v19 = v9[1];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v9, v19);
    if (v21) {
      break;
    }
    unint64_t v22 = result;
    *(void *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v23 = (uint64_t *)(v11[6] + 16 * result);
    *uint64_t v23 = v18;
    v23[1] = v19;
    uint64_t v24 = v11[7];
    uint64_t v25 = v30(0);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v24 + *(void *)(*(void *)(v25 - 8) + 72) * v22, v13, v25);
    uint64_t v26 = v11[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_11;
    }
    void v11[2] = v28;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v5 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  uint64_t v7 = (void *)(a1 + 40);
  while (1)
  {
    unsigned __int8 v8 = *((unsigned char *)v7 - 8);
    uint64_t v9 = *v7;
    unint64_t result = a3(v8);
    if (v11) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v5[6] + result) = v8;
    *(void *)(v5[7] + 8 * result) = v9;
    uint64_t v12 = v5[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v7 += 2;
    _OWORD v5[2] = v14;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *((void *)v5 - 2);
    uint64_t v7 = *((void *)v5 - 1);
    char v8 = *v5;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = (uint64_t *)(v3[6] + 16 * result);
    *char v11 = v6;
    v11[1] = v7;
    *(unsigned char *)(v3[7] + result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v5 += 24;
    _OWORD v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    char v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = (uint64_t *)(v3[6] + 16 * result);
    *char v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    _OWORD v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t static PommesSearch.pommesSearchForSistoolFactory()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  uint64_t v3 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v64 - v4;
  uint64_t v77 = 0;
  long long v75 = 0u;
  long long v76 = 0u;
  outlined init with copy of MediaUserStateCenter?((uint64_t)&v75, (uint64_t)&v72, &demangling cache variable for type metadata for MediaUserStateCenter?);
  type metadata accessor for AmpDataProvider();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 56) = v7;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)&v72, v6 + 16, &demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[MediaUserState]>);
  swift_allocObject();
  uint64_t v71 = specialized AnyDataProvider.init<A>(provider:)(v6);
  outlined destroy of MediaUserStateCenter?((uint64_t)&v75, &demangling cache variable for type metadata for MediaUserStateCenter?);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  v9(v5, 1, 1, v8);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v3, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DummyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = v10 + *(void *)(*(void *)v10 + 88);
  v9((char *)v11, 1, 1, v8);
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v3, v11, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
  swift_allocObject();
  uint64_t v69 = specialized AnyDataProvider.init<A>(provider:)(v10);
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  uint64_t v12 = type metadata accessor for AppDataProvider();
  uint64_t v13 = swift_allocObject();
  *((void *)&v76 + 1) = &type metadata for PommesSystemAppChecking;
  uint64_t v77 = &protocol witness table for PommesSystemAppChecking;
  *(void *)(v13 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
  outlined init with take of AppDataProviding(&v75, v13 + 16);
  *((void *)&v76 + 1) = v12;
  uint64_t v77 = &protocol witness table for AppDataProvider;
  *(void *)&long long v75 = v13;
  uint64_t v14 = self;
  id v15 = objc_msgSend(v14, sel_sharedPreferences);
  outlined init with copy of AppDataProviding((uint64_t)&v75, (uint64_t)&v72);
  type metadata accessor for AppInfoDataProvider();
  uint64_t v16 = swift_allocObject();
  outlined init with take of AppDataProviding(&v72, v16 + 16);
  *(void *)(v16 + 56) = v15;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  uint64_t v67 = specialized AnyDataProvider.init<A>(provider:)(v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
  uint64_t v17 = type metadata accessor for AnalyticsComponentIdGenerator();
  long long v75 = 0u;
  long long v76 = 0u;
  uint64_t v77 = 0;
  uint64_t v70 = v17;
  uint64_t v18 = swift_allocObject();
  type metadata accessor for ProfileSliceResolutionRequestInstrumentationUtil();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  *(void *)(v19 + 24) = v18;
  uint64_t v68 = specialized static ProfileSliceResolvingDataProvider.make(mediaUserStateCenter:instrumentationUtil:muxContextManager:)((uint64_t)&v75, v19, 0);
  swift_release();
  outlined destroy of MediaUserStateCenter?((uint64_t)&v75, &demangling cache variable for type metadata for MediaUserStateCenter?);
  uint64_t v20 = default argument 3 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)();
  uint64_t v21 = swift_allocObject();
  *((void *)&v76 + 1) = &type metadata for PommesSystemAppChecking;
  uint64_t v77 = &protocol witness table for PommesSystemAppChecking;
  *(void *)(v21 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F72CE0]), sel_init);
  outlined init with take of AppDataProviding(&v75, v21 + 16);
  uint64_t v77 = 0;
  long long v75 = 0u;
  long long v76 = 0u;
  uint64_t v22 = specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(v21, 0, 0, (uint64_t)&v75);
  outlined destroy of MediaUserStateCenter?((uint64_t)&v75, &demangling cache variable for type metadata for AppSearchViewProvider?);
  swift_release();
  type metadata accessor for MarketplaceInfoDataProvider();
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v23 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  uint64_t v25 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
  swift_allocObject();
  uint64_t v26 = specialized AnyDataProvider.init<A>(provider:)(v23);
  type metadata accessor for PairedDeviceDataProvider();
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
  swift_allocObject();
  uint64_t v28 = specialized AnyDataProvider.init<A>(provider:)(v27);
  id v29 = objc_msgSend(v14, sel_sharedPreferences);
  id v65 = v29;
  uint64_t v66 = type metadata accessor for SiriEnvironment();
  uint64_t v30 = static SiriEnvironment.default.getter();
  type metadata accessor for DataProviderManager();
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(v71, v69, v67, v20, v22, v68, v26, v28, 0, v29, v30, 0, 0, v31);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  static SiriEnvironment.default.getter();
  uint64_t v33 = SiriEnvironment.networkAvailability.getter();
  swift_release();
  *((void *)&v76 + 1) = &type metadata for FeatureFlag;
  uint64_t v77 = (_UNKNOWN **)lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  uint64_t v34 = swift_allocObject();
  *(void *)&long long v75 = v34;
  *(void *)(v34 + 16) = 4;
  *(void *)(v34 + 24) = 0;
  *(void *)(v34 + 32) = 0;
  *(void *)(v34 + 40) = 0;
  *(unsigned char *)(v34 + 48) = 3;
  swift_retain();
  LOBYTE(v30) = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
  if (v30)
  {
    uint64_t v35 = type metadata accessor for AssistantLocationProvider();
    swift_allocObject();
    uint64_t v36 = AssistantLocationProvider.init(serviceHelper:)(0);
    *((void *)&v76 + 1) = v35;
    uint64_t v77 = &protocol witness table for AssistantLocationProvider;
    *(void *)&long long v75 = v36;
  }
  else
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    id v37 = (void *)static PommesLocationManager.shared;
    *((void *)&v76 + 1) = type metadata accessor for PommesLocationManager(0);
    uint64_t v77 = &protocol witness table for PommesLocationManager;
    *(void *)&long long v75 = v37;
    id v38 = v37;
  }
  static SiriEnvironment.default.getter();
  uint64_t v39 = SiriEnvironment.networkAvailability.getter();
  swift_release();
  uint64_t v40 = swift_allocObject();
  type metadata accessor for PegasusInstrumentationUtil();
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = 0;
  *(void *)(v41 + 24) = v40;
  id v42 = objc_msgSend(self, sel_processInfo);
  char v43 = NSProcessInfo.isRunningUnitTests.getter();

  if (v43)
  {
    uint64_t v44 = &type metadata for EmptyReferenceResolver;
    unint64_t v45 = lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver();
  }
  else
  {
    uint64_t v44 = (ValueMetadata *)type metadata accessor for ReferenceResolutionClient();
    *(void *)&long long v72 = ReferenceResolutionClient.__allocating_init()();
    unint64_t v45 = MEMORY[0x1E4FA3D98];
  }
  uint64_t v73 = v44;
  unint64_t v74 = v45;
  id v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_init);
  type metadata accessor for PegasusProxy(0);
  uint64_t v47 = swift_allocObject();
  uint64_t v48 = specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((uint64_t)&v75, v39, v41, (uint64_t)&v72, v32, (uint64_t)v46, v47);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(LocalDomainTypes, LocalDomainSearch)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C91947A0;
  *(unsigned char *)(inited + 32) = 1;
  id v50 = objc_msgSend(self, sel_indexMatcher);
  uint64_t v51 = type metadata accessor for MusicDomain();
  uint64_t v52 = swift_allocObject();
  uint64_t v53 = specialized MusicDomain.init(spanMatcher:)((uint64_t)v50, v52);
  *(void *)(inited + 64) = v51;
  *(void *)(inited + 72) = &protocol witness table for MusicDomain;
  *(void *)(inited + 40) = v53;
  unint64_t v54 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v55 = specialized static PommesSearch.defaultPreflightClients(dataProviderManager:networkAvailabilityProvider:)(v32, v33);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v56 = static PegasusCacheManager.shared;
  swift_retain();
  unint64_t v57 = default argument 0 of DomainWarmup.init(warmupClients:)();
  type metadata accessor for DomainWarmup();
  swift_allocObject();
  uint64_t v58 = DomainWarmup.init(warmupClients:)(v57);
  id v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4E4E8]), sel_init);
  char v60 = AFSupportsMultiUser();
  type metadata accessor for PommesMUXContextManager();
  swift_allocObject();
  uint64_t v61 = PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)((uint64_t)v59, v60);
  type metadata accessor for PommesSearch();
  uint64_t v62 = swift_allocObject();
  PommesSearch.init(remoteSearchClient:domainSearchClients:preflightClients:pegasusCacheManager:domainWarmup:muxContextManager:)(v48, v54, v55, v56, (uint64_t)v58, v61);
  swift_release();
  swift_release();
  return v62;
}

uint64_t PommesSearch.__allocating_init(remoteSearchClient:domainSearchClients:preflightClients:pegasusCacheManager:domainWarmup:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  PommesSearch.init(remoteSearchClient:domainSearchClients:preflightClients:pegasusCacheManager:domainWarmup:muxContextManager:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t PommesSearch.__allocating_init(remoteSearchClient:domainSearchClients:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  uint64_t v4 = specialized PommesSearch.init(remoteSearchClient:domainSearchClients:)(a1, a2);
  swift_release();
  return v4;
}

uint64_t PommesSearch.init(remoteSearchClient:domainSearchClients:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = specialized PommesSearch.init(remoteSearchClient:domainSearchClients:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t PommesSearch.init(remoteSearchClient:domainSearchClients:preflightClients:pegasusCacheManager:domainWarmup:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for AnalyticsComponentIdGenerator();
  uint64_t v13 = swift_allocObject();
  type metadata accessor for PommesRequestInstrumentationUtil();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = v13;
  *(void *)(v6 + 64) = v14;
  id v15 = objc_msgSend(self, sel_sharedPreferences);
  uint64_t v16 = type metadata accessor for PommesServerFallbackPreferences();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  *(void *)(v6 + 96) = v16;
  *(void *)(v6 + 104) = &protocol witness table for PommesServerFallbackPreferences;
  *(void *)(v6 + 72) = v17;
  *(unsigned char *)(v6 + 112) = 0;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a1;
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = a6;
  *(void *)(v6 + 56) = a5;
  return v6;
}

uint64_t PommesSearch.setServiceHelper(_:)(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(v1 + 24) + 504))();
  return (*(uint64_t (**)(uint64_t))(**(void **)(v1 + 56) + 176))(a1);
}

uint64_t PommesSearch.search(pommesSearchRequest:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v166 = a3;
  uint64_t v165 = a2;
  uint64_t v147 = a4;
  uint64_t v168 = type metadata accessor for PommesSearchReason();
  uint64_t v167 = *(void *)(v168 - 8);
  MEMORY[0x1F4188790](v168);
  uint64_t v146 = (char *)v143 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SignpostToken();
  uint64_t v162 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v180 = (char *)v143 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v173 = (uint64_t)v143 - v11;
  uint64_t v155 = type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v160 = *(void *)(v155 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v155);
  uint64_t v179 = (void *)((char *)v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v161 = v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v172 = (uint64_t)v143 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  uint64_t v158 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v164 = (uint64_t)v143 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v178 = (uint64_t)v143 - v19;
  uint64_t v159 = v20;
  MEMORY[0x1F4188790](v18);
  uint64_t v183 = (uint64_t)v143 - v21;
  uint64_t v22 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v148 = v22;
  uint64_t v156 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v177 = (char *)v143 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v153 = (uint64_t)v143 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v27 = MEMORY[0x1F4188790](v26 - 8);
  uint64_t v145 = (uint64_t)v143 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v150 = (uint64_t)v143 - v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v31 = MEMORY[0x1F4188790](v30 - 8);
  uint64_t v149 = (char *)v143 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)v143 - v33;
  uint64_t v35 = type metadata accessor for PommesCandidateId();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v176 = (char *)v143 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = v38;
  MEMORY[0x1F4188790](v37);
  uint64_t v40 = (char *)v143 - v39;
  uint64_t v41 = *(int *)(v22 + 32);
  uint64_t v170 = a1;
  id v42 = (uint64_t *)(a1 + v41);
  uint64_t v43 = *v42;
  uint64_t v44 = v42[1];
  swift_bridgeObjectRetain();
  PommesSearchRequest.pommesCandidateId.getter((uint64_t)v40);
  unint64_t v181 = v5;
  uint64_t v45 = v5[8];
  id v46 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
  v46(v34, v40, v35);
  uint64_t v169 = v36;
  uint64_t v47 = *(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56);
  v47(v34, 0, 1, v35);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, char *))(*(void *)v45 + 128);
  uint64_t v174 = v44;
  uint64_t v175 = v43;
  uint64_t v49 = v44;
  uint64_t v50 = (uint64_t)v149;
  uint64_t v151 = v45;
  v48(v43, v49, v34);
  outlined destroy of MediaUserStateCenter?((uint64_t)v34, &demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v171 = v40;
  uint64_t v51 = v46;
  uint64_t v52 = v148;
  uint64_t v152 = v51;
  v51((char *)v50, v40, v35);
  uint64_t v182 = v35;
  uint64_t v53 = v35;
  uint64_t v54 = v170;
  v47((char *)v50, 0, 1, v53);
  uint64_t v55 = v150;
  double v56 = *(double *)(v54 + *(int *)(v52 + 48));
  uint64_t v144 = v54 + *(int *)(v52 + 44);
  outlined init with copy of MediaUserStateCenter?(v144, v150, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  uint64_t v57 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v58 = *(void *)(v57 - 8);
  id v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  v143[1] = v58 + 48;
  v143[0] = v59;
  if (v59(v55, 1, v57) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v55, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    uint64_t v60 = 0;
    uint64_t v61 = 0;
  }
  else
  {
    uint64_t v60 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
    uint64_t v61 = v62;
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v55, v57);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)v151 + 160))(v175, v174, v50, v60, v61, v56);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v50, &demangling cache variable for type metadata for PommesCandidateId?);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v151 = v57;
  uint64_t v63 = type metadata accessor for Logger();
  __swift_project_value_buffer(v63, (uint64_t)static Logger.pommes);
  uint64_t v64 = v153;
  outlined init with copy of PommesSearchRequest(v54, v153, type metadata accessor for PommesSearchRequest);
  id v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  BOOL v67 = os_log_type_enabled(v65, v66);
  uint64_t v68 = v183;
  if (v67)
  {
    uint64_t v69 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v69 = 134217984;
    aBlocuint64_t k = *(void *)(v64 + *(int *)(v52 + 48));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined destroy of PommesSearchRequest(v64, type metadata accessor for PommesSearchRequest);
    _os_log_impl(&dword_1C8F83000, v65, v66, "Checking if PSC score is above threshold: %f", v69, 0xCu);
    MEMORY[0x1CB77E470](v69, -1, -1);
  }
  else
  {
    outlined destroy of PommesSearchRequest(v64, type metadata accessor for PommesSearchRequest);
  }
  uint64_t v71 = v172;
  uint64_t v70 = v173;
  long long v72 = v171;

  (*(void (**)(uint64_t))(*v181 + 224))(v54);
  Date.init()();
  uint64_t v73 = (int *)v155;
  uint64_t v74 = v71 + *(int *)(v155 + 20);
  *(void *)uint64_t v74 = "SiriInformationSearch/PommesSearch.swift";
  *(void *)(v74 + 8) = 40;
  *(unsigned char *)(v74 + 16) = 2;
  *(void *)(v71 + v73[6]) = 250;
  uint64_t v75 = v71 + v73[7];
  *(void *)uint64_t v75 = "search(pommesSearchRequest:completion:)";
  *(void *)(v75 + 8) = 39;
  *(unsigned char *)(v75 + 16) = 2;
  uint64_t v76 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000017);
  uint64_t v77 = (uint64_t *)(v71 + v73[8]);
  uint64_t *v77 = v76;
  v77[1] = v78;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v79 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v79, (uint64_t)static Signposter.pommes);
  OSSignposter.begin(name:context:)("search", 6, 2u, 0, v70);
  outlined init with copy of PommesSearchRequest(v71, (uint64_t)v179, type metadata accessor for PerformanceUtil.Ticket);
  outlined init with copy of PommesSearchRequest(v70, (uint64_t)v180, (uint64_t (*)(void))type metadata accessor for SignpostToken);
  outlined init with copy of MediaUserStateCenter?(v68, v178, &demangling cache variable for type metadata for PommesSearchReason?);
  v152(v176, v72, v182);
  outlined init with copy of PommesSearchRequest(v54, (uint64_t)v177, type metadata accessor for PommesSearchRequest);
  unint64_t v80 = (*(unsigned __int8 *)(v160 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80);
  unint64_t v81 = (v161 + *(unsigned __int8 *)(v162 + 80) + v80) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
  unint64_t v82 = (v163 + *(unsigned __int8 *)(v158 + 80) + v81) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80);
  unint64_t v83 = (v159 + v82 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v84 = (v83 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v85 = (v84 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v86 = v169;
  unint64_t v87 = (*(unsigned __int8 *)(v169 + 80) + v85 + 16) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80);
  unint64_t v88 = (v154 + *(unsigned __int8 *)(v156 + 80) + v87) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80);
  uint64_t v89 = swift_allocObject();
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v179, v89 + v80, type metadata accessor for PerformanceUtil.Ticket);
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v180, v89 + v81, (uint64_t (*)(void))type metadata accessor for SignpostToken);
  outlined init with take of PommesSearchReason?(v178, v89 + v82, &demangling cache variable for type metadata for PommesSearchReason?);
  uint64_t v90 = (void *)(v89 + v83);
  uint64_t v91 = v166;
  *uint64_t v90 = v165;
  v90[1] = v91;
  uint64_t v92 = v181;
  *(void *)(v89 + v84) = v181;
  uint64_t v93 = (void *)(v89 + v85);
  uint64_t v94 = v176;
  uint64_t v95 = v174;
  *uint64_t v93 = v175;
  v93[1] = v95;
  unint64_t v96 = v89 + v87;
  uint64_t v98 = v182;
  uint64_t v97 = v183;
  (*(void (**)(unint64_t, char *, uint64_t))(v86 + 32))(v96, v94, v182);
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v177, v89 + v88, type metadata accessor for PommesSearchRequest);
  uint64_t v99 = v164;
  outlined init with copy of MediaUserStateCenter?(v97, v164, &demangling cache variable for type metadata for PommesSearchReason?);
  uint64_t v100 = v167;
  uint64_t v101 = v168;
  id v102 = v92;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v99, 1, v168) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of MediaUserStateCenter?(v99, &demangling cache variable for type metadata for PommesSearchReason?);
    uint64_t v103 = v145;
    outlined init with copy of MediaUserStateCenter?(v144, v145, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v143[0])(v103, 1, v151) == 1) {
      char v104 = 65;
    }
    else {
      char v104 = 2;
    }
    outlined destroy of MediaUserStateCenter?(v103, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v105 = type metadata accessor for DispatchQoS.QoSClass();
    uint64_t v106 = *(void *)(v105 - 8);
    MEMORY[0x1F4188790](v105);
    uint64_t v108 = (char *)v143 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, void, uint64_t))(v106 + 104))(v108, *MEMORY[0x1E4FBCB40], v105);
    uint64_t v180 = (char *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v106 + 8))(v108, v105);
    uint64_t v109 = swift_allocObject();
    *(void *)(v109 + 16) = partial apply for closure #1 in PommesSearch.search(pommesSearchRequest:completion:);
    *(void *)(v109 + 24) = v89;
    *(unsigned char *)(v109 + 32) = v104;
    uint64_t v189 = partial apply for closure #2 in PommesSearch.search(pommesSearchRequest:completion:);
    v190 = (void *)v109;
    aBlocuint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v186 = 1107296256;
    unint64_t v187 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v188 = &block_descriptor_0;
    uint64_t v177 = (char *)_Block_copy(&aBlock);
    uint64_t v178 = type metadata accessor for DispatchQoS();
    unint64_t v181 = v143;
    uint64_t v110 = *(void *)(v178 - 8);
    MEMORY[0x1F4188790](v178);
    uint64_t v112 = (char *)v143 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v113 = v86;
    uint64_t v114 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v179 = v143;
    uint64_t v115 = *(void *)(v114 - 8);
    MEMORY[0x1F4188790](v114);
    char v117 = (char *)v143 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v184 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAEB0]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v118 = v177;
    uint64_t v119 = v180;
    MEMORY[0x1CB77D180](0, v112, v117, v177);
    _Block_release(v118);
    swift_release();

    (*(void (**)(char *, uint64_t))(v115 + 8))(v117, v114);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v178);
    outlined destroy of PommesSearchRequest(v173, (uint64_t (*)(void))type metadata accessor for SignpostToken);
    outlined destroy of PommesSearchRequest(v172, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of MediaUserStateCenter?(v183, &demangling cache variable for type metadata for PommesSearchReason?);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v171, v182);
    goto LABEL_18;
  }
  uint64_t v120 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 32);
  v120(v146, v99, v101);
  uint64_t v121 = *(uint64_t (**)(uint64_t))(*v102 + 256);
  swift_retain();
  swift_retain();
  uint64_t v122 = v121(v170);
  if (v122)
  {
    uint64_t v123 = (void *)v122;
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v124 = type metadata accessor for DispatchQoS.QoSClass();
    uint64_t v125 = *(void *)(v124 - 8);
    MEMORY[0x1F4188790](v124);
    uint64_t v127 = (char *)v143 - ((v126 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, void, uint64_t))(v125 + 104))(v127, *MEMORY[0x1E4FBCB40], v124);
    uint64_t v180 = (char *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v125 + 8))(v127, v124);
    uint64_t v128 = (void *)swift_allocObject();
    v128[2] = partial apply for closure #1 in PommesSearch.search(pommesSearchRequest:completion:);
    v128[3] = v89;
    v128[4] = v123;
    uint64_t v189 = partial apply for closure #3 in PommesSearch.search(pommesSearchRequest:completion:);
    v190 = v128;
    aBlocuint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v186 = 1107296256;
    unint64_t v187 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v188 = &block_descriptor_13;
    uint64_t v129 = _Block_copy(&aBlock);
    uint64_t v178 = type metadata accessor for DispatchQoS();
    unint64_t v181 = v143;
    uint64_t v130 = *(void *)(v178 - 8);
    MEMORY[0x1F4188790](v178);
    uint64_t v132 = (char *)v143 - ((v131 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain();
    uint64_t v177 = v123;
    static DispatchQoS.unspecified.getter();
    uint64_t v133 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v179 = v143;
    uint64_t v134 = *(void *)(v133 - 8);
    MEMORY[0x1F4188790](v133);
    uint64_t v136 = (char *)v143 - ((v135 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v184 = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAEB0]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v137 = v180;
    MEMORY[0x1CB77D180](0, v132, v136, v129);
    _Block_release(v129);
    swift_release();

    (*(void (**)(char *, uint64_t))(v134 + 8))(v136, v133);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v132, v178);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v146, v168);
    outlined destroy of PommesSearchRequest(v173, (uint64_t (*)(void))type metadata accessor for SignpostToken);
    outlined destroy of PommesSearchRequest(v172, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of MediaUserStateCenter?(v183, &demangling cache variable for type metadata for PommesSearchReason?);
    (*(void (**)(char *, uint64_t))(v169 + 8))(v171, v182);
LABEL_18:
    swift_release();
    uint64_t v138 = type metadata accessor for PommesSearchEagerInfo(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v138 - 8) + 56))(v147, 1, 1, v138);
  }
  uint64_t v140 = (*(uint64_t (**)(uint64_t))(*v102 + 264))(v170);
  (*(void (**)(void, uint64_t))(*(void *)v140 + 208))(partial apply for closure #1 in PommesSearch.search(pommesSearchRequest:completion:), v89);
  swift_release();
  swift_release();
  outlined destroy of PommesSearchRequest(v173, (uint64_t (*)(void))type metadata accessor for SignpostToken);
  outlined destroy of PommesSearchRequest(v172, type metadata accessor for PerformanceUtil.Ticket);
  outlined destroy of MediaUserStateCenter?(v97, &demangling cache variable for type metadata for PommesSearchReason?);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v171, v98);
  uint64_t v141 = v147;
  v120(v147, (uint64_t)v146, v101);
  uint64_t v142 = type metadata accessor for PommesSearchEagerInfo(0);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v142 - 8) + 56))(v141, 0, 1, v142);
}

void closure #1 in PommesSearch.search(pommesSearchRequest:completion:)(void *a1, char a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(char *, uint64_t, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v58 = a6;
  uint64_t v59 = a8;
  uint64_t v57 = a7;
  id v52 = a5;
  unsigned int v61 = a2 & 1;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v60 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v50 - v21;
  uint64_t v23 = type metadata accessor for PommesSearchReason();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v50 - v28;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v55 = a10;
  uint64_t v56 = a11;
  uint64_t v54 = a9;
  (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(a3, 0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v53 = a12;
  uint64_t v30 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v30, (uint64_t)static Signposter.pommes);
  OSSignposter.end(token:message:)(a4, 0, 0xE000000000000000);
  uint64_t v31 = (unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  uint64_t v51 = a1;
  if (v61)
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v52, (uint64_t)v20, &demangling cache variable for type metadata for PommesSearchReason?);
    if ((*v31)(v20, 1, v23) == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v24 + 104))(v27, *MEMORY[0x1E4F9FE98], v23);
      id v32 = a1;
      outlined destroy of MediaUserStateCenter?((uint64_t)v20, &demangling cache variable for type metadata for PommesSearchReason?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v27, v20, v23);
      id v34 = a1;
    }
    uint64_t v35 = type metadata accessor for PommesSearchError(0);
    lazy protocol witness table accessor for type PommesSearchError and conformance PommesSearchError();
    uint64_t v36 = (void *)swift_allocError();
    *(void *)uint64_t v37 = a1;
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v37[*(int *)(v35 + 20)], v27, v23);
  }
  else
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v52, (uint64_t)v22, &demangling cache variable for type metadata for PommesSearchReason?);
    if ((*v31)(v22, 1, v23) == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v24 + 104))(v29, *MEMORY[0x1E4F9FE98], v23);
      id v33 = a1;
      outlined destroy of MediaUserStateCenter?((uint64_t)v22, &demangling cache variable for type metadata for PommesSearchReason?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v29, v22, v23);
      id v38 = a1;
    }
    dispatch thunk of PommesResponse.setSearchReason(_:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v29, v23);
    uint64_t v36 = a1;
  }
  uint64_t v39 = v61;
  ((void (*)(void *, void))v58)(v36, v61);
  uint64_t v40 = type metadata accessor for PommesCandidateId();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
  id v42 = v36;
  id v52 = v36;
  uint64_t v43 = (uint64_t)v60;
  uint64_t v44 = v56;
  v58(v60, v56, v40);
  uint64_t v45 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56);
  v45(v43, 0, 1, v40);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(*(void *)v59 + 328))(v54, v55, v43, v42, v39);
  outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for PommesCandidateId?);
  id v46 = (uint64_t *)(v53 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 32));
  uint64_t v48 = *v46;
  uint64_t v47 = v46[1];
  uint64_t v49 = static PerformanceUtil.shared;
  v58((char *)v43, v44, v40);
  v45(v43, 0, 1, v40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v49 + 240))(v48, v47, v43);
  outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for PommesCandidateId?);
  specialized PommesSearch.runGeoPersonalizationShadowLogging(result:)(v51, v39);
  outlined consume of Result<PommesResponse, Error>(v52);
}

void closure #2 in PommesSearch.search(pommesSearchRequest:completion:)(void (*a1)(void *, uint64_t), uint64_t a2, char a3)
{
  lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
  uint64_t v5 = (void *)swift_allocError();
  *uint64_t v6 = a3;
  a1(v5, 1);
}

Swift::Void __swiftcall PommesSearch.prepareForSearch()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C8F83000, v3, v4, "POMMES preparing for search", v5, 2u);
    MEMORY[0x1CB77E470](v5, -1, -1);
  }

  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v6 + 512))();
  (*(void (**)(uint64_t))(*(void *)v6 + 520))(v7);
}

Swift::Void __swiftcall PommesSearch.prepareForSearchAtSessionStart()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 176))(v3))
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    (*(void (**)(void))(*(void *)static PerformanceUtil.shared + 224))();
  }
  Date.init()();
  uint64_t v6 = &v5[v2[5]];
  *(void *)uint64_t v6 = "SiriInformationSearch/PommesSearch.swift";
  *((void *)v6 + 1) = 40;
  v6[16] = 2;
  *(void *)&v5[v2[6]] = 379;
  uint64_t v7 = &v5[v2[7]];
  *(void *)uint64_t v7 = "prepareForSearchAtSessionStart()";
  *((void *)v7 + 1) = 32;
  v7[16] = 2;
  uint64_t v8 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000033);
  uint64_t v9 = (uint64_t *)&v5[v2[8]];
  uint64_t *v9 = v8;
  v9[1] = v10;
  void v19[3] = &type metadata for FeatureFlag;
  v19[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  uint64_t v11 = swift_allocObject();
  v19[0] = v11;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(unsigned char *)(v11 + 48) = 3;
  char v12 = isFeatureEnabled(_:)();
  uint64_t v13 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  if (v12)
  {
    (*(void (**)(uint64_t))(**(void **)(v1 + 24) + 512))(v13);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1C8F83000, v15, v16, "Sphinx FF is disabled, skipping prepareForSearchAtSessionStart", v17, 2u);
      MEMORY[0x1CB77E470](v17, -1, -1);
    }
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(char *, void))(*(void *)static PerformanceUtil.shared + 184))(v5, 0);
  outlined destroy of PommesSearchRequest((uint64_t)v5, type metadata accessor for PerformanceUtil.Ticket);
  swift_beginAccess();
  *(unsigned char *)(v1 + 112) = 1;
}

Swift::Void __swiftcall PommesSearch.prepareForSearchAtRequestStart()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C8F83000, v3, v4, "POMMES preparing for search at request start", v5, 2u);
    MEMORY[0x1CB77E470](v5, -1, -1);
  }

  (*(void (**)(void))(**(void **)(v1 + 24) + 520))();
}

Swift::Void __swiftcall PommesSearch.prepareForSearchAtRequestStart(requestId:)(Swift::String requestId)
{
  (*(void (**)(uint64_t, void *, void))(**(void **)(v1 + 24) + 536))(requestId._countAndFlagsBits, requestId._object, 0);
}

uint64_t PommesSearch.cacheMUXContext(msg:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1C8F83000, v5, v6, "POMMES caching MUX context", v7, 2u);
    MEMORY[0x1CB77E470](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(**(void **)(v2 + 48) + 152))(a1);
}

Swift::Void __swiftcall PommesSearch.tearDown()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*v0[3] + 544))();
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*v0[5] + 192))(v1);
  (*(void (**)(uint64_t))(*v0[6] + 176))(v2);
}

void closure #3 in PommesSearch.runGeoPersonalizationShadowLogging(result:)(unint64_t a1, char a2)
{
  if (a2)
  {
    id v7 = (id)a1;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
    id v9 = (id)a1;
    id v10 = (id)a1;
    oslog = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      char v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)char v12 = 138412290;
      id v14 = (id)a1;
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v13 = v16;
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 1);
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 1);
      _os_log_impl(&dword_1C8F83000, oslog, v11, "Shadow logger failed due to error: %@", v12, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v13, -1, -1);
      MEMORY[0x1CB77E470](v12, -1, -1);

      outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 1);
      return;
    }
    outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 1);
    outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 1);
  }
  else
  {
    uint64_t v3 = one-time initialization token for pommes;
    swift_bridgeObjectRetain();
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v6 = 134217984;
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 0);
      }
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 0);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 0);
      _os_log_impl(&dword_1C8F83000, oslog, v5, "Shadow logger found and logged details about %ld events", v6, 0xCu);
      MEMORY[0x1CB77E470](v6, -1, -1);

      return;
    }
    outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 0);
    outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 0);
  }
}

uint64_t PommesSearch.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  return v0;
}

uint64_t PommesSearch.__deallocating_deinit()
{
  PommesSearch.deinit();

  return swift_deallocClassInstance();
}

BOOL static SearchError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void SearchError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int SearchError.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SearchError()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SearchError()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SearchError()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

SiriInformationSearch::LocalDomainTypes_optional __swiftcall LocalDomainTypes.init(rawValue:)(Swift::String rawValue)
{
  unint64_t object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._unint64_t object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of LocalDomainTypes.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = SiriInformationSearch_LocalDomainTypes_music;
  }
  else {
    v4.value = SiriInformationSearch_LocalDomainTypes_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t LocalDomainTypes.rawValue.getter(char a1)
{
  if (a1) {
    return 0x636973756DLL;
  }
  else {
    return 1701736302;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocalDomainTypes(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    uint64_t v3 = 0x636973756DLL;
  }
  else {
    uint64_t v3 = 1701736302;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (*a2) {
    uint64_t v5 = 0x636973756DLL;
  }
  else {
    uint64_t v5 = 1701736302;
  }
  if (*a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocalDomainTypes()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocalDomainTypes()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalDomainTypes()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocalDomainTypes@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of LocalDomainTypes.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LocalDomainTypes(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701736302;
  if (*v1) {
    uint64_t v2 = 0x636973756DLL;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t specialized AnyDataProvider.init<A>(provider:)(uint64_t a1)
{
  dispatch_group_t v3 = dispatch_group_create();
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(void *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 24) = a1;
  *(void *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 40) = a1;
  *(void *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 56) = a1;
  *(void *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for AmpDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AmpDataProvider.Type);
  *(void *)(v1 + 96) = String.init<A>(describing:)();
  *(void *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  dispatch_group_t v3 = dispatch_group_create();
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(void *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 24) = a1;
  *(void *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 40) = a1;
  *(void *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 56) = a1;
  *(void *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for AudioQueueStateDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioQueueStateDataProvider.Type);
  *(void *)(v1 + 96) = String.init<A>(describing:)();
  *(void *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  dispatch_group_t v3 = dispatch_group_create();
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(void *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 24) = a1;
  *(void *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 40) = a1;
  *(void *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 56) = a1;
  *(void *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for AppInfoDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AppInfoDataProvider.Type);
  *(void *)(v1 + 96) = String.init<A>(describing:)();
  *(void *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  dispatch_group_t v3 = dispatch_group_create();
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(void *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 24) = a1;
  *(void *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 40) = a1;
  *(void *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 56) = a1;
  *(void *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for PreferredNavigationAppDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PreferredNavigationAppDataProvider.Type);
  *(void *)(v1 + 96) = String.init<A>(describing:)();
  *(void *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  dispatch_group_t v3 = dispatch_group_create();
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(void *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 24) = a1;
  *(void *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 40) = a1;
  *(void *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 56) = a1;
  *(void *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for SiriKitAppInfoDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitAppInfoDataProvider.Type);
  *(void *)(v1 + 96) = String.init<A>(describing:)();
  *(void *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  dispatch_group_t v3 = dispatch_group_create();
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(void *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 24) = a1;
  *(void *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 40) = a1;
  *(void *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 56) = a1;
  *(void *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for MarketplaceInfoDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MarketplaceInfoDataProvider.Type);
  *(void *)(v1 + 96) = String.init<A>(describing:)();
  *(void *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  dispatch_group_t v3 = dispatch_group_create();
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(void *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 24) = a1;
  *(void *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 40) = a1;
  *(void *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 56) = a1;
  *(void *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for PairedDeviceDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PairedDeviceDataProvider.Type);
  *(void *)(v1 + 96) = String.init<A>(describing:)();
  *(void *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  dispatch_group_t v3 = dispatch_group_create();
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(void *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 24) = a1;
  *(void *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 40) = a1;
  *(void *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 56) = a1;
  *(void *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for ProfileSliceResolvingDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProfileSliceResolvingDataProvider.Type);
  *(void *)(v1 + 96) = String.init<A>(describing:)();
  *(void *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  dispatch_group_t v3 = dispatch_group_create();
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(void *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 24) = a1;
  *(void *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 40) = a1;
  *(void *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 56) = a1;
  *(void *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DummyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DummyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>.Type);
  *(void *)(v1 + 96) = String.init<A>(describing:)();
  *(void *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  dispatch_group_t v3 = dispatch_group_create();
  *(void *)(v1 + 72) = a1;
  *(void *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(void *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 24) = a1;
  *(void *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 40) = a1;
  *(void *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(void *)(v1 + 56) = a1;
  *(void *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchToolEmptyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchToolEmptyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>.Type);
  *(void *)(v1 + 96) = String.init<A>(describing:)();
  *(void *)(v1 + 104) = v4;
  return v1;
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

id specialized AudioQueueStateManager.init(queueStateObserver:)(uint64_t a1, char *a2)
{
  uint64_t v12[3] = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SOMediaNowPlayingObserver);
  v12[4] = &protocol witness table for SOMediaNowPlayingObserver;
  v12[0] = a1;
  uint64_t v4 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_updateAudioQueueStateCacheGroup;
  uint64_t v5 = a2;
  *(void *)&a2[v4] = dispatch_group_create();
  v5[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_isObserverRegistered] = 0;
  uint64_t v6 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock;
  *(void *)&v5[v6] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E00]), sel_init);
  *(void *)&v5[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache] = 0;
  unint64_t v7 = &v5[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache];
  *(void *)unint64_t v7 = 0;
  unsigned char v7[8] = 1;
  uint64_t v8 = &v5[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  outlined init with copy of AppDataProviding((uint64_t)v12, (uint64_t)&v5[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver]);

  v11.receiver = v5;
  v11.super_class = (Class)type metadata accessor for AudioQueueStateManager();
  id v9 = objc_msgSendSuper2(&v11, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v9;
}

uint64_t specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v29[3] = type metadata accessor for AppDataProvider();
  v29[4] = &protocol witness table for AppDataProvider;
  v29[0] = a1;
  uint64_t v27 = &type metadata for RunningBoardForegroundAppProvider;
  uint64_t v28 = &protocol witness table for RunningBoardForegroundAppProvider;
  uint64_t v8 = one-time initialization token for pommes;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
  swift_unknownObjectRetain();
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 8) = 1024;
    LODWORD(v25[0]) = a2 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    _os_log_impl(&dword_1C8F83000, v10, v11, "SiriKitAppInfoDataProvider make, isEnabled=%{BOOL}d, satisfyingAppsDataProvider specified=%{BOOL}d", (uint8_t *)v12, 0xEu);
    MEMORY[0x1CB77E470](v12, -1, -1);

    uint64_t v13 = a2;
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {

    swift_unknownObjectRelease();
    uint64_t v13 = a2;
    if (!a2)
    {
LABEL_7:
      type metadata accessor for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator();
      uint64_t inited = swift_initStaticObject();
      uint64_t v15 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(void *)inited + 88))();
      uint64_t v13 = v15();
      a3 = v16;
      swift_release();
    }
  }
  outlined init with copy of AppDataProviding((uint64_t)v29, (uint64_t)v25);
  outlined init with copy of AppDataProviding((uint64_t)v26, (uint64_t)v24);
  outlined init with copy of MediaUserStateCenter?(a4, (uint64_t)v23, &demangling cache variable for type metadata for AppSearchViewProvider?);
  type metadata accessor for SiriKitAppInfoDataProvider();
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v17 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  uint64_t v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(unsigned char *)(v17 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) = 2;
  uint64_t v20 = v17 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps;
  *(void *)uint64_t v20 = 0;
  *(unsigned char *)(v20 + 8) = 1;
  outlined init with take of AppDataProviding(v25, v17 + 16);
  *(void *)(v17 + 56) = v13;
  *(void *)(v17 + 64) = a3;
  outlined init with take of AppDataProviding(v24, v17 + 72);
  outlined init with take of PommesSearchReason?((uint64_t)v23, v17 + 112, &demangling cache variable for type metadata for AppSearchViewProvider?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  swift_unknownObjectRetain();
  uint64_t v21 = specialized AnyDataProvider.init<A>(provider:)(v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return v21;
}

uint64_t specialized MusicDomain.init(spanMatcher:)(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 24) = 1;
  *(void *)(a2 + 32) = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of specialized MusicDomain.init(spanMatcher:));
  type metadata accessor for VocabularySearchClient();
  uint64_t v4 = swift_allocObject();
  *(void *)(a2 + 16) = specialized VocabularySearchClient.init(spanMatcher:)(a1, v4);
  return a2;
}

uint64_t specialized VocabularySearchClient.init(spanMatcher:)(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SEMSpanMatcher);
  uint64_t v17 = &protocol witness table for SEMSpanMatcher;
  *(void *)&long long v15 = a1;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FBCB40], v4);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v8 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1F41AB0F0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v10);
  (*(void (**)(char *, void))(v12 + 104))((char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  *(void *)(a2 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a2 + 64) = 0;
  outlined init with take of AppDataProviding(&v15, a2 + 24);
  return a2;
}

uint64_t specialized static PommesSearch.defaultPreflightClients(dataProviderManager:networkAvailabilityProvider:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<PommesSearchPreflightHandling>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C9195360;
  uint64_t matched = type metadata accessor for UtteranceMatchPreflightClient();
  uint64_t v6 = swift_allocObject();
  *(void *)(v4 + 56) = matched;
  *(void *)(v4 + 64) = &protocol witness table for UtteranceMatchPreflightClient;
  *(void *)(v4 + 32) = v6;
  uint64_t v7 = type metadata accessor for ClassicFollowupPreflightClient();
  uint64_t v8 = swift_allocObject();
  *(void *)(v4 + 96) = v7;
  *(void *)(v4 + 104) = &protocol witness table for ClassicFollowupPreflightClient;
  *(void *)(v4 + 72) = v8;
  uint64_t v9 = type metadata accessor for SmartPlayPreflightClient();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v4 + 136) = v9;
  *(void *)(v4 + 144) = &protocol witness table for SmartPlayPreflightClient;
  *(void *)(v4 + 112) = v10;
  uint64_t v11 = type metadata accessor for CallContactPreflightClient();
  uint64_t v12 = swift_allocObject();
  *(void *)(v4 + 176) = v11;
  *(void *)(v4 + 184) = &protocol witness table for CallContactPreflightClient;
  *(void *)(v4 + 152) = v12;
  uint64_t v13 = self;
  swift_retain();
  id v14 = objc_msgSend((id)v13, sel_processInfo);
  LOBYTE(v13) = NSProcessInfo.isRunningUnitTests.getter();

  if (v13)
  {
    long long v15 = &type metadata for EmptyReferenceResolver;
    unint64_t v16 = lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver();
  }
  else
  {
    long long v15 = (ValueMetadata *)type metadata accessor for ReferenceResolutionClient();
    *(void *)&long long v32 = ReferenceResolutionClient.__allocating_init()();
    unint64_t v16 = MEMORY[0x1E4FA3D98];
  }
  id v33 = v15;
  unint64_t v34 = v16;
  uint64_t v17 = type metadata accessor for PlayThisLibraryItemPreflightClient();
  uint64_t v18 = swift_allocObject();
  outlined init with take of AppDataProviding(&v32, v18 + 16);
  *(void *)(v4 + 216) = v17;
  *(void *)(v4 + 224) = &protocol witness table for PlayThisLibraryItemPreflightClient;
  *(void *)(v4 + 192) = v18;
  uint64_t v19 = type metadata accessor for WholeHomeAudioPreflightClient();
  uint64_t v20 = swift_allocObject();
  *(void *)(v4 + 256) = v19;
  *(void *)(v4 + 264) = &protocol witness table for WholeHomeAudioPreflightClient;
  *(void *)(v4 + 232) = v20;
  uint64_t v21 = type metadata accessor for PlayRadioStationPreflightClient();
  uint64_t v22 = swift_allocObject();
  *(void *)(v4 + 296) = v21;
  *(void *)(v4 + 304) = &protocol witness table for PlayRadioStationPreflightClient;
  *(void *)(v4 + 272) = v22;
  uint64_t v23 = type metadata accessor for OfflineMusicPlaybackPreflightClient();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a2;
  *(void *)(v4 + 336) = v23;
  *(void *)(v4 + 344) = &protocol witness table for OfflineMusicPlaybackPreflightClient;
  *(void *)(v4 + 312) = v24;
  uint64_t v25 = type metadata accessor for EnvironmentNamePreflightClient();
  uint64_t v26 = swift_allocObject();
  *(void *)(v4 + 376) = v25;
  *(void *)(v4 + 384) = &protocol witness table for EnvironmentNamePreflightClient;
  *(void *)(v4 + 352) = v26;
  uint64_t v27 = type metadata accessor for OpenAppOnTVPreflightClient();
  uint64_t v28 = swift_allocObject();
  *(void *)(v4 + 416) = v27;
  *(void *)(v4 + 424) = &protocol witness table for OpenAppOnTVPreflightClient;
  *(void *)(v4 + 392) = v28;
  uint64_t v29 = type metadata accessor for OpenAppVocPreflightClient();
  uint64_t v30 = swift_allocObject();
  *(void *)(v4 + 456) = v29;
  *(void *)(v4 + 464) = &protocol witness table for OpenAppVocPreflightClient;
  *(void *)(v4 + 432) = v30;
  swift_retain();
  return v4;
}

uint64_t specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v52 = a8;
  uint64_t v49 = a7;
  uint64_t v46 = a6;
  uint64_t v44 = a5;
  uint64_t v43 = a4;
  uint64_t v45 = a2;
  uint64_t v53 = a13;
  uint64_t v50 = a11;
  uint64_t v51 = a10;
  uint64_t v47 = a9;
  uint64_t v48 = a12;
  uint64_t v57 = &type metadata for PommesSystemAppChecking;
  uint64_t v58 = &protocol witness table for PommesSystemAppChecking;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v16 - 8);
  static DispatchQoS.userInitiated.getter();
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v17 - 8);
  static OS_dispatch_queue.Attributes.concurrent.getter();
  uint64_t v18 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E4FBCB40], v18);
  static OS_dispatch_queue.global(qos:)();
  uint64_t v22 = v18;
  uint64_t v23 = a1;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v22);
  uint64_t v24 = v44;
  uint64_t v25 = v43;
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v26);
  (*(void (**)(char *, void))(v28 + 104))((char *)&v43 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  uint64_t v29 = v45;
  uint64_t v30 = v46;
  uint64_t v31 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_OWORD *)(a14 + 112) = 0u;
  *(_OWORD *)(a14 + 128) = 0u;
  *(_OWORD *)(a14 + 144) = 0u;
  *(void *)(a14 + 160) = 0;
  *(void *)(a14 + 16) = v31;
  *(void *)(a14 + 24) = v23;
  *(void *)(a14 + 32) = v29;
  *(void *)(a14 + 40) = a3;
  *(void *)(a14 + 48) = v25;
  *(void *)(a14 + 56) = v24;
  if (v30)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v32 = v30;
    uint64_t v33 = v47;
  }
  else
  {
    type metadata accessor for AnalyticsComponentIdGenerator();
    memset(v54, 0, sizeof(v54));
    uint64_t v55 = 0;
    uint64_t v34 = swift_allocObject();
    type metadata accessor for ProfileSliceResolutionRequestInstrumentationUtil();
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = 0;
    *(void *)(v35 + 24) = v34;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v33 = v47;
    uint64_t v32 = specialized static ProfileSliceResolvingDataProvider.make(mediaUserStateCenter:instrumentationUtil:muxContextManager:)((uint64_t)v54, v35, v47);
    swift_release();
    outlined destroy of MediaUserStateCenter?((uint64_t)v54, &demangling cache variable for type metadata for MediaUserStateCenter?);
  }
  uint64_t v37 = v49;
  uint64_t v36 = v50;
  *(void *)(a14 + 64) = v32;
  *(void *)(a14 + 72) = v37;
  id v38 = v51;
  *(void *)(a14 + 80) = v52;
  *(void *)(a14 + 88) = v33;
  *(void *)(a14 + 96) = v36;
  *(void *)(a14 + 104) = v38;
  *(void *)(a14 + 112) = v48;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v39 = v38;
  swift_release();
  *(void *)(a14 + 120) = v53;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  outlined init with copy of AppDataProviding((uint64_t)v56, (uint64_t)v54);
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v54, a14 + 128, &demangling cache variable for type metadata for PommesAppChecking?);
  swift_endAccess();
  uint64_t v40 = *(void (**)(uint64_t))(**(void **)(a14 + 40) + 160);
  swift_retain();
  v40(1);
  swift_release();
  uint64_t v41 = *(void (**)(uint64_t))(**(void **)(a14 + 48) + 160);
  swift_retain();
  v41(1);
  swift_release();
  (*(void (**)(uint64_t))(**(void **)(a14 + 56) + 160))(1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  return a14;
}

uint64_t sub_1C8FF6DC8()
{
  outlined consume of FeatureFlag(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x1F4186498](v0, 49, 7);
}

uint64_t type metadata accessor for PommesSearch()
{
  return self;
}

uint64_t specialized PommesSearch.init(remoteSearchClient:domainSearchClients:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for AnalyticsComponentIdGenerator();
  uint64_t v6 = swift_allocObject();
  type metadata accessor for PommesRequestInstrumentationUtil();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = v6;
  *(void *)(v3 + 64) = v7;
  id v8 = objc_msgSend(self, sel_sharedPreferences);
  uint64_t v9 = type metadata accessor for PommesServerFallbackPreferences();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  *(void *)(v3 + 96) = v9;
  *(void *)(v3 + 104) = &protocol witness table for PommesServerFallbackPreferences;
  *(void *)(v3 + 72) = v10;
  *(unsigned char *)(v3 + 112) = 0;
  *(void *)(v3 + 32) = a2;
  *(void *)(v3 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v3 + 24) = a1;
  uint64_t v11 = one-time initialization token for shared;
  swift_retain();
  if (v11 != -1) {
    swift_once();
  }
  *(void *)(v3 + 40) = static PegasusCacheManager.shared;
  swift_retain();
  unint64_t v12 = default argument 0 of DomainWarmup.init(warmupClients:)();
  type metadata accessor for DomainWarmup();
  swift_allocObject();
  *(void *)(v3 + 56) = DomainWarmup.init(warmupClients:)(v12);
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4E4E8]), sel_init);
  char v14 = AFSupportsMultiUser();
  type metadata accessor for PommesMUXContextManager();
  swift_allocObject();
  *(void *)(v3 + 48) = PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)((uint64_t)v13, v14);
  return v3;
}

uint64_t sub_1C8FF6FCC()
{
  uint64_t v1 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  uint64_t v54 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v2 = (v54 + 16) & ~v54;
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = (int *)(type metadata accessor for SignpostToken() - 8);
  uint64_t v53 = *(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v5 = (v2 + v3 + v53) & ~v53;
  uint64_t v6 = *(void *)(*(void *)v4 + 64);
  uint64_t v7 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?)
                 - 8);
  uint64_t v52 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v8 = (v5 + v6 + v52) & ~v52;
  unint64_t v47 = (((((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v48 = type metadata accessor for PommesCandidateId();
  uint64_t v9 = *(void *)(v48 - 8);
  uint64_t v51 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v10 = (v51 + v47 + 16) & ~v51;
  uint64_t v11 = *(void *)(v9 + 64);
  unint64_t v12 = (int *)type metadata accessor for PommesSearchRequest(0);
  uint64_t v50 = *(unsigned __int8 *)(*((void *)v12 - 1) + 80);
  uint64_t v13 = (v10 + v11 + v50) & ~v50;
  uint64_t v49 = *(void *)(*((void *)v12 - 1) + 64);
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v0 + v2, v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = v0 + v5;
  uint64_t v16 = v0;
  uint64_t v17 = v15 + v4[7];
  uint64_t v18 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  swift_release();
  uint64_t v19 = v0 + v8;
  uint64_t v20 = type metadata accessor for PommesSearchReason();
  uint64_t v21 = *(void *)(v20 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20)) {
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v10, v48);
  uint64_t v22 = v0 + v13;
  type metadata accessor for PommesSearchRequest.ParseState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v28 = v22
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                 + 64);
    uint64_t v29 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v30 = *(void *)(v29 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29)) {
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_14;
    }
    swift_bridgeObjectRelease();
    uint64_t v24 = v22
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    swift_bridgeObjectRelease();
    uint64_t v25 = v24 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
    uint64_t v26 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v27 = *(void *)(v26 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26)) {
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = v22
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  uint64_t v32 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v33 = *(void *)(v32 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32)) {
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  }
LABEL_14:
  swift_bridgeObjectRelease();
  uint64_t v34 = v22 + v12[6];
  uint64_t v35 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v36 = *(void *)(v35 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35)) {
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v37 = v22 + v12[10];
  uint64_t v38 = type metadata accessor for PommesContext();
  uint64_t v39 = *(void *)(v38 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38)) {
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
  }
  uint64_t v40 = v22 + v12[11];
  uint64_t v41 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v42 = *(void *)(v41 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41)) {
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
  }
  swift_release();
  uint64_t v43 = v22 + v12[14];
  uint64_t v44 = type metadata accessor for InputOrigin();
  uint64_t v45 = *(void *)(v44 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44)) {
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v16, v13 + v49, v54 | v53 | v51 | v52 | v50 | 7);
}

void partial apply for closure #1 in PommesSearch.search(pommesSearchRequest:completion:)(void *a1, char a2)
{
  char v3 = a2 & 1;
  uint64_t v4 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for SignpostToken() - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?)
                  - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = (*(void *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)(type metadata accessor for PommesCandidateId() - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + v14 + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = *(void *)(v15 + 64);
  uint64_t v18 = *(void *)(type metadata accessor for PommesSearchRequest(0) - 8);
  closure #1 in PommesSearch.search(pommesSearchRequest:completion:)(a1, v3, v2 + v5, v2 + v8, (void *)(v2 + v11), *(void (**)(char *, uint64_t, uint64_t))(v2 + v12), *(void *)(v2 + v12 + 8), *(void *)(v2 + v13), *(void *)(v2 + v14), *(void *)(v2 + v14 + 8), v2 + v16, v2 + ((v16 + v17 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80)));
}

uint64_t sub_1C8FF7AB0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 33, 7);
}

void partial apply for closure #2 in PommesSearch.search(pommesSearchRequest:completion:)()
{
  closure #2 in PommesSearch.search(pommesSearchRequest:completion:)(*(void (**)(void *, uint64_t))(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for PommesSearchEagerInfo(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesSearchEagerInfo);
}

uint64_t sub_1C8FF7B5C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #3 in PommesSearch.search(pommesSearchRequest:completion:)()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), 0);
}

unint64_t lazy protocol witness table accessor for type SearchError and conformance SearchError()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchError and conformance SearchError;
  if (!lazy protocol witness table cache variable for type SearchError and conformance SearchError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchError and conformance SearchError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchError and conformance SearchError;
  if (!lazy protocol witness table cache variable for type SearchError and conformance SearchError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchError and conformance SearchError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalDomainTypes and conformance LocalDomainTypes()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalDomainTypes and conformance LocalDomainTypes;
  if (!lazy protocol witness table cache variable for type LocalDomainTypes and conformance LocalDomainTypes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalDomainTypes and conformance LocalDomainTypes);
  }
  return result;
}

uint64_t sub_1C8FF7C80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 152))();
}

uint64_t sub_1C8FF7CC4(uint64_t a1, uint64_t a2)
{
  outlined init with copy of AppDataProviding(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 160))(v4);
}

uint64_t sub_1C8FF7D20@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C8FF7D70(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 112) = v2;
  return result;
}

char *initializeBufferWithCopyOfBuffer for PommesSearchError(char *a1, void **a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  unint64_t v5 = (char *)*a2;
  if ((v4 & 0x20000) != 0)
  {
    *(void *)a1 = v5;
    uint64_t v3 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    unint64_t v8 = v5;
    *(void *)uint64_t v3 = v5;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = &v3[v9];
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for PommesSearchReason();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v3;
}

void **assignWithCopy for PommesSearchError(void **a1, id *a2, uint64_t a3)
{
  id v6 = *a2;
  id v7 = *a2;
  unint64_t v8 = *a1;
  *a1 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  unint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

void *initializeWithTake for PommesSearchError(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  unint64_t v5 = (char *)a1 + v4;
  id v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void **assignWithTake for PommesSearchError(void **a1, void **a2, uint64_t a3)
{
  id v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1C8FF802C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for PommesSearchReason();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    unint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

void *sub_1C8FF80DC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for PommesSearchReason();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PommesSearchError()
{
  uint64_t result = type metadata accessor for PommesSearchReason();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PommesSearchEagerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchReason();
  unint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for PommesSearchEagerInfo(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PommesSearchReason();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for PommesSearchEagerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PommesSearchEagerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PommesSearchEagerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PommesSearchEagerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesSearchEagerInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C8FF8490);
}

uint64_t sub_1C8FF8490(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchReason();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PommesSearchEagerInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C8FF8510);
}

uint64_t sub_1C8FF8510(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchReason();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for PommesSearchEagerInfo()
{
  uint64_t result = type metadata accessor for PommesSearchReason();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t method lookup function for PommesSearch(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesSearch);
}

uint64_t dispatch thunk of PommesSearch.serverFallbackPreferences.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PommesSearch.serverFallbackPreferences.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of PommesSearch.serverFallbackPreferences.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PommesSearch.hasCompletedInitialPrepare.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PommesSearch.__allocating_init(remoteSearchClient:domainSearchClients:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of PommesSearch.__allocating_init(remoteSearchClient:domainSearchClients:preflightClients:pegasusCacheManager:domainWarmup:muxContextManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of PommesSearch.setServiceHelper(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PommesSearch.shouldHandleRequest(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of PommesSearch.search(pommesSearchRequest:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of PommesSearch.performPreflightChecks(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of PommesSearch.makeSearchRequestProcessor(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of PommesSearch.prepareForSearch()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of PommesSearch.prepareForSearchAtSessionStart()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of PommesSearch.prepareForSearchAtRequestStart()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of PommesSearch.prepareForSearchAtRequestStart(requestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of PommesSearch.prepareForSearchAtRequestStart(requestId:location:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of PommesSearch.cacheMUXContext(msg:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of PommesSearch.tearDown()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of PommesSearch.logCompletionOfPommesRequest(requestId:pommesCandidateId:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v5 + 328))(a1, a2, a3, a4, a5 & 1);
}

uint64_t getEnumTagSinglePayload for SearchError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SearchError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C8FF8A84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for SearchError(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SearchError()
{
  return &type metadata for SearchError;
}

uint64_t getEnumTagSinglePayload for LocalDomainTypes(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LocalDomainTypes(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C8FF8C20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for LocalDomainTypes(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for LocalDomainTypes()
{
  return &type metadata for LocalDomainTypes;
}

uint64_t dispatch thunk of LocalDomainSearch.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))() & 1;
}

uint64_t dispatch thunk of LocalDomainSearch.search(query:userIds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t dispatch thunk of LocalDomainSearch.search(searchRequest:pegasusResponse:serviceHelper:userIds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 24))();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 224))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 192))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 144))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 208))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 112))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 128))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 128))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 104))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 160))() & 1;
}

void *partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:)@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*(void *)v1 + 120))(&v4);
  *a1 = v4;
  return result;
}

uint64_t partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 232))();
  *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 208))();
  *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 224))();
  *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 128))();
  *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 136))();
  *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  uint64_t result = (*(uint64_t (**)(void))(*(void *)v1 + 168))();
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesSearchError and conformance PommesSearchError()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesSearchError and conformance PommesSearchError;
  if (!lazy protocol witness table cache variable for type PommesSearchError and conformance PommesSearchError)
  {
    type metadata accessor for PommesSearchError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchError and conformance PommesSearchError);
  }
  return result;
}

void outlined consume of Result<[IQFMapsPersonalizationResult], Error>(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t PommesMUXContextManager.__allocating_init(multiUserConnection:isMultiUserSupported:)(uint64_t a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)(a1, a2);
  return v4;
}

uint64_t MUXUserInfo.sharedUserId.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MUXUserInfo.altDSID.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MUXUserInfo.companionName.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

id MUXUserInfo.homeSettings.getter()
{
  return *(id *)(v0 + 48);
}

uint64_t MUXUserInfo.init(sharedUserId:altDSID:companionName:homeSettings:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t MUXContext.allInfo.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*MUXContext.allInfo.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t MUXContext.userInfo(where:is:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  if (a2 && (uint64_t v5 = *(void *)(a3 + 16)) != 0)
  {
    uint64_t v17 = a4;
    swift_bridgeObjectRetain_n();
    unsigned int v6 = (void **)(a3 + 80);
    while (1)
    {
      uint64_t v7 = (uint64_t)*(v6 - 5);
      uint64_t v9 = (uint64_t)*(v6 - 4);
      uint64_t v8 = (uint64_t)*(v6 - 3);
      uint64_t v11 = (uint64_t)*(v6 - 2);
      uint64_t v10 = (uint64_t)*(v6 - 1);
      uint64_t v12 = *v6;
      uint64_t v18 = (uint64_t)*(v6 - 6);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      id v13 = v12;
      swift_getAtKeyPath();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v21 == a1 && v22 == a2)
      {
        swift_bridgeObjectRelease_n();
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v14) {
        break;
      }
      v6 += 7;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v5)
      {
        uint64_t result = swift_bridgeObjectRelease_n();
        uint64_t v16 = 0;
        uint64_t v7 = 0;
        uint64_t v9 = 0;
        uint64_t v8 = 0;
        uint64_t v11 = 0;
        uint64_t v10 = 0;
        id v13 = 0;
        a4 = v17;
        goto LABEL_13;
      }
    }
    uint64_t result = swift_bridgeObjectRelease_n();
LABEL_12:
    a4 = v17;
    uint64_t v16 = v18;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    id v13 = 0;
  }
LABEL_13:
  *a4 = v16;
  a4[1] = v7;
  a4[2] = v9;
  a4[3] = v8;
  a4[4] = v11;
  a4[5] = v10;
  a4[6] = v13;
  return result;
}

SiriInformationSearch::MUXContext __swiftcall MUXContext.init()()
{
  return (SiriInformationSearch::MUXContext)MEMORY[0x1E4FBC860];
}

uint64_t default argument 0 of MUXContext.init(allInfo:)()
{
  return MEMORY[0x1E4FBC860];
}

id PommesMUXContextManager.dispatchGroup.getter()
{
  return *(id *)(v0 + 16);
}

id PommesMUXContextManager.syncQueue.getter()
{
  return *(id *)(v0 + 24);
}

id PommesMUXContextManager.multiUserConnection.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t PommesMUXContextManager.isMultiUserSupported.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t PommesMUXContextManager.cachedContext.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PommesMUXContextManager.cachedContext.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)(uint64_t a1, char a2)
{
  *(void *)(v2 + 16) = dispatch_group_create();
  type metadata accessor for OS_dispatch_queue();
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v5 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  v13[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v8);
  (*(void (**)(char *, void))(v10 + 104))((char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  uint64_t v11 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v2 + 48) = v7;
  *(void *)(v2 + 24) = v11;
  *(void *)(v2 + 32) = a1;
  *(unsigned char *)(v2 + 40) = a2;
  return v2;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

void PommesMUXContextManager.cacheWithMUXContextMessage(msg:)()
{
  uint64_t v64 = type metadata accessor for UserID();
  uint64_t v1 = *(void *)(v64 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v64);
  uint64_t v59 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v3;
  MEMORY[0x1F4188790](v2);
  uint64_t v58 = (char *)&v49 - v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v61 = v0;
  if (*(unsigned char *)(v0 + 40) != 1)
  {
    if (one-time initialization token for pommes != -1) {
      goto LABEL_36;
    }
    goto LABEL_30;
  }
  uint64_t v56 = (uint64_t)&v49 - v7;
  uint64_t v57 = v8;
  uint64_t v9 = MUXContextMessage.userIdToHomeMember.getter();
  int64_t v62 = 0;
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v50 = v9 + 64;
  uint64_t v52 = v9;
  uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  uint64_t v63 = v1 + 16;
  uint64_t v55 = v1 + 32;
  uint64_t v54 = v69;
  uint64_t v53 = v1 + 8;
  int64_t v51 = (unint64_t)(v11 + 63) >> 6;
  int64_t v49 = v51 - 1;
  char v14 = v59;
  if ((v12 & v10) == 0) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v29 = __clz(__rbit64(v13));
  uint64_t v30 = ((v13 - 1) & v13);
  unint64_t v31 = v29 | (v62 << 6);
  uint64_t v32 = v57;
LABEL_8:
  uint64_t v33 = v52;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 16))(v32, *(void *)(v52 + 48) + *(void *)(v1 + 72) * v31, v64);
  uint64_t v34 = *(void *)(v33 + 56);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
  uint64_t v36 = *(void **)(v34 + 8 * v31);
  *(void *)(v32 + *(int *)(v35 + 48)) = v36;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v32, 0, 1, v35);
  id v37 = v36;
  while (1)
  {
    uint64_t v42 = v32;
    uint64_t v43 = v56;
    outlined init with take of (key: UserID, value: SAHomeMemberInfo)?(v42, v56);
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v43, 1, v44) == 1)
    {
      swift_release();
      return;
    }
    uint64_t v15 = *(void **)(v43 + *(int *)(v44 + 48));
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 32);
    uint64_t v17 = v58;
    uint64_t v18 = v43;
    uint64_t v19 = v64;
    v16(v58, v18, v64);
    os_log_t v67 = v30;
    uint64_t v20 = v61;
    dispatch_group_enter(*(dispatch_group_t *)(v61 + 16));
    id v66 = *(id *)(v20 + 32);
    uint64_t v21 = UserID.sharedUserId.getter();
    uint64_t v65 = MEMORY[0x1CB77CA90](v21);
    swift_bridgeObjectRelease();
    uint64_t v22 = swift_allocObject();
    swift_weakInit();
    (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v14, v17, v19);
    unint64_t v23 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v22;
    *(void *)(v24 + 24) = v15;
    v16((char *)(v24 + v23), (uint64_t)v14, v19);
    v69[2] = partial apply for closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:);
    v69[3] = v24;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    v69[0] = thunk for @escaping @callee_guaranteed (@guaranteed AFSharedUserInfo?) -> ();
    v69[1] = &block_descriptor_1;
    uint64_t v25 = _Block_copy(aBlock);
    id v26 = v15;
    swift_release();
    uint64_t v27 = (void *)v65;
    objc_msgSend(v66, sel_getSharedUserInfoForSharedUserID_completion_, v65, v25);
    uint64_t v28 = v25;
    unint64_t v13 = (unint64_t)v67;
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v1 + 8))(v17, v19);
    if (v13) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v38 = v62 + 1;
    uint64_t v32 = v57;
    if (__OFADD__(v62, 1)) {
      break;
    }
    if (v38 < v51)
    {
      unint64_t v39 = *(void *)(v50 + 8 * v38);
      if (v39) {
        goto LABEL_12;
      }
      int64_t v40 = v62 + 2;
      ++v62;
      if (v38 + 1 < v51)
      {
        unint64_t v39 = *(void *)(v50 + 8 * v40);
        if (v39) {
          goto LABEL_15;
        }
        int64_t v62 = v38 + 1;
        if (v38 + 2 < v51)
        {
          unint64_t v39 = *(void *)(v50 + 8 * (v38 + 2));
          if (v39)
          {
            v38 += 2;
            goto LABEL_12;
          }
          int64_t v40 = v38 + 3;
          int64_t v62 = v38 + 2;
          if (v38 + 3 < v51)
          {
            unint64_t v39 = *(void *)(v50 + 8 * v40);
            if (!v39)
            {
              while (1)
              {
                int64_t v38 = v40 + 1;
                if (__OFADD__(v40, 1)) {
                  break;
                }
                if (v38 >= v51)
                {
                  int64_t v62 = v49;
                  goto LABEL_26;
                }
                unint64_t v39 = *(void *)(v50 + 8 * v38);
                ++v40;
                if (v39) {
                  goto LABEL_12;
                }
              }
              __break(1u);
              return;
            }
LABEL_15:
            int64_t v38 = v40;
LABEL_12:
            uint64_t v30 = ((v39 - 1) & v39);
            unint64_t v31 = __clz(__rbit64(v39)) + (v38 << 6);
            int64_t v62 = v38;
            goto LABEL_8;
          }
        }
      }
    }
LABEL_26:
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v32, 1, 1, v41);
    uint64_t v30 = 0;
  }
  __break(1u);
LABEL_36:
  swift_once();
LABEL_30:
  uint64_t v45 = type metadata accessor for Logger();
  __swift_project_value_buffer(v45, (uint64_t)static Logger.pommes);
  os_log_t v67 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v67, v46))
  {
    unint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v47 = 0;
    _os_log_impl(&dword_1C8F83000, v67, v46, "MUXDataProvider - MultiUser not supported on this device", v47, 2u);
    MEMORY[0x1CB77E470](v47, -1, -1);
  }
  os_log_t v48 = v67;
}

void closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UserID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  if (!a1)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.pommes);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_1C8F83000, v34, v35, "Could not fetch sharedUserInfo for sharedUserId", v36, 2u);
      MEMORY[0x1CB77E470](v36, -1, -1);
    }
    goto LABEL_27;
  }
  id v119 = a3;
  dispatch_queue_t v116 = (dispatch_queue_t)((char *)&v101 - v13);
  uint64_t v113 = v14;
  uint64_t v15 = one-time initialization token for pommes;
  id v16 = a1;
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v118 = v8;
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  uint64_t v18 = v16;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v114 = v12;
  uint64_t v115 = a2;
  if (v21)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v111 = swift_slowAlloc();
    aBlock[0] = v111;
    uint64_t v110 = v22;
    *(_DWORD *)uint64_t v22 = 136380675;
    id v109 = v22 + 4;
    unint64_t v23 = v18;
    char v117 = v18;
    uint64_t v24 = v23;
    id v25 = [v23 description];
    uint64_t v26 = v9;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v112 = a4;
    unint64_t v29 = v28;

    uint64_t v30 = v27;
    uint64_t v9 = v26;
    uint64_t v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v18 = v117;
    a4 = v112;
    swift_bridgeObjectRelease();
    unint64_t v31 = v110;
    _os_log_impl(&dword_1C8F83000, v19, v20, "SharedUserInfo: %{private}s", v110, 0xCu);
    uint64_t v32 = v111;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v32, -1, -1);
    MEMORY[0x1CB77E470](v31, -1, -1);
  }
  else
  {
  }
  id v37 = [v18 companionDeviceInfo];
  if (!v37
    || (int64_t v38 = v37,
        id v39 = objc_msgSend(v37, sel_productPrefix),
        v38,
        !v39))
  {
LABEL_20:
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v71))
    {
      long long v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v72 = 0;
      uint64_t v73 = "Could not get companion name for sharedUserId";
LABEL_22:
      _os_log_impl(&dword_1C8F83000, v34, v71, v73, v72, 2u);
      MEMORY[0x1CB77E470](v72, -1, -1);
      uint64_t v74 = v18;
LABEL_26:

      goto LABEL_27;
    }
LABEL_25:
    uint64_t v74 = v34;
    uint64_t v34 = v18;
    goto LABEL_26;
  }
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v42 = v41;

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)Strong + 184))(v40, v42);
  unint64_t v46 = v45;
  swift_release();
  swift_bridgeObjectRelease();
  if (!v46) {
    goto LABEL_20;
  }
  id v47 = objc_msgSend(v119, sel_homeMemberSettings);
  if (!v47)
  {
    swift_bridgeObjectRelease();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v71))
    {
      long long v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v72 = 0;
      uint64_t v73 = "No saved SAHomeUserSettings for sharedUserId";
      goto LABEL_22;
    }
    goto LABEL_25;
  }
  os_log_t v48 = v47;
  id v49 = [v18 iCloudAltDSID];
  if (v49)
  {
    uint64_t v50 = v49;
    id v119 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v52 = v51;

    uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    dispatch_queue_t v54 = v116;
    uint64_t v107 = v9 + 16;
    uint64_t v106 = v53;
    v53((char *)v116, a4, v118);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v105 = v48;
    id v109 = v48;
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.debug.getter();
    int v57 = v56;
    BOOL v58 = os_log_type_enabled(v55, v56);
    char v117 = v18;
    uint64_t v108 = v9;
    uint64_t v111 = v46;
    uint64_t v110 = v52;
    uint64_t v112 = v44;
    if (v58)
    {
      uint64_t v59 = v9;
      uint64_t v60 = swift_slowAlloc();
      uint64_t v103 = (void *)swift_slowAlloc();
      uint64_t v104 = swift_slowAlloc();
      aBlock[0] = v104;
      *(_DWORD *)uint64_t v60 = 141559043;
      uint64_t v121 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v60 + 12) = 2081;
      int v102 = v57;
      os_log_t v101 = v55;
      uint64_t v61 = UserID.sharedUserId.getter();
      uint64_t v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      dispatch_queue_t v63 = v54;
      uint64_t v64 = v118;
      (*(void (**)(dispatch_queue_t, uint64_t))(v59 + 8))(v63, v118);
      *(_WORD *)(v60 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v119, (unint64_t)v52, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v60 + 32) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v46, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v60 + 42) = 2112;
      id v65 = v109;
      uint64_t v121 = (uint64_t)v109;
      id v66 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v67 = v103;
      *uint64_t v103 = v105;

      os_log_t v68 = v101;
      _os_log_impl(&dword_1C8F83000, v101, (os_log_type_t)v102, "Creating new MUXUserInfo with:\n  suid: %{private,mask.hash}s\n  altDSID: %s\n  companionName: %s\n  settings:%@", (uint8_t *)v60, 0x34u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v67, -1, -1);
      uint64_t v69 = v104;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v69, -1, -1);
      MEMORY[0x1CB77E470](v60, -1, -1);

      id v70 = v65;
    }
    else
    {
      dispatch_queue_t v80 = v54;
      uint64_t v64 = v118;
      (*(void (**)(dispatch_queue_t, uint64_t))(v9 + 8))(v80, v118);

      id v70 = v109;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v81 = UserID.sharedUserId.getter();
    unint64_t v83 = v82;
    swift_beginAccess();
    uint64_t v84 = swift_weakLoadStrong();
    if (v84)
    {
      unint64_t v85 = *(void **)(v84 + 24);
      id v86 = v70;
      id v109 = v86;
      dispatch_queue_t v116 = v85;
      swift_release();
      uint64_t v87 = a4;
      unint64_t v88 = v114;
      v106(v114, v87, v64);
      uint64_t v89 = v108;
      unint64_t v90 = (*(unsigned __int8 *)(v108 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
      uint64_t v91 = (char *)swift_allocObject();
      *((void *)v91 + 2) = v115;
      *((void *)v91 + 3) = v81;
      id v92 = v119;
      *((void *)v91 + 4) = v83;
      *((void *)v91 + 5) = v92;
      id v119 = v83;
      uint64_t v94 = v111;
      uint64_t v93 = v112;
      *((void *)v91 + 6) = v110;
      *((void *)v91 + 7) = v93;
      *((void *)v91 + 8) = v94;
      *((void *)v91 + 9) = v86;
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(&v91[v90], v88, v64);
      uint64_t v95 = swift_allocObject();
      unint64_t v96 = partial apply for closure #1 in closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:);
      *(void *)(v95 + 16) = partial apply for closure #1 in closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:);
      *(void *)(v95 + 24) = v91;
      aBlock[4] = (uint64_t)partial apply for thunk for @callee_guaranteed () -> ();
      aBlock[5] = v95;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      void aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
      uint64_t aBlock[3] = (uint64_t)&block_descriptor_14;
      uint64_t v97 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v70 = v109;
      swift_retain();
      swift_release();
      dispatch_queue_t v98 = v116;
      dispatch_sync(v116, v97);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      _Block_release(v97);
      LOBYTE(v98) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v98 & 1) == 0)
      {
LABEL_37:
        swift_beginAccess();
        uint64_t v99 = swift_weakLoadStrong();
        if (v99)
        {
          uint64_t v100 = *(id *)(v99 + 16);
          swift_release();
          dispatch_group_leave(v100);
        }
        outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v96);
        return;
      }
      __break(1u);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    unint64_t v96 = 0;
    goto LABEL_37;
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v77))
  {
    uint64_t v78 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v78 = 0;
    _os_log_impl(&dword_1C8F83000, v34, v77, "No iCloudAltDSID for sharedUserId", v78, 2u);
    MEMORY[0x1CB77E470](v78, -1, -1);
    uint64_t v79 = v18;
  }
  else
  {
    uint64_t v79 = v34;
    uint64_t v34 = v18;
  }

LABEL_27:
  swift_beginAccess();
  uint64_t v75 = swift_weakLoadStrong();
  if (v75)
  {
    uint64_t v76 = *(id *)(v75 + 16);
    swift_release();
    dispatch_group_leave(v76);
  }
}

void closure #1 in closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UserID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v30 = a3;
    uint64_t v10 = *(uint64_t (**)(uint64_t *))(*(void *)Strong + 136);
    outlined retain of MUXUserInfo(a2);
    uint64_t v11 = (void (*)(uint64_t *, void))v10(v32);
    uint64_t v13 = v12;
    uint64_t v14 = *v12;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    void *v13 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      void *v13 = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
      void *v13 = v14;
    }
    v14[2] = v17 + 1;
    uint64_t v18 = &v14[7 * v17];
    long long v19 = *(_OWORD *)a2;
    long long v20 = *(_OWORD *)(a2 + 16);
    long long v21 = *(_OWORD *)(a2 + 32);
    v18[10] = *(void *)(a2 + 48);
    *((_OWORD *)v18 + 3) = v20;
    *((_OWORD *)v18 + 4) = v21;
    *((_OWORD *)v18 + 2) = v19;
    v11(v32, 0);
    swift_release();
    a3 = v30;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a3, v5);
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 141558275;
    uint64_t v31 = 1752392040;
    v32[0] = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 12) = 2081;
    uint64_t v27 = UserID.sharedUserId.getter();
    uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    _os_log_impl(&dword_1C8F83000, v23, v24, "MUXUserInfo for suid(%{private,mask.hash}s) added to cache", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v26, -1, -1);
    MEMORY[0x1CB77E470](v25, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed AFSharedUserInfo?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

Swift::Void __swiftcall PommesMUXContextManager.reset()()
{
  uint64_t v1 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v0 + 136))(v3);
  *uint64_t v2 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  v1(v3, 0);
}

Swift::String_optional __swiftcall PommesMUXContextManager.companionNameFromUserAgentString(_:)(Swift::String a1)
{
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v19[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    v18[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v4, v5, "Getting companion name from UAString: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v7, -1, -1);
    MEMORY[0x1CB77E470](v6, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v19[0] = countAndFlagsBits;
  v19[1] = (uint64_t)object;
  uint64_t v8 = type metadata accessor for CharacterSet();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  CharacterSet.init(charactersIn:)();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v12 = (void *)StringProtocol.components(separatedBy:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (v12[2] >= 3uLL)
  {
    uint64_t v13 = v12[6];
    uint64_t v14 = (void *)v12[7];
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = v13;
  unint64_t v16 = v14;
  result.value._unint64_t object = v16;
  result.value._uint64_t countAndFlagsBits = v15;
  return result;
}

id *PommesMUXContextManager.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PommesMUXContextManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t outlined init with take of (key: UserID, value: SAHomeMemberInfo)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C8FFB870()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C8FFB8A8()
{
  uint64_t v1 = type metadata accessor for UserID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

void partial apply for closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:)(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UserID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void **)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:)(a1, v4, v5, v6);
}

uint64_t outlined destroy of DispatchTime?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C8FFBA50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1C8FFBA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 128);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t initializeBufferWithCopyOfBuffer for MUXUserInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void destroy for MUXUserInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 48);
}

void *initializeWithCopy for MUXUserInfo(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = (void *)a2[6];
  a1[6] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  return a1;
}

void *assignWithCopy for MUXUserInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[6];
  uint64_t v5 = (void *)a1[6];
  a1[6] = v4;
  id v6 = v4;

  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MUXUserInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  id v6 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for MUXUserInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MUXUserInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MUXUserInfo()
{
  return &type metadata for MUXUserInfo;
}

ValueMetadata *type metadata accessor for MUXContext()
{
  return &type metadata for MUXContext;
}

uint64_t type metadata accessor for PommesMUXContextManager()
{
  return self;
}

uint64_t method lookup function for PommesMUXContextManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesMUXContextManager);
}

uint64_t dispatch thunk of PommesMUXContextManager.cachedContext.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of PommesMUXContextManager.cachedContext.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PommesMUXContextManager.cachedContext.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of PommesMUXContextManager.__allocating_init(multiUserConnection:isMultiUserSupported:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of PommesMUXContextManager.cacheWithMUXContextMessage(msg:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of PommesMUXContextManager.wait(timeout:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))() & 1;
}

uint64_t dispatch thunk of PommesMUXContextManager.fetch(timeout:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of PommesMUXContextManager.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PommesMUXContextManager.companionNameFromUserAgentString(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t sub_1C8FFBF40()
{
  uint64_t v1 = type metadata accessor for UserID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 80) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

void partial apply for closure #1 in closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for UserID() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  closure #1 in closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:)(v2, v0 + 24, v3);
}

uint64_t sub_1C8FFC094()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t outlined retain of MUXUserInfo(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return a1;
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioDecade.toString.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDecade();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  uint64_t result = 0;
  if (v6 != *MEMORY[0x1E4F88D90] && v6 != *MEMORY[0x1E4F88DF0])
  {
    uint64_t result = 7548978;
    if (v6 != *MEMORY[0x1E4F88D98])
    {
      if (v6 == *MEMORY[0x1E4F88DA0])
      {
        return 7548979;
      }
      else if (v6 == *MEMORY[0x1E4F88DA8])
      {
        return 7548980;
      }
      else if (v6 == *MEMORY[0x1E4F88DB0])
      {
        return 7548981;
      }
      else if (v6 == *MEMORY[0x1E4F88DB8])
      {
        return 7548982;
      }
      else if (v6 == *MEMORY[0x1E4F88DC0])
      {
        return 7548983;
      }
      else if (v6 == *MEMORY[0x1E4F88DC8])
      {
        return 7548984;
      }
      else if (v6 == *MEMORY[0x1E4F88DD0])
      {
        return 7548985;
      }
      else
      {
        uint64_t result = 0x7330303032;
        if (v6 != *MEMORY[0x1E4F88DD8])
        {
          if (v6 == *MEMORY[0x1E4F88DE0])
          {
            return 0x7330313032;
          }
          else if (v6 == *MEMORY[0x1E4F88DE8])
          {
            return 0x7330323032;
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioRadioType.toString.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioRadioType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  uint64_t result = 0;
  if (v6 != *MEMORY[0x1E4F890E0])
  {
    if (v6 == *MEMORY[0x1E4F890C0])
    {
      return 28001;
    }
    else if (v6 == *MEMORY[0x1E4F890C8])
    {
      return 28006;
    }
    else if (v6 == *MEMORY[0x1E4F890D0])
    {
      return 25704;
    }
    else if (v6 == *MEMORY[0x1E4F890E8])
    {
      return 0x74696C6C65746173;
    }
    else if (v6 == *MEMORY[0x1E4F890D8])
    {
      return 6447460;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return 0;
    }
  }
  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_RequestedMediaType.toString.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E4F89458]) {
    return 0x6E776F6E6B6E75;
  }
  if (v6 == *MEMORY[0x1E4F89460]) {
    return 0x7473696C79616C70;
  }
  if (v6 == *MEMORY[0x1E4F89448]) {
    return 0x74736163646F70;
  }
  if (v6 == *MEMORY[0x1E4F89410]) {
    return 0x636973756DLL;
  }
  if (v6 == *MEMORY[0x1E4F893B0]) {
    return 0x646956636973756DLL;
  }
  if (v6 == *MEMORY[0x1E4F89468]) {
    return 0x6F6F426F69647561;
  }
  if (v6 == *MEMORY[0x1E4F89418]) {
    return 0x6F65646976;
  }
  if (v6 == *MEMORY[0x1E4F89440]) {
    return 0x5573656E757469;
  }
  if (v6 == *MEMORY[0x1E4F893B8]) {
    return 0x74616C69706D6F63;
  }
  if (v6 == *MEMORY[0x1E4F89400]) {
    return 0x6D75626C61;
  }
  if (v6 == *MEMORY[0x1E4F89420]) {
    return 0x747369747261;
  }
  if (v6 == *MEMORY[0x1E4F89430]) {
    return 0x776F68537674;
  }
  if (v6 == *MEMORY[0x1E4F89470]) {
    return 0x6F68536F69646172;
  }
  if (v6 == *MEMORY[0x1E4F893F0]) {
    return 2003789939;
  }
  if (v6 == *MEMORY[0x1E4F893C0]) {
    return 0x6174536F69646172;
  }
  if (v6 == *MEMORY[0x1E4F893D0]) {
    return 0x5374736163646F70;
  }
  if (v6 == *MEMORY[0x1E4F89450]) {
    return 0x6E6F6974617473;
  }
  if (v6 == *MEMORY[0x1E4F893C8]) {
    return 0x616C50636973756DLL;
  }
  if (v6 == *MEMORY[0x1E4F89438]) {
    return 0x65646F73697065;
  }
  if (v6 == *MEMORY[0x1E4F89428]) {
    return 0x656C676E6973;
  }
  if (v6 == *MEMORY[0x1E4F893D8]) {
    return 28773;
  }
  if (v6 == *MEMORY[0x1E4F893E0]) {
    return 28780;
  }
  if (v6 == *MEMORY[0x1E4F893F8]) {
    return 1735290739;
  }
  if (v6 == *MEMORY[0x1E4F89408]) {
    return 0x65726E6567;
  }
  if (v6 == *MEMORY[0x1E4F893E8]) {
    return 1937204590;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioSort.toString.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  uint64_t result = 0;
  if (v6 != *MEMORY[0x1E4F88C10])
  {
    if (v6 == *MEMORY[0x1E4F88C48])
    {
      return 0x6E776F6E6B6E75;
    }
    else if (v6 == *MEMORY[0x1E4F88C40])
    {
      return 0x72616C75706F70;
    }
    else if (v6 == *MEMORY[0x1E4F88C60])
    {
      return 0x616C75706F706E75;
    }
    else if (v6 == *MEMORY[0x1E4F88C18])
    {
      return 1953719650;
    }
    else if (v6 == *MEMORY[0x1E4F88C20])
    {
      return 0x7473726F77;
    }
    else if (v6 == *MEMORY[0x1E4F88C28])
    {
      return 0x74736577656ELL;
    }
    else if (v6 == *MEMORY[0x1E4F88C30])
    {
      return 0x747365646C6FLL;
    }
    else if (v6 == *MEMORY[0x1E4F88C38])
    {
      return 0x74736574746F68;
    }
    else if (v6 == *MEMORY[0x1E4F88C58])
    {
      return 0x6572636F6964656DLL;
    }
    else if (v6 == *MEMORY[0x1E4F88C50])
    {
      return 0x7473657461657267;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return 0;
    }
  }
  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationFrequencyStr.getter()
{
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationFrequency.getter();
  if (v0 < 0.01) {
    return 0;
  }
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationFrequency.getter();
  return Double.description.getter();
}

void *static OnScreenContextType.allCases.getter()
{
  return &outlined read-only object #0 of static OnScreenContextType.allCases.getter;
}

uint64_t OnScreenContextType.USOEntityBuilder.getter(char a1)
{
  if (a1)
  {
    type metadata accessor for UsoEntityBuilder_common_Uri();
    swift_allocObject();
    return UsoEntityBuilder_common_Uri.init()();
  }
  else
  {
    type metadata accessor for UsoEntityBuilder_common_App();
    swift_allocObject();
    return UsoEntityBuilder_common_App.init()();
  }
}

uint64_t OnScreenContextType.requiresDomainAffinityTranslation.getter()
{
  return 1;
}

uint64_t OnScreenContextType.domainAffinityKVStore.getter(char a1)
{
  if (a1) {
    uint64_t v1 = 0x6E65657263536E6FLL;
  }
  else {
    uint64_t v1 = 0xD000000000000013;
  }
  type metadata accessor for DomainAffinityKVStoreManager();
  uint64_t v2 = static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t OnScreenContextType.rawValue.getter(char a1)
{
  if (a1) {
    return 0x6E65657263536E6FLL;
  }
  else {
    return 0xD000000000000013;
  }
}

Swift::String __swiftcall OnScreenContextType.normalize(_:)(Swift::String a1)
{
  char v2 = v1;
  Swift::String v3 = String.lowercased()();
  uint64_t countAndFlagsBits = v3._countAndFlagsBits;
  unint64_t object = v3._object;
  if (v2)
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    MEMORY[0x1F4188790](v9 - 8);
    uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    URL.init(string:)();
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      uint64_t v14 = URL.host.getter();
      unint64_t v16 = v15;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
      if (v16)
      {
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v14;
        unint64_t object = v16;
      }
    }
    v31._uint64_t countAndFlagsBits = countAndFlagsBits;
    v31._unint64_t object = object;
    uint64_t v29 = 11885;
    unint64_t v30 = 0xE200000000000000;
    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    long long v19 = v18;
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = v17;
    v31._unint64_t object = v19;
    uint64_t v29 = 779581303;
    unint64_t v30 = 0xE400000000000000;
    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    uint64_t v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = v20;
    v31._unint64_t object = v22;
    uint64_t v29 = 1836016430;
    unint64_t v30 = 0xE400000000000000;
    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    uint64_t v6 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v8 = v23;
  }
  else
  {
    Swift::String v31 = v3;
    uint64_t v29 = 778923875;
    unint64_t v30 = 0xE400000000000000;
    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v6 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v8 = v7;
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = v6;
  uint64_t v25 = v8;
  result._unint64_t object = v25;
  result._uint64_t countAndFlagsBits = v24;
  return result;
}

uint64_t OnScreenContextType.GeneratedClientEntity.clientEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t OnScreenContextType.GeneratedClientEntity.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for OnScreenContextType.GeneratedClientEntity() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OnScreenContextType.GeneratedClientEntity.value.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for OnScreenContextType.GeneratedClientEntity() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

double OnScreenContextType.GeneratedClientEntity.score.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for OnScreenContextType.GeneratedClientEntity() + 28));
}

int *OnScreenContextType.GeneratedClientEntity.init(clientEntity:identifier:value:score:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(a6, a1, v14);
  Swift::String result = (int *)type metadata accessor for OnScreenContextType.GeneratedClientEntity();
  unint64_t v16 = (void *)(a6 + result[5]);
  void *v16 = a2;
  v16[1] = a3;
  uint64_t v17 = (void *)(a6 + result[6]);
  *uint64_t v17 = a4;
  v17[1] = a5;
  *(double *)(a6 + result[7]) = a7;
  return result;
}

uint64_t OnScreenContextType.generateClientEntity(context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  id v92 = a4;
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  uint64_t v84 = *(void *)(v7 - 8);
  uint64_t v85 = v7;
  MEMORY[0x1F4188790](v7);
  id v86 = (char *)v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v89 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v87 = *(void *)(v89 - 8);
  MEMORY[0x1F4188790](v89);
  unint64_t v88 = (char *)v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for UsoIdentifier();
  uint64_t v13 = *(void *)(v91 - 8);
  MEMORY[0x1F4188790](v91);
  uint64_t v15 = (char *)v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v16 = a3 & 1;
  if (a3) {
    uint64_t v17 = 0x6E65657263536E6FLL;
  }
  else {
    uint64_t v17 = 0xD000000000000013;
  }
  if (a3) {
    unint64_t v18 = 0xEB00000000495255;
  }
  else {
    unint64_t v18 = 0x80000001C919BE40;
  }
  uint64_t v98 = v17;
  unint64_t v99 = v18;
  v19._uint64_t countAndFlagsBits = 0x6E69616D6F44;
  v19._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  swift_bridgeObjectRetain();
  uint64_t v93 = v15;
  UsoIdentifier.init(value:appBundleId:namespace:)();
  double v97 = 1.0;
  type metadata accessor for DomainAffinityKVStoreManager();
  uint64_t v90 = v17;
  uint64_t v20 = static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(v17);
  swift_bridgeObjectRelease();
  uint64_t v21 = swift_allocObject();
  *(unsigned char *)(v21 + 16) = v16;
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(Swift::String), uint64_t))(*(void *)v20 + 152))(a1, a2, partial apply for implicit closure #2 in implicit closure #1 in OnScreenContextType.generateClientEntity(context:), v21);
  uint64_t v24 = v23;
  float v26 = v25;
  swift_release();
  swift_release();
  if (!v24)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      Swift::String v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v94 = v32;
      *(_DWORD *)Swift::String v31 = 136315138;
      uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v18, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v29, v30, "[OnScreenContextUtils][%s] Failed to create client entity due to domain affinity translation failure", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v32, -1, -1);
      MEMORY[0x1CB77E470](v31, -1, -1);

      (*(void (**)(char *, uint64_t))(v13 + 8))(v93, v91);
LABEL_28:
      uint64_t v57 = type metadata accessor for OnScreenContextType.GeneratedClientEntity();
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v92, 1, 1, v57);
    }
LABEL_27:

    (*(void (**)(char *, uint64_t))(v13 + 8))(v93, v91);
    goto LABEL_28;
  }
  double v97 = v26;
  if (v16)
  {
    type metadata accessor for UsoEntityBuilder_common_Uri();
    swift_allocObject();
    uint64_t v27 = UsoEntityBuilder_common_Uri.init()();
  }
  else
  {
    type metadata accessor for UsoEntityBuilder_common_App();
    swift_allocObject();
    uint64_t v27 = UsoEntityBuilder_common_App.init()();
  }
  uint64_t v33 = v27;
  uint64_t v94 = v22;
  uint64_t v95 = v24;
  swift_bridgeObjectRetain();
  dispatch thunk of UsoEntityBuilder.setAsHelper<A>(attributeName:value:)();
  swift_bridgeObjectRelease();
  uint64_t v94 = v22;
  uint64_t v95 = v24;
  swift_bridgeObjectRetain();
  dispatch thunk of UsoEntityBuilder.setAsHelper<A>(attributeName:value:)();
  swift_bridgeObjectRelease();
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
  uint64_t v34 = MEMORY[0x1CB77A2C0](v33);
  if (!v34)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.pommes);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      uint64_t v94 = v53;
      *(_DWORD *)uint64_t v52 = 136315138;
      uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v18, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v29, v51, "[OnScreenContextUtils][%s] Failed to create client entity due to USO entity conversion failure", v52, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v53, -1, -1);
      MEMORY[0x1CB77E470](v52, -1, -1);
      swift_release();

      (*(void (**)(char *, uint64_t))(v13 + 8))(v93, v91);
      goto LABEL_28;
    }
    swift_release();
    goto LABEL_27;
  }
  uint64_t v35 = v34;
  uint64_t v79 = v22;
  uint64_t v36 = static UsoBuilderConversionUtils.convertEntityToGraph(entity:)();
  uint64_t v37 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v12, 1, 1, v37);
  uint64_t v83 = v35;
  uint64_t v38 = static UsoBuilderConversionUtils.convertEntityToRootedEntityGraph(entity:options:)();
  outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  uint64_t v40 = __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
  swift_retain_n();
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v81 = v13;
  uint64_t v82 = v38;
  if (v43)
  {
    uint64_t v44 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    v78[1] = v40;
    uint64_t v46 = v45;
    uint64_t v94 = v45;
    *(_DWORD *)uint64_t v44 = 136315394;
    v78[2] = v33;
    uint64_t v80 = v36;
    uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v18, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 12) = 2080;
    uint64_t v47 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
    uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v94);
    uint64_t v49 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v36 = v49;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v41, v42, "[OnScreenContextUtils][%s] Created USO graph for client entity: %s", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v46, -1, -1);
    MEMORY[0x1CB77E470](v44, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  dispatch_queue_t v54 = v92;
  uint64_t v55 = v88;
  unint64_t v56 = v89;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  lazy protocol witness table accessor for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, MEMORY[0x1E4FA27F0]);
  unint64_t v88 = (char *)Message.serializedData(partial:)();
  unint64_t v89 = v59;
  uint64_t v80 = v36;
  (*(void (**)(char *, unint64_t))(v87 + 8))(v55, v56);
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    dispatch_queue_t v63 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    uint64_t v94 = v64;
    *(_DWORD *)dispatch_queue_t v63 = 136315138;
    uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v18, &v94);
    dispatch_queue_t v54 = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v60, v61, "[OnScreenContextUtils][%s] Successfully created client entity", v63, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v64, -1, -1);
    MEMORY[0x1CB77E470](v63, -1, -1);
  }

  uint64_t v65 = v81;
  uint64_t v67 = v84;
  uint64_t v66 = v85;
  id v92 = v78;
  MEMORY[0x1F4188790](v68);
  uint64_t v70 = (uint64_t)v88;
  unint64_t v69 = v89;
  v78[-4] = v88;
  v78[-3] = v69;
  v78[-2] = &v97;
  lazy protocol witness table accessor for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_ClientEntity and conformance Apple_Parsec_Siri_Context_ClientEntity, MEMORY[0x1E4F88EC8]);
  os_log_type_t v71 = v86;
  static Message.with(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v93, v91);
  outlined consume of Data._Representation(v70, v89);
  uint64_t v72 = v98;
  unint64_t v73 = v99;
  double v74 = v97;
  (*(void (**)(void *, char *, uint64_t))(v67 + 32))(v54, v71, v66);
  uint64_t v75 = (int *)type metadata accessor for OnScreenContextType.GeneratedClientEntity();
  uint64_t v76 = (void *)((char *)v54 + v75[5]);
  *uint64_t v76 = v72;
  v76[1] = v73;
  os_log_type_t v77 = (void *)((char *)v54 + v75[6]);
  uint64_t *v77 = v79;
  v77[1] = v24;
  *(double *)((char *)v54 + v75[7]) = v74;
  return (*(uint64_t (**)(void *, void, uint64_t, int *))(*((void *)v75 - 1) + 56))(v54, 0, 1, v75);
}

uint64_t OnScreenContextType.parseClientEntity(clientEntity:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  LODWORD(v66) = a2;
  uint64_t v67 = a3;
  uint64_t v4 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ClientEntity?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  unint64_t v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Apple_Parsec_Siri_Context_ClientEntity?(a1, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    uint64_t v70 = Apple_Parsec_Siri_Context_ClientEntity.usoGraph.getter();
    uint64_t v71 = v19;
    uint64_t v69 = 0;
    memset(v68, 0, sizeof(v68));
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, MEMORY[0x1E4FA27F0]);
    Message.init<A>(contiguousBytes:extensions:partial:options:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    if (static UsoConversionUtils.extractFirstEntityFromGraph(graph:)())
    {
      uint64_t v30 = UsoEntity.attributes.getter();
      if (*(void *)(v30 + 16)
        && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000), (v32 & 1) != 0))
      {
        uint64_t v33 = *(void *)(*(void *)(v30 + 56) + 8 * v31);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if ((v33 & 0xC000000000000001) != 0)
        {
          uint64_t v34 = MEMORY[0x1CB77D510](0, v33);
        }
        else
        {
          if (!*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_44;
          }
          uint64_t v34 = *(void *)(v33 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        uint64_t v35 = UsoEntity.attributes.getter();
        if (*(void *)(v35 + 16))
        {
          unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(0x65756C6176, 0xE500000000000000);
          if (v37)
          {
            uint64_t v64 = v34;
            uint64_t v30 = *(void *)(*(void *)(v35 + 56) + 8 * v36);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if ((v30 & 0xC000000000000001) == 0)
            {
              if (!*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_46;
              }
              uint64_t v65 = *(void *)(v30 + 32);
              swift_retain();
LABEL_26:
              swift_bridgeObjectRelease();
              if (one-time initialization token for pommes == -1)
              {
LABEL_27:
                uint64_t v38 = type metadata accessor for Logger();
                __swift_project_value_buffer(v38, (uint64_t)static Logger.pommes);
                uint64_t v39 = Logger.logObject.getter();
                os_log_type_t v40 = static os_log_type_t.debug.getter();
                int v41 = v40;
                if (os_log_type_enabled(v39, v40))
                {
                  id v63 = v39;
                  uint64_t v42 = swift_slowAlloc();
                  LODWORD(v62) = v41;
                  BOOL v43 = (uint8_t *)v42;
                  uint64_t v44 = swift_slowAlloc();
                  uint64_t v61 = v44;
                  uint64_t v60 = v43;
                  *(_DWORD *)BOOL v43 = 136315138;
                  *(void *)&v68[0] = v44;
                  if (v66) {
                    uint64_t v45 = 0x6E65657263536E6FLL;
                  }
                  else {
                    uint64_t v45 = 0xD000000000000013;
                  }
                  if (v66) {
                    unint64_t v46 = 0xEB00000000495255;
                  }
                  else {
                    unint64_t v46 = 0x80000001C919BE40;
                  }
                  uint64_t v66 = (int *)(v43 + 4);
                  uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)v68);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  uint64_t v47 = v60;
                  _os_log_impl(&dword_1C8F83000, (os_log_t)v63, (os_log_type_t)v62, "[OnScreenContextUtils][%s] Successfully parsed client entity", v60, 0xCu);
                  uint64_t v48 = v61;
                  swift_arrayDestroy();
                  MEMORY[0x1CB77E470](v48, -1, -1);
                  MEMORY[0x1CB77E470](v47, -1, -1);
                }
                else
                {
                }
                uint64_t v49 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (usoIdentifier: UsoIdentifier, usoNameAttribute: UsoValue, usoValueAttribute: UsoValue, score: Double));
                uint64_t v50 = v49[12];
                uint64_t v61 = v49[16];
                uint64_t v62 = v50;
                uint64_t v66 = v49;
                id v63 = (id)v49[20];
                uint64_t result = UsoEntity.usoIdentifiers.getter();
                if (*(void *)(result + 16))
                {
                  uint64_t v51 = result;
                  uint64_t v52 = type metadata accessor for UsoIdentifier();
                  uint64_t v53 = v67;
                  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(v67, v51+ ((*(unsigned __int8 *)(*(void *)(v52 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v52 - 8) + 80)), v52);
                  swift_bridgeObjectRelease();
                  uint64_t v54 = v65;
                  *(void *)(v53 + v62) = v64;
                  *(void *)(v53 + v61) = v54;
                  uint64_t v65 = v54;
                  swift_retain();
                  swift_retain();
                  Apple_Parsec_Siri_Context_ClientEntity.score.getter();
                  uint64_t v56 = v55;
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
                  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
                  BOOL v58 = v66;
                  uint64_t v57 = v67;
                  *(void *)((char *)v63 + v67) = v56;
                  return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v58 - 1) + 56))(v57, 0, 1, v58);
                }
                else
                {
                  __break(1u);
                }
                return result;
              }
LABEL_46:
              swift_once();
              goto LABEL_27;
            }
LABEL_44:
            uint64_t v65 = MEMORY[0x1CB77D510](0, v30);
            goto LABEL_26;
          }
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    goto LABEL_4;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ClientEntity?);
LABEL_4:
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    *(void *)&v68[0] = v24;
    if (v66) {
      uint64_t v25 = 0x6E65657263536E6FLL;
    }
    else {
      uint64_t v25 = 0xD000000000000013;
    }
    if (v66) {
      unint64_t v26 = 0xEB00000000495255;
    }
    else {
      unint64_t v26 = 0x80000001C919BE40;
    }
    uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v21, v22, "[OnScreenContextUtils][%s] Failed to parse client entity", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v24, -1, -1);
    MEMORY[0x1CB77E470](v23, -1, -1);
  }

  uint64_t v27 = v67;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (usoIdentifier: UsoIdentifier, usoNameAttribute: UsoValue, usoValueAttribute: UsoValue, score: Double));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
}

SiriInformationSearch::OnScreenContextType_optional __swiftcall OnScreenContextType.init(rawValue:)(Swift::String rawValue)
{
  unint64_t object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._unint64_t object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of OnScreenContextType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = SiriInformationSearch_OnScreenContextType_onScreenURI;
  }
  else {
    v4.value = SiriInformationSearch_OnScreenContextType_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OnScreenContextType(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    unint64_t v3 = 0x6E65657263536E6FLL;
  }
  else {
    unint64_t v3 = 0xD000000000000013;
  }
  if (v2) {
    unint64_t v4 = 0x80000001C919BE40;
  }
  else {
    unint64_t v4 = 0xEB00000000495255;
  }
  if (*a2) {
    unint64_t v5 = 0x6E65657263536E6FLL;
  }
  else {
    unint64_t v5 = 0xD000000000000013;
  }
  if (*a2) {
    unint64_t v6 = 0xEB00000000495255;
  }
  else {
    unint64_t v6 = 0x80000001C919BE40;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OnScreenContextType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OnScreenContextType()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OnScreenContextType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance OnScreenContextType@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of OnScreenContextType.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance OnScreenContextType(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000013;
  if (*v1) {
    unint64_t v2 = 0x6E65657263536E6FLL;
  }
  unint64_t v3 = 0x80000001C919BE40;
  if (*v1) {
    unint64_t v3 = 0xEB00000000495255;
  }
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance OnScreenContextType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance OnScreenContextType;
}

uint64_t sub_1C8FFEF80()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in OnScreenContextType.generateClientEntity(context:)(Swift::String a1)
{
  return OnScreenContextType.normalize(_:)(a1)._countAndFlagsBits;
}

uint64_t partial apply for closure #1 in OnScreenContextType.generateClientEntity(context:)()
{
  outlined copy of Data._Representation(*(void *)(v0 + 16), *(void *)(v0 + 24));
  Apple_Parsec_Siri_Context_ClientEntity.usoGraph.setter();
  return Apple_Parsec_Siri_Context_ClientEntity.score.setter();
}

uint64_t outlined init with copy of Apple_Parsec_Siri_Context_ClientEntity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ClientEntity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  unint64_t v2 = (void (*)(uint64_t))MEMORY[0x1E4F89478];
  lazy protocol witness table accessor for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, MEMORY[0x1E4F89478]);
  uint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x1E4F89478], &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, v2, MEMORY[0x1E4F89488]);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  unint64_t v2 = v1;
  uint64_t v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  unint64_t v2 = (void (*)(uint64_t))MEMORY[0x1E4FA3600];
  lazy protocol witness table accessor for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph(&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
  uint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x1E4FA3600], (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, v2, MEMORY[0x1E4FA3610]);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for PommesCandidateId();
  unint64_t v2 = (void (*)(uint64_t))MEMORY[0x1E4F9FE60];
  lazy protocol witness table accessor for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph((unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId, MEMORY[0x1E4F9FE60]);
  uint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x1E4F9FE60], (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId, v2, MEMORY[0x1E4F9FE70]);
}

{
  Swift::Int v2;
  uint64_t vars8;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  unint64_t v2 = (void (*)(uint64_t))MEMORY[0x1E4F88FD0];
  lazy protocol witness table accessor for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
  uint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x1E4F88FD0], &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, v2, MEMORY[0x1E4F88FE0]);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t lazy protocol witness table accessor for type OnScreenContextType and conformance OnScreenContextType()
{
  unint64_t result = lazy protocol witness table cache variable for type OnScreenContextType and conformance OnScreenContextType;
  if (!lazy protocol witness table cache variable for type OnScreenContextType and conformance OnScreenContextType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScreenContextType and conformance OnScreenContextType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OnScreenContextType] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [OnScreenContextType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OnScreenContextType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OnScreenContextType]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OnScreenContextType] and conformance [A]);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OnScreenContextType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C8FFF334);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OnScreenContextType()
{
  return &type metadata for OnScreenContextType;
}

uint64_t *initializeBufferWithCopyOfBuffer for OnScreenContextType.GeneratedClientEntity(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    void *v13 = *v14;
    v13[1] = v15;
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for OnScreenContextType.GeneratedClientEntity(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OnScreenContextType.GeneratedClientEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OnScreenContextType.GeneratedClientEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for OnScreenContextType.GeneratedClientEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for OnScreenContextType.GeneratedClientEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnScreenContextType.GeneratedClientEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C8FFF7C8);
}

uint64_t sub_1C8FFF7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for OnScreenContextType.GeneratedClientEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C8FFF8A0);
}

uint64_t sub_1C8FFF8A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for OnScreenContextType.GeneratedClientEntity()
{
  uint64_t result = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1 & 1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1 & 1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(uint64_t))CommonAudio.Decade.rawValue.getter, (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(uint64_t))CommonAudio.MediaType.rawValue.getter, (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a2(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();

  return a3(a1, v5);
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Logger.pommes.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for pommes, MEMORY[0x1E4FBD360], (uint64_t)static Logger.pommes);
}

uint64_t Signposter.pommes.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for pommes, MEMORY[0x1E4FBD330], (uint64_t)static Signposter.pommes);
}

char **LogConstants.Signpost.search.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.search;
}

char **LogConstants.Signpost.searchPreflight.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.searchPreflight;
}

uint64_t one-time initialization function for pommes(uint64_t a1)
{
  return one-time initialization function for pommes(a1, static Logger.pommes);
}

{
  return one-time initialization function for pommes(a1, static Signposter.pommes, &one-time initialization token for pommes, (uint64_t)static Logger.pommes);
}

void *LogConstants.subsystem.unsafeMutableAddressor()
{
  return &static LogConstants.subsystem;
}

const char *LogConstants.Category.pommes.unsafeMutableAddressor()
{
  return "pommes";
}

uint64_t static Logger.pommes.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for pommes, MEMORY[0x1E4FBD360], (uint64_t)static Logger.pommes, a1);
}

uint64_t one-time initialization function for music(uint64_t a1)
{
  return one-time initialization function for pommes(a1, static Logger.music);
}

{
  return one-time initialization function for pommes(a1, static Signposter.music, &one-time initialization token for music, (uint64_t)static Logger.music);
}

const char *LogConstants.Category.music.unsafeMutableAddressor()
{
  return "music";
}

uint64_t Logger.music.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for music, MEMORY[0x1E4FBD360], (uint64_t)static Logger.music);
}

uint64_t static Logger.music.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for music, MEMORY[0x1E4FBD360], (uint64_t)static Logger.music, a1);
}

uint64_t one-time initialization function for insightRequestSummaryLogger()
{
  uint64_t v0 = type metadata accessor for InsightRequestSummaryLogger();
  __swift_allocate_value_buffer(v0, static Logger.insightRequestSummaryLogger);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.insightRequestSummaryLogger);
  return InsightRequestSummaryLogger.init()();
}

uint64_t Logger.insightRequestSummaryLogger.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for insightRequestSummaryLogger, MEMORY[0x1E4FA3FE0], (uint64_t)static Logger.insightRequestSummaryLogger);
}

uint64_t static Logger.insightRequestSummaryLogger.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for insightRequestSummaryLogger, MEMORY[0x1E4FA3FE0], (uint64_t)static Logger.insightRequestSummaryLogger, a1);
}

uint64_t one-time initialization function for sage(uint64_t a1)
{
  return one-time initialization function for pommes(a1, static Logger.sage);
}

{
  return one-time initialization function for pommes(a1, static Signposter.sage, &one-time initialization token for sage, (uint64_t)static Logger.sage);
}

const char *LogConstants.Category.sage.unsafeMutableAddressor()
{
  return "sage";
}

uint64_t Logger.sage.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for sage, MEMORY[0x1E4FBD360], (uint64_t)static Logger.sage);
}

uint64_t static Logger.sage.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for sage, MEMORY[0x1E4FBD360], (uint64_t)static Logger.sage, a1);
}

uint64_t one-time initialization function for overrides(uint64_t a1)
{
  return one-time initialization function for pommes(a1, static Logger.overrides);
}

uint64_t one-time initialization function for pommes(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

const char *LogConstants.Category.overrides.unsafeMutableAddressor()
{
  return "overrides";
}

uint64_t Logger.overrides.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for overrides, MEMORY[0x1E4FBD360], (uint64_t)static Logger.overrides);
}

uint64_t static Logger.overrides.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for overrides, MEMORY[0x1E4FBD360], (uint64_t)static Logger.overrides, a1);
}

uint64_t static Signposter.pommes.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for pommes, MEMORY[0x1E4FBD330], (uint64_t)static Signposter.pommes, a1);
}

uint64_t Signposter.music.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(one-time initialization token for music, MEMORY[0x1E4FBD330], (uint64_t)static Signposter.music);
}

uint64_t static Signposter.music.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(one-time initialization token for music, MEMORY[0x1E4FBD330], (uint64_t)static Signposter.music, a1);
}

uint64_t one-time initialization function for loc()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v0, static Signposter.loc);
  __swift_project_value_buffer(v0, (uint64_t)static Signposter.loc);
  return OSSignposter.init(subsystem:category:)();
}

void *LogConstants.Category.locationManager.unsafeMutableAddressor()
{
  return &static LogConstants.Category.locationManager;
}

uint64_t Signposter.loc.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for loc, MEMORY[0x1E4FBD330], (uint64_t)static Signposter.loc);
}

uint64_t static Signposter.loc.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for loc, MEMORY[0x1E4FBD330], (uint64_t)static Signposter.loc, a1);
}

uint64_t one-time initialization function for pommes(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v11, a2);
  __swift_project_value_buffer(v11, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v12 = __swift_project_value_buffer(v7, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  return OSSignposter.init(logger:)();
}

uint64_t Signposter.sage.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for sage, MEMORY[0x1E4FBD330], (uint64_t)static Signposter.sage);
}

uint64_t Logger.pommes.unsafeMutableAddressor(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = a2(0);

  return __swift_project_value_buffer(v5, a3);
}

uint64_t static Signposter.sage.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for sage, MEMORY[0x1E4FBD330], (uint64_t)static Signposter.sage, a1);
}

uint64_t static Logger.pommes.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = __swift_project_value_buffer(v7, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

uint64_t OSSignposter.makeSignpostID(from:)(uint64_t a1)
{
  if (a1)
  {
    swift_unknownObjectRetain();
    OSSignposter.logHandle.getter();
    return OSSignpostID.init(log:object:)();
  }
  else
  {
    OSSignposter.logHandle.getter();
    return OSSignpostID.init(log:)();
  }
}

uint64_t SignpostToken.init(name:id:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3;
  uint64_t v9 = type metadata accessor for SignpostToken();
  uint64_t v10 = a6 + *(int *)(v9 + 20);
  uint64_t v11 = type metadata accessor for OSSignpostID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a4, v11);
  *(void *)(a6 + *(int *)(v9 + 24)) = a5;
  return result;
}

uint64_t SignpostToken.name.getter()
{
  return *(void *)v0;
}

uint64_t SignpostToken.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SignpostToken() + 20);
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t SignpostToken.state.getter()
{
  type metadata accessor for SignpostToken();

  return swift_retain();
}

unint64_t static LogConstants.subsystem.getter()
{
  return 0xD000000000000010;
}

uint64_t static LogConstants.Category.pommes.getter()
{
  return 0x73656D6D6F70;
}

uint64_t static LogConstants.Category.music.getter()
{
  return 0x636973756DLL;
}

uint64_t static LogConstants.Category.locationManager.getter()
{
  return 0x6E6F697461636F6CLL;
}

const char *LogConstants.Category.pommesBridge.unsafeMutableAddressor()
{
  return "PommesBridge";
}

uint64_t static LogConstants.Category.pommesBridge.getter()
{
  return 0x724273656D6D6F50;
}

uint64_t static LogConstants.Category.sage.getter()
{
  return 1701273971;
}

uint64_t static LogConstants.Category.overrides.getter()
{
  return 0x656469727265766FLL;
}

const char *static LogConstants.Signpost.search.getter()
{
  return "search";
}

char **LogConstants.Signpost.searchRemote.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.searchRemote;
}

const char *static LogConstants.Signpost.searchRemote.getter()
{
  return "search.remote";
}

char **LogConstants.Signpost.searchClient.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.searchClient;
}

const char *static LogConstants.Signpost.searchClient.getter()
{
  return "search.client";
}

const char *static LogConstants.Signpost.searchPreflight.getter()
{
  return "search.preflight";
}

char **LogConstants.Signpost.LocationManager.startup.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.LocationManager.startup;
}

const char *static LogConstants.Signpost.LocationManager.startup.getter()
{
  return "locationManager.startup";
}

char **LogConstants.Signpost.LocationManager.geocode.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.LocationManager.geocode;
}

const char *static LogConstants.Signpost.LocationManager.geocode.getter()
{
  return "locationManager.geocode";
}

char **LogConstants.Signpost.Proxy.createQueryContext.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.Proxy.createQueryContext;
}

const char *static LogConstants.Signpost.Proxy.createQueryContext.getter()
{
  return "proxy.createQueryContext";
}

char **LogConstants.Signpost.Proxy.constructSearchRequest.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.Proxy.constructSearchRequest;
}

const char *static LogConstants.Signpost.Proxy.constructSearchRequest.getter()
{
  return "proxy.constructSearchRequest";
}

char **LogConstants.Signpost.Proxy.request.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.Proxy.request;
}

const char *static LogConstants.Signpost.Proxy.request.getter()
{
  return "proxy.request";
}

char **LogConstants.Signpost.Proxy.ampSlice.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.Proxy.ampSlice;
}

const char *static LogConstants.Signpost.Proxy.ampSlice.getter()
{
  return "proxy.AMPSlice";
}

char **LogConstants.Signpost.Proxy.userVocabSpans.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.Proxy.userVocabSpans;
}

const char *static LogConstants.Signpost.Proxy.userVocabSpans.getter()
{
  return "proxy.userVocabSpans";
}

char **LogConstants.Signpost.TapEngagement.request.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.TapEngagement.request;
}

const char *static LogConstants.Signpost.TapEngagement.request.getter()
{
  return "tapEngagement.request";
}

uint64_t closure #1 in _globalStringTablePointerOfStaticString(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

ValueMetadata *type metadata accessor for Signposter()
{
  return &type metadata for Signposter;
}

void *initializeBufferWithCopyOfBuffer for SignpostToken(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = type metadata accessor for OSSignpostID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    *(void *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for SignpostToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for SignpostToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for SignpostToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignpostToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9001490);
}

uint64_t sub_1C9001490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SignpostToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9001568);
}

uint64_t sub_1C9001568(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for SignpostToken()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LogConstants()
{
  return &type metadata for LogConstants;
}

ValueMetadata *type metadata accessor for LogConstants.Category()
{
  return &type metadata for LogConstants.Category;
}

ValueMetadata *type metadata accessor for LogConstants.Signpost()
{
  return &type metadata for LogConstants.Signpost;
}

ValueMetadata *type metadata accessor for LogConstants.Signpost.LocationManager()
{
  return &type metadata for LogConstants.Signpost.LocationManager;
}

ValueMetadata *type metadata accessor for LogConstants.Signpost.Proxy()
{
  return &type metadata for LogConstants.Signpost.Proxy;
}

ValueMetadata *type metadata accessor for LogConstants.Signpost.TapEngagement()
{
  return &type metadata for LogConstants.Signpost.TapEngagement;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t PommesServerFallbackPreferences.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t PommesServerFallbackPreferences.init(_:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

Swift::Bool __swiftcall PommesServerFallbackPreferences.shouldDisableServerFallbackNL(isDomainDirected:)(Swift::Bool isDomainDirected)
{
  Swift::Int v2 = &selRef_shouldDisableServerFallbackDomain;
  if (!isDomainDirected) {
    Swift::Int v2 = &selRef_shouldDisableServerFallbackNL;
  }
  return [*(id *)(v1 + 16) *v2];
}

uint64_t PommesServerFallbackPreferences.deinit()
{
  return v0;
}

uint64_t PommesServerFallbackPreferences.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:) in conformance PommesServerFallbackPreferences()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))() & 1;
}

uint64_t type metadata accessor for PommesServerFallbackPreferences()
{
  return self;
}

uint64_t method lookup function for PommesServerFallbackPreferences(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesServerFallbackPreferences);
}

uint64_t dispatch thunk of PommesServerFallbackPreferences.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PommesServerFallbackPreferences.shouldDisableServerFallbackNL(isDomainDirected:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12LazySequenceVySay32SiriReferenceResolutionDataModel11RRCandidateVGG_AH8RREntityVs5NeverOTg504_s12f90Ontology9UsoEntityC0A17InformationSearchE14resolveFromSRR8rrClient15useSRREntityAPISay0A28ghi6Model8l50VGSg0aoP027RRReferenceResolverProtocol_p_SbtFAjH11K53Vcfu0_32a67697f07dd709dabbe90d955a98a5bfApJTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  uint64_t v15 = type metadata accessor for RREntity();
  uint64_t v3 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  int v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    v13[1] = v1;
    uint64_t v16 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v7 = v16;
    uint64_t v8 = *(void *)(type metadata accessor for RRCandidate() - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v14 = *(void *)(v8 + 72);
    do
    {
      RRCandidate.entity.getter();
      uint64_t v16 = v7;
      unint64_t v11 = *(void *)(v7 + 16);
      unint64_t v10 = *(void *)(v7 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v7 = v16;
      }
      *(void *)(v7 + 16) = v11 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v11, v5, v15);
      v9 += v14;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(void *a1, char a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  int64_t v6 = __swift_project_boxed_opaque_existential_1(a1, v4);

  return specialized UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)((uint64_t)v6, a2, v2, v4, v5);
}

uint64_t partial apply for closure #2 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)()
{
  return closure #1 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(*(void **)(v0 + 16), *(void *)(v0 + 24), MEMORY[0x1E4FA3DA8]);
}

uint64_t dispatch thunk of PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

id CNContactStore.fetchMeCards()()
{
  v41[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v1 = self;
  Class isa = (Class)objc_msgSend(v1, sel_descriptorsForRequiredKeys);
  if (!isa)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  v41[0] = 0;
  id v3 = objc_msgSend(v0, sel__crossPlatformUnifiedMeContactWithKeysToFetch_error_, isa, v41);

  id v4 = v41[0];
  if (v3)
  {
    uint64_t v5 = one-time initialization token for pommes;
    id v6 = v41[0];
    if (v5 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
    id v8 = v3;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      unint64_t v36 = (void *)swift_slowAlloc();
      v41[0] = v36;
      *(_DWORD *)unint64_t v11 = 136642819;
      uint64_t v35 = v11 + 4;
      id v39 = v8;
      id v12 = v8;
      id v13 = objc_msgSend(v12, sel_description);
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v37 = v1;
      unint64_t v16 = v15;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, (uint64_t *)v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v1 = v37;
      id v8 = v39;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v9, v10, "Fetched Me card from Contacts: %{sensitive}s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v36, -1, -1);
      MEMORY[0x1CB77E470](v11, -1, -1);
    }
    else
    {
    }
    id v18 = objc_msgSend(v1, sel_createSAPersonFromCNContact_, v8, v35);
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        id v40 = v8;
        os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = (void *)swift_slowAlloc();
        v41[0] = v23;
        *(_DWORD *)os_log_type_t v22 = 136315138;
        id v24 = v19;
        id v25 = objc_msgSend(v24, sel_description);
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v38 = v19;
        unint64_t v28 = v27;

        uint64_t v29 = v26;
        id v8 = v40;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, (uint64_t *)v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        id v19 = v38;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v20, v21, "Converted Me card from Contacts: %s", v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v23, -1, -1);
        MEMORY[0x1CB77E470](v22, -1, -1);
      }
      else
      {
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_1C9195B30;
      *(void *)(v33 + 32) = v19;
      v41[0] = (id)v33;
      specialized Array._endMutation()();
      id v4 = v41[0];
    }
    else
    {
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        char v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v32 = 0;
        _os_log_impl(&dword_1C8F83000, v30, v31, "Unable to convert Me CNContact to SAPerson. Proceeding as if there were no Me contact", v32, 2u);
        MEMORY[0x1CB77E470](v32, -1, -1);
      }

      return (id)MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    id v17 = v41[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

id protocol witness for AssistantDataContactFetching.fetchMeCards() in conformance CNContactStore()
{
  return CNContactStore.fetchMeCards()();
}

Swift::tuple_hasAddress_Bool_hasPhoneNumber_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CNContactStore.contactsAddressAndPhoneFlags(id:contactFetchKeys:)(Swift::String id, Swift::OpaquePointer_optional contactFetchKeys)
{
  id v3 = v2;
  unint64_t object = id._object;
  uint64_t countAndFlagsBits = id._countAndFlagsBits;
  v29[1] = *(id *)MEMORY[0x1E4F143B8];
  if (contactFetchKeys.value._rawValue)
  {
    unint64_t rawValue = (unint64_t)contactFetchKeys.value._rawValue;
    if (!((unint64_t)contactFetchKeys.value._rawValue >> 62)) {
      goto LABEL_3;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1C9195B40;
    uint64_t v20 = (void *)*MEMORY[0x1E4F1AF10];
    os_log_type_t v21 = (void *)*MEMORY[0x1E4F1AEE0];
    *(void *)(v19 + 32) = *MEMORY[0x1E4F1AF10];
    *(void *)(v19 + 40) = v21;
    v29[0] = (id)v19;
    specialized Array._endMutation()();
    unint64_t rawValue = (unint64_t)v29[0];
    id v22 = v20;
    id v23 = v21;
    if (!((unint64_t)v29[0] >> 62))
    {
LABEL_3:
      uint64_t v7 = *(void *)((rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v7) {
        goto LABEL_4;
      }
LABEL_12:
      swift_bridgeObjectRelease();
      BOOL v18 = 0;
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v24) {
    goto LABEL_12;
  }
LABEL_4:
  id v8 = (void *)MEMORY[0x1CB77CA90](countAndFlagsBits, object);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v29[0] = 0;
  id v10 = objc_msgSend(v3, sel_unifiedContactWithIdentifier_keysToFetch_error_, v8, isa, v29);

  if (v10)
  {
    id v11 = v29[0];
    id v12 = objc_msgSend(v10, sel_postalAddresses);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNLabeledValue);
    unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    id v15 = objc_msgSend(v10, sel_phoneNumbers);
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    BOOL v18 = v14 != 0;
  }
  else
  {
    id v25 = v29[0];
    uint64_t v26 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    BOOL v18 = 0;
  }
LABEL_14:
  Swift::Bool v27 = v18;
  result.Swift::Bool hasPhoneNumber = v17;
  result.Swift::Bool hasAddress = v27;
  return result;
}

uint64_t protocol witness for ContactFetching.contactsAddressAndPhoneFlags(id:contactFetchKeys:) in conformance CNContactStore(uint64_t a1, uint64_t a2, Swift::OpaquePointer_optional a3)
{
  LOBYTE(v3) = CNContactStore.contactsAddressAndPhoneFlags(id:contactFetchKeys:)(*(Swift::String *)&a1, a3).hasAddress;
  return v3 & 1 | ((v3 > 0xFFu) << 8);
}

uint64_t dispatch thunk of AssistantDataContactFetching.fetchMeCards()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ContactFetching.contactsAddressAndPhoneFlags(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = (*(uint64_t (**)(void))(a4 + 8))();
  return v4 & 1 | (((v4 >> 8) & 1) << 8);
}

uint64_t dispatch thunk of ContactFetching.contactsAddressAndPhoneFlags(id:contactFetchKeys:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5 = (*(uint64_t (**)(void))(a5 + 16))();
  return v5 & 1 | (((v5 >> 8) & 1) << 8);
}

uint64_t one-time initialization function for shared()
{
  type metadata accessor for PommesSearch();
  id v0 = PommesSearch.__allocating_init()();
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  uint64_t v1 = static PommesBridgeInstrumentationUtil.sharedInstance;
  type metadata accessor for PommesSearchService();
  uint64_t v2 = (void *)swift_allocObject();
  swift_retain();
  uint64_t result = PommesSearchService.init(pommesSearch:instrumentationUtil:)((uint64_t)v0, v1);
  static PommesSearchService.shared = v2;
  return result;
}

{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t result;

  type metadata accessor for AnalyticsComponentIdGenerator();
  id v0 = swift_allocObject();
  uint64_t v1 = objc_msgSend(self, sel_clientWithIdentifier_, 131);
  type metadata accessor for PerformanceUtil();
  uint64_t v2 = (void *)swift_allocObject();
  uint64_t result = PerformanceUtil.init(analyticsComponentIdGenerator:trialClient:)(v0, (uint64_t)v1);
  static PerformanceUtil.shared = v2;
  return result;
}

{
  uint64_t result;

  type metadata accessor for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator();
  uint64_t result = swift_initStaticObject();
  static SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.shared = result;
  return result;
}

uint64_t PommesSearchService.__allocating_init(pommesSearch:instrumentationUtil:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  PommesSearchService.init(pommesSearch:instrumentationUtil:)(a1, a2);
  return v4;
}

uint64_t static PommesSearchService.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t one-time initialization function for defaultSessionId()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __swift_allocate_value_buffer(v0, static PommesSearchService.defaultSessionId);
  __swift_project_value_buffer(v0, (uint64_t)static PommesSearchService.defaultSessionId);
  return UUID.init(uuidString:)();
}

uint64_t PommesSearchService.defaultSessionId.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultSessionId != -1) {
    swift_once();
  }
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);

  return __swift_project_value_buffer(v0, (uint64_t)static PommesSearchService.defaultSessionId);
}

uint64_t static PommesSearchService.defaultSessionId.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultSessionId != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static PommesSearchService.defaultSessionId);
  return outlined init with copy of MediaUserStateCenter?(v3, a1, &demangling cache variable for type metadata for UUID?);
}

void one-time initialization function for defaultTimeoutInSec()
{
  static PommesSearchService.defaultTimeoutInSec = 2;
}

uint64_t *PommesSearchService.defaultTimeoutInSec.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultTimeoutInSec != -1) {
    swift_once();
  }
  return &static PommesSearchService.defaultTimeoutInSec;
}

uint64_t static PommesSearchService.defaultTimeoutInSec.getter()
{
  if (one-time initialization token for defaultTimeoutInSec != -1) {
    swift_once();
  }
  return static PommesSearchService.defaultTimeoutInSec;
}

uint64_t PommesSearchService.handler.getter()
{
  return swift_retain();
}

uint64_t PommesSearchService.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t PommesSearchService.init(pommesSearch:instrumentationUtil:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  uint64_t v4 = one-time initialization token for pommes;
  swift_retain();
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl(&dword_1C8F83000, v6, v7, "PommesSearchService init successfully", v8, 2u);
    MEMORY[0x1CB77E470](v8, -1, -1);
  }
  swift_release();
  swift_release();

  return v3;
}

uint64_t PommesSearchService.setServiceHelper(_:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 16) + 216))();
}

uint64_t PommesSearchService.searchInfiEntity(request:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](PommesSearchService.searchInfiEntity(request:), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;

  os_log_type_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t PommesSearchService.searchInfiEntity(request:)()
{
  if (one-time initialization token for defaultTimeoutInSec != -1) {
    swift_once();
  }
  uint64_t v1 = static PommesSearchService.defaultTimeoutInSec;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)(v0 + 24) + 120)
                                                + **(int **)(**(void **)(v0 + 24) + 120));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = PommesSearchService.searchInfiEntity(request:);
  uint64_t v3 = *(void *)(v0 + 16);
  return v5(v3, v1);
}

uint64_t @objc closure #1 in PommesSearchService.searchInfiEntity(request:)(void *a1, void *aBlock, uint64_t a3)
{
  _OWORD v3[2] = a1;
  v3[3] = a3;
  _OWORD v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  return MEMORY[0x1F4188298](@objc closure #1 in PommesSearchService.searchInfiEntity(request:), 0, 0);
}

uint64_t @objc closure #1 in PommesSearchService.searchInfiEntity(request:)()
{
  if (one-time initialization token for defaultTimeoutInSec != -1) {
    swift_once();
  }
  uint64_t v1 = static PommesSearchService.defaultTimeoutInSec;
  id v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(**(void **)(v0 + 24) + 120)
                                                + **(int **)(**(void **)(v0 + 24) + 120));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = @objc closure #1 in PommesSearchService.searchInfiEntity(request:);
  uint64_t v3 = *(void *)(v0 + 16);
  return v5(v3, v1);
}

uint64_t @objc closure #1 in PommesSearchService.searchInfiEntity(request:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc();

  swift_release();
  id v8 = *(void (***)(void, void, void))(v5 + 32);
  if (v3)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();

    ((void (**)(void, void, void *))v8)[2](v8, 0, v9);
    _Block_release(v8);
  }
  else
  {
    ((void (**)(void, void *, void))v8)[2](v8, a1, 0);
    _Block_release(v8);
  }
  id v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
  v3[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[9] = swift_task_alloc();
  uint64_t v4 = *(void *)(type metadata accessor for PommesSearchRequest(0) - 8);
  v3[10] = v4;
  v3[11] = *(void *)(v4 + 64);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for PommesCandidateId();
  v3[14] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[15] = v6;
  v3[16] = *(void *)(v6 + 64);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return MEMORY[0x1F4188298](PommesSearchService.searchInfiEntity(request:timeoutInSec:), 0, 0);
}

uint64_t PommesSearchService.searchInfiEntity(request:timeoutInSec:)()
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1C8F83000, v2, v3, "PommesSearchService entering searchInfiEntity...", v4, 2u);
    MEMORY[0x1CB77E470](v4, -1, -1);
  }
  uint64_t v5 = (void *)v0[18];
  uint64_t v30 = v0[17];
  uint64_t v25 = v0[15];
  uint64_t v6 = v0[13];
  uint64_t v8 = v0[11];
  uint64_t v7 = v0[12];
  uint64_t v9 = v0[9];
  uint64_t v28 = v0[10];
  uint64_t v29 = v0[14];
  id v10 = (void *)v0[7];
  uint64_t v31 = v0[6];
  uint64_t v11 = v0[5];

  PommesSearchRequestXPC.pommesCandidateId.getter(v5);
  uint64_t v12 = v11 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_requestId;
  uint64_t v13 = *(void *)(v11 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_requestId);
  v0[20] = v13;
  uint64_t v14 = *(void *)(v12 + 8);
  v0[21] = v14;
  uint64_t v15 = v10[3];
  v0[22] = v15;
  uint64_t v24 = v13;
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 128))(v5, v13, v14, v13, v14);
  (*(void (**)(uint64_t))(*v10 + 136))(v11);
  uint64_t v27 = type metadata accessor for TaskPriority();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
  v26(v9, 1, 1, v27);
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_0(v6, v7, type metadata accessor for PommesSearchRequest);
  (*(void (**)(uint64_t, void *, uint64_t))(v25 + 16))(v30, v5, v29);
  unint64_t v16 = (*(unsigned __int8 *)(v28 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  unint64_t v17 = (v8 + *(unsigned __int8 *)(v25 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  BOOL v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = 0;
  *((void *)v18 + 4) = v10;
  *((void *)v18 + 5) = v24;
  *((void *)v18 + 6) = v14;
  outlined init with take of PommesSearchRequest(v7, (uint64_t)&v18[v16]);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(&v18[v17], v30, v29);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v19 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCs6ResultOy21SiriInformationSearch14PommesResponseCs5Error_pG_Tgm5(v9, (uint64_t)&async function pointer to partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:), (uint64_t)v18);
  v0[23] = v19;
  v26(v9, 1, 1, v27);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = 0;
  void v20[3] = 0;
  v20[4] = v31;
  v20[5] = v19;
  swift_retain();
  v0[24] = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5Tm(v9, (uint64_t)&async function pointer to partial apply for closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:), (uint64_t)v20);
  os_log_type_t v21 = (void *)swift_task_alloc();
  v0[25] = v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, Error>);
  *os_log_type_t v21 = v0;
  v21[1] = PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return MEMORY[0x1F4187DC0](v0 + 2, v19, v22);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](PommesSearchService.searchInfiEntity(request:timeoutInSec:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char isCancelled;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t (*v13)(void);
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t (*v32)(void *);
  uint64_t v33;
  uint64_t v34;

  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 24);
  isCancelled = swift_task_isCancelled();
  uint64_t v4 = *(void *)(v0 + 192);
  if (isCancelled)
  {
    uint64_t v33 = *(void *)(v0 + 144);
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 104);
    uint64_t v8 = type metadata accessor for PommesError();
    lazy protocol witness table accessor for type PommesError and conformance PommesError((unint64_t *)&lazy protocol witness table cache variable for type PommesError and conformance PommesError, MEMORY[0x1E4FA23F8]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, *MEMORY[0x1E4FA23E8], v8);
    swift_willThrow();
    swift_release();
    outlined consume of Result<PommesResponse, Error>(v1);
    swift_release();
    outlined destroy of PommesSearchRequest(v7);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v33, v6);
    id v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v10, v11))
    {
LABEL_4:

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
      return v13();
    }
LABEL_3:
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_1C8F83000, v10, v11, "PommesSearchService leaving searchInfiEntity...", v12, 2u);
    MEMORY[0x1CB77E470](v12, -1, -1);
    goto LABEL_4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x1CB77CF30](v4, MEMORY[0x1E4FBC848] + 8);
  uint64_t v15 = Logger.logObject.getter();
  unint64_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v17 = 0;
    _os_log_impl(&dword_1C8F83000, v15, v16, "PommesSearchService search has completed, cancel the timeout task", v17, 2u);
    MEMORY[0x1CB77E470](v17, -1, -1);
  }
  BOOL v18 = *(void *)(v0 + 168);
  uint64_t v19 = *(void *)(v0 + 176);
  uint64_t v20 = *(void *)(v0 + 160);
  os_log_type_t v21 = *(void *)(v0 + 144);
  uint64_t v22 = *(void *)(v0 + 64);

  outlined destroy of MediaUserStateCenter?(v22, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
  id v23 = *(void *)(v0 + 144);
  uint64_t v24 = v1;
  uint64_t v25 = *(void *)(v0 + 112);
  uint64_t v26 = *(void *)(v0 + 120);
  uint64_t v27 = *(void *)(v0 + 104);
  if (v2)
  {
    *(void *)(v0 + 32) = v24;
    uint64_t v28 = v24;
    swift_willThrowTypedImpl();
    swift_release();
    outlined consume of Result<PommesResponse, Error>(v24);
    swift_release();
    outlined destroy of PommesSearchRequest(v27);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v23, v25);
    id v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v10, v11)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  swift_release();
  swift_release();
  outlined destroy of PommesSearchRequest(v27);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v23, v25);
  uint64_t v29 = Logger.logObject.getter();
  uint64_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl(&dword_1C8F83000, v29, v30, "PommesSearchService leaving searchInfiEntity...", v31, 2u);
    MEMORY[0x1CB77E470](v31, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void *))(v0 + 8);
  return v32(v24);
}

uint64_t closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a1;
  v8[5] = a4;
  return MEMORY[0x1F4188298](closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:), 0, 0);
}

uint64_t closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 80) = v3;
  long long v4 = *(_OWORD *)(v0 + 56);
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  *(_OWORD *)(v3 + 32) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, Error>);
  *uint64_t v5 = v0;
  v5[1] = closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return MEMORY[0x1F41880D8](v0 + 16, 0, 0, 0xD000000000000027, 0x80000001C919D310, partial apply for closure #1 in closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:), v3, v6);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  char v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(unsigned char *)(v0 + 24);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
  long long v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1C8F83000, v4, v5, "PommesSearchService search has started, check if search task is canceled", v6, 2u);
    MEMORY[0x1CB77E470](v6, -1, -1);
  }

  if (static Task<>.isCancelled.getter())
  {
    (*(void (**)(uint64_t, void, void, void, void, void))(**(void **)(*(void *)(v0 + 40) + 24)
                                                                            + 144))(3, *(void *)(v0 + 72), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 48), *(void *)(v0 + 56));
    uint64_t v7 = type metadata accessor for PommesError();
    lazy protocol witness table accessor for type PommesError and conformance PommesError((unint64_t *)&lazy protocol witness table cache variable for type PommesError and conformance PommesError, MEMORY[0x1E4FA23F8]);
    uint64_t v8 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, *MEMORY[0x1E4FA23E8], v7);
    outlined consume of Result<PommesResponse, Error>(v1);
    uint64_t v2 = 1;
    uint64_t v1 = (void *)v8;
  }
  else
  {
    id v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_1C8F83000, v10, v11, "PommesSearchService search has completed, and search task hasn't been canceled, returning the search result", v12, 2u);
      MEMORY[0x1CB77E470](v12, -1, -1);
    }
  }
  uint64_t v13 = *(void *)(v0 + 32);
  *(void *)uint64_t v13 = v1;
  *(unsigned char *)(v13 + 8) = v2;
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t closure #1 in closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Result<PommesResponse, Error>, Never>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v16 + 304))(a3, a4, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v17, (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = _s21SiriInformationSearch06PommesC7ServiceC16searchInfiEntity7request12timeoutInSecAA0D8ResponseCAA0dC10RequestXPCC_s6UInt64VtYaKFs6ResultOyAHs5Error_pGyYacfU_yScCyAPs5NeverOGXEfU_yAPnYucAScfu_yAPnYucfu0_TA;
  *(void *)(v19 + 24) = v18;
  (*(void (**)(uint64_t, uint64_t (*)(void *, char), uint64_t))(*(void *)v16 + 240))(a5, _ss6ResultOy21SiriInformationSearch14PommesResponseCs5Error_pGIegxT_AGIegg_TRTA, v19);
  swift_release();
  return outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCs6ResultOy21SiriInformationSearch14PommesResponseCs5Error_pG_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, Error>);
  return swift_task_create();
}

uint64_t closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return MEMORY[0x1F4188298](closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:), 0, 0);
}

uint64_t closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(v1 + 16);
  if (is_mul_ok(v2, 0x3B9ACA00uLL))
  {
    uint64_t v3 = 1000000000 * v2;
    long long v4 = (void *)swift_task_alloc();
    *(void *)(v1 + 32) = v4;
    *long long v4 = v1;
    v4[1] = closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
    a1 = v3;
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x1F4187DE0](a1);
}

uint64_t closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return MEMORY[0x1F4188298](closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, Error>);
  MEMORY[0x1CB77CF30](v1, v2, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
  long long v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1C8F83000, v4, v5, "PommesSearchService search has timed out, cancel the search task", v6, 2u);
    MEMORY[0x1CB77E470](v6, -1, -1);
  }

  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void PommesSearchService.invalidate(cachedResponse:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1C8F83000, v5, v6, "PommesSearchService invalidating cached response...", v7, 2u);
    MEMORY[0x1CB77E470](v7, -1, -1);
  }

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(**(void **)(*(void *)(v2 + 16) + 40) + 248);
  swift_retain();
  v8(a1, 2);
  swift_release();
  oslog = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v9, "PommesSearchService leaving invalidating cached response...", v10, 2u);
    MEMORY[0x1CB77E470](v10, -1, -1);
  }
}

uint64_t PommesSearchService.buildPommesSearchRequest(from:)@<X0>(unsigned char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v167 = a2;
  uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  uint64_t v3 = MEMORY[0x1F4188790](v144);
  uint64_t v149 = (uint64_t)&v143 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v143 - v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v163 = (uint64_t *)((char *)&v143 - v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v166 = (char *)&v143 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v165 = (char *)&v143 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = type metadata accessor for PommesCandidateId();
  uint64_t v147 = *(void *)(v148 - 8);
  MEMORY[0x1F4188790](v148);
  uint64_t v146 = (uint64_t *)((char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v162 = type metadata accessor for ParseStateXPC(0);
  MEMORY[0x1F4188790](v162);
  uint64_t v15 = (uint64_t *)((char *)&v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for PommesContext.Source();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v143 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = type metadata accessor for PommesContext();
  uint64_t v20 = *(void *)(v164 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v164);
  uint64_t v151 = (char *)&v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v150 = (char *)&v143 - v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v143 - v25;
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4F9FEC0], v16);
  swift_bridgeObjectRetain();
  uint64_t v171 = v26;
  PommesContext.init(source:domain:listenAfterSpeaking:)();
  uint64_t v27 = *(void *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_assistantId + 8];
  uint64_t v169 = *(void *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_assistantId];
  uint64_t v28 = type metadata accessor for UUID();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)&v143 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = one-time initialization token for defaultSessionId;
  uint64_t v168 = v27;
  swift_bridgeObjectRetain();
  if (v32 != -1) {
    swift_once();
  }
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v34 = __swift_project_value_buffer(v33, (uint64_t)static PommesSearchService.defaultSessionId);
  uint64_t v35 = MEMORY[0x1F4188790](v34);
  char v37 = (char *)&v143 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(v35, (uint64_t)v37, &demangling cache variable for type metadata for UUID?);
  int v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v37, 1, v28);
  uint64_t v170 = v20;
  uint64_t v152 = v7;
  uint64_t v161 = v31;
  if (v38 == 1)
  {
    UUID.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v37, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v31, v37, v28);
  }
  id v39 = *(uint64_t (**)(char *, uint64_t))&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_requestId
                                                     + 8];
  uint64_t v160 = *(void (**)(char *, uint64_t))&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_requestId];
  uint64_t v158 = v39;
  uint64_t v40 = *(void *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioSource + 8];
  uint64_t v159 = *(void (**)(char *, char *, uint64_t))&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioSource];
  uint64_t v156 = v40;
  int v41 = *(NSObject **)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioDestination + 8];
  os_log_t v157 = *(os_log_t *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioDestination];
  os_log_t v155 = v41;
  int v154 = a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isEyesFree];
  char v42 = a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isVoiceTriggerEnabled];
  char v43 = a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isTextToSpeechEnabled];
  char v44 = a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isPushOffRequest];
  uint64_t v46 = *(void *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_responseMode];
  uint64_t v45 = *(void *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_responseMode + 8];
  char v47 = a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isTriggerlessFollowup];
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  uint64_t v153 = &v143;
  MEMORY[0x1F4188790](v48 - 8);
  uint64_t v50 = (char *)&v143 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for DateInterval();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v50, 1, 1, v51);
  uint64_t v52 = *(void *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_deviceRestrictions];
  uint64_t v145 = type metadata accessor for PommesRequestContext();
  swift_allocObject();
  uint64_t v53 = PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(v169, v168, (uint64_t)v161, (uint64_t)v160, (uint64_t)v158, (uint64_t)v159, v156, (uint64_t)v157, (uint64_t)v155, v46, v45, v154, v42, v43, v44, v47, MEMORY[0x1E4FBC860], (uint64_t)v50, v52);
  _s21SiriInformationSearch06PommesC7RequestVWOcTm_0((uint64_t)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_parseState], (uint64_t)v15, type metadata accessor for ParseStateXPC);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v55 = *v15;
  uint64_t v168 = v15[1];
  uint64_t v169 = v55;
  uint64_t v161 = (char *)v53;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v56 = v53;
    uint64_t v162 = v15[2];
    uint64_t v160 = (void (*)(char *, uint64_t))v15[3];
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool));
    BOOL v58 = (void (*)(void, void, void))v163;
    outlined init with take of TCUMappedNLResponse?((uint64_t)v15 + *(int *)(v57 + 64), (uint64_t)v163);
    uint64_t v59 = one-time initialization token for pommes;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v60 = v164;
    uint64_t v61 = v170;
    if (v59 != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.pommes);
    id v63 = v151;
    uint64_t v159 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
    v159(v151, v171, v60);
    uint64_t v64 = (uint64_t)v152;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v58, (uint64_t)v152, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    uint64_t v65 = a1;
    uint64_t v66 = v56;
    swift_retain_n();
    uint64_t v67 = v65;
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.debug.getter();
    int v70 = v69;
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v156 = swift_slowAlloc();
      v173[0] = v156;
      *(_DWORD *)uint64_t v71 = 136316418;
      os_log_t v155 = v68;
      uint64_t v72 = v60;
      int v154 = v70;
      uint64_t v73 = v66;
      uint64_t v74 = *(void *)&v67[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance];
      unint64_t v75 = *(void *)&v67[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance + 8];
      swift_bridgeObjectRetain();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2080;
      uint64_t v76 = v146;
      PommesSearchRequestXPC.pommesCandidateId.getter(v146);
      uint64_t v77 = PommesCandidateId.description.getter();
      unint64_t v79 = v78;
      (*(void (**)(void *, uint64_t))(v147 + 8))(v76, v148);
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v79, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 22) = 1024;
      LODWORD(v77) = v67[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isMultiUser];

      LODWORD(v172) = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v71 + 28) = 2080;
      uint64_t v172 = v73;
      swift_retain();
      uint64_t v80 = String.init<A>(describing:)();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 38) = 2080;
      lazy protocol witness table accessor for type PommesError and conformance PommesError(&lazy protocol witness table cache variable for type PommesContext and conformance PommesContext, MEMORY[0x1E4F9FED8]);
      uint64_t v82 = v151;
      uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v85 = *(uint64_t (**)(char *, uint64_t))(v170 + 8);
      os_log_t v157 = (os_log_t)((v170 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
      uint64_t v158 = v85;
      id v86 = v82;
      uint64_t v87 = v72;
      v85(v86, v72);
      *(_WORD *)(v71 + 48) = 2080;
      uint64_t v88 = (uint64_t)v152;
      uint64_t v89 = v149;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v152, v149, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      uint64_t v90 = String.init<A>(describing:)();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v61 = v170;
      swift_bridgeObjectRelease();
      outlined destroy of MediaUserStateCenter?(v88, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      os_log_t v92 = v155;
      _os_log_impl(&dword_1C8F83000, v155, (os_log_type_t)v154, "    Constructing Pommes search request:\n    utterance: \"%s\",\n    %s,\n    isMultiUser: %{BOOL}d,\n    requestContext: %s,\n    pommesContext: %s,\n    response: %s,\n    isFallback: true", (uint8_t *)v71, 0x3Au);
      uint64_t v93 = v156;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v93, -1, -1);
      MEMORY[0x1CB77E470](v71, -1, -1);
    }
    else
    {
      swift_release_n();

      uint64_t v126 = *(uint64_t (**)(char *, uint64_t))(v61 + 8);
      os_log_t v157 = (os_log_t)((v61 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
      uint64_t v158 = v126;
      v126(v63, v60);
      outlined destroy of MediaUserStateCenter?(v64, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);

      uint64_t v87 = v60;
      uint64_t v89 = v149;
    }
    uint64_t v127 = *(void *)&v67[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance];
    uint64_t v128 = *(void *)&v67[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance + 8];
    int v129 = v67[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isMultiUser];
    uint64_t v130 = (uint64_t)v165;
    uint64_t v131 = v171;
    v159(v165, v171, v87);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v130, 0, 1, v87);
    uint64_t v132 = type metadata accessor for InputOrigin();
    uint64_t v133 = (uint64_t)v166;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v132 - 8) + 56))(v166, 1, 1, v132);
    uint64_t v134 = (void (*)(void, void, void))v163;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v163, v89, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    swift_bridgeObjectRetain();
    PommesSearchRequest.init(utterance:trpCandidateId:tcuId:isMultiUser:requestContext:pommesContext:inputOrigin:parseResponse:asrSpeechPackage:isFallback:sharedUserId:userIdentityClassification:)(v127, v128, v169, v168, v162, (uint64_t)v160, v129, (uint64_t)v161, v167, v130, v133, v89, 0, 1, 0, 0, 0);
    outlined destroy of MediaUserStateCenter?((uint64_t)v134, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    return v158(v131, v87);
  }
  else
  {
    uint64_t v94 = v15[2];
    uint64_t v95 = one-time initialization token for pommes;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v96 = v164;
    uint64_t v97 = v170;
    if (v95 != -1) {
      swift_once();
    }
    uint64_t v98 = type metadata accessor for Logger();
    __swift_project_value_buffer(v98, (uint64_t)static Logger.pommes);
    unint64_t v99 = (void (*)(char *, char *, uint64_t))(v97 + 16);
    uint64_t v100 = v150;
    uint64_t v163 = *(void **)(v97 + 16);
    ((void (*)(char *, char *, uint64_t))v163)(v150, v171, v96);
    os_log_t v101 = a1;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    int v102 = v101;
    uint64_t v103 = Logger.logObject.getter();
    os_log_type_t v104 = static os_log_type_t.debug.getter();
    int v105 = v104;
    BOOL v106 = os_log_type_enabled(v103, v104);
    uint64_t v162 = v94;
    if (v106)
    {
      uint64_t v107 = swift_slowAlloc();
      os_log_t v157 = v103;
      uint64_t v108 = v107;
      uint64_t v158 = (uint64_t (*)(char *, uint64_t))swift_slowAlloc();
      v173[0] = (uint64_t)v158;
      *(_DWORD *)uint64_t v108 = 136316418;
      uint64_t v109 = v53;
      uint64_t v110 = *(void *)&v102[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance];
      unint64_t v111 = *(void *)&v102[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance + 8];
      swift_bridgeObjectRetain();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v108 + 12) = 2080;
      uint64_t v159 = v99;
      uint64_t v112 = v94;
      uint64_t v113 = v146;
      PommesSearchRequestXPC.pommesCandidateId.getter(v146);
      uint64_t v114 = PommesCandidateId.description.getter();
      LODWORD(v156) = v105;
      unint64_t v116 = v115;
      (*(void (**)(void *, uint64_t))(v147 + 8))(v113, v148);
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v116, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v108 + 22) = 1024;
      LODWORD(v114) = v102[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isMultiUser];

      LODWORD(v172) = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v108 + 28) = 2080;
      uint64_t v172 = v109;
      swift_retain();
      uint64_t v117 = String.init<A>(describing:)();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v118, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v108 + 38) = 2080;
      lazy protocol witness table accessor for type PommesError and conformance PommesError(&lazy protocol witness table cache variable for type PommesContext and conformance PommesContext, MEMORY[0x1E4F9FED8]);
      id v119 = v150;
      uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v121, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v97 = v170;
      uint64_t v160 = *(void (**)(char *, uint64_t))(v170 + 8);
      v160(v119, v96);
      *(_WORD *)(v108 + 48) = 2048;
      uint64_t v122 = v96;
      uint64_t v123 = *(void *)(v112 + 16);
      swift_bridgeObjectRelease();
      uint64_t v172 = v123;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_t v124 = v157;
      _os_log_impl(&dword_1C8F83000, v157, (os_log_type_t)v156, "    Constructing Pommes search request:\n    utterance: \"%s\",\n    %s,\n    isMultiUser: %{BOOL}d,\n    requestContext: %s,\n    pommesContext: %s,\n    userParses: %ld,\n    isFallback: true", (uint8_t *)v108, 0x3Au);
      uint64_t v125 = v158;
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v125, -1, -1);
      MEMORY[0x1CB77E470](v108, -1, -1);
    }
    else
    {
      swift_release_n();

      swift_bridgeObjectRelease();
      uint64_t v160 = *(void (**)(char *, uint64_t))(v97 + 8);
      v160(v100, v96);

      swift_bridgeObjectRelease();
      uint64_t v122 = v96;
    }
    uint64_t v136 = *(void *)&v102[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance];
    uint64_t v137 = *(void *)&v102[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance + 8];
    int v138 = v102[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isMultiUser];
    uint64_t v139 = (uint64_t)v165;
    uint64_t v140 = v171;
    ((void (*)(char *, char *, uint64_t))v163)(v165, v171, v122);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v97 + 56))(v139, 0, 1, v122);
    uint64_t v141 = type metadata accessor for InputOrigin();
    uint64_t v142 = (uint64_t)v166;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v141 - 8) + 56))(v166, 1, 1, v141);
    swift_bridgeObjectRetain();
    PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:isFallback:)(v136, v137, v169, v168, v138, (uint64_t)v161, v139, v142, v167, v162, 0, 1u);
    return ((uint64_t (*)(char *, uint64_t))v160)(v140, v122);
  }
}

uint64_t PommesSearchService.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t PommesSearchService.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

unint64_t PommesSearchServiceError.description.getter()
{
  unint64_t v1 = 0xD000000000000016;
  if (*v0 == 1) {
    unint64_t v1 = 0xD000000000000036;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000048;
  }
}

BOOL static PommesSearchServiceError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PommesSearchServiceError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PommesSearchServiceError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1C9006350()
{
  Swift::UInt v1 = (int *)type metadata accessor for PommesSearchRequest(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = type metadata accessor for PommesCandidateId();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v8 = v0 + ((v2 + 56) & ~v2);
  type metadata accessor for PommesSearchRequest.ParseState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v38 = v3;
  uint64_t v39 = (v2 + 56) & ~v2;
  uint64_t v37 = v7;
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v36 = v2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v8
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                 + 64);
    uint64_t v15 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    }
    swift_bridgeObjectRelease();
LABEL_10:
    uint64_t v2 = v36;
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_13;
    }
    uint64_t v35 = v4;
    uint64_t v36 = v2;
    swift_bridgeObjectRelease();
    uint64_t v10 = v8
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
    uint64_t v12 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    uint64_t v13 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = v35;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = v8
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  uint64_t v18 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v19 = *(void *)(v18 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }
LABEL_13:
  swift_bridgeObjectRelease();
  uint64_t v20 = v8 + v1[6];
  uint64_t v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v22 = *(void *)(v21 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21)) {
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v8 + v1[10];
  uint64_t v24 = type metadata accessor for PommesContext();
  uint64_t v25 = *(void *)(v24 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24)) {
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
  }
  uint64_t v26 = v8 + v1[11];
  uint64_t v27 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v28 = *(void *)(v27 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27)) {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  }
  swift_release();
  uint64_t v29 = v8 + v1[14];
  uint64_t v30 = type metadata accessor for InputOrigin();
  uint64_t v31 = *(void *)(v30 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30)) {
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
  }
  uint64_t v32 = v2 | v6 | 7;
  uint64_t v33 = (v39 + v38 + v6) & ~v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v33, v4);

  return MEMORY[0x1F4186498](v0, v33 + v37, v32);
}

uint64_t outlined init with take of PommesSearchRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for PommesSearchRequest(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for PommesCandidateId() - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  long long v15 = *(_OWORD *)(v1 + 32);
  uint64_t v10 = *(void *)(v1 + 48);
  uint64_t v11 = v1 + v6;
  uint64_t v12 = v1 + (v9 & ~v8);
  uint64_t v13 = swift_task_alloc();
  *(void *)(v3 + 16) = v13;
  *(void *)uint64_t v13 = v3;
  *(void *)(v13 + 8) = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  *(void *)(v13 + 64) = v11;
  *(void *)(v13 + 72) = v12;
  *(void *)(v13 + 56) = v10;
  *(_OWORD *)(v13 + 40) = v15;
  *(void *)(v13 + 32) = a1;
  return MEMORY[0x1F4188298](closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:), 0, 0);
}

uint64_t partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t partial apply for closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  id v4[2] = v2;
  v4[3] = v3;
  v4[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return MEMORY[0x1F4188298](closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:), 0, 0);
}

uint64_t outlined destroy of PommesSearchRequest(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1() & 1;
}

{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t outlined init with take of TCUMappedNLResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type PommesError and conformance PommesError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesSearchServiceError and conformance PommesSearchServiceError()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesSearchServiceError and conformance PommesSearchServiceError;
  if (!lazy protocol witness table cache variable for type PommesSearchServiceError and conformance PommesSearchServiceError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchServiceError and conformance PommesSearchServiceError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PommesSearchServiceError and conformance PommesSearchServiceError;
  if (!lazy protocol witness table cache variable for type PommesSearchServiceError and conformance PommesSearchServiceError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchServiceError and conformance PommesSearchServiceError);
  }
  return result;
}

uint64_t type metadata accessor for PommesSearchService()
{
  return self;
}

uint64_t method lookup function for PommesSearchService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesSearchService);
}

uint64_t dispatch thunk of PommesSearchService.__allocating_init(pommesSearch:instrumentationUtil:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PommesSearchService.setServiceHelper(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of PommesSearchService.searchInfiEntity(request:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 112) + **(int **)(*(void *)v1 + 112));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = dispatch thunk of PommesSearchService.searchInfiEntity(request:);
  return v6(a1);
}

uint64_t dispatch thunk of PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 120) + **(int **)(*(void *)v2 + 120));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = dispatch thunk of PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t dispatch thunk of PommesSearchService.invalidate(cachedResponse:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of PommesSearchService.buildPommesSearchRequest(from:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t getEnumTagSinglePayload for PommesSearchServiceError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PommesSearchServiceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C90079F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesSearchServiceError()
{
  return &type metadata for PommesSearchServiceError;
}

uint64_t sub_1C9007A2C()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for @objc closure #1 in PommesSearchService.searchInfiEntity(request:)()
{
  int v2 = (void *)v0[2];
  int v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  unsigned int v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in PommesSearchService.searchInfiEntity(request:)
                                                       + async function pointer to @objc closure #1 in PommesSearchService.searchInfiEntity(request:));
  return v6(v2, v3, v4);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  unsigned int v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu);
  return v6(v2, v3, v4);
}

uint64_t objectdestroy_5Tm()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unsigned int v6 = (int *)v1[4];
  BOOL v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu + _sIeAgH_ytIeAgHr_TRTu);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1C9007CFC()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  unsigned int v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu);
  return v6(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  unsigned int v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRs6ResultOy21SiriInformationSearch14PommesResponseCsAA_pG_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 32) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 40) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRs6ResultOy21SiriInformationSearch14PommesResponseCsAA_pG_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRs6ResultOy21SiriInformationSearch14PommesResponseCsAA_pG_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 32);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  char v4 = *(unsigned char *)(v1 + 24);
  *(void *)uint64_t v2 = *(void *)(v1 + 16);
  *(unsigned char *)(v2 + 8) = v4;
  uint64_t v5 = *(uint64_t (**)(void))(v3 + 8);
  return v5();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRs6ResultOy21SiriInformationSearch14PommesResponseCsAA_pG_TG5TA(uint64_t a1)
{
  char v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRs6ResultOy21SiriInformationSearch14PommesResponseCsAA_pG_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRs6ResultOy21SiriInformationSearch14PommesResponseCsAA_pG_TG5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1)
{
  return closure #1 in closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1C900817C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Result<PommesResponse, Error>, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t _s21SiriInformationSearch06PommesC7ServiceC16searchInfiEntity7request12timeoutInSecAA0D8ResponseCAA0dC10RequestXPCC_s6UInt64VtYaKFs6ResultOyAHs5Error_pGyYacfU_yScCyAPs5NeverOGXEfU_yAPnYucAScfu_yAPnYucfu0_TA()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t _ss6ResultOy21SiriInformationSearch14PommesResponseCs5Error_pGIegxT_AGIegg_TRTA(void *a1, char a2)
{
  uint64_t v4 = *(uint64_t (**)(void *, uint64_t))(v2 + 16);
  uint64_t v5 = a2 & 1;
  outlined copy of Result<PommesResponse, Error>(a1);
  return v4(a1, v5);
}

void protocol witness for CurareInteractionStream.init(streamId:) in conformance FSFCurareInteractionStream(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (a1)
  {
    uint64_t v3 = (void *)MEMORY[0x1CB77CA90]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithStreamId_, v3);

  *a2 = v4;
}

uint64_t one-time initialization function for lazySetup()
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.pommes);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C8F83000, v1, v2, "CURARE: performing one-time setup for FeatureStore donation", v3, 2u);
    MEMORY[0x1CB77E470](v3, -1, -1);
  }

  uint64_t v4 = type metadata accessor for Searchfoundation_Card();
  uint64_t v5 = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusRequest and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusRequest(&lazy protocol witness table cache variable for type Searchfoundation_Card and conformance Searchfoundation_Card, MEMORY[0x1E4F88848]);

  return MEMORY[0x1F4126FB0](v4, v5);
}

void *CurareDonation.curareInteractionDataVersion.unsafeMutableAddressor()
{
  return &static CurareDonation.curareInteractionDataVersion;
}

uint64_t static CurareDonation.curareInteractionDataVersion.getter()
{
  return 0;
}

uint64_t static CurareDonation.donateCurareInfo(for:with:into:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v35 = v8;
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
  id v14 = a2;
  long long v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v32 = a1;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v34 = v7;
    uint64_t v20 = v19;
    v37[0] = v19;
    uint64_t v31 = a3;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v33 = v12;
    uint64_t v21 = PommesResponse.curareDescription.getter();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v37);
    uint64_t v12 = v33;
    a3 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v15, v16, "POMMES-CURARE: %s", v18, 0xCu);
    swift_arrayDestroy();
    uint64_t v23 = v20;
    uint64_t v7 = v34;
    MEMORY[0x1CB77E470](v23, -1, -1);
    uint64_t v24 = v18;
    a1 = v32;
    MEMORY[0x1CB77E470](v24, -1, -1);
  }
  else
  {
  }
  static TaskPriority.background.getter();
  uint64_t v25 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v12, 0, 1, v25);
  outlined init with copy of CurareInteractionStream?(a3, (uint64_t)v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  unint64_t v26 = (*(unsigned __int8 *)(v7 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v27 = (char *)swift_allocObject();
  *((void *)v27 + 2) = 0;
  *((void *)v27 + 3) = 0;
  outlined init with take of PommesSearchReason?((uint64_t)v37, (uint64_t)(v27 + 32), &demangling cache variable for type metadata for CurareInteractionStream?);
  *((void *)v27 + 9) = v14;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v27[v26], v9, v6);
  id v28 = v14;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in static CurareDonation.donateCurareInfo(for:with:into:), (uint64_t)v27);
  return swift_release();
}

uint64_t closure #1 in static CurareDonation.donateCurareInfo(for:with:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a5;
  void v6[5] = a6;
  long long v6[2] = a1;
  v6[3] = a4;
  return MEMORY[0x1F4188298](closure #1 in static CurareDonation.donateCurareInfo(for:with:into:), 0, 0);
}

uint64_t closure #1 in static CurareDonation.donateCurareInfo(for:with:into:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 40);
  os_log_type_t v2 = static PerformanceUtil.shared;
  uint64_t v3 = swift_task_alloc();
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 32) = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = swift_task_alloc();
  Date.init()();
  (*(void (**)(unint64_t, unint64_t, void, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t))(*(void *)v2 + 200))(0xD00000000000002ALL, 0x80000001C919D480, 0, v6, "SiriInformationSearch/CurareDonation.swift", 42, 2, 173, "donateCurareInfo(for:with:into:)", 32, 2, partial apply for closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:with:into:), v3, MEMORY[0x1E4FBC848] + 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:with:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for PommesCurareInteractionValue();
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(void *)(a1 + 24))
  {
    outlined init with copy of CurareInteractionStream?(a1, (uint64_t)v15);
  }
  else
  {
    type metadata accessor for PommesResponse();
    static PommesResponse.makeDefaultInteractionStream()((uint64_t)v15);
  }
  uint64_t v8 = PommesResponse.requestId.getter();
  unint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v12 = *(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v7, a3, v11);
  swift_storeEnumTagMultiPayload();
  specialized static CurareDonation.donateCurareValue(_:with:into:)((uint64_t)v7, v8, v10, (uint64_t)v15);
  outlined destroy of PommesCurareInteractionValue((uint64_t)v7);
  v12(v7, a3, v11);
  swift_storeEnumTagMultiPayload();
  specialized static CurareDonation.donateCurareValue(_:with:into:)((uint64_t)v7, v8, v10, (uint64_t)v15);
  swift_bridgeObjectRelease();
  outlined destroy of PommesCurareInteractionValue((uint64_t)v7);
  return outlined destroy of CurareInteractionStream?((uint64_t)v15);
}

uint64_t static CurareDonation.donateCurareInfo(for:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  static TaskPriority.background.getter();
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  outlined init with copy of CurareInteractionStream?(a2, (uint64_t)v15);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(&v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], a1, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  outlined init with take of PommesSearchReason?((uint64_t)v15, v12 + 32, &demangling cache variable for type metadata for CurareInteractionStream?);
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v5 + 32))(v12 + v11, &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v4);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in static CurareDonation.donateCurareInfo(for:into:), v12);
  return swift_release();
}

uint64_t closure #1 in static CurareDonation.donateCurareInfo(for:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  _OWORD v5[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in static CurareDonation.donateCurareInfo(for:into:), 0, 0);
}

uint64_t closure #1 in static CurareDonation.donateCurareInfo(for:into:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static PerformanceUtil.shared;
  uint64_t v2 = swift_task_alloc();
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = swift_task_alloc();
  Date.init()();
  (*(void (**)(unint64_t, unint64_t, void, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t))(*(void *)v1 + 200))(0xD000000000000025, 0x80000001C919D430, 0, v5, "SiriInformationSearch/CurareDonation.swift", 42, 2, 187, "donateCurareInfo(for:into:)", 27, 2, partial apply for closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:into:), v2, MEMORY[0x1E4FBC848] + 8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesCurareInteractionValue();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_POMMESRequestContext();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(void *)(a1 + 24))
  {
    outlined init with copy of CurareInteractionStream?(a1, (uint64_t)v18);
  }
  else
  {
    type metadata accessor for PommesResponse();
    static PommesResponse.makeDefaultInteractionStream()((uint64_t)v18);
  }
  uint64_t v11 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.pommesRequestContext.getter();
  uint64_t v12 = MEMORY[0x1CB778FD0](v11);
  unint64_t v14 = v13;
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v6, a2, v15);
  swift_storeEnumTagMultiPayload();
  specialized static CurareDonation.donateCurareValue(_:with:into:)((uint64_t)v6, v12, v14, (uint64_t)v18);
  swift_bridgeObjectRelease();
  outlined destroy of PommesCurareInteractionValue((uint64_t)v6);
  return outlined destroy of CurareInteractionStream?((uint64_t)v18);
}

uint64_t static CurareDonation.donateCurareResponseUsedMarker(from:into:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  static TaskPriority.background.getter();
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
  outlined init with copy of CurareInteractionStream?(a2, (uint64_t)v12);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  outlined init with take of PommesSearchReason?((uint64_t)v12, (uint64_t)(v8 + 4), &demangling cache variable for type metadata for CurareInteractionStream?);
  v8[9] = a1;
  id v9 = a1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:), (uint64_t)v8);
  return swift_release();
}

uint64_t closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  _OWORD v5[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:), 0, 0);
}

uint64_t closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static PerformanceUtil.shared;
  uint64_t v2 = swift_task_alloc();
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = swift_task_alloc();
  Date.init()();
  (*(void (**)(unint64_t, unint64_t, void, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t))(*(void *)v1 + 200))(0xD000000000000034, 0x80000001C919D370, 0, v5, "SiriInformationSearch/CurareDonation.swift", 42, 2, 201, "donateCurareResponseUsedMarker(from:into:)", 42, 2, partial apply for closure #1 in closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:), v2, MEMORY[0x1E4FBC848] + 8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t closure #1 in closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PommesCurareInteractionValue();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(void *)(a1 + 24))
  {
    outlined init with copy of CurareInteractionStream?(a1, (uint64_t)v9);
  }
  else
  {
    type metadata accessor for PommesResponse();
    static PommesResponse.makeDefaultInteractionStream()((uint64_t)v9);
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = PommesResponse.requestId.getter();
  specialized static CurareDonation.donateCurareValue(_:with:into:)((uint64_t)v4, v5, v6, a1);
  swift_bridgeObjectRelease();
  outlined destroy of PommesCurareInteractionValue((uint64_t)v4);
  return outlined destroy of CurareInteractionStream?((uint64_t)v9);
}

uint64_t sub_1C9009654()
{
  uint64_t v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  }
  uint64_t v5 = (v3 + 80) & ~v3;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);

  return MEMORY[0x1F4186498](v0, v5 + v4, v3 | 7);
}

uint64_t partial apply for closure #1 in static CurareDonation.donateCurareInfo(for:with:into:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse() - 8);
  uint64_t v5 = v1 + 32;
  uint64_t v6 = *(void *)(v1 + 72);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[4] = v6;
  v8[5] = v7;
  v8[2] = a1;
  v8[3] = v5;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return MEMORY[0x1F4188298](closure #1 in static CurareDonation.donateCurareInfo(for:with:into:), 0, 0);
}

uint64_t sub_1C900983C()
{
  uint64_t v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  }
  uint64_t v5 = v3 | 7;
  uint64_t v6 = (v3 + 72) & ~v3;
  uint64_t v7 = v6 + v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);

  return MEMORY[0x1F4186498](v0, v7, v5);
}

uint64_t partial apply for closure #1 in static CurareDonation.donateCurareInfo(for:into:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest() - 8);
  uint64_t v5 = v1 + 32;
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[3] = v5;
  v7[4] = v6;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  v7[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in static CurareDonation.donateCurareInfo(for:into:), 0, 0);
}

uint64_t sub_1C9009A0C()
{
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  }

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:)(uint64_t a1)
{
  uint64_t v4 = v1 + 32;
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[3] = v4;
  void v6[4] = v5;
  v6[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  long long v6[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:), 0, 0);
}

uint64_t dispatch thunk of CurareInteractionStream.init(streamId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of CurareInteractionStream.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CurareInteractionStream.shouldInsertInteraction()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for CurareDonation()
{
  return &type metadata for CurareDonation;
}

uint64_t partial apply for closure #1 in closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:)()
{
  return closure #1 in closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:)(*(void *)(v0 + 16));
}

uint64_t type metadata accessor for PommesCurareInteractionValue()
{
  uint64_t result = type metadata singleton initialization cache for PommesCurareInteractionValue;
  if (!type metadata singleton initialization cache for PommesCurareInteractionValue) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized static CurareJSONBuilder.copyFields(from:to:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v22 = *(void *)(v2 - 8);
  uint64_t v23 = v2;
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v21 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v20 = (char *)v19 - v5;
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v19 - v11;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryString.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryString.setter();
  v19[1] = a1;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  unint64_t v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v13(v12, v6);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.setter();
  unint64_t v14 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v19[0] = v7 + 16;
  v14(v10, v12, v6);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.setter();
  v13(v12, v6);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.mathOperationContainsRandom.getter();
  v13(v12, v6);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.mathOperationContainsRandom.setter();
  v14(v10, v12, v6);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.setter();
  v13(v12, v6);
  uint64_t v15 = v20;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  uint64_t v16 = v22;
  uint64_t v17 = v23;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v21, v15, v23);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.setter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v15, v17);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.isLowConfidenceKnowledgeResult.getter();
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.isLowConfidenceKnowledgeResult.setter();
}

uint64_t specialized static CurareJSONBuilder.build(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for JSONEncodingOptions();
  uint64_t v40 = *(void *)(v4 - 8);
  int v41 = (void (*)(void, void))v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)v35 - v12;
  if (one-time initialization token for lazySetup != -1) {
    swift_once();
  }
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.init()();
  specialized static CurareJSONBuilder.copyFields(from:to:)(a1);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v38 = __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v37 = v8;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v39 = v7;
    uint64_t v20 = v19;
    v42[0] = v19;
    uint64_t v36 = v1;
    *(_DWORD *)uint64_t v18 = 136315138;
    v35[1] = v18 + 4;
    swift_beginAccess();
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusRequest and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusRequest((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, MEMORY[0x1E4F88740]);
    Swift::String v21 = Message.textFormatString()();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21._countAndFlagsBits, (unint64_t)v21._object, v42);
    uint64_t v2 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v15, v16, "CURARE: filtered to %s", v18, 0xCu);
    swift_arrayDestroy();
    uint64_t v22 = v20;
    uint64_t v7 = v39;
    MEMORY[0x1CB77E470](v22, -1, -1);
    uint64_t v23 = v18;
    uint64_t v8 = v37;
    MEMORY[0x1CB77E470](v23, -1, -1);
  }

  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  JSONEncodingOptions.init()();
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusRequest and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusRequest((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, MEMORY[0x1E4F88740]);
  uint64_t v24 = Message.jsonString(options:)();
  if (v2)
  {
    (*(void (**)(char *, void))(v40 + 8))(v6, v41);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v8 + 8);
    v25(v11, v7);
    v25(v13, v7);
  }
  else
  {
    (*(void (**)(char *, void))(v40 + 8))(v6, v41);
    uint64_t v27 = *(void (**)(void, void))(v8 + 8);
    uint64_t v26 = v8 + 8;
    id v28 = v11;
    uint64_t v29 = v27;
    v27(v28, v7);
    swift_bridgeObjectRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v39 = v7;
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = v26;
      uint64_t v33 = v32;
      int v41 = v29;
      *(_DWORD *)uint64_t v32 = 134217984;
      uint64_t v43 = String.count.getter();
      uint64_t v7 = v39;
      uint64_t v29 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v30, v31, "CURARE: generated JSON (%ldb) for donation", v33, 0xCu);
      MEMORY[0x1CB77E470](v33, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v29(v13, v7);
  }
  return v24;
}

char *specialized static CurareDonation.makeCurareFeatureStoreInteraction(forID:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v136 = a2;
  uint64_t v135 = a1;
  uint64_t v4 = type metadata accessor for JSONEncodingOptions();
  unint64_t v163 = *(void *)(v4 - 8);
  uint64_t v164 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v161 = (char *)&v132 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  uint64_t v162 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v132 - v10;
  uint64_t v12 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v142 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v165 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for Debuglevelspb_AnyArray();
  uint64_t v147 = *(void *)(v141 - 8);
  MEMORY[0x1F4188790](v141);
  uint64_t v153 = (char *)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Debuglevelspb_AnyArray)?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v156 = (char *)&v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v149 = (int64_t *)((char *)&v132 - v18);
  uint64_t v146 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  uint64_t v150 = *(void *)(v146 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v146);
  uint64_t v143 = (char *)&v132 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v132 - v21;
  uint64_t v23 = type metadata accessor for PommesCurareInteractionValue();
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v132 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesCurareInteractionValue(a3, (uint64_t)v25);
  unint64_t v26 = 0x80000001C919D410;
  uint64_t v27 = 0xD00000000000001FLL;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v33 = v150;
      uint64_t v34 = v143;
      uint64_t v35 = v146;
      (*(void (**)(char *, char *, uint64_t))(v150 + 32))(v143, v25, v146);
      uint64_t v22 = *(char **)(Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.serviceDebug.getter() + 16);
      swift_bridgeObjectRelease();
      if (!v22)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
        return v22;
      }
      unint64_t v152 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      uint64_t v36 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.serviceDebug.getter();
      int64_t v148 = 0;
      uint64_t v37 = *(void *)(v36 + 64);
      uint64_t v133 = v36 + 64;
      uint64_t v138 = v36;
      uint64_t v38 = 1 << *(unsigned char *)(v36 + 32);
      uint64_t v39 = -1;
      if (v38 < 64) {
        uint64_t v39 = ~(-1 << v38);
      }
      unint64_t v40 = v39 & v37;
      uint64_t v137 = v147 + 16;
      uint64_t v140 = (uint64_t (**)(char *, char *, uint64_t))(v147 + 32);
      uint64_t v159 = v142 + 16;
      os_log_t v157 = (void (**)(char *, uint64_t))(v142 + 8);
      uint64_t v139 = (void (**)(char *, uint64_t))(v147 + 8);
      int64_t v134 = (unint64_t)(v38 + 63) >> 6;
      int64_t v132 = v134 - 1;
      long long v158 = xmmword_1C9195D60;
      uint64_t v41 = v141;
      char v42 = v156;
      break;
    case 2u:
      uint64_t v113 = v162;
      (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v11, v25, v6);
      (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v9, v11, v6);
      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clearAsrContext()();
      uint64_t v114 = v161;
      JSONEncodingOptions.init()();
      lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusRequest and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusRequest(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusRequest and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusRequest, MEMORY[0x1E4F88710]);
      uint64_t v115 = v145;
      uint64_t v116 = Message.jsonString(options:)();
      uint64_t v145 = v115;
      if (v115)
      {
        (*(void (**)(char *, uint64_t))(v163 + 8))(v114, v164);
        uint64_t v22 = *(char **)(v113 + 8);
        ((void (*)(char *, uint64_t))v22)(v9, v6);
        ((void (*)(char *, uint64_t))v22)(v11, v6);
        return v22;
      }
      uint64_t v27 = v116;
      unint64_t v26 = v117;
      (*(void (**)(char *, uint64_t))(v163 + 8))(v114, v164);
      unint64_t v118 = *(void (**)(char *, uint64_t))(v113 + 8);
      v118(v9, v6);
      v118(v11, v6);
      goto LABEL_60;
    case 3u:
      goto LABEL_60;
    default:
      uint64_t v28 = v150;
      uint64_t v29 = v146;
      (*(void (**)(char *, char *, uint64_t))(v150 + 32))(v22, v25, v146);
      uint64_t v30 = v145;
      uint64_t v31 = specialized static CurareJSONBuilder.build(from:)((uint64_t)v22);
      if (v30)
      {
        (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v29);
        return v22;
      }
      uint64_t v27 = v31;
      unint64_t v26 = v32;
      uint64_t v145 = 0;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v29);
      goto LABEL_60;
  }
  while (1)
  {
    if (v40)
    {
      uint64_t v151 = (v40 - 1) & v40;
      unint64_t v44 = __clz(__rbit64(v40)) | (v148 << 6);
LABEL_12:
      uint64_t v45 = *(void *)(v138 + 56);
      uint64_t v46 = (void *)(*(void *)(v138 + 48) + 16 * v44);
      uint64_t v47 = v46[1];
      *char v42 = *v46;
      v42[1] = v47;
      uint64_t v48 = v147;
      uint64_t v49 = v45 + *(void *)(v147 + 72) * v44;
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Debuglevelspb_AnyArray));
      uint64_t v51 = v49;
      char v42 = v156;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(&v156[*(int *)(v50 + 48)], v51, v41);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v42, 0, 1, v50);
      swift_bridgeObjectRetain();
      goto LABEL_31;
    }
    int64_t v52 = v148 + 1;
    if (__OFADD__(v148, 1)) {
      goto LABEL_72;
    }
    if (v52 < v134)
    {
      unint64_t v53 = *(void *)(v133 + 8 * v52);
      if (v53) {
        goto LABEL_16;
      }
      int64_t v54 = v148 + 2;
      ++v148;
      if (v52 + 1 < v134)
      {
        unint64_t v53 = *(void *)(v133 + 8 * v54);
        if (v53) {
          goto LABEL_19;
        }
        int64_t v148 = v52 + 1;
        if (v52 + 2 < v134)
        {
          unint64_t v53 = *(void *)(v133 + 8 * (v52 + 2));
          if (v53)
          {
            v52 += 2;
            goto LABEL_16;
          }
          int64_t v54 = v52 + 3;
          int64_t v148 = v52 + 2;
          if (v52 + 3 < v134)
          {
            unint64_t v53 = *(void *)(v133 + 8 * v54);
            if (v53)
            {
LABEL_19:
              int64_t v52 = v54;
LABEL_16:
              uint64_t v151 = (v53 - 1) & v53;
              unint64_t v44 = __clz(__rbit64(v53)) + (v52 << 6);
              int64_t v148 = v52;
              goto LABEL_12;
            }
            while (1)
            {
              int64_t v52 = v54 + 1;
              if (__OFADD__(v54, 1)) {
                goto LABEL_73;
              }
              if (v52 >= v134) {
                break;
              }
              unint64_t v53 = *(void *)(v133 + 8 * v52);
              ++v54;
              if (v53) {
                goto LABEL_16;
              }
            }
            int64_t v148 = v132;
          }
        }
      }
    }
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Debuglevelspb_AnyArray));
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v42, 1, 1, v55);
    uint64_t v151 = 0;
LABEL_31:
    uint64_t v56 = (uint64_t)v42;
    uint64_t v57 = v149;
    outlined init with take of PommesSearchReason?(v56, (uint64_t)v149, &demangling cache variable for type metadata for (key: String, value: Debuglevelspb_AnyArray)?);
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Debuglevelspb_AnyArray));
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v58 - 8) + 48))(v57, 1, v58) == 1) {
      break;
    }
    uint64_t v155 = *v57;
    uint64_t v154 = v57[1];
    uint64_t v59 = (*v140)(v153, (char *)v57 + *(int *)(v58 + 48), v41);
    uint64_t v60 = MEMORY[0x1CB777A20](v59);
    int64_t v61 = *(void *)(v60 + 16);
    if (v61)
    {
      uint64_t v166 = (void *)MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61, 0);
      uint64_t v62 = v142;
      unint64_t v63 = (*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
      uint64_t v144 = v60;
      unint64_t v64 = v60 + v63;
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
      uint64_t v160 = *(void *)(v62 + 72);
      uint64_t v161 = *(char **)(v62 + 16);
      uint64_t v162 = v65;
      while (1)
      {
        uint64_t v164 = v61;
        ((void (*)(char *, unint64_t, uint64_t))v161)(v165, v64, v12);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v158;
        *(void *)(inited + 32) = 0x656D614E65707974;
        *(void *)(inited + 40) = 0xE800000000000000;
        *(void *)(inited + 48) = Google_Protobuf_Any.typeURL.getter();
        *(void *)(inited + 56) = v67;
        *(void *)(inited + 64) = 1635017060;
        *(void *)(inited + 72) = 0xE400000000000000;
        uint64_t v68 = Google_Protobuf_Any.value.getter();
        unint64_t v70 = v69;
        Swift::String v71 = Data.base64EncodedString(options:)(0);
        outlined consume of Data._Representation(v68, v70);
        *(Swift::String *)(inited + 80) = v71;
        uint64_t v72 = (void *)static _DictionaryStorage.allocate(capacity:)();
        uint64_t v74 = *(void *)(inited + 32);
        uint64_t v73 = *(void *)(inited + 40);
        uint64_t v75 = *(void *)(inited + 48);
        uint64_t v76 = *(void *)(inited + 56);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v73);
        if (v78) {
          break;
        }
        unint64_t v163 = v64;
        *(void *)((char *)v72 + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v77;
        unint64_t v79 = (uint64_t *)(v72[6] + 16 * v77);
        *unint64_t v79 = v74;
        v79[1] = v73;
        uint64_t v80 = (void *)(v72[7] + 16 * v77);
        *uint64_t v80 = v75;
        v80[1] = v76;
        uint64_t v81 = v72[2];
        BOOL v82 = __OFADD__(v81, 1);
        uint64_t v83 = v81 + 1;
        if (v82) {
          goto LABEL_67;
        }
        v72[2] = v83;
        uint64_t v84 = *(void *)(inited + 64);
        uint64_t v85 = *(void *)(inited + 72);
        uint64_t v86 = *(void *)(inited + 80);
        uint64_t v87 = *(void *)(inited + 88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v88 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v85);
        if (v89) {
          goto LABEL_68;
        }
        *(void *)((char *)v72 + ((v88 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v88;
        uint64_t v90 = (uint64_t *)(v72[6] + 16 * v88);
        *uint64_t v90 = v84;
        v90[1] = v85;
        unint64_t v91 = (void *)(v72[7] + 16 * v88);
        void *v91 = v86;
        v91[1] = v87;
        uint64_t v92 = v72[2];
        BOOL v82 = __OFADD__(v92, 1);
        uint64_t v93 = v92 + 1;
        if (v82) {
          goto LABEL_69;
        }
        v72[2] = v93;
        swift_release();
        swift_bridgeObjectRelease();
        (*v157)(v165, v12);
        uint64_t v94 = v166;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v94[2] + 1, 1);
          uint64_t v94 = v166;
        }
        unint64_t v95 = v163;
        unint64_t v97 = v94[2];
        unint64_t v96 = v94[3];
        if (v97 >= v96 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v96 > 1, v97 + 1, 1);
          uint64_t v94 = v166;
        }
        v94[2] = v97 + 1;
        v94[v97 + 4] = v72;
        unint64_t v64 = v95 + v160;
        int64_t v61 = v164 - 1;
        if (v164 == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v35 = v146;
          uint64_t v34 = v143;
          uint64_t v41 = v141;
          goto LABEL_45;
        }
      }
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x1C900B570);
    }
    swift_bridgeObjectRelease();
    uint64_t v94 = (void *)MEMORY[0x1E4FBC860];
LABEL_45:
    unint64_t v98 = v152;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v166 = (void *)v98;
    unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(v155, v154);
    uint64_t v102 = *(void *)(v98 + 16);
    BOOL v103 = (v100 & 1) == 0;
    uint64_t v104 = v102 + v103;
    if (__OFADD__(v102, v103)) {
      goto LABEL_70;
    }
    char v105 = v100;
    if (*(void *)(v98 + 24) >= v104)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      uint64_t v106 = v154;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v104, isUniquelyReferenced_nonNull_native);
      uint64_t v106 = v154;
      unint64_t v107 = specialized __RawDictionaryStorage.find<A>(_:)(v155, v154);
      if ((v105 & 1) != (v108 & 1)) {
        goto LABEL_74;
      }
      unint64_t v101 = v107;
    }
    uint64_t v109 = v166;
    unint64_t v152 = (unint64_t)v166;
    if (v105)
    {
      uint64_t v43 = v166[7];
      swift_bridgeObjectRelease();
      *(void *)(v43 + 8 * v101) = v94;
    }
    else
    {
      v166[(v101 >> 6) + 8] |= 1 << v101;
      uint64_t v110 = (void *)(v109[6] + 16 * v101);
      *uint64_t v110 = v155;
      v110[1] = v106;
      *(void *)(v109[7] + 8 * v101) = v94;
      uint64_t v111 = v109[2];
      BOOL v82 = __OFADD__(v111, 1);
      uint64_t v112 = v111 + 1;
      if (v82) {
        goto LABEL_71;
      }
      v109[2] = v112;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*v139)(v153, v41);
    uint64_t v33 = v150;
    char v42 = v156;
    unint64_t v40 = v151;
  }
  swift_release();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v166 = (void *)v152;
  uint64_t v22 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [[String : String]]]);
  lazy protocol witness table accessor for type [String : [[String : String]]] and conformance <> [A : B]();
  uint64_t v124 = v145;
  uint64_t v125 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v145 = v124;
  if (v124)
  {
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
  }
  else
  {
    uint64_t v127 = v125;
    unint64_t v128 = v126;
    swift_bridgeObjectRelease();
    uint64_t v129 = type metadata accessor for String.Encoding();
    MEMORY[0x1F4188790](v129 - 8);
    static String.Encoding.utf8.getter();
    uint64_t v27 = String.init(data:encoding:)();
    uint64_t v130 = v35;
    unint64_t v26 = v131;
    outlined consume of Data._Representation(v127, v128);
    swift_release();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v130);
    if (v26)
    {
LABEL_60:
      id v119 = objc_allocWithZone(MEMORY[0x1E4F618B0]);
      uint64_t v120 = v136;
      swift_bridgeObjectRetain();
      unint64_t v121 = (void *)MEMORY[0x1CB77CA90](v27, v26);
      swift_bridgeObjectRelease();
      uint64_t v122 = (void *)MEMORY[0x1CB77CA90](v135, v120);
      swift_bridgeObjectRelease();
      uint64_t v22 = (char *)objc_msgSend(v119, sel_initWithJsonStr_interactionId_dataVersion_, v121, v122, 0);
    }
    else
    {
      return 0;
    }
  }
  return v22;
}

void specialized static CurareDonation.donateCurareValue(_:with:into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    outlined init with copy of CurareInteractionStream?(a4, (uint64_t)&v31);
    if (v32)
    {
      outlined init with take of AppDataProviding(&v31, (uint64_t)v33);
      uint64_t v7 = v34;
      uint64_t v8 = v35;
      __swift_project_boxed_opaque_existential_1(v33, v34);
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 24);
      swift_bridgeObjectRetain();
      if (v9(v7, v8))
      {
        if (specialized static CurareDonation.makeCurareFeatureStoreInteraction(forID:value:)(a2, a3, a1))
        {
          uint64_t v17 = v34;
          uint64_t v18 = v35;
          __swift_project_boxed_opaque_existential_1(v33, v34);
          uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
          uint64_t v20 = swift_unknownObjectRetain();
          v19(v20, v17, v18);
          swift_unknownObjectRelease();
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v25 = type metadata accessor for Logger();
          __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
          swift_bridgeObjectRetain();
          unint64_t v26 = Logger.logObject.getter();
          os_log_type_t v27 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v26, v27))
          {
            uint64_t v28 = (uint8_t *)swift_slowAlloc();
            uint64_t v29 = swift_slowAlloc();
            *(void *)&long long v31 = v29;
            *(_DWORD *)uint64_t v28 = 136315138;
            swift_bridgeObjectRetain();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, (uint64_t *)&v31);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C8F83000, v26, v27, "Inserted Curare feature for interaction ID: %s", v28, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1CB77E470](v29, -1, -1);
            MEMORY[0x1CB77E470](v28, -1, -1);
            swift_unknownObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_unknownObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v21 = type metadata accessor for Logger();
          __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
          uint64_t v22 = Logger.logObject.getter();
          os_log_type_t v23 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v22, v23))
          {
            uint64_t v24 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v24 = 0;
            _os_log_impl(&dword_1C8F83000, v22, v23, "Interaction returned by makeCurareFeatureStoreInteraction was nil", v24, 2u);
            MEMORY[0x1CB77E470](v24, -1, -1);
          }
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
        return;
      }
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    }
    else
    {
      outlined destroy of CurareInteractionStream?((uint64_t)&v31);
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1C8F83000, v14, v15, "Skipping Curare feature donation: no stream available, or stream not accepting interactions.", v16, 2u);
      MEMORY[0x1CB77E470](v16, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    oslog = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_1C8F83000, oslog, v11, "Skipping Curare donation because this POMMES response doesn't have a request ID", v12, 2u);
      MEMORY[0x1CB77E470](v12, -1, -1);
    }
  }
}

uint64_t outlined destroy of PommesCurareInteractionValue(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PommesCurareInteractionValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of CurareInteractionStream?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurareInteractionStream?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of PommesCurareInteractionValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PommesCurareInteractionValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[String : String]]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A]);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:into:)()
{
  return closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:into:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:with:into:)()
{
  return closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:with:into:)(v0[2], v0[3], v0[4]);
}

uint64_t *initializeBufferWithCopyOfBuffer for PommesCurareInteractionValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for PommesCurareInteractionValue(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  }
  else
  {
    if (result > 1) {
      return result;
    }
    uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

void *initializeWithCopy for PommesCurareInteractionValue(void *a1, const void *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for PommesCurareInteractionValue(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PommesCurareInteractionValue((uint64_t)a1);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for PommesCurareInteractionValue(void *a1, const void *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for PommesCurareInteractionValue(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of PommesCurareInteractionValue((uint64_t)a1);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesCurareInteractionValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for PommesCurareInteractionValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for PommesCurareInteractionValue()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for PommesCurareInteractionValue()
{
  uint64_t result = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *PommesAssistantIDManager.IDKey.unsafeMutableAddressor()
{
  return &static PommesAssistantIDManager.IDKey;
}

unint64_t static PommesAssistantIDManager.IDKey.getter()
{
  return 0xD000000000000016;
}

void *PommesAssistantIDManager.ExpirationDateKey.unsafeMutableAddressor()
{
  return &static PommesAssistantIDManager.ExpirationDateKey;
}

unint64_t static PommesAssistantIDManager.ExpirationDateKey.getter()
{
  return 0xD000000000000024;
}

void *PommesAssistantIDManager.DefaultExpirationTimeInterval.unsafeMutableAddressor()
{
  return &static PommesAssistantIDManager.DefaultExpirationTimeInterval;
}

double static PommesAssistantIDManager.DefaultExpirationTimeInterval.getter()
{
  return 900.0;
}

id PommesAssistantIDManager.init(pommesSearchRequest:)(uint64_t a1)
{
  if (*(void *)(a1 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 52))) {
    swift_bridgeObjectRetain();
  }
  id v2 = specialized PommesAssistantIDManager.init(realAssistantID:)();
  outlined destroy of PommesSearchRequest(a1);
  return v2;
}

uint64_t static PommesAssistantIDManager.shouldReplaceAssistantID.getter()
{
  id v0 = objc_msgSend(self, sel_sharedPreferences);
  unsigned int v1 = objc_msgSend(v0, sel_longLivedIdentifierUploadingEnabled);

  return v1 ^ 1;
}

Swift::String_optional __swiftcall PommesAssistantIDManager.effectiveAssistantID()()
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  int v5 = v0;
  id v6 = objc_msgSend(self, sel_sharedPreferences);
  unsigned __int8 v7 = objc_msgSend(v6, sel_longLivedIdentifierUploadingEnabled);

  if (v7)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    MEMORY[0x1F4188790](v8);
    os_log_type_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    PommesAssistantIDManager.replacementAssistantID()(v5, v4, v3, (uint64_t)v11);
    uint64_t v4 = UUID.uuidString.getter();
    uint64_t v3 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t v13 = v4;
  uint64_t v14 = (void *)v3;
  result.value._unint64_t object = v14;
  result.value._uint64_t countAndFlagsBits = v13;
  return result;
}

void PommesAssistantIDManager.replacementAssistantID()(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!a1)
  {
    UUID.init()();
    return;
  }
  id v8 = a1;
  uint64_t v9 = (void *)MEMORY[0x1CB77CA90](0xD000000000000016, 0x80000001C919D4E0);
  id v10 = objc_msgSend(v8, sel_objectForKey_, v9);

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v74 = 0u;
    long long v75 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v74, (uint64_t)v76);
  if (!v77)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_11;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    if (one-time initialization token for overrides != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.overrides);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_1C8F83000, v19, v20, "No assistant ID saved in user defaults.", v21, 2u);
      MEMORY[0x1CB77E470](v21, -1, -1);
    }

    PommesAssistantIDManager.mintReplacementAssistantID()(a1, a4);
    return;
  }
  uint64_t v72 = a4;
  id v73 = v8;
  uint64_t v70 = a2;
  uint64_t v71 = a3;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
    a4 = v72;
    id v8 = v73;
    goto LABEL_11;
  }
  unint64_t v69 = &v62;
  uint64_t v66 = v12;
  uint64_t v22 = *(char **)(v12 + 32);
  unint64_t v64 = (uint64_t *)(v12 + 32);
  unint64_t v63 = v22;
  ((void (*)(char *, char *, uint64_t))v22)(v14, v17, v11);
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v68 = &v62;
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v62 = v26;
  uint64_t v65 = (char *)&v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  uint64_t v67 = &v62;
  MEMORY[0x1F4188790](v27 - 8);
  uint64_t v29 = (char *)&v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = (void *)MEMORY[0x1CB77CA90](0xD000000000000024, 0x80000001C919D500);
  id v31 = objc_msgSend(v73, sel_objectForKey_, v30);

  uint64_t v32 = (uint64_t *)v11;
  uint64_t v33 = v14;
  uint64_t v34 = v72;
  if (v31)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v74 = 0u;
    long long v75 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v74, (uint64_t)v76);
  uint64_t v35 = v24;
  if (v77)
  {
    int v36 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v29, v36 ^ 1u, 1, v24);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v29, 1, v24) != 1)
    {
      uint64_t v37 = v33;
      uint64_t v38 = v65;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v65, v29, v35);
      Date.timeIntervalSinceNow.getter();
      if (v39 >= 0.0)
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v38, v35);

        ((void (*)(uint64_t, char *, uint64_t *))v63)(v72, v33, v32);
      }
      else
      {
        uint64_t v67 = v32;
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v40 = type metadata accessor for Logger();
        uint64_t v41 = __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
        MEMORY[0x1F4188790](v41);
        uint64_t v43 = (char *)&v62 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v44 = v25;
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v43, v65, v35);
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.debug.getter();
        int v47 = v46;
        if (os_log_type_enabled(v45, v46))
        {
          LODWORD(v62) = v47;
          uint64_t v48 = swift_slowAlloc();
          unint64_t v63 = v33;
          uint64_t v49 = (uint8_t *)v48;
          uint64_t v50 = swift_slowAlloc();
          v76[0] = v50;
          unint64_t v64 = &v62;
          uint64_t v51 = v49;
          *(_DWORD *)uint64_t v49 = 136315138;
          int64_t v52 = v45;
          uint64_t v53 = v35;
          lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418B9D8]);
          uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v56 = *(void (**)(char *, uint64_t))(v44 + 8);
          v56(v43, v35);
          _os_log_impl(&dword_1C8F83000, v52, (os_log_type_t)v62, "Replacement assistant ID is expired (at %s).", v51, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v50, -1, -1);
          MEMORY[0x1CB77E470](v51, -1, -1);

          uint64_t v37 = v63;
        }
        else
        {
          uint64_t v56 = *(void (**)(char *, uint64_t))(v25 + 8);
          v56(v43, v35);

          uint64_t v53 = v35;
        }
        uint64_t v61 = v66;
        PommesAssistantIDManager.mintReplacementAssistantID()(a1, v72);

        v56(v65, v53);
        (*(void (**)(char *, uint64_t *))(v61 + 8))(v37, v67);
      }
      return;
    }
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v29, 1, 1, v24);
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v29, &demangling cache variable for type metadata for Date?);
  if (one-time initialization token for overrides != -1) {
    swift_once();
  }
  uint64_t v57 = type metadata accessor for Logger();
  __swift_project_value_buffer(v57, (uint64_t)static Logger.overrides);
  uint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v60 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v60 = 0;
    _os_log_impl(&dword_1C8F83000, v58, v59, "Unable to read expiration date for assistantID from user defaults. This should have been registered; why is it missing?",
      v60,
      2u);
    MEMORY[0x1CB77E470](v60, -1, -1);
  }

  PommesAssistantIDManager.mintReplacementAssistantID()(a1, v34);
  (*(void (**)(char *, uint64_t *))(v66 + 8))(v33, v32);
}

uint64_t PommesAssistantIDManager.mintReplacementAssistantID()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  UUID.init()();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v32[1] = v32;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v34 = a2;
    uint64_t v14 = v13;
    uint64_t v36 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v33 = a1;
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1F418BBC0]);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v36);
    a1 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    _os_log_impl(&dword_1C8F83000, v9, v10, "Minted new replacement assistantID: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v14, -1, -1);
    MEMORY[0x1CB77E470](v12, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)v32 - v22;
  static Date.now.getter();
  Date.addingTimeInterval(_:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v18 + 8);
  v24(v23, v17);
  if (a1)
  {
    id v25 = a1;
    uint64_t v26 = UUID.uuidString.getter();
    uint64_t v27 = (void *)MEMORY[0x1CB77CA90](v26);
    swift_bridgeObjectRelease();
    uint64_t v28 = (void *)MEMORY[0x1CB77CA90](0xD000000000000016, 0x80000001C919D4E0);
    objc_msgSend(v25, sel_setObject_forKey_, v27, v28);

    Class isa = Date._bridgeToObjectiveC()().super.isa;
    uint64_t v30 = (void *)MEMORY[0x1CB77CA90](0xD000000000000024, 0x80000001C919D500);
    objc_msgSend(v25, sel_setObject_forKey_, isa, v30);
  }
  return ((uint64_t (*)(char *, uint64_t))v24)(v21, v17);
}

Swift::Void __swiftcall PommesAssistantIDManager.reset()()
{
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = (void *)MEMORY[0x1CB77CA90](0xD000000000000016, 0x80000001C919D4E0);
    objc_msgSend(v1, sel_removeObjectForKey_, v2);

    id v3 = (id)MEMORY[0x1CB77CA90](0xD000000000000024, 0x80000001C919D500);
    objc_msgSend(v1, sel_removeObjectForKey_, v3);
  }
}

id specialized PommesAssistantIDManager.init(realAssistantID:)()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  uint64_t v1 = (void *)MEMORY[0x1CB77CA90](0xD000000000000015, 0x80000001C919C770);
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C91947A0;
    *(void *)(inited + 32) = 0xD000000000000024;
    *(void *)(inited + 40) = 0x80000001C919D500;
    *(void *)(inited + 72) = type metadata accessor for Date();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
    id v4 = v2;
    static Date.distantPast.getter();
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_registerDefaults_, isa);
  }
  else
  {
    if (one-time initialization token for overrides != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.overrides);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v12 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x80000001C919C770, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v7, v8, "No user defaults access to %s! This may impact dialog randomization from Pegasus.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v10, -1, -1);
      MEMORY[0x1CB77E470](v9, -1, -1);
    }
  }
  return v2;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized PommesAssistantIDManager.save(assistantID:expiringAt:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    id v3 = a3;
    uint64_t v4 = UUID.uuidString.getter();
    uint64_t v5 = (void *)MEMORY[0x1CB77CA90](v4);
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)MEMORY[0x1CB77CA90](0xD000000000000016, 0x80000001C919D4E0);
    objc_msgSend(v3, sel_setObject_forKey_, v5, v6);

    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v8 = (id)MEMORY[0x1CB77CA90](0xD000000000000024, 0x80000001C919D500);
    objc_msgSend(v3, sel_setObject_forKey_, isa, v8);
  }
}

uint64_t destroy for PommesAssistantIDManager(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for PommesAssistantIDManager(void *a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PommesAssistantIDManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PommesAssistantIDManager(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesAssistantIDManager(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesAssistantIDManager(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesAssistantIDManager()
{
  return &type metadata for PommesAssistantIDManager;
}

uint64_t lazy protocol witness table accessor for type Date and conformance Date(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t PommesEngagement.tapEngagement(engagementContext:with:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F4188298](PommesEngagement.tapEngagement(engagementContext:with:), 0, 0);
}

uint64_t PommesEngagement.tapEngagement(engagementContext:with:)()
{
  Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementResponse.init()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for PommesEngagementProtocol.tapEngagement(engagementContext:with:) in conformance PommesEngagement(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F4188298](PommesEngagement.tapEngagement(engagementContext:with:), 0, 0);
}

uint64_t dispatch thunk of PommesEngagementProtocol.tapEngagement(engagementContext:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + **(int **)(a5 + 8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v13(a1, a2, a3, a4, a5);
}

ValueMetadata *type metadata accessor for PommesEngagement()
{
  return &type metadata for PommesEngagement;
}

uint64_t PommesSearchRequestProcessorErrorUnableToHandleReason.loggingReason.getter()
{
  return *v0;
}

uint64_t PommesSearchRequestProcessorErrorFailureReason.loggingReason.getter()
{
  return dword_1C9195370[*v0];
}

BOOL static PommesSearchRequestProcessorErrorFailureReason.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PommesSearchRequestProcessorErrorFailureReason.equivalentPommesError.getter@<X0>(uint64_t a1@<X8>)
{
  switch(*v1)
  {
    case 1:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4FA23C0];
      break;
    case 2:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4FA23D0];
      break;
    case 3:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4FA23B8];
      break;
    default:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4FA23E0];
      break;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for PommesError();
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a1, v4, v5);
}

void PommesSearchRequestProcessorErrorFailureReason.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

void *static PommesSearchRequestProcessorErrorFailureReason.allCases.getter()
{
  return &outlined read-only object #0 of static PommesSearchRequestProcessorErrorFailureReason.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PommesSearchRequestProcessorErrorFailureReason(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PommesSearchRequestProcessorErrorFailureReason;
}

BOOL specialized static PommesSearchRequestProcessorError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v2 >> 6)
  {
    if (v2 >> 6 == 1)
    {
      if ((v3 & 0xC0) == 0x40) {
        return ((v3 ^ v2) & 0x3F) == 0;
      }
    }
    else if (v2 == 128)
    {
      if (v3 == 128) {
        return 1;
      }
    }
    else if (v2 == 129)
    {
      if (v3 == 129) {
        return 1;
      }
    }
    else if (v3 == 130)
    {
      return 1;
    }
  }
  else if (v3 <= 0x3F)
  {
    return v2 == v3;
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type PommesSearchRequestProcessorErrorUnableToHandleReason and conformance PommesSearchRequestProcessorErrorUnableToHandleReason()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesSearchRequestProcessorErrorUnableToHandleReason and conformance PommesSearchRequestProcessorErrorUnableToHandleReason;
  if (!lazy protocol witness table cache variable for type PommesSearchRequestProcessorErrorUnableToHandleReason and conformance PommesSearchRequestProcessorErrorUnableToHandleReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchRequestProcessorErrorUnableToHandleReason and conformance PommesSearchRequestProcessorErrorUnableToHandleReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesSearchRequestProcessorErrorFailureReason and conformance PommesSearchRequestProcessorErrorFailureReason()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesSearchRequestProcessorErrorFailureReason and conformance PommesSearchRequestProcessorErrorFailureReason;
  if (!lazy protocol witness table cache variable for type PommesSearchRequestProcessorErrorFailureReason and conformance PommesSearchRequestProcessorErrorFailureReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchRequestProcessorErrorFailureReason and conformance PommesSearchRequestProcessorErrorFailureReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [PommesSearchRequestProcessorErrorFailureReason] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [PommesSearchRequestProcessorErrorFailureReason] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PommesSearchRequestProcessorErrorFailureReason] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PommesSearchRequestProcessorErrorFailureReason]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PommesSearchRequestProcessorErrorFailureReason] and conformance [A]);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PommesSearchRequestProcessorError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x1E) {
    goto LABEL_17;
  }
  if (a2 + 226 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 226) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 226;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 226;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 226;
    }
  }
LABEL_17:
  unsigned int v6 = ((*a1 >> 1) & 0x1C | (*a1 >> 6)) ^ 0x1F;
  if (v6 >= 0x1D) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

unsigned char *storeEnumTagSinglePayload for PommesSearchRequestProcessorError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 226 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 226) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x1E) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x1D)
  {
    unsigned int v6 = ((a2 - 30) >> 8) + 1;
    *unint64_t result = a2 - 30;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C900E630);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = 8 * (((-a2 >> 2) & 7) - 8 * a2);
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for PommesSearchRequestProcessorError(unsigned char *result, unsigned int a2)
{
  if (a2 < 2) {
    *unint64_t result = *result & 7 | ((_BYTE)a2 << 6);
  }
  else {
    *unint64_t result = (a2 + 6) & 7 | 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesSearchRequestProcessorError()
{
  return &type metadata for PommesSearchRequestProcessorError;
}

uint64_t getEnumTagSinglePayload for PommesSearchRequestProcessorErrorUnableToHandleReason(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PommesSearchRequestProcessorErrorUnableToHandleReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C900E7F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesSearchRequestProcessorErrorUnableToHandleReason()
{
  return &type metadata for PommesSearchRequestProcessorErrorUnableToHandleReason;
}

unsigned char *storeEnumTagSinglePayload for PommesSearchRequestProcessorErrorFailureReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C900E8F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *RouteInfoProfileSliceResolver.navigationNotRunningErrorCode.unsafeMutableAddressor()
{
  return &static RouteInfoProfileSliceResolver.navigationNotRunningErrorCode;
}

uint64_t static RouteInfoProfileSliceResolver.navigationNotRunningErrorCode.getter()
{
  return 1500;
}

void *RouteInfoProfileSliceResolver.mapsNotRunningErrorCode.unsafeMutableAddressor()
{
  return &static RouteInfoProfileSliceResolver.mapsNotRunningErrorCode;
}

uint64_t static RouteInfoProfileSliceResolver.mapsNotRunningErrorCode.getter()
{
  return 1501;
}

uint64_t RouteInfoProfileSliceResolver.__allocating_init()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1F4188790](v0 - 8);
  int v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = v3 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  unsigned int v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  uint64_t v7 = OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_dispatchGroup;
  *(void *)(v3 + v7) = dispatch_group_create();
  *(void *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_semaphore) = dispatch_semaphore_create(0);
  v6((uint64_t)v2, 1, 1, v5);
  uint64_t v8 = v3 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v2, v8);
  swift_endAccess();
  return v3;
}

uint64_t RouteInfoProfileSliceResolver.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue);
  uint64_t v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  unsigned int v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  uint64_t v7 = OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_dispatchGroup;
  *(void *)(v0 + v7) = dispatch_group_create();
  *(void *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_semaphore) = dispatch_semaphore_create(0);
  v6(v3, 1, 1, v5);
  uint64_t v8 = v0 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v3, v8);
  swift_endAccess();
  return v0;
}

uint64_t outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t RouteInfoProfileSliceResolver.resolveRouteInfoSlice(from:requestId:pommesCandidateId:instrumentationUtil:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, void *a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v67 = a6;
  uint64_t v73 = a7;
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  uint64_t v71 = *(void *)(v12 - 8);
  uint64_t v72 = v12;
  MEMORY[0x1F4188790](v12);
  unint64_t v63 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v65 = *(void *)(v14 - 8);
  uint64_t v66 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v62 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v62 - v20;
  uint64_t v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  id v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v23 + 104))(v25, *MEMORY[0x1E4F892F8], v22);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)a4 + 128);
  uint64_t v68 = a1;
  uint64_t v69 = a2;
  uint64_t v70 = a3;
  uint64_t v27 = (void *)v26(a1, a2, a3, v25);
  uint64_t v28 = v22;
  uint64_t v29 = a5;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v28);
  if (a5)
  {
    uint64_t v30 = v67;
    if (v67)
    {
      uint64_t v32 = v65;
      uint64_t v31 = v66;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v21, 1, 1, v66);
      uint64_t v33 = (uint64_t)v64
          + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
      swift_beginAccess();
      swift_unknownObjectRetain();
      id v34 = v30;
      outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v21, v33);
      swift_endAccess();
      RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(v29, v34);
      outlined init with copy of MediaUserStateCenter?(v33, (uint64_t)v19, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v19, 1, v31) != 1)
      {
        unint64_t v55 = *(uint64_t (**)(char *, char *, uint64_t))(v32 + 32);
        uint64_t v67 = v27;
        uint64_t v56 = v62;
        uint64_t v57 = v55(v62, v19, v31);
        unint64_t v64 = &v62;
        MEMORY[0x1F4188790](v57);
        *(&v62 - 2) = v56;
        lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, MEMORY[0x1E4F88EF0]);
        uint64_t v58 = v32;
        os_log_type_t v59 = v63;
        uint64_t v35 = v72;
        uint64_t v60 = v31;
        static Message.with(_:)();
        uint64_t v61 = v67;
        (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a4 + 136))(v68, v69, v70, v67);
        swift_unknownObjectRelease();

        (*(void (**)(char *, uint64_t))(v58 + 8))(v56, v60);
        uint64_t v53 = v71;
        uint64_t v52 = v73;
        (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))(v73, v59, v35);
        uint64_t v51 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v52, v51, 1, v35);
      }
      outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
      uint64_t v35 = v72;
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        double v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)double v39 = 0;
        _os_log_impl(&dword_1C8F83000, v37, v38, "There was an error while creating the routeInfoProfileSlice. Returning no profile slice for .sliceLabelRouteInfo", v39, 2u);
        MEMORY[0x1CB77E470](v39, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(*(void *)a4 + 144))(v68, v69, v70, v27, 3);
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v45 = one-time initialization token for pommes;
      swift_unknownObjectRetain();
      if (v45 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.pommes);
      int v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      BOOL v49 = os_log_type_enabled(v47, v48);
      uint64_t v35 = v72;
      if (v49)
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl(&dword_1C8F83000, v47, v48, "Cannot create route info slice because there is no dispatch queue provided", v50, 2u);
        MEMORY[0x1CB77E470](v50, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(*(void *)a4 + 144))(v68, v69, v70, v27, 3);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    BOOL v43 = os_log_type_enabled(v41, v42);
    uint64_t v35 = v72;
    if (v43)
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl(&dword_1C8F83000, v41, v42, "Cannot create route info slice because there is no service helper", v44, 2u);
      MEMORY[0x1CB77E470](v44, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(*(void *)a4 + 144))(v68, v69, v70, v27, 3);
  }

  uint64_t v51 = 1;
  uint64_t v52 = v73;
  uint64_t v53 = v71;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v52, v51, 1, v35);
}

uint64_t closure #1 in RouteInfoProfileSliceResolver.resolveRouteInfoSlice(from:requestId:pommesCandidateId:instrumentationUtil:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  MEMORY[0x1F4188790](v3);
  (*(void (**)(char *, void))(v5 + 104))((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F892F8]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C91947A0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16))(v9 + v8, a2, v6);
  return Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
}

uint64_t RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = a2;
  id v45 = a1;
  uint64_t v4 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  uint64_t v41 = *((void *)v4 - 1);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v42 = v6;
  uint64_t v43 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v39 - v7;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96778]), sel_init);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v14 = UUID.uuidString.getter();
  unint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  id v17 = v9;
  uint64_t v40 = v14;
  uint64_t v18 = (void *)MEMORY[0x1CB77CA90](v14, v16);
  objc_msgSend(v17, sel_setAceId_, v18);

  objc_msgSend(v17, sel_setRefId_, 0);
  type metadata accessor for NSNumber();
  Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  objc_msgSend(v17, sel_setGetRoute_, isa);

  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v39 = v3;
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    aBlock[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v16, aBlock);
    uint64_t v3 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C8F83000, v21, v22, "Starting ACE Command with ID: %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v24, -1, -1);
    MEMORY[0x1CB77E470](v23, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Date.init()();
  id v25 = &v8[v4[5]];
  *(void *)id v25 = "SiriInformationSearch/RouteInfoProfileSliceResolver.swift";
  *((void *)v25 + 1) = 57;
  v25[16] = 2;
  *(void *)&v8[v4[6]] = 77;
  uint64_t v26 = &v8[v4[7]];
  *(void *)uint64_t v26 = "populateProfileSliceValue(serviceHelper:dispatchQueue:)";
  *((void *)v26 + 1) = 55;
  v26[16] = 2;
  uint64_t v27 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002BLL);
  uint64_t v28 = (uint64_t *)&v8[v4[8]];
  uint64_t *v28 = v27;
  v28[1] = v29;
  uint64_t v30 = v43;
  outlined init with copy of PerformanceUtil.Ticket((uint64_t)v8, v43);
  unint64_t v31 = (*(unsigned __int8 *)(v41 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  unint64_t v32 = (v42 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = swift_allocObject();
  outlined init with take of PerformanceUtil.Ticket(v30, v33 + v31);
  id v34 = v44;
  *(void *)(v33 + v32) = v44;
  *(void *)(v33 + ((v32 + 15) & 0xFFFFFFFFFFFFFFF8)) = v3;
  aBlock[4] = (uint64_t)partial apply for closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:);
  aBlock[5] = v33;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  uint64_t aBlock[3] = (uint64_t)&block_descriptor_2;
  uint64_t v35 = _Block_copy(aBlock);
  id v36 = v17;
  id v37 = v34;
  swift_retain();
  swift_release();
  objc_msgSend(v45, sel_handleCommand_completion_, v36, v35);
  _Block_release(v35);

  OS_dispatch_semaphore.wait()();
  return outlined destroy of PerformanceUtil.Ticket((uint64_t)v8);
}

uint64_t closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v22[2] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  (*(void (**)(uint64_t, void))(*(void *)static PerformanceUtil.shared + 184))(a3, 0);
  id v9 = (void *)swift_allocObject();
  v9[2] = a2;
  v9[3] = a5;
  v9[4] = a1;
  aBlock[4] = partial apply for closure #1 in closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:);
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  void aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t aBlock[3] = &block_descriptor_10;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  v22[1] = v22;
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = a2;
  id v16 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[3] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1CB77D180](0, v14, v20, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void closure #1 in closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    id v4 = a1;
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
    id v6 = a1;
    id v7 = a1;
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v32 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      id v12 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v13 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v8, v9, "Service helper returned an error: %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v11, -1, -1);
      MEMORY[0x1CB77E470](v10, -1, -1);
    }
    else
    {
    }
    OS_dispatch_semaphore.signal()();
  }
  else if (a3)
  {
    uint64_t v15 = one-time initialization token for pommes;
    id v16 = a3;
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    id v18 = v16;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v32 = v31;
      *(_DWORD *)uint64_t v21 = 136315138;
      id v22 = v18;
      id v23 = objc_msgSend(v22, sel_description);
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v19, v20, "RouteInfoResponse %s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v31, -1, -1);
      MEMORY[0x1CB77E470](v21, -1, -1);
    }
    else
    {
    }
    RouteInfoProfileSliceResolver.handleAceResponse(responseCommand:)(v18);
    OS_dispatch_semaphore.signal()();
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_1C8F83000, v28, v29, "Ace Command returned from MAF is nil", v30, 2u);
      MEMORY[0x1CB77E470](v30, -1, -1);
    }

    OS_dispatch_semaphore.signal()();
  }
}

void RouteInfoProfileSliceResolver.handleAceResponse(responseCommand:)(void *a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = *v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  unint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v52 - v9;
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v15 = swift_dynamicCastObjCClass();
  if (!v15) {
    return;
  }
  uint64_t v16 = v15;
  uint64_t v17 = self;
  id v56 = a1;
  id v18 = objc_msgSend(v17, sel_aceObjectWithGenericCommand_, v16);
  if (!v18) {
    goto LABEL_27;
  }
  uint64_t v19 = v18;
  self;
  uint64_t v20 = swift_dynamicCastObjCClass();
  if (!v20)
  {
    self;
    uint64_t v31 = swift_dynamicCastObjCClass();
    if (v31)
    {
      uint64_t v32 = (void *)v31;
      id v55 = v19;
      id v33 = objc_msgSend(v32, sel_route);
      if (v33)
      {
        id v34 = v33;
        uint64_t v54 = v8;
        *(&v52 - 2) = MEMORY[0x1F4188790](v33);
        *(&v52 - 1) = v4;
        lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, MEMORY[0x1E4F89328]);
        static Message.with(_:)();

        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v10, v14, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
        uint64_t v35 = (uint64_t)v54;
        outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v10, (uint64_t)v54);
        uint64_t v36 = (uint64_t)v2
            + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
        swift_beginAccess();
        uint64_t v37 = v35;
LABEL_14:
        outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?(v37, v36);
        swift_endAccess();
        return;
      }
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
      os_log_type_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl(&dword_1C8F83000, v48, v49, "Returned command has no provided route. Cannot construct routeInfoProfileSlice", v50, 2u);
        MEMORY[0x1CB77E470](v50, -1, -1);

        id v51 = v55;
LABEL_28:

        return;
      }
    }
    else
    {
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
      id v40 = v19;
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        v57[0] = v44;
        *(_DWORD *)uint64_t v43 = 136315138;
        swift_getObjectType();
        uint64_t v45 = _typeName(_:qualified:)();
        v57[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v41, v42, "Service helper response was of type %s, not SALocalSearchGetNavigationStatusCompleted. Cannot complete RouteInfo profile slice", v43, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v44, -1, -1);
        MEMORY[0x1CB77E470](v43, -1, -1);

        return;
      }
    }
LABEL_27:
    id v51 = v56;
    goto LABEL_28;
  }
  uint64_t v21 = (void *)v20;
  id v55 = (id)v12;
  id v22 = v19;
  unint64_t v23 = (unint64_t)objc_msgSend(v21, sel_errorCode);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  id v25 = v22;
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v54 = v8;
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v53 = v10;
    os_log_type_t v29 = v28;
    unint64_t v52 = v23;
    *(_DWORD *)uint64_t v28 = 134217984;
    v57[0] = (uint64_t)objc_msgSend(v21, sel_errorCode);
    unint64_t v8 = v54;
    unint64_t v23 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1C8F83000, v26, v27, "Command failed with error code = %ld", v29, 0xCu);
    uint64_t v30 = v29;
    uint64_t v10 = v53;
    MEMORY[0x1CB77E470](v30, -1, -1);
  }
  else
  {
  }
  os_log_type_t v38 = (void (**)(char *, char *, uint64_t))v55;
  if ((v23 & 0xFFFFFFFFFFFFFFFELL) == 0x5DC)
  {
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, MEMORY[0x1E4F89328]);
    static Message.with(_:)();

    v38[4](v10, v14, v11);
    ((void (*)(char *, void, uint64_t, uint64_t))v38[7])(v10, 0, 1, v11);
    outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v10, (uint64_t)v8);
    uint64_t v36 = (uint64_t)v2
        + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
    swift_beginAccess();
    uint64_t v37 = (uint64_t)v8;
    goto LABEL_14;
  }
}

uint64_t closure #1 in RouteInfoProfileSliceResolver.handleAceResponse(responseCommand:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  MEMORY[0x1F4188790](v4);
  (*(void (**)(char *, void))(v6 + 104))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F89710]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4F89B40], v0);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
}

uint64_t closure #2 in RouteInfoProfileSliceResolver.handleAceResponse(responseCommand:)(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = a1;
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v28 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  MEMORY[0x1F4188790](v3);
  os_log_type_t v27 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  uint64_t v34 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  id v33 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v31 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RouteInfo();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  id v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = a2;
  uint64_t v19 = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RouteInfo and conformance Apple_Parsec_Siri_V2alpha_RouteInfo, MEMORY[0x1E4F88C98]);
  uint64_t v20 = v32;
  static Message.with(_:)();
  uint64_t v36[3] = v15;
  v36[4] = v19;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v36);
  uint64_t v32 = (uint64_t (**)(char *, uint64_t))v16;
  (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 16))(boxed_opaque_existential_1, v18, v15);
  defaultAnyTypeURLPrefix.getter();
  Google_Protobuf_Any.init(message:partial:typePrefix:)();
  if (v20)
  {

    uint64_t v22 = 1;
  }
  else
  {
    uint64_t v22 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, v22, 1, v6);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    Google_Protobuf_Any.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v31, v12, v6);
  }
  uint64_t v23 = v29;
  id v25 = v27;
  uint64_t v24 = v28;
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
  (*(void (**)(char *, void, uint64_t))(v34 + 104))(v33, *MEMORY[0x1E4F89710], v37);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, void, uint64_t))(v24 + 104))(v25, *MEMORY[0x1E4F89B48], v23);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
  outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  return v32[1](v18, v15);
}

id closure #1 in static RouteInfoProfileSliceResolver.buildRouteInfoSliceValue(aceRoute:)(int a1, id a2)
{
  id v3 = objc_msgSend(a2, sel_originalWaypointRoute);
  if (v3)
  {
    uint64_t v4 = v3;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    Apple_Parsec_Siri_V2alpha_RouteInfo.originalWaypointRoute.setter();
  }
  id v5 = objc_msgSend(a2, sel_routeId);
  if (v5)
  {
    uint64_t v6 = v5;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    Apple_Parsec_Siri_V2alpha_RouteInfo.routeID.setter();
  }
  id v7 = objc_msgSend(a2, sel_sessionState);
  if (v7)
  {
    uint64_t v8 = v7;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    Apple_Parsec_Siri_V2alpha_RouteInfo.sessionState.setter();
  }
  id v9 = objc_msgSend(a2, sel_etaFilter);
  if (v9)
  {
    uint64_t v10 = v9;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    Apple_Parsec_Siri_V2alpha_RouteInfo.etaFilter.setter();
  }
  id result = objc_msgSend(a2, sel_evChargingMetadata);
  if (result)
  {
    uint64_t v12 = result;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)Apple_Parsec_Siri_V2alpha_RouteInfo.evChargingMetadata.setter();
  }
  return result;
}

uint64_t RouteInfoProfileSliceResolver.deinit()
{
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);

  return v0;
}

uint64_t RouteInfoProfileSliceResolver.__deallocating_deinit()
{
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);

  return swift_deallocClassInstance();
}

uint64_t partial apply for closure #1 in RouteInfoProfileSliceResolver.resolveRouteInfoSlice(from:requestId:pommesCandidateId:instrumentationUtil:serviceHelper:dispatchQueue:)(uint64_t a1)
{
  return closure #1 in RouteInfoProfileSliceResolver.resolveRouteInfoSlice(from:requestId:pommesCandidateId:instrumentationUtil:serviceHelper:dispatchQueue:)(a1, *(void *)(v1 + 16));
}

uint64_t ObjC metadata update function for RouteInfoProfileSliceResolver()
{
  return type metadata accessor for RouteInfoProfileSliceResolver();
}

uint64_t type metadata accessor for RouteInfoProfileSliceResolver()
{
  uint64_t result = type metadata singleton initialization cache for RouteInfoProfileSliceResolver;
  if (!type metadata singleton initialization cache for RouteInfoProfileSliceResolver) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for RouteInfoProfileSliceResolver()
{
  type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for RouteInfoProfileSliceResolver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RouteInfoProfileSliceResolver);
}

uint64_t dispatch thunk of RouteInfoProfileSliceResolver.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of RouteInfoProfileSliceResolver.resolveRouteInfoSlice(from:requestId:pommesCandidateId:instrumentationUtil:serviceHelper:dispatchQueue:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  __int16 v3 = *(_WORD *)(a1 + 88);
  uint64_t v4 = *(uint64_t (**)(_OWORD *))(*(void *)v1 + 136);
  long long v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v6;
  v8[4] = *(_OWORD *)(a1 + 64);
  uint64_t v9 = v2;
  __int16 v10 = v3;
  return v4(v8);
}

void type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?()
{
  if (!lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
    }
  }
}

uint64_t partial apply for closure #2 in RouteInfoProfileSliceResolver.handleAceResponse(responseCommand:)(uint64_t a1)
{
  return closure #2 in RouteInfoProfileSliceResolver.handleAceResponse(responseCommand:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id partial apply for closure #1 in static RouteInfoProfileSliceResolver.buildRouteInfoSliceValue(aceRoute:)(int a1)
{
  return closure #1 in static RouteInfoProfileSliceResolver.buildRouteInfoSliceValue(aceRoute:)(a1, *(id *)(v1 + 16));
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t sub_1C90116A8()
{
  uint64_t v1 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  swift_release();

  return MEMORY[0x1F4186498](v0, ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v4);
}

uint64_t partial apply for closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(void *a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + v7);
  uint64_t v9 = *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(a1, a2, v2 + v6, v8, v9);
}

uint64_t sub_1C9011880()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

void partial apply for closure #1 in closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)()
{
  closure #1 in closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t closure #2 in PommesResponse.pommesRequestResult.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PommesRenderOptions.PromptType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 != *MEMORY[0x1E4F9FF18])
  {
    if (v6 == *MEMORY[0x1E4F9FF08]) {
      return 1;
    }
    if (v6 == *MEMORY[0x1E4F9FF10]) {
      return 2;
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1C8F83000, v9, v10, "Received @unknown promptType from experience", v11, 2u);
      MEMORY[0x1CB77E470](v11, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return 0;
}

void *PommesResponse.curareInteractionDataVersion.unsafeMutableAddressor()
{
  return &static PommesResponse.curareInteractionDataVersion;
}

uint64_t static PommesResponse.curareInteractionDataVersion.getter()
{
  return 0;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  int v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  int v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  int v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  int v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x1CB77D510](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = MEMORY[0x1CB77D510](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = MEMORY[0x1CB77D510](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x1CB77D510](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

uint64_t outlined destroy of PommesRenderOptions.PromptType?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()()
{
  return static Message.with(_:)();
}

uint64_t partial apply for closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()()
{
  return closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  return static Message.with(_:)();
}

uint64_t partial apply for closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1)
{
  return closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  return static Message.with(_:)();
}

uint64_t partial apply for closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  return closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()();
}

uint64_t closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_Context_PegasusSemanticValue();
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  MEMORY[0x1F4188790](v1);
  lazy protocol witness table accessor for type Apple_Parsec_Siri_Context_PromptContext and conformance Apple_Parsec_Siri_Context_PromptContext(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_PegasusSemanticValue and conformance Apple_Parsec_Siri_Context_PegasusSemanticValue, MEMORY[0x1E4F88640]);
  static Message.with(_:)();
  Apple_Parsec_Siri_Context_PegasusDisplayHint.idValue.setter();
  static Message.with(_:)();
  return Apple_Parsec_Siri_Context_PegasusDisplayHint.displayValue.setter();
}

unint64_t Com_Apple_Siri_Product_Proto_PromptContext.makeLabel(fromNode:)()
{
  unint64_t v0 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v1 = MEMORY[0x1CB77D3C0](46, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x1E4FBB1A0], v0);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v1 + 32 * v2);
    unint64_t v4 = *v3;
    unint64_t v5 = v3[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
    if (v7) {
      unint64_t v8 = v5;
    }
    else {
      unint64_t v8 = result;
    }
    if (v8 >> 14 < v4 >> 14)
    {
      __break(1u);
    }
    else
    {
      Substring.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = Substring.lowercased()()._countAndFlagsBits;
      swift_bridgeObjectRelease();
      unint64_t result = Substring.index(_:offsetBy:limitedBy:)();
      if (v10) {
        unint64_t result = v5;
      }
      if (v5 >> 14 >= result >> 14)
      {
        Substring.subscript.getter();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        swift_bridgeObjectRetain();
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return countAndFlagsBits;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  v13[1] = a3;
  uint64_t v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4(v7);
  Com_Apple_Siri_Product_Proto_SemanticValue.serializedValue.getter();
  char v10 = *(void (**)(char *, uint64_t))(v6 + 8);
  v10(v9, v5);
  uint64_t v11 = Apple_Parsec_Siri_Context_PegasusSemanticValue.value.setter();
  a4(v11);
  Com_Apple_Siri_Product_Proto_SemanticValue.ontologyNodePojoClassName.getter();
  v10(v9, v5);
  Com_Apple_Siri_Product_Proto_PromptContext.makeLabel(fromNode:)();
  swift_bridgeObjectRelease();
  return Apple_Parsec_Siri_Context_PegasusSemanticValue.label.setter();
}

uint64_t closure #1 in closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  return static Message.with(_:)();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  return closure #1 in closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()();
}

uint64_t closure #1 in closure #1 in closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  return Apple_Parsec_Siri_Context_PegasusSemanticValue.label.setter();
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  return closure #1 in closure #1 in closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()();
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  return closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), MEMORY[0x1E4FA2B40]);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), MEMORY[0x1E4FA2B38]);
}

uint64_t PlayRadioStationPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static PlayRadioStationPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t PlayRadioStationPreflightClient.isSpanMatchedPlayRadioStationTask(task:)()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier.NluComponent();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  os_log_type_t v59 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
  MEMORY[0x1F4188790](v72);
  unint64_t v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v50 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v50 - v12;
  uint64_t v63 = type metadata accessor for UsoIdentifier();
  uint64_t v56 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v73 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v75[3])
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v75, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for UsoTask_play_common_RadioStation();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v70 = v1;
  swift_release();
  uint64_t v15 = byte_1F236EF00;
  uint64_t v16 = UsoTask.arguments.getter();
  uint64_t v17 = 0xEC00000073656974;
  uint64_t v18 = 0x69746E4572657375;
  switch(v15)
  {
    case 1:
      uint64_t v17 = 0xE600000000000000;
      uint64_t v18 = 0x746567726174;
      break;
    case 2:
      uint64_t v17 = 0xE900000000000065;
      uint64_t v18 = 0x636E657265666572;
      break;
    case 3:
      uint64_t v17 = 0xE700000000000000;
      uint64_t v18 = 0x72656767697274;
      break;
    default:
      break;
  }
  uint64_t v19 = *(void *)(v16 + 16);
  uint64_t v62 = v8;
  if (!v19 || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17), (v21 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v27 = MEMORY[0x1E4FBC860];
    goto LABEL_27;
  }
  unint64_t v22 = *(void *)(*(void *)(v16 + 56) + 8 * v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = MEMORY[0x1E4FBC860];
  v75[0] = MEMORY[0x1E4FBC860];
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    if (v24) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v24 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v24)
    {
LABEL_12:
      uint64_t v69 = v13;
      type metadata accessor for UsoEntity_common_RadioStation();
      if (v24 < 1)
      {
        __break(1u);
        JUMPOUT(0x1C9013330);
      }
      uint64_t v25 = 0;
      uint64_t v71 = (void (*)(char *, unint64_t, uint64_t))(v22 & 0xC000000000000001);
      do
      {
        if (v71) {
          MEMORY[0x1CB77D510](v25, v22);
        }
        else {
          swift_retain();
        }
        dispatch thunk of UsoValue.getAsEntity()();
        static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
        swift_release();
        uint64_t v26 = swift_release();
        if (v74)
        {
          MEMORY[0x1CB77CD90](v26);
          if (*(void *)((v75[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v75[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v25;
      }
      while (v24 != v25);
      swift_bridgeObjectRelease();
      unint64_t v28 = v75[0];
      uint64_t v13 = v69;
      uint64_t v23 = MEMORY[0x1E4FBC860];
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v28 = MEMORY[0x1E4FBC860];
LABEL_26:
  swift_bridgeObjectRelease();
  v75[0] = v23;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v28, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
  swift_bridgeObjectRelease();
  unint64_t v27 = v75[0];
LABEL_27:
  uint64_t v29 = v70;
  if (v27 >> 62) {
    goto LABEL_55;
  }
  uint64_t v30 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v30)
  {
LABEL_56:
    swift_bridgeObjectRelease_n();
    return 0;
  }
LABEL_29:
  unint64_t v57 = v27 & 0xC000000000000001;
  unint64_t v53 = v27 + 32;
  uint64_t v69 = (char *)(v56 + 16);
  unsigned int v68 = *MEMORY[0x1E4FA2CC0];
  uint64_t v66 = (void (**)(char *, void, uint64_t, uint64_t))(v29 + 56);
  uint64_t v67 = (void (**)(char *, void, uint64_t))(v29 + 104);
  uint64_t v31 = (unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  uint64_t v58 = (void (**)(char *, uint64_t, uint64_t))(v29 + 32);
  uint64_t v61 = (void (**)(uint64_t, uint64_t))(v29 + 8);
  uint64_t v29 = 0;
  unint64_t v64 = (void (**)(char *, uint64_t))(v56 + 8);
  uint64_t v65 = v31;
  uint64_t v32 = v63;
  unint64_t v51 = v27;
  uint64_t v50 = v30;
  while (1)
  {
    if (v57)
    {
      uint64_t v33 = MEMORY[0x1CB77D510](v29, v27);
      BOOL v34 = __OFADD__(v29++, 1);
      if (v34) {
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v33 = swift_retain();
      BOOL v34 = __OFADD__(v29++, 1);
      if (v34)
      {
LABEL_54:
        __break(1u);
LABEL_55:
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        if (!v30) {
          goto LABEL_56;
        }
        goto LABEL_29;
      }
    }
    uint64_t v35 = v33;
    dispatch thunk of UsoEntity_common_RadioStation.name.getter();
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if (v37)
    {
      uint64_t v38 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
      if (v38) {
        break;
      }
    }
    swift_release();
LABEL_31:
    if (v29 == v30) {
      goto LABEL_56;
    }
  }
  uint64_t v55 = v35;
  uint64_t v54 = v29;
  uint64_t v39 = *(void *)(v38 + 16);
  if (!v39)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_51:
    uint64_t v29 = v54;
    goto LABEL_31;
  }
  unint64_t v40 = v38 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
  uint64_t v41 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  uint64_t v70 = *(void *)(v56 + 72);
  uint64_t v71 = v41;
  uint64_t v52 = v38;
  swift_bridgeObjectRetain();
  while (1)
  {
    v71(v73, v40, v32);
    UsoIdentifier.sourceComponent.getter();
    (*v67)(v11, v68, v0);
    (*v66)(v11, 0, 1, v0);
    uint64_t v42 = (uint64_t)&v4[*(int *)(v72 + 48)];
    outlined init with copy of UsoIdentifier.NluComponent?((uint64_t)v13, (uint64_t)v4);
    uint64_t v43 = (uint64_t)v11;
    outlined init with copy of UsoIdentifier.NluComponent?((uint64_t)v11, v42);
    uint64_t v44 = *v65;
    if ((*v65)(v4, 1, v0) == 1) {
      break;
    }
    uint64_t v45 = (uint64_t)v13;
    uint64_t v46 = (uint64_t)v62;
    outlined init with copy of UsoIdentifier.NluComponent?((uint64_t)v4, (uint64_t)v62);
    if (v44((char *)v42, 1, v0) == 1)
    {
      (*v61)(v46, v0);
      uint64_t v13 = (char *)v45;
      uint64_t v32 = v63;
      goto LABEL_42;
    }
    uint64_t v47 = v59;
    (*v58)(v59, v42, v0);
    lazy protocol witness table accessor for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent();
    int v60 = dispatch thunk of static Equatable.== infix(_:_:)();
    os_log_type_t v48 = *v61;
    (*v61)(v46, v0);
    v48((uint64_t)v47, v0);
    outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    uint64_t v11 = (char *)v43;
    outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    uint64_t v13 = (char *)v45;
    outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    uint64_t v32 = v63;
    (*v64)(v73, v63);
    if (v60) {
      goto LABEL_53;
    }
LABEL_43:
    v40 += v70;
    if (!--v39)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      unint64_t v27 = v51;
      uint64_t v30 = v50;
      goto LABEL_51;
    }
  }
  if (v44((char *)v42, 1, v0) != 1)
  {
LABEL_42:
    outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
    uint64_t v11 = (char *)v43;
    outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    (*v64)(v73, v32);
    goto LABEL_43;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  (*v64)(v73, v32);
LABEL_53:
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t Siri_Nlu_External_UserParse.playRadioStationRelevantTasks()()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  unint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = Siri_Nlu_External_Span.matcherNames.getter();
  uint64_t v6 = MEMORY[0x1E4FBC860];
  v23[0] = MEMORY[0x1E4FBC860];
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7)
  {
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v17 = MEMORY[0x1E4FBC860];
LABEL_7:
    uint64_t v24 = v6;
    if (v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v18)
      {
LABEL_9:
        if (v18 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v19 = 0;
        while (1)
        {
          swift_retain();
          static UsoTask_CodegenConverter.convert(task:)();
          if (!v23[3]) {
            break;
          }
          type metadata accessor for UsoTask_play_common_RadioStation();
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_17;
          }
          swift_release();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
LABEL_12:
          if (v18 == ++v19)
          {
            swift_bridgeObjectRelease();
            return v24;
          }
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_17:
        swift_release();
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  uint64_t v8 = v2 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 64);
  uint64_t v20 = v5;
  uint64_t v11 = v5 + ((v10 + 32) & ~v10);
  uint64_t v12 = (void (**)(char *, uint64_t))(v8 - 8);
  uint64_t v21 = *(void *)(v8 + 56);
  unint64_t v22 = v9;
  while (1)
  {
    uint64_t v13 = v8;
    v22(v4, v11, v1);
    uint64_t v14 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    if (v0) {
      break;
    }
    unint64_t v15 = v14;
    (*v12)(v4, v1);
    specialized Array.append<A>(contentsOf:)(v15, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
    v11 += v21;
    --v7;
    uint64_t v8 = v13;
    if (!v7)
    {
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v17 = v23[0];
      uint64_t v6 = MEMORY[0x1E4FBC860];
      goto LABEL_7;
    }
  }
  (*v12)(v4, v1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PlayRadioStationPreflightClient.deinit()
{
  return v0;
}

uint64_t PlayRadioStationPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t PlayRadioStationPreflightClient.init()()
{
  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance PlayRadioStationPreflightClient()
{
  return 0xD00000000000001FLL;
}

uint64_t UsoEntity.recursiveAttributeCheck(where:)(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t result = UsoEntity.attributes.getter();
  int64_t v5 = 0;
  uint64_t v28 = result + 64;
  uint64_t v32 = result;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v29 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      uint64_t v30 = (v8 - 1) & v8;
      int64_t v31 = v5;
      unint64_t v9 = __clz(__rbit64(v8)) | (v5 << 6);
    }
    else
    {
      int64_t v10 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_58;
      }
      if (v10 >= v29) {
        goto LABEL_54;
      }
      unint64_t v11 = *(void *)(v28 + 8 * v10);
      int64_t v12 = v5 + 1;
      if (!v11)
      {
        int64_t v12 = v5 + 2;
        if (v5 + 2 >= v29) {
          goto LABEL_54;
        }
        unint64_t v11 = *(void *)(v28 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 3;
          if (v5 + 3 >= v29) {
            goto LABEL_54;
          }
          unint64_t v11 = *(void *)(v28 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 4;
            if (v5 + 4 >= v29) {
              goto LABEL_54;
            }
            unint64_t v11 = *(void *)(v28 + 8 * v12);
            if (!v11)
            {
              int64_t v12 = v5 + 5;
              if (v5 + 5 >= v29) {
                goto LABEL_54;
              }
              unint64_t v11 = *(void *)(v28 + 8 * v12);
              if (!v11)
              {
                uint64_t v13 = v5 + 6;
                if (v5 + 6 >= v29) {
                  goto LABEL_54;
                }
                unint64_t v11 = *(void *)(v28 + 8 * v13);
                if (!v11)
                {
                  while (1)
                  {
                    int64_t v12 = v13 + 1;
                    if (__OFADD__(v13, 1)) {
                      goto LABEL_59;
                    }
                    if (v12 >= v29) {
                      break;
                    }
                    unint64_t v11 = *(void *)(v28 + 8 * v12);
                    ++v13;
                    if (v11) {
                      goto LABEL_24;
                    }
                  }
LABEL_54:
                  swift_release();
                  return 0;
                }
                int64_t v12 = v5 + 6;
              }
            }
          }
        }
      }
LABEL_24:
      uint64_t v30 = (v11 - 1) & v11;
      int64_t v31 = v12;
      unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    }
    uint64_t v14 = (uint64_t *)(*(void *)(v32 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    uint64_t v17 = UsoEntity.attributes.getter();
    if (*(void *)(v17 + 16))
    {
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
      unint64_t v19 = MEMORY[0x1E4FBC860];
      if (v20)
      {
        unint64_t v19 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      unint64_t v19 = MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v19 >> 62) {
      break;
    }
    uint64_t v21 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v21) {
      goto LABEL_31;
    }
LABEL_4:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v8 = v30;
    int64_t v5 = v31;
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v21) {
    goto LABEL_4;
  }
LABEL_31:
  if ((v19 & 0xC000000000000001) != 0)
  {
    uint64_t v22 = MEMORY[0x1CB77D510](0, v19);
  }
  else
  {
    if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_57;
    }
    uint64_t v22 = *(void *)(v19 + 32);
    swift_retain();
  }
  if (a1(v22))
  {
LABEL_51:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return 1;
  }
  uint64_t v23 = 0;
  uint64_t v24 = v21 - 1;
  while (2)
  {
    if (dispatch thunk of UsoValue.getAsEntity()())
    {
      char v26 = UsoEntity.recursiveAttributeCheck(where:)(a1, a2);
      swift_release();
      uint64_t result = swift_release();
      if (v26)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v24 == v23) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t result = swift_release();
      if (v24 == v23) {
        goto LABEL_4;
      }
    }
    unint64_t v27 = v23 + 1;
    if ((v19 & 0xC000000000000001) != 0)
    {
      uint64_t result = MEMORY[0x1CB77D510](v23 + 1, v19);
      uint64_t v25 = result;
      if (__OFADD__(v27, 1)) {
        break;
      }
      goto LABEL_37;
    }
    if (v27 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_56;
    }
    uint64_t v25 = *(void *)(v19 + 8 * v23 + 40);
    uint64_t result = swift_retain();
    if (!__OFADD__(v27, 1))
    {
LABEL_37:
      ++v23;
      if (a1(v25)) {
        goto LABEL_51;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of UsoIdentifier.NluComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent;
  if (!lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent)
  {
    type metadata accessor for UsoIdentifier.NluComponent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent);
  }
  return result;
}

uint64_t type metadata accessor for PlayRadioStationPreflightClient()
{
  return self;
}

uint64_t method lookup function for PlayRadioStationPreflightClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PlayRadioStationPreflightClient);
}

uint64_t dispatch thunk of PlayRadioStationPreflightClient.isSpanMatchedPlayRadioStationTask(task:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of PlayRadioStationPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of PlayRadioStationPreflightClient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t AudioTypeFeaturiser.name.getter()
{
  return String.init<A>(describing:)();
}

uint64_t type metadata accessor for AudioTypeFeaturiser(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for AudioTypeFeaturiser);
}

uint64_t AudioTypeFeaturiser.__allocating_init(query:)(uint64_t a1)
{
  swift_allocObject();
  uint64_t v2 = specialized AudioTypeFeaturiser.init(query:)(a1);
  swift_release();
  return v2;
}

uint64_t AudioTypeFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v1 = specialized AudioTypeFeaturiser.init(query:)(a1);
  swift_release();
  return v1;
}

void AudioTypeFeaturiser.featurise(candidate:rankedSlotIndex:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  uint64_t v8 = matched - 8;
  MEMORY[0x1F4188790](matched);
  int64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_exactScore);
  uint64_t v12 = v1 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_requestedType;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v10, v1 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_requestedType, v3);
  uint64_t v13 = *a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType;
  uint64_t v14 = &v10[*(int *)(v8 + 28)];
  uint64_t v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, v13, v15);
  LOBYTE(v14) = specialized Set.contains(_:)((uint64_t)v10, v11);
  uint64_t v16 = outlined destroy of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v10);
  if (v14)
  {
    uint64_t v17 = (void *)*a1;
    unint64_t v18 = (void *)MEMORY[0x1E4FBC8C8];
    unint64_t v19 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v17) + 0xB8))(v16);
    v20.n128_u32[0] = 1068289229;
    (*(void (**)(__n128))((*v18 & *v19) + 0xA0))(v20);
  }
  else
  {
    uint64_t v21 = *(void *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_relatedScore);
    if (*(void *)(v21 + 16)
      && (uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v12), (v22 & 1) != 0)
      && (uint64_t v23 = specialized Dictionary.subscript.getter((uint64_t)v6, v16, *(_DWORD *)(v21 + 36), 0, v21),
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3),
          uint64_t v24 = (void *)*a1,
          v25 = specialized Set.contains(_:)(*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, v23), uint64_t v16 = swift_bridgeObjectRelease(), (v25 & 1) != 0))
    {
      char v26 = (void *)MEMORY[0x1E4FBC8C8];
      unint64_t v19 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v24) + 0xB8))(v16);
      v27.n128_u32[0] = 1066821222;
      (*(void (**)(__n128))((*v26 & *v19) + 0xA0))(v27);
    }
    else
    {
      uint64_t v28 = (void *)*a1;
      int64_t v29 = (void *)MEMORY[0x1E4FBC8C8];
      unint64_t v19 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v28) + 0xB8))(v16);
      v30.n128_u32[0] = 1.0;
      (*(void (**)(__n128))((*v29 & *v19) + 0xA0))(v30);
    }
  }
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  uint64_t v5 = *(void *)(matched - 8);
  MEMORY[0x1F4188790](matched);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, MEMORY[0x1E4F89478]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v8 = a1 + *(int *)(matched + 20);
  uint64_t v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
  v16[2] = v9;
  v16[3] = v8;
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(a2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
    return 0;
  }
  v16[1] = matched;
  v16[4] = a1;
  uint64_t v17 = a2;
  uint64_t v13 = ~v11;
  uint64_t v14 = *(void *)(v5 + 72);
  while (1)
  {
    outlined init with copy of AudioTypeFeaturiser.ExactMatchKey(*(void *)(v17 + 48) + v14 * v12, (uint64_t)v7);
    lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, MEMORY[0x1E4F89478]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v19 == v18)
    {
      lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v19 == v18) {
        break;
      }
    }
    outlined destroy of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v7);
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(a2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      return 0;
    }
  }
  outlined destroy of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v7);
  return 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  uint64_t v13;
  void (**v14)(char *, uint64_t);
  char v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    unint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
      uint64_t v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    uint64_t v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  uint64_t v13;
  void (**v14)(char *, uint64_t);
  char v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v3 = type metadata accessor for DeviceClass();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey(&lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass, MEMORY[0x1E4FA50C0]), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    unint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey((unint64_t *)&lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass, MEMORY[0x1E4FA50C0]);
      uint64_t v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    uint64_t v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  uint64_t v13;
  void (**v14)(char *, uint64_t);
  char v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v3 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    unint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
      uint64_t v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    uint64_t v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL specialized Set.contains(_:)(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    CommonAudio.Attribute.rawValue.getter(a1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v4 = Hasher._finalize()();
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v6 = v4 & ~v5;
    if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
    {
      uint64_t v7 = ~v5;
      uint64_t v8 = a1;
      while (1)
      {
        unint64_t v9 = 0xEA00000000007473;
        unint64_t v10 = 0x697472416D6F7266;
        switch(*(unsigned char *)(*(void *)(a2 + 48) + v6))
        {
          case 1:
            unint64_t v9 = 0xE800000000000000;
            unint64_t v10 = 0x676E6F536D6F7266;
            break;
          case 2:
            unint64_t v10 = 0x75626C416D6F7266;
            unint64_t v9 = 0xE90000000000006DLL;
            break;
          case 3:
            unint64_t v9 = 0xE800000000000000;
            unint64_t v10 = 0x7478654E79616C70;
            break;
          case 4:
            unint64_t v9 = 0xE700000000000000;
            unint64_t v10 = 0x776F4E79616C70;
            break;
          case 5:
            unint64_t v9 = 0xE800000000000000;
            unint64_t v10 = 0x7473614C79616C70;
            break;
          case 6:
            unint64_t v9 = 0xE800000000000000;
            unint64_t v10 = 0x7974696E69666661;
            break;
          case 7:
            unint64_t v10 = 0x6E656D6D6F636572;
            unint64_t v9 = 0xEB00000000646564;
            break;
          case 8:
            unint64_t v9 = 0xE900000000000079;
            unint64_t v10 = 0x7265766F63736964;
            break;
          case 9:
            unint64_t v9 = 0x80000001C919C1E0;
            unint64_t v10 = 0xD000000000000018;
            break;
          case 0xA:
            unint64_t v9 = 0xE400000000000000;
            unint64_t v10 = 1954047342;
            break;
          case 0xB:
            unint64_t v9 = 0xE500000000000000;
            unint64_t v10 = 0x64656D616ELL;
            break;
          case 0xC:
            unint64_t v9 = 0xE800000000000000;
            unint64_t v10 = 0x73756F6976657270;
            break;
          case 0xD:
            unint64_t v10 = 0x44657361656C6572;
            unint64_t v9 = 0xEB00000000657461;
            break;
          case 0xE:
            unint64_t v9 = 0xE800000000000000;
            unint64_t v10 = 0x6E6F697461727564;
            break;
          default:
            break;
        }
        uint64_t v11 = 0x697472416D6F7266;
        unint64_t v12 = 0xEA00000000007473;
        switch(v8)
        {
          case 1:
            unint64_t v12 = 0xE800000000000000;
            if (v10 == 0x676E6F536D6F7266) {
              goto LABEL_46;
            }
            goto LABEL_47;
          case 2:
            unint64_t v12 = 0xE90000000000006DLL;
            if (v10 != 0x75626C416D6F7266) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 3:
            unint64_t v12 = 0xE800000000000000;
            if (v10 != 0x7478654E79616C70) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 4:
            unint64_t v12 = 0xE700000000000000;
            if (v10 != 0x776F4E79616C70) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 5:
            unint64_t v12 = 0xE800000000000000;
            if (v10 != 0x7473614C79616C70) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 6:
            unint64_t v12 = 0xE800000000000000;
            if (v10 != 0x7974696E69666661) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 7:
            unint64_t v12 = 0xEB00000000646564;
            if (v10 != 0x6E656D6D6F636572) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 8:
            unint64_t v12 = 0xE900000000000079;
            if (v10 != 0x7265766F63736964) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 9:
            unint64_t v12 = 0x80000001C919C1E0;
            if (v10 != 0xD000000000000018) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 10:
            unint64_t v12 = 0xE400000000000000;
            if (v10 != 1954047342) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 11:
            unint64_t v12 = 0xE500000000000000;
            if (v10 != 0x64656D616ELL) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 12:
            unint64_t v12 = 0xE800000000000000;
            if (v10 != 0x73756F6976657270) {
              goto LABEL_47;
            }
            goto LABEL_46;
          case 13:
            uint64_t v11 = 0x44657361656C6572;
            unint64_t v12 = 0xEB00000000657461;
            goto LABEL_45;
          case 14:
            unint64_t v12 = 0xE800000000000000;
            if (v10 != 0x6E6F697461727564) {
              goto LABEL_47;
            }
            goto LABEL_46;
          default:
LABEL_45:
            if (v10 != v11) {
              goto LABEL_47;
            }
LABEL_46:
            if (v9 == v12)
            {
              swift_bridgeObjectRelease_n();
              char v13 = 1;
              return v13 & 1;
            }
LABEL_47:
            char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v13) {
              return v13 & 1;
            }
            unint64_t v6 = (v6 + 1) & v7;
            if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
              return v13 & 1;
            }
            break;
        }
      }
    }
  }
  char v13 = 0;
  return v13 & 1;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(a5 + 48);
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a2, v8);

  return swift_bridgeObjectRetain();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioTypeFeaturiser.ExactMatchKey()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AudioTypeFeaturiser.ExactMatchKey()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioTypeFeaturiser.ExactMatchKey()
{
  return Hasher._finalize()();
}

uint64_t AudioTypeFeaturiser.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_requestedType;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AudioTypeFeaturiser.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_requestedType;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Featuriser.name.getter in conformance AudioTypeFeaturiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t protocol witness for Featuriser.featurise(candidate:rankedSlotIndex:) in conformance AudioTypeFeaturiser()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

BOOL specialized static AudioTypeFeaturiser.ExactMatchKey.== infix(_:_:)()
{
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, MEMORY[0x1E4F89478]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v2 != v1) {
    return 0;
  }
  type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E4F88FD0]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  return v2 == v1;
}

uint64_t specialized AudioTypeFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v98 = OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_exactScore;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AudioTypeFeaturiser.ExactMatchKey>);
  uint64_t matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  uint64_t v101 = *(void *)(*(void *)(matched - 8) + 72);
  unint64_t v1 = (*(unsigned __int8 *)(*(void *)(matched - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(matched - 8) + 80);
  uint64_t v96 = swift_allocObject();
  *(_OWORD *)(v96 + 16) = xmmword_1C9196220;
  uint64_t v2 = *MEMORY[0x1E4F89460];
  unsigned int v93 = *MEMORY[0x1E4F89460];
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  uint64_t v77 = *(void *)(v3 - 8);
  BOOL v103 = *(void (**)(unint64_t, uint64_t, uint64_t))(v77 + 104);
  v103(v96 + v1, v2, v3);
  unint64_t v4 = v96 + v1 + *(int *)(matched + 20);
  uint64_t v5 = *MEMORY[0x1E4F88FC0];
  unsigned int v94 = *MEMORY[0x1E4F88FC0];
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 104);
  uint64_t v9 = v7 + 104;
  uint64_t v78 = v6;
  v8(v4, v5, v6);
  unint64_t v10 = (void (*)(unint64_t))v8;
  uint64_t v11 = *MEMORY[0x1E4F89448];
  v103(v96 + v1 + v101, v11, v3);
  unsigned int v86 = *MEMORY[0x1E4F88F30];
  v10(v96 + v1 + v101 + *(int *)(matched + 20));
  v103(v96 + v1 + 2 * v101, v11, v3);
  unsigned int v83 = *MEMORY[0x1E4F88F50];
  v10(v96 + v1 + 2 * v101 + *(int *)(matched + 20));
  uint64_t v12 = v96 + v1 + 3 * v101;
  v103(v12, v11, v3);
  unsigned int v89 = *MEMORY[0x1E4F88F60];
  v10(v12 + *(int *)(matched + 20));
  ((void (*)(unint64_t))v103)(v96 + v1 + 4 * v101);
  unsigned int v85 = *MEMORY[0x1E4F88F98];
  v10(v96 + v1 + 4 * v101 + *(int *)(matched + 20));
  v103(v96 + v1 + 5 * v101, *MEMORY[0x1E4F893B0], v3);
  unsigned int v84 = *MEMORY[0x1E4F88F28];
  v10(v96 + v1 + 5 * v101 + *(int *)(matched + 20));
  v103(v96 + v1 + 6 * v101, *MEMORY[0x1E4F89468], v3);
  ((void (*)(unint64_t, void, uint64_t))v10)(v96 + v1 + 6 * v101 + *(int *)(matched + 20), *MEMORY[0x1E4F88FC8], v78);
  uint64_t v13 = v96 + v1 + 7 * v101;
  v103(v13, *MEMORY[0x1E4F89400], v3);
  unsigned int v81 = *MEMORY[0x1E4F88F80];
  v10(v13 + *(int *)(matched + 20));
  uint64_t v14 = v96 + v1 + 8 * v101;
  uint64_t v15 = *MEMORY[0x1E4F89420];
  v103(v14, v15, v3);
  unsigned int v80 = *MEMORY[0x1E4F88FA0];
  v10(v14 + *(int *)(matched + 20));
  uint64_t v16 = v96 + v1 + 9 * v101;
  v103(v16, v15, v3);
  unsigned int v88 = *MEMORY[0x1E4F88F40];
  v10(v16 + *(int *)(matched + 20));
  uint64_t v17 = v96 + v1 + 10 * v101;
  v103(v17, *MEMORY[0x1E4F89430], v3);
  unsigned int v67 = *MEMORY[0x1E4F88FA8];
  v10(v17 + *(int *)(matched + 20));
  v103(v96 + v1 + 11 * v101, *MEMORY[0x1E4F893C0], v3);
  ((void (*)(unint64_t, void, uint64_t))v10)(v96 + v1 + 11 * v101 + *(int *)(matched + 20), v88, v78);
  ((void (*)(unint64_t))v103)(v96 + v1 + 12 * v101);
  unsigned int v82 = *MEMORY[0x1E4F88F58];
  v10(v96 + v1 + 12 * v101 + *(int *)(matched + 20));
  ((void (*)(unint64_t))v103)(v96 + v1 + 13 * v101);
  unsigned int v75 = *MEMORY[0x1E4F88FB0];
  v10(v96 + v1 + 13 * v101 + *(int *)(matched + 20));
  ((void (*)(unint64_t))v103)(v96 + v1 + 14 * v101);
  ((void (*)(unint64_t, void, uint64_t))v10)(v96 + v1 + 14 * v101 + *(int *)(matched + 20), v94, v78);
  uint64_t v18 = v96 + v1 + 15 * v101;
  unsigned int v73 = *MEMORY[0x1E4F893F8];
  ((void (*)(uint64_t))v103)(v18);
  unsigned int v65 = *MEMORY[0x1E4F88F78];
  v10(v18 + *(int *)(matched + 20));
  uint64_t v19 = *MEMORY[0x1E4F89408];
  v103(v96 + v1 + 16 * v101, v19, v3);
  ((void (*)(unint64_t, void, uint64_t))v10)(v96 + v1 + 16 * v101 + *(int *)(matched + 20), *MEMORY[0x1E4F88F88], v78);
  v103(v96 + v1 + 17 * v101, v19, v3);
  ((void (*)(unint64_t, void, uint64_t))v10)(v96 + v1 + 17 * v101 + *(int *)(matched + 20), v88, v78);
  uint64_t v20 = v96 + v1 + 18 * v101;
  unsigned int v72 = *MEMORY[0x1E4F893E8];
  ((void (*)(uint64_t))v103)(v20);
  ((void (*)(uint64_t, void, uint64_t))v10)(v20 + *(int *)(matched + 20), *MEMORY[0x1E4F88F70], v78);
  uint64_t v21 = specialized Set.init<A>(_:)(v96);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v87 + v98) = v21;
  uint64_t v74 = OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_relatedScore;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_RequestedMediaType, Set<Apple_Parsec_Siri_V2alpha_AudioItemType>)>);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_RequestedMediaType, Set<Apple_Parsec_Siri_V2alpha_AudioItemType>));
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v97 = v22 - 8;
  uint64_t v99 = *(void *)(v23 + 72);
  uint64_t v24 = v22 - 8;
  unint64_t v25 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v71 = swift_allocObject();
  *(_OWORD *)(v71 + 16) = xmmword_1C9195360;
  unint64_t v26 = v71 + v25;
  uint64_t v79 = *(int *)(v24 + 56);
  v103(v71 + v25, v93, v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
  uint64_t v92 = *(void *)(v9 - 32);
  unint64_t v27 = (*(unsigned __int8 *)(v9 - 24) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 - 24);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1C91947A0;
  ((void (*)(unint64_t, void, uint64_t))v10)(v28 + v27, v89, v78);
  uint64_t v29 = specialized Set.init(_nonEmptyArrayLiteral:)(v28);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  unint64_t v95 = v26;
  *(void *)(v26 + v79) = v29;
  uint64_t v61 = v26 + v99;
  uint64_t v63 = *(int *)(v97 + 56);
  ((void (*)(void))v103)();
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1C9195D60;
  ((void (*)(unint64_t, void, uint64_t))v10)(v30 + v27, v81, v78);
  ((void (*)(unint64_t, void, uint64_t))v10)(v30 + v27 + v92, v80, v78);
  uint64_t v31 = specialized Set.init(_nonEmptyArrayLiteral:)(v30);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v61 + v63) = v31;
  uint64_t v62 = *(int *)(v97 + 56);
  ((void (*)(void))v103)();
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1C91947A0;
  ((void (*)(unint64_t, void, uint64_t))v10)(v32 + v27, v84, v78);
  uint64_t v33 = specialized Set.init(_nonEmptyArrayLiteral:)(v32);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v95 + 2 * v99 + v62) = v33;
  uint64_t v64 = *(int *)(v97 + 56);
  ((void (*)(void))v103)();
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1C9196230;
  ((void (*)(unint64_t, void, uint64_t))v10)(v34 + v27, v65, v78);
  ((void (*)(unint64_t, void, uint64_t))v10)(v34 + v27 + v92, v85, v78);
  ((void (*)(unint64_t, void, uint64_t))v10)(v34 + v27 + 2 * v92, v81, v78);
  ((void (*)(unint64_t, void, uint64_t))v10)(v34 + v27 + 3 * v92, v80, v78);
  uint64_t v35 = specialized Set.init(_nonEmptyArrayLiteral:)(v34);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v95 + 3 * v99 + v64) = v35;
  uint64_t v66 = *(int *)(v97 + 56);
  ((void (*)(void))v103)();
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1C91947A0;
  ((void (*)(unint64_t, void, uint64_t))v10)(v36 + v27, v67, v78);
  uint64_t v37 = specialized Set.init(_nonEmptyArrayLiteral:)(v36);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v95 + 4 * v99 + v66) = v37;
  uint64_t v68 = *(int *)(v97 + 56);
  ((void (*)(void))v103)();
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_1C9194790;
  ((void (*)(unint64_t, void, uint64_t))v10)(v38 + v27, v86, v78);
  ((void (*)(unint64_t, void, uint64_t))v10)(v38 + v27 + v92, v83, v78);
  ((void (*)(unint64_t, void, uint64_t))v10)(v38 + v27 + 2 * v92, v89, v78);
  uint64_t v39 = specialized Set.init(_nonEmptyArrayLiteral:)(v38);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v95 + 5 * v99 + v68) = v39;
  uint64_t v69 = *(int *)(v97 + 56);
  ((void (*)(void))v103)();
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1C9194790;
  ((void (*)(unint64_t, void, uint64_t))v10)(v40 + v27, v82, v78);
  ((void (*)(unint64_t, void, uint64_t))v10)(v40 + v27 + v92, v88, v78);
  ((void (*)(unint64_t, void, uint64_t))v10)(v40 + v27 + 2 * v92, *MEMORY[0x1E4F88F68], v78);
  uint64_t v41 = specialized Set.init(_nonEmptyArrayLiteral:)(v40);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v95 + 6 * v99 + v69) = v41;
  uint64_t v70 = *(int *)(v97 + 56);
  ((void (*)(void))v103)();
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_1C91947A0;
  ((void (*)(unint64_t, void, uint64_t))v10)(v42 + v27, v89, v78);
  uint64_t v43 = specialized Set.init(_nonEmptyArrayLiteral:)(v42);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v95 + 7 * v99 + v70) = v43;
  uint64_t v90 = *(int *)(v97 + 56);
  ((void (*)(void))v103)();
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_1C9195D60;
  ((void (*)(unint64_t, void, uint64_t))v10)(v44 + v27, v83, v78);
  ((void (*)(unint64_t, void, uint64_t))v10)(v44 + v27 + v92, *MEMORY[0x1E4F88F48], v78);
  uint64_t v45 = specialized Set.init(_nonEmptyArrayLiteral:)(v44);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v95 + 8 * v99 + v90) = v45;
  unint64_t v46 = v95 + 9 * v99;
  uint64_t v91 = *(int *)(v97 + 56);
  v103(v46, v73, v3);
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_1C9195D60;
  ((void (*)(unint64_t, void, uint64_t))v10)(v47 + v27, v85, v78);
  ((void (*)(unint64_t, void, uint64_t))v10)(v47 + v27 + v92, v84, v78);
  uint64_t v48 = specialized Set.init(_nonEmptyArrayLiteral:)(v47);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v46 + v91) = v48;
  unint64_t v49 = v95 + 10 * v99;
  uint64_t v100 = *(int *)(v97 + 56);
  v103(v49, v72, v3);
  uint64_t v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_1C9194790;
  ((void (*)(unint64_t, void, uint64_t))v10)(v50 + v27, v86, v78);
  ((void (*)(unint64_t, void, uint64_t))v10)(v50 + v27 + v92, v82, v78);
  ((void (*)(unint64_t, void, uint64_t))v10)(v50 + v27 + 2 * v92, v75, v78);
  uint64_t v51 = specialized Set.init(_nonEmptyArrayLiteral:)(v50);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v49 + v100) = v51;
  *(void *)(v87 + v74) = specialized Dictionary.init(dictionaryLiteral:)(v71);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v52 = type metadata accessor for Logger();
  __swift_project_value_buffer(v52, (uint64_t)static Logger.pommes);
  swift_retain_n();
  unint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    uint64_t v104 = v56;
    *(_DWORD *)uint64_t v55 = 136315138;
    uint64_t v57 = Apple_Parsec_Siri_V2alpha_RequestedMediaType.toString.getter();
    if (v58)
    {
      unint64_t v59 = v58;
    }
    else
    {
      uint64_t v57 = 0;
      unint64_t v59 = 0xE000000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v59, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v53, v54, "AudioTypeFeaturiser : requestedMediaType=%s", v55, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v56, -1, -1);
    MEMORY[0x1CB77E470](v55, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16))(v87 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_requestedType, a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType, v3);
  return v87;
}

uint64_t type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for AudioTypeFeaturiser.ExactMatchKey);
}

uint64_t outlined destroy of AudioTypeFeaturiser.ExactMatchKey(uint64_t a1)
{
  uint64_t matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(matched - 8) + 8))(a1, matched);
  return a1;
}

uint64_t ObjC metadata update function for AudioTypeFeaturiser()
{
  return type metadata accessor for AudioTypeFeaturiser(0);
}

uint64_t type metadata completion function for AudioTypeFeaturiser()
{
  uint64_t result = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for AudioTypeFeaturiser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioTypeFeaturiser);
}

uint64_t dispatch thunk of AudioTypeFeaturiser.name.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of AudioTypeFeaturiser.__allocating_init(query:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of AudioTypeFeaturiser.featurise(candidate:rankedSlotIndex:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t *initializeBufferWithCopyOfBuffer for AudioTypeFeaturiser.ExactMatchKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t initializeWithCopy for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C90173A0);
}

uint64_t sub_1C90173A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C90174AC);
}

uint64_t sub_1C90174AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata completion function for AudioTypeFeaturiser.ExactMatchKey()
{
  uint64_t result = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AudioTypeFeaturiser.ExactMatchKey()
{
  return lazy protocol witness table accessor for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey(&lazy protocol witness table cache variable for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey, (void (*)(uint64_t))type metadata accessor for AudioTypeFeaturiser.ExactMatchKey);
}

uint64_t outlined init with copy of AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2)
{
  uint64_t matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(matched - 8) + 16))(a2, a1, matched);
  return a2;
}

uint64_t ProfileSliceResolvingDataProvider.__allocating_init(mediaUserStateCenter:instrumentationUtil:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(void *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v6 + 16, &demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  *(void *)(v6 + 56) = a2;
  *(void *)(v6 + 64) = a3;
  swift_release();
  return v6;
}

uint64_t ProfileSliceResolvingDataProvider.init(mediaUserStateCenter:instrumentationUtil:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 64) = 0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(void *)(v3 + 48) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v3 + 16, &demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  *(void *)(v3 + 56) = a2;
  *(void *)(v3 + 64) = a3;
  swift_release();
  return v3;
}

uint64_t ProfileSliceResolvingDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2, int a3)
{
  void (*v16)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, unint64_t (*)@<X0>(unint64_t *@<X8>), void *, uint64_t);
  uint64_t v17;
  int v19;
  void v20[3];
  uint64_t v21;
  unsigned char v22[96];

  outlined init with take of PommesSearchReason?(a2, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v7, &demangling cache variable for type metadata for PommesSearchRequest?);
  uint64_t v8 = type metadata accessor for PommesSearchRequest(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for PommesSearchRequest?);
    return 0;
  }
  uint64_t v9 = *(void *)&v7[*(int *)(v8 + 92)];
  swift_bridgeObjectRetain();
  uint64_t v10 = outlined destroy of PommesSearchRequest((uint64_t)v7);
  if (!*(void *)(v9 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if (one-time initialization token for shared != -1) {
    uint64_t v10 = swift_once();
  }
  v20[1] = v20;
  uint64_t v11 = static PerformanceUtil.shared;
  MEMORY[0x1F4188790](v10);
  uint64_t v19 = a3;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v16 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, unint64_t (*)@<X0>(unint64_t *@<X8>), void *, uint64_t))(*(void *)v11 + 200);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_ProfileSlice]);
  LOBYTE(v19) = 2;
  v16(&v21, 0xD000000000000034, 0x80000001C919D740, 0, v15, "SiriInformationSearch/ProfileSliceResolvingDataProvider.swift", 61, 2, 57, "fetch(for:assistantData:serviceHelper:dispatchQueue:)", 53, v19, partial apply for closure #1 in ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:), &v20[-8], v17);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return v21;
}

uint64_t closure #1 in closure #1 in ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  unint64_t v26 = a1;
  unint64_t v27 = a3;
  uint64_t v30 = a2;
  uint64_t v25 = a7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v25 - v15;
  outlined init with copy of MediaUserStateCenter?(a6, (uint64_t)&v25 - v15, &demangling cache variable for type metadata for PommesSearchRequest?);
  uint64_t v17 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48);
  if (v18(v16, 1, v17) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for PommesSearchRequest?);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v21 = (uint64_t *)&v16[*(int *)(v17 + 32)];
    uint64_t v19 = *v21;
    uint64_t v20 = v21[1];
    swift_bridgeObjectRetain();
    outlined destroy of PommesSearchRequest((uint64_t)v16);
  }
  outlined init with copy of MediaUserStateCenter?(a6, (uint64_t)v14, &demangling cache variable for type metadata for PommesSearchRequest?);
  if (v18(v14, 1, v17) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for PommesSearchRequest?);
    uint64_t v22 = type metadata accessor for PommesCandidateId();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v10, 1, 1, v22);
  }
  else
  {
    PommesSearchRequest.pommesCandidateId.getter((uint64_t)v10);
    outlined destroy of PommesSearchRequest((uint64_t)v14);
    uint64_t v23 = type metadata accessor for PommesCandidateId();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v10, 0, 1, v23);
  }
  ProfileSliceResolvingDataProvider.resolve(_:serviceHelper:dispatchQueue:assistantData:requestId:pommesCandidateId:pommesSearchRequest:)(v26, v27, v28, v29, v19, v20, (uint64_t)v10, a6, v25);
  swift_bridgeObjectRelease();
  return outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for PommesCandidateId?);
}

uint64_t ProfileSliceResolvingDataProvider.resolve(_:serviceHelper:dispatchQueue:assistantData:requestId:pommesCandidateId:pommesSearchRequest:)@<X0>(uint8_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = v9;
  uint64_t v158 = a7;
  uint64_t v159 = (void *)a5;
  uint64_t v160 = a6;
  uint64_t v156 = a4;
  uint64_t v142 = a3;
  uint64_t v141 = a2;
  uint64_t v161 = a9;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v140 = (char *)&v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SiriKitContactResolver();
  uint64_t v152 = *(void *)(v15 - 8);
  uint64_t v153 = v15;
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v151 = (char *)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v144 = (char *)&v137 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v150 = (uint64_t)&v137 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v148 = (uint64_t)&v137 - v22;
  uint64_t v23 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v146 = (char *)&v137 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v162 = (char *)&v137 - v28;
  MEMORY[0x1F4188790](v27);
  unint64_t v163 = (uint64_t *)((char *)&v137 - v29);
  uint64_t v30 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v139 = (char *)&v137 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v149 = (char *)&v137 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v147 = (char *)&v137 - v37;
  MEMORY[0x1F4188790](v36);
  uint64_t v39 = (char *)&v137 - v38;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v41 = __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
  uint64_t v42 = *(void (**)(char *, uint8_t *, uint64_t))(v31 + 16);
  uint64_t v165 = a1;
  uint64_t v154 = v42;
  uint64_t v155 = v31 + 16;
  v42(v39, a1, v30);
  uint64_t v143 = v41;
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  BOOL v45 = os_log_type_enabled(v43, v44);
  uint64_t v166 = v30;
  uint64_t v157 = v31;
  uint64_t v164 = v23;
  if (v45)
  {
    unint64_t v46 = (uint8_t *)swift_slowAlloc();
    uint64_t v138 = v10;
    *(_DWORD *)unint64_t v46 = 134217984;
    uint64_t v137 = v46 + 4;
    uint64_t v47 = a8;
    uint64_t v48 = (uint64_t)v163;
    Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
    uint64_t v49 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
    uint64_t v50 = v48;
    a8 = v47;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v50, v164);
    uint64_t v145 = *(void (**)(char *, uint64_t))(v31 + 8);
    v145(v39, v166);
    uint64_t v167 = v49;
    uint64_t v10 = v138;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v43, v44, "Attempting to resolve profile slice type: %ld", v46, 0xCu);
    uint64_t v51 = v46;
    uint64_t v23 = v164;
    uint64_t v30 = v166;
    MEMORY[0x1CB77E470](v51, -1, -1);
  }
  else
  {
    uint64_t v145 = *(void (**)(char *, uint64_t))(v31 + 8);
    v145(v39, v30);
  }

  uint64_t v52 = v162;
  unint64_t v53 = v165;
  Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
  uint64_t v54 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v52, v23);
  if (v54 == *MEMORY[0x1E4F892E0]) {
    goto LABEL_7;
  }
  uint64_t v67 = v54;
  if (v54 == *MEMORY[0x1E4F892A8]) {
    return ProfileSliceResolvingDataProvider.resolveAmpSlice(requestId:pommesCandidateId:pommesSearchRequest:serviceHelper:dispatchQueue:)((uint64_t)v159, v160, v158, a8, v161);
  }
  if (v54 == *MEMORY[0x1E4F892F0] || v54 == *MEMORY[0x1E4F892E8])
  {
LABEL_7:
    uint64_t v55 = v150;
    outlined init with copy of MediaUserStateCenter?(v158, v150, &demangling cache variable for type metadata for PommesCandidateId?);
    uint64_t v56 = v149;
    v154(v149, v53, v30);
    uint64_t v162 = *(char **)(v10 + 56);
    uint64_t v57 = v156;
    outlined retain of AssistantDataSnapshot?(v156);
    uint64_t v58 = v160;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v59 = v151;
    SiriKitContactResolver.init()();
    id v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_init);
    type metadata accessor for ContactProfileSliceResolver();
    uint64_t v61 = (uint64_t *)swift_allocObject();
    uint64_t v62 = v153;
    v61[5] = v153;
    v61[6] = (uint64_t)&protocol witness table for SiriKitContactResolver;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v61 + 2);
    uint64_t v64 = v152;
    (*(void (**)(uint64_t *, char *, uint64_t))(v152 + 16))(boxed_opaque_existential_1, v59, v62);
    outlined init with take of PommesSearchReason?((uint64_t)v57, (uint64_t)(v61 + 7), (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
    v61[19] = (uint64_t)v159;
    v61[20] = v58;
    outlined init with take of PommesSearchReason?(v55, (uint64_t)v61 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId, &demangling cache variable for type metadata for PommesCandidateId?);
    (*(void (**)(uint64_t, char *, uint64_t))(v157 + 32))((uint64_t)v61 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_resolutionRequest, v56, v166);
    *(uint64_t *)((char *)v61 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_contactStore) = (uint64_t)v60;
    *(uint64_t *)((char *)v61 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_instrumentationUtil) = (uint64_t)v162;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v59, v62);
    unint64_t v65 = (unint64_t)v163;
    Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
    ContactProfileSliceResolver.resolveNameSlice(label:)(v65, v161);
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v24 + 8))(v65, v164);
  }
  if (v54 == *MEMORY[0x1E4F892A0])
  {
    outlined init with copy of MediaUserStateCenter?(v158, v148, &demangling cache variable for type metadata for PommesCandidateId?);
    v154(v147, v53, v30);
    uint64_t v165 = *(uint8_t **)(v10 + 56);
    uint64_t v68 = v156;
    outlined retain of AssistantDataSnapshot?(v156);
    uint64_t v69 = v160;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v70 = v144;
    SiriKitContactResolver.init()();
    uint64_t v162 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1B980]), sel_init);
    type metadata accessor for ContactProfileSliceResolver();
    uint64_t v71 = v30;
    unsigned int v72 = (uint64_t *)swift_allocObject();
    uint64_t v73 = v153;
    v72[5] = v153;
    v72[6] = (uint64_t)&protocol witness table for SiriKitContactResolver;
    unint64_t v163 = v72 + 2;
    uint64_t v74 = __swift_allocate_boxed_opaque_existential_1(v72 + 2);
    uint64_t v75 = v152;
    (*(void (**)(uint64_t *, char *, uint64_t))(v152 + 16))(v74, v70, v73);
    outlined init with take of PommesSearchReason?((uint64_t)v68, (uint64_t)(v72 + 7), (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
    v72[19] = (uint64_t)v159;
    v72[20] = v69;
    uint64_t v76 = &static EntityNameFeaturiser.precompdPnormExp;
    outlined init with take of PommesSearchReason?(v148, (uint64_t)v72 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId, &demangling cache variable for type metadata for PommesCandidateId?);
    (*(void (**)(uint64_t, char *, uint64_t))(v157 + 32))((uint64_t)v72 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_resolutionRequest, v147, v71);
    *(uint64_t *)((char *)v72 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_contactStore) = (uint64_t)v162;
    *(uint64_t *)((char *)v72 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_instrumentationUtil) = (uint64_t)v165;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v70, v73);
    uint64_t v165 = (uint8_t *)v24;
    uint64_t v77 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 104))(v146, v67, v23);
    uint64_t v78 = *(uint64_t *)((char *)v72
                     + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_instrumentationUtil);
    uint64_t v79 = v72[20];
    unsigned int v80 = (char *)v72 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId;
    unsigned int v81 = *(uint64_t (**)(void))(*(void *)v78 + 128);
    uint64_t v162 = (char *)v72[19];
    uint64_t v160 = v79;
    unsigned int v82 = (void *)v81();
    uint64_t v83 = MEMORY[0x1CB779450]();
    uint64_t v85 = HIBYTE(v84) & 0xF;
    if ((v84 & 0x2000000000000000) == 0) {
      uint64_t v85 = v83 & 0xFFFFFFFFFFFFLL;
    }
    if (v85)
    {
      uint64_t v86 = specialized ContactProfileSliceResolver.buildContactQuery(request:contactName:)(0, v83, v84);
      swift_bridgeObjectRelease();
      unint64_t v87 = ContactProfileSliceResolver.searchContacts(contactQuery:)(v86);
      swift_bridgeObjectRelease();
      if (v87)
      {
        swift_retain();
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8INPersonCG_10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceValueVs5NeverOTg504_s21i26InformationSearch27Contactkl79ResolverC07resolvedF033_93CEC19A51F00F19257E9CB35202CC6DLL11requestType5label10e6API013g1_h4_a9_j71_eF0VSgAC0d7RequestQ0AELLO_AH0u1_v1_a1_w1_eF5LabelOtFAH0u1_v1_a1_w1_eF5m4VSo8D6CXEfU_0iP6Search0rklS0CTf1cn_nTf4ng_n(v87, (uint64_t)v72);
        uint64_t v88 = v161;
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v89 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
        uint64_t v159 = &v137;
        MEMORY[0x1F4188790](v89);
        lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, MEMORY[0x1E4F88EF0]);
        uint64_t v77 = v146;
        static Message.with(_:)();
        uint64_t v76 = &static EntityNameFeaturiser.precompdPnormExp;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v88, 0, 1, v89);
      }
      else
      {
        uint64_t v115 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 56))(v161, 1, 1, v115);
      }
    }
    else
    {
      uint64_t v105 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56))(v161, 1, 1, v105);
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t, char *, void *))(*(void *)v78 + 136))(v162, v160, v80, v82);

    (*((void (**)(char *, uint64_t))v165 + 1))(v77, v23);
    swift_setDeallocating();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v163);
    outlined consume of AssistantDataSnapshot?(v72[7], v72[8], v72[9], v72[10]);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?((uint64_t)v76[67] + (void)v72, &demangling cache variable for type metadata for PommesCandidateId?);
    v145((char *)v72 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_resolutionRequest, v166);

    swift_release();
    return swift_deallocClassInstance();
  }
  else if (v54 == *MEMORY[0x1E4F892D0])
  {
    uint64_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v92 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v92 = 0;
      _os_log_impl(&dword_1C8F83000, v90, v91, "Resolving me card slice", v92, 2u);
      MEMORY[0x1CB77E470](v92, -1, -1);
    }

    return ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)((uint64_t)v156, (uint64_t)v159, v160, v158, v161);
  }
  else if (v54 == *MEMORY[0x1E4F892F8])
  {
    uint64_t v93 = v10;
    unsigned int v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v96 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v96 = 0;
      _os_log_impl(&dword_1C8F83000, v94, v95, "Resolving RouteInfo slice", v96, 2u);
      MEMORY[0x1CB77E470](v96, -1, -1);
    }

    type metadata accessor for RouteInfoProfileSliceResolver();
    uint64_t v97 = swift_allocObject();
    uint64_t v98 = v97 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
    uint64_t v99 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
    uint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56);
    v100(v98, 1, 1, v99);
    uint64_t v101 = OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_dispatchGroup;
    *(void *)(v97 + v101) = dispatch_group_create();
    *(void *)(v97 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_semaphore) = dispatch_semaphore_create(0);
    uint64_t v102 = (uint64_t)v140;
    v100((uint64_t)v140, 1, 1, v99);
    uint64_t v103 = v97 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
    swift_beginAccess();
    outlined assign with take of MediaUserStateCenter?(v102, v103, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
    swift_endAccess();
    uint64_t v104 = *(void *)(v93 + 56);
    swift_retain();
    RouteInfoProfileSliceResolver.resolveRouteInfoSlice(from:requestId:pommesCandidateId:instrumentationUtil:serviceHelper:dispatchQueue:)((uint64_t)v159, v160, v158, v104, v141, v142, v161);
    swift_release();
    return swift_release();
  }
  else if (v54 == *MEMORY[0x1E4F892B8])
  {
    uint64_t v106 = Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v106, v107))
    {
      char v108 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v108 = 0;
      _os_log_impl(&dword_1C8F83000, v106, v107, "Resolving parking location slice", v108, 2u);
      MEMORY[0x1CB77E470](v108, -1, -1);
    }

    type metadata accessor for ParkingLocationProfileSliceResolver();
    uint64_t v109 = swift_allocObject();
    uint64_t v110 = v109 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
    uint64_t v111 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
    uint64_t v112 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56);
    v112(v110, 1, 1, v111);
    *(void *)(v109 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_semaphore) = dispatch_semaphore_create(0);
    uint64_t v113 = (uint64_t)v140;
    v112((uint64_t)v140, 1, 1, v111);
    uint64_t v114 = v109 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
    swift_beginAccess();
    outlined assign with take of MediaUserStateCenter?(v113, v114, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
    swift_endAccess();
    *(unsigned char *)(v109 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_resolutionSucceeded) = 0;
    ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(v141, v142, v161);
    return swift_release();
  }
  else
  {
    uint64_t v116 = v23;
    uint64_t v117 = *(void *)(v10 + 56);
    swift_retain();
    uint64_t v118 = (uint64_t)v163;
    Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
    uint64_t v119 = (uint64_t)v159;
    uint64_t v120 = v160;
    uint64_t v121 = v158;
    uint64_t v122 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)v117 + 128))(v159, v160, v158, v118);
    swift_release();
    uint64_t v123 = v116;
    uint64_t v124 = (void *)v122;
    uint64_t v156 = *(uint64_t **)(v24 + 8);
    ((void (*)(uint64_t, uint64_t))v156)(v118, v123);
    uint64_t v125 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v10 + 56) + 144);
    swift_retain();
    v125(v119, v120, v121, v122, 2);
    swift_release();
    unint64_t v126 = v139;
    v154(v139, v165, v30);
    uint64_t v127 = Logger.logObject.getter();
    os_log_type_t v128 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v127, v128))
    {
      uint64_t v129 = (void *)v122;
      uint64_t v130 = v126;
      unint64_t v131 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v131 = 134217984;
      uint64_t v165 = v131 + 4;
      Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
      uint64_t v132 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
      uint64_t v133 = v118;
      uint64_t v134 = v164;
      ((void (*)(uint64_t, uint64_t))v156)(v133, v164);
      uint64_t v135 = v130;
      uint64_t v124 = v129;
      v145(v135, v30);
      uint64_t v167 = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C8F83000, v127, v128, "Skipping profile resolution request for an unsupported type: %ld", v131, 0xCu);
      MEMORY[0x1CB77E470](v131, -1, -1);
    }
    else
    {
      v145(v126, v30);
      uint64_t v134 = v164;
    }

    ((void (*)(char *, uint64_t))v156)(v162, v134);
    uint64_t v136 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 56))(v161, 1, 1, v136);
  }
}

uint64_t ProfileSliceResolvingDataProvider.resolveAmpSlice(requestId:pommesCandidateId:pommesSearchRequest:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v157 = (_DWORD *)a4;
  uint64_t v167 = a5;
  uint64_t v166 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v169 = *(void *)(v166 - 8);
  MEMORY[0x1F4188790](v166);
  uint64_t v168 = (char *)v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v156 = (uint64_t)v146 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v146 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v5 + 56);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E4F892A8], v13);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)v17 + 128);
  swift_retain();
  uint64_t v19 = (char *)v18(a1, a2, a3, v16);
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v20 = swift_allocObject();
  uint64_t v171 = v20;
  *(void *)(v20 + 16) = 0;
  uint64_t v164 = (uint64_t *)(v20 + 16);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = 0;
  unint64_t v163 = (void *)(v21 + 16);
  uint64_t v170 = v6;
  uint64_t v22 = v6 + 16;
  swift_beginAccess();
  outlined init with copy of MediaUserStateCenter?(v6 + 16, (uint64_t)&v180, &demangling cache variable for type metadata for MediaUserStateCenter?);
  unint64_t v23 = v181;
  outlined destroy of MediaUserStateCenter?((uint64_t)&v180, &demangling cache variable for type metadata for MediaUserStateCenter?);
  if (!v23)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = a1;
      uint64_t v28 = a2;
      uint64_t v29 = a3;
      uint64_t v30 = v19;
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_1C8F83000, v25, v26, "ProfileSliceResolvingDataProvider Initializing the shared media user state center ...", v31, 2u);
      uint64_t v32 = v31;
      uint64_t v19 = v30;
      a3 = v29;
      a2 = v28;
      a1 = v27;
      MEMORY[0x1CB77E470](v32, -1, -1);
    }

    id v33 = objc_msgSend(self, sel_shared);
    unint64_t v181 = type metadata accessor for ICMediaUserStateCenter();
    uint64_t v182 = &protocol witness table for ICMediaUserStateCenter;
    id v180 = v33;
    swift_beginAccess();
    outlined assign with take of MediaUserStateCenter?((uint64_t)&v180, v22, &demangling cache variable for type metadata for MediaUserStateCenter?);
    swift_endAccess();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl(&dword_1C8F83000, v34, v35, "ProfileSliceResolvingDataProvider Initializing the shared media user state center complete", v36, 2u);
      MEMORY[0x1CB77E470](v36, -1, -1);
    }
  }
  outlined init with copy of MediaUserStateCenter?(v22, (uint64_t)&v177, &demangling cache variable for type metadata for MediaUserStateCenter?);
  if (v178)
  {
    uint64_t v158 = a1;
    uint64_t v160 = a2;
    uint64_t v159 = a3;
    uint64_t v161 = v19;
    outlined init with take of AppDataProviding(&v177, (uint64_t)&v180);
    uint64_t v37 = dispatch_group_create();
    dispatch_group_enter(v37);
    unint64_t v38 = v181;
    uint64_t v39 = v182;
    __swift_project_boxed_opaque_existential_1(&v180, v181);
    uint64_t v40 = (void *)swift_allocObject();
    v40[2] = v37;
    uint64_t v40[3] = v21;
    v40[4] = v171;
    uint64_t v41 = (void (*)(void, void, void, void))v39[4];
    uint64_t v165 = v37;
    uint64_t v162 = v21;
    swift_retain();
    swift_retain();
    v41(partial apply for closure #1 in ProfileSliceResolvingDataProvider.resolveAmpSlice(requestId:pommesCandidateId:pommesSearchRequest:serviceHelper:dispatchQueue:), v40, v38, v39);
    swift_release();
    uint64_t v42 = type metadata accessor for DispatchTime();
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v44 = MEMORY[0x1F4188790](v42);
    unint64_t v46 = (char *)v146 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v152 = v45;
    MEMORY[0x1F4188790](v44);
    uint64_t v48 = (char *)v146 - v47;
    static DispatchTime.now()();
    uint64_t v49 = type metadata accessor for DispatchTimeInterval();
    uint64_t v50 = *(void *)(v49 - 8);
    MEMORY[0x1F4188790](v49);
    uint64_t v151 = v51;
    uint64_t v52 = (uint64_t (**)(uint64_t, char *))((char *)v146 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
    *uint64_t v52 = (uint64_t (*)(uint64_t, char *))1000;
    unint64_t v53 = *(void (**)(void))(v50 + 104);
    unsigned int v149 = *MEMORY[0x1E4FBCAC0];
    uint64_t v150 = v50 + 104;
    uint64_t v148 = (void (*)(void *, void, uint64_t))v53;
    v53(v52);
    MEMORY[0x1CB77C970](v48, v52);
    uint64_t v55 = *(void (**)(void *, uint64_t))(v50 + 8);
    uint64_t v54 = v50 + 8;
    uint64_t v153 = v49;
    uint64_t v147 = v55;
    v55(v52, v49);
    uint64_t v154 = v43;
    uint64_t v56 = *(void (**)(char *, uint64_t))(v43 + 8);
    v56(v48, v42);
    int v57 = MEMORY[0x1CB77D100](v46) & 1;
    uint64_t v58 = v46;
    uint64_t v155 = v42;
    LODWORD(v46) = v57;
    v56(v58, v42);
    v146[1] = v46;
    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      unint64_t v59 = v163;
      swift_beginAccess();
      if (!*v59)
      {
        uint64_t v60 = v156;
        outlined init with copy of MediaUserStateCenter?((uint64_t)v157, v156, &demangling cache variable for type metadata for PommesSearchRequest?);
        uint64_t v61 = type metadata accessor for PommesSearchRequest(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 48))(v60, 1, v61) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v60, &demangling cache variable for type metadata for PommesSearchRequest?);
        }
        else
        {
          char v71 = *(unsigned char *)(v60 + *(int *)(v61 + 60));
          outlined destroy of PommesSearchRequest(v60);
          if ((v71 & 1) == 0)
          {
            unsigned int v72 = v164;
            swift_beginAccess();
            uint64_t v73 = *v72;
            if (*v72)
            {
              uint64_t v74 = MEMORY[0x1E4FBC860];
              uint64_t v176 = MEMORY[0x1E4FBC860];
              uint64_t v75 = *(void *)(v73 + 16);
              swift_bridgeObjectRetain();
              if (v75)
              {
                unint64_t v76 = 0;
                uint64_t v77 = v73 + 32;
                uint64_t v156 = v73;
                while (v76 < *(void *)(v73 + 16))
                {
                  outlined init with copy of AppDataProviding(v77, (uint64_t)&v177);
                  uint64_t v78 = v178;
                  uint64_t v52 = v179;
                  __swift_project_boxed_opaque_existential_1(&v177, v178);
                  if (v52[4](v78, (char *)v52))
                  {
                    outlined init with take of AppDataProviding(&v177, (uint64_t)v172);
                    uint64_t v79 = v176;
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v79 + 16) + 1, 1);
                      uint64_t v79 = v176;
                    }
                    uint64_t v80 = v75;
                    unint64_t v82 = *(void *)(v79 + 16);
                    unint64_t v81 = *(void *)(v79 + 24);
                    if (v82 >= v81 >> 1) {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v82 + 1, 1);
                    }
                    uint64_t v83 = v173;
                    uint64_t v52 = v174;
                    uint64_t v84 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v172, v173);
                    uint64_t v157 = v146;
                    MEMORY[0x1F4188790](v84);
                    uint64_t v86 = (char *)v146 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
                    (*(void (**)(char *))(v87 + 16))(v86);
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v82, (uint64_t)v86, &v176, v83, (uint64_t)v52);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v172);
                    uint64_t v75 = v80;
                    uint64_t v73 = v156;
                  }
                  else
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v177);
                  }
                  ++v76;
                  v77 += 40;
                  if (v75 == v76)
                  {
                    uint64_t v74 = v176;
                    goto LABEL_33;
                  }
                }
                __break(1u);
                goto LABEL_74;
              }
LABEL_33:
              swift_bridgeObjectRelease();
              uint64_t v88 = v164;
            }
            else
            {
              uint64_t v74 = 0;
              uint64_t v88 = v164;
            }
            *uint64_t v88 = v74;
            swift_bridgeObjectRelease();
          }
        }
      }
    }
    uint64_t v89 = *(void *)(v170 + 64);
    if (v89)
    {
      uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
      uint64_t v157 = v146;
      uint64_t v91 = MEMORY[0x1F4188790](v90 - 8);
      uint64_t v93 = (char *)v146 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
      MEMORY[0x1F4188790](v91);
      os_log_type_t v95 = (char *)v146 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
      swift_retain();
      uint64_t v96 = static DispatchTime.now()();
      MEMORY[0x1F4188790](v96);
      uint64_t v98 = (void *)((char *)v146 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0));
      *uint64_t v98 = 1;
      uint64_t v99 = v153;
      v148(v98, v149, v153);
      MEMORY[0x1CB77C970](v95, v98);
      v147(v98, v99);
      uint64_t v100 = v155;
      v56(v95, v155);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v154 + 56))(v93, 0, 1, v100);
      uint64_t v101 = (*(uint64_t (**)(char *))(*(void *)v89 + 168))(v93);
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)v93, &demangling cache variable for type metadata for DispatchTime?);
    }
    else
    {
      uint64_t v101 = 0;
    }
    uint64_t v77 = v166;
    uint64_t v54 = v160;
    uint64_t v102 = v164;
    swift_beginAccess();
    uint64_t v103 = *v102;
    if (*v102 && *(void *)(v103 + 16))
    {
      uint64_t v104 = *(void (**)(uint64_t, uint64_t, uint64_t, char *))(**(void **)(v170 + 56) + 136);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v105 = v54;
      uint64_t v106 = v161;
      v104(v158, v105, v159, v161);
      swift_release();
      if (v101) {
        uint64_t v107 = v101;
      }
      else {
        uint64_t v107 = MEMORY[0x1E4FBC860];
      }
      uint64_t v108 = v169;
      uint64_t v109 = (uint64_t)v168;
      (*(void (**)(char *, void, uint64_t))(v169 + 104))(v168, *MEMORY[0x1E4F89B48], v77);
      swift_bridgeObjectRetain();
      unint64_t v110 = specialized Sequence.compactMap<A>(_:)(v103, v107);
      swift_bridgeObjectRelease();
      createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(v110, v109, 1, v167);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v109, v77);
      goto LABEL_65;
    }
    swift_bridgeObjectRelease();
    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      uint64_t v111 = (void **)v163;
      swift_beginAccess();
      uint64_t v112 = *v111;
      uint64_t v52 = (uint64_t (**)(uint64_t, char *))v161;
      if (v112)
      {
        id v113 = v112;
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v114 = type metadata accessor for Logger();
        __swift_project_value_buffer(v114, (uint64_t)static Logger.pommes);
        id v115 = v112;
        id v116 = v112;
        uint64_t v117 = Logger.logObject.getter();
        os_log_type_t v118 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v117, v118))
        {
          uint64_t v119 = (uint8_t *)swift_slowAlloc();
          uint64_t v120 = swift_slowAlloc();
          uint64_t v175 = (uint64_t)v112;
          uint64_t v176 = v120;
          *(_DWORD *)uint64_t v119 = 136315138;
          id v121 = v112;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          uint64_t v122 = String.init<A>(describing:)();
          uint64_t v175 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v123, &v176);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v54 = v160;
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_1C8F83000, v117, v118, "ProfileSliceResolvingDataProvider : AMP user state refresh return an error : %s", v119, 0xCu);
          swift_arrayDestroy();
          uint64_t v124 = v120;
          uint64_t v52 = (uint64_t (**)(uint64_t, char *))v161;
          MEMORY[0x1CB77E470](v124, -1, -1);
          MEMORY[0x1CB77E470](v119, -1, -1);
        }
        else
        {
        }
        uint64_t v140 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (**)(uint64_t, char *), uint64_t))(**(void **)(v170 + 56) + 144);
        swift_retain();
        v140(v158, v54, v159, v52, 3);
        swift_release();

        goto LABEL_64;
      }
      if (*v102)
      {
        if (*(void *)(*v102 + 16)) {
          goto LABEL_64;
        }
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v135 = type metadata accessor for Logger();
        __swift_project_value_buffer(v135, (uint64_t)static Logger.pommes);
        uint64_t v136 = Logger.logObject.getter();
        os_log_type_t v137 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v136, v137)) {
          goto LABEL_72;
        }
        uint64_t v138 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v138 = 0;
        uint64_t v139 = "ProfileSliceResolvingDataProvider : AMP user state refresh returned no user states";
      }
      else
      {
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v145 = type metadata accessor for Logger();
        __swift_project_value_buffer(v145, (uint64_t)static Logger.pommes);
        uint64_t v136 = Logger.logObject.getter();
        os_log_type_t v137 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v136, v137)) {
          goto LABEL_72;
        }
        uint64_t v138 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v138 = 0;
        uint64_t v139 = "ProfileSliceResolvingDataProvider : AMP user state refresh return nil";
      }
      _os_log_impl(&dword_1C8F83000, v136, v137, v139, v138, 2u);
      MEMORY[0x1CB77E470](v138, -1, -1);
LABEL_72:

      uint64_t v129 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (**)(uint64_t, char *), uint64_t))(**(void **)(v170 + 56) + 144);
      swift_retain();
      uint64_t v130 = v158;
      uint64_t v131 = v54;
      uint64_t v132 = v159;
      uint64_t v133 = v52;
      uint64_t v134 = 3;
LABEL_55:
      v129(v130, v131, v132, v133, v134);
      swift_release();
LABEL_64:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AmpUserState>);
      type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
      uint64_t v141 = swift_allocObject();
      *(_OWORD *)(v141 + 16) = xmmword_1C91947A0;
      Apple_Parsec_Siri_V2alpha_AmpUserState.init()();
      uint64_t v142 = v169;
      uint64_t v143 = (uint64_t)v168;
      (*(void (**)(char *, void, uint64_t))(v169 + 104))(v168, *MEMORY[0x1E4F89B40], v77);
      createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(v141, v143, 1, v167);

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v143, v77);
LABEL_65:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v180);
      goto LABEL_66;
    }
    uint64_t v52 = (uint64_t (**)(uint64_t, char *))v161;
    if (one-time initialization token for pommes == -1)
    {
LABEL_52:
      uint64_t v125 = type metadata accessor for Logger();
      __swift_project_value_buffer(v125, (uint64_t)static Logger.pommes);
      unint64_t v126 = Logger.logObject.getter();
      os_log_type_t v127 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v126, v127))
      {
        os_log_type_t v128 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v128 = 0;
        _os_log_impl(&dword_1C8F83000, v126, v127, "ProfileSliceResolvingDataProvider : timeout while waiting for AMP user state refresh", v128, 2u);
        MEMORY[0x1CB77E470](v128, -1, -1);
      }

      uint64_t v129 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t (**)(uint64_t, char *), uint64_t))(**(void **)(v170 + 56) + 144);
      swift_retain();
      uint64_t v130 = v158;
      uint64_t v131 = v54;
      uint64_t v132 = v159;
      uint64_t v133 = v52;
      uint64_t v134 = 1;
      goto LABEL_55;
    }
LABEL_74:
    swift_once();
    goto LABEL_52;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)&v177, &demangling cache variable for type metadata for MediaUserStateCenter?);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v62 = type metadata accessor for Logger();
  __swift_project_value_buffer(v62, (uint64_t)static Logger.pommes);
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v63, v64))
  {
    unint64_t v65 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v65 = 0;
    _os_log_impl(&dword_1C8F83000, v63, v64, "ProfileSliceResolvingDataProvider the shared media user state center initialization failed", v65, 2u);
    MEMORY[0x1CB77E470](v65, -1, -1);
  }

  uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t))(**(void **)(v170 + 56) + 144);
  swift_retain();
  v66(a1, a2, a3, v19, 3);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AmpUserState>);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
  uint64_t v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_1C91947A0;
  Apple_Parsec_Siri_V2alpha_AmpUserState.init()();
  uint64_t v68 = v169;
  uint64_t v69 = (uint64_t)v168;
  uint64_t v70 = v166;
  (*(void (**)(char *, void, uint64_t))(v169 + 104))(v168, *MEMORY[0x1E4F89B40], v166);
  createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(v67, v69, 1, v167);
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v70);
LABEL_66:
  swift_release();
  return swift_release();
}

void closure #1 in ProfileSliceResolvingDataProvider.resolveAmpSlice(requestId:pommesCandidateId:pommesSearchRequest:serviceHelper:dispatchQueue:)(uint64_t a1, void *a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void **)(a4 + 16);
  swift_beginAccess();
  uint64_t v11 = *(void **)(a4 + 16);
  *(void *)(a4 + 16) = a2;
  id v12 = a2;

  swift_beginAccess();
  if (a2)
  {
    uint64_t v13 = *v10;
    *uint64_t v10 = a2;
    id v14 = a2;
  }
  else
  {
    *(void *)(a5 + 16) = a1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
  }
  dispatch_group_leave(a3);
}

uint64_t ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v40 = a5;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  uint64_t v35 = v11;
  MEMORY[0x1F4188790](v10);
  id v33 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v5;
  uint64_t v17 = *(void *)(v5 + 56);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E4F892D0], v13);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)v17 + 128);
  swift_retain();
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v19 = (void *)v18(a2, a3, a4, v16);
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  outlined init with take of PommesSearchReason?(a1, (uint64_t)v41, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  uint64_t v20 = (char *)v42;
  if (v42 && *(void *)(v42 + 16))
  {
    uint64_t v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    MEMORY[0x1F4188790](v21);
    *(&v33 - 2) = v20;
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, MEMORY[0x1E4F88EF0]);
    uint64_t v22 = v40;
    static Message.with(_:)();
    unint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(**(void **)(v36 + 56) + 136);
    swift_retain();
    v23(v37, v38, v39, v19);
    swift_release();
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v22 = v40;
    if (v27)
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_1C8F83000, v25, v26, "No Me card data available; returning no profile slice for .sliceLabelMe",
        v28,
        2u);
      MEMORY[0x1CB77E470](v28, -1, -1);
    }

    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(**(void **)(v36 + 56) + 144);
    swift_retain();
    v29(v37, v38, v39, v19, 3);
    swift_release();
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, MEMORY[0x1E4F89328]);
    uint64_t v31 = v33;
    uint64_t v30 = v34;
    static Message.with(_:)();
    uint64_t v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    MEMORY[0x1F4188790](v21);
    *(&v33 - 2) = v31;
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, MEMORY[0x1E4F88EF0]);
    static Message.with(_:)();

    (*(void (**)(char *, uint64_t))(v35 + 8))(v31, v30);
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v22, 0, 1, v21);
}

uint64_t closure #1 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)()
{
  uint64_t v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  MEMORY[0x1F4188790](v4);
  (*(void (**)(char *, void))(v6 + 104))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F896F8]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4F89B40], v0);
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
}

uint64_t closure #2 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  MEMORY[0x1F4188790](v3);
  (*(void (**)(char *, void))(v5 + 104))((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F892D0]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C91947A0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16))(v9 + v8, a2, v6);
  return Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
}

uint64_t closure #3 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v51 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for Google_Protobuf_Any();
  uint64_t v6 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v39 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v56 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v50 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v40 = (char *)&v36 - v13;
  uint64_t v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  MEMORY[0x1F4188790](v14);
  (*(void (**)(char *, void))(v16 + 104))((char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F892D0]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  uint64_t v17 = *(void *)(a2 + 16);
  if (v17)
  {
    uint64_t v36 = a1;
    uint64_t v47 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Person();
    uint64_t v46 = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Person and conformance Apple_Parsec_Siri_V2alpha_Person, MEMORY[0x1E4F88998]);
    uint64_t v42 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    uint64_t v45 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56);
    uint64_t v38 = (uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 32);
    uint64_t v37 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v44 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
    uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v41 + 32);
    swift_bridgeObjectRetain();
    unint64_t v18 = MEMORY[0x1E4FBC860];
    uint64_t v19 = 32;
    uint64_t v20 = v52;
    uint64_t v48 = a2;
    do
    {
      uint64_t v52 = (void *)v18;
      long long v21 = *(_OWORD *)(a2 + v19 + 80);
      v54[4] = *(_OWORD *)(a2 + v19 + 64);
      void v54[5] = v21;
      uint64_t v55 = *(void *)(a2 + v19 + 96);
      long long v22 = *(_OWORD *)(a2 + v19 + 16);
      v54[0] = *(_OWORD *)(a2 + v19);
      v54[1] = v22;
      long long v23 = *(_OWORD *)(a2 + v19 + 48);
      _OWORD v54[2] = *(_OWORD *)(a2 + v19 + 32);
      v54[3] = v23;
      uint64_t v53[3] = v47;
      v53[4] = v46;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v53);
      MEMORY[0x1F4188790](boxed_opaque_existential_1);
      *(&v36 - 2) = (uint64_t)v54;
      outlined retain of AssistantDataSnapshot.MeCard((uint64_t)v54);
      static Message.with(_:)();
      defaultAnyTypeURLPrefix.getter();
      uint64_t v25 = (uint64_t)v51;
      Google_Protobuf_Any.init(message:partial:typePrefix:)();
      if (v20)
      {

        uint64_t v26 = 1;
        (*v42)(v25, 1, 1, v49);
        outlined destroy of MediaUserStateCenter?(v25, &demangling cache variable for type metadata for Google_Protobuf_Any?);
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v27 = v49;
        (*v42)(v25, 0, 1, v49);
        uint64_t v28 = v39;
        uint64_t v29 = (*v38)(v39, v25, v27);
        MEMORY[0x1F4188790](v29);
        *(&v36 - 2) = (uint64_t)v28;
        lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, MEMORY[0x1E4F89328]);
        static Message.with(_:)();
        (*v37)(v28, v27);
        uint64_t v26 = 0;
      }
      uint64_t v30 = v56;
      (*v45)(v56, v26, 1, v10);
      outlined release of AssistantDataSnapshot.MeCard((uint64_t)v54);
      if ((*v44)(v30, 1, v10) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v56, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
        a2 = v48;
        unint64_t v18 = (unint64_t)v52;
      }
      else
      {
        uint64_t v31 = *v43;
        uint64_t v32 = v40;
        (*v43)(v40, v56, v10);
        v31(v50, (uint64_t)v32, v10);
        unint64_t v18 = (unint64_t)v52;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1, v18);
        }
        unint64_t v34 = *(void *)(v18 + 16);
        unint64_t v33 = *(void *)(v18 + 24);
        if (v34 >= v33 >> 1) {
          unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v18);
        }
        *(void *)(v18 + 16) = v34 + 1;
        v31((char *)(v18+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v34), (uint64_t)v50, v10);
        a2 = v48;
        uint64_t v20 = 0;
      }
      v19 += 104;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  return Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
}

uint64_t ProfileSliceResolvingDataProvider.deinit()
{
  outlined destroy of MediaUserStateCenter?(v0 + 16, &demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_release();
  swift_release();
  return v0;
}

uint64_t ProfileSliceResolvingDataProvider.__deallocating_deinit()
{
  outlined destroy of MediaUserStateCenter?(v0 + 16, &demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance ProfileSliceResolvingDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance ProfileSliceResolvingDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance ProfileSliceResolvingDataProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 208))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProvider.reset() in conformance ProfileSliceResolvingDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t specialized static ProfileSliceResolvingDataProvider.make(mediaUserStateCenter:instrumentationUtil:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v7, &demangling cache variable for type metadata for MediaUserStateCenter?);
  type metadata accessor for ProfileSliceResolvingDataProvider();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(void *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v7, v5 + 16, &demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  *(void *)(v5 + 56) = a2;
  *(void *)(v5 + 64) = a3;
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v5);
}

unint64_t partial apply for closure #1 in ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  long long v6 = *(_OWORD *)(v1 + 48);
  long long v7 = *(_OWORD *)(v1 + 24);
  outlined init with take of PommesSearchReason?(*(void *)(v1 + 48), (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  long long v9 = v7;
  uint64_t v10 = v4;
  long long v11 = v6;
  unint64_t result = specialized Sequence.compactMap<A>(_:)((void (*)(void))partial apply for closure #1 in closure #1 in ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:), (uint64_t)v8, v3);
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for ProfileSliceResolvingDataProvider()
{
  return self;
}

uint64_t method lookup function for ProfileSliceResolvingDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ProfileSliceResolvingDataProvider);
}

uint64_t dispatch thunk of ProfileSliceResolvingDataProvider.__allocating_init(mediaUserStateCenter:instrumentationUtil:muxContextManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of ProfileSliceResolvingDataProvider.prepare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ProfileSliceResolvingDataProvider.wait(timeout:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))() & 1;
}

uint64_t dispatch thunk of ProfileSliceResolvingDataProvider.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  __int16 v4 = *(_WORD *)(a2 + 88);
  uint64_t v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 208);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = v3;
  __int16 v11 = v4;
  return v5(a1, v9);
}

uint64_t partial apply for closure #2 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)(uint64_t a1)
{
  return closure #2 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #3 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)(uint64_t a1)
{
  return closure #3 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)(a1, *(void *)(v1 + 16));
}

uint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in AssistantDataSnapshot.MeCard.toPersonProtobuf()(uint64_t a1)
{
  return closure #1 in AssistantDataSnapshot.MeCard.toPersonProtobuf()(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for closure #1 in AssistantDataSnapshot.MeCard.toProfileSliceProtobuf()(uint64_t a1)
{
  return closure #1 in AssistantDataSnapshot.MeCard.toProfileSliceProtobuf()(a1, *(void *)(v1 + 16));
}

uint64_t sub_1C901BDF8()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C901BE30()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

unint64_t type metadata accessor for ICMediaUserStateCenter()
{
  unint64_t result = lazy cache variable for type metadata for ICMediaUserStateCenter;
  if (!lazy cache variable for type metadata for ICMediaUserStateCenter)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ICMediaUserStateCenter);
  }
  return result;
}

uint64_t sub_1C901BEA8()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

void partial apply for closure #1 in ProfileSliceResolvingDataProvider.resolveAmpSlice(requestId:pommesCandidateId:pommesSearchRequest:serviceHelper:dispatchQueue:)(uint64_t a1, void *a2)
{
  closure #1 in ProfileSliceResolvingDataProvider.resolveAmpSlice(requestId:pommesCandidateId:pommesSearchRequest:serviceHelper:dispatchQueue:)(a1, a2, *(NSObject **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t *outlined retain of AssistantDataSnapshot?(uint64_t *a1)
{
  return a1;
}

uint64_t partial apply for closure #2 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(uint64_t a1)
{
  return closure #2 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), *(uint64_t **)(v2 + 40), *(void *)(v2 + 48), a2);
}

void SEMSpanMatcher.indexLocale()()
{
  v6[1] = *(id *)MEMORY[0x1E4F143B8];
  v6[0] = 0;
  id v1 = objc_msgSend(v0, sel_indexLocaleWithUserId_error_, 0, v6);
  id v2 = v6[0];
  if (v1)
  {
    uint64_t v3 = v1;
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();
    id v4 = v2;
  }
  else
  {
    id v5 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t SEMSpanMatcher.search(_:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  v14[1] = *(id *)MEMORY[0x1E4F143B8];
  long long v7 = (void *)MEMORY[0x1CB77CA90](a2, a3);
  v14[0] = 0;
  id v8 = objc_msgSend(v3, sel_matchSpans_userId_error_, a1, v7, v14);

  id v9 = v14[0];
  if (v8)
  {
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SEMSpanMatchResult);
    unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v11 = v9;

    swift_bridgeObjectRetain();
    uint64_t v5 = specialized Sequence.flatMap<A>(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v12 = v14[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

id SEMSpanMatcher.search(_:)(uint64_t a1)
{
  v14[1] = *(id *)MEMORY[0x1E4F143B8];
  v14[0] = 0;
  id v2 = objc_msgSend(v1, sel_matchSpans_error_, a1, v14);
  id v3 = v14[0];
  if (!v2)
  {
    id v13 = v14[0];
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
  uint64_t v4 = v2;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SEMSpanMatchResult);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = v3;

  v14[0] = (id)MEMORY[0x1E4FBC860];
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_4;
    }
LABEL_13:
    swift_bridgeObjectRelease_n();
    return (id)MEMORY[0x1E4FBC860];
  }
  uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_13;
  }
LABEL_4:
  if (v7 < 1) {
    __break(1u);
  }
  uint64_t v8 = 0;
  do
  {
    if ((v5 & 0xC000000000000001) != 0) {
      id v9 = (id)MEMORY[0x1CB77D510](v8, v5);
    }
    else {
      id v9 = *(id *)(v5 + 8 * v8 + 32);
    }
    unint64_t v10 = v9;
    ++v8;
    unint64_t v11 = specialized static VocabularyResult.makeResults(from:userId:)(v9);

    specialized Array.append<A>(contentsOf:)(v11);
  }
  while (v7 != v8);
  swift_bridgeObjectRelease_n();
  return v14[0];
}

id protocol witness for static SpanMatcher.indexMatcher() in conformance SEMSpanMatcher@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_indexMatcher);
  *a1 = result;
  return result;
}

id protocol witness for static SpanMatcher.itemMatcher(_:tokenizer:) in conformance SEMSpanMatcher@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id result = @nonobjc static SEMSpanMatcher.itemMatcher(_:tokenizer:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

id @nonobjc static SEMSpanMatcher.itemMatcher(_:tokenizer:)(uint64_t a1, uint64_t a2)
{
  v8[1] = *(id *)MEMORY[0x1E4F143B8];
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for KVItem);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v8[0] = 0;
  id v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_itemMatcher_tokenizer_error_, isa, a2, v8);

  if (v4)
  {
    id v5 = v8[0];
  }
  else
  {
    id v6 = v8[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

uint64_t protocol witness for SpanMatcher.search(_:userId:) in conformance SEMSpanMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SEMSpanMatcher.search(_:userId:)(a1, a2, a3);
}

id protocol witness for SpanMatcher.search(_:) in conformance SEMSpanMatcher(uint64_t a1)
{
  return SEMSpanMatcher.search(_:)(a1);
}

void protocol witness for SpanMatcher.indexLocale() in conformance SEMSpanMatcher()
{
}

void protocol witness for SpanMatcher.indexLocale(userId:) in conformance SEMSpanMatcher(uint64_t a1, uint64_t a2)
{
}

void @nonobjc SEMSpanMatcher.indexLocale(userId:)(uint64_t a1, uint64_t a2)
{
  v8[1] = *(id *)MEMORY[0x1E4F143B8];
  if (a2) {
    uint64_t v3 = (void *)MEMORY[0x1CB77CA90]();
  }
  else {
    uint64_t v3 = 0;
  }
  v8[0] = 0;
  id v4 = objc_msgSend(v2, sel_indexLocaleWithUserId_error_, v3, v8);

  id v5 = v8[0];
  if (v4)
  {
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = v5;
  }
  else
  {
    id v7 = v8[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t VocabularySearchClient.__allocating_init(spanMatcher:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1F4188790](v5);
  id v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized VocabularySearchClient.init(spanMatcher:)((uint64_t)v7, v2, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

uint64_t VocabularySearchClient.init(spanMatcher:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1F4188790](v5);
  id v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  uint64_t v9 = specialized VocabularySearchClient.init(spanMatcher:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

uint64_t VocabularySearchClient.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return v0;
}

uint64_t VocabularySearchClient.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return swift_deallocClassInstance();
}

void VocabularyResult.__allocating_init(spanMatchResult:cascadeEntityInfo:kvItem:userId:)(void *a1, void *a2, void *a3)
{
  if (one-time initialization token for music != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.music);
  id v6 = a3;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  uint64_t v9 = &selRef_init;
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v10 = v6;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    aBlock[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    id v13 = a2;
    id v14 = objc_msgSend(v10, sel_itemId);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    a2 = v13;
    uint64_t v9 = &selRef_init;
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v7, v8, "CKVMatchingSpan  itemId=%s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v12, -1, -1);
    unint64_t v18 = v11;
    id v6 = v10;
    MEMORY[0x1CB77E470](v18, -1, -1);
  }
  else
  {
  }
  id v19 = objc_msgSend(a2, sel_sourceIdentifierOrConstant);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v20 = [v6 v9[61]];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  objc_msgSend(v6, sel_itemType);
  id v21 = objc_msgSend(a1, sel_fieldMatches);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SEMFieldMatch);
  unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v42 = a2;
  if (v23)
  {
    if (v23 < 1) {
      goto LABEL_28;
    }
    uint64_t v24 = 0;
    uint64_t v25 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v22 & 0xC000000000000001) != 0) {
        id v26 = (id)MEMORY[0x1CB77D510](v24, v22);
      }
      else {
        id v26 = *(id *)(v22 + 8 * v24 + 32);
      }
      uint64_t v27 = v26;
      id v28 = objc_msgSend(v26, sel_entityFieldInfo);
      self;
      uint64_t v29 = (void *)swift_dynamicCastObjCClass();
      if (v29)
      {
        id v30 = objc_msgSend(v29, sel_toKVFieldType_, 0);

        swift_unknownObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
        }
        unint64_t v32 = v25[2];
        unint64_t v31 = v25[3];
        if (v32 >= v31 >> 1) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v25);
        }
        long long v25[2] = v32 + 1;
        v25[v32 + 4] = v30;
      }
      else
      {

        swift_unknownObjectRelease();
      }
      ++v24;
    }
    while (v23 != v24);
  }
  swift_bridgeObjectRelease_n();
  objc_msgSend(a1, sel_score);
  id v33 = objc_msgSend(a1, sel_spanInfo);
  objc_msgSend(v33, sel_spanRange);

  id v34 = objc_msgSend(a1, sel_spanInfo);
  id v35 = objc_msgSend(v34, sel_spanRange);
  uint64_t v37 = v36;

  if (__OFADD__(v35, v37))
  {
    __break(1u);
  }
  else
  {
    id v38 = objc_msgSend(a1, sel_spanValue);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v45 = MEMORY[0x1E4FBC860];
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = &v45;
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = partial apply for closure #2 in VocabularyResult.init(spanMatchResult:cascadeEntityInfo:kvItem:userId:);
    *(void *)(v40 + 24) = v39;
    aBlock[4] = (uint64_t)partial apply for thunk for @callee_guaranteed (@guaranteed KVField, @unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[5] = v40;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    void aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed KVField, @unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    uint64_t aBlock[3] = (uint64_t)&block_descriptor_13_0;
    uint64_t v41 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v6, sel_enumerateFieldsUsingBlock_, v41);
    _Block_release(v41);
    LOBYTE(v41) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of VocabularyResult.__allocating_init(appId:itemId:itemType:fieldTypes:score:spanBegin:spanEnd:semanticValue:fields:userId:)();

      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t closure #2 in VocabularyResult.init(spanMatchResult:cascadeEntityInfo:kvItem:userId:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = objc_msgSend(a1, sel_label);
  if (v6)
  {
    id v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    uint64_t v9 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  objc_msgSend(a1, sel_fieldType);
  id v10 = objc_allocWithZone((Class)type metadata accessor for VocabularyField());
  VocabularyField.init(label:value:fieldType:)();
  MEMORY[0x1CB77CD90]();
  if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

void thunk for @escaping @callee_guaranteed (@guaranteed KVField, @unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t specialized VocabularySearchClient.init(spanMatcher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCB40], v8);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v12 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v13);
  uint64_t v18 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v14);
  (*(void (**)(char *, void))(v16 + 104))((char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  *(void *)(a2 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(a2 + 64) = 0;
  outlined init with take of AppDataProviding(&v19, a2 + 24);
  return a2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6KVItemCG_21SiriInformationSearch16VocabularyResultCs5NeverOTg504_s21ef8Search16hi65C11makeResults4from6userIdSayACGSo012SEMSpanMatchE0C_SSSgtFZACSo6D6CXEfU_So0rsI0CSo20SEMCascadeEntityInfoCSSSgTf1cn_nTf4nggg_n(unint64_t a1, void *a2, void *a3)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x1E4FBC860];
    if (!v4) {
      break;
    }
    uint64_t v13 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    type metadata accessor for VocabularyResult();
    uint64_t v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v7 = (id)MEMORY[0x1CB77D510](v6, a1);
      }
      else {
        id v7 = *(id *)(a1 + 8 * v6 + 32);
      }
      uint64_t v8 = v7;
      ++v6;
      id v9 = a2;
      id v10 = a3;
      swift_bridgeObjectRetain();
      VocabularyResult.__allocating_init(spanMatchResult:cascadeEntityInfo:kvItem:userId:)(v9, v10, v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v4 == v6) {
        return v13;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized static VocabularyResult.makeResults(from:userId:)(void *a1)
{
  v28[1] = *(id *)MEMORY[0x1E4F143B8];
  id v2 = objc_msgSend(a1, sel_entityInfo);
  self;
  id v3 = (void *)swift_dynamicCastObjCClass();
  if (!v3)
  {
    swift_unknownObjectRelease();
    if (one-time initialization token for music != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.music);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1C8F83000, v13, v14, "VocabularyResult: SEM span match result did not contain Cascade entity info", v15, 2u);
      MEMORY[0x1CB77E470](v15, -1, -1);
    }

    return MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = v3;
  v28[0] = 0;
  id v5 = objc_msgSend(v3, sel_toKVItems_, v28);
  id v6 = v28[0];
  if (!v5)
  {
    id v16 = v28[0];
    unint64_t v17 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for music != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.music);
    id v19 = v17;
    id v20 = v17;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 138412290;
      id v25 = v17;
      id v26 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v28[0] = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v26;

      _os_log_impl(&dword_1C8F83000, v21, v22, "VocabularyResult: Cascade entity info was not convertible to KV items. %@", v23, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v24, -1, -1);
      MEMORY[0x1CB77E470](v23, -1, -1);
    }
    else
    {
    }
    swift_unknownObjectRelease();

    return MEMORY[0x1E4FBC860];
  }
  id v7 = v5;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for KVItem);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = v6;

  swift_bridgeObjectRetain();
  id v10 = a1;
  swift_unknownObjectRetain();
  uint64_t matched = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6KVItemCG_21SiriInformationSearch16VocabularyResultCs5NeverOTg504_s21ef8Search16hi65C11makeResults4from6userIdSayACGSo012SEMSpanMatchE0C_SSSgtFZACSo6D6CXEfU_So0rsI0CSo20SEMCascadeEntityInfoCSSSgTf1cn_nTf4nggg_n(v8, v10, v4);
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease_n();
  swift_bridgeObjectRelease();
  return matched;
}

uint64_t specialized Sequence.flatMap<A>(_:)(unint64_t a1)
{
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1CB77D510](i - 4, a1) : *(id *)(a1 + 8 * i);
      id v5 = v4;
      uint64_t v6 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      unint64_t v7 = specialized static VocabularyResult.makeResults(from:userId:)(v4);

      specialized Array.append<A>(contentsOf:)(v7);
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;

  if (a1 >> 62) {
    goto LABEL_40;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    id v3 = MEMORY[0x1E4FBC860];
    for (uint64_t i = 4; ; ++i)
    {
      id v5 = i - 4;
      if ((a1 & 0xC000000000000001) == 0) {
        break;
      }
      MEMORY[0x1CB77D510](i - 4, a1);
      uint64_t v6 = i - 3;
      if (__OFADD__(v5, 1)) {
        goto LABEL_35;
      }
LABEL_11:
      dispatch thunk of CodeGenListEntry.entry.getter();
      if (v29)
      {
        unint64_t v7 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
        swift_release();
        swift_release();
        if (v7) {
          unint64_t v8 = v7;
        }
        else {
          unint64_t v8 = MEMORY[0x1E4FBC860];
        }
      }
      else
      {
        swift_release();
        unint64_t v8 = MEMORY[0x1E4FBC860];
      }
      uint64_t v9 = *(void *)(v8 + 16);
      id v10 = *(void *)(v3 + 16);
      uint64_t v11 = v10 + v9;
      if (__OFADD__(v10, v9)) {
        goto LABEL_36;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v11 <= *(void *)(v3 + 24) >> 1)
      {
        if (*(void *)(v8 + 16)) {
          goto LABEL_25;
        }
      }
      else
      {
        if (v10 <= v11) {
          uint64_t v13 = v10 + v9;
        }
        else {
          uint64_t v13 = v10;
        }
        id v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v3);
        if (*(void *)(v8 + 16))
        {
LABEL_25:
          os_log_type_t v14 = *(void *)(v3 + 16);
          uint64_t v15 = (*(void *)(v3 + 24) >> 1) - v14;
          id v16 = *(void *)(type metadata accessor for UsoIdentifier() - 8);
          unint64_t v17 = *(void *)(v16 + 72);
          if (v15 < v9) {
            goto LABEL_38;
          }
          uint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
          id v19 = v3 + v18 + v17 * v14;
          id v20 = v8 + v18;
          uint64_t v21 = v17 * v9;
          os_log_type_t v22 = v19 + v21;
          uint64_t v23 = v20 + v21;
          if (v20 < v22 && v19 < v23)
          {
            uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy();
          if (v9)
          {
            id v25 = *(void *)(v3 + 16);
            id v26 = __OFADD__(v25, v9);
            uint64_t v27 = v25 + v9;
            if (v26) {
              goto LABEL_39;
            }
            *(void *)(v3 + 16) = v27;
          }
          goto LABEL_5;
        }
      }
      if (v9) {
        goto LABEL_37;
      }
LABEL_5:
      swift_bridgeObjectRelease();
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    swift_retain();
    uint64_t v6 = i - 3;
    if (!__OFADD__(v5, 1)) {
      goto LABEL_11;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t sub_1C901DAD8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sIg_Ieg_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t dispatch thunk of static SpanMatcher.indexMatcher()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static SpanMatcher.itemMatcher(_:tokenizer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of SpanMatcher.search(_:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of SpanMatcher.search(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of SpanMatcher.indexLocale()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SpanMatcher.indexLocale(userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t type metadata accessor for VocabularySearchClient()
{
  return self;
}

uint64_t method lookup function for VocabularySearchClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for VocabularySearchClient);
}

uint64_t dispatch thunk of VocabularySearchClient.__allocating_init(spanMatcher:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of VocabularySearchClient.search(_:userId:itemTypes:fieldTypes:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of VocabularySearchClient.resetTokenizer()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t sub_1C901DC84()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #2 in VocabularyResult.init(spanMatchResult:cascadeEntityInfo:kvItem:userId:)(void *a1, uint64_t a2, uint64_t a3)
{
  return closure #2 in VocabularyResult.init(spanMatchResult:cascadeEntityInfo:kvItem:userId:)(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_1C901DC9C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed KVField, @unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t static AmpDataProvider.make(mediaUserStateCenter:)(uint64_t a1)
{
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v4, &demangling cache variable for type metadata for MediaUserStateCenter?);
  type metadata accessor for AmpDataProvider();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = v2;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v4, v1 + 16);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[MediaUserState]>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v1);
}

uint64_t AmpDataProvider.mediaUserStateCenter.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of MediaUserStateCenter?(v1 + 16, a1, &demangling cache variable for type metadata for MediaUserStateCenter?);
}

uint64_t AmpDataProvider.mediaUserStateCenter.setter(uint64_t a1)
{
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v1 + 16);
  return swift_endAccess();
}

uint64_t (*AmpDataProvider.mediaUserStateCenter.modify())()
{
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t AmpDataProvider.cachedMediaUserStates.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*AmpDataProvider.cachedMediaUserStates.modify())()
{
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t AmpDataProvider.__allocating_init(mediaUserStateCenter:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = v3;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v2 + 16);
  swift_endAccess();
  return v2;
}

uint64_t type metadata accessor for AmpDataProvider()
{
  return self;
}

uint64_t AmpDataProvider.init(mediaUserStateCenter:)(uint64_t a1)
{
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = v3;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v1 + 16);
  swift_endAccess();
  return v1;
}

uint64_t outlined assign with take of MediaUserStateCenter?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MediaUserStateCenter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AmpDataProvider.prepare()()
{
  void (*v7)(long long *__return_ptr, uint64_t);
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint8_t *v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  unint64_t v23;
  _UNKNOWN **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  unsigned char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  unint64_t v40;
  _UNKNOWN **v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  unsigned char *v50;
  uint64_t v51;
  long long v52;
  uint64_t v53;
  long long v54;
  uint64_t v55;
  long long v56;
  unint64_t v57;
  _UNKNOWN **v58;
  char *v59;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SignpostToken();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v5, (uint64_t)static Signposter.pommes);
  uint64_t v6 = OSSignposter.begin(name:context:)("proxy.AMPSlice", 14, 2u, 0, (uint64_t)v4);
  unint64_t v7 = *(void (**)(long long *__return_ptr, uint64_t))(*(void *)v0 + 96);
  v7(&v56, v6);
  unint64_t v8 = v57;
  uint64_t v9 = outlined destroy of MediaUserStateCenter?((uint64_t)&v56, &demangling cache variable for type metadata for MediaUserStateCenter?);
  if (!v8)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    id v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      unint64_t v59 = v4;
      os_log_type_t v14 = v13;
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1C8F83000, v11, v12, "AmpDataProvider Initializing the shared media user state center ...", v13, 2u);
      uint64_t v4 = v59;
      MEMORY[0x1CB77E470](v14, -1, -1);
    }

    uint64_t v15 = objc_msgSend(self, sel_shared);
    int v57 = type metadata accessor for ICMediaUserStateCenter();
    uint64_t v58 = &protocol witness table for ICMediaUserStateCenter;
    *(void *)&uint64_t v56 = v15;
    (*(void (**)(long long *))(*(void *)v1 + 104))(&v56);
    id v16 = Logger.logObject.getter();
    unint64_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1C8F83000, v16, v17, "AmpDataProvider Initializing the shared media user state center complete", v18, 2u);
      MEMORY[0x1CB77E470](v18, -1, -1);
    }
  }
  v7(&v54, v9);
  if (!v55)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v54, &demangling cache variable for type metadata for MediaUserStateCenter?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    unint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
    unint64_t v32 = Logger.logObject.getter();
    id v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      id v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v34 = 0;
      _os_log_impl(&dword_1C8F83000, v32, v33, "AmpDataProvider the shared media user state center initialization failed", v34, 2u);
      MEMORY[0x1CB77E470](v34, -1, -1);
    }

    lazy protocol witness table accessor for type DataProviderError and conformance DataProviderError();
    swift_allocError();
    void *v35 = 0;
    swift_willThrow();
    goto LABEL_38;
  }
  outlined init with take of AppDataProviding(&v54, (uint64_t)&v56);
  if (!AFSupportsMultiUser())
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
    uint64_t v37 = Logger.logObject.getter();
    id v38 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_1C8F83000, v37, v38, "AmpDataProvider getting the current user state from shared media user state center ...", v39, 2u);
      MEMORY[0x1CB77E470](v39, -1, -1);
    }

    uint64_t v40 = v57;
    uint64_t v41 = v58;
    __swift_project_boxed_opaque_existential_1(&v56, v57);
    ((void (*)(long long *__return_ptr, unint64_t, _UNKNOWN **))v41[2])(&v52, v40, v41);
    if (v53)
    {
      outlined init with take of AppDataProviding(&v52, (uint64_t)&v54);
      uint64_t v42 = Logger.logObject.getter();
      uint64_t v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl(&dword_1C8F83000, v42, v43, "AmpDataProvider getting the current user state from shared media user state center complete", v44, 2u);
        MEMORY[0x1CB77E470](v44, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<MediaUserState>);
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_1C91947A0;
      outlined init with copy of AppDataProviding((uint64_t)&v54, v45 + 32);
      (*(void (**)(uint64_t))(*(void *)v1 + 128))(v45);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      goto LABEL_34;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)&v52, &demangling cache variable for type metadata for MediaUserState?);
    uint64_t v47 = Logger.logObject.getter();
    uint64_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl(&dword_1C8F83000, v47, v48, "AmpDataProvider the current user state cache is not initialized", v49, 2u);
      MEMORY[0x1CB77E470](v49, -1, -1);
    }

    lazy protocol witness table accessor for type DataProviderError and conformance DataProviderError();
    swift_allocError();
    *uint64_t v50 = 1;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
LABEL_38:
    uint64_t v46 = (uint64_t)v4;
    goto LABEL_39;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  id v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  id v20 = Logger.logObject.getter();
  uint64_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v22 = 0;
    _os_log_impl(&dword_1C8F83000, v20, v21, "AmpDataProvider getting the current user states from shared media user state center", v22, 2u);
    MEMORY[0x1CB77E470](v22, -1, -1);
  }

  uint64_t v23 = v57;
  uint64_t v24 = v58;
  __swift_project_boxed_opaque_existential_1(&v56, v57);
  id v25 = ((uint64_t (*)(unint64_t, _UNKNOWN **))v24[3])(v23, v24);
  id v26 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 128))(v25);
  uint64_t v27 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v1 + 120))(v26) + 16);
  swift_bridgeObjectRelease();
  if (!v27)
  {
    id v28 = Logger.logObject.getter();
    uint64_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v30 = 0;
      _os_log_impl(&dword_1C8F83000, v28, v29, "AmpDataProvider mediaUserStates is empty under Multi-User mode", v30, 2u);
      MEMORY[0x1CB77E470](v30, -1, -1);
    }
  }
LABEL_34:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
  uint64_t v46 = (uint64_t)v4;
LABEL_39:
  OSSignposter.end(token:message:)(v46, 0, 0xE000000000000000);
  outlined destroy of SignpostToken((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SignpostToken);
}

Swift::Void __swiftcall AmpDataProvider.reset()()
{
  (*(void (**)(void))(*(void *)v0 + 128))(MEMORY[0x1E4FBC860]);
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  (*(void (**)(_OWORD *))(*(void *)v0 + 104))(v1);
}

uint64_t AmpDataProvider.deinit()
{
  outlined destroy of MediaUserStateCenter?(v0 + 16, &demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AmpDataProvider.__deallocating_deinit()
{
  outlined destroy of MediaUserStateCenter?(v0 + 16, &demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance AmpDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance AmpDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance AmpDataProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 168))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProvider.reset() in conformance AmpDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

unint64_t lazy protocol witness table accessor for type DataProviderError and conformance DataProviderError()
{
  unint64_t result = lazy protocol witness table cache variable for type DataProviderError and conformance DataProviderError;
  if (!lazy protocol witness table cache variable for type DataProviderError and conformance DataProviderError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataProviderError and conformance DataProviderError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DataProviderError and conformance DataProviderError;
  if (!lazy protocol witness table cache variable for type DataProviderError and conformance DataProviderError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataProviderError and conformance DataProviderError);
  }
  return result;
}

uint64_t sub_1C901EBB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))();
}

uint64_t sub_1C901EBF4(uint64_t a1, uint64_t a2)
{
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v4, &demangling cache variable for type metadata for MediaUserStateCenter?);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 104))(v4);
}

uint64_t sub_1C901EC58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1C901ECA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 128);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for AmpDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AmpDataProvider);
}

uint64_t dispatch thunk of AmpDataProvider.mediaUserStateCenter.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of AmpDataProvider.mediaUserStateCenter.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of AmpDataProvider.mediaUserStateCenter.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AmpDataProvider.cachedMediaUserStates.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of AmpDataProvider.cachedMediaUserStates.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of AmpDataProvider.cachedMediaUserStates.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of AmpDataProvider.__allocating_init(mediaUserStateCenter:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of AmpDataProvider.prepare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of AmpDataProvider.wait(timeout:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))() & 1;
}

uint64_t dispatch thunk of AmpDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  __int16 v4 = *(_WORD *)(a2 + 88);
  uint64_t v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 168);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = v3;
  __int16 v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of AmpDataProvider.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of PIMSEnablementProviding.getMusicRankingInfluenceStatus()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for PIMSEnablementProvider()
{
  return &type metadata for PIMSEnablementProvider;
}

id AudioQueueStateDataProvider.audioQueueStateManager.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t static AudioQueueStateDataProvider.make(audioQueueStateManager:)(void *a1)
{
  type metadata accessor for AudioQueueStateDataProvider();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
  swift_allocObject();
  id v3 = a1;
  return specialized AnyDataProvider.init<A>(provider:)(v2);
}

uint64_t type metadata accessor for AudioQueueStateDataProvider()
{
  return self;
}

Swift::Void __swiftcall AudioQueueStateDataProvider.prepare()()
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x108))();
}

Swift::Void __swiftcall AudioQueueStateDataProvider.reset()()
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x110))();
}

uint64_t AudioQueueStateDataProvider.deinit()
{
  return v0;
}

uint64_t AudioQueueStateDataProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance AudioQueueStateDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance AudioQueueStateDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance AudioQueueStateDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for DataProvider.reset() in conformance AudioQueueStateDataProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSlice?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t method lookup function for AudioQueueStateDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioQueueStateDataProvider);
}

uint64_t dispatch thunk of AudioQueueStateDataProvider.prepare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of AudioQueueStateDataProvider.wait(timeout:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))() & 1;
}

uint64_t dispatch thunk of AudioQueueStateDataProvider.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of AudioQueueStateDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  __int16 v4 = *(_WORD *)(a2 + 88);
  uint64_t v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v2 + 120);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = v3;
  __int16 v11 = v4;
  return v5(a1, v9);
}

uint64_t SportsProperty.apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 1:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.teamQId.setter();
      break;
    case 2:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.league.setter();
      break;
    case 3:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.leagueQId.setter();
      break;
    case 4:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.sport.setter();
      break;
    case 5:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.sportQId.setter();
      break;
    case 6:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.athlete.setter();
      break;
    case 7:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.athleteQId.setter();
      break;
    default:
      swift_bridgeObjectRetain();
      uint64_t result = SportsItem.team.setter();
      break;
  }
  return result;
}

uint64_t static PersonalizationLevel.from(uso:)@<X0>(unint64_t a1@<X8>)
{
  unint64_t v2 = dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter();
  if (v2)
  {
    unint64_t v3 = v2;
    if (v2 >> 62) {
      goto LABEL_25;
    }
    for (uint64_t i = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v16 = a1;
      unint64_t v5 = 0;
      a1 = v3 & 0xC000000000000001;
      while (1)
      {
        if (a1) {
          MEMORY[0x1CB77D510](v5, v3);
        }
        else {
          swift_retain();
        }
        dispatch thunk of CodeGenListEntry.entry.getter();
        if (v17
          && (uint64_t v6 = dispatch thunk of UsoEntity_common_SportsItem.type.getter(), swift_release(), v6)
          && (uint64_t v7 = dispatch thunk of UsoEntity_common_SportsItemType.name.getter(), v9 = v8, swift_release(), v9))
        {
          if (v7 == 0xD000000000000015 && v9 == 0x80000001C919DA50)
          {
            swift_bridgeObjectRelease();
            swift_release();
LABEL_23:
            swift_bridgeObjectRelease();
            unint64_t v17 = v5;
            return closure #2 in static PersonalizationLevel.from(uso:)(&v17, v16);
          }
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_release();
          swift_bridgeObjectRelease();
          if (v10) {
            goto LABEL_23;
          }
        }
        else
        {
          swift_release();
        }
        unint64_t v11 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          break;
        }
        ++v5;
        if (v11 == i)
        {
          swift_bridgeObjectRelease();
          a1 = v16;
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_25:
      ;
    }
    swift_bridgeObjectRelease();
LABEL_27:
    uint64_t v15 = type metadata accessor for PersonalizationLevel();
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
  else
  {
    uint64_t v12 = type metadata accessor for PersonalizationLevel();
    uint64_t v13 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    return v13(a1, 1, 1, v12);
  }
}

uint64_t closure #2 in static PersonalizationLevel.from(uso:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *a1;
  uint64_t result = dispatch thunk of UsoEntity_common_SportsItem.associatedSportsItems.getter();
  if (!result)
  {
LABEL_26:
    uint64_t v13 = type metadata accessor for PersonalizationLevel();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, 1, 1, v13);
  }
  if ((result & 0xC000000000000001) != 0)
  {
    MEMORY[0x1CB77D510](v3, result);
    goto LABEL_6;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_6:
    swift_bridgeObjectRelease();
    dispatch thunk of CodeGenListEntry.entry.getter();
    swift_release();
    if (v14)
    {
      uint64_t v5 = dispatch thunk of UsoEntity_common_SportsItem.name.getter();
      uint64_t v7 = v6;
      swift_release();
      if (v7)
      {
        if (v5 == 0xD00000000000001ALL && v7 == 0x80000001C919DA70
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v8 = (unsigned int *)MEMORY[0x1E4F9FDB8];
LABEL_25:
          uint64_t v10 = *v8;
          uint64_t v11 = type metadata accessor for PersonalizationLevel();
          uint64_t v12 = *(void *)(v11 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(a2, v10, v11);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
        }
        if (v5 == 0xD00000000000001CLL && v7 == 0x80000001C919DA90
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v8 = (unsigned int *)MEMORY[0x1E4F9FDC8];
          goto LABEL_25;
        }
        if (v5 == 0xD00000000000001DLL && v7 == 0x80000001C919DAB0
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v8 = (unsigned int *)MEMORY[0x1E4F9FDD0];
          goto LABEL_25;
        }
        if (v5 == 0xD00000000000001BLL && v7 == 0x80000001C919DAD0)
        {
          swift_bridgeObjectRelease();
LABEL_24:
          uint64_t v8 = (unsigned int *)MEMORY[0x1E4F9FDC0];
          goto LABEL_25;
        }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          goto LABEL_24;
        }
      }
    }
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t static SportsItem.empty.getter()
{
  return SportsItem.init(sport:league:team:athlete:sportQId:leagueQId:teamQId:athleteQId:)();
}

uint64_t specialized static SportsProperty.from(entity:)()
{
  if (dispatch thunk of UsoEntity_common_SportsItem.type.getter())
  {
    uint64_t v0 = dispatch thunk of UsoEntity_common_SportsItemType.name.getter();
    uint64_t v2 = v1;
    swift_release();
    uint64_t v3 = dispatch thunk of UsoEntity_common_SportsItem.name.getter();
    if (v2 && v4)
    {
      uint64_t v5 = v3;
      if (v0 == 0x74726F7073 && v2 == 0xE500000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x69715F74726F7073 && v2 == 0xE900000000000064
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x65756761656CLL && v2 == 0xE600000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x715F65756761656CLL && v2 == 0xEA00000000006469
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 1835099508 && v2 == 0xE400000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x6469715F6D616574 && v2 == 0xE800000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x6574656C687461 && v2 == 0xE700000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x5F6574656C687461 && v2 == 0xEB00000000646971)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return v5;
      }
    }
  }
  else
  {
    dispatch thunk of UsoEntity_common_SportsItem.name.getter();
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized static UsoEntity_common_SportsItem.from(resultEntity:logger:)(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = a2;
  uint64_t v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v43 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v42 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v41 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Typespb_Domain();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v40 - v14;
  Apple_Parsec_Siri_Context_ResultEntity.domain.getter();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x1E4F88820], v9);
  lazy protocol witness table accessor for type Typespb_Domain and conformance Typespb_Domain(&lazy protocol witness table cache variable for type Typespb_Domain and conformance Typespb_Domain, MEMORY[0x1E4F88828]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v16 = v45;
  uint64_t v17 = v48;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, v9);
  v18(v15, v9);
  uint64_t v19 = 0;
  if (v16 == v17)
  {
    Apple_Parsec_Siri_Context_ResultEntity.usoEntity.getter();
    uint64_t v47 = 0;
    long long v45 = 0u;
    long long v46 = 0u;
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Typespb_Domain and conformance Typespb_Domain((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, MEMORY[0x1E4FA27F0]);
    Message.init(serializedData:extensions:partial:options:)();
    uint64_t v20 = v7;
    uint64_t v21 = v42;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v6, 0, 1, v7);
    os_log_type_t v22 = v41;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v41, v6, v7);
    static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    swift_retain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(void *)&long long v45 = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v29 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
      uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)&v45);
      os_log_type_t v22 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C8F83000, v24, v25, "Got USO graph for alternative entity: %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v28, -1, -1);
      MEMORY[0x1CB77E470](v27, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    if (static UsoConversionUtils.extractFirstEntityFromGraph(graph:)())
    {
      swift_retain();
      static UsoEntity_CodeGenConverter.convert(entity:)();
      swift_release();
      if (*((void *)&v46 + 1))
      {
        type metadata accessor for UsoEntity_common_SportsItem();
        if (swift_dynamicCast())
        {
          swift_release();
          swift_release();
          uint64_t v19 = v48;
          (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v20);
          return v19;
        }
      }
      else
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)&v45, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      swift_retain_n();
      id v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v44 = v20;
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        uint64_t v37 = swift_slowAlloc();
        *(void *)&long long v45 = v37;
        *(_DWORD *)uint64_t v36 = 136315138;
        uint64_t v38 = UsoTask.verbString.getter();
        uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v34, v35, "Entity was not a sports entity but was a %s. Will ignore item", v36, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v37, -1, -1);
        MEMORY[0x1CB77E470](v36, -1, -1);
        swift_release();
        swift_release();

        (*(void (**)(char *, uint64_t))(v21 + 8))(v41, v44);
        return 0;
      }

      swift_release_n();
    }
    else
    {
      unint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        id v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v33 = 0;
        _os_log_impl(&dword_1C8F83000, v31, v32, "Unable to extract sports entity from USO graph", v33, 2u);
        MEMORY[0x1CB77E470](v33, -1, -1);
        swift_release();

LABEL_3:
        (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v20);
        return 0;
      }
    }
    swift_release();
    goto LABEL_3;
  }
  return v19;
}

uint64_t outlined copy of SportsProperty(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 7u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for SportsProperty(uint64_t a1)
{
  return outlined consume of SportsProperty(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of SportsProperty(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 7u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SportsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of SportsProperty(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SportsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of SportsProperty(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of SportsProperty(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SportsProperty(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of SportsProperty(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsProperty(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 7) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsProperty(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 249;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SportsProperty(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for SportsProperty(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SportsProperty()
{
  return &type metadata for SportsProperty;
}

uint64_t lazy protocol witness table accessor for type Typespb_Domain and conformance Typespb_Domain(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id LaunchServicesSatisfyingAppsDataProvider.__allocating_init(satisfies:)(uint64_t a1, uint64_t a2)
{
  return LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(a1, a2);
}

id LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  unsigned __int8 v8 = (char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  v2[16] = MEMORY[0x1E4FBC868];
  id v9 = objc_allocWithZone(MEMORY[0x1E4F72CE0]);
  swift_retain();
  v3[17] = objc_msgSend(v9, sel_init);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1C8F83000, v11, v12, "LaunchServicesSatisfyingAppsDataProvider initialize", v13, 2u);
    MEMORY[0x1CB77E470](v13, -1, -1);
  }

  v3[14] = a1;
  v3[15] = a2;
  swift_retain();
  swift_release();
  uint64_t v14 = (objc_class *)type metadata accessor for LaunchServicesSatisfyingAppsDataProvider();
  v38.receiver = v3;
  v38.super_class = v14;
  id v15 = objc_msgSendSuper2(&v38, sel_init);
  static TaskPriority.low.getter();
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 0, 1, v16);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v15;
  v17[5] = a1;
  v17[6] = a2;
  swift_retain();
  id v18 = v15;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:), (uint64_t)v17);
  swift_release();
  id v19 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v20 = (void *)MEMORY[0x1CB77CA90](0xD00000000000002ELL, 0x80000001C919DAF0);
  uint64_t v36 = partial apply for closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:);
  id v37 = v18;
  aBlocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v33 = 1107296256;
  id v34 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  os_log_type_t v35 = &block_descriptor_4;
  uint64_t v21 = _Block_copy(&aBlock);
  id v22 = v18;
  swift_release();
  id v23 = objc_msgSend(v19, sel_addObserverForName_object_queue_usingBlock_, v20, 0, 0, v21);
  _Block_release(v21);
  swift_unknownObjectRelease();

  uint64_t v24 = (void *)MEMORY[0x1CB77CA90](0xD000000000000030, 0x80000001C919DB40);
  uint64_t v36 = partial apply for closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:);
  id v37 = v22;
  aBlocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v33 = 1107296256;
  id v34 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  os_log_type_t v35 = &block_descriptor_4;
  os_log_type_t v25 = _Block_copy(&aBlock);
  id v26 = v22;
  swift_release();
  id v27 = objc_msgSend(v19, sel_addObserverForName_object_queue_usingBlock_, v24, 0, 0, v25);
  _Block_release(v25);
  swift_unknownObjectRelease();

  id v28 = objc_msgSend(self, sel_subjectMonitorRegistry);
  id v29 = v26;
  id v30 = objc_msgSend(v28, sel_addMonitor_subjectMask_, v29, 1);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  return v29;
}

uint64_t type metadata accessor for LaunchServicesSatisfyingAppsDataProvider()
{
  return self;
}

uint64_t closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[17] = a5;
  v6[18] = a6;
  v6[16] = a4;
  return MEMORY[0x1F4188298](closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:), 0, 0);
}

uint64_t closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)()
{
  uint64_t v40 = v0;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  id v37 = v0 + 2;
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v4 = 0;
    _os_log_impl(&dword_1C8F83000, v2, v3, "LaunchServicesSatisfyingAppsDataProvider get installed apps", v4, 2u);
    MEMORY[0x1CB77E470](v4, -1, -1);
  }
  uint64_t v5 = v0 + 15;

  id v6 = objc_msgSend(self, sel_enumeratorWithOptions_, 0);
  unint64_t v7 = MEMORY[0x1E4FBC860];
  v39[0] = MEMORY[0x1E4FBC860];
  uint64_t v8 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = swift_task_alloc();
  id v11 = v6;
  NSEnumerator.makeIterator()();

  lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator();
  uint64_t v12 = v10;
  uint64_t v38 = v8;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v36 = v0;
  if (v0[5])
  {
    id v34 = v11;
    uint64_t v35 = v9;
    uint64_t v13 = v0 + 6;
    uint64_t v14 = (uint64_t)(v0 + 10);
    id v15 = v0 + 2;
    do
    {
      outlined init with take of Any(v15, v13);
      outlined init with copy of Any((uint64_t)v13, v14);
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for LSApplicationRecord);
      if ((swift_dynamicCast() & 1) == 0) {
        *uint64_t v5 = 0;
      }
      uint64_t v16 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      if (*v5)
      {
        MEMORY[0x1CB77CD90](v16);
        if (*(void *)((v39[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v0 = v36;
        id v15 = v37;
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v0[5]);
    unint64_t v7 = v39[0];
    id v11 = v34;
    uint64_t v9 = v35;
  }
  uint64_t v17 = (uint64_t (*)(void *, NSObject *, uint64_t))v0[17];
  uint64_t v18 = v0[18];
  uint64_t v19 = v0[16];
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v38);
  swift_task_dealloc();

  swift_retain();
  swift_retain();
  specialized Sequence.compactMap<A>(_:)(v7, v19, v17, v18);
  uint64_t v21 = v20;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v21 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, AppData>);
    uint64_t v22 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v22 = MEMORY[0x1E4FBC868];
  }
  v39[0] = v22;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v21, 1, v39);
  swift_bridgeObjectRelease();
  v0[19] = v39[0];
  swift_retain_n();
  id v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    v39[0] = v26;
    *(_DWORD *)os_log_type_t v25 = 136315138;
    uint64_t v27 = swift_retain();
    id v28 = specialized _copyCollectionToContiguousArray<A>(_:)(v27);
    swift_release();
    uint64_t v29 = MEMORY[0x1CB77CDC0](v28, MEMORY[0x1E4FBB1A0]);
    unint64_t v31 = v30;
    swift_release();
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1C8F83000, v23, v24, "LaunchServicesSatisfyingAppsDataProvider satisfying app IDs initialized to %s", v25, 0xCu);
    swift_arrayDestroy();
    uint64_t v0 = v36;
    MEMORY[0x1CB77E470](v26, -1, -1);
    MEMORY[0x1CB77E470](v25, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v32 = v0[16];
  return MEMORY[0x1F4188298](closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:), v32, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(v0[16] + 128) = v0[19];
  swift_bridgeObjectRelease();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1C90213E8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  *(void *)(v3 + 144) = v2;
  *(_OWORD *)(v3 + 128) = v4;
  return MEMORY[0x1F4188298](closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:), 0, 0);
}

void closure #1 in closure #2 in closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void *, NSObject *, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37[5] = *(id *)MEMORY[0x1E4F143B8];
  id v8 = objc_msgSend(a1, sel_bundleIdentifier);
  if (!v8) {
    goto LABEL_20;
  }
  uint64_t v9 = v8;
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v10;
  id v11 = objc_msgSend(self, sel_appInfoWithApplicationRecord_, a1);
  v37[3] = &type metadata for FeatureFlag;
  v37[4] = (id)lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  uint64_t v12 = swift_allocObject();
  v37[0] = (id)v12;
  *(void *)(v12 + 16) = 5;
  *(void *)(v12 + 24) = 0;
  *(void *)(v12 + 32) = 0;
  *(void *)(v12 + 40) = 0;
  *(unsigned char *)(v12 + 48) = 3;
  char v13 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  if (v13)
  {
    uint64_t v14 = *(void **)(a2 + 136);
    v37[0] = 0;
    id v15 = objc_msgSend(v14, sel_actionsForBundleIdentifier_error_, v9, v37);

    id v16 = v37[0];
    if (v15)
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for LNActionMetadata);
      uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v18 = v16;

      goto LABEL_8;
    }
    id v19 = v37[0];
    uint64_t v20 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  else
  {
  }
  uint64_t v17 = MEMORY[0x1E4FBC860];
LABEL_8:
  if ((a3(a1, v11, v17) & 1) == 0)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
LABEL_20:
    *(void *)(a4 + 48) = 0;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    return;
  }
  if (objc_msgSend(a1, sel_appProtectionHidden))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v24 = 0;
      _os_log_impl(&dword_1C8F83000, v22, v23, "LaunchServicesSatisfyingAppsDataProvider excluded hidden app from cache", v24, 2u);
      MEMORY[0x1CB77E470](v24, -1, -1);
      os_log_type_t v25 = v11;
    }
    else
    {
      os_log_type_t v25 = v22;
      uint64_t v22 = v11;
    }

    goto LABEL_20;
  }
  id v26 = objc_msgSend(a1, sel_bundleIdentifier);
  if (!v26)
  {
    uint64_t v28 = 0;
    uint64_t v30 = 0;
    if (v11) {
      goto LABEL_17;
    }
LABEL_22:
    uint64_t v34 = MEMORY[0x1E4FBC870];
    uint64_t v32 = MEMORY[0x1E4FBC870];
    goto LABEL_23;
  }
  uint64_t v27 = v26;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  if (!v11) {
    goto LABEL_22;
  }
LABEL_17:
  id v31 = [v11 supportedIntents];
  uint64_t v32 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v33 = [v11 supportedMediaCategories];
  uint64_t v34 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_23:
  *(void *)a4 = v35;
  *(void *)(a4 + 8) = v36;
  *(void *)(a4 + 16) = v28;
  *(void *)(a4 + 24) = v30;
  *(void *)(a4 + 32) = v32;
  *(void *)(a4 + 40) = v34;
  *(void *)(a4 + 48) = v17;
}

uint64_t partial apply for closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1)
{
  return closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(a1, v1, (uint64_t)&unk_1F2371F98, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:));
}

uint64_t closure #1 in closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a4;
  v5[3] = a5;
  v5[4] = type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:), a4, 0);
}

uint64_t closure #1 in closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)()
{
  LaunchServicesSatisfyingAppsDataProvider.installAppUpdate(bundleIds:)(*(void *)(v0 + 24));
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:), v2, v1);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(char *))(a1 + 32);
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v24[-2] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = Notification.userInfo.getter();
  if (!v9)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    return outlined destroy of Any?((uint64_t)&v26);
  }
  uint64_t v10 = v9;
  strcpy((char *)v24, "bundleIDs");
  HIWORD(v24[2]) = 0;
  v24[3] = -385875968;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v10 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v25), (v12 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v26);
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v25);
  if (!*((void *)&v27 + 1)) {
    return outlined destroy of Any?((uint64_t)&v26);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v14 = *(void *)v25;
  uint64_t v15 = Notification.userInfo.getter();
  if (!v15)
  {
    long long v26 = 0u;
    long long v27 = 0u;
LABEL_20:
    outlined destroy of Any?((uint64_t)&v26);
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = v15;
  strcpy((char *)v24, "isPlaceholder");
  HIWORD(v24[3]) = -4864;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v16 + 16) && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v25), (v18 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v16 + 56) + 32 * v17, (uint64_t)&v26);
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v25);
  if (!*((void *)&v27 + 1)) {
    goto LABEL_20;
  }
  if ((swift_dynamicCast() & 1) != 0 && v25[0] != 1)
  {
    uint64_t v19 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 1, 1, v19);
    type metadata accessor for MainActor();
    swift_retain();
    uint64_t v20 = static MainActor.shared.getter();
    uint64_t v21 = (void *)swift_allocObject();
    uint64_t v22 = MEMORY[0x1E4FBCFD8];
    void v21[2] = v20;
    v21[3] = v22;
    v21[4] = a2;
    void v21[5] = v14;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, a4, (uint64_t)v21);
    return swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1)
{
  return closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(a1, v1, (uint64_t)&unk_1F2371F70, (uint64_t)&async function pointer to partial apply for closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:));
}

uint64_t closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a4;
  v5[3] = a5;
  v5[4] = type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:), a4, 0);
}

uint64_t closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)()
{
  LaunchServicesSatisfyingAppsDataProvider.uninstallAppUpdate(bundleIds:)(*(void *)(v0 + 24));
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:), v2, v1);
}

uint64_t LaunchServicesSatisfyingAppsDataProvider.uninstallAppUpdate(bundleIds:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v17 = a1;
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _NativeDictionary.filter(_:)(v3, (uint64_t (*)(uint64_t, uint64_t, long long *))partial apply for closure #1 in LaunchServicesSatisfyingAppsDataProvider.uninstallAppUpdate(bundleIds:), (uint64_t)v16);
  swift_bridgeObjectRelease();
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v19 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = swift_retain();
    unint64_t v11 = specialized _copyCollectionToContiguousArray<A>(_:)(v10);
    swift_release();
    uint64_t v12 = MEMORY[0x1CB77CDC0](v11, MEMORY[0x1E4FBB1A0]);
    unint64_t v14 = v13;
    swift_release();
    uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v6, v7, "Satisfying app IDs updated to %s to due apps uninstalled", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v9, -1, -1);
    MEMORY[0x1CB77E470](v8, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  *(void *)(v2 + 128) = v4;
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in LaunchServicesSatisfyingAppsDataProvider.uninstallAppUpdate(bundleIds:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4[2];
  if (!v4) {
    return 1;
  }
  if (a4[4] == a1 && a4[5] == a2) {
    return 0;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v9 & 1) == 0)
  {
    if (v4 == 1) {
      return 1;
    }
    unint64_t v11 = a4 + 7;
    for (uint64_t i = 1; ; ++i)
    {
      uint64_t v13 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      BOOL v14 = *(v11 - 1) == a1 && *v11 == a2;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 0;
      }
      v11 += 2;
      uint64_t result = 1;
      if (v13 == v4) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t LaunchServicesSatisfyingAppsDataProvider.installAppUpdate(bundleIds:)(uint64_t a1)
{
  unint64_t v2 = v1;
  v72[5] = *(id *)MEMORY[0x1E4F143B8];
  unint64_t v71 = *(void *)(v1 + 128);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v5 = (uint64_t *)(a1 + 40);
    unint64_t v6 = 0x1E4F22000uLL;
    while (1)
    {
      uint64_t v9 = *(v5 - 1);
      uint64_t v10 = *v5;
      id v11 = objc_allocWithZone(*(Class *)(v6 + 968));
      swift_bridgeObjectRetain();
      uint64_t v70 = v9;
      uint64_t v12 = (void *)MEMORY[0x1CB77CA90](v9, v10);
      v72[0] = 0;
      id v13 = objc_msgSend(v11, sel_initWithBundleIdentifier_allowPlaceholder_error_, v12, 0, v72);

      id v14 = v72[0];
      if (v13)
      {
        uint64_t v15 = self;
        id v16 = v14;
        id v17 = objc_msgSend(v15, sel_appInfoWithApplicationRecord_, v13);
        v72[3] = &type metadata for FeatureFlag;
        v72[4] = (id)lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
        uint64_t v18 = swift_allocObject();
        v72[0] = (id)v18;
        *(void *)(v18 + 16) = 5;
        *(void *)(v18 + 24) = 0;
        *(void *)(v18 + 32) = 0;
        *(void *)(v18 + 40) = 0;
        *(unsigned char *)(v18 + 48) = 3;
        char v19 = isFeatureEnabled(_:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
        uint64_t v20 = MEMORY[0x1E4FBC860];
        if (v19)
        {
          uint64_t v21 = *(void **)(v2 + 136);
          uint64_t v22 = (void *)MEMORY[0x1CB77CA90](v70, v10);
          v72[0] = 0;
          id v23 = objc_msgSend(v21, sel_actionsForBundleIdentifier_error_, v22, v72);

          id v24 = v72[0];
          if (v23)
          {
            type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for LNActionMetadata);
            uint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
            id v25 = v24;
          }
          else
          {
            id v26 = v72[0];
            long long v27 = (void *)_convertNSErrorToError(_:)();

            swift_willThrow();
            uint64_t v20 = MEMORY[0x1E4FBC860];
          }
        }
        if ((*(uint64_t (**)(id, id, uint64_t))(v2 + 112))(v13, v17, v20))
        {
          id v28 = v13;
          id v29 = v17;
          id v30 = objc_msgSend(v28, sel_bundleIdentifier);
          if (v30)
          {
            id v31 = v30;
            uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v68 = v33;
            uint64_t v69 = v32;

            uint64_t v66 = v28;
            if (v29) {
              goto LABEL_13;
            }
LABEL_16:
            id v35 = v28;
            uint64_t v36 = MEMORY[0x1E4FBC870];
            uint64_t v67 = MEMORY[0x1E4FBC870];
          }
          else
          {
            uint64_t v68 = 0;
            uint64_t v69 = 0;
            uint64_t v66 = v28;
            if (!v29) {
              goto LABEL_16;
            }
LABEL_13:
            id v34 = objc_msgSend(v29, sel_supportedIntents);
            uint64_t v67 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

            id v35 = objc_msgSend(v29, sel_supportedMediaCategories);
            uint64_t v36 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
          }
          id v37 = (void *)v71;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v71 = 0x8000000000000000;
          v72[0] = v37;
          unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v10);
          uint64_t v40 = v37[2];
          BOOL v41 = (v39 & 1) == 0;
          uint64_t v42 = v40 + v41;
          if (__OFADD__(v40, v41))
          {
            __break(1u);
LABEL_37:
            __break(1u);
            goto LABEL_38;
          }
          char v43 = v39;
          uint64_t v65 = v36;
          if (v37[3] >= v42)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              long long v46 = v72[0];
              if ((v39 & 1) == 0) {
                goto LABEL_26;
              }
            }
            else
            {
              specialized _NativeDictionary.copy()();
              long long v46 = v72[0];
              if ((v43 & 1) == 0) {
                goto LABEL_26;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, isUniquelyReferenced_nonNull_native);
            unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v10);
            if ((v43 & 1) != (v45 & 1))
            {
              uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
            }
            unint64_t v2 = v44;
            long long v46 = v72[0];
            if ((v43 & 1) == 0)
            {
LABEL_26:
              v46[(v2 >> 6) + 8] |= 1 << v2;
              uint64_t v48 = (uint64_t *)(v46[6] + 16 * v2);
              *uint64_t v48 = v70;
              v48[1] = v10;
              uint64_t v49 = (uint64_t *)(v46[7] + 40 * v2);
              *uint64_t v49 = v69;
              v49[1] = v68;
              v49[2] = v67;
              v49[3] = v65;
              v49[4] = v20;
              uint64_t v50 = v46[2];
              BOOL v51 = __OFADD__(v50, 1);
              uint64_t v52 = v50 + 1;
              if (v51) {
                goto LABEL_37;
              }
              v46[2] = v52;
              swift_bridgeObjectRetain();
              goto LABEL_28;
            }
          }
          uint64_t v47 = (uint64_t *)(v46[7] + 40 * v2);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *uint64_t v47 = v69;
          v47[1] = v68;
          void v47[2] = v67;
          v47[3] = v65;
          v47[4] = v20;
LABEL_28:
          unint64_t v71 = (unint64_t)v46;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v2 = v64;
          unint64_t v6 = 0x1E4F22000;
          goto LABEL_4;
        }
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
      }
      else
      {
        id v7 = v72[0];
        uint64_t v8 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        swift_bridgeObjectRelease();
      }
LABEL_4:
      v5 += 2;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_31:
  if (one-time initialization token for pommes != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    int v57 = (void *)swift_slowAlloc();
    v72[0] = v57;
    *(_DWORD *)uint64_t v56 = 136315138;
    uint64_t v58 = swift_bridgeObjectRetain();
    unint64_t v59 = specialized _copyCollectionToContiguousArray<A>(_:)(v58);
    swift_bridgeObjectRelease();
    uint64_t v60 = MEMORY[0x1CB77CDC0](v59, MEMORY[0x1E4FBB1A0]);
    unint64_t v62 = v61;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v62, (uint64_t *)v72);
    unint64_t v2 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v54, v55, "Satisfying app IDs updated to %s to due to apps installation", v56, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v57, -1, -1);
    MEMORY[0x1CB77E470](v56, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  *(void *)(v2 + 128) = v71;
  return swift_bridgeObjectRelease();
}

uint64_t LaunchServicesSatisfyingAppsDataProvider.readSatisfyingAppDatas(setValue:)(void (*a1)(void *))
{
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  a1(v3);

  return swift_release();
}

void LaunchServicesSatisfyingAppsDataProvider.__allocating_init()()
{
}

void LaunchServicesSatisfyingAppsDataProvider.init()()
{
}

uint64_t LaunchServicesSatisfyingAppsDataProvider.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();
  return v0;
}

uint64_t LaunchServicesSatisfyingAppsDataProvider.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t LaunchServicesSatisfyingAppsDataProvider.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance LaunchServicesSatisfyingAppsDataProvider()
{
  return v0;
}

uint64_t protocol witness for SatisfyingAppsDataProvider.readSatisfyingAppDatas(setValue:) in conformance LaunchServicesSatisfyingAppsDataProvider(void (*a1)(void *))
{
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  a1(v3);

  return swift_release();
}

uint64_t closure #4 in LaunchServicesSatisfyingAppsDataProvider.appProtectionSubjectsChanged(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a4;
  v5[3] = a5;
  v5[4] = type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  return MEMORY[0x1F4188298](closure #4 in LaunchServicesSatisfyingAppsDataProvider.appProtectionSubjectsChanged(_:for:), a4, 0);
}

uint64_t closure #4 in LaunchServicesSatisfyingAppsDataProvider.appProtectionSubjectsChanged(_:for:)()
{
  LaunchServicesSatisfyingAppsDataProvider.uninstallAppUpdate(bundleIds:)(*(void *)(v0 + 24));
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #4 in LaunchServicesSatisfyingAppsDataProvider.appProtectionSubjectsChanged(_:for:), v2, v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = _swift_stdlib_malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      _OWORD v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (void *)MEMORY[0x1E4FBC860];
    }
  }
  return v3;
}

{
  unint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;

  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = _swift_stdlib_malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      _OWORD v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((unint64_t)(v3 + 4), v2, v1, (void (*)(void))type metadata accessor for AudioItemCandidate, &lazy protocol witness table cache variable for type [AudioItemCandidate] and conformance [A], &demangling cache variable for type metadata for [AudioItemCandidate], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (void *)MEMORY[0x1E4FBC860];
    }
  }
  return v3;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, AppData>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v36 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  uint64_t v38 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v39 = v10;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v36) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      uint64_t v16 = v10 + 1;
      if (!v15)
      {
        uint64_t v16 = v10 + 2;
        if (v10 + 2 >= v36) {
          return v8;
        }
        unint64_t v15 = a1[v16];
        if (!v15)
        {
          uint64_t v16 = v10 + 3;
          if (v10 + 3 >= v36) {
            return v8;
          }
          unint64_t v15 = a1[v16];
          if (!v15)
          {
            uint64_t v17 = v10 + 4;
            if (v10 + 4 >= v36) {
              return v8;
            }
            unint64_t v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                uint64_t v16 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v36) {
                  return v8;
                }
                unint64_t v15 = a1[v16];
                ++v17;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      uint64_t v39 = v16;
      unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void *)(v4 + 56) + 40 * v13;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    long long v40 = *(_OWORD *)(v21 + 16);
    uint64_t v24 = *(void *)(v21 + 32);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v27);
      }
      while (v32 == -1);
      unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
    }
    *(void *)(v11 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t v33 = (void *)(*(void *)(v8 + 48) + 16 * v28);
    *uint64_t v33 = v20;
    v33[1] = v19;
    uint64_t v34 = *(void *)(v8 + 56) + 40 * v28;
    *(void *)uint64_t v34 = v22;
    *(void *)(v34 + 8) = v23;
    *(_OWORD *)(v34 + 16) = v40;
    *(void *)(v34 + 32) = v24;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t v4 = v38;
    uint64_t v10 = v39;
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [SEMSpanMatchResult] and conformance [A], &demangling cache variable for type metadata for [SEMSpanMatchResult]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SEMSpanMatchResult]);
          unint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SEMSpanMatchResult);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, MEMORY[0x1E4FA3808], &lazy protocol witness table cache variable for type [UsoTask] and conformance [A], &demangling cache variable for type metadata for [UsoTask], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, MEMORY[0x1E4FA2B98], &lazy protocol witness table cache variable for type [UsoEntity_common_UserEntity] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_common_UserEntity], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, MEMORY[0x1E4FA2B70], &lazy protocol witness table cache variable for type [UsoEntity_uso_NoEntity] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_uso_NoEntity], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, MEMORY[0x1E4FA32E8], &lazy protocol witness table cache variable for type [UsoEntity_common_EventTrigger] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_common_EventTrigger], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, MEMORY[0x1E4FA3088], &lazy protocol witness table cache variable for type [UsoEntity_common_App] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_common_App], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, MEMORY[0x1E4FA31F8], &lazy protocol witness table cache variable for type [UsoEntity_common_MediaItem] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_common_MediaItem], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, MEMORY[0x1E4F9FEB8], &lazy protocol witness table cache variable for type [PommesResult] and conformance [A], &demangling cache variable for type metadata for [PommesResult], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, MEMORY[0x1E4FA3418], (unint64_t *)&lazy protocol witness table cache variable for type [UsoEntity_common_RadioStation] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_common_RadioStation], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A](&lazy protocol witness table cache variable for type [INPerson] and conformance [A], &demangling cache variable for type metadata for [INPerson]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
          unint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, MEMORY[0x1E4F9FF00], &lazy protocol witness table cache variable for type [VocabularyResult] and conformance [A], &demangling cache variable for type metadata for [VocabularyResult], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, MEMORY[0x1E4F9FEB0], &lazy protocol witness table cache variable for type [Experience] and conformance [A], &demangling cache variable for type metadata for [Experience], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, MEMORY[0x1E4FA3200], (unint64_t *)&lazy protocol witness table cache variable for type [UsoEntity_common_PhoneCall] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_common_PhoneCall], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A](&lazy protocol witness table cache variable for type [CodeGenListEntry<UsoEntity_common_Agent>] and conformance [A], &demangling cache variable for type metadata for [CodeGenListEntry<UsoEntity_common_Agent>]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CodeGenListEntry<UsoEntity_common_Agent>]);
          unint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodeGenListEntry<UsoEntity_common_Agent>);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A](&lazy protocol witness table cache variable for type [NSDictionary] and conformance [A], &demangling cache variable for type metadata for [NSDictionary]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSDictionary]);
          unint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSDictionary);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(void))type metadata accessor for AudioResult, &lazy protocol witness table cache variable for type [AudioResult] and conformance [A], &demangling cache variable for type metadata for [AudioResult], (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t matched = lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A](a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          uint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, matched);
          uint64_t v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t matched;
  uint64_t i;
  uint64_t v21;
  void (*v22)(unsigned char *, void);
  id *v23;
  id v24;
  uint64_t result;
  unsigned char v26[32];

  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t matched = lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A](a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          uint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, matched);
          uint64_t v24 = *v23;
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 56) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int64_t v25;

  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    unint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    unint64_t v7 = -1;
  }
  int64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    unint64_t v11 = 0;
    uint64_t v9 = 0;
LABEL_39:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    unint64_t v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  int64_t v10 = a2;
  uint64_t v23 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v24 = result;
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t v25 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  int64_t v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    uint64_t v18 = (void *)(*(void *)(a4 + 56) + 40 * v14);
    uint64_t v19 = v18[1];
    uint64_t v21 = v18[2];
    uint64_t v20 = v18[3];
    uint64_t v22 = v18[4];
    *int64_t v10 = *v18;
    v10[1] = v19;
    id v10[2] = v21;
    v10[3] = v20;
    v10[4] = v22;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v15 >= v25) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    if (!v16)
    {
      v11 += 2;
      if (v15 + 1 >= v25)
      {
        int64_t v8 = 0;
        unint64_t v11 = v15;
      }
      else
      {
        unint64_t v16 = *(void *)(v5 + 8 * v11);
        if (v16) {
          goto LABEL_14;
        }
        uint64_t v17 = v15 + 2;
        if (v15 + 2 >= v25) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v5 + 8 * v17);
        if (v16)
        {
LABEL_17:
          int64_t v15 = v17;
          goto LABEL_18;
        }
        unint64_t v11 = v15 + 3;
        if (v15 + 3 < v25)
        {
          unint64_t v16 = *(void *)(v5 + 8 * v11);
          if (v16)
          {
LABEL_14:
            int64_t v15 = v11;
            goto LABEL_18;
          }
          uint64_t v17 = v15 + 4;
          if (v15 + 4 >= v25)
          {
LABEL_33:
            int64_t v8 = 0;
            goto LABEL_37;
          }
          unint64_t v16 = *(void *)(v5 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              int64_t v15 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_42;
              }
              if (v15 >= v25)
              {
                int64_t v8 = 0;
                unint64_t v11 = v25 - 1;
                goto LABEL_37;
              }
              unint64_t v16 = *(void *)(v5 + 8 * v15);
              ++v17;
              if (v16) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        int64_t v8 = 0;
        unint64_t v11 = v15 + 2;
      }
LABEL_37:
      uint64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v23;
      uint64_t result = v24;
      goto LABEL_39;
    }
LABEL_18:
    int64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v15 << 6);
    unint64_t v11 = v15;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(void *, NSObject *, uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v32 = a4;
  unint64_t v6 = a1;
  if (!(a1 >> 62))
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7) {
    goto LABEL_18;
  }
LABEL_3:
  unint64_t v22 = v6 & 0xC000000000000001;
  uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v9 = 4;
  uint64_t v20 = v7;
  unint64_t v21 = v6;
  while (1)
  {
    if (v22) {
      id v11 = (id)MEMORY[0x1CB77D510](v9 - 4, v6);
    }
    else {
      id v11 = *(id *)(v6 + 8 * v9);
    }
    int64_t v12 = v11;
    uint64_t v13 = v9 - 3;
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
      goto LABEL_17;
    }
    int64_t v14 = (void *)MEMORY[0x1CB77DAF0]();
    closure #1 in closure #2 in closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(v12, a2, a3, (uint64_t)&v27);
    if (v5) {
      break;
    }
    uint64_t v5 = 0;

    uint64_t v15 = v28;
    if (v28)
    {
      uint64_t v16 = v27;
      long long v25 = v30;
      long long v26 = v29;
      uint64_t v17 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      }
      unint64_t v19 = v8[2];
      unint64_t v18 = v8[3];
      if (v19 >= v18 >> 1) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v8);
      }
      id v8[2] = v19 + 1;
      uint64_t v10 = &v8[7 * v19];
      v10[4] = v16;
      v10[5] = v15;
      *((_OWORD *)v10 + 3) = v26;
      *((_OWORD *)v10 + 4) = v25;
      v10[10] = v17;
      uint64_t v7 = v20;
      unint64_t v6 = v21;
    }
    ++v9;
    if (v13 == v7) {
      goto LABEL_18;
    }
  }
  __break(1u);
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v5 = a1 + 40;
    do
    {
      uint64_t v7 = *(void *)(v5 + 40);
      long long v33 = *(_OWORD *)(v5 + 24);
      uint64_t v9 = *(void *)(v5 + 8);
      uint64_t v8 = *(void *)(v5 + 16);
      uint64_t v10 = *(void *)(v5 - 8);
      uint64_t v11 = *(void *)v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v11) {
        break;
      }
      uint64_t v30 = v9;
      uint64_t v31 = v8;
      uint64_t v32 = v7;
      uint64_t v29 = v4;
      int64_t v12 = (void *)*a3;
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
      uint64_t v15 = v12[2];
      BOOL v16 = (v13 & 1) == 0;
      uint64_t v17 = v15 + v16;
      if (__OFADD__(v15, v16))
      {
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      char v18 = v13;
      if (v12[3] >= v17)
      {
        if ((a2 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a2 & 1);
        unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
        if ((v18 & 1) != (v20 & 1)) {
          goto LABEL_18;
        }
        unint64_t v14 = v19;
      }
      unint64_t v21 = (void *)*a3;
      if (v18)
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = v21[7] + 40 * v14;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)uint64_t v6 = v30;
        *(void *)(v6 + 8) = v31;
        *(_OWORD *)(v6 + 16) = v33;
        *(void *)(v6 + 32) = v32;
      }
      else
      {
        v21[(v14 >> 6) + 8] |= 1 << v14;
        unint64_t v22 = (uint64_t *)(v21[6] + 16 * v14);
        *unint64_t v22 = v10;
        v22[1] = v11;
        uint64_t v23 = v21[7] + 40 * v14;
        *(void *)uint64_t v23 = v30;
        *(void *)(v23 + 8) = v31;
        *(_OWORD *)(v23 + 16) = v33;
        *(void *)(v23 + 32) = v32;
        uint64_t v24 = v21[2];
        BOOL v25 = __OFADD__(v24, 1);
        uint64_t v26 = v24 + 1;
        if (v25) {
          goto LABEL_17;
        }
        void v21[2] = v26;
      }
      v5 += 56;
      a2 = 1;
      --v4;
    }
    while (v29 != 1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, long long *))
{
  uint64_t v24 = (unint64_t *)result;
  uint64_t v25 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v26 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v12 = v11 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v19 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v26) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v6;
    if (!v20)
    {
      int64_t v6 = v19 + 1;
      if (v19 + 1 >= v26) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
      }
      unint64_t v20 = *(void *)(v7 + 8 * v6);
      if (!v20)
      {
        int64_t v6 = v19 + 2;
        if (v19 + 2 >= v26) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
        }
        unint64_t v20 = *(void *)(v7 + 8 * v6);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v12 = __clz(__rbit64(v20)) + (v6 << 6);
LABEL_5:
    char v13 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v12);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    uint64_t v16 = *(void *)(a3 + 56) + 40 * v12;
    uint64_t v17 = *(void *)(v16 + 32);
    long long v18 = *(_OWORD *)(v16 + 16);
    long long v27 = *(_OWORD *)v16;
    long long v28 = v18;
    uint64_t v29 = v17;
    outlined init with take of String?((uint64_t)&v27, (uint64_t)v30);
    long long v31 = v28;
    uint64_t v32 = v29;
    swift_bridgeObjectRetain();
    outlined retain of String?((uint64_t)v30);
    outlined retain of [LNActionMetadata]((uint64_t)&v31);
    outlined retain of [LNActionMetadata]((uint64_t)&v31 + 8);
    outlined retain of [LNActionMetadata]((uint64_t)&v32);
    LOBYTE(v15) = a4(v15, v14, &v27);
    outlined release of String?((uint64_t)v30);
    outlined release of [LNActionMetadata]((uint64_t)&v31);
    outlined release of [LNActionMetadata]((uint64_t)&v31 + 8);
    outlined release of [LNActionMetadata]((uint64_t)&v32);
    uint64_t result = swift_bridgeObjectRelease();
    if (v15)
    {
      *(unint64_t *)((char *)v24 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
      }
    }
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v26) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v6 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v6 >= v26) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
    }
    unint64_t v20 = *(void *)(v7 + 8 * v6);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, long long *), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  v13[1] = *MEMORY[0x1E4F143B8];
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    unint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11, v8, v6, a2);
    MEMORY[0x1CB77E470](v11, -1, -1);
  }
  return a3;
}

uint64_t specialized LaunchServicesSatisfyingAppsDataProvider.appProtectionSubjectsChanged(_:for:)(unint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  char v45 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v47 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_19;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_50;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      MEMORY[0x1CB77D510](i, a1);
      self;
      if (swift_dynamicCastObjCClass())
      {
        MEMORY[0x1CB77CD90]();
        if (*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    for (uint64_t j = 0; j != v4; ++j)
    {
      unint64_t v8 = *(void **)(a1 + 8 * j + 32);
      self;
      if (swift_dynamicCastObjCClass())
      {
        MEMORY[0x1CB77CD90](v8);
        if (*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
  }
LABEL_19:
  swift_bridgeObjectRelease();
  unint64_t v9 = v47;
  if (!(v47 >> 62))
  {
    uint64_t v10 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_21;
    }
LABEL_47:
    uint64_t v25 = (void *)MEMORY[0x1E4FBC860];
    char v13 = (void *)MEMORY[0x1E4FBC860];
LABEL_48:
    swift_bridgeObjectRelease_n();
    uint64_t v35 = type metadata accessor for TaskPriority();
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56);
    uint64_t v37 = (uint64_t)v45;
    v36(v45, 1, 1, v35);
    type metadata accessor for MainActor();
    uint64_t v38 = v46;
    swift_retain();
    uint64_t v39 = static MainActor.shared.getter();
    long long v40 = (void *)swift_allocObject();
    uint64_t v41 = MEMORY[0x1E4FBCFD8];
    v40[2] = v39;
    uint64_t v40[3] = v41;
    v40[4] = v38;
    v40[5] = v13;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v37, (uint64_t)&async function pointer to partial apply for closure #4 in LaunchServicesSatisfyingAppsDataProvider.appProtectionSubjectsChanged(_:for:), (uint64_t)v40);
    swift_release();
    v36((char *)v37, 1, 1, v35);
    swift_retain();
    uint64_t v42 = static MainActor.shared.getter();
    char v43 = (void *)swift_allocObject();
    v43[2] = v42;
    uint64_t v43[3] = v41;
    v43[4] = v38;
    uint64_t v43[5] = v25;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v37, (uint64_t)&async function pointer to partial apply for closure #5 in LaunchServicesSatisfyingAppsDataProvider.appProtectionSubjectsChanged(_:for:), (uint64_t)v43);
    return swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v10 = result;
  if (!result) {
    goto LABEL_47;
  }
LABEL_21:
  if (v10 >= 1)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v9 & 0xC000000000000001;
    char v13 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v14 = &selRef_init;
    do
    {
      if (v12) {
        id v15 = (id)MEMORY[0x1CB77D510](v11, v9);
      }
      else {
        id v15 = *(id *)(v9 + 8 * v11 + 32);
      }
      uint64_t v16 = v15;
      if ([v15 v14[84]])
      {
        id v17 = objc_msgSend(v16, sel_bundleIdentifier);
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        }
        unint64_t v22 = v13[2];
        unint64_t v21 = v13[3];
        if (v22 >= v21 >> 1) {
          char v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v13);
        }
        void v13[2] = v22 + 1;
        uint64_t v23 = &v13[2 * v22];
        void v23[4] = v18;
        v23[5] = v20;
        uint64_t v14 = &selRef_init;
      }
      else
      {
      }
      ++v11;
    }
    while (v10 != v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v24 = 0;
    uint64_t v25 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if (v12) {
        id v26 = (id)MEMORY[0x1CB77D510](v24, v9);
      }
      else {
        id v26 = *(id *)(v9 + 8 * v24 + 32);
      }
      long long v27 = v26;
      if ([v26 v14[84]])
      {
      }
      else
      {
        id v28 = objc_msgSend(v27, sel_bundleIdentifier);
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v31 = v30;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
        }
        unint64_t v33 = v25[2];
        unint64_t v32 = v25[3];
        if (v33 >= v32 >> 1) {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v25);
        }
        long long v25[2] = v33 + 1;
        uint64_t v34 = &v25[2 * v33];
        v34[4] = v29;
        v34[5] = v31;
        uint64_t v14 = &selRef_init;
      }
      ++v24;
    }
    while (v10 != v24);
    goto LABEL_48;
  }
LABEL_50:
  __break(1u);
  return result;
}

unint64_t instantiation function for generic protocol witness table for LaunchServicesSatisfyingAppsDataProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LaunchServicesSatisfyingAppsDataProvider and conformance LaunchServicesSatisfyingAppsDataProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type LaunchServicesSatisfyingAppsDataProvider and conformance LaunchServicesSatisfyingAppsDataProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type LaunchServicesSatisfyingAppsDataProvider and conformance LaunchServicesSatisfyingAppsDataProvider;
  if (!lazy protocol witness table cache variable for type LaunchServicesSatisfyingAppsDataProvider and conformance LaunchServicesSatisfyingAppsDataProvider)
  {
    type metadata accessor for LaunchServicesSatisfyingAppsDataProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LaunchServicesSatisfyingAppsDataProvider and conformance LaunchServicesSatisfyingAppsDataProvider);
  }
  return result;
}

uint64_t dispatch thunk of SatisfyingAppsDataProvider.readSatisfyingAppDatas(setValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t method lookup function for LaunchServicesSatisfyingAppsDataProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LaunchServicesSatisfyingAppsDataProvider);
}

uint64_t dispatch thunk of LaunchServicesSatisfyingAppsDataProvider.__allocating_init(satisfies:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of LaunchServicesSatisfyingAppsDataProvider.readSatisfyingAppDatas(setValue:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t sub_1C9025A4C()
{
  outlined consume of FeatureFlag(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return MEMORY[0x1F4186498](v0, 49, 7);
}

uint64_t partial apply for closure #1 in LaunchServicesSatisfyingAppsDataProvider.uninstallAppUpdate(bundleIds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in LaunchServicesSatisfyingAppsDataProvider.uninstallAppUpdate(bundleIds:)(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of String?(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of [LNActionMetadata](uint64_t a1)
{
  return a1;
}

uint64_t outlined release of String?(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #4 in LaunchServicesSatisfyingAppsDataProvider.appProtectionSubjectsChanged(_:for:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *unint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return closure #4 in LaunchServicesSatisfyingAppsDataProvider.appProtectionSubjectsChanged(_:for:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #5 in LaunchServicesSatisfyingAppsDataProvider.appProtectionSubjectsChanged(_:for:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *unint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(a1, v4, v5, v7, v6);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *unint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(a1, v4, v5, v7, v6);
}

uint64_t objectdestroy_13Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *unint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(a1, v4, v5, v7, v6);
}

unint64_t lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator;
  if (!lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator)
  {
    type metadata accessor for NSFastEnumerationIterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *PegasusCacheManager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static PegasusCacheManager.shared;
}

uint64_t static PegasusCacheManager.defaultDirectoryPath.getter()
{
  id v0 = objc_msgSend(self, sel_defaultManager);
  id v1 = objc_msgSend(v0, sel_URLsForDirectory_inDomains_, 13, 1);

  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v2 - 8);
  uint64_t v8 = v7;
  if (*(void *)(v3 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v6, v3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v2);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v6, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v2);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    URL.appendingPathComponent(_:isDirectory:)();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v2);
  }
  return result;
}

void one-time initialization function for shared()
{
  id v0 = objc_msgSend(self, sel_sharedPreferences);
  id v1 = objc_msgSend(v0, sel_languageCode);
  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;

    v17[5] = v2;
    v17[6] = v4;
    v17[3] = 45;
    v17[4] = 0xE100000000000000;
    v17[1] = 95;
    v17[2] = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    id v1 = (id)StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v6 = v5;

    swift_bridgeObjectRelease();
  }
  else
  {

    uint64_t v6 = 0xE000000000000000;
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PegasusCacheManager();
  static PegasusCacheManager.defaultDirectoryPath.getter();
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CacheHandling)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C91947A0;
  *(void *)(inited + 32) = 0x616964656DLL;
  *(void *)(inited + 40) = 0xE500000000000000;
  uint64_t v12 = type metadata accessor for AudioCacheHandler();
  uint64_t v13 = swift_allocObject();
  *(void *)(inited + 72) = v12;
  *(void *)(inited + 80) = &protocol witness table for AudioCacheHandler;
  *(void *)(inited + 48) = v13;
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  id v15 = objc_msgSend(self, sel_clientWithIdentifier_, 131);
  swift_allocObject();
  uint64_t v16 = specialized PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)((uint64_t)v1, v6, v14, (uint64_t)v9, 6, 0, v15, 1);

  static PegasusCacheManager.shared = (uint64_t)v16;
}

unsigned char *PegasusCacheManager.__allocating_init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, void *a7, int a8)
{
  swift_allocObject();
  uint64_t v16 = specialized PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)(a1, a2, a3, a4, a5, a6, a7, a8);

  return v16;
}

uint64_t static PegasusCacheManager.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t PegasusCacheManager.directoryPath.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t PegasusCacheManager.responseCache.getter()
{
  return swift_retain();
}

id PegasusCacheManager.trialClient.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
}

id PegasusCacheManager.experimentationAnalyticsManager.getter()
{
  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_experimentationAnalyticsManager));
}

uint64_t PegasusCacheManager.cachingEnabled.getter()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled)) {
    return 1;
  }
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
  uint64_t v3 = (void *)MEMORY[0x1CB77CA90](0x635F656C62616E65, 0xEE00676E69686361);
  uint64_t v4 = (void *)MEMORY[0x1CB77CA90](0xD000000000000018, 0x80000001C919BF10);
  id v5 = objc_msgSend(v2, sel_levelForFactor_withNamespaceName_, v3, v4);

  if (!v5) {
    return 0;
  }
  id v1 = objc_msgSend(v5, sel_BOOLeanValue);

  return (uint64_t)v1;
}

unsigned char *PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, void *a7, int a8)
{
  unint64_t v9 = specialized PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)(a1, a2, a3, a4, a5, a6, a7, a8);

  return v9;
}

uint64_t (**PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback.unsafeMutableAddressor())()
{
  return static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback;
}

void closure #1 in variable initialization expression of static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v58 = a4;
  v61[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = &v51[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
  id v14 = a5;
  id v15 = a1;
  id v16 = a3;
  int v57 = a5;
  id v17 = v16;
  id v18 = v14;
  id v19 = v15;
  id v20 = v17;
  uint64_t v59 = v13;
  unint64_t v21 = Logger.logObject.getter();
  int v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, (os_log_type_t)v22))
  {
    int v52 = v22;
    os_log_type_t v55 = v11;
    uint64_t v23 = a2;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v53 = (void *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    uint64_t v60 = (uint64_t)a1;
    v61[0] = v54;
    *(_DWORD *)uint64_t v24 = 136316162;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFNotificationCenterRef?);
    uint64_t v25 = Optional.debugDescription.getter();
    uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v56 = v23;
    uint64_t v60 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeMutableRawPointer?);
    uint64_t v27 = Optional.debugDescription.getter();
    uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 22) = 2080;
    uint64_t v60 = (uint64_t)a3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFNotificationName?);
    uint64_t v29 = Optional.debugDescription.getter();
    uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 32) = 2080;
    uint64_t v60 = v58;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeRawPointer?);
    uint64_t v31 = Optional.debugDescription.getter();
    uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 42) = 2112;
    unint64_t v33 = v57;
    if (v57)
    {
      uint64_t v60 = (uint64_t)v18;
      id v34 = v18;
    }
    else
    {
      uint64_t v60 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v39 = v53;
    *uint64_t v53 = v33;

    _os_log_impl(&dword_1C8F83000, v21, (os_log_type_t)v52, "PegasusCacheManager : Received callback for kAFSiriAndDictationHistoryDeletionRequestedDarwinNotification center:%s observer:%s name: %s object:%s userInfo:%@", (uint8_t *)v24, 0x34u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v39, -1, -1);
    uint64_t v40 = v54;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v40, -1, -1);
    MEMORY[0x1CB77E470](v24, -1, -1);

    uint64_t v11 = v55;
    a2 = v56;
    if (!v56) {
      goto LABEL_14;
    }
  }
  else
  {

    if (!a2)
    {
LABEL_14:
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        char v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v43 = 0;
        _os_log_impl(&dword_1C8F83000, v41, v42, "PegasusCacheManager : Observer for siriAndDictationHistoryDeletionRequestedCallback is nil", v43, 2u);
        MEMORY[0x1CB77E470](v43, -1, -1);
      }

      return;
    }
  }
  swift_retain();
  if (PegasusCacheManager.cachingEnabled.getter())
  {
    uint64_t v35 = type metadata accessor for PommesCandidateId();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v11, 1, 1, v35);
    (*(void (**)(void, void, unsigned char *, uint64_t))(*(void *)a2 + 232))(0, 0, v11, 5);
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PommesCandidateId?);
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    MEMORY[0x1F4188790](v44 - 8);
    uint64_t v46 = &v51[-((v45 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v47 = type metadata accessor for Date();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v46, 1, 1, v47);
    id v48 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
    uint64_t v49 = (void *)MEMORY[0x1CB77CA90](0xD000000000000015, 0x80000001C919C770);
    id v50 = objc_msgSend(v48, sel_initWithSuiteName_, v49);

    (*(void (**)(unsigned char *, id))(*(void *)a2 + 264))(v46, v50);
    swift_release();

    outlined destroy of MediaUserStateCenter?((uint64_t)v46, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl(&dword_1C8F83000, v36, v37, "PegasusCacheManager : Ignoring callback because caching is disabled", v38, 2u);
      MEMORY[0x1CB77E470](v38, -1, -1);
    }

    swift_release();
  }
}

void @objc closure #1 in variable initialization expression of static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v10 = a1;
  id v11 = a3;
  id v12 = a5;
  closure #1 in variable initialization expression of static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback(a1, a2, a3, a4, a5);
}

void (*static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback.getter())(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return @objc closure #1 in variable initialization expression of static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback;
}

id PegasusCacheManager.processResponse(domain:response:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_domainCacheHandlers);
  if (*(void *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v8)
    {
      outlined init with copy of AppDataProviding(*(void *)(v4 + 56) + 40 * v7, (uint64_t)&v19);
      swift_bridgeObjectRelease();
      if (*((void *)&v20 + 1))
      {
        outlined init with take of AppDataProviding(&v19, (uint64_t)v22);
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
        swift_bridgeObjectRetain_n();
        id v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v10, v11))
        {
          id v12 = (uint8_t *)swift_slowAlloc();
          uint64_t v13 = swift_slowAlloc();
          *(void *)&long long v19 = v13;
          *(_DWORD *)id v12 = 136315138;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v19);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C8F83000, v10, v11, "PegasusCacheManager : Processing response for caching domain=\"%s\"", v12, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v13, -1, -1);
          MEMORY[0x1CB77E470](v12, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v15 = v23;
        uint64_t v16 = v24;
        __swift_project_boxed_opaque_existential_1(v22, v23);
        uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 8))(a3, v15, v16);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        return (id)v17;
      }
    }
    else
    {
      uint64_t v21 = 0;
      long long v19 = 0u;
      long long v20 = 0u;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v21 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)&v19, &demangling cache variable for type metadata for CacheHandling?);

  return a3;
}

uint64_t closure #1 in PegasusCacheManager.prepare()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath;
    uint64_t v2 = *(unsigned int *)(result + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_dbFlags);
    uint64_t v3 = *(void (**)(uint64_t, uint64_t))(**(void **)(result
                                                               + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache)
                                                 + 136);
    swift_retain();
    v3(v1, v2);
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PegasusCacheManager.reset()()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled)) {
    goto LABEL_4;
  }
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
  uint64_t v2 = (void *)MEMORY[0x1CB77CA90](0x635F656C62616E65, 0xEE00676E69686361);
  uint64_t v3 = (void *)MEMORY[0x1CB77CA90](0xD000000000000018, 0x80000001C919BF10);
  id v4 = objc_msgSend(v1, sel_levelForFactor_withNamespaceName_, v2, v3);

  if (v4)
  {
    unsigned int v5 = objc_msgSend(v4, sel_BOOLeanValue);

    if (v5)
    {
LABEL_4:
      uint64_t v6 = *(NSObject **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue);
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = partial apply for closure #1 in PegasusCacheManager.reset();
      *(void *)(v7 + 24) = v0;
      v9[4] = partial apply for thunk for @callee_guaranteed () -> ();
      _OWORD v9[5] = v7;
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 1107296256;
      v9[2] = thunk for @escaping @callee_guaranteed () -> ();
      v9[3] = &block_descriptor_6;
      char v8 = _Block_copy(v9);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v6, v8);
      _Block_release(v8);
      LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (v6) {
        __break(1u);
      }
    }
  }
}

uint64_t closure #1 in PegasusCacheManager.reset()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1
                                            + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache)
                              + 144))();
}

uint64_t PegasusCacheManager.fetch(request:domainWarmup:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v51 = a2;
  uint64_t v9 = type metadata accessor for PommesSearchRequest(0);
  id v50 = *(uint64_t **)(v9 - 8);
  uint64_t v10 = v50[8];
  MEMORY[0x1F4188790](v9);
  os_log_type_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled) & 1) == 0)
  {
    id v12 = *(void **)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
    uint64_t v13 = a4;
    id v14 = (void *)MEMORY[0x1CB77CA90](0x635F656C62616E65, 0xEE00676E69686361);
    uint64_t v15 = (void *)MEMORY[0x1CB77CA90](0xD000000000000018, 0x80000001C919BF10);
    id v16 = objc_msgSend(v12, sel_levelForFactor_withNamespaceName_, v14, v15);

    a4 = v13;
    if (!v16) {
      return a3(0);
    }
    unsigned int v17 = objc_msgSend(v16, sel_BOOLeanValue);

    if (!v17) {
      return a3(0);
    }
  }
  if (specialized static PegasusCacheManager.checkUserDefaultDisableCache(key:)(0xD000000000000019, 0x80000001C919DC80))return a3(0); {
  uint64_t v49 = a4;
  }
  long long v19 = (uint64_t *)(a1 + *(int *)(v9 + 20));
  uint64_t v21 = *v19;
  unint64_t v20 = v19[1];
  uint64_t v22 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v22 = v21 & 0xFFFFFFFFFFFFLL;
  }
  if (!v22) {
    return a3(0);
  }
  uint64_t v23 = *(void *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_utteranceNormalizer + 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t))(v5
                                          + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_utteranceNormalizer
                                          + 16);
  aBlocuint64_t k = *(void *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_utteranceNormalizer);
  uint64_t v54 = v23;
  os_log_type_t v55 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25._uint64_t countAndFlagsBits = v21;
  v25._unint64_t object = (void *)v20;
  Swift::String v26 = UtteranceNormalizer.normalize(_:preserveCase:)(v25, 0);
  unint64_t object = v26._object;
  uint64_t countAndFlagsBits = v26._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v46 = *(void *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue);
  uint64_t v47 = type metadata accessor for DispatchQoS();
  id v48 = &v43;
  uint64_t v27 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v29 = (char *)&v43 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchQoS.userInitiated.getter();
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v30 = (*((unsigned __int8 *)v50 + 80) + 24) & ~(unint64_t)*((unsigned __int8 *)v50 + 80);
  unint64_t v31 = (v10 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v5;
  outlined init with take of PommesSearchRequest((uint64_t)v11, v33 + v30);
  *(void *)(v33 + v31) = v51;
  id v34 = (uint64_t *)(v33 + v32);
  uint64_t v35 = (uint64_t)object;
  *id v34 = countAndFlagsBits;
  v34[1] = v35;
  uint64_t v36 = (void *)(v33 + ((v32 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v37 = v49;
  void *v36 = a3;
  v36[1] = v37;
  int v57 = partial apply for closure #1 in PegasusCacheManager.fetch(request:domainWarmup:completion:);
  uint64_t v58 = v33;
  aBlocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v54 = 1107296256;
  os_log_type_t v55 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t v56 = &block_descriptor_12;
  uint64_t v38 = _Block_copy(&aBlock);
  uint64_t v39 = type metadata accessor for DispatchWorkItemFlags();
  id v50 = &v43;
  uint64_t v40 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  os_log_type_t v42 = (char *)&v43 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAF40]);
  swift_retain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1CB77D180](0, v29, v42, v38);
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v47);
  return swift_release();
}

void closure #1 in PegasusCacheManager.fetch(request:domainWarmup:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(id))
{
  id v31 = 0;
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache);
  if (((*(uint64_t (**)(void))(*(void *)v12 + 128))() & 1) == 0) {
    (*(void (**)(uint64_t, void))(*(void *)v12 + 136))(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath, *(unsigned int *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_dbFlags));
  }
  uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 160))(a2, a3);
  id v31 = v13;
  uint64_t v14 = one-time initialization token for pommes;
  id v15 = v13;
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  id v17 = v15;
  id v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = v27;
    *(_DWORD *)uint64_t v20 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    unint64_t v21 = 0xE400000000000000;
    if (v13)
    {
      uint64_t v29 = 542394696;
      unint64_t v30 = 0xE400000000000000;
      id v22 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesResponse?);
      v23._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      uint64_t v24 = v29;
      unint64_t v21 = v30;
    }
    else
    {
      uint64_t v24 = 1397967181;
    }
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v21, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C8F83000, v18, v19, "PegasusCacheManager : Fetched POMMES response for key=\"%s\" : %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v27, -1, -1);
    MEMORY[0x1CB77E470](v20, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  id v25 = v31;
  id v26 = v31;
  a6(v25);
}

uint64_t PegasusCacheManager.store(siriRequestId:pegasusResponse:pommesResponse:waitFor:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v39 = a7;
  uint64_t v40 = a6;
  id v34 = a4;
  uint64_t v35 = a5;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ResponseCacheControl();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  os_log_type_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  os_log_type_t v19 = (char *)v32 - v18;
  MEMORY[0x1F4188790](v17);
  unint64_t v21 = (char *)v32 - v20;
  int v22 = specialized static PegasusCacheManager.checkUserDefaultDisableCache(key:)(0xD00000000000001ELL, 0x80000001C919DCA0);
  v32[1] = a3;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  LOBYTE(a3) = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasResponseCacheControl.getter();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v19, v21, v12);
  uint64_t v33 = v9;
  if (a3)
  {
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.responseCacheControl.getter();
    int v23 = Apple_Parsec_Siri_V2alpha_ResponseCacheControl.canCacheDomainResponse.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v24 = *(void (**)(char *, uint64_t))(v13 + 8);
    v24(v19, v12);
    if (((v23 | v22) & 1) == 0)
    {
LABEL_3:
      if (one-time initialization token for pommes != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
      id v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl(&dword_1C8F83000, v26, v27, "PegasusCacheManager : Pegasus response is not cacheable", v28, 2u);
        MEMORY[0x1CB77E470](v28, -1, -1);
      }

      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v24 = *(void (**)(char *, uint64_t))(v13 + 8);
    v24(v19, v12);
    if ((v22 & 1) == 0) {
      goto LABEL_3;
    }
  }
  specialized static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:)(v36, v37, *(void **)(v38 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_experimentationAnalyticsManager));
  if ((PegasusCacheManager.cachingEnabled.getter() & 1) == 0
    || (specialized static PegasusCacheManager.checkUserDefaultDisableCache(key:)(0xD000000000000019, 0x80000001C919DCC0) & 1) != 0)
  {
LABEL_11:
    ((void (*)(void, void))v40)(0, 0);
    return ((uint64_t (*)(char *, uint64_t))v24)(v21, v12);
  }
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.responseCacheControl.getter();
  v24(v16, v12);
  int v30 = Apple_Parsec_Siri_V2alpha_ResponseCacheControl.ttl.getter();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v8);
  if (v22) {
    int v31 = 1209600;
  }
  else {
    int v31 = v30;
  }
  if (v30 > 0) {
    int v31 = v30;
  }
  PegasusCacheManager.store_internal(ttl:response:waitFor:completion:)(v34, v35, v40, v39, (double)v31);
  return ((uint64_t (*)(char *, uint64_t))v24)(v21, v12);
}

uint64_t PegasusCacheManager.store(ttl:response:waitFor:completion:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, double a5)
{
  if ((*(unsigned char *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled) & 1) == 0)
  {
    os_log_type_t v11 = *(void **)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
    uint64_t v12 = (void *)MEMORY[0x1CB77CA90](0x635F656C62616E65, 0xEE00676E69686361);
    uint64_t v13 = (void *)MEMORY[0x1CB77CA90](0xD000000000000018, 0x80000001C919BF10);
    id v14 = objc_msgSend(v11, sel_levelForFactor_withNamespaceName_, v12, v13);

    if (!v14) {
      return ((uint64_t (*)(void, void))a3)(0, 0);
    }
    unsigned int v15 = objc_msgSend(v14, sel_BOOLeanValue);

    if (!v15) {
      return ((uint64_t (*)(void, void))a3)(0, 0);
    }
  }
  if (specialized static PegasusCacheManager.checkUserDefaultDisableCache(key:)(0xD000000000000019, 0x80000001C919DCC0))return ((uint64_t (*)(void, void))a3)(0, 0); {

  }
  return PegasusCacheManager.store_internal(ttl:response:waitFor:completion:)(a1, a2, a3, a4, a5);
}

uint64_t PegasusCacheManager.store_internal(ttl:response:waitFor:completion:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, double a5)
{
  if ((PommesResponse.isCachedResponse.getter() & 1) != 0 || a5 <= 1.0) {
    return ((uint64_t (*)(void, void))a3)(0, 0);
  }
  uint64_t v66 = a2;
  uint64_t v69 = v5;
  uint64_t v11 = *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_utteranceNormalizer);
  uint64_t v12 = *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_utteranceNormalizer + 8);
  unsigned int v72 = a3;
  uint64_t v13 = *(uint64_t (**)(uint64_t))((char *)v5
                                          + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_utteranceNormalizer
                                          + 16);
  aBlocuint64_t k = v11;
  uint64_t v78 = v12;
  uint64_t v79 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = PommesResponse.searchRequestUtterance.getter();
  Swift::String v15 = UtteranceNormalizer.normalize(_:preserveCase:)(v14, 0);
  uint64_t countAndFlagsBits = v15._countAndFlagsBits;
  unint64_t object = v15._object;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v73 = (char *)PommesResponse.metadataDomainName.getter();
  unint64_t v17 = v16;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v70 = &v62;
  uint64_t v75 = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  MEMORY[0x1F4188790](v21);
  static Date.now.getter();
  Date.init(timeInterval:since:)();
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v23 = v22;
  unint64_t v24 = v17;
  uint64_t v25 = v69;
  uint64_t v67 = (uint64_t *)PegasusCacheManager.processResponse(domain:response:)((uint64_t)v73, v24, a1);
  uint64_t v26 = swift_bridgeObjectRelease();
  uint64_t v68 = &v62;
  MEMORY[0x1F4188790](v26);
  os_log_type_t v27 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  uint64_t v73 = v27;
  v28(v27, v27, v18);
  unint64_t v29 = (*(unsigned __int8 *)(v19 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v30 = (v20 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  int v31 = (char *)swift_allocObject();
  unint64_t v32 = v67;
  *((void *)v31 + 2) = v25;
  *((void *)v31 + 3) = v32;
  *((void *)v31 + 4) = v23;
  uint64_t v33 = v75;
  id v34 = object;
  *((void *)v31 + 5) = countAndFlagsBits;
  *((void *)v31 + 6) = v34;
  uint64_t countAndFlagsBits = v19;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v31[v29], v27, v33);
  *(void *)&v31[v30] = a1;
  uint64_t v35 = &v31[(v30 + 15) & 0xFFFFFFFFFFFFFFF8];
  *(void *)uint64_t v35 = v72;
  *((void *)v35 + 1) = a4;
  swift_retain();
  unsigned int v72 = v32;
  id v36 = a1;
  swift_retain();
  char v37 = specialized static PegasusCacheManager.checkUserDefaultDisableCache(key:)(0x6361437265676165, 0xEF65726F74536568);
  unint64_t object = *(void **)((char *)v25 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue);
  if (v37)
  {
    unint64_t v81 = partial apply for closure #1 in PegasusCacheManager.store_internal(ttl:response:waitFor:completion:);
    unint64_t v82 = v31;
    aBlocuint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v78 = 1107296256;
    uint64_t v79 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v80 = &block_descriptor_57;
    uint64_t v38 = _Block_copy(&aBlock);
    uint64_t v68 = (uint64_t *)type metadata accessor for DispatchQoS();
    uint64_t v69 = &v62;
    uint64_t v39 = *(v68 - 1);
    MEMORY[0x1F4188790](v68);
    uint64_t v41 = (char *)&v62 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v42 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v67 = &v62;
    uint64_t v43 = *(void *)(v42 - 8);
    MEMORY[0x1F4188790](v42);
    uint64_t v45 = (char *)&v62 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v76 = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAF40]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1CB77D180](0, v41, v45, v38);
    _Block_release(v38);

    swift_release();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
    (*(void (**)(char *, uint64_t *))(v39 + 8))(v41, v68);
  }
  else
  {
    uint64_t v47 = type metadata accessor for DispatchTime();
    uint64_t v69 = &v62;
    uint64_t v65 = v47;
    uint64_t v48 = *(void *)(v47 - 8);
    uint64_t v49 = MEMORY[0x1F4188790](v47);
    uint64_t v51 = (char *)&v62 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x1F4188790](v49);
    uint64_t v53 = (char *)&v62 - v52;
    static DispatchTime.now()();
    MEMORY[0x1CB77C970](v53, v66);
    uint64_t v54 = *(uint64_t **)(v48 + 8);
    uint64_t v66 = v48 + 8;
    uint64_t v67 = v54;
    ((void (*)(char *, uint64_t))v54)(v53, v47);
    uint64_t v64 = type metadata accessor for DispatchQoS();
    uint64_t v68 = &v62;
    uint64_t v63 = *(void *)(v64 - 8);
    MEMORY[0x1F4188790](v64);
    uint64_t v56 = (char *)&v62 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
    static DispatchQoS.background.getter();
    unint64_t v81 = partial apply for closure #1 in PegasusCacheManager.store_internal(ttl:response:waitFor:completion:);
    unint64_t v82 = v31;
    aBlocuint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v78 = 1107296256;
    uint64_t v79 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v80 = &block_descriptor_54;
    int v57 = _Block_copy(&aBlock);
    uint64_t v58 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v62 = (uint64_t)&v62;
    uint64_t v59 = *(void *)(v58 - 8);
    MEMORY[0x1F4188790](v58);
    unint64_t v61 = (char *)&v62 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v76 = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1F41AAF40]);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1CB77D140](v51, v56, v61, v57);
    _Block_release(v57);

    swift_release();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v58);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v56, v64);
    ((void (*)(char *, uint64_t))v67)(v51, v65);
  }
  (*(void (**)(char *, uint64_t))(countAndFlagsBits + 8))(v73, v75);
  return swift_release();
}

uint64_t closure #1 in PegasusCacheManager.store_internal(ttl:response:waitFor:completion:)(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t), uint64_t a8, double a9)
{
  uint64_t v64 = a8;
  uint64_t v60 = a3;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v63 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v19 + 128))(v17) & 1) == 0) {
    (*(void (**)(uint64_t, void))(*(void *)v19 + 136))(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath, *(unsigned int *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_dbFlags));
  }
  int v20 = (*(uint64_t (**)(void *, double))(*(void *)v19 + 152))(a2, a9);
  uint64_t v62 = a6;
  int v61 = v20;
  uint64_t v59 = a7;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v58 = &v54;
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, a5, v22);
  swift_bridgeObjectRetain_n();
  id v26 = a2;
  os_log_type_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  int v29 = v28;
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v30 = swift_slowAlloc();
    int v57 = v29;
    uint64_t v31 = v30;
    uint64_t v56 = swift_slowAlloc();
    v66[0] = v56;
    *(_DWORD *)uint64_t v31 = 136315650;
    os_log_t v55 = v27;
    swift_bridgeObjectRetain();
    uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, a4, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v31 + 12) = 2080;
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1F418BA90]);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    *(_WORD *)(v31 + 22) = 2080;
    id v34 = v26;
    id v35 = objc_msgSend(v34, sel_description);
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;

    uint64_t v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    os_log_t v39 = v55;
    _os_log_impl(&dword_1C8F83000, v55, (os_log_type_t)v57, "PegasusCacheManager : Store POMMES response key=\"%s\" expiration=%s : %s", (uint8_t *)v31, 0x20u);
    uint64_t v40 = v56;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v40, -1, -1);
    MEMORY[0x1CB77E470](v31, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  }
  uint64_t v41 = v59;
  uint64_t v42 = (uint64_t)v63;
  uint64_t v43 = type metadata accessor for Date();
  uint64_t v44 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v46 = (char *)&v54 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  double v48 = v47;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v43);
  uint64_t v49 = PommesResponse.requestId.getter();
  uint64_t v51 = v50;
  PommesResponse.pommesCandidateId.getter();
  uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)v19 + 176))(v49, v51, v42, 1, v48);
  outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for PommesCandidateId?);
  swift_bridgeObjectRelease();
  return v41(v61 & 1, v52);
}

void PegasusCacheManager.deleteCache(requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v23 = a4;
  uint64_t v22 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7 - 8);
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled)) {
    goto LABEL_4;
  }
  uint64_t v10 = *(void **)(v4 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
  uint64_t v11 = (void *)MEMORY[0x1CB77CA90](0x635F656C62616E65, 0xEE00676E69686361);
  uint64_t v12 = (void *)MEMORY[0x1CB77CA90](0xD000000000000018, 0x80000001C919BF10);
  id v13 = objc_msgSend(v10, sel_levelForFactor_withNamespaceName_, v11, v12);

  if (v13)
  {
    unsigned int v14 = objc_msgSend(v13, sel_BOOLeanValue);

    if (v14)
    {
LABEL_4:
      Swift::String v15 = *(NSObject **)(v4 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue);
      outlined init with copy of MediaUserStateCenter?(a3, (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PommesCandidateId?);
      unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v17 = (void *)swift_allocObject();
      uint64_t v18 = v22;
      v17[2] = v4;
      v17[3] = v18;
      v17[4] = a2;
      outlined init with take of PommesSearchReason?((uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v17 + v16, &demangling cache variable for type metadata for PommesCandidateId?);
      *(_DWORD *)((char *)v17 + ((v9 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL)) = v23;
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = partial apply for closure #1 in PegasusCacheManager.deleteCache(requestId:pommesCandidateId:reason:);
      *(void *)(v19 + 24) = v17;
      aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
      aBlock[5] = v19;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      void aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t aBlock[3] = &block_descriptor_22;
      int v20 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v15, v20);
      _Block_release(v20);
      LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (v15) {
        __break(1u);
      }
    }
  }
}

void closure #1 in PegasusCacheManager.deleteCache(requestId:pommesCandidateId:reason:)(uint64_t a1)
{
  (*(void (**)(uint64_t))(**(void **)(a1
                                                + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache)
                                  + 168))(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C8F83000, oslog, v2, "PegasusCacheManager : responseCache successfully purged", v3, 2u);
    MEMORY[0x1CB77E470](v3, -1, -1);
  }
}

void PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v11 - 8);
  if (*(unsigned char *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled)) {
    goto LABEL_4;
  }
  unsigned int v14 = *(void **)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
  uint64_t v30 = v12;
  uint64_t v15 = a3;
  uint64_t v16 = a2;
  uint64_t v17 = a1;
  int v18 = a4;
  uint64_t v19 = (void *)MEMORY[0x1CB77CA90](0x635F656C62616E65, 0xEE00676E69686361);
  int v20 = (void *)MEMORY[0x1CB77CA90](0xD000000000000018, 0x80000001C919BF10);
  id v21 = objc_msgSend(v14, sel_levelForFactor_withNamespaceName_, v19, v20);

  a4 = v18;
  a1 = v17;
  a2 = v16;
  a3 = v15;
  uint64_t v12 = v30;

  if (v21)
  {
    unsigned int v22 = objc_msgSend(v21, sel_BOOLeanValue);

    if (v22)
    {
LABEL_4:
      int v23 = *(NSObject **)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue);
      outlined init with copy of MediaUserStateCenter?(a3, (uint64_t)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PommesCandidateId?);
      unint64_t v24 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = v5;
      *(double *)(v25 + 24) = a5;
      *(void *)(v25 + 32) = a1;
      *(void *)(v25 + 40) = a2;
      outlined init with take of PommesSearchReason?((uint64_t)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v25 + v24, &demangling cache variable for type metadata for PommesCandidateId?);
      *(_DWORD *)(v25 + ((v13 + v24 + 3) & 0xFFFFFFFFFFFFFFFCLL)) = a4;
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = partial apply for closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:);
      *(void *)(v26 + 24) = v25;
      aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      void aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t aBlock[3] = &block_descriptor_32;
      os_log_type_t v27 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v23, v27);
      _Block_release(v27);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        __break(1u);
      }
    }
  }
}

unsigned char *closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  LOBYTE(v18) = 0;
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache);
  if (((*(uint64_t (**)(void))(*(void *)v12 + 128))() & 1) == 0)
  {
    (*(void (**)(uint64_t, void))(*(void *)v12 + 136))(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath, *(unsigned int *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_dbFlags));
    LOBYTE(v18) = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)v12 + 176))(a2, a3, a4, a5, a6);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
  unsigned int v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1C8F83000, v14, v15, "PegasusCacheManager : responseCache successfully purged expired entries", v16, 2u);
    MEMORY[0x1CB77E470](v16, -1, -1);
  }

  return $defer #1 () in closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(&v18, a1);
}

void PegasusCacheManager.purge(response:reason:)(void *a1, int a2)
{
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled)) {
    goto LABEL_4;
  }
  uint64_t v5 = *(void **)(v2 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
  uint64_t v6 = (void *)MEMORY[0x1CB77CA90](0x635F656C62616E65, 0xEE00676E69686361);
  uint64_t v7 = (void *)MEMORY[0x1CB77CA90](0xD000000000000018, 0x80000001C919BF10);
  id v8 = objc_msgSend(v5, sel_levelForFactor_withNamespaceName_, v6, v7);

  if (v8)
  {
    unsigned int v9 = objc_msgSend(v8, sel_BOOLeanValue);

    if (v9)
    {
LABEL_4:
      uint64_t v10 = *(NSObject **)(v2 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue);
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v2;
      *(void *)(v11 + 24) = a1;
      *(_DWORD *)(v11 + 32) = a2;
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = partial apply for closure #1 in PegasusCacheManager.purge(response:reason:);
      *(void *)(v12 + 24) = v11;
      v16[4] = thunk for @callee_guaranteed () -> ()partial apply;
      void v16[5] = v12;
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 1107296256;
      v16[2] = thunk for @escaping @callee_guaranteed () -> ();
      v16[3] = &block_descriptor_42;
      uint64_t v13 = _Block_copy(v16);
      swift_retain();
      id v14 = a1;
      swift_retain();
      swift_release();
      dispatch_sync(v10, v13);
      _Block_release(v13);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        __break(1u);
      }
    }
  }
}

unsigned char *closure #1 in PegasusCacheManager.purge(response:reason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(v12) = 0;
  uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache);
  if (((*(uint64_t (**)(void))(*(void *)v6 + 128))() & 1) == 0)
  {
    (*(void (**)(uint64_t, void))(*(void *)v6 + 136))(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath, *(unsigned int *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_dbFlags));
    LOBYTE(v12) = 1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 184))(a2, a3);
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_1C8F83000, v8, v9, "PegasusCacheManager : responseCache successfully purged response", v10, 2u);
    MEMORY[0x1CB77E470](v10, -1, -1);
  }

  return $defer #1 () in closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(&v12, a1);
}

unsigned char *$defer #1 () in closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(unsigned char *result, uint64_t a2)
{
  if (*result == 1) {
    return (unsigned char *)(*(uint64_t (**)(void))(**(void **)(a2
  }
                                                       + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache)
                                         + 144))();
  return result;
}

void one-time initialization function for triggerCodePathUUID()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F29120]);
  uint64_t v1 = (void *)MEMORY[0x1CB77CA90](0xD000000000000024, 0x80000001C919DEB0);
  id v2 = objc_msgSend(v0, sel_initWithUUIDString_, v1);

  static PegasusCacheManager.triggerCodePathUUID = (uint64_t)v2;
}

uint64_t closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_log_type_t v9 = (uint64_t (*)(uint64_t, void *))((int)*MEMORY[0x1E4F472C8] + MEMORY[0x1E4F472C8]);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 56) = v7;
  void *v7 = v5;
  v7[1] = closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:);
  return v9(a5, &outlined read-only object #0 of closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:));
}

uint64_t closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  id v8 = (void *)v0[8];
  if (v7)
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    os_log_type_t v15 = v10;
    *(_DWORD *)os_log_type_t v9 = 136315138;
    swift_getErrorValue();
    uint64_t v11 = Error.localizedDescription.getter();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C8F83000, v5, v6, "PegasusCacheManager : Failed to cache Trial experiment with error=%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v10, -1, -1);
    MEMORY[0x1CB77E470](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  unsigned char v7[8] = a5;
  return MEMORY[0x1F4188298](closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:), 0, 0);
}

uint64_t closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:)()
{
  uint64_t v1 = v0[8];
  if (!v1) {
    goto LABEL_10;
  }
  uint64_t v2 = v0[7];
  id v3 = objc_allocWithZone(MEMORY[0x1E4F29120]);
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)MEMORY[0x1CB77CA90](v2, v1);
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithUUIDString_, v4);
  v0[11] = v5;

  if (v5)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    v0[12] = __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v9 = 0;
      _os_log_impl(&dword_1C8F83000, v7, v8, "PegasusCacheManager : Emitting Trigger Log", v9, 2u);
      MEMORY[0x1CB77E470](v9, -1, -1);
    }

    os_log_type_t v15 = (uint64_t (*)(uint64_t, id))((int)*MEMORY[0x1E4F472C0] + MEMORY[0x1E4F472C0]);
    id v10 = v5;
    uint64_t v11 = (void *)swift_task_alloc();
    v0[13] = v11;
    *uint64_t v11 = v0;
    v11[1] = closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:);
    uint64_t v12 = v0[10];
    return v15(v12, v5);
  }
  else
  {
LABEL_10:
    id v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v3 = closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:);
  }
  else
  {

    id v3 = closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t (*v12)(void);
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v16 = v0;
  uint64_t v1 = *(void **)(v0 + 112);

  uint64_t v2 = v1;
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  id v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 112);
    id v14 = *(void **)(v0 + 88);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v8 = swift_slowAlloc();
    os_log_type_t v15 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_getErrorValue();
    os_log_type_t v9 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C8F83000, v4, v5, "PegasusCacheManager : Failed to emit trigger log with error=%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v8, -1, -1);
    MEMORY[0x1CB77E470](v7, -1, -1);
  }
  else
  {
    uint64_t v11 = *(void **)(v0 + 112);
  }
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

unint64_t PegasusCacheManager.secondsSinceLastMaintenanceStarted(from:userDefaults:)(uint64_t a1, void *a2)
{
  if (!a2)
  {
    long long v32 = 0u;
    long long v33 = 0u;
LABEL_9:
    outlined destroy of MediaUserStateCenter?((uint64_t)&v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_20;
  }
  id v3 = (void *)MEMORY[0x1CB77CA90](0xD00000000000001ALL, 0x80000001C919DCE0);
  id v4 = objc_msgSend(a2, sel_valueForKey_, v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  outlined init with take of PommesSearchReason?((uint64_t)&v30, (uint64_t)&v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!*((void *)&v33 + 1)) {
    goto LABEL_9;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)&v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  os_log_type_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)MEMORY[0x1CB77CA90](0xD00000000000001ALL, 0x80000001C919DCE0);
  id v13 = objc_msgSend(a2, sel_objectForKey_, v12);

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  outlined init with take of PommesSearchReason?((uint64_t)&v30, (uint64_t)&v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((void *)&v33 + 1))
  {
    int v14 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, v14 ^ 1u, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
      if ((static Date.< infix(_:_:)() & 1) == 0)
      {
        if (one-time initialization token for pommes == -1)
        {
LABEL_27:
          uint64_t v26 = type metadata accessor for Logger();
          __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
          os_log_type_t v27 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v27, v28))
          {
            uint64_t v29 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v29 = 0;
            _os_log_impl(&dword_1C8F83000, v27, v28, "PegasusCacheManager : Last maintenance started date is greater than now", v29, 2u);
            MEMORY[0x1CB77E470](v29, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          unsigned __int8 v19 = 1;
          uint64_t v18 = 0;
          goto LABEL_25;
        }
LABEL_33:
        swift_once();
        goto LABEL_27;
      }
      Date.timeIntervalSince(_:)();
      double v16 = v15;
      uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
      v6 += 8;
      v17(v8, v5);
      if ((~*(void *)&v16 & 0x7FF0000000000000) != 0)
      {
        if (v16 > -1.0)
        {
          if (v16 < 4294967300.0)
          {
            uint64_t v18 = v16;
            unsigned __int8 v19 = 0;
            goto LABEL_25;
          }
          goto LABEL_32;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v32, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v11, 1, 1, v5);
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for Date?);
LABEL_20:
  if (one-time initialization token for overrides != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.overrides);
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    int v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(void *)&long long v32 = v24;
    *(_DWORD *)int v23 = 136315138;
    *(void *)&long long v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x80000001C919DCE0, (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v21, v22, "PegasusCacheManager : No value for %s in UserDefaults", v23, 0xCu);
    unsigned __int8 v19 = 1;
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v24, -1, -1);
    MEMORY[0x1CB77E470](v23, -1, -1);

    uint64_t v18 = 0;
  }
  else
  {

    uint64_t v18 = 0;
    unsigned __int8 v19 = 1;
  }
LABEL_25:
  LOBYTE(v32) = v19;
  return v18 | ((unint64_t)v19 << 32);
}

void PegasusCacheManager.updateLastMaintenanceStartedTimestamp(with:userDefaults:)(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    MEMORY[0x1F4188790](v4 - 8);
    uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Date?);
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    Class isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    }
    uint64_t v10 = (void *)MEMORY[0x1CB77CA90](0xD00000000000001ALL, 0x80000001C919DCE0);
    objc_msgSend(a2, sel_setObject_forKey_, isa, v10);
    swift_unknownObjectRelease();
  }
}

uint64_t PegasusCacheManager.runMaintenanceActivity(_:)(_xpc_activity_s *a1)
{
  uint64_t v2 = v1;
  xpc_activity_t v55 = a1;
  uint64_t v3 = *(void *)(*(uint64_t *)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache)
                 + 16);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v54 = *(void **)(*(void *)(v4 - 8) + 64);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v56 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = (char *)v47 - v56;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v51 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v52 = v9;
  uint64_t v10 = (char *)v47 - v51;
  swift_retain();
  Date.init()();
  id v11 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  uint64_t v12 = (void *)MEMORY[0x1CB77CA90](0xD000000000000015, 0x80000001C919C770);
  id v13 = objc_msgSend(v11, sel_initWithSuiteName_, v12);

  uint64_t v14 = *v2;
  double v48 = *(uint64_t (**)(char *, id))(*v2 + 256);
  uint64_t v49 = v14 + 256;
  unint64_t v15 = v48(v10, v13);

  v47[0] = *(void *)(v8 + 8);
  v47[1] = v8 + 8;
  ((void (*)(char *, uint64_t))v47[0])(v10, v7);
  (*(void (**)(unint64_t))(*(void *)v3 + 200))(v15 | ((HIDWORD(v15) & 1) << 32));
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  unsigned __int8 v19 = *(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56);
  uint64_t v53 = v7;
  v19(v18, 0, 1, v7);
  id v20 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  unint64_t v50 = 0x80000001C919C770;
  id v21 = (void *)MEMORY[0x1CB77CA90](0xD000000000000015, 0x80000001C919C770);
  id v22 = objc_msgSend(v20, sel_initWithSuiteName_, v21);

  (*(void (**)(char *, id))(*v2 + 264))(v18, v22);
  outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for Date?);
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  os_log_type_t v27 = (char *)v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  os_log_type_t v28 = (char *)v47 - v56;
  unint64_t v56 = (unint64_t)v6;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v6, (uint64_t)v28, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v28, 1, v23) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v28, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
    long long v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      long long v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v32 = 0;
      _os_log_impl(&dword_1C8F83000, v30, v31, "PegasusCacheManager : Unable to log PommesCacheMaintenanceEnded because maintenanceStartedStreamUUID is missing", v32, 2u);
      MEMORY[0x1CB77E470](v32, -1, -1);
    }
  }
  else
  {
    uint64_t v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v24 + 32))(v27, v28, v23);
    uint64_t v54 = v47;
    MEMORY[0x1F4188790](v33);
    id v34 = (char *)v47 - v51;
    Date.init()();
    id v35 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
    uint64_t v36 = (void *)MEMORY[0x1CB77CA90](0xD000000000000015, v50);
    id v37 = objc_msgSend(v35, sel_initWithSuiteName_, v36);

    uint64_t v38 = v48(v34, v37);
    ((void (*)(char *, uint64_t))v47[0])(v34, v53);
    if ((v38 & 0x100000000) != 0) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = v38;
    }
    (*(void (**)(char *, void, void, uint64_t, uint64_t))(*(void *)v3 + 208))(v27, 0, 0, v39, 1);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  }
  if (xpc_activity_set_state(v55, 5))
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      uint64_t v44 = "PegasusCacheManager : Maintenance activity is marked as done";
LABEL_20:
      _os_log_impl(&dword_1C8F83000, v41, v42, v44, v43, 2u);
      MEMORY[0x1CB77E470](v43, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.pommes);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      uint64_t v44 = "PegasusCacheManager : Failed to set maintenance activity to done";
      goto LABEL_20;
    }
  }

  swift_release();
  return outlined destroy of MediaUserStateCenter?(v56, &demangling cache variable for type metadata for UUID?);
}

Swift::Bool __swiftcall PegasusCacheManager.registerMaintenanceActivity()()
{
  (*(void (**)(void))(*(void *)v0 + 296))();
  if ((PegasusCacheManager.cachingEnabled.getter() & 1) == 0
    || *(unsigned char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_prepopulate) != 1)
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    swift_retain();
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 67109376;
      LODWORD(v14[0]) = PegasusCacheManager.cachingEnabled.getter() & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 8) = 1024;
      LODWORD(v14[0]) = *(unsigned __int8 *)(v0
                                           + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_prepopulate);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1C8F83000, v11, v12, "PegasusCacheManager : Unable to register maintenance activity cachingEnabled=%{BOOL}d prepopulate=%{BOOL}d", (uint8_t *)v13, 0xEu);
      MEMORY[0x1CB77E470](v13, -1, -1);
    }
    else
    {

      swift_release();
    }
    return 0;
  }
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1C8F83000, v2, v3, "PegasusCacheManager : Registering maintenance activity", v4, 2u);
    MEMORY[0x1CB77E470](v4, -1, -1);
  }

  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v5, (const char *)*MEMORY[0x1E4F141D0], *MEMORY[0x1E4F14230]);
  xpc_dictionary_set_BOOL(v5, (const char *)*MEMORY[0x1E4F14300], 1);
  if (*MEMORY[0x1E4F14338])
  {
    Swift::Bool v7 = 1;
    xpc_dictionary_set_BOOL(v5, (const char *)*MEMORY[0x1E4F14338], 1);
    xpc_dictionary_set_string(v5, (const char *)*MEMORY[0x1E4F142C0], (const char *)*MEMORY[0x1E4F142D8]);
    uint64_t v8 = swift_allocObject();
    swift_weakInit();
    v14[4] = partial apply for closure #1 in PegasusCacheManager.registerMaintenanceActivity();
    v14[5] = v8;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1107296256;
    id v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed OS_xpc_object) -> ();
    v14[3] = &block_descriptor_46;
    uint64_t v9 = _Block_copy(v14);
    swift_release();
    xpc_activity_register("com.apple.siri.xpc_activity.siri-information-prepopulate-cache", v5, v9);
    _Block_release(v9);
    swift_unknownObjectRelease();
    return v7;
  }
  __break(1u);
  return result;
}

void closure #1 in PegasusCacheManager.registerMaintenanceActivity()(_xpc_activity_s *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = Strong;
    xpc_activity_state_t state = xpc_activity_get_state(a1);
    if (state)
    {
      if (state == 2)
      {
        if (!xpc_activity_set_state(a1, 4))
        {
          if (one-time initialization token for pommes != -1) {
            swift_once();
          }
          uint64_t v5 = type metadata accessor for Logger();
          __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
          uint64_t v6 = Logger.logObject.getter();
          os_log_type_t v7 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v6, v7))
          {
            uint64_t v8 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v8 = 0;
            _os_log_impl(&dword_1C8F83000, v6, v7, "PegasusCacheManager : Failed to set maintenance activity to continue", v8, 2u);
            MEMORY[0x1CB77E470](v8, -1, -1);
          }
        }
        if (one-time initialization token for pommes != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v10, v11))
        {
          os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v12 = 0;
          _os_log_impl(&dword_1C8F83000, v10, v11, "PegasusCacheManager : Running maintenance activity", v12, 2u);
          MEMORY[0x1CB77E470](v12, -1, -1);
        }

        (*(void (**)(_xpc_activity_s *))(*(void *)v3 + 272))(a1);
      }
      goto LABEL_27;
    }
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v20 = 0;
      _os_log_impl(&dword_1C8F83000, v18, v19, "PegasusCacheManager : Checking in maintenance activity", v20, 2u);
      MEMORY[0x1CB77E470](v20, -1, -1);
    }

    xpc_object_t v21 = xpc_activity_copy_criteria(a1);
    swift_unknownObjectRelease();
    if (v21) {
      goto LABEL_27;
    }
    xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v22, (const char *)*MEMORY[0x1E4F141D0], *MEMORY[0x1E4F14230]);
    xpc_dictionary_set_BOOL(v22, (const char *)*MEMORY[0x1E4F14300], 1);
    if (*MEMORY[0x1E4F14338])
    {
      xpc_dictionary_set_BOOL(v22, (const char *)*MEMORY[0x1E4F14338], 1);
      xpc_dictionary_set_string(v22, (const char *)*MEMORY[0x1E4F142C0], (const char *)*MEMORY[0x1E4F142D8]);
      xpc_activity_set_criteria(a1, v22);
      swift_unknownObjectRelease();
LABEL_27:
      swift_release();
      return;
    }
    __break(1u);
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1C8F83000, v14, v15, "PegasusCacheManager : Unable to register activity because PegasusCacheManager has not been instantiated", v16, 2u);
      MEMORY[0x1CB77E470](v16, -1, -1);
    }
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed OS_xpc_object) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall PegasusCacheManager.unregisterMaintenanceActivity()()
{
  if (one-time initialization token for pommes != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.pommes);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1C8F83000, v1, v2, "PegasusCacheManager : Unregistering maintenance activity", v3, 2u);
    MEMORY[0x1CB77E470](v3, -1, -1);
  }

  xpc_activity_unregister("com.apple.siri.xpc_activity.siri-information-prepopulate-cache");
}

uint64_t PegasusCacheManager.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PegasusCacheManager.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void specialized static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for triggerCodePathUUID != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)static PegasusCacheManager.triggerCodePathUUID;
  if (static PegasusCacheManager.triggerCodePathUUID)
  {
    uint64_t v7 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
    uint64_t v8 = (void *)swift_allocObject();
    id v8[2] = 0;
    v8[3] = 0;
    v8[4] = a1;
    _OWORD v8[5] = v6;
    v8[6] = v1;
    id v9 = v6;
    id v10 = a1;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:), (uint64_t)v8);
    swift_release();
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
    os_log_t v16 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1C8F83000, v16, v12, "PegasusCacheManager : Failed to cache Trial experiment because triggerCodePathUUID is nil", v13, 2u);
      MEMORY[0x1CB77E470](v13, -1, -1);
    }
    os_log_t v14 = v16;
  }
}

unsigned char *specialized PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, void *a7, int a8)
{
  id v9 = v8;
  int v52 = a6;
  int v53 = a8;
  uint64_t v55 = a2;
  unint64_t v56 = a7;
  int v50 = a5;
  uint64_t v51 = a3;
  uint64_t v54 = a1;
  uint64_t v10 = *v8;
  uint64_t v48 = a4;
  uint64_t v49 = v10;
  uint64_t v11 = OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache;
  type metadata accessor for ResponseCache();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 24) = 0;
  type metadata accessor for AnalyticsComponentIdGenerator();
  uint64_t v13 = swift_allocObject();
  type metadata accessor for PommesCacheInstrumentationUtil();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = v13;
  *(void *)(v12 + 16) = v14;
  *(void *)&v9[v11] = v12;
  uint64_t v15 = OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_experimentationAnalyticsManager;
  *(void *)&v9[v15] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  uint64_t v16 = OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue;
  type metadata accessor for OS_dispatch_queue();
  uint64_t v17 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  id v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E4FBCB40], v17);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v21 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v22);
  uint64_t v57 = MEMORY[0x1E4FBC860];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1F41AB0A0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  uint64_t v23 = v48;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  MEMORY[0x1F4188790](v24);
  (*(void (**)(char *, void))(v26 + 104))((char *)&v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4FBCC50]);
  *(void *)&v9[v16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v27 = type metadata accessor for URL();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  long long v30 = (char *)&v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v31 - 8);
  uint64_t v33 = (char *)&v47 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(v23, (uint64_t)v33, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v33, 1, v27) == 1)
  {
    static PegasusCacheManager.defaultDirectoryPath.getter();
    outlined destroy of MediaUserStateCenter?((uint64_t)v33, &demangling cache variable for type metadata for URL?);
    (*(void (**)(unsigned char *, char *, uint64_t))(v28 + 32))(&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath], v30, v27);
  }
  else
  {
    id v34 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    v34(v30, v33, v27);
    v34(&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath], v30, v27);
  }
  *(_DWORD *)&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_dbFlags] = v50;
  *(void *)&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_domainCacheHandlers] = v51;
  v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled] = v52 & 1;
  uint64_t v36 = v55;
  id v35 = v56;
  *(void *)&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient] = v56;
  v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_prepopulate] = v53 & 1;
  uint64_t v37 = v54;
  uint64_t v38 = specialized static UtteranceNormalizer.getTriggerPhrases(locale:)(v54, v36);
  uint64_t v39 = (uint64_t *)&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_utteranceNormalizer];
  *uint64_t v39 = v37;
  v39[1] = v36;
  uint64_t v39[2] = (uint64_t)v38;
  id v40 = v35;
  uint64_t v41 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v41)
  {
    os_log_type_t v42 = v41;
    if (*MEMORY[0x1E4F4E6B8]) {
      CFNotificationCenterAddObserver(v41, v9, (CFNotificationCallback)@objc closure #1 in variable initialization expression of static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback, (CFStringRef)*MEMORY[0x1E4F4E6B8], 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }
  uint64_t v43 = *(void **)&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient];
  id v44 = *(id *)&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_experimentationAnalyticsManager];
  id v45 = v43;
  specialized static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:)(v44);

  (*(void (**)(void))(*(void *)v9 + 288))();
  outlined destroy of MediaUserStateCenter?(v23, &demangling cache variable for type metadata for URL?);
  return v9;
}

uint64_t sub_1C902DFD0()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in PegasusCacheManager.prepare()()
{
  return closure #1 in PegasusCacheManager.prepare()();
}

uint64_t partial apply for closure #1 in PegasusCacheManager.reset()()
{
  return closure #1 in PegasusCacheManager.reset()(v0);
}

uint64_t sub_1C902E018()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t specialized static PegasusCacheManager.checkUserDefaultDisableCache(key:)(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone(MEMORY[0x1E4F1CB20]);
  uint64_t v5 = (void *)MEMORY[0x1CB77CA90](0xD000000000000010, 0x80000001C919CF50);
  id v6 = objc_msgSend(v4, sel_initWithSuiteName_, v5);

  if (!v6) {
    return 0;
  }
  uint64_t v7 = (void *)MEMORY[0x1CB77CA90](a1, a2);
  unsigned int v8 = objc_msgSend(v6, sel_BOOLForKey_, v7);

  if (!v8) {
    return 0;
  }
  if (one-time initialization token for overrides != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.overrides);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v16 = v13;
    *(_DWORD *)uint64_t v12 = 136315650;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x80000001C919CF50, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 22) = 1024;
    uint64_t v14 = 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C8F83000, v10, v11, "PegasusCacheManager : User default %s/%s=%{BOOL}d", (uint8_t *)v12, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v13, -1, -1);
    MEMORY[0x1CB77E470](v12, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    return 1;
  }
  return v14;
}

uint64_t sub_1C902E2C4()
{
  uint64_t v1 = (int *)type metadata accessor for PommesSearchRequest(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  type metadata accessor for PommesSearchRequest.ParseState(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v5
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                   + 64);
      uint64_t v12 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v13 = *(void *)(v12 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
      }
      swift_bridgeObjectRelease();
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = v5
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                   + 64);
      uint64_t v15 = type metadata accessor for TCUMappedNLResponse();
      uint64_t v16 = *(void *)(v15 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
      }
      break;
    case 0:
      uint64_t v30 = v4;
      swift_bridgeObjectRelease();
      uint64_t v7 = v5
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                  + 48);
      swift_bridgeObjectRelease();
      uint64_t v8 = v7 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
      uint64_t v9 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v10 = *(void *)(v9 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      }
      swift_bridgeObjectRelease();
      uint64_t v4 = v30;
      break;
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = v5 + v1[6];
  uint64_t v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  uint64_t v19 = *(void *)(v18 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = v5 + v1[10];
  uint64_t v21 = type metadata accessor for PommesContext();
  uint64_t v22 = *(void *)(v21 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21)) {
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  }
  uint64_t v23 = v5 + v1[11];
  uint64_t v24 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v25 = *(void *)(v24 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24)) {
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
  }
  swift_release();
  uint64_t v26 = v5 + v1[14];
  uint64_t v27 = type metadata accessor for InputOrigin();
  uint64_t v28 = *(void *)(v27 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27)) {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

void partial apply for closure #1 in PegasusCacheManager.fetch(request:domainWarmup:completion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for PommesSearchRequest(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = *(void *)(v0 + v4);
  unint64_t v8 = *(void *)(v0 + v4 + 8);
  uint64_t v9 = *(void (**)(id))(v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in PegasusCacheManager.fetch(request:domainWarmup:completion:)(v5, v0 + v2, v6, v7, v8, v9);
}

void specialized static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for triggerCodePathUUID != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)static PegasusCacheManager.triggerCodePathUUID;
  if (static PegasusCacheManager.triggerCodePathUUID)
  {
    uint64_t v10 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
    uint64_t v11 = (void *)swift_allocObject();
    void v11[2] = 0;
    v11[3] = 0;
    v11[4] = a1;
    v11[5] = a2;
    v11[6] = a3;
    v11[7] = v9;
    swift_bridgeObjectRetain();
    id v12 = a3;
    id v13 = v9;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:), (uint64_t)v11);
    swift_release();
  }
  else
  {
    if (one-time initialization token for pommes != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    os_log_t v19 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1C8F83000, v19, v15, "PegasusCacheManager : Failed to cache Trial experiment because triggerCodePathUUID is nil", v16, 2u);
      MEMORY[0x1CB77E470](v16, -1, -1);
    }
    os_log_t v17 = v19;
  }
}

uint64_t sub_1C902EB74()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for PommesCandidateId();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return MEMORY[0x1F4186498](v0, ((v4 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4, v2 | 7);
}

void partial apply for closure #1 in PegasusCacheManager.deleteCache(requestId:pommesCandidateId:reason:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v1 = *(void *)(v0 + 16);

  closure #1 in PegasusCacheManager.deleteCache(requestId:pommesCandidateId:reason:)(v1);
}

uint64_t sub_1C902ED48()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1C902ED58()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for PommesCandidateId();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return MEMORY[0x1F4186498](v0, ((v4 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4, v2 | 7);
}

unsigned char *partial apply for closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *((void *)v0 + 2);
  double v4 = v0[3];
  uint64_t v5 = *((void *)v0 + 4);
  uint64_t v6 = *((void *)v0 + 5);
  uint64_t v7 = *(unsigned int *)((char *)v0 + ((*(void *)(v1 + 64) + v2 + 3) & 0xFFFFFFFFFFFFFFFCLL));

  return closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(v3, v5, v6, (uint64_t)v0 + v2, v7, v4);
}

uint64_t sub_1C902EF30()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1C902EF40()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 36, 7);
}

unsigned char *partial apply for closure #1 in PegasusCacheManager.purge(response:reason:)()
{
  return closure #1 in PegasusCacheManager.purge(response:reason:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned int *)(v0 + 32));
}

uint64_t sub_1C902EF8C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in PegasusCacheManager.registerMaintenanceActivity()(_xpc_activity_s *a1)
{
}

uint64_t ObjC metadata update function for PegasusCacheManager()
{
  return type metadata accessor for PegasusCacheManager();
}

uint64_t type metadata accessor for PegasusCacheManager()
{
  uint64_t result = type metadata singleton initialization cache for PegasusCacheManager;
  if (!type metadata singleton initialization cache for PegasusCacheManager) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for PegasusCacheManager()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for PegasusCacheManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PegasusCacheManager);
}

uint64_t dispatch thunk of PegasusCacheManager.__allocating_init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of PegasusCacheManager.prepare()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of PegasusCacheManager.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of PegasusCacheManager.fetch(request:domainWarmup:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of PegasusCacheManager.store(siriRequestId:pegasusResponse:pommesResponse:waitFor:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of PegasusCacheManager.store(ttl:response:waitFor:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of PegasusCacheManager.deleteCache(requestId:pommesCandidateId:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of PegasusCacheManager.purge(response:reason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of PegasusCacheManager.secondsSinceLastMaintenanceStarted(from:userDefaults:)()
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 256))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of PegasusCacheManager.updateLastMaintenanceStartedTimestamp(with:userDefaults:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of PegasusCacheManager.runMaintenanceActivity(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of PegasusCacheManager.registerMaintenanceActivity()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of PegasusCacheManager.unregisterMaintenanceActivity()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t sub_1C902F33C()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release();

  return MEMORY[0x1F4186498](v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

uint64_t partial apply for closure #1 in PegasusCacheManager.store_internal(ttl:response:waitFor:completion:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *((void *)v0 + 2);
  uint64_t v5 = (void *)*((void *)v0 + 3);
  double v6 = v0[4];
  uint64_t v7 = *((void *)v0 + 5);
  unint64_t v8 = *((void *)v0 + 6);
  uint64_t v9 = (uint64_t)v0 + v2;
  uint64_t v10 = *(void *)((char *)v0 + v3);
  uint64_t v11 = (char *)v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v12 = *(uint64_t (**)(void, uint64_t))v11;
  uint64_t v13 = *((void *)v11 + 1);

  return closure #1 in PegasusCacheManager.store_internal(ttl:response:waitFor:completion:)(v4, v5, v7, v8, v9, v10, v12, v13, v6);
}

uint64_t sub_1C902F4F0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  *(_OWORD *)(v4 + 72) = v5;
  *(void *)(v4 + 56) = v2;
  *(void *)(v4 + 64) = v3;
  return MEMORY[0x1F4188298](closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:), 0, 0);
}

uint64_t sub_1C902F5FC()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  double v6 = (uint64_t (*)(uint64_t, void *))((int)*MEMORY[0x1E4F472C8] + MEMORY[0x1E4F472C8]);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[7] = v4;
  *uint64_t v4 = v3;
  v4[1] = closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:);
  return v6(v2, &outlined read-only object #0 of closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:));
}

uint64_t PommesAudioPluginResults.audioResults.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesAudioPluginResults.targetPlaylists.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesAudioPluginResults.__allocating_init(audioResults:targetPlaylists:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t PommesAudioPluginResults.init(audioResults:targetPlaylists:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t PommesAudioPluginResults.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PommesAudioPluginResults.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PommesAudioPluginResults()
{
  return self;
}

uint64_t method lookup function for PommesAudioPluginResults(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesAudioPluginResults);
}

uint64_t dispatch thunk of PommesAudioPluginResults.__allocating_init(audioResults:targetPlaylists:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

unint64_t PommesInsightRequestSummaryMessageDescription.rawValue.getter(char a1)
{
  unint64_t result = 0xD00000000000001ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000024;
      break;
    case 2:
      unint64_t result = 0xD000000000000021;
      break;
    case 3:
    case 8:
      unint64_t result = 0xD000000000000027;
      break;
    case 4:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000017;
      break;
    case 6:
      unint64_t result = 0xD000000000000018;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PommesInsightRequestSummaryMessageDescription(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = PommesInsightRequestSummaryMessageDescription.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == PommesInsightRequestSummaryMessageDescription.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PommesInsightRequestSummaryMessageDescription()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  PommesInsightRequestSummaryMessageDescription.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PommesInsightRequestSummaryMessageDescription()
{
  PommesInsightRequestSummaryMessageDescription.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PommesInsightRequestSummaryMessageDescription()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  PommesInsightRequestSummaryMessageDescription.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PommesInsightRequestSummaryMessageDescription@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized PommesInsightRequestSummaryMessageDescription.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PommesInsightRequestSummaryMessageDescription@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = PommesInsightRequestSummaryMessageDescription.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t one-time initialization function for pommesError(uint64_t a1)
{
  return one-time initialization function for pommesError(a1, static PommesInsightRequestSummaryKey.pommesError);
}

uint64_t PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor()
{
  return PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor(&one-time initialization token for pommesError, (uint64_t)static PommesInsightRequestSummaryKey.pommesError);
}

uint64_t static PommesInsightRequestSummaryKey.pommesError.getter@<X0>(uint64_t a1@<X8>)
{
  return static PommesInsightRequestSummaryKey.pommesError.getter(&one-time initialization token for pommesError, (uint64_t)static PommesInsightRequestSummaryKey.pommesError, a1);
}

uint64_t one-time initialization function for isFromTimeoutHandler(uint64_t a1)
{
  return one-time initialization function for pommesError(a1, static PommesInsightRequestSummaryKey.isFromTimeoutHandler);
}

uint64_t PommesInsightRequestSummaryKey.isFromTimeoutHandler.unsafeMutableAddressor()
{
  return PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor(&one-time initialization token for isFromTimeoutHandler, (uint64_t)static PommesInsightRequestSummaryKey.isFromTimeoutHandler);
}

uint64_t static PommesInsightRequestSummaryKey.isFromTimeoutHandler.getter@<X0>(uint64_t a1@<X8>)
{
  return static PommesInsightRequestSummaryKey.pommesError.getter(&one-time initialization token for isFromTimeoutHandler, (uint64_t)static PommesInsightRequestSummaryKey.isFromTimeoutHandler, a1);
}

uint64_t one-time initialization function for isRequestFinished(uint64_t a1)
{
  return one-time initialization function for pommesError(a1, static PommesInsightRequestSummaryKey.isRequestFinished);
}

uint64_t PommesInsightRequestSummaryKey.isRequestFinished.unsafeMutableAddressor()
{
  return PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor(one-time initialization token for isRequestFinished, (uint64_t)static PommesInsightRequestSummaryKey.isRequestFinished);
}

uint64_t static PommesInsightRequestSummaryKey.isRequestFinished.getter@<X0>(uint64_t a1@<X8>)
{
  return static PommesInsightRequestSummaryKey.pommesError.getter(one-time initialization token for isRequestFinished, (uint64_t)static PommesInsightRequestSummaryKey.isRequestFinished, a1);
}

uint64_t one-time initialization function for isRcFinished(uint64_t a1)
{
  return one-time initialization function for pommesError(a1, static PommesInsightRequestSummaryKey.isRcFinished);
}

uint64_t PommesInsightRequestSummaryKey.isRcFinished.unsafeMutableAddressor()
{
  return PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor(&one-time initialization token for isRcFinished, (uint64_t)static PommesInsightRequestSummaryKey.isRcFinished);
}

uint64_t static PommesInsightRequestSummaryKey.isRcFinished.getter@<X0>(uint64_t a1@<X8>)
{
  return static PommesInsightRequestSummaryKey.pommesError.getter(&one-time initialization token for isRcFinished, (uint64_t)static PommesInsightRequestSummaryKey.isRcFinished, a1);
}

uint64_t one-time initialization function for isMessagePosted(uint64_t a1)
{
  return one-time initialization function for pommesError(a1, static PommesInsightRequestSummaryKey.isMessagePosted);
}

uint64_t one-time initialization function for pommesError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for InsightRequestSummaryKey();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return InsightRequestSummaryKey.init(rawValue:)();
}

uint64_t PommesInsightRequestSummaryKey.isMessagePosted.unsafeMutableAddressor()
{
  return PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor(&one-time initialization token for isMessagePosted, (uint64_t)static PommesInsightRequestSummaryKey.isMessagePosted);
}

uint64_t PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for InsightRequestSummaryKey();

  return __swift_project_value_buffer(v3, a2);
}

uint64_t static PommesInsightRequestSummaryKey.isMessagePosted.getter@<X0>(uint64_t a1@<X8>)
{
  return static PommesInsightRequestSummaryKey.pommesError.getter(&one-time initialization token for isMessagePosted, (uint64_t)static PommesInsightRequestSummaryKey.isMessagePosted, a1);
}

uint64_t static PommesInsightRequestSummaryKey.pommesError.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for InsightRequestSummaryKey();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

unint64_t specialized PommesInsightRequestSummaryMessageDescription.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PommesInsightRequestSummaryMessageDescription.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type PommesInsightRequestSummaryMessageDescription and conformance PommesInsightRequestSummaryMessageDescription()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesInsightRequestSummaryMessageDescription and conformance PommesInsightRequestSummaryMessageDescription;
  if (!lazy protocol witness table cache variable for type PommesInsightRequestSummaryMessageDescription and conformance PommesInsightRequestSummaryMessageDescription)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesInsightRequestSummaryMessageDescription and conformance PommesInsightRequestSummaryMessageDescription);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PommesInsightRequestSummaryMessageDescription(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PommesInsightRequestSummaryMessageDescription(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9030110);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesInsightRequestSummaryMessageDescription()
{
  return &type metadata for PommesInsightRequestSummaryMessageDescription;
}

ValueMetadata *type metadata accessor for PommesInsightRequestSummaryKey()
{
  return &type metadata for PommesInsightRequestSummaryKey;
}

unint64_t static PlayRestOfThisAlbumPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD000000000000022;
}

uint64_t PlayRestOfThisAlbumPreflightClient.isPlayRestOfThisAlbumTask(task:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v20[3])
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for UsoTask_resume_common_MediaItem();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  swift_release();
  uint64_t v0 = byte_1F236EF28;
  uint64_t v1 = UsoTask.arguments.getter();
  uint64_t v2 = 0xEC00000073656974;
  uint64_t v3 = 0x69746E4572657375;
  switch(v0)
  {
    case 1:
      uint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x746567726174;
      if (*(void *)(v1 + 16)) {
        goto LABEL_9;
      }
      goto LABEL_23;
    case 2:
      uint64_t v2 = 0xE900000000000065;
      uint64_t v3 = 0x636E657265666572;
      goto LABEL_8;
    case 3:
      uint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x72656767697274;
      if (!*(void *)(v1 + 16)) {
        goto LABEL_23;
      }
      goto LABEL_9;
    default:
LABEL_8:
      if (!*(void *)(v1 + 16)) {
        goto LABEL_23;
      }
LABEL_9:
      unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
      if ((v5 & 1) == 0)
      {
LABEL_23:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v7 = MEMORY[0x1E4FBC860];
        if (MEMORY[0x1E4FBC860] >> 62) {
          goto LABEL_41;
        }
        goto LABEL_24;
      }
      unint64_t v6 = *(void *)(*(void *)(v1 + 56) + 8 * v4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = MEMORY[0x1E4FBC860];
      v20[0] = MEMORY[0x1E4FBC860];
      if (v6 >> 62) {
        goto LABEL_38;
      }
      uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v8) {
        goto LABEL_39;
      }
      break;
  }
LABEL_12:
  type metadata accessor for UsoEntity_common_MediaItem();
  if (v8 < 1)
  {
    __break(1u);
    JUMPOUT(0x1C9030550);
  }
  for (uint64_t i = 0; i != v8; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0) {
      MEMORY[0x1CB77D510](i, v6);
    }
    else {
      swift_retain();
    }
    dispatch thunk of UsoValue.getAsEntity()();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v10 = swift_release();
    if (v19)
    {
      MEMORY[0x1CB77CD90](v10);
      if (*(void *)((v20[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v20[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v18 = v20[0];
LABEL_40:
  swift_bridgeObjectRelease();
  v20[0] = v7;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v18);
  swift_bridgeObjectRelease();
  uint64_t v7 = v20[0];
  if ((unint64_t)v20[0] >> 62)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (!v11)
    {
LABEL_33:
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  else
  {
LABEL_24:
    uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_33;
    }
  }
  unint64_t v6 = 0;
  uint64_t v12 = 4;
  while (1)
  {
    uint64_t v13 = v12 - 4;
    if ((v7 & 0xC000000000000001) != 0)
    {
      uint64_t v14 = MEMORY[0x1CB77D510](v12 - 4, v7);
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v13, 1)) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v14 = *(void *)(v7 + 8 * v12);
      swift_retain();
      uint64_t v15 = v12 - 3;
      if (__OFADD__(v13, 1))
      {
LABEL_37:
        __break(1u);
LABEL_38:
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        if (!v8)
        {
LABEL_39:
          swift_bridgeObjectRelease();
          unint64_t v18 = MEMORY[0x1E4FBC860];
          goto LABEL_40;
        }
        goto LABEL_12;
      }
    }
    v20[0] = v14;
    char v16 = closure #1 in PlayRestOfThisAlbumPreflightClient.isPlayRestOfThisAlbumTask(task:)(v20);
    swift_release();
    if (v16) {
      break;
    }
    ++v12;
    if (v15 == v11) {
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t closure #1 in PlayRestOfThisAlbumPreflightClient.isPlayRestOfThisAlbumTask(task:)(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  uint64_t v50 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v45 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
  MEMORY[0x1F4188790](v48);
  uint64_t v51 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v47 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v54 = (uint64_t)&v45 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v49 = (char *)&v45 - v10;
  uint64_t v11 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v46 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1F4188790](v14);
  char v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)&v45 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v45 - v24;
  uint64_t v53 = *a1;
  uint64_t v26 = dispatch thunk of UsoEntity_common_MediaItem.mediaItemType.getter();
  uint64_t v52 = v2;
  if (v26)
  {
    dispatch thunk of UsoEntity_common_MediaItemType.definedValue.getter();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v25, 1, 1, v11);
  }
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v23, *MEMORY[0x1E4FA3570], v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, v11);
  uint64_t v27 = (uint64_t)&v16[*(int *)(v14 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v25, (uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v23, v27, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v28((uint64_t)v16, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v23, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v25, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v28(v27, 1, v11) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  outlined init with copy of MediaUserStateCenter?((uint64_t)v16, (uint64_t)v20, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v28(v27, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v23, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v25, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
LABEL_9:
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    goto LABEL_10;
  }
  uint64_t v30 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v46, v27, v11);
  lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E4FA3600]);
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v12 + 8);
  v32(v30, v11);
  outlined destroy of MediaUserStateCenter?((uint64_t)v23, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v25, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v32(v20, v11);
  outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v31)
  {
LABEL_12:
    if (dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter())
    {
      uint64_t v33 = (uint64_t)v49;
      dispatch thunk of UsoEntity_common_ReferenceType.definedValue.getter();
      swift_release();
      uint64_t v35 = (uint64_t)v51;
      uint64_t v34 = v52;
      uint64_t v36 = v50;
    }
    else
    {
      uint64_t v33 = (uint64_t)v49;
      uint64_t v36 = v50;
      uint64_t v34 = v52;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v49, 1, 1, v52);
      uint64_t v35 = (uint64_t)v51;
    }
    uint64_t v37 = v54;
    uint64_t v38 = v48;
    (*(void (**)(uint64_t, void, uint64_t))(v36 + 104))(v54, *MEMORY[0x1E4FA3638], v34);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v34);
    uint64_t v39 = v35 + *(int *)(v38 + 48);
    outlined init with copy of MediaUserStateCenter?(v33, v35, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    outlined init with copy of MediaUserStateCenter?(v37, v39, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    id v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
    if (v40(v35, 1, v34) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v33, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      if (v40(v39, 1, v34) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        char v29 = 1;
        return v29 & 1;
      }
    }
    else
    {
      uint64_t v41 = (uint64_t)v47;
      outlined init with copy of MediaUserStateCenter?(v35, (uint64_t)v47, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      if (v40(v39, 1, v34) != 1)
      {
        os_log_type_t v42 = v45;
        (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v45, v39, v34);
        lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues, MEMORY[0x1E4FA3640]);
        char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v43 = *(void (**)(char *, uint64_t))(v36 + 8);
        v43(v42, v34);
        outlined destroy of MediaUserStateCenter?(v54, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v33, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        v43(v47, v34);
        outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        return v29 & 1;
      }
      outlined destroy of MediaUserStateCenter?(v54, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v33, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v41, v34);
    }
    outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
    char v29 = 0;
    return v29 & 1;
  }
LABEL_10:
  char v29 = 0;
  return v29 & 1;
}

void PlayRestOfThisAlbumPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for PommesSearchReason();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v128 = (uint64_t)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v127 = (uint64_t)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v113 = *(void *)(v114 - 8);
  MEMORY[0x1F4188790](v114);
  uint64_t v112 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v125 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v115 = *(void *)(v116 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v116);
  uint64_t v111 = (char *)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v129 = (char *)&v109 - v16;
  uint64_t v143 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v17 = *(void *)(v143 - 8);
  MEMORY[0x1F4188790](v143);
  uint64_t v19 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v117 = (char *)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v140 = (char *)&v109 - v24;
  uint64_t v126 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v25 = *(int *)(v126 + 76);
  uint64_t v131 = a1;
  uint64_t v123 = v25;
  uint64_t v26 = *(void *)(a1 + v25);
  uint64_t v146 = MEMORY[0x1E4FBC860];
  uint64_t v132 = *(void *)(v26 + 16);
  uint64_t v124 = v21;
  if (v132)
  {
    uint64_t v118 = v7;
    uint64_t v119 = v5;
    uint64_t v110 = v6;
    uint64_t v122 = a2;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    uint64_t v27 = v21 + 16;
    uint64_t v135 = v26 + ((*(unsigned __int8 *)(v27 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 64));
    uint64_t v136 = v28;
    uint64_t v142 = v17 + 16;
    char v29 = (void (**)(char *, uint64_t))(v17 + 8);
    uint64_t v137 = v27;
    uint64_t v30 = *(void *)(v27 + 56);
    uint64_t v133 = (void (**)(char *, uint64_t))(v27 - 8);
    uint64_t v134 = v30;
    uint64_t v121 = v26;
    swift_bridgeObjectRetain_n();
    uint64_t v31 = 0;
    uint64_t v141 = MEMORY[0x1E4FBC840] + 8;
    uint64_t v32 = v140;
    uint64_t v33 = MEMORY[0x1E4FBC860];
    uint64_t v120 = v17;
    uint64_t v138 = v20;
    while (1)
    {
      uint64_t v139 = v31;
      v136(v32, v135 + v134 * v31, v20);
      uint64_t v34 = Siri_Nlu_External_Span.matcherNames.getter();
      v144[0] = v33;
      uint64_t v35 = *(void *)(v34 + 16);
      if (v35)
      {
        unint64_t v36 = v34 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
        uint64_t v37 = *(void *)(v17 + 72);
        uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 16);
        swift_bridgeObjectRetain();
        uint64_t v39 = v143;
        do
        {
          v38(v19, v36, v39);
          unint64_t v40 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
          (*v29)(v19, v39);
          specialized Array.append<A>(contentsOf:)(v40);
          uint64_t v39 = v143;
          v36 += v37;
          --v35;
        }
        while (v35);
        swift_bridgeObjectRelease_n();
        unint64_t v41 = v144[0];
        uint64_t v17 = v120;
        uint64_t v32 = v140;
        uint64_t v33 = MEMORY[0x1E4FBC860];
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v41 = v33;
      }
      uint64_t v145 = v33;
      if (!(v41 >> 62))
      {
        uint64_t v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v42) {
          break;
        }
        goto LABEL_20;
      }
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v42) {
        break;
      }
LABEL_20:
      swift_bridgeObjectRelease();
      unint64_t v44 = v33;
LABEL_21:
      uint64_t v20 = v138;
      uint64_t v45 = v139 + 1;
      (*v133)(v32, v138);
      unint64_t v46 = v44;
      uint64_t v31 = v45;
      specialized Array.append<A>(contentsOf:)(v46);
      if (v45 == v132)
      {
        swift_bridgeObjectRelease_n();
        unint64_t v47 = v146;
        a2 = v122;
        uint64_t v6 = v110;
        uint64_t v5 = v119;
        uint64_t v7 = v118;
        goto LABEL_26;
      }
    }
    if (v42 >= 1)
    {
      uint64_t v43 = 0;
      while (1)
      {
        swift_retain();
        static UsoTask_CodegenConverter.convert(task:)();
        if (v144[3])
        {
          type metadata accessor for UsoTask_resume_common_MediaItem();
          if (swift_dynamicCast())
          {
            swift_release();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            goto LABEL_14;
          }
        }
        else
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)v144, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
        swift_release();
LABEL_14:
        if (v42 == ++v43)
        {
          swift_bridgeObjectRelease();
          unint64_t v44 = v145;
          uint64_t v32 = v140;
          uint64_t v33 = MEMORY[0x1E4FBC860];
          goto LABEL_21;
        }
      }
    }
    __break(1u);
    swift_once();
    uint64_t v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.pommes);
    id v49 = 0;
    id v50 = 0;
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    BOOL v53 = os_log_type_enabled(v51, v52);
    a2 = v122;
    if (v53)
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      v144[0] = v55;
      *(_DWORD *)uint64_t v54 = 136315138;
      uint64_t v146 = 0;
      id v56 = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v57 = String.init<A>(describing:)();
      uint64_t v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C8F83000, v51, v52, "ConversionUtils.convertUserDialogActToTasks error: %s", v54, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB77E470](v55, -1, -1);
      MEMORY[0x1CB77E470](v54, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    unint64_t v47 = MEMORY[0x1E4FBC860];
LABEL_26:
    uint64_t v59 = v130;
    swift_retain();
    uint64_t v60 = specialized Sequence.first(where:)(v47, v59);
    swift_bridgeObjectRelease();
    swift_release();
    if (v60)
    {
      uint64_t v118 = v7;
      uint64_t v119 = v5;
      uint64_t v61 = one-time initialization token for pommes;
      swift_retain();
      if (v61 != -1) {
        swift_once();
      }
      uint64_t v141 = 0;
      uint64_t v62 = type metadata accessor for Logger();
      uint64_t v63 = __swift_project_value_buffer(v62, (uint64_t)static Logger.pommes);
      swift_retain_n();
      uint64_t v142 = v63;
      uint64_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = swift_slowAlloc();
        uint64_t v110 = v6;
        uint64_t v67 = v66;
        uint64_t v68 = swift_slowAlloc();
        v144[0] = v68;
        *(_DWORD *)uint64_t v67 = 136315394;
        uint64_t v138 = v20;
        uint64_t v69 = UsoTask.verbString.getter();
        uint64_t v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v144);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v67 + 12) = 2080;
        uint64_t v71 = UsoTask.baseEntityAsString.getter();
        uint64_t v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, v144);
        uint64_t v20 = v138;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C8F83000, v64, v65, "PlayRestOfThisAlbumPreflightClient matched task: %s::%s", (uint8_t *)v67, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1CB77E470](v68, -1, -1);
        uint64_t v73 = v67;
        uint64_t v6 = v110;
        MEMORY[0x1CB77E470](v73, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v75 = v129;
      uint64_t v76 = *(void *)(v131 + v123);
      uint64_t v77 = (uint64_t)v125;
      uint64_t v78 = v124;
      if (*(void *)(v76 + 16))
      {
        uint64_t v79 = v117;
        (*(void (**)(char *, unint64_t, uint64_t))(v124 + 16))(v117, v76 + ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80)), v20);
        uint64_t v80 = Siri_Nlu_External_Span.matcherNames.getter();
        (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v20);
        if (*(void *)(v80 + 16))
        {
          unint64_t v81 = *(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16);
          unint64_t v82 = v80 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
          uint64_t v83 = v17;
          uint64_t v84 = v143;
          v81(v77, v82, v143);
          uint64_t v85 = 0;
        }
        else
        {
          uint64_t v85 = 1;
          uint64_t v83 = v17;
          uint64_t v84 = v143;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v77, v85, 1, v84);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v77, 1, v84) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v77, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        }
        else
        {
          uint64_t v86 = v77;
          uint64_t v87 = v112;
          Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
          (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v86, v84);
          uint64_t v88 = v111;
          Siri_Nlu_External_UserStatedTask.task.getter();
          (*(void (**)(char *, uint64_t))(v113 + 8))(v87, v114);
          uint64_t v89 = v115;
          uint64_t v90 = v116;
          (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v75, v88, v116);
          uint64_t v91 = v75;
          uint64_t v92 = (void *)v141;
          static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
          if (v92)
          {

            (*(void (**)(char *, uint64_t))(v89 + 8))(v91, v90);
          }
          else
          {
            uint64_t v110 = v6;
            swift_retain_n();
            uint64_t v93 = Logger.logObject.getter();
            os_log_type_t v94 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v93, v94))
            {
              os_log_type_t v95 = (uint8_t *)swift_slowAlloc();
              uint64_t v96 = swift_slowAlloc();
              v144[0] = v96;
              *(_DWORD *)os_log_type_t v95 = 136315138;
              uint64_t v97 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
              uint64_t v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, v144);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1C8F83000, v93, v94, "Likely matched graph: %s", v95, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1CB77E470](v96, -1, -1);
              MEMORY[0x1CB77E470](v95, -1, -1);
              swift_release();

              (*(void (**)(char *, uint64_t))(v115 + 8))(v129, v116);
            }
            else
            {
              swift_release_n();

              (*(void (**)(char *, uint64_t))(v89 + 8))(v129, v116);
            }
            uint64_t v6 = v110;
          }
        }
      }
      uint64_t v99 = v131;
      uint64_t v100 = (uint64_t *)(v131 + *(int *)(v126 + 32));
      uint64_t v101 = *v100;
      uint64_t v102 = v100[1];
      uint64_t v103 = v127;
      PommesSearchRequest.pommesCandidateId.getter(v127);
      uint64_t v104 = type metadata accessor for PommesCandidateId();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v103, 0, 1, v104);
      uint64_t v105 = v128;
      default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v128);
      uint64_t v74 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v99, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], v101, v102, v103, v105, 0x6867696C66657270, 0xE900000000000074, 0xD000000000000022, 0x80000001C91968A0);
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v105, v6);
      outlined destroy of MediaUserStateCenter?(v103, &demangling cache variable for type metadata for PommesCandidateId?);
      if (v74)
      {
        swift_release_n();
        goto LABEL_33;
      }
      uint64_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v106, v107))
      {
        uint64_t v108 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v108 = 0;
        _os_log_impl(&dword_1C8F83000, v106, v107, "PlayRestOfThisAlbumPreflightClient#ignore could not build PommesResponse with given parameters", v108, 2u);
        MEMORY[0x1CB77E470](v108, -1, -1);
        swift_release_n();
      }
      else
      {

        swift_release_n();
      }
    }
  }
  uint64_t v74 = 0;
LABEL_33:
  *a2 = v74;
}

uint64_t Siri_Nlu_External_UserParse.resumeMediaItemRelevantTasks()()
{
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = Siri_Nlu_External_Span.matcherNames.getter();
  uint64_t v6 = MEMORY[0x1E4FBC860];
  v23[0] = MEMORY[0x1E4FBC860];
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7)
  {
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v17 = MEMORY[0x1E4FBC860];
LABEL_7:
    uint64_t v24 = v6;
    if (v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v18)
      {
LABEL_9:
        if (v18 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v19 = 0;
        while (1)
        {
          swift_retain();
          static UsoTask_CodegenConverter.convert(task:)();
          if (!v23[3]) {
            break;
          }
          type metadata accessor for UsoTask_resume_common_MediaItem();
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_17;
          }
          swift_release();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
LABEL_12:
          if (v18 == ++v19)
          {
            swift_bridgeObjectRelease();
            return v24;
          }
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_17:
        swift_release();
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  uint64_t v8 = v2 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 64);
  uint64_t v20 = v5;
  uint64_t v11 = v5 + ((v10 + 32) & ~v10);
  uint64_t v12 = (void (**)(char *, uint64_t))(v8 - 8);
  uint64_t v21 = *(void *)(v8 + 56);
  uint64_t v22 = v9;
  while (1)
  {
    uint64_t v13 = v8;
    v22(v4, v11, v1);
    uint64_t v14 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    if (v0) {
      break;
    }
    unint64_t v15 = v14;
    (*v12)(v4, v1);
    specialized Array.append<A>(contentsOf:)(v15);
    v11 += v21;
    --v7;
    uint64_t v8 = v13;
    if (!v7)
    {
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v17 = v23[0];
      uint64_t v6 = MEMORY[0x1E4FBC860];
      goto LABEL_7;
    }
  }
  (*v12)(v4, v1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PlayRestOfThisAlbumPreflightClient.deinit()
{
  return v0;
}

uint64_t PlayRestOfThisAlbumPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t PlayRestOfThisAlbumPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PlayRestOfThisAlbumPreflightClient.init()()
{
  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance PlayRestOfThisAlbumPreflightClient()
{
  return 0xD000000000000022;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance PlayRestOfThisAlbumPreflightClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t type metadata accessor for PlayRestOfThisAlbumPreflightClient()
{
  return self;
}

uint64_t method lookup function for PlayRestOfThisAlbumPreflightClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PlayRestOfThisAlbumPreflightClient);
}

uint64_t dispatch thunk of PlayRestOfThisAlbumPreflightClient.isPlayRestOfThisAlbumTask(task:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of PlayRestOfThisAlbumPreflightClient.handle(pommesSearchRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of PlayRestOfThisAlbumPreflightClient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t lazy protocol witness table accessor for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OpenAppOnTVPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static OpenAppOnTVPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001ALL;
}

void OpenAppOnTVPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v148 = a2;
  uint64_t v4 = 0;
  uint64_t v140 = *v2;
  uint64_t v141 = type metadata accessor for PommesSearchReason();
  uint64_t v139 = *(void *)(v141 - 8);
  MEMORY[0x1F4188790](v141);
  uint64_t v137 = (uint64_t)&v134 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v136 = (uint64_t)&v134 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v8 = *(void *)(v164 - 8);
  MEMORY[0x1F4188790](v164);
  uint64_t v10 = (char *)&v134 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v11 = *(void *)(v163 - 8);
  MEMORY[0x1F4188790](v163);
  uint64_t v162 = (char *)&v134 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v134 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for PommesSearchRequest(0);
  uint64_t v18 = *(int *)(v17 + 76);
  uint64_t v138 = a1;
  uint64_t v19 = *(void *)(a1 + v18);
  unint64_t v20 = MEMORY[0x1E4FBC860];
  uint64_t v147 = *(void *)(v19 + 16);
  if (!v147)
  {
    uint64_t v69 = (void *)MEMORY[0x1E4FBC860];
LABEL_58:
    uint64_t v70 = v69[2];
    if (v70)
    {
      uint64_t v135 = v17;
      uint64_t v71 = v69 + 4;
      uint64_t v150 = v69;
      swift_bridgeObjectRetain();
      int64_t v58 = 0;
      uint64_t v168 = MEMORY[0x1E4FBC840] + 8;
      uint64_t v163 = (uint64_t)v71;
      uint64_t v164 = v70;
      do
      {
        unint64_t v72 = (void **)&v71[3 * v58];
        uint64_t v74 = *v72;
        uint64_t v73 = v72[1];
        int64_t v75 = (int64_t)v72[2];
        swift_retain();
        swift_bridgeObjectRetain();
        static UsoTask_CodegenConverter.convert(task:)();
        outlined init with copy of Any?((uint64_t)&v171, (uint64_t)v170);
        if (v170[3])
        {
          type metadata accessor for UsoTask_open_common_App();
          if (swift_dynamicCast())
          {
            uint64_t v167 = v73;
            swift_release();
            uint64_t v76 = byte_1F236EE70;
            uint64_t v77 = 0xEC00000073656974;
            uint64_t v78 = UsoTask.arguments.getter();
            uint64_t v79 = 0x69746E4572657375;
            switch(v76)
            {
              case 1:
                uint64_t v77 = 0xE600000000000000;
                uint64_t v79 = 0x746567726174;
                if (!*(void *)(v78 + 16)) {
                  goto LABEL_84;
                }
                goto LABEL_69;
              case 2:
                uint64_t v79 = 0x636E657265666572;
                uint64_t v77 = 0xE900000000000065;
                goto LABEL_68;
              case 3:
                uint64_t v77 = 0xE700000000000000;
                uint64_t v79 = 0x72656767697274;
                if (!*(void *)(v78 + 16)) {
                  goto LABEL_84;
                }
                goto LABEL_69;
              default:
LABEL_68:
                if (!*(void *)(v78 + 16)) {
                  goto LABEL_84;
                }
LABEL_69:
                unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v77);
                if (v81)
                {
                  unint64_t v82 = *(void *)(*(void *)(v78 + 56) + 8 * v80);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v170[0] = v20;
                  if (v82 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
                  }
                  else
                  {
                    uint64_t v83 = *(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    swift_bridgeObjectRetain();
                  }
                  if (v83)
                  {
                    uint64_t v165 = v74;
                    type metadata accessor for UsoEntity_common_App();
                    if (v83 < 1) {
                      goto LABEL_152;
                    }
                    int64_t v166 = v75;
                    for (uint64_t i = 0; i != v83; ++i)
                    {
                      if ((v82 & 0xC000000000000001) != 0) {
                        MEMORY[0x1CB77D510](i, v82);
                      }
                      else {
                        swift_retain();
                      }
                      dispatch thunk of UsoValue.getAsEntity()();
                      static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
                      swift_release();
                      uint64_t v85 = swift_release();
                      if (v169)
                      {
                        MEMORY[0x1CB77CD90](v85);
                        if (*(void *)((v170[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v170[0] & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
                          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                        specialized Array._endMutation()();
                      }
                    }
                    swift_bridgeObjectRelease();
                    unint64_t v92 = v170[0];
                    unint64_t v20 = MEMORY[0x1E4FBC860];
                    uint64_t v74 = v165;
                    int64_t v75 = v166;
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    unint64_t v20 = MEMORY[0x1E4FBC860];
                    unint64_t v92 = MEMORY[0x1E4FBC860];
                  }
                  swift_bridgeObjectRelease();
                  v170[0] = v20;
                  swift_bridgeObjectRetain();
                  specialized Array.append<A>(contentsOf:)(v92);
                  swift_bridgeObjectRelease();
                  unint64_t v86 = v170[0];
                  uint64_t v71 = (void *)v163;
                  uint64_t v70 = v164;
                  if (!(v170[0] >> 62))
                  {
LABEL_85:
                    uint64_t v87 = *(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    goto LABEL_86;
                  }
                }
                else
                {
LABEL_84:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v86 = v20;
                  if (!(v20 >> 62)) {
                    goto LABEL_85;
                  }
                }
                swift_bridgeObjectRetain();
                uint64_t v87 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
LABEL_86:
                swift_bridgeObjectRelease();
                if (!v87) {
                  goto LABEL_61;
                }
                break;
            }
            uint64_t v88 = byte_1F236EE98;
            uint64_t v89 = 0xEC00000073656974;
            uint64_t v90 = UsoTask.arguments.getter();
            uint64_t v91 = 0x69746E4572657375;
            switch(v88)
            {
              case 1:
                uint64_t v89 = 0xE600000000000000;
                uint64_t v91 = 0x746567726174;
                if (*(void *)(v90 + 16)) {
                  goto LABEL_93;
                }
                goto LABEL_108;
              case 2:
                uint64_t v91 = 0x636E657265666572;
                uint64_t v89 = 0xE900000000000065;
                goto LABEL_92;
              case 3:
                uint64_t v89 = 0xE700000000000000;
                uint64_t v91 = 0x72656767697274;
                if (!*(void *)(v90 + 16)) {
                  goto LABEL_108;
                }
                goto LABEL_93;
              default:
LABEL_92:
                if (!*(void *)(v90 + 16)) {
                  goto LABEL_108;
                }
LABEL_93:
                unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(v91, v89);
                if (v94)
                {
                  unint64_t v95 = *(void *)(*(void *)(v90 + 56) + 8 * v93);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v170[0] = v20;
                  if (v95 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v96 = _CocoaArrayWrapper.endIndex.getter();
                  }
                  else
                  {
                    uint64_t v96 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    swift_bridgeObjectRetain();
                  }
                  if (v96)
                  {
                    uint64_t v165 = v74;
                    type metadata accessor for UsoEntity_common_UserEntity();
                    if (v96 < 1) {
                      goto LABEL_154;
                    }
                    int64_t v166 = v75;
                    for (uint64_t j = 0; j != v96; ++j)
                    {
                      if ((v95 & 0xC000000000000001) != 0) {
                        MEMORY[0x1CB77D510](j, v95);
                      }
                      else {
                        swift_retain();
                      }
                      dispatch thunk of UsoValue.getAsEntity()();
                      static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
                      swift_release();
                      uint64_t v98 = swift_release();
                      if (v169)
                      {
                        MEMORY[0x1CB77CD90](v98);
                        if (*(void *)((v170[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v170[0] & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
                          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                        specialized Array._endMutation()();
                      }
                    }
                    swift_bridgeObjectRelease();
                    unint64_t v101 = v170[0];
                    unint64_t v20 = MEMORY[0x1E4FBC860];
                    int64_t v75 = v166;
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    unint64_t v20 = MEMORY[0x1E4FBC860];
                    unint64_t v101 = MEMORY[0x1E4FBC860];
                  }
                  swift_bridgeObjectRelease();
                  v170[0] = v20;
                  swift_bridgeObjectRetain();
                  specialized Array.append<A>(contentsOf:)(v101);
                  swift_bridgeObjectRelease();
                  unint64_t v99 = v170[0];
                  uint64_t v71 = (void *)v163;
                  uint64_t v70 = v164;
                  if (!(v170[0] >> 62))
                  {
LABEL_109:
                    uint64_t v100 = *(void *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    goto LABEL_110;
                  }
                }
                else
                {
LABEL_108:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v99 = v20;
                  if (!(v20 >> 62)) {
                    goto LABEL_109;
                  }
                }
                swift_bridgeObjectRetain();
                uint64_t v100 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
LABEL_110:
                swift_bridgeObjectRelease();
                if (!v100) {
                  break;
                }
                outlined destroy of MediaUserStateCenter?((uint64_t)&v171, (uint64_t *)&demangling cache variable for type metadata for Any?);
                swift_bridgeObjectRelease_n();
                int64_t v58 = v75;
                uint64_t v117 = one-time initialization token for pommes;
                swift_retain();
                swift_bridgeObjectRetain();
                if (v117 == -1) {
                  goto LABEL_133;
                }
                goto LABEL_155;
            }
          }
        }
        else
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)v170, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
LABEL_61:
        ++v58;
        outlined destroy of MediaUserStateCenter?((uint64_t)&v171, (uint64_t *)&demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
        swift_release();
      }
      while (v58 != v70);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    goto LABEL_127;
  }
  uint64_t v135 = v17;
  uint64_t v21 = *(void *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
  uint64_t v22 = v19 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  uint64_t v156 = v14 + 16;
  uint64_t v155 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v23 = v22;
  uint64_t v157 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v154 = (void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v24 = *(void *)(v21 + 72);
  uint64_t v142 = v19;
  swift_bridgeObjectRetain_n();
  uint64_t v25 = 0;
  uint64_t v150 = (void *)v20;
  uint64_t v152 = v13;
  uint64_t v153 = v16;
  uint64_t v144 = v14;
  uint64_t v145 = v23;
  uint64_t v143 = v24;
  uint64_t v151 = v10;
  while (1)
  {
    uint64_t v149 = v25;
    uint64_t v26 = Siri_Nlu_External_Span.matcherNames.getter();
    uint64_t v158 = *(void *)(v26 + 16);
    if (v158)
    {
      unint64_t v161 = v26 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      uint64_t v27 = *(void *)(v14 + 72);
      uint64_t v159 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
      uint64_t v160 = v27;
      uint64_t v146 = v26;
      swift_bridgeObjectRetain();
      int64_t v28 = 0;
      uint64_t v167 = (void *)v20;
      while (1)
      {
        v159(v16, v161 + v160 * v28, v13);
        char v29 = v162;
        Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
        Siri_Nlu_External_UserStatedTask.task.getter();
        (*v155)(v29, v163);
        static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
        if (v4)
        {
          (*v157)(v10, v164);
          (*v154)(v16, v13);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          if (one-time initialization token for pommes != -1) {
            goto LABEL_150;
          }
          goto LABEL_122;
        }
        (*v157)(v10, v164);
        uint64_t v168 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
        uint64_t v31 = v30;
        unint64_t v32 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
        unint64_t v33 = v32;
        if (v32 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          int64_t v166 = v28;
          if (!v34)
          {
LABEL_20:
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v36 = v20;
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v34 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
          int64_t v166 = v28;
          if (!v34) {
            goto LABEL_20;
          }
        }
        uint64_t v171 = v20;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34 & ~(v34 >> 63), 0);
        if (v34 < 0) {
          goto LABEL_144;
        }
        uint64_t v165 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = v171;
        do
        {
          if ((v33 & 0xC000000000000001) != 0)
          {
            uint64_t v37 = MEMORY[0x1CB77D510](v35, v33);
          }
          else
          {
            uint64_t v37 = *(void *)(v33 + 8 * v35 + 32);
            swift_retain();
          }
          swift_bridgeObjectRetain();
          uint64_t v171 = v36;
          unint64_t v39 = *(void *)(v36 + 16);
          unint64_t v38 = *(void *)(v36 + 24);
          if (v39 >= v38 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
            uint64_t v36 = v171;
          }
          ++v35;
          *(void *)(v36 + 16) = v39 + 1;
          unint64_t v40 = (void *)(v36 + 24 * v39);
          uint64_t v41 = v168;
          v40[4] = v37;
          v40[5] = v41;
          v40[6] = v31;
        }
        while (v34 != v35);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v20 = MEMORY[0x1E4FBC860];
        uint64_t v10 = v151;
        uint64_t v4 = v165;
        uint64_t v13 = v152;
LABEL_21:
        uint64_t v16 = v153;
        (*v154)(v153, v13);
        uint64_t v42 = *(void *)(v36 + 16);
        int64_t v43 = v167[2];
        int64_t v44 = v43 + v42;
        if (__OFADD__(v43, v42))
        {
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
          goto LABEL_147;
        }
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v46 = v167;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v44 > v167[3] >> 1)
        {
          if (v43 <= v44) {
            int64_t v47 = v43 + v42;
          }
          else {
            int64_t v47 = v43;
          }
          unint64_t v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)isUniquelyReferenced_nonNull_native, v47, 1, v167);
        }
        int64_t v48 = v166;
        uint64_t v49 = *(void *)(v36 + 16);
        uint64_t v167 = v46;
        if (v49)
        {
          uint64_t v50 = v46[2];
          if ((v46[3] >> 1) - v50 < v42) {
            goto LABEL_145;
          }
          unint64_t v51 = (unint64_t)&v46[3 * v50 + 4];
          if (v36 + 32 < v51 + 24 * v42 && v51 < v36 + 32 + 24 * v42) {
            goto LABEL_156;
          }
          swift_arrayInitWithCopy();
          if (v42)
          {
            uint64_t v52 = v167[2];
            BOOL v53 = __OFADD__(v52, v42);
            uint64_t v54 = v52 + v42;
            if (v53) {
              goto LABEL_146;
            }
            v167[2] = v54;
          }
        }
        else if (v42)
        {
          goto LABEL_143;
        }
        int64_t v28 = v48 + 1;
        swift_bridgeObjectRelease();
        if (v28 == v158)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v55 = v167;
          goto LABEL_37;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v55 = (void *)v20;
LABEL_37:
    uint64_t v56 = v55[2];
    int64_t v57 = v150[2];
    int64_t v58 = v57 + v56;
    if (__OFADD__(v57, v56)) {
      break;
    }
    uint64_t v59 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v60 = v150;
    if ((v59 & 1) == 0 || v58 > v150[3] >> 1)
    {
      if (v57 <= v58) {
        int64_t v61 = v57 + v56;
      }
      else {
        int64_t v61 = v57;
      }
      uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)v59, v61, 1, v150);
    }
    uint64_t v62 = v55[2];
    uint64_t v150 = v60;
    if (v62)
    {
      uint64_t v63 = v60[2];
      if ((v60[3] >> 1) - v63 < v56)
      {
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        swift_once();
LABEL_133:
        uint64_t v118 = type metadata accessor for Logger();
        __swift_project_value_buffer(v118, (uint64_t)static Logger.pommes);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v119 = Logger.logObject.getter();
        os_log_type_t v120 = static os_log_type_t.info.getter();
        BOOL v121 = os_log_type_enabled(v119, v120);
        int64_t v166 = v58;
        if (v121)
        {
          uint64_t v122 = (uint8_t *)swift_slowAlloc();
          uint64_t v123 = swift_slowAlloc();
          uint64_t v171 = v123;
          *(_DWORD *)uint64_t v122 = 136315138;
          swift_bridgeObjectRetain();
          v170[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v167, v58, &v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C8F83000, v119, v120, "#OpenAppOnTV: Found matching task from NLv4 parse:\n%s", v122, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1CB77E470](v123, -1, -1);
          MEMORY[0x1CB77E470](v122, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
        uint64_t v116 = v148;
        uint64_t v124 = v138;
        uint64_t v125 = (uint64_t *)(v138 + *(int *)(v135 + 32));
        uint64_t v126 = *v125;
        uint64_t v127 = v125[1];
        uint64_t v128 = v136;
        PommesSearchRequest.pommesCandidateId.getter(v136);
        uint64_t v129 = type metadata accessor for PommesCandidateId();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v129 - 8) + 56))(v128, 0, 1, v129);
        uint64_t v130 = v137;
        default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v137);
        uint64_t v115 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v124, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], v126, v127, v128, v130, 0x6867696C66657270, 0xE900000000000074, 0xD00000000000001ALL, 0x80000001C9196910);
        (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v130, v141);
        outlined destroy of MediaUserStateCenter?(v128, &demangling cache variable for type metadata for PommesCandidateId?);
        if (v115)
        {
          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
        else
        {
          uint64_t v131 = Logger.logObject.getter();
          os_log_type_t v132 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v131, v132))
          {
            uint64_t v133 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v133 = 0;
            _os_log_impl(&dword_1C8F83000, v131, v132, "Unable to construct preflight response for “open app on TV” task.", v133, 2u);
            MEMORY[0x1CB77E470](v133, -1, -1);
            swift_bridgeObjectRelease_n();
            swift_release_n();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_release_n();
          }
          uint64_t v115 = 0;
        }
        goto LABEL_131;
      }
      unint64_t v64 = (unint64_t)&v60[3 * v63 + 4];
      if ((unint64_t)(v55 + 4) < v64 + 24 * v56 && v64 < (unint64_t)&v55[3 * v56 + 4])
      {
LABEL_156:
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1C9033B3CLL);
      }
      swift_arrayInitWithCopy();
      if (v56)
      {
        uint64_t v66 = v150[2];
        BOOL v53 = __OFADD__(v66, v56);
        uint64_t v67 = v66 + v56;
        if (v53) {
          goto LABEL_153;
        }
        void v150[2] = v67;
      }
    }
    else if (v56)
    {
      goto LABEL_149;
    }
    uint64_t v68 = v149 + 1;
    swift_bridgeObjectRelease();
    uint64_t v25 = v68;
    uint64_t v14 = v144;
    if (v68 == v147)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v17 = v135;
      uint64_t v69 = v150;
      goto LABEL_58;
    }
  }
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  swift_once();
LABEL_122:
  uint64_t v102 = type metadata accessor for Logger();
  __swift_project_value_buffer(v102, (uint64_t)static Logger.pommes);
  id v103 = v4;
  id v104 = v4;
  uint64_t v105 = Logger.logObject.getter();
  os_log_type_t v106 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v105, v106))
  {
    os_log_type_t v107 = (uint8_t *)swift_slowAlloc();
    uint64_t v108 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v107 = 138412290;
    id v109 = v4;
    uint64_t v110 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v171 = v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v108 = v110;

    _os_log_impl(&dword_1C8F83000, v105, v106, "#OpenAppOnTV: Error scanning for matching USO tasks. %@", v107, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1CB77E470](v108, -1, -1);
    MEMORY[0x1CB77E470](v107, -1, -1);
  }
  else
  {
  }
LABEL_127:
  if (one-time initialization token for pommes != -1) {
LABEL_147:
  }
    swift_once();
  uint64_t v111 = type metadata accessor for Logger();
  __swift_project_value_buffer(v111, (uint64_t)static Logger.pommes);
  uint64_t v112 = Logger.logObject.getter();
  os_log_type_t v113 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v112, v113))
  {
    uint64_t v114 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v114 = 0;
    _os_log_impl(&dword_1C8F83000, v112, v113, "#OpenAppOnTV: No matching task.", v114, 2u);
    MEMORY[0x1CB77E470](v114, -1, -1);
  }

  uint64_t v115 = 0;
  uint64_t v116 = v148;
LABEL_131:
  uint64_t *v116 = v115;
}